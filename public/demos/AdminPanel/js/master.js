!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=149)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t,a;function r(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function m(e,t){var n,a=[];for(n=0;n<e.length;++n)a.push(t(e[n],n));return a}function f(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,a){return Yt(e,t,n,a,!0).utc()}function _(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=_(e),n=a.call(t.parsedDateParts,(function(e){return null!=e})),r=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(r=r&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return r;e._isValid=r}return e._isValid}function y(e){var t=h(NaN);return null!=e?f(_(t),e):_(t).userInvalidated=!0,t}a=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),a=n.length>>>0;for(t=0;t<a;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var g=r.momentProperties=[],v=!1;function M(e,t){var n,a,r;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=_(t)),l(t._locale)||(e._locale=t._locale),g.length>0)for(n=0;n<g.length;n++)l(r=t[a=g[n]])||(e[a]=r);return e}function L(e){M(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===v&&(v=!0,r.updateOffset(this),v=!1)}function k(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function b(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function w(e,t){var n=!0;return f((function(){if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){var a,i,s,d=[];for(i=0;i<arguments.length;i++){if(a="","object"==typeof arguments[i]){for(s in a+="\n["+i+"] ",arguments[0])o(arguments[0],s)&&(a+=s+": "+arguments[0][s]+", ");a=a.slice(0,-2)}else a=arguments[i];d.push(a)}b(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var Y,D={};function T(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),D[e]||(b(t),D[e]=!0)}function x(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function S(e,t){var n,a=f({},e);for(n in t)o(t,n)&&(s(e[n])&&s(t[n])?(a[n]={},f(a[n],e[n]),f(a[n],t[n])):null!=t[n]?a[n]=t[n]:delete a[n]);for(n in e)o(e,n)&&!o(t,n)&&s(e[n])&&(a[n]=f({},a[n]));return a}function j(e){null!=e&&this.set(e)}function C(e,t,n){var a=""+Math.abs(e),r=t-a.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+a}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,Y=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};var H=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,E=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,A={},O={};function P(e,t,n,a){var r=a;"string"==typeof a&&(r=function(){return this[a]()}),e&&(O[e]=r),t&&(O[t[0]]=function(){return C(r.apply(this,arguments),t[1],t[2])}),n&&(O[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function W(e,t){return e.isValid()?(t=N(t,e.localeData()),A[t]=A[t]||function(e){var t,n,a,r=e.match(H);for(t=0,n=r.length;t<n;t++)O[r[t]]?r[t]=O[r[t]]:r[t]=(a=r[t]).match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"");return function(t){var a,i="";for(a=0;a<n;a++)i+=x(r[a])?r[a].call(t,e):r[a];return i}}(t),A[t](e)):e.localeData().invalidDate()}function N(e,t){var n=5;function a(e){return t.longDateFormat(e)||e}for(E.lastIndex=0;n>=0&&E.test(e);)e=e.replace(E,a),E.lastIndex=0,n-=1;return e}var F={};function B(e,t){var n=e.toLowerCase();F[n]=F[n+"s"]=F[t]=e}function R(e){return"string"==typeof e?F[e]||F[e.toLowerCase()]:void 0}function I(e){var t,n,a={};for(n in e)o(e,n)&&(t=R(n))&&(a[t]=e[n]);return a}var z={};function q(e,t){z[e]=t}function $(e){return e%4==0&&e%100!=0||e%400==0}function U(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function J(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=U(t)),n}function G(e,t){return function(n){return null!=n?(K(this,e,n),r.updateOffset(this,t),this):V(this,e)}}function V(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function K(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&$(e.year())&&1===e.month()&&29===e.date()?(n=J(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),ke(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var X,Q=/\d/,Z=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,ae=/\d\d?/,re=/\d\d\d\d?/,ie=/\d\d\d\d\d\d?/,se=/\d{1,3}/,oe=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,me=/Z|[+-]\d\d(?::?\d\d)?/gi,fe=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function he(e,t,n){X[e]=x(t)?t:function(e,a){return e&&n?n:t}}function _e(e,t){return o(X,e)?X[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,a,r){return t||n||a||r}))))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}X={};var ye,ge={};function ve(e,t){var n,a=t;for("string"==typeof e&&(e=[e]),u(t)&&(a=function(e,n){n[t]=J(e)}),n=0;n<e.length;n++)ge[e[n]]=a}function Me(e,t){ve(e,(function(e,n,a,r){a._w=a._w||{},t(e,a._w,a,r)}))}function Le(e,t,n){null!=t&&o(ge,e)&&ge[e](t,n._a,n,e)}function ke(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,a=(t%(n=12)+n)%n;return e+=(t-a)/12,1===a?$(e)?29:28:31-a%7%2}ye=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},P("M",["MM",2],"Mo",(function(){return this.month()+1})),P("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),P("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),B("month","M"),q("month",8),he("M",ae),he("MM",ae,Z),he("MMM",(function(e,t){return t.monthsShortRegex(e)})),he("MMMM",(function(e,t){return t.monthsRegex(e)})),ve(["M","MM"],(function(e,t){t[1]=J(e)-1})),ve(["MMM","MMMM"],(function(e,t,n,a){var r=n._locale.monthsParse(e,a,n._strict);null!=r?t[1]=r:_(n).invalidMonth=e}));var be="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),we="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Ye=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,De=fe,Te=fe;function xe(e,t,n){var a,r,i,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)i=h([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(r=ye.call(this._shortMonthsParse,s))?r:null:-1!==(r=ye.call(this._longMonthsParse,s))?r:null:"MMM"===t?-1!==(r=ye.call(this._shortMonthsParse,s))||-1!==(r=ye.call(this._longMonthsParse,s))?r:null:-1!==(r=ye.call(this._longMonthsParse,s))||-1!==(r=ye.call(this._shortMonthsParse,s))?r:null}function Se(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=J(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),ke(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function je(e){return null!=e?(Se(this,e),r.updateOffset(this,!0),this):V(this,"Month")}function Ce(){function e(e,t){return t.length-e.length}var t,n,a=[],r=[],i=[];for(t=0;t<12;t++)n=h([2e3,t]),a.push(this.monthsShort(n,"")),r.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(a.sort(e),r.sort(e),i.sort(e),t=0;t<12;t++)a[t]=pe(a[t]),r[t]=pe(r[t]);for(t=0;t<24;t++)i[t]=pe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+a.join("|")+")","i")}function He(e){return $(e)?366:365}P("Y",0,0,(function(){var e=this.year();return e<=9999?C(e,4):"+"+e})),P(0,["YY",2],0,(function(){return this.year()%100})),P(0,["YYYY",4],0,"year"),P(0,["YYYYY",5],0,"year"),P(0,["YYYYYY",6,!0],0,"year"),B("year","y"),q("year",1),he("Y",ue),he("YY",ae,Z),he("YYYY",oe,te),he("YYYYY",de,ne),he("YYYYYY",de,ne),ve(["YYYYY","YYYYYY"],0),ve("YYYY",(function(e,t){t[0]=2===e.length?r.parseTwoDigitYear(e):J(e)})),ve("YY",(function(e,t){t[0]=r.parseTwoDigitYear(e)})),ve("Y",(function(e,t){t[0]=parseInt(e,10)})),r.parseTwoDigitYear=function(e){return J(e)+(J(e)>68?1900:2e3)};var Ee=G("FullYear",!0);function Ae(e,t,n,a,r,i,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,a,r,i,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,a,r,i,s),o}function Oe(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Pe(e,t,n){var a=7+t-n;return-(7+Oe(e,0,a).getUTCDay()-t)%7+a-1}function We(e,t,n,a,r){var i,s,o=1+7*(t-1)+(7+n-a)%7+Pe(e,a,r);return o<=0?s=He(i=e-1)+o:o>He(e)?(i=e+1,s=o-He(e)):(i=e,s=o),{year:i,dayOfYear:s}}function Ne(e,t,n){var a,r,i=Pe(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return s<1?a=s+Fe(r=e.year()-1,t,n):s>Fe(e.year(),t,n)?(a=s-Fe(e.year(),t,n),r=e.year()+1):(r=e.year(),a=s),{week:a,year:r}}function Fe(e,t,n){var a=Pe(e,t,n),r=Pe(e+1,t,n);return(He(e)-a+r)/7}function Be(e,t){return e.slice(t,7).concat(e.slice(0,t))}P("w",["ww",2],"wo","week"),P("W",["WW",2],"Wo","isoWeek"),B("week","w"),B("isoWeek","W"),q("week",5),q("isoWeek",5),he("w",ae),he("ww",ae,Z),he("W",ae),he("WW",ae,Z),Me(["w","ww","W","WW"],(function(e,t,n,a){t[a.substr(0,1)]=J(e)})),P("d",0,"do","day"),P("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),P("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),P("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),P("e",0,0,"weekday"),P("E",0,0,"isoWeekday"),B("day","d"),B("weekday","e"),B("isoWeekday","E"),q("day",11),q("weekday",11),q("isoWeekday",11),he("d",ae),he("e",ae),he("E",ae),he("dd",(function(e,t){return t.weekdaysMinRegex(e)})),he("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),he("dddd",(function(e,t){return t.weekdaysRegex(e)})),Me(["dd","ddd","dddd"],(function(e,t,n,a){var r=n._locale.weekdaysParse(e,a,n._strict);null!=r?t.d=r:_(n).invalidWeekday=e})),Me(["d","e","E"],(function(e,t,n,a){t[a]=J(e)}));var Re="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ie="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ze="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),qe=fe,$e=fe,Ue=fe;function Je(e,t,n){var a,r,i,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)i=h([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(r=ye.call(this._weekdaysParse,s))?r:null:"ddd"===t?-1!==(r=ye.call(this._shortWeekdaysParse,s))?r:null:-1!==(r=ye.call(this._minWeekdaysParse,s))?r:null:"dddd"===t?-1!==(r=ye.call(this._weekdaysParse,s))||-1!==(r=ye.call(this._shortWeekdaysParse,s))||-1!==(r=ye.call(this._minWeekdaysParse,s))?r:null:"ddd"===t?-1!==(r=ye.call(this._shortWeekdaysParse,s))||-1!==(r=ye.call(this._weekdaysParse,s))||-1!==(r=ye.call(this._minWeekdaysParse,s))?r:null:-1!==(r=ye.call(this._minWeekdaysParse,s))||-1!==(r=ye.call(this._weekdaysParse,s))||-1!==(r=ye.call(this._shortWeekdaysParse,s))?r:null}function Ge(){function e(e,t){return t.length-e.length}var t,n,a,r,i,s=[],o=[],d=[],l=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),a=pe(this.weekdaysMin(n,"")),r=pe(this.weekdaysShort(n,"")),i=pe(this.weekdays(n,"")),s.push(a),o.push(r),d.push(i),l.push(a),l.push(r),l.push(i);s.sort(e),o.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function Ve(){return this.hours()%12||12}function Ke(e,t){P(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Xe(e,t){return t._meridiemParse}P("H",["HH",2],0,"hour"),P("h",["hh",2],0,Ve),P("k",["kk",2],0,(function(){return this.hours()||24})),P("hmm",0,0,(function(){return""+Ve.apply(this)+C(this.minutes(),2)})),P("hmmss",0,0,(function(){return""+Ve.apply(this)+C(this.minutes(),2)+C(this.seconds(),2)})),P("Hmm",0,0,(function(){return""+this.hours()+C(this.minutes(),2)})),P("Hmmss",0,0,(function(){return""+this.hours()+C(this.minutes(),2)+C(this.seconds(),2)})),Ke("a",!0),Ke("A",!1),B("hour","h"),q("hour",13),he("a",Xe),he("A",Xe),he("H",ae),he("h",ae),he("k",ae),he("HH",ae,Z),he("hh",ae,Z),he("kk",ae,Z),he("hmm",re),he("hmmss",ie),he("Hmm",re),he("Hmmss",ie),ve(["H","HH"],3),ve(["k","kk"],(function(e,t,n){var a=J(e);t[3]=24===a?0:a})),ve(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ve(["h","hh"],(function(e,t,n){t[3]=J(e),_(n).bigHour=!0})),ve("hmm",(function(e,t,n){var a=e.length-2;t[3]=J(e.substr(0,a)),t[4]=J(e.substr(a)),_(n).bigHour=!0})),ve("hmmss",(function(e,t,n){var a=e.length-4,r=e.length-2;t[3]=J(e.substr(0,a)),t[4]=J(e.substr(a,2)),t[5]=J(e.substr(r)),_(n).bigHour=!0})),ve("Hmm",(function(e,t,n){var a=e.length-2;t[3]=J(e.substr(0,a)),t[4]=J(e.substr(a))})),ve("Hmmss",(function(e,t,n){var a=e.length-4,r=e.length-2;t[3]=J(e.substr(0,a)),t[4]=J(e.substr(a,2)),t[5]=J(e.substr(r))}));var Qe,Ze=G("Hours",!0),et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:be,monthsShort:we,week:{dow:0,doy:6},weekdays:Re,weekdaysMin:ze,weekdaysShort:Ie,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function at(e,t){var n,a=Math.min(e.length,t.length);for(n=0;n<a;n+=1)if(e[n]!==t[n])return n;return a}function rt(e){return e?e.toLowerCase().replace("_","-"):e}function it(t){var a=null;if(void 0===tt[t]&&void 0!==e&&e&&e.exports)try{a=Qe._abbr,n(156)("./"+t),st(a)}catch(e){tt[t]=null}return tt[t]}function st(e,t){var n;return e&&((n=l(t)?dt(e):ot(e,t))?Qe=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Qe._abbr}function ot(e,t){if(null!==t){var n,a=et;if(t.abbr=e,null!=tt[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),a=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])a=tt[t.parentLocale]._config;else{if(null==(n=it(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;a=n._config}return tt[e]=new j(S(a,t)),nt[e]&&nt[e].forEach((function(e){ot(e.name,e.config)})),st(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Qe;if(!i(e)){if(t=it(e))return t;e=[e]}return function(e){for(var t,n,a,r,i=0;i<e.length;){for(t=(r=rt(e[i]).split("-")).length,n=(n=rt(e[i+1]))?n.split("-"):null;t>0;){if(a=it(r.slice(0,t).join("-")))return a;if(n&&n.length>=t&&at(r,n)>=t-1)break;t--}i++}return Qe}(e)}function lt(e){var t,n=e._a;return n&&-2===_(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>ke(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,_(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),_(e)._overflowWeeks&&-1===t&&(t=7),_(e)._overflowWeekday&&-1===t&&(t=8),_(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,mt=/Z|[+-]\d\d(?::?\d\d)?/,ft=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],ht=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],_t=/^\/?Date\((-?\d+)/i,pt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,yt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function gt(e){var t,n,a,r,i,s,o=e._i,d=ut.exec(o)||ct.exec(o);if(d){for(_(e).iso=!0,t=0,n=ft.length;t<n;t++)if(ft[t][1].exec(d[1])){r=ft[t][0],a=!1!==ft[t][2];break}if(null==r)return void(e._isValid=!1);if(d[3]){for(t=0,n=ht.length;t<n;t++)if(ht[t][1].exec(d[3])){i=(d[2]||" ")+ht[t][0];break}if(null==i)return void(e._isValid=!1)}if(!a&&null!=i)return void(e._isValid=!1);if(d[4]){if(!mt.exec(d[4]))return void(e._isValid=!1);s="Z"}e._f=r+(i||"")+(s||""),bt(e)}else e._isValid=!1}function vt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function Mt(e){var t,n,a,r,i,s,o,d,l=pt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],a=l[3],r=l[2],i=l[5],s=l[6],o=l[7],d=[vt(n),we.indexOf(a),parseInt(r,10),parseInt(i,10),parseInt(s,10)],o&&d.push(parseInt(o,10)),t=d,!function(e,t,n){return!e||Ie.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(_(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return yt[e];if(t)return 0;var a=parseInt(n,10),r=a%100;return(a-r)/100*60+r}(l[8],l[9],l[10]),e._d=Oe.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),_(e).rfc2822=!0}else e._isValid=!1}function Lt(e,t,n){return null!=e?e:null!=t?t:n}function kt(e){var t,n,a,i,s,o=[];if(!e._d){for(a=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,a,r,i,s,o,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,s=4,n=Lt(t.GG,e._a[0],Ne(Dt(),1,4).year),a=Lt(t.W,1),((r=Lt(t.E,1))<1||r>7)&&(d=!0)):(i=e._locale._week.dow,s=e._locale._week.doy,l=Ne(Dt(),i,s),n=Lt(t.gg,e._a[0],l.year),a=Lt(t.w,l.week),null!=t.d?((r=t.d)<0||r>6)&&(d=!0):null!=t.e?(r=t.e+i,(t.e<0||t.e>6)&&(d=!0)):r=i),a<1||a>Fe(n,i,s)?_(e)._overflowWeeks=!0:null!=d?_(e)._overflowWeekday=!0:(o=We(n,a,r,i,s),e._a[0]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=Lt(e._a[0],a[0]),(e._dayOfYear>He(s)||0===e._dayOfYear)&&(_(e)._overflowDayOfYear=!0),n=Oe(s,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=a[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Oe:Ae).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(_(e).weekdayMismatch=!0)}}function bt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],_(e).empty=!0;var t,n,a,i,s,o,d=""+e._i,l=d.length,u=0;for(a=N(e._f,e._locale).match(H)||[],t=0;t<a.length;t++)i=a[t],(n=(d.match(_e(i,e))||[])[0])&&((s=d.substr(0,d.indexOf(n))).length>0&&_(e).unusedInput.push(s),d=d.slice(d.indexOf(n)+n.length),u+=n.length),O[i]?(n?_(e).empty=!1:_(e).unusedTokens.push(i),Le(i,n,e)):e._strict&&!n&&_(e).unusedTokens.push(i);_(e).charsLeftOver=l-u,d.length>0&&_(e).unusedInput.push(d),e._a[3]<=12&&!0===_(e).bigHour&&e._a[3]>0&&(_(e).bigHour=void 0),_(e).parsedDateParts=e._a.slice(0),_(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var a;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((a=e.isPM(n))&&t<12&&(t+=12),a||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(o=_(e).era)&&(e._a[0]=e._locale.erasConvertYear(o,e._a[0])),kt(e),lt(e)}else Mt(e);else gt(e)}function wt(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?y({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),k(t)?new L(lt(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,a,r,i,s,o=!1;if(0===e._f.length)return _(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)i=0,s=!1,t=M({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],bt(t),p(t)&&(s=!0),i+=_(t).charsLeftOver,i+=10*_(t).unusedTokens.length,_(t).score=i,o?i<a&&(a=i,n=t):(null==a||i<a||s)&&(a=i,n=t,s&&(o=!0));f(e,n||t)}(e):n?bt(e):function(e){var t=e._i;l(t)?e._d=new Date(r.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=_t.exec(e._i);null===t?(gt(e),!1===e._isValid&&(delete e._isValid,Mt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=m(t.slice(0),(function(e){return parseInt(e,10)})),kt(e)):s(t)?function(e){if(!e._d){var t=I(e._i),n=void 0===t.day?t.date:t.day;e._a=m([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),kt(e)}}(e):u(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function Yt(e,t,n,a,r){var o,l={};return!0!==t&&!1!==t||(a=t,t=void 0),!0!==n&&!1!==n||(a=n,n=void 0),(s(e)&&d(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=r,l._l=n,l._i=e,l._f=t,l._strict=a,(o=new L(lt(wt(l))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Dt(e,t,n,a){return Yt(e,t,n,a,!1)}r.createFromInputFallback=w("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),r.ISO_8601=function(){},r.RFC_2822=function(){};var Tt=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:y()})),xt=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:y()}));function St(e,t){var n,a;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Dt();for(n=t[0],a=1;a<t.length;++a)t[a].isValid()&&!t[a][e](n)||(n=t[a]);return n}var jt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ct(e){var t=I(e),n=t.year||0,a=t.quarter||0,r=t.month||0,i=t.week||t.isoWeek||0,s=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,a=!1;for(t in e)if(o(e,t)&&(-1===ye.call(jt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<jt.length;++n)if(e[jt[n]]){if(a)return!1;parseFloat(e[jt[n]])!==J(e[jt[n]])&&(a=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*d*60*60,this._days=+s+7*i,this._months=+r+3*a+12*n,this._data={},this._locale=dt(),this._bubble()}function Ht(e){return e instanceof Ct}function Et(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function At(e,t){P(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+C(~~(e/60),2)+t+C(~~e%60,2)}))}At("Z",":"),At("ZZ",""),he("Z",me),he("ZZ",me),ve(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Pt(me,e)}));var Ot=/([\+\-]|\d\d)/gi;function Pt(e,t){var n,a,r=(t||"").match(e);return null===r?null:0===(a=60*(n=((r[r.length-1]||[])+"").match(Ot)||["-",0,0])[1]+J(n[2]))?0:"+"===n[0]?a:-a}function Wt(e,t){var n,a;return t._isUTC?(n=t.clone(),a=(k(e)||c(e)?e.valueOf():Dt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+a),r.updateOffset(n,!1),n):Dt(e).local()}function Nt(e){return-Math.round(e._d.getTimezoneOffset())}function Ft(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var Bt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Rt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function It(e,t){var n,a,r,i,s,d,l=e,c=null;return Ht(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=Bt.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:J(c[2])*n,h:J(c[3])*n,m:J(c[4])*n,s:J(c[5])*n,ms:J(Et(1e3*c[6]))*n}):(c=Rt.exec(e))?(n="-"===c[1]?-1:1,l={y:zt(c[2],n),M:zt(c[3],n),w:zt(c[4],n),d:zt(c[5],n),h:zt(c[6],n),m:zt(c[7],n),s:zt(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(i=Dt(l.from),s=Dt(l.to),r=i.isValid()&&s.isValid()?(s=Wt(s,i),i.isBefore(s)?d=qt(i,s):((d=qt(s,i)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=r.milliseconds,l.M=r.months),a=new Ct(l),Ht(e)&&o(e,"_locale")&&(a._locale=e._locale),Ht(e)&&o(e,"_isValid")&&(a._isValid=e._isValid),a}function zt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function qt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function $t(e,t){return function(n,a){var r;return null===a||isNaN(+a)||(T(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),r=n,n=a,a=r),Ut(this,It(n,a),e),this}}function Ut(e,t,n,a){var i=t._milliseconds,s=Et(t._days),o=Et(t._months);e.isValid()&&(a=null==a||a,o&&Se(e,V(e,"Month")+o*n),s&&K(e,"Date",V(e,"Date")+s*n),i&&e._d.setTime(e._d.valueOf()+i*n),a&&r.updateOffset(e,s||o))}It.fn=Ct.prototype,It.invalid=function(){return It(NaN)};var Jt=$t(1,"add"),Gt=$t(-1,"subtract");function Vt(e){return"string"==typeof e||e instanceof String}function Kt(e){return k(e)||c(e)||Vt(e)||u(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!u(t)&&Vt(e)})).length),t&&n}(e)||function(e){var t,n,a=s(e)&&!d(e),r=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<i.length;t+=1)n=i[t],r=r||o(e,n);return a&&r}(e)||null==e}function Xt(e){var t,n=s(e)&&!d(e),a=!1,r=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<r.length;t+=1)a=a||o(e,r[t]);return n&&a}function Qt(e,t){if(e.date()<t.date())return-Qt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(n,"months");return-(n+(t-a<0?(t-a)/(a-e.clone().add(n-1,"months")):(t-a)/(e.clone().add(n+1,"months")-a)))||0}function Zt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}function nn(e,t){return(e%t+t)%t}function an(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-126227808e5:new Date(e,t,n).valueOf()}function rn(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-126227808e5:Date.UTC(e,t,n)}function sn(e,t){return t.erasAbbrRegex(e)}function on(){var e,t,n=[],a=[],r=[],i=[],s=this.eras();for(e=0,t=s.length;e<t;++e)a.push(pe(s[e].name)),n.push(pe(s[e].abbr)),r.push(pe(s[e].narrow)),i.push(pe(s[e].name)),i.push(pe(s[e].abbr)),i.push(pe(s[e].narrow));this._erasRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+a.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+r.join("|")+")","i")}function dn(e,t){P(0,[e,e.length],0,t)}function ln(e,t,n,a,r){var i;return null==e?Ne(this,a,r).year:(t>(i=Fe(e,a,r))&&(t=i),un.call(this,e,t,n,a,r))}function un(e,t,n,a,r){var i=We(e,t,n,a,r),s=Oe(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}P("N",0,0,"eraAbbr"),P("NN",0,0,"eraAbbr"),P("NNN",0,0,"eraAbbr"),P("NNNN",0,0,"eraName"),P("NNNNN",0,0,"eraNarrow"),P("y",["y",1],"yo","eraYear"),P("y",["yy",2],0,"eraYear"),P("y",["yyy",3],0,"eraYear"),P("y",["yyyy",4],0,"eraYear"),he("N",sn),he("NN",sn),he("NNN",sn),he("NNNN",(function(e,t){return t.erasNameRegex(e)})),he("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ve(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,a){var r=n._locale.erasParse(e,a,n._strict);r?_(n).era=r:_(n).invalidEra=e})),he("y",le),he("yy",le),he("yyy",le),he("yyyy",le),he("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),ve(["y","yy","yyy","yyyy"],0),ve(["yo"],(function(e,t,n,a){var r;n._locale._eraYearOrdinalRegex&&(r=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,r):t[0]=parseInt(e,10)})),P(0,["gg",2],0,(function(){return this.weekYear()%100})),P(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),dn("gggg","weekYear"),dn("ggggg","weekYear"),dn("GGGG","isoWeekYear"),dn("GGGGG","isoWeekYear"),B("weekYear","gg"),B("isoWeekYear","GG"),q("weekYear",1),q("isoWeekYear",1),he("G",ue),he("g",ue),he("GG",ae,Z),he("gg",ae,Z),he("GGGG",oe,te),he("gggg",oe,te),he("GGGGG",de,ne),he("ggggg",de,ne),Me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,a){t[a.substr(0,2)]=J(e)})),Me(["gg","GG"],(function(e,t,n,a){t[a]=r.parseTwoDigitYear(e)})),P("Q",0,"Qo","quarter"),B("quarter","Q"),q("quarter",7),he("Q",Q),ve("Q",(function(e,t){t[1]=3*(J(e)-1)})),P("D",["DD",2],"Do","date"),B("date","D"),q("date",9),he("D",ae),he("DD",ae,Z),he("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ve(["D","DD"],2),ve("Do",(function(e,t){t[2]=J(e.match(ae)[0])}));var cn=G("Date",!0);P("DDD",["DDDD",3],"DDDo","dayOfYear"),B("dayOfYear","DDD"),q("dayOfYear",4),he("DDD",se),he("DDDD",ee),ve(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=J(e)})),P("m",["mm",2],0,"minute"),B("minute","m"),q("minute",14),he("m",ae),he("mm",ae,Z),ve(["m","mm"],4);var mn=G("Minutes",!1);P("s",["ss",2],0,"second"),B("second","s"),q("second",15),he("s",ae),he("ss",ae,Z),ve(["s","ss"],5);var fn,hn,_n=G("Seconds",!1);for(P("S",0,0,(function(){return~~(this.millisecond()/100)})),P(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),P(0,["SSS",3],0,"millisecond"),P(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),P(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),P(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),P(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),P(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),P(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),B("millisecond","ms"),q("millisecond",16),he("S",se,Q),he("SS",se,Z),he("SSS",se,ee),fn="SSSS";fn.length<=9;fn+="S")he(fn,le);function pn(e,t){t[6]=J(1e3*("0."+e))}for(fn="S";fn.length<=9;fn+="S")ve(fn,pn);hn=G("Milliseconds",!1),P("z",0,0,"zoneAbbr"),P("zz",0,0,"zoneName");var yn=L.prototype;function gn(e){return e}yn.add=Jt,yn.calendar=function(e,t){1===arguments.length&&(arguments[0]?Kt(arguments[0])?(e=arguments[0],t=void 0):Xt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Dt(),a=Wt(n,this).startOf("day"),i=r.calendarFormat(this,a)||"sameElse",s=t&&(x(t[i])?t[i].call(this,n):t[i]);return this.format(s||this.localeData().calendar(i,this,Dt(n)))},yn.clone=function(){return new L(this)},yn.diff=function(e,t,n){var a,r,i;if(!this.isValid())return NaN;if(!(a=Wt(e,this)).isValid())return NaN;switch(r=6e4*(a.utcOffset()-this.utcOffset()),t=R(t)){case"year":i=Qt(this,a)/12;break;case"month":i=Qt(this,a);break;case"quarter":i=Qt(this,a)/3;break;case"second":i=(this-a)/1e3;break;case"minute":i=(this-a)/6e4;break;case"hour":i=(this-a)/36e5;break;case"day":i=(this-a-r)/864e5;break;case"week":i=(this-a-r)/6048e5;break;default:i=this-a}return n?i:U(i)},yn.endOf=function(e){var t,n;if(void 0===(e=R(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?rn:an,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-nn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-nn(t,1e3)-1}return this._d.setTime(t),r.updateOffset(this,!0),this},yn.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=W(this,e);return this.localeData().postformat(t)},yn.from=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||Dt(e).isValid())?It({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yn.fromNow=function(e){return this.from(Dt(),e)},yn.to=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||Dt(e).isValid())?It({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yn.toNow=function(e){return this.to(Dt(),e)},yn.get=function(e){return x(this[e=R(e)])?this[e]():this},yn.invalidAt=function(){return _(this).overflow},yn.isAfter=function(e,t){var n=k(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},yn.isBefore=function(e,t){var n=k(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},yn.isBetween=function(e,t,n,a){var r=k(e)?e:Dt(e),i=k(t)?t:Dt(t);return!!(this.isValid()&&r.isValid()&&i.isValid())&&(("("===(a=a||"()")[0]?this.isAfter(r,n):!this.isBefore(r,n))&&(")"===a[1]?this.isBefore(i,n):!this.isAfter(i,n)))},yn.isSame=function(e,t){var n,a=k(e)?e:Dt(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()===a.valueOf():(n=a.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},yn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},yn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},yn.isValid=function(){return p(this)},yn.lang=en,yn.locale=Zt,yn.localeData=tn,yn.max=xt,yn.min=Tt,yn.parsingFlags=function(){return f({},_(this))},yn.set=function(e,t){if("object"==typeof e){var n,a=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:z[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=I(e));for(n=0;n<a.length;n++)this[a[n].unit](e[a[n].unit])}else if(x(this[e=R(e)]))return this[e](t);return this},yn.startOf=function(e){var t,n;if(void 0===(e=R(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?rn:an,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=nn(t,6e4);break;case"second":t=this._d.valueOf(),t-=nn(t,1e3)}return this._d.setTime(t),r.updateOffset(this,!0),this},yn.subtract=Gt,yn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},yn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},yn.toDate=function(){return new Date(this.valueOf())},yn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?W(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):x(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",W(n,"Z")):W(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},yn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,a="moment",r="";return this.isLocal()||(a=0===this.utcOffset()?"moment.utc":"moment.parseZone",r="Z"),e="["+a+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=r+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(yn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),yn.toJSON=function(){return this.isValid()?this.toISOString():null},yn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},yn.unix=function(){return Math.floor(this.valueOf()/1e3)},yn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},yn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},yn.eraName=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].name;if(a[e].until<=n&&n<=a[e].since)return a[e].name}return""},yn.eraNarrow=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].narrow;if(a[e].until<=n&&n<=a[e].since)return a[e].narrow}return""},yn.eraAbbr=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].abbr;if(a[e].until<=n&&n<=a[e].since)return a[e].abbr}return""},yn.eraYear=function(){var e,t,n,a,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,a=this.clone().startOf("day").valueOf(),i[e].since<=a&&a<=i[e].until||i[e].until<=a&&a<=i[e].since)return(this.year()-r(i[e].since).year())*n+i[e].offset;return this.year()},yn.year=Ee,yn.isLeapYear=function(){return $(this.year())},yn.weekYear=function(e){return ln.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},yn.isoWeekYear=function(e){return ln.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},yn.quarter=yn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},yn.month=je,yn.daysInMonth=function(){return ke(this.year(),this.month())},yn.week=yn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},yn.isoWeek=yn.isoWeeks=function(e){var t=Ne(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},yn.weeksInYear=function(){var e=this.localeData()._week;return Fe(this.year(),e.dow,e.doy)},yn.weeksInWeekYear=function(){var e=this.localeData()._week;return Fe(this.weekYear(),e.dow,e.doy)},yn.isoWeeksInYear=function(){return Fe(this.year(),1,4)},yn.isoWeeksInISOWeekYear=function(){return Fe(this.isoWeekYear(),1,4)},yn.date=cn,yn.day=yn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},yn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},yn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},yn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},yn.hour=yn.hours=Ze,yn.minute=yn.minutes=mn,yn.second=yn.seconds=_n,yn.millisecond=yn.milliseconds=hn,yn.utcOffset=function(e,t,n){var a,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Pt(me,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(a=Nt(this)),this._offset=e,this._isUTC=!0,null!=a&&this.add(a,"m"),i!==e&&(!t||this._changeInProgress?Ut(this,It(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Nt(this)},yn.utc=function(e){return this.utcOffset(0,e)},yn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Nt(this),"m")),this},yn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Pt(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},yn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Dt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},yn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},yn.isLocal=function(){return!!this.isValid()&&!this._isUTC},yn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},yn.isUtc=Ft,yn.isUTC=Ft,yn.zoneAbbr=function(){return this._isUTC?"UTC":""},yn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},yn.dates=w("dates accessor is deprecated. Use date instead.",cn),yn.months=w("months accessor is deprecated. Use month instead",je),yn.years=w("years accessor is deprecated. Use year instead",Ee),yn.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),yn.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return M(t,this),(t=wt(t))._a?(e=t._isUTC?h(t._a):Dt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var a,r=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(a=0;a<r;a++)(n&&e[a]!==t[a]||!n&&J(e[a])!==J(t[a]))&&s++;return s+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var vn=j.prototype;function Mn(e,t,n,a){var r=dt(),i=h().set(a,t);return r[n](i,e)}function Ln(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return Mn(e,t,n,"month");var a,r=[];for(a=0;a<12;a++)r[a]=Mn(e,a,n,"month");return r}function kn(e,t,n,a){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var r,i=dt(),s=e?i._week.dow:0,o=[];if(null!=n)return Mn(t,(n+s)%7,a,"day");for(r=0;r<7;r++)o[r]=Mn(t,(r+s)%7,a,"day");return o}vn.calendar=function(e,t,n){var a=this._calendar[e]||this._calendar.sameElse;return x(a)?a.call(t,n):a},vn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(H).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},vn.invalidDate=function(){return this._invalidDate},vn.ordinal=function(e){return this._ordinal.replace("%d",e)},vn.preparse=gn,vn.postformat=gn,vn.relativeTime=function(e,t,n,a){var r=this._relativeTime[n];return x(r)?r(e,t,n,a):r.replace(/%d/i,e)},vn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return x(n)?n(t):n.replace(/%s/i,t)},vn.set=function(e){var t,n;for(n in e)o(e,n)&&(x(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},vn.eras=function(e,t){var n,a,i,s=this._eras||dt("en")._eras;for(n=0,a=s.length;n<a;++n){switch(typeof s[n].since){case"string":i=r(s[n].since).startOf("day"),s[n].since=i.valueOf()}switch(typeof s[n].until){case"undefined":s[n].until=1/0;break;case"string":i=r(s[n].until).startOf("day").valueOf(),s[n].until=i.valueOf()}}return s},vn.erasParse=function(e,t,n){var a,r,i,s,o,d=this.eras();for(e=e.toUpperCase(),a=0,r=d.length;a<r;++a)if(i=d[a].name.toUpperCase(),s=d[a].abbr.toUpperCase(),o=d[a].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return d[a];break;case"NNNN":if(i===e)return d[a];break;case"NNNNN":if(o===e)return d[a]}else if([i,s,o].indexOf(e)>=0)return d[a]},vn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?r(e.since).year():r(e.since).year()+(t-e.offset)*n},vn.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||on.call(this),e?this._erasAbbrRegex:this._erasRegex},vn.erasNameRegex=function(e){return o(this,"_erasNameRegex")||on.call(this),e?this._erasNameRegex:this._erasRegex},vn.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||on.call(this),e?this._erasNarrowRegex:this._erasRegex},vn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ye).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},vn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ye.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},vn.monthsParse=function(e,t,n){var a,r,i;if(this._monthsParseExact)return xe.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(r=h([2e3,a]),n&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[a]||(i="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[a]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[a].test(e))return a;if(n&&"MMM"===t&&this._shortMonthsParse[a].test(e))return a;if(!n&&this._monthsParse[a].test(e))return a}},vn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||Ce.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=Te),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},vn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||Ce.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=De),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},vn.week=function(e){return Ne(e,this._week.dow,this._week.doy).week},vn.firstDayOfYear=function(){return this._week.doy},vn.firstDayOfWeek=function(){return this._week.dow},vn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Be(n,this._week.dow):e?n[e.day()]:n},vn.weekdaysMin=function(e){return!0===e?Be(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},vn.weekdaysShort=function(e){return!0===e?Be(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},vn.weekdaysParse=function(e,t,n){var a,r,i;if(this._weekdaysParseExact)return Je.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(r=h([2e3,1]).day(a),n&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[a]||(i="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[a]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[a].test(e))return a;if(n&&"ddd"===t&&this._shortWeekdaysParse[a].test(e))return a;if(n&&"dd"===t&&this._minWeekdaysParse[a].test(e))return a;if(!n&&this._weekdaysParse[a].test(e))return a}},vn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ge.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},vn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ge.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=$e),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},vn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ge.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ue),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},vn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},vn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},st("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===J(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),r.lang=w("moment.lang is deprecated. Use moment.locale instead.",st),r.langData=w("moment.langData is deprecated. Use moment.localeData instead.",dt);var bn=Math.abs;function wn(e,t,n,a){var r=It(t,n);return e._milliseconds+=a*r._milliseconds,e._days+=a*r._days,e._months+=a*r._months,e._bubble()}function Yn(e){return e<0?Math.floor(e):Math.ceil(e)}function Dn(e){return 4800*e/146097}function Tn(e){return 146097*e/4800}function xn(e){return function(){return this.as(e)}}var Sn=xn("ms"),jn=xn("s"),Cn=xn("m"),Hn=xn("h"),En=xn("d"),An=xn("w"),On=xn("M"),Pn=xn("Q"),Wn=xn("y");function Nn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Fn=Nn("milliseconds"),Bn=Nn("seconds"),Rn=Nn("minutes"),In=Nn("hours"),zn=Nn("days"),qn=Nn("months"),$n=Nn("years"),Un=Math.round,Jn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Gn(e,t,n,a,r){return r.relativeTime(t||1,!!n,e,a)}var Vn=Math.abs;function Kn(e){return(e>0)-(e<0)||+e}function Xn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,a,r,i,s,o,d=Vn(this._milliseconds)/1e3,l=Vn(this._days),u=Vn(this._months),c=this.asSeconds();return c?(e=U(d/60),t=U(e/60),d%=60,e%=60,n=U(u/12),u%=12,a=d?d.toFixed(3).replace(/\.?0+$/,""):"",r=c<0?"-":"",i=Kn(this._months)!==Kn(c)?"-":"",s=Kn(this._days)!==Kn(c)?"-":"",o=Kn(this._milliseconds)!==Kn(c)?"-":"",r+"P"+(n?i+n+"Y":"")+(u?i+u+"M":"")+(l?s+l+"D":"")+(t||e||d?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(d?o+a+"S":"")):"P0D"}var Qn=Ct.prototype;return Qn.isValid=function(){return this._isValid},Qn.abs=function(){var e=this._data;return this._milliseconds=bn(this._milliseconds),this._days=bn(this._days),this._months=bn(this._months),e.milliseconds=bn(e.milliseconds),e.seconds=bn(e.seconds),e.minutes=bn(e.minutes),e.hours=bn(e.hours),e.months=bn(e.months),e.years=bn(e.years),this},Qn.add=function(e,t){return wn(this,e,t,1)},Qn.subtract=function(e,t){return wn(this,e,t,-1)},Qn.as=function(e){if(!this.isValid())return NaN;var t,n,a=this._milliseconds;if("month"===(e=R(e))||"quarter"===e||"year"===e)switch(t=this._days+a/864e5,n=this._months+Dn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Tn(this._months)),e){case"week":return t/7+a/6048e5;case"day":return t+a/864e5;case"hour":return 24*t+a/36e5;case"minute":return 1440*t+a/6e4;case"second":return 86400*t+a/1e3;case"millisecond":return Math.floor(864e5*t)+a;default:throw new Error("Unknown unit "+e)}},Qn.asMilliseconds=Sn,Qn.asSeconds=jn,Qn.asMinutes=Cn,Qn.asHours=Hn,Qn.asDays=En,Qn.asWeeks=An,Qn.asMonths=On,Qn.asQuarters=Pn,Qn.asYears=Wn,Qn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*J(this._months/12):NaN},Qn._bubble=function(){var e,t,n,a,r,i=this._milliseconds,s=this._days,o=this._months,d=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*Yn(Tn(o)+s),s=0,o=0),d.milliseconds=i%1e3,e=U(i/1e3),d.seconds=e%60,t=U(e/60),d.minutes=t%60,n=U(t/60),d.hours=n%24,s+=U(n/24),r=U(Dn(s)),o+=r,s-=Yn(Tn(r)),a=U(o/12),o%=12,d.days=s,d.months=o,d.years=a,this},Qn.clone=function(){return It(this)},Qn.get=function(e){return e=R(e),this.isValid()?this[e+"s"]():NaN},Qn.milliseconds=Fn,Qn.seconds=Bn,Qn.minutes=Rn,Qn.hours=In,Qn.days=zn,Qn.weeks=function(){return U(this.days()/7)},Qn.months=qn,Qn.years=$n,Qn.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,a,r=!1,i=Jn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(r=e),"object"==typeof t&&(i=Object.assign({},Jn,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),n=this.localeData(),a=function(e,t,n,a){var r=It(e).abs(),i=Un(r.as("s")),s=Un(r.as("m")),o=Un(r.as("h")),d=Un(r.as("d")),l=Un(r.as("M")),u=Un(r.as("w")),c=Un(r.as("y")),m=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(m=m||u<=1&&["w"]||u<n.w&&["ww",u]),(m=m||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,m[3]=+e>0,m[4]=a,Gn.apply(null,m)}(this,!r,i,n),r&&(a=n.pastFuture(+this,a)),n.postformat(a)},Qn.toISOString=Xn,Qn.toString=Xn,Qn.toJSON=Xn,Qn.locale=Zt,Qn.localeData=tn,Qn.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Xn),Qn.lang=en,P("X",0,0,"unix"),P("x",0,0,"valueOf"),he("x",ue),he("X",/[+-]?\d+(\.\d{1,3})?/),ve("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ve("x",(function(e,t,n){n._d=new Date(J(e))})),r.version="2.29.1",t=Dt,r.fn=yn,r.min=function(){var e=[].slice.call(arguments,0);return St("isBefore",e)},r.max=function(){var e=[].slice.call(arguments,0);return St("isAfter",e)},r.now=function(){return Date.now?Date.now():+new Date},r.utc=h,r.unix=function(e){return Dt(1e3*e)},r.months=function(e,t){return Ln(e,t,"months")},r.isDate=c,r.locale=st,r.invalid=y,r.duration=It,r.isMoment=k,r.weekdays=function(e,t,n){return kn(e,t,n,"weekdays")},r.parseZone=function(){return Dt.apply(null,arguments).parseZone()},r.localeData=dt,r.isDuration=Ht,r.monthsShort=function(e,t){return Ln(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return kn(e,t,n,"weekdaysMin")},r.defineLocale=ot,r.updateLocale=function(e,t){if(null!=t){var n,a,r=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(S(tt[e]._config,t)):(null!=(a=it(e))&&(r=a._config),t=S(r,t),null==a&&(t.abbr=e),(n=new j(t)).parentLocale=tt[e],tt[e]=n),st(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===st()&&st(e)):null!=tt[e]&&delete tt[e]);return tt[e]},r.locales=function(){return Y(tt)},r.weekdaysShort=function(e,t,n){return kn(e,t,n,"weekdaysShort")},r.normalizeUnits=R,r.relativeTimeRounding=function(e){return void 0===e?Un:"function"==typeof e&&(Un=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==Jn[e]&&(void 0===t?Jn[e]:(Jn[e]=t,"s"===e&&(Jn.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=yn,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()}).call(this,n(155)(e))},function(e,t,n){"use strict";n.r(t),$(document).on("blur",".input__field",(function(){var e=$(this),t=e.closest(".input__row");""!=e.val()?t.addClass("is_focus"):t.removeClass("is_focus")})),$(document).on("focus paste change input",".input__field",(function(){var e=$(this).closest(".input__row");e.hasClass("is_focus")||e.addClass("is_focus")})),t.default=function(){$(".js_for_focus").each((function(){var e=$(this);e.is(":visible")&&e.find(".input__row").eq(0).find(".input__field").focus()}))}},function(e,t,n){var a;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var i=[],s=Object.getPrototypeOf,o=i.slice,d=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},l=i.push,u=i.indexOf,c={},m=c.toString,f=c.hasOwnProperty,h=f.toString,_=h.call(Object),p={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},v=n.document,M={type:!0,src:!0,nonce:!0,noModule:!0};function L(e,t,n){var a,r,i=(n=n||v).createElement("script");if(i.text=e,t)for(a in M)(r=t[a]||t.getAttribute&&t.getAttribute(a))&&i.setAttribute(a,r);n.head.appendChild(i).parentNode.removeChild(i)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[m.call(e)]||"object":typeof e}var b=function(e,t){return new b.fn.init(e,t)};function w(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!y(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}b.fn=b.prototype={jquery:"3.5.1",constructor:b,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return b.each(this,e)},map:function(e){return this.pushStack(b.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(b.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(b.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:i.sort,splice:i.splice},b.extend=b.fn.extend=function(){var e,t,n,a,r,i,s=arguments[0]||{},o=1,d=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[o]||{},o++),"object"==typeof s||y(s)||(s={}),o===d&&(s=this,o--);o<d;o++)if(null!=(e=arguments[o]))for(t in e)a=e[t],"__proto__"!==t&&s!==a&&(l&&a&&(b.isPlainObject(a)||(r=Array.isArray(a)))?(n=s[t],i=r&&!Array.isArray(n)?[]:r||b.isPlainObject(n)?n:{},r=!1,s[t]=b.extend(l,i,a)):void 0!==a&&(s[t]=a));return s},b.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==m.call(e))&&(!(t=s(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&h.call(n)===_)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){L(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,a=0;if(w(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(w(Object(e))?b.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,a=0,r=e.length;a<n;a++)e[r++]=t[a];return e.length=r,e},grep:function(e,t,n){for(var a=[],r=0,i=e.length,s=!n;r<i;r++)!t(e[r],r)!==s&&a.push(e[r]);return a},map:function(e,t,n){var a,r,i=0,s=[];if(w(e))for(a=e.length;i<a;i++)null!=(r=t(e[i],i,n))&&s.push(r);else for(i in e)null!=(r=t(e[i],i,n))&&s.push(r);return d(s)},guid:1,support:p}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=i[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){c["[object "+t+"]"]=t.toLowerCase()}));var Y=function(e){var t,n,a,r,i,s,o,d,l,u,c,m,f,h,_,p,y,g,v,M="sizzle"+1*new Date,L=e.document,k=0,b=0,w=de(),Y=de(),D=de(),T=de(),x=function(e,t){return e===t&&(c=!0),0},S={}.hasOwnProperty,j=[],C=j.pop,H=j.push,E=j.push,A=j.slice,O=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",W="[\\x20\\t\\r\\n\\f]",N="(?:\\\\[\\da-fA-F]{1,6}"+W+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+W+"*("+N+")(?:"+W+"*([*^$|!~]?=)"+W+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+W+"*\\]",B=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",R=new RegExp(W+"+","g"),I=new RegExp("^"+W+"+|((?:^|[^\\\\])(?:\\\\.)*)"+W+"+$","g"),z=new RegExp("^"+W+"*,"+W+"*"),q=new RegExp("^"+W+"*([>+~]|"+W+")"+W+"*"),$=new RegExp(W+"|>"),U=new RegExp(B),J=new RegExp("^"+N+"$"),G={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+W+"*(even|odd|(([+-]|)(\\d*)n|)"+W+"*(?:([+-]|)"+W+"*(\\d+)|))"+W+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+W+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+W+"*((?:-\\d)?\\d*)"+W+"*\\)|)(?=[^-]|$)","i")},V=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+W+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ae=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){m()},se=Me((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{E.apply(j=A.call(L.childNodes),L.childNodes),j[L.childNodes.length].nodeType}catch(e){E={apply:j.length?function(e,t){H.apply(e,A.call(t))}:function(e,t){for(var n=e.length,a=0;e[n++]=t[a++];);e.length=n-1}}}function oe(e,t,a,r){var i,o,l,u,c,h,y,g=t&&t.ownerDocument,L=t?t.nodeType:9;if(a=a||[],"string"!=typeof e||!e||1!==L&&9!==L&&11!==L)return a;if(!r&&(m(t),t=t||f,_)){if(11!==L&&(c=Z.exec(e)))if(i=c[1]){if(9===L){if(!(l=t.getElementById(i)))return a;if(l.id===i)return a.push(l),a}else if(g&&(l=g.getElementById(i))&&v(t,l)&&l.id===i)return a.push(l),a}else{if(c[2])return E.apply(a,t.getElementsByTagName(e)),a;if((i=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return E.apply(a,t.getElementsByClassName(i)),a}if(n.qsa&&!T[e+" "]&&(!p||!p.test(e))&&(1!==L||"object"!==t.nodeName.toLowerCase())){if(y=e,g=t,1===L&&($.test(e)||q.test(e))){for((g=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ae,re):t.setAttribute("id",u=M)),o=(h=s(e)).length;o--;)h[o]=(u?"#"+u:":scope")+" "+ve(h[o]);y=h.join(",")}try{return E.apply(a,g.querySelectorAll(y)),a}catch(t){T(e,!0)}finally{u===M&&t.removeAttribute("id")}}}return d(e.replace(I,"$1"),t,a,r)}function de(){var e=[];return function t(n,r){return e.push(n+" ")>a.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function le(e){return e[M]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)a.attrHandle[n[r]]=t}function me(e,t){var n=t&&e,a=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(a)return a;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function _e(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return le((function(t){return t=+t,le((function(n,a){for(var r,i=e([],n.length,t),s=i.length;s--;)n[r=i[s]]&&(n[r]=!(a[r]=n[r]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},i=oe.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!V.test(t||n&&n.nodeName||"HTML")},m=oe.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:L;return s!=f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,_=!i(f),L!=f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.scope=ue((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=M,!f.getElementsByName||!f.getElementsByName(M).length})),n.getById?(a.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&_){var n=t.getElementById(e);return n?[n]:[]}}):(a.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&_){var n,a,r,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(r=t.getElementsByName(e),a=0;i=r[a++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),a.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,a=[],r=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[r++];)1===n.nodeType&&a.push(n);return a}return i},a.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&_)return t.getElementsByClassName(e)},y=[],p=[],(n.qsa=Q.test(f.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]="+W+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\["+W+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+M+"-]").length||p.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||p.push("\\["+W+"*name"+W+"*="+W+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+M+"+*").length||p.push(".#.+[+~]"),e.querySelectorAll("\\\f"),p.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name"+W+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")}))),(n.matchesSelector=Q.test(g=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),y.push("!=",B)})),p=p.length&&new RegExp(p.join("|")),y=y.length&&new RegExp(y.join("|")),t=Q.test(h.compareDocumentPosition),v=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,a=t&&t.parentNode;return e===a||!(!a||1!==a.nodeType||!(n.contains?n.contains(a):e.compareDocumentPosition&&16&e.compareDocumentPosition(a)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},x=t?function(e,t){if(e===t)return c=!0,0;var a=!e.compareDocumentPosition-!t.compareDocumentPosition;return a||(1&(a=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===a?e==f||e.ownerDocument==L&&v(L,e)?-1:t==f||t.ownerDocument==L&&v(L,t)?1:u?O(u,e)-O(u,t):0:4&a?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,a=0,r=e.parentNode,i=t.parentNode,s=[e],o=[t];if(!r||!i)return e==f?-1:t==f?1:r?-1:i?1:u?O(u,e)-O(u,t):0;if(r===i)return me(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[a]===o[a];)a++;return a?me(s[a],o[a]):s[a]==L?-1:o[a]==L?1:0},f):f},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(m(e),n.matchesSelector&&_&&!T[t+" "]&&(!y||!y.test(t))&&(!p||!p.test(t)))try{var a=g.call(e,t);if(a||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return a}catch(e){T(t,!0)}return oe(t,f,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!=f&&m(e),v(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=f&&m(e);var r=a.attrHandle[t.toLowerCase()],i=r&&S.call(a.attrHandle,t.toLowerCase())?r(e,t,!_):void 0;return void 0!==i?i:n.attributes||!_?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(ae,re)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,a=[],r=0,i=0;if(c=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(x),c){for(;t=e[i++];)t===e[i]&&(r=a.push(i));for(;r--;)e.splice(a[r],1)}return u=null,e},r=oe.getText=function(e){var t,n="",a=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[a++];)n+=r(t);return n},(a=oe.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=w[e+" "];return t||(t=new RegExp("(^|"+W+")"+e+"("+W+"|$)"))&&w(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(a){var r=oe.attr(a,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,a,r){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===a&&0===r?function(e){return!!e.parentNode}:function(t,n,d){var l,u,c,m,f,h,_=i!==s?"nextSibling":"previousSibling",p=t.parentNode,y=o&&t.nodeName.toLowerCase(),g=!d&&!o,v=!1;if(p){if(i){for(;_;){for(m=t;m=m[_];)if(o?m.nodeName.toLowerCase()===y:1===m.nodeType)return!1;h=_="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?p.firstChild:p.lastChild],s&&g){for(v=(f=(l=(u=(c=(m=p)[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]||[])[0]===k&&l[1])&&l[2],m=f&&p.childNodes[f];m=++f&&m&&m[_]||(v=f=0)||h.pop();)if(1===m.nodeType&&++v&&m===t){u[e]=[k,f,v];break}}else if(g&&(v=f=(l=(u=(c=(m=t)[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]||[])[0]===k&&l[1]),!1===v)for(;(m=++f&&m&&m[_]||(v=f=0)||h.pop())&&((o?m.nodeName.toLowerCase()!==y:1!==m.nodeType)||!++v||(g&&((u=(c=m[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]=[k,v]),m!==t)););return(v-=r)===a||v%a==0&&v/a>=0}}},PSEUDO:function(e,t){var n,r=a.pseudos[e]||a.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[M]?r(t):r.length>1?(n=[e,e,"",t],a.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var a,i=r(e,t),s=i.length;s--;)e[a=O(e,i[s])]=!(n[a]=i[s])})):function(e){return r(e,0,n)}):r}},pseudos:{not:le((function(e){var t=[],n=[],a=o(e.replace(I,"$1"));return a[M]?le((function(e,t,n,r){for(var i,s=a(e,null,r,[]),o=e.length;o--;)(i=s[o])&&(e[o]=!(t[o]=i))})):function(e,r,i){return t[0]=e,a(t,null,i,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return oe(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:le((function(e){return J.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=_?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:_e(!1),disabled:_e(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!a.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,t){return[t-1]})),eq:pe((function(e,t,n){return[n<0?n+t:n]})),even:pe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:pe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:pe((function(e,t,n){for(var a=n<0?n+t:n>t?t:n;--a>=0;)e.push(a);return e})),gt:pe((function(e,t,n){for(var a=n<0?n+t:n;++a<t;)e.push(a);return e}))}}).pseudos.nth=a.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})a.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})a.pseudos[t]=he(t);function ge(){}function ve(e){for(var t=0,n=e.length,a="";t<n;t++)a+=e[t].value;return a}function Me(e,t,n){var a=t.dir,r=t.next,i=r||a,s=n&&"parentNode"===i,o=b++;return t.first?function(t,n,r){for(;t=t[a];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,d){var l,u,c,m=[k,o];if(d){for(;t=t[a];)if((1===t.nodeType||s)&&e(t,n,d))return!0}else for(;t=t[a];)if(1===t.nodeType||s)if(u=(c=t[M]||(t[M]={}))[t.uniqueID]||(c[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[a]||t;else{if((l=u[i])&&l[0]===k&&l[1]===o)return m[2]=l[2];if(u[i]=m,m[2]=e(t,n,d))return!0}return!1}}function Le(e){return e.length>1?function(t,n,a){for(var r=e.length;r--;)if(!e[r](t,n,a))return!1;return!0}:e[0]}function ke(e,t,n,a,r){for(var i,s=[],o=0,d=e.length,l=null!=t;o<d;o++)(i=e[o])&&(n&&!n(i,a,r)||(s.push(i),l&&t.push(o)));return s}function be(e,t,n,a,r,i){return a&&!a[M]&&(a=be(a)),r&&!r[M]&&(r=be(r,i)),le((function(i,s,o,d){var l,u,c,m=[],f=[],h=s.length,_=i||function(e,t,n){for(var a=0,r=t.length;a<r;a++)oe(e,t[a],n);return n}(t||"*",o.nodeType?[o]:o,[]),p=!e||!i&&t?_:ke(_,m,e,o,d),y=n?r||(i?e:h||a)?[]:s:p;if(n&&n(p,y,o,d),a)for(l=ke(y,f),a(l,[],o,d),u=l.length;u--;)(c=l[u])&&(y[f[u]]=!(p[f[u]]=c));if(i){if(r||e){if(r){for(l=[],u=y.length;u--;)(c=y[u])&&l.push(p[u]=c);r(null,y=[],l,d)}for(u=y.length;u--;)(c=y[u])&&(l=r?O(i,c):m[u])>-1&&(i[l]=!(s[l]=c))}}else y=ke(y===s?y.splice(h,y.length):y),r?r(null,s,y,d):E.apply(s,y)}))}function we(e){for(var t,n,r,i=e.length,s=a.relative[e[0].type],o=s||a.relative[" "],d=s?1:0,u=Me((function(e){return e===t}),o,!0),c=Me((function(e){return O(t,e)>-1}),o,!0),m=[function(e,n,a){var r=!s&&(a||n!==l)||((t=n).nodeType?u(e,n,a):c(e,n,a));return t=null,r}];d<i;d++)if(n=a.relative[e[d].type])m=[Me(Le(m),n)];else{if((n=a.filter[e[d].type].apply(null,e[d].matches))[M]){for(r=++d;r<i&&!a.relative[e[r].type];r++);return be(d>1&&Le(m),d>1&&ve(e.slice(0,d-1).concat({value:" "===e[d-2].type?"*":""})).replace(I,"$1"),n,d<r&&we(e.slice(d,r)),r<i&&we(e=e.slice(r)),r<i&&ve(e))}m.push(n)}return Le(m)}return ge.prototype=a.filters=a.pseudos,a.setFilters=new ge,s=oe.tokenize=function(e,t){var n,r,i,s,o,d,l,u=Y[e+" "];if(u)return t?0:u.slice(0);for(o=e,d=[],l=a.preFilter;o;){for(s in n&&!(r=z.exec(o))||(r&&(o=o.slice(r[0].length)||o),d.push(i=[])),n=!1,(r=q.exec(o))&&(n=r.shift(),i.push({value:n,type:r[0].replace(I," ")}),o=o.slice(n.length)),a.filter)!(r=G[s].exec(o))||l[s]&&!(r=l[s](r))||(n=r.shift(),i.push({value:n,type:s,matches:r}),o=o.slice(n.length));if(!n)break}return t?o.length:o?oe.error(e):Y(e,d).slice(0)},o=oe.compile=function(e,t){var n,r=[],i=[],o=D[e+" "];if(!o){for(t||(t=s(e)),n=t.length;n--;)(o=we(t[n]))[M]?r.push(o):i.push(o);(o=D(e,function(e,t){var n=t.length>0,r=e.length>0,i=function(i,s,o,d,u){var c,h,p,y=0,g="0",v=i&&[],M=[],L=l,b=i||r&&a.find.TAG("*",u),w=k+=null==L?1:Math.random()||.1,Y=b.length;for(u&&(l=s==f||s||u);g!==Y&&null!=(c=b[g]);g++){if(r&&c){for(h=0,s||c.ownerDocument==f||(m(c),o=!_);p=e[h++];)if(p(c,s||f,o)){d.push(c);break}u&&(k=w)}n&&((c=!p&&c)&&y--,i&&v.push(c))}if(y+=g,n&&g!==y){for(h=0;p=t[h++];)p(v,M,s,o);if(i){if(y>0)for(;g--;)v[g]||M[g]||(M[g]=C.call(d));M=ke(M)}E.apply(d,M),u&&!i&&M.length>0&&y+t.length>1&&oe.uniqueSort(d)}return u&&(k=w,l=L),v};return n?le(i):i}(i,r))).selector=e}return o},d=oe.select=function(e,t,n,r){var i,d,l,u,c,m="function"==typeof e&&e,f=!r&&s(e=m.selector||e);if(n=n||[],1===f.length){if((d=f[0]=f[0].slice(0)).length>2&&"ID"===(l=d[0]).type&&9===t.nodeType&&_&&a.relative[d[1].type]){if(!(t=(a.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;m&&(t=t.parentNode),e=e.slice(d.shift().value.length)}for(i=G.needsContext.test(e)?0:d.length;i--&&(l=d[i],!a.relative[u=l.type]);)if((c=a.find[u])&&(r=c(l.matches[0].replace(te,ne),ee.test(d[0].type)&&ye(t.parentNode)||t))){if(d.splice(i,1),!(e=r.length&&ve(d)))return E.apply(n,r),n;break}}return(m||o(e,f))(r,t,!_,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=M.split("").sort(x).join("")===M,n.detectDuplicates=!!c,m(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||ce(P,(function(e,t,n){var a;if(!n)return!0===e[t]?t.toLowerCase():(a=e.getAttributeNode(t))&&a.specified?a.value:null})),oe}(n);b.find=Y,b.expr=Y.selectors,b.expr[":"]=b.expr.pseudos,b.uniqueSort=b.unique=Y.uniqueSort,b.text=Y.getText,b.isXMLDoc=Y.isXML,b.contains=Y.contains,b.escapeSelector=Y.escape;var D=function(e,t,n){for(var a=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&b(e).is(n))break;a.push(e)}return a},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},x=b.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function C(e,t,n){return y(t)?b.grep(e,(function(e,a){return!!t.call(e,a,e)!==n})):t.nodeType?b.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?b.grep(e,(function(e){return u.call(t,e)>-1!==n})):b.filter(t,e,n)}b.filter=function(e,t,n){var a=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===a.nodeType?b.find.matchesSelector(a,e)?[a]:[]:b.find.matches(e,b.grep(t,(function(e){return 1===e.nodeType})))},b.fn.extend({find:function(e){var t,n,a=this.length,r=this;if("string"!=typeof e)return this.pushStack(b(e).filter((function(){for(t=0;t<a;t++)if(b.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<a;t++)b.find(e,r[t],n);return a>1?b.uniqueSort(n):n},filter:function(e){return this.pushStack(C(this,e||[],!1))},not:function(e){return this.pushStack(C(this,e||[],!0))},is:function(e){return!!C(this,"string"==typeof e&&x.test(e)?b(e):e||[],!1).length}});var H,E=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(e,t,n){var a,r;if(!e)return this;if(n=n||H,"string"==typeof e){if(!(a="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:E.exec(e))||!a[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(a[1]){if(t=t instanceof b?t[0]:t,b.merge(this,b.parseHTML(a[1],t&&t.nodeType?t.ownerDocument||t:v,!0)),j.test(a[1])&&b.isPlainObject(t))for(a in t)y(this[a])?this[a](t[a]):this.attr(a,t[a]);return this}return(r=v.getElementById(a[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(b):b.makeArray(e,this)}).prototype=b.fn,H=b(v);var A=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}b.fn.extend({has:function(e){var t=b(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(b.contains(this,t[e]))return!0}))},closest:function(e,t){var n,a=0,r=this.length,i=[],s="string"!=typeof e&&b(e);if(!x.test(e))for(;a<r;a++)for(n=this[a];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&b.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?b.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?u.call(b(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return D(e,"parentNode")},parentsUntil:function(e,t,n){return D(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return D(e,"nextSibling")},prevAll:function(e){return D(e,"previousSibling")},nextUntil:function(e,t,n){return D(e,"nextSibling",n)},prevUntil:function(e,t,n){return D(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(S(e,"template")&&(e=e.content||e),b.merge([],e.childNodes))}},(function(e,t){b.fn[e]=function(n,a){var r=b.map(this,t,n);return"Until"!==e.slice(-5)&&(a=n),a&&"string"==typeof a&&(r=b.filter(a,r)),this.length>1&&(O[e]||b.uniqueSort(r),A.test(e)&&r.reverse()),this.pushStack(r)}}));var W=/[^\x20\t\r\n\f]+/g;function N(e){return e}function F(e){throw e}function B(e,t,n,a){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(a))}catch(e){n.apply(void 0,[e])}}b.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return b.each(e.match(W)||[],(function(e,n){t[n]=!0})),t}(e):b.extend({},e);var t,n,a,r,i=[],s=[],o=-1,d=function(){for(r=r||e.once,a=t=!0;s.length;o=-1)for(n=s.shift();++o<i.length;)!1===i[o].apply(n[0],n[1])&&e.stopOnFalse&&(o=i.length,n=!1);e.memory||(n=!1),t=!1,r&&(i=n?[]:"")},l={add:function(){return i&&(n&&!t&&(o=i.length-1,s.push(n)),function t(n){b.each(n,(function(n,a){y(a)?e.unique&&l.has(a)||i.push(a):a&&a.length&&"string"!==k(a)&&t(a)}))}(arguments),n&&!t&&d()),this},remove:function(){return b.each(arguments,(function(e,t){for(var n;(n=b.inArray(t,i,n))>-1;)i.splice(n,1),n<=o&&o--})),this},has:function(e){return e?b.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return r=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return r=s=[],n||t||(i=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||d()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!a}};return l},b.extend({Deferred:function(e){var t=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],a="pending",r={state:function(){return a},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return b.Deferred((function(n){b.each(t,(function(t,a){var r=y(e[a[4]])&&e[a[4]];i[a[1]]((function(){var e=r&&r.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[a[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,a,r){var i=0;function s(e,t,a,r){return function(){var o=this,d=arguments,l=function(){var n,l;if(!(e<i)){if((n=a.apply(o,d))===t.promise())throw new TypeError("Thenable self-resolution");l=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(l)?r?l.call(n,s(i,t,N,r),s(i,t,F,r)):(i++,l.call(n,s(i,t,N,r),s(i,t,F,r),s(i,t,N,t.notifyWith))):(a!==N&&(o=void 0,d=[n]),(r||t.resolveWith)(o,d))}},u=r?l:function(){try{l()}catch(n){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(n,u.stackTrace),e+1>=i&&(a!==F&&(o=void 0,d=[n]),t.rejectWith(o,d))}};e?u():(b.Deferred.getStackHook&&(u.stackTrace=b.Deferred.getStackHook()),n.setTimeout(u))}}return b.Deferred((function(n){t[0][3].add(s(0,n,y(r)?r:N,n.notifyWith)),t[1][3].add(s(0,n,y(e)?e:N)),t[2][3].add(s(0,n,y(a)?a:F))})).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return b.each(t,(function(e,n){var s=n[2],o=n[5];r[n[1]]=s.add,o&&s.add((function(){a=o}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=s.fireWith})),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,a=Array(n),r=o.call(arguments),i=b.Deferred(),s=function(e){return function(n){a[e]=this,r[e]=arguments.length>1?o.call(arguments):n,--t||i.resolveWith(a,r)}};if(t<=1&&(B(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||y(r[n]&&r[n].then)))return i.then();for(;n--;)B(r[n],s(n),i.reject);return i.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&R.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},b.readyException=function(e){n.setTimeout((function(){throw e}))};var I=b.Deferred();function z(){v.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),b.ready()}b.fn.ready=function(e){return I.then(e).catch((function(e){b.readyException(e)})),this},b.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--b.readyWait:b.isReady)||(b.isReady=!0,!0!==e&&--b.readyWait>0||I.resolveWith(v,[b]))}}),b.ready.then=I.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?n.setTimeout(b.ready):(v.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var q=function(e,t,n,a,r,i,s){var o=0,d=e.length,l=null==n;if("object"===k(n))for(o in r=!0,n)q(e,t,o,n[o],!0,i,s);else if(void 0!==a&&(r=!0,y(a)||(s=!0),l&&(s?(t.call(e,a),t=null):(l=t,t=function(e,t,n){return l.call(b(e),n)})),t))for(;o<d;o++)t(e[o],n,s?a:a.call(e[o],o,t(e[o],n)));return r?e:l?t.call(e):d?t(e[0],n):i},$=/^-ms-/,U=/-([a-z])/g;function J(e,t){return t.toUpperCase()}function G(e){return e.replace($,"ms-").replace(U,J)}var V=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=b.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var a,r=this.cache(e);if("string"==typeof t)r[G(t)]=n;else for(a in t)r[G(a)]=t[a];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,a=e[this.expando];if(void 0!==a){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in a?[t]:t.match(W)||[]).length;for(;n--;)delete a[t[n]]}(void 0===t||b.isEmptyObject(a))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!b.isEmptyObject(t)}};var X=new K,Q=new K,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var a;if(void 0===n&&1===e.nodeType)if(a="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(a))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}b.extend({hasData:function(e){return Q.hasData(e)||X.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return X.access(e,t,n)},_removeData:function(e,t){X.remove(e,t)}}),b.fn.extend({data:function(e,t){var n,a,r,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(r=Q.get(i),1===i.nodeType&&!X.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(a=s[n].name).indexOf("data-")&&(a=G(a.slice(5)),te(i,a,r[a]));X.set(i,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Q.set(this,e)})):q(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Q.get(i,e))||void 0!==(n=te(i,e))?n:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),b.extend({queue:function(e,t,n){var a;if(e)return t=(t||"fx")+"queue",a=X.get(e,t),n&&(!a||Array.isArray(n)?a=X.access(e,t,b.makeArray(n)):a.push(n)),a||[]},dequeue:function(e,t){t=t||"fx";var n=b.queue(e,t),a=n.length,r=n.shift(),i=b._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),a--),r&&("fx"===t&&n.unshift("inprogress"),delete i.stop,r.call(e,(function(){b.dequeue(e,t)}),i)),!a&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return X.get(e,n)||X.access(e,n,{empty:b.Callbacks("once memory").add((function(){X.remove(e,[t+"queue",n])}))})}}),b.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?b.queue(this[0],e):void 0===t?this:this.each((function(){var n=b.queue(this,e,t);b._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&b.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){b.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,a=1,r=b.Deferred(),i=this,s=this.length,o=function(){--a||r.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=X.get(i[s],e+"queueHooks"))&&n.empty&&(a++,n.empty.add(o));return o(),r.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=v.documentElement,se=function(e){return b.contains(e.ownerDocument,e)},oe={composed:!0};ie.getRootNode&&(se=function(e){return b.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var de=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===b.css(e,"display")};function le(e,t,n,a){var r,i,s=20,o=a?function(){return a.cur()}:function(){return b.css(e,t,"")},d=o(),l=n&&n[3]||(b.cssNumber[t]?"":"px"),u=e.nodeType&&(b.cssNumber[t]||"px"!==l&&+d)&&ae.exec(b.css(e,t));if(u&&u[3]!==l){for(d/=2,l=l||u[3],u=+d||1;s--;)b.style(e,t,u+l),(1-i)*(1-(i=o()/d||.5))<=0&&(s=0),u/=i;u*=2,b.style(e,t,u+l),n=n||[]}return n&&(u=+u||+d||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],a&&(a.unit=l,a.start=u,a.end=r)),r}var ue={};function ce(e){var t,n=e.ownerDocument,a=e.nodeName,r=ue[a];return r||(t=n.body.appendChild(n.createElement(a)),r=b.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ue[a]=r,r)}function me(e,t){for(var n,a,r=[],i=0,s=e.length;i<s;i++)(a=e[i]).style&&(n=a.style.display,t?("none"===n&&(r[i]=X.get(a,"display")||null,r[i]||(a.style.display="")),""===a.style.display&&de(a)&&(r[i]=ce(a))):"none"!==n&&(r[i]="none",X.set(a,"display",n)));for(i=0;i<s;i++)null!=r[i]&&(e[i].style.display=r[i]);return e}b.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){de(this)?b(this).show():b(this).hide()}))}});var fe,he,_e=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;fe=v.createDocumentFragment().appendChild(v.createElement("div")),(he=v.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),fe.appendChild(he),p.checkClone=fe.cloneNode(!0).cloneNode(!0).lastChild.checked,fe.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!fe.cloneNode(!0).lastChild.defaultValue,fe.innerHTML="<option></option>",p.option=!!fe.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?b.merge([e],n):n}function Me(e,t){for(var n=0,a=e.length;n<a;n++)X.set(e[n],"globalEval",!t||X.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,p.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var Le=/<|&#?\w+;/;function ke(e,t,n,a,r){for(var i,s,o,d,l,u,c=t.createDocumentFragment(),m=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if("object"===k(i))b.merge(m,i.nodeType?[i]:i);else if(Le.test(i)){for(s=s||c.appendChild(t.createElement("div")),o=(pe.exec(i)||["",""])[1].toLowerCase(),d=ge[o]||ge._default,s.innerHTML=d[1]+b.htmlPrefilter(i)+d[2],u=d[0];u--;)s=s.lastChild;b.merge(m,s.childNodes),(s=c.firstChild).textContent=""}else m.push(t.createTextNode(i));for(c.textContent="",f=0;i=m[f++];)if(a&&b.inArray(i,a)>-1)r&&r.push(i);else if(l=se(i),s=ve(c.appendChild(i),"script"),l&&Me(s),n)for(u=0;i=s[u++];)ye.test(i.type||"")&&n.push(i);return c}var be=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ye=/^([^.]*)(?:\.(.+)|)/;function De(){return!0}function Te(){return!1}function xe(e,t){return e===function(){try{return v.activeElement}catch(e){}}()==("focus"===t)}function Se(e,t,n,a,r,i){var s,o;if("object"==typeof t){for(o in"string"!=typeof n&&(a=a||n,n=void 0),t)Se(e,o,n,a,t[o],i);return e}if(null==a&&null==r?(r=n,a=n=void 0):null==r&&("string"==typeof n?(r=a,a=void 0):(r=a,a=n,n=void 0)),!1===r)r=Te;else if(!r)return e;return 1===i&&(s=r,(r=function(e){return b().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=b.guid++)),e.each((function(){b.event.add(this,t,r,a,n)}))}function je(e,t,n){n?(X.set(e,t,!1),b.event.add(e,t,{namespace:!1,handler:function(e){var a,r,i=X.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(b.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),X.set(this,t,i),a=n(this,t),this[t](),i!==(r=X.get(this,t))||a?X.set(this,t,!1):r={},i!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else i.length&&(X.set(this,t,{value:b.event.trigger(b.extend(i[0],b.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===X.get(e,t)&&b.event.add(e,t,De)}b.event={global:{},add:function(e,t,n,a,r){var i,s,o,d,l,u,c,m,f,h,_,p=X.get(e);if(V(e))for(n.handler&&(n=(i=n).handler,r=i.selector),r&&b.find.matchesSelector(ie,r),n.guid||(n.guid=b.guid++),(d=p.events)||(d=p.events=Object.create(null)),(s=p.handle)||(s=p.handle=function(t){return void 0!==b&&b.event.triggered!==t.type?b.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(W)||[""]).length;l--;)f=_=(o=Ye.exec(t[l])||[])[1],h=(o[2]||"").split(".").sort(),f&&(c=b.event.special[f]||{},f=(r?c.delegateType:c.bindType)||f,c=b.event.special[f]||{},u=b.extend({type:f,origType:_,data:a,handler:n,guid:n.guid,selector:r,needsContext:r&&b.expr.match.needsContext.test(r),namespace:h.join(".")},i),(m=d[f])||((m=d[f]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,a,h,s)||e.addEventListener&&e.addEventListener(f,s)),c.add&&(c.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?m.splice(m.delegateCount++,0,u):m.push(u),b.event.global[f]=!0)},remove:function(e,t,n,a,r){var i,s,o,d,l,u,c,m,f,h,_,p=X.hasData(e)&&X.get(e);if(p&&(d=p.events)){for(l=(t=(t||"").match(W)||[""]).length;l--;)if(f=_=(o=Ye.exec(t[l])||[])[1],h=(o[2]||"").split(".").sort(),f){for(c=b.event.special[f]||{},m=d[f=(a?c.delegateType:c.bindType)||f]||[],o=o[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=m.length;i--;)u=m[i],!r&&_!==u.origType||n&&n.guid!==u.guid||o&&!o.test(u.namespace)||a&&a!==u.selector&&("**"!==a||!u.selector)||(m.splice(i,1),u.selector&&m.delegateCount--,c.remove&&c.remove.call(e,u));s&&!m.length&&(c.teardown&&!1!==c.teardown.call(e,h,p.handle)||b.removeEvent(e,f,p.handle),delete d[f])}else for(f in d)b.event.remove(e,f+t[l],n,a,!0);b.isEmptyObject(d)&&X.remove(e,"handle events")}},dispatch:function(e){var t,n,a,r,i,s,o=new Array(arguments.length),d=b.event.fix(e),l=(X.get(this,"events")||Object.create(null))[d.type]||[],u=b.event.special[d.type]||{};for(o[0]=d,t=1;t<arguments.length;t++)o[t]=arguments[t];if(d.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,d)){for(s=b.event.handlers.call(this,d,l),t=0;(r=s[t++])&&!d.isPropagationStopped();)for(d.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!d.isImmediatePropagationStopped();)d.rnamespace&&!1!==i.namespace&&!d.rnamespace.test(i.namespace)||(d.handleObj=i,d.data=i.data,void 0!==(a=((b.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,o))&&!1===(d.result=a)&&(d.preventDefault(),d.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,d),d.result}},handlers:function(e,t){var n,a,r,i,s,o=[],d=t.delegateCount,l=e.target;if(d&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(i=[],s={},n=0;n<d;n++)void 0===s[r=(a=t[n]).selector+" "]&&(s[r]=a.needsContext?b(r,this).index(l)>-1:b.find(r,this,null,[l]).length),s[r]&&i.push(a);i.length&&o.push({elem:l,handlers:i})}return l=this,d<t.length&&o.push({elem:l,handlers:t.slice(d)}),o},addProp:function(e,t){Object.defineProperty(b.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[b.expando]?e:new b.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return _e.test(t.type)&&t.click&&S(t,"input")&&je(t,"click",De),!1},trigger:function(e){var t=this||e;return _e.test(t.type)&&t.click&&S(t,"input")&&je(t,"click"),!0},_default:function(e){var t=e.target;return _e.test(t.type)&&t.click&&S(t,"input")&&X.get(t,"click")||S(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},b.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},b.Event=function(e,t){if(!(this instanceof b.Event))return new b.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?De:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&b.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=De,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=De,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=De,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},b.event.addProp),b.each({focus:"focusin",blur:"focusout"},(function(e,t){b.event.special[e]={setup:function(){return je(this,e,xe),!1},trigger:function(){return je(this,e),!0},delegateType:t}})),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,a=this,r=e.relatedTarget,i=e.handleObj;return r&&(r===a||b.contains(a,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),b.fn.extend({on:function(e,t,n,a){return Se(this,e,t,n,a)},one:function(e,t,n,a){return Se(this,e,t,n,a,1)},off:function(e,t,n){var a,r;if(e&&e.preventDefault&&e.handleObj)return a=e.handleObj,b(e.delegateTarget).off(a.namespace?a.origType+"."+a.namespace:a.origType,a.selector,a.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Te),this.each((function(){b.event.remove(this,e,n,t)}))}});var Ce=/<script|<style|<link/i,He=/checked\s*(?:[^=]|=\s*.checked.)/i,Ee=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&b(e).children("tbody")[0]||e}function Oe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function We(e,t){var n,a,r,i,s,o;if(1===t.nodeType){if(X.hasData(e)&&(o=X.get(e).events))for(r in X.remove(t,"handle events"),o)for(n=0,a=o[r].length;n<a;n++)b.event.add(t,r,o[r][n]);Q.hasData(e)&&(i=Q.access(e),s=b.extend({},i),Q.set(t,s))}}function Ne(e,t){var n=t.nodeName.toLowerCase();"input"===n&&_e.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,a){t=d(t);var r,i,s,o,l,u,c=0,m=e.length,f=m-1,h=t[0],_=y(h);if(_||m>1&&"string"==typeof h&&!p.checkClone&&He.test(h))return e.each((function(r){var i=e.eq(r);_&&(t[0]=h.call(this,r,i.html())),Fe(i,t,n,a)}));if(m&&(i=(r=ke(t,e[0].ownerDocument,!1,e,a)).firstChild,1===r.childNodes.length&&(r=i),i||a)){for(o=(s=b.map(ve(r,"script"),Oe)).length;c<m;c++)l=r,c!==f&&(l=b.clone(l,!0,!0),o&&b.merge(s,ve(l,"script"))),n.call(e[c],l,c);if(o)for(u=s[s.length-1].ownerDocument,b.map(s,Pe),c=0;c<o;c++)l=s[c],ye.test(l.type||"")&&!X.access(l,"globalEval")&&b.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?b._evalUrl&&!l.noModule&&b._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):L(l.textContent.replace(Ee,""),l,u))}return e}function Be(e,t,n){for(var a,r=t?b.filter(t,e):e,i=0;null!=(a=r[i]);i++)n||1!==a.nodeType||b.cleanData(ve(a)),a.parentNode&&(n&&se(a)&&Me(ve(a,"script")),a.parentNode.removeChild(a));return e}b.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var a,r,i,s,o=e.cloneNode(!0),d=se(e);if(!(p.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(s=ve(o),a=0,r=(i=ve(e)).length;a<r;a++)Ne(i[a],s[a]);if(t)if(n)for(i=i||ve(e),s=s||ve(o),a=0,r=i.length;a<r;a++)We(i[a],s[a]);else We(e,o);return(s=ve(o,"script")).length>0&&Me(s,!d&&ve(e,"script")),o},cleanData:function(e){for(var t,n,a,r=b.event.special,i=0;void 0!==(n=e[i]);i++)if(V(n)){if(t=n[X.expando]){if(t.events)for(a in t.events)r[a]?b.event.remove(n,a):b.removeEvent(n,a,t.handle);n[X.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),b.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return q(this,(function(e){return void 0===e?b.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(b.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return b.clone(this,e,t)}))},html:function(e){return q(this,(function(e){var t=this[0]||{},n=0,a=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ce.test(e)&&!ge[(pe.exec(e)||["",""])[1].toLowerCase()]){e=b.htmlPrefilter(e);try{for(;n<a;n++)1===(t=this[n]||{}).nodeType&&(b.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;b.inArray(this,e)<0&&(b.cleanData(ve(this)),n&&n.replaceChild(t,this))}),e)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){b.fn[e]=function(e){for(var n,a=[],r=b(e),i=r.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),b(r[s])[t](n),l.apply(a,n.get());return this.pushStack(a)}}));var Re=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},ze=function(e,t,n){var a,r,i={};for(r in t)i[r]=e.style[r],e.style[r]=t[r];for(r in a=n.call(e),t)e.style[r]=i[r];return a},qe=new RegExp(re.join("|"),"i");function $e(e,t,n){var a,r,i,s,o=e.style;return(n=n||Ie(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||se(e)||(s=b.style(e,t)),!p.pixelBoxStyles()&&Re.test(s)&&qe.test(t)&&(a=o.width,r=o.minWidth,i=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=a,o.minWidth=r,o.maxWidth=i)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(l).appendChild(u);var e=n.getComputedStyle(u);a="1%"!==e.top,d=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),r=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),ie.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var a,r,i,s,o,d,l=v.createElement("div"),u=v.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===u.style.backgroundClip,b.extend(p,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),a},reliableMarginLeft:function(){return e(),d},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,a,r;return null==o&&(e=v.createElement("table"),t=v.createElement("tr"),a=v.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",a.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(a),r=n.getComputedStyle(t),o=parseInt(r.height)>3,ie.removeChild(e)),o}}))}();var Je=["Webkit","Moz","ms"],Ge=v.createElement("div").style,Ve={};function Ke(e){var t=b.cssProps[e]||Ve[e];return t||(e in Ge?e:Ve[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in Ge)return e}(e)||e)}var Xe=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var a=ae.exec(t);return a?Math.max(0,a[2]-(n||0))+(a[3]||"px"):t}function nt(e,t,n,a,r,i){var s="width"===t?1:0,o=0,d=0;if(n===(a?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(d+=b.css(e,n+re[s],!0,r)),a?("content"===n&&(d-=b.css(e,"padding"+re[s],!0,r)),"margin"!==n&&(d-=b.css(e,"border"+re[s]+"Width",!0,r))):(d+=b.css(e,"padding"+re[s],!0,r),"padding"!==n?d+=b.css(e,"border"+re[s]+"Width",!0,r):o+=b.css(e,"border"+re[s]+"Width",!0,r));return!a&&i>=0&&(d+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-d-o-.5))||0),d}function at(e,t,n){var a=Ie(e),r=(!p.boxSizingReliable()||n)&&"border-box"===b.css(e,"boxSizing",!1,a),i=r,s=$e(e,t,a),o="offset"+t[0].toUpperCase()+t.slice(1);if(Re.test(s)){if(!n)return s;s="auto"}return(!p.boxSizingReliable()&&r||!p.reliableTrDimensions()&&S(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===b.css(e,"display",!1,a))&&e.getClientRects().length&&(r="border-box"===b.css(e,"boxSizing",!1,a),(i=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+nt(e,t,n||(r?"border":"content"),i,a,s)+"px"}function rt(e,t,n,a,r){return new rt.prototype.init(e,t,n,a,r)}b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=$e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,a){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,i,s,o=G(t),d=Qe.test(t),l=e.style;if(d||(t=Ke(o)),s=b.cssHooks[t]||b.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,a))?r:l[t];"string"===(i=typeof n)&&(r=ae.exec(n))&&r[1]&&(n=le(e,t,r),i="number"),null!=n&&n==n&&("number"!==i||d||(n+=r&&r[3]||(b.cssNumber[o]?"":"px")),p.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,a))||(d?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,a){var r,i,s,o=G(t);return Qe.test(t)||(t=Ke(o)),(s=b.cssHooks[t]||b.cssHooks[o])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=$e(e,t,a)),"normal"===r&&t in et&&(r=et[t]),""===n||n?(i=parseFloat(r),!0===n||isFinite(i)?i||0:r):r}}),b.each(["height","width"],(function(e,t){b.cssHooks[t]={get:function(e,n,a){if(n)return!Xe.test(b.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?at(e,t,a):ze(e,Ze,(function(){return at(e,t,a)}))},set:function(e,n,a){var r,i=Ie(e),s=!p.scrollboxSize()&&"absolute"===i.position,o=(s||a)&&"border-box"===b.css(e,"boxSizing",!1,i),d=a?nt(e,t,a,o,i):0;return o&&s&&(d-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-nt(e,t,"border",!1,i)-.5)),d&&(r=ae.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=b.css(e,t)),tt(0,n,d)}}})),b.cssHooks.marginLeft=Ue(p.reliableMarginLeft,(function(e,t){if(t)return(parseFloat($e(e,"marginLeft"))||e.getBoundingClientRect().left-ze(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),b.each({margin:"",padding:"",border:"Width"},(function(e,t){b.cssHooks[e+t]={expand:function(n){for(var a=0,r={},i="string"==typeof n?n.split(" "):[n];a<4;a++)r[e+re[a]+t]=i[a]||i[a-2]||i[0];return r}},"margin"!==e&&(b.cssHooks[e+t].set=tt)})),b.fn.extend({css:function(e,t){return q(this,(function(e,t,n){var a,r,i={},s=0;if(Array.isArray(t)){for(a=Ie(e),r=t.length;s<r;s++)i[t[s]]=b.css(e,t[s],!1,a);return i}return void 0!==n?b.style(e,t,n):b.css(e,t)}),e,t,arguments.length>1)}}),b.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,a,r,i){this.elem=e,this.prop=n,this.easing=r||b.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=a,this.unit=i||(b.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=b.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):1!==e.elem.nodeType||!b.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:b.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},b.fx=rt.prototype.init,b.fx.step={};var it,st,ot=/^(?:toggle|show|hide)$/,dt=/queueHooks$/;function lt(){st&&(!1===v.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(lt):n.setTimeout(lt,b.fx.interval),b.fx.tick())}function ut(){return n.setTimeout((function(){it=void 0})),it=Date.now()}function ct(e,t){var n,a=0,r={height:e};for(t=t?1:0;a<4;a+=2-t)r["margin"+(n=re[a])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function mt(e,t,n){for(var a,r=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),i=0,s=r.length;i<s;i++)if(a=r[i].call(n,t,e))return a}function ft(e,t,n){var a,r,i=0,s=ft.prefilters.length,o=b.Deferred().always((function(){delete d.elem})),d=function(){if(r)return!1;for(var t=it||ut(),n=Math.max(0,l.startTime+l.duration-t),a=1-(n/l.duration||0),i=0,s=l.tweens.length;i<s;i++)l.tweens[i].run(a);return o.notifyWith(e,[l,a,n]),a<1&&s?n:(s||o.notifyWith(e,[l,1,0]),o.resolveWith(e,[l]),!1)},l=o.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var a=b.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(a),a},stop:function(t){var n=0,a=t?l.tweens.length:0;if(r)return this;for(r=!0;n<a;n++)l.tweens[n].run(1);return t?(o.notifyWith(e,[l,1,0]),o.resolveWith(e,[l,t])):o.rejectWith(e,[l,t]),this}}),u=l.props;for(!function(e,t){var n,a,r,i,s;for(n in e)if(r=t[a=G(n)],i=e[n],Array.isArray(i)&&(r=i[1],i=e[n]=i[0]),n!==a&&(e[a]=i,delete e[n]),(s=b.cssHooks[a])&&"expand"in s)for(n in i=s.expand(i),delete e[a],i)n in e||(e[n]=i[n],t[n]=r);else t[a]=r}(u,l.opts.specialEasing);i<s;i++)if(a=ft.prefilters[i].call(l,e,u,l.opts))return y(a.stop)&&(b._queueHooks(l.elem,l.opts.queue).stop=a.stop.bind(a)),a;return b.map(u,mt,l),y(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),b.fx.timer(b.extend(d,{elem:e,anim:l,queue:l.opts.queue})),l}b.Animation=b.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(W);for(var n,a=0,r=e.length;a<r;a++)n=e[a],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var a,r,i,s,o,d,l,u,c="width"in t||"height"in t,m=this,f={},h=e.style,_=e.nodeType&&de(e),p=X.get(e,"fxshow");for(a in n.queue||(null==(s=b._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,m.always((function(){m.always((function(){s.unqueued--,b.queue(e,"fx").length||s.empty.fire()}))}))),t)if(r=t[a],ot.test(r)){if(delete t[a],i=i||"toggle"===r,r===(_?"hide":"show")){if("show"!==r||!p||void 0===p[a])continue;_=!0}f[a]=p&&p[a]||b.style(e,a)}if((d=!b.isEmptyObject(t))||!b.isEmptyObject(f))for(a in c&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=p&&p.display)&&(l=X.get(e,"display")),"none"===(u=b.css(e,"display"))&&(l?u=l:(me([e],!0),l=e.style.display||l,u=b.css(e,"display"),me([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===b.css(e,"float")&&(d||(m.done((function(){h.display=l})),null==l&&(u=h.display,l="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",m.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),d=!1,f)d||(p?"hidden"in p&&(_=p.hidden):p=X.access(e,"fxshow",{display:l}),i&&(p.hidden=!_),_&&me([e],!0),m.done((function(){for(a in _||me([e]),X.remove(e,"fxshow"),f)b.style(e,a,f[a])}))),d=mt(_?p[a]:0,a,m),a in p||(p[a]=d.start,_&&(d.end=d.start,d.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),b.speed=function(e,t,n){var a=e&&"object"==typeof e?b.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return b.fx.off?a.duration=0:"number"!=typeof a.duration&&(a.duration in b.fx.speeds?a.duration=b.fx.speeds[a.duration]:a.duration=b.fx.speeds._default),null!=a.queue&&!0!==a.queue||(a.queue="fx"),a.old=a.complete,a.complete=function(){y(a.old)&&a.old.call(this),a.queue&&b.dequeue(this,a.queue)},a},b.fn.extend({fadeTo:function(e,t,n,a){return this.filter(de).css("opacity",0).show().end().animate({opacity:t},e,n,a)},animate:function(e,t,n,a){var r=b.isEmptyObject(e),i=b.speed(t,n,a),s=function(){var t=ft(this,b.extend({},e),i);(r||X.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var a=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",i=b.timers,s=X.get(this);if(r)s[r]&&s[r].stop&&a(s[r]);else for(r in s)s[r]&&s[r].stop&&dt.test(r)&&a(s[r]);for(r=i.length;r--;)i[r].elem!==this||null!=e&&i[r].queue!==e||(i[r].anim.stop(n),t=!1,i.splice(r,1));!t&&n||b.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=X.get(this),a=n[e+"queue"],r=n[e+"queueHooks"],i=b.timers,s=a?a.length:0;for(n.finish=!0,b.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)a[t]&&a[t].finish&&a[t].finish.call(this);delete n.finish}))}}),b.each(["toggle","show","hide"],(function(e,t){var n=b.fn[t];b.fn[t]=function(e,a,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,a,r)}})),b.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){b.fn[e]=function(e,n,a){return this.animate(t,e,n,a)}})),b.timers=[],b.fx.tick=function(){var e,t=0,n=b.timers;for(it=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||b.fx.stop(),it=void 0},b.fx.timer=function(e){b.timers.push(e),b.fx.start()},b.fx.interval=13,b.fx.start=function(){st||(st=!0,lt())},b.fx.stop=function(){st=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(e,t){return e=b.fx&&b.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,a){var r=n.setTimeout(t,e);a.stop=function(){n.clearTimeout(r)}}))},function(){var e=v.createElement("input"),t=v.createElement("select").appendChild(v.createElement("option"));e.type="checkbox",p.checkOn=""!==e.value,p.optSelected=t.selected,(e=v.createElement("input")).value="t",e.type="radio",p.radioValue="t"===e.value}();var ht,_t=b.expr.attrHandle;b.fn.extend({attr:function(e,t){return q(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){b.removeAttr(this,e)}))}}),b.extend({attr:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?b.prop(e,t,n):(1===i&&b.isXMLDoc(e)||(r=b.attrHooks[t.toLowerCase()]||(b.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void b.removeAttr(e,t):r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(a=r.get(e,t))?a:null==(a=b.find.attr(e,t))?void 0:a)},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&"radio"===t&&S(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,a=0,r=t&&t.match(W);if(r&&1===e.nodeType)for(;n=r[a++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?b.removeAttr(e,n):e.setAttribute(n,n),n}},b.each(b.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=_t[t]||b.find.attr;_t[t]=function(e,t,a){var r,i,s=t.toLowerCase();return a||(i=_t[s],_t[s]=r,r=null!=n(e,t,a)?s:null,_t[s]=i),r}}));var pt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function gt(e){return(e.match(W)||[]).join(" ")}function vt(e){return e.getAttribute&&e.getAttribute("class")||""}function Mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(W)||[]}b.fn.extend({prop:function(e,t){return q(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[b.propFix[e]||e]}))}}),b.extend({prop:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&b.isXMLDoc(e)||(t=b.propFix[t]||t,r=b.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:e[t]=n:r&&"get"in r&&null!==(a=r.get(e,t))?a:e[t]},propHooks:{tabIndex:{get:function(e){var t=b.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(b.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){b.propFix[this.toLowerCase()]=this})),b.fn.extend({addClass:function(e){var t,n,a,r,i,s,o,d=0;if(y(e))return this.each((function(t){b(this).addClass(e.call(this,t,vt(this)))}));if((t=Mt(e)).length)for(;n=this[d++];)if(r=vt(n),a=1===n.nodeType&&" "+gt(r)+" "){for(s=0;i=t[s++];)a.indexOf(" "+i+" ")<0&&(a+=i+" ");r!==(o=gt(a))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,a,r,i,s,o,d=0;if(y(e))return this.each((function(t){b(this).removeClass(e.call(this,t,vt(this)))}));if(!arguments.length)return this.attr("class","");if((t=Mt(e)).length)for(;n=this[d++];)if(r=vt(n),a=1===n.nodeType&&" "+gt(r)+" "){for(s=0;i=t[s++];)for(;a.indexOf(" "+i+" ")>-1;)a=a.replace(" "+i+" "," ");r!==(o=gt(a))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e,a="string"===n||Array.isArray(e);return"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){b(this).toggleClass(e.call(this,n,vt(this),t),t)})):this.each((function(){var t,r,i,s;if(a)for(r=0,i=b(this),s=Mt(e);t=s[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=vt(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":X.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,a=0;for(t=" "+e+" ";n=this[a++];)if(1===n.nodeType&&(" "+gt(vt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Lt=/\r/g;b.fn.extend({val:function(e){var t,n,a,r=this[0];return arguments.length?(a=y(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=a?e.call(this,n,b(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=b.map(r,(function(e){return null==e?"":e+""}))),(t=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=b.valHooks[r.type]||b.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(Lt,""):null==n?"":n:void 0}}),b.extend({valHooks:{option:{get:function(e){var t=b.find.attr(e,"value");return null!=t?t:gt(b.text(e))}},select:{get:function(e){var t,n,a,r=e.options,i=e.selectedIndex,s="select-one"===e.type,o=s?null:[],d=s?i+1:r.length;for(a=i<0?d:s?i:0;a<d;a++)if(((n=r[a]).selected||a===i)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(t=b(n).val(),s)return t;o.push(t)}return o},set:function(e,t){for(var n,a,r=e.options,i=b.makeArray(t),s=r.length;s--;)((a=r[s]).selected=b.inArray(b.valHooks.option.get(a),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),b.each(["radio","checkbox"],(function(){b.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=b.inArray(b(e).val(),t)>-1}},p.checkOn||(b.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),p.focusin="onfocusin"in n;var kt=/^(?:focusinfocus|focusoutblur)$/,bt=function(e){e.stopPropagation()};b.extend(b.event,{trigger:function(e,t,a,r){var i,s,o,d,l,u,c,m,h=[a||v],_=f.call(e,"type")?e.type:e,p=f.call(e,"namespace")?e.namespace.split("."):[];if(s=m=o=a=a||v,3!==a.nodeType&&8!==a.nodeType&&!kt.test(_+b.event.triggered)&&(_.indexOf(".")>-1&&(p=_.split("."),_=p.shift(),p.sort()),l=_.indexOf(":")<0&&"on"+_,(e=e[b.expando]?e:new b.Event(_,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=a),t=null==t?[e]:b.makeArray(t,[e]),c=b.event.special[_]||{},r||!c.trigger||!1!==c.trigger.apply(a,t))){if(!r&&!c.noBubble&&!g(a)){for(d=c.delegateType||_,kt.test(d+_)||(s=s.parentNode);s;s=s.parentNode)h.push(s),o=s;o===(a.ownerDocument||v)&&h.push(o.defaultView||o.parentWindow||n)}for(i=0;(s=h[i++])&&!e.isPropagationStopped();)m=s,e.type=i>1?d:c.bindType||_,(u=(X.get(s,"events")||Object.create(null))[e.type]&&X.get(s,"handle"))&&u.apply(s,t),(u=l&&s[l])&&u.apply&&V(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=_,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(h.pop(),t)||!V(a)||l&&y(a[_])&&!g(a)&&((o=a[l])&&(a[l]=null),b.event.triggered=_,e.isPropagationStopped()&&m.addEventListener(_,bt),a[_](),e.isPropagationStopped()&&m.removeEventListener(_,bt),b.event.triggered=void 0,o&&(a[l]=o)),e.result}},simulate:function(e,t,n){var a=b.extend(new b.Event,n,{type:e,isSimulated:!0});b.event.trigger(a,null,t)}}),b.fn.extend({trigger:function(e,t){return this.each((function(){b.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return b.event.trigger(e,t,n,!0)}}),p.focusin||b.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){b.event.simulate(t,e.target,b.event.fix(e))};b.event.special[t]={setup:function(){var a=this.ownerDocument||this.document||this,r=X.access(a,t);r||a.addEventListener(e,n,!0),X.access(a,t,(r||0)+1)},teardown:function(){var a=this.ownerDocument||this.document||this,r=X.access(a,t)-1;r?X.access(a,t,r):(a.removeEventListener(e,n,!0),X.remove(a,t))}}}));var wt=n.location,Yt={guid:Date.now()},Dt=/\?/;b.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||b.error("Invalid XML: "+e),t};var Tt=/\[\]$/,xt=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function Ct(e,t,n,a){var r;if(Array.isArray(t))b.each(t,(function(t,r){n||Tt.test(e)?a(e,r):Ct(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,a)}));else if(n||"object"!==k(t))a(e,t);else for(r in t)Ct(e+"["+r+"]",t[r],n,a)}b.param=function(e,t){var n,a=[],r=function(e,t){var n=y(t)?t():t;a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,(function(){r(this.name,this.value)}));else for(n in e)Ct(n,e[n],t,r);return a.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&jt.test(this.nodeName)&&!St.test(e)&&(this.checked||!_e.test(e))})).map((function(e,t){var n=b(this).val();return null==n?null:Array.isArray(n)?b.map(n,(function(e){return{name:t.name,value:e.replace(xt,"\r\n")}})):{name:t.name,value:n.replace(xt,"\r\n")}})).get()}});var Ht=/%20/g,Et=/#.*$/,At=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,Wt=/^\/\//,Nt={},Ft={},Bt="*/".concat("*"),Rt=v.createElement("a");function It(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var a,r=0,i=t.toLowerCase().match(W)||[];if(y(n))for(;a=i[r++];)"+"===a[0]?(a=a.slice(1)||"*",(e[a]=e[a]||[]).unshift(n)):(e[a]=e[a]||[]).push(n)}}function zt(e,t,n,a){var r={},i=e===Ft;function s(o){var d;return r[o]=!0,b.each(e[o]||[],(function(e,o){var l=o(t,n,a);return"string"!=typeof l||i||r[l]?i?!(d=l):void 0:(t.dataTypes.unshift(l),s(l),!1)})),d}return s(t.dataTypes[0])||!r["*"]&&s("*")}function qt(e,t){var n,a,r=b.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:a||(a={}))[n]=t[n]);return a&&b.extend(!0,e,a),e}Rt.href=wt.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?qt(qt(e,b.ajaxSettings),t):qt(b.ajaxSettings,e)},ajaxPrefilter:It(Nt),ajaxTransport:It(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var a,r,i,s,o,d,l,u,c,m,f=b.ajaxSetup({},t),h=f.context||f,_=f.context&&(h.nodeType||h.jquery)?b(h):b.event,p=b.Deferred(),y=b.Callbacks("once memory"),g=f.statusCode||{},M={},L={},k="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=Ot.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return l?i:null},setRequestHeader:function(e,t){return null==l&&(e=L[e.toLowerCase()]=L[e.toLowerCase()]||e,M[e]=t),this},overrideMimeType:function(e){return null==l&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)w.always(e[w.status]);else for(t in e)g[t]=[g[t],e[t]];return this},abort:function(e){var t=e||k;return a&&a.abort(t),Y(0,t),this}};if(p.promise(w),f.url=((e||f.url||wt.href)+"").replace(Wt,wt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(W)||[""],null==f.crossDomain){d=v.createElement("a");try{d.href=f.url,d.href=d.href,f.crossDomain=Rt.protocol+"//"+Rt.host!=d.protocol+"//"+d.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=b.param(f.data,f.traditional)),zt(Nt,f,t,w),l)return w;for(c in(u=b.event&&f.global)&&0==b.active++&&b.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Pt.test(f.type),r=f.url.replace(Et,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ht,"+")):(m=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(Dt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(At,"$1"),m=(Dt.test(r)?"&":"?")+"_="+Yt.guid+++m),f.url=r+m),f.ifModified&&(b.lastModified[r]&&w.setRequestHeader("If-Modified-Since",b.lastModified[r]),b.etag[r]&&w.setRequestHeader("If-None-Match",b.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Bt+"; q=0.01":""):f.accepts["*"]),f.headers)w.setRequestHeader(c,f.headers[c]);if(f.beforeSend&&(!1===f.beforeSend.call(h,w,f)||l))return w.abort();if(k="abort",y.add(f.complete),w.done(f.success),w.fail(f.error),a=zt(Ft,f,t,w)){if(w.readyState=1,u&&_.trigger("ajaxSend",[w,f]),l)return w;f.async&&f.timeout>0&&(o=n.setTimeout((function(){w.abort("timeout")}),f.timeout));try{l=!1,a.send(M,Y)}catch(e){if(l)throw e;Y(-1,e)}}else Y(-1,"No Transport");function Y(e,t,s,d){var c,m,v,M,L,k=t;l||(l=!0,o&&n.clearTimeout(o),a=void 0,i=d||"",w.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(M=function(e,t,n){for(var a,r,i,s,o=e.contents,d=e.dataTypes;"*"===d[0];)d.shift(),void 0===a&&(a=e.mimeType||t.getResponseHeader("Content-Type"));if(a)for(r in o)if(o[r]&&o[r].test(a)){d.unshift(r);break}if(d[0]in n)i=d[0];else{for(r in n){if(!d[0]||e.converters[r+" "+d[0]]){i=r;break}s||(s=r)}i=i||s}if(i)return i!==d[0]&&d.unshift(i),n[i]}(f,w,s)),!c&&b.inArray("script",f.dataTypes)>-1&&(f.converters["text script"]=function(){}),M=function(e,t,n,a){var r,i,s,o,d,l={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!d&&a&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),d=i,i=u.shift())if("*"===i)i=d;else if("*"!==d&&d!==i){if(!(s=l[d+" "+i]||l["* "+i]))for(r in l)if((o=r.split(" "))[1]===i&&(s=l[d+" "+o[0]]||l["* "+o[0]])){!0===s?s=l[r]:!0!==l[r]&&(i=o[0],u.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+d+" to "+i}}}return{state:"success",data:t}}(f,M,w,c),c?(f.ifModified&&((L=w.getResponseHeader("Last-Modified"))&&(b.lastModified[r]=L),(L=w.getResponseHeader("etag"))&&(b.etag[r]=L)),204===e||"HEAD"===f.type?k="nocontent":304===e?k="notmodified":(k=M.state,m=M.data,c=!(v=M.error))):(v=k,!e&&k||(k="error",e<0&&(e=0))),w.status=e,w.statusText=(t||k)+"",c?p.resolveWith(h,[m,k,w]):p.rejectWith(h,[w,k,v]),w.statusCode(g),g=void 0,u&&_.trigger(c?"ajaxSuccess":"ajaxError",[w,f,c?m:v]),y.fireWith(h,[w,k]),u&&(_.trigger("ajaxComplete",[w,f]),--b.active||b.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,n){return b.get(e,t,n,"json")},getScript:function(e,t){return b.get(e,void 0,t,"script")}}),b.each(["get","post"],(function(e,t){b[t]=function(e,n,a,r){return y(n)&&(r=r||a,a=n,n=void 0),b.ajax(b.extend({url:e,type:t,dataType:r,data:n,success:a},b.isPlainObject(e)&&e))}})),b.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),b._evalUrl=function(e,t,n){return b.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){b.globalEval(e,t,n)}})},b.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=b(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){b(this).wrapInner(e.call(this,t))})):this.each((function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){b(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){b(this).replaceWith(this.childNodes)})),this}}),b.expr.pseudos.hidden=function(e){return!b.expr.pseudos.visible(e)},b.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},Ut=b.ajaxSettings.xhr();p.cors=!!Ut&&"withCredentials"in Ut,p.ajax=Ut=!!Ut,b.ajaxTransport((function(e){var t,a;if(p.cors||Ut&&!e.crossDomain)return{send:function(r,i){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)o.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=a=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?i(0,"error"):i(o.status,o.statusText):i($t[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=t(),a=o.onerror=o.ontimeout=t("error"),void 0!==o.onabort?o.onabort=a:o.onreadystatechange=function(){4===o.readyState&&n.setTimeout((function(){t&&a()}))},t=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),b.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),b.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(a,r){t=b("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),v.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Jt,Gt=[],Vt=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||b.expando+"_"+Yt.guid++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",(function(e,t,a){var r,i,s,o=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(Vt,"$1"+r):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||b.error(r+" was not called"),s[0]},e.dataTypes[0]="json",i=n[r],n[r]=function(){s=arguments},a.always((function(){void 0===i?b(n).removeProp(r):n[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),s&&y(i)&&i(s[0]),s=i=void 0})),"script"})),p.createHTMLDocument=((Jt=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Jt.childNodes.length),b.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(p.createHTMLDocument?((a=(t=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,t.head.appendChild(a)):t=v),i=!n&&[],(r=j.exec(e))?[t.createElement(r[1])]:(r=ke([e],t,i),i&&i.length&&b(i).remove(),b.merge([],r.childNodes)));var a,r,i},b.fn.load=function(e,t,n){var a,r,i,s=this,o=e.indexOf(" ");return o>-1&&(a=gt(e.slice(o)),e=e.slice(0,o)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&b.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){i=arguments,s.html(a?b("<div>").append(b.parseHTML(e)).find(a):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},b.expr.pseudos.animated=function(e){return b.grep(b.timers,(function(t){return e===t.elem})).length},b.offset={setOffset:function(e,t,n){var a,r,i,s,o,d,l=b.css(e,"position"),u=b(e),c={};"static"===l&&(e.style.position="relative"),o=u.offset(),i=b.css(e,"top"),d=b.css(e,"left"),("absolute"===l||"fixed"===l)&&(i+d).indexOf("auto")>-1?(s=(a=u.position()).top,r=a.left):(s=parseFloat(i)||0,r=parseFloat(d)||0),y(t)&&(t=t.call(e,n,b.extend({},o))),null!=t.top&&(c.top=t.top-o.top+s),null!=t.left&&(c.left=t.left-o.left+r),"using"in t?t.using.call(e,c):("number"==typeof c.top&&(c.top+="px"),"number"==typeof c.left&&(c.left+="px"),u.css(c))}},b.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){b.offset.setOffset(this,e,t)}));var t,n,a=this[0];return a?a.getClientRects().length?(t=a.getBoundingClientRect(),n=a.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,a=this[0],r={top:0,left:0};if("fixed"===b.css(a,"position"))t=a.getBoundingClientRect();else{for(t=this.offset(),n=a.ownerDocument,e=a.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===b.css(e,"position");)e=e.parentNode;e&&e!==a&&1===e.nodeType&&((r=b(e).offset()).top+=b.css(e,"borderTopWidth",!0),r.left+=b.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-b.css(a,"marginTop",!0),left:t.left-r.left-b.css(a,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===b.css(e,"position");)e=e.offsetParent;return e||ie}))}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;b.fn[e]=function(a){return q(this,(function(e,a,r){var i;if(g(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===r)return i?i[t]:e[a];i?i.scrollTo(n?i.pageXOffset:r,n?r:i.pageYOffset):e[a]=r}),e,a,arguments.length)}})),b.each(["top","left"],(function(e,t){b.cssHooks[t]=Ue(p.pixelPosition,(function(e,n){if(n)return n=$e(e,t),Re.test(n)?b(e).position()[t]+"px":n}))})),b.each({Height:"height",Width:"width"},(function(e,t){b.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,a){b.fn[a]=function(r,i){var s=arguments.length&&(n||"boolean"!=typeof r),o=n||(!0===r||!0===i?"margin":"border");return q(this,(function(t,n,r){var i;return g(t)?0===a.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?b.css(t,n,o):b.style(t,n,r,o)}),t,s?r:void 0,s)}}))})),b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){b.fn[t]=function(e){return this.on(t,e)}})),b.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,a){return this.on(t,e,n,a)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;b.proxy=function(e,t){var n,a,r;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return a=o.call(arguments,2),(r=function(){return e.apply(t||this,a.concat(o.call(arguments)))}).guid=e.guid=e.guid||b.guid++,r},b.holdReady=function(e){e?b.readyWait++:b.ready(!0)},b.isArray=Array.isArray,b.parseJSON=JSON.parse,b.nodeName=S,b.isFunction=y,b.isWindow=g,b.camelCase=G,b.type=k,b.now=Date.now,b.isNumeric=function(e){var t=b.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},b.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},void 0===(a=function(){return b}.apply(t,[]))||(e.exports=a);var Xt=n.jQuery,Qt=n.$;return b.noConflict=function(e){return n.$===b&&(n.$=Qt),e&&n.jQuery===b&&(n.jQuery=Xt),b},void 0===r&&(n.jQuery=n.$=b),b}))},function(e,t,n){var a;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var i=[],s=Object.getPrototypeOf,o=i.slice,d=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},l=i.push,u=i.indexOf,c={},m=c.toString,f=c.hasOwnProperty,h=f.toString,_=h.call(Object),p={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},v=n.document,M={type:!0,src:!0,nonce:!0,noModule:!0};function L(e,t,n){var a,r,i=(n=n||v).createElement("script");if(i.text=e,t)for(a in M)(r=t[a]||t.getAttribute&&t.getAttribute(a))&&i.setAttribute(a,r);n.head.appendChild(i).parentNode.removeChild(i)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[m.call(e)]||"object":typeof e}var b="3.5.1",w=function(e,t){return new w.fn.init(e,t)};function Y(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!y(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}w.fn=w.prototype={jquery:b,constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(w.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(w.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:i.sort,splice:i.splice},w.extend=w.fn.extend=function(){var e,t,n,a,r,i,s=arguments[0]||{},o=1,d=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[o]||{},o++),"object"==typeof s||y(s)||(s={}),o===d&&(s=this,o--);o<d;o++)if(null!=(e=arguments[o]))for(t in e)a=e[t],"__proto__"!==t&&s!==a&&(l&&a&&(w.isPlainObject(a)||(r=Array.isArray(a)))?(n=s[t],i=r&&!Array.isArray(n)?[]:r||w.isPlainObject(n)?n:{},r=!1,s[t]=w.extend(l,i,a)):void 0!==a&&(s[t]=a));return s},w.extend({expando:"jQuery"+(b+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==m.call(e)||(t=s(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||h.call(n)!==_))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){L(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,a=0;if(Y(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(Y(Object(e))?w.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,a=0,r=e.length;a<n;a++)e[r++]=t[a];return e.length=r,e},grep:function(e,t,n){for(var a=[],r=0,i=e.length,s=!n;r<i;r++)!t(e[r],r)!==s&&a.push(e[r]);return a},map:function(e,t,n){var a,r,i=0,s=[];if(Y(e))for(a=e.length;i<a;i++)null!=(r=t(e[i],i,n))&&s.push(r);else for(i in e)null!=(r=t(e[i],i,n))&&s.push(r);return d(s)},guid:1,support:p}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=i[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){c["[object "+t+"]"]=t.toLowerCase()}));var D=function(e){var t,n,a,r,i,s,o,d,l,u,c,m,f,h,_,p,y,g,v,M="sizzle"+1*new Date,L=e.document,k=0,b=0,w=de(),Y=de(),D=de(),T=de(),x=function(e,t){return e===t&&(c=!0),0},S={}.hasOwnProperty,j=[],C=j.pop,H=j.push,E=j.push,A=j.slice,O=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",W="[\\x20\\t\\r\\n\\f]",N="(?:\\\\[\\da-fA-F]{1,6}"+W+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+W+"*("+N+")(?:"+W+"*([*^$|!~]?=)"+W+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+W+"*\\]",B=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",R=new RegExp(W+"+","g"),I=new RegExp("^"+W+"+|((?:^|[^\\\\])(?:\\\\.)*)"+W+"+$","g"),z=new RegExp("^"+W+"*,"+W+"*"),q=new RegExp("^"+W+"*([>+~]|"+W+")"+W+"*"),$=new RegExp(W+"|>"),U=new RegExp(B),J=new RegExp("^"+N+"$"),G={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+W+"*(even|odd|(([+-]|)(\\d*)n|)"+W+"*(?:([+-]|)"+W+"*(\\d+)|))"+W+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+W+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+W+"*((?:-\\d)?\\d*)"+W+"*\\)|)(?=[^-]|$)","i")},V=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+W+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ae=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){m()},se=Me((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{E.apply(j=A.call(L.childNodes),L.childNodes),j[L.childNodes.length].nodeType}catch(t){E={apply:j.length?function(e,t){H.apply(e,A.call(t))}:function(e,t){for(var n=e.length,a=0;e[n++]=t[a++];);e.length=n-1}}}function oe(e,t,a,r){var i,o,l,u,c,h,y,g=t&&t.ownerDocument,L=t?t.nodeType:9;if(a=a||[],"string"!=typeof e||!e||1!==L&&9!==L&&11!==L)return a;if(!r&&(m(t),t=t||f,_)){if(11!==L&&(c=Z.exec(e)))if(i=c[1]){if(9===L){if(!(l=t.getElementById(i)))return a;if(l.id===i)return a.push(l),a}else if(g&&(l=g.getElementById(i))&&v(t,l)&&l.id===i)return a.push(l),a}else{if(c[2])return E.apply(a,t.getElementsByTagName(e)),a;if((i=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return E.apply(a,t.getElementsByClassName(i)),a}if(n.qsa&&!T[e+" "]&&(!p||!p.test(e))&&(1!==L||"object"!==t.nodeName.toLowerCase())){if(y=e,g=t,1===L&&($.test(e)||q.test(e))){for((g=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ae,re):t.setAttribute("id",u=M)),o=(h=s(e)).length;o--;)h[o]=(u?"#"+u:":scope")+" "+ve(h[o]);y=h.join(",")}try{return E.apply(a,g.querySelectorAll(y)),a}catch(t){T(e,!0)}finally{u===M&&t.removeAttribute("id")}}}return d(e.replace(I,"$1"),t,a,r)}function de(){var e=[];return function t(n,r){return e.push(n+" ")>a.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function le(e){return e[M]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)a.attrHandle[n[r]]=t}function me(e,t){var n=t&&e,a=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(a)return a;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function _e(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return le((function(t){return t=+t,le((function(n,a){for(var r,i=e([],n.length,t),s=i.length;s--;)n[r=i[s]]&&(n[r]=!(a[r]=n[r]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},i=oe.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!V.test(t||n&&n.nodeName||"HTML")},m=oe.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:L;return s!=f&&9===s.nodeType&&s.documentElement&&(h=(f=s).documentElement,_=!i(f),L!=f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.scope=ue((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=M,!f.getElementsByName||!f.getElementsByName(M).length})),n.getById?(a.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&_){var n=t.getElementById(e);return n?[n]:[]}}):(a.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&_){var n,a,r,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(r=t.getElementsByName(e),a=0;i=r[a++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),a.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,a=[],r=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[r++];)1===n.nodeType&&a.push(n);return a}return i},a.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&_)return t.getElementsByClassName(e)},y=[],p=[],(n.qsa=Q.test(f.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]="+W+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\["+W+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+M+"-]").length||p.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||p.push("\\["+W+"*name"+W+"*="+W+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+M+"+*").length||p.push(".#.+[+~]"),e.querySelectorAll("\\\f"),p.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name"+W+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")}))),(n.matchesSelector=Q.test(g=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),y.push("!=",B)})),p=p.length&&new RegExp(p.join("|")),y=y.length&&new RegExp(y.join("|")),t=Q.test(h.compareDocumentPosition),v=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,a=t&&t.parentNode;return e===a||!(!a||1!==a.nodeType||!(n.contains?n.contains(a):e.compareDocumentPosition&&16&e.compareDocumentPosition(a)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},x=t?function(e,t){if(e===t)return c=!0,0;var a=!e.compareDocumentPosition-!t.compareDocumentPosition;return a||(1&(a=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===a?e==f||e.ownerDocument==L&&v(L,e)?-1:t==f||t.ownerDocument==L&&v(L,t)?1:u?O(u,e)-O(u,t):0:4&a?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,a=0,r=e.parentNode,i=t.parentNode,s=[e],o=[t];if(!r||!i)return e==f?-1:t==f?1:r?-1:i?1:u?O(u,e)-O(u,t):0;if(r===i)return me(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[a]===o[a];)a++;return a?me(s[a],o[a]):s[a]==L?-1:o[a]==L?1:0}),f},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(m(e),n.matchesSelector&&_&&!T[t+" "]&&(!y||!y.test(t))&&(!p||!p.test(t)))try{var a=g.call(e,t);if(a||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return a}catch(e){T(t,!0)}return 0<oe(t,f,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!=f&&m(e),v(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=f&&m(e);var r=a.attrHandle[t.toLowerCase()],i=r&&S.call(a.attrHandle,t.toLowerCase())?r(e,t,!_):void 0;return void 0!==i?i:n.attributes||!_?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(ae,re)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,a=[],r=0,i=0;if(c=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(x),c){for(;t=e[i++];)t===e[i]&&(r=a.push(i));for(;r--;)e.splice(a[r],1)}return u=null,e},r=oe.getText=function(e){var t,n="",a=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[a++];)n+=r(t);return n},(a=oe.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=w[e+" "];return t||(t=new RegExp("(^|"+W+")"+e+"("+W+"|$)"))&&w(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(a){var r=oe.attr(a,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&-1<r.indexOf(n):"$="===t?n&&r.slice(-n.length)===n:"~="===t?-1<(" "+r.replace(R," ")+" ").indexOf(n):"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,a,r){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===a&&0===r?function(e){return!!e.parentNode}:function(t,n,d){var l,u,c,m,f,h,_=i!==s?"nextSibling":"previousSibling",p=t.parentNode,y=o&&t.nodeName.toLowerCase(),g=!d&&!o,v=!1;if(p){if(i){for(;_;){for(m=t;m=m[_];)if(o?m.nodeName.toLowerCase()===y:1===m.nodeType)return!1;h=_="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?p.firstChild:p.lastChild],s&&g){for(v=(f=(l=(u=(c=(m=p)[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]||[])[0]===k&&l[1])&&l[2],m=f&&p.childNodes[f];m=++f&&m&&m[_]||(v=f=0)||h.pop();)if(1===m.nodeType&&++v&&m===t){u[e]=[k,f,v];break}}else if(g&&(v=f=(l=(u=(c=(m=t)[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]||[])[0]===k&&l[1]),!1===v)for(;(m=++f&&m&&m[_]||(v=f=0)||h.pop())&&((o?m.nodeName.toLowerCase()!==y:1!==m.nodeType)||!++v||(g&&((u=(c=m[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]=[k,v]),m!==t)););return(v-=r)===a||v%a==0&&0<=v/a}}},PSEUDO:function(e,t){var n,r=a.pseudos[e]||a.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[M]?r(t):1<r.length?(n=[e,e,"",t],a.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var a,i=r(e,t),s=i.length;s--;)e[a=O(e,i[s])]=!(n[a]=i[s])})):function(e){return r(e,0,n)}):r}},pseudos:{not:le((function(e){var t=[],n=[],a=o(e.replace(I,"$1"));return a[M]?le((function(e,t,n,r){for(var i,s=a(e,null,r,[]),o=e.length;o--;)(i=s[o])&&(e[o]=!(t[o]=i))})):function(e,r,i){return t[0]=e,a(t,null,i,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return 0<oe(e,t).length}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return-1<(t.textContent||r(t)).indexOf(e)}})),lang:le((function(e){return J.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=_?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:_e(!1),disabled:_e(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!a.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,t){return[t-1]})),eq:pe((function(e,t,n){return[n<0?n+t:n]})),even:pe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:pe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:pe((function(e,t,n){for(var a=n<0?n+t:t<n?t:n;0<=--a;)e.push(a);return e})),gt:pe((function(e,t,n){for(var a=n<0?n+t:n;++a<t;)e.push(a);return e}))}}).pseudos.nth=a.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})a.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})a.pseudos[t]=he(t);function ge(){}function ve(e){for(var t=0,n=e.length,a="";t<n;t++)a+=e[t].value;return a}function Me(e,t,n){var a=t.dir,r=t.next,i=r||a,s=n&&"parentNode"===i,o=b++;return t.first?function(t,n,r){for(;t=t[a];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,d){var l,u,c,m=[k,o];if(d){for(;t=t[a];)if((1===t.nodeType||s)&&e(t,n,d))return!0}else for(;t=t[a];)if(1===t.nodeType||s)if(u=(c=t[M]||(t[M]={}))[t.uniqueID]||(c[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[a]||t;else{if((l=u[i])&&l[0]===k&&l[1]===o)return m[2]=l[2];if((u[i]=m)[2]=e(t,n,d))return!0}return!1}}function Le(e){return 1<e.length?function(t,n,a){for(var r=e.length;r--;)if(!e[r](t,n,a))return!1;return!0}:e[0]}function ke(e,t,n,a,r){for(var i,s=[],o=0,d=e.length,l=null!=t;o<d;o++)(i=e[o])&&(n&&!n(i,a,r)||(s.push(i),l&&t.push(o)));return s}function be(e,t,n,a,r,i){return a&&!a[M]&&(a=be(a)),r&&!r[M]&&(r=be(r,i)),le((function(i,s,o,d){var l,u,c,m=[],f=[],h=s.length,_=i||function(e,t,n){for(var a=0,r=t.length;a<r;a++)oe(e,t[a],n);return n}(t||"*",o.nodeType?[o]:o,[]),p=!e||!i&&t?_:ke(_,m,e,o,d),y=n?r||(i?e:h||a)?[]:s:p;if(n&&n(p,y,o,d),a)for(l=ke(y,f),a(l,[],o,d),u=l.length;u--;)(c=l[u])&&(y[f[u]]=!(p[f[u]]=c));if(i){if(r||e){if(r){for(l=[],u=y.length;u--;)(c=y[u])&&l.push(p[u]=c);r(null,y=[],l,d)}for(u=y.length;u--;)(c=y[u])&&-1<(l=r?O(i,c):m[u])&&(i[l]=!(s[l]=c))}}else y=ke(y===s?y.splice(h,y.length):y),r?r(null,s,y,d):E.apply(s,y)}))}function we(e){for(var t,n,r,i=e.length,s=a.relative[e[0].type],o=s||a.relative[" "],d=s?1:0,u=Me((function(e){return e===t}),o,!0),c=Me((function(e){return-1<O(t,e)}),o,!0),m=[function(e,n,a){var r=!s&&(a||n!==l)||((t=n).nodeType?u(e,n,a):c(e,n,a));return t=null,r}];d<i;d++)if(n=a.relative[e[d].type])m=[Me(Le(m),n)];else{if((n=a.filter[e[d].type].apply(null,e[d].matches))[M]){for(r=++d;r<i&&!a.relative[e[r].type];r++);return be(1<d&&Le(m),1<d&&ve(e.slice(0,d-1).concat({value:" "===e[d-2].type?"*":""})).replace(I,"$1"),n,d<r&&we(e.slice(d,r)),r<i&&we(e=e.slice(r)),r<i&&ve(e))}m.push(n)}return Le(m)}return ge.prototype=a.filters=a.pseudos,a.setFilters=new ge,s=oe.tokenize=function(e,t){var n,r,i,s,o,d,l,u=Y[e+" "];if(u)return t?0:u.slice(0);for(o=e,d=[],l=a.preFilter;o;){for(s in n&&!(r=z.exec(o))||(r&&(o=o.slice(r[0].length)||o),d.push(i=[])),n=!1,(r=q.exec(o))&&(n=r.shift(),i.push({value:n,type:r[0].replace(I," ")}),o=o.slice(n.length)),a.filter)!(r=G[s].exec(o))||l[s]&&!(r=l[s](r))||(n=r.shift(),i.push({value:n,type:s,matches:r}),o=o.slice(n.length));if(!n)break}return t?o.length:o?oe.error(e):Y(e,d).slice(0)},o=oe.compile=function(e,t){var n,r,i,o,d,u,c=[],h=[],p=D[e+" "];if(!p){for(t||(t=s(e)),n=t.length;n--;)(p=we(t[n]))[M]?c.push(p):h.push(p);(p=D(e,(r=h,o=0<(i=c).length,d=0<r.length,u=function(e,t,n,s,u){var c,h,p,y=0,g="0",v=e&&[],M=[],L=l,b=e||d&&a.find.TAG("*",u),w=k+=null==L?1:Math.random()||.1,Y=b.length;for(u&&(l=t==f||t||u);g!==Y&&null!=(c=b[g]);g++){if(d&&c){for(h=0,t||c.ownerDocument==f||(m(c),n=!_);p=r[h++];)if(p(c,t||f,n)){s.push(c);break}u&&(k=w)}o&&((c=!p&&c)&&y--,e&&v.push(c))}if(y+=g,o&&g!==y){for(h=0;p=i[h++];)p(v,M,t,n);if(e){if(0<y)for(;g--;)v[g]||M[g]||(M[g]=C.call(s));M=ke(M)}E.apply(s,M),u&&!e&&0<M.length&&1<y+i.length&&oe.uniqueSort(s)}return u&&(k=w,l=L),v},o?le(u):u))).selector=e}return p},d=oe.select=function(e,t,n,r){var i,d,l,u,c,m="function"==typeof e&&e,f=!r&&s(e=m.selector||e);if(n=n||[],1===f.length){if(2<(d=f[0]=f[0].slice(0)).length&&"ID"===(l=d[0]).type&&9===t.nodeType&&_&&a.relative[d[1].type]){if(!(t=(a.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;m&&(t=t.parentNode),e=e.slice(d.shift().value.length)}for(i=G.needsContext.test(e)?0:d.length;i--&&(l=d[i],!a.relative[u=l.type]);)if((c=a.find[u])&&(r=c(l.matches[0].replace(te,ne),ee.test(d[0].type)&&ye(t.parentNode)||t))){if(d.splice(i,1),!(e=r.length&&ve(d)))return E.apply(n,r),n;break}}return(m||o(e,f))(r,t,!_,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=M.split("").sort(x).join("")===M,n.detectDuplicates=!!c,m(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||ce(P,(function(e,t,n){var a;if(!n)return!0===e[t]?t.toLowerCase():(a=e.getAttributeNode(t))&&a.specified?a.value:null})),oe}(n);w.find=D,w.expr=D.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=D.uniqueSort,w.text=D.getText,w.isXMLDoc=D.isXML,w.contains=D.contains,w.escapeSelector=D.escape;var T=function(e,t,n){for(var a=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&w(e).is(n))break;a.push(e)}return a},x=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},S=w.expr.match.needsContext;function j(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var C=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function H(e,t,n){return y(t)?w.grep(e,(function(e,a){return!!t.call(e,a,e)!==n})):t.nodeType?w.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?w.grep(e,(function(e){return-1<u.call(t,e)!==n})):w.filter(t,e,n)}w.filter=function(e,t,n){var a=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===a.nodeType?w.find.matchesSelector(a,e)?[a]:[]:w.find.matches(e,w.grep(t,(function(e){return 1===e.nodeType})))},w.fn.extend({find:function(e){var t,n,a=this.length,r=this;if("string"!=typeof e)return this.pushStack(w(e).filter((function(){for(t=0;t<a;t++)if(w.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<a;t++)w.find(e,r[t],n);return 1<a?w.uniqueSort(n):n},filter:function(e){return this.pushStack(H(this,e||[],!1))},not:function(e){return this.pushStack(H(this,e||[],!0))},is:function(e){return!!H(this,"string"==typeof e&&S.test(e)?w(e):e||[],!1).length}});var E,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(e,t,n){var a,r;if(!e)return this;if(n=n||E,"string"==typeof e){if(!(a="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:A.exec(e))||!a[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(a[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(a[1],t&&t.nodeType?t.ownerDocument||t:v,!0)),C.test(a[1])&&w.isPlainObject(t))for(a in t)y(this[a])?this[a](t[a]):this.attr(a,t[a]);return this}return(r=v.getElementById(a[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,E=w(v);var O=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function W(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0}))},closest:function(e,t){var n,a=0,r=this.length,i=[],s="string"!=typeof e&&w(e);if(!S.test(e))for(;a<r;a++)for(n=this[a];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&w.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(1<i.length?w.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?u.call(w(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return W(e,"nextSibling")},prev:function(e){return W(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return x((e.parentNode||{}).firstChild,e)},children:function(e){return x(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(j(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},(function(e,t){w.fn[e]=function(n,a){var r=w.map(this,t,n);return"Until"!==e.slice(-5)&&(a=n),a&&"string"==typeof a&&(r=w.filter(a,r)),1<this.length&&(P[e]||w.uniqueSort(r),O.test(e)&&r.reverse()),this.pushStack(r)}}));var N=/[^\x20\t\r\n\f]+/g;function F(e){return e}function B(e){throw e}function R(e,t,n,a){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(a))}catch(e){n.apply(void 0,[e])}}w.Callbacks=function(e){var t,n;e="string"==typeof e?(t=e,n={},w.each(t.match(N)||[],(function(e,t){n[t]=!0})),n):w.extend({},e);var a,r,i,s,o=[],d=[],l=-1,u=function(){for(s=s||e.once,i=a=!0;d.length;l=-1)for(r=d.shift();++l<o.length;)!1===o[l].apply(r[0],r[1])&&e.stopOnFalse&&(l=o.length,r=!1);e.memory||(r=!1),a=!1,s&&(o=r?[]:"")},c={add:function(){return o&&(r&&!a&&(l=o.length-1,d.push(r)),function t(n){w.each(n,(function(n,a){y(a)?e.unique&&c.has(a)||o.push(a):a&&a.length&&"string"!==k(a)&&t(a)}))}(arguments),r&&!a&&u()),this},remove:function(){return w.each(arguments,(function(e,t){for(var n;-1<(n=w.inArray(t,o,n));)o.splice(n,1),n<=l&&l--})),this},has:function(e){return e?-1<w.inArray(e,o):0<o.length},empty:function(){return o&&(o=[]),this},disable:function(){return s=d=[],o=r="",this},disabled:function(){return!o},lock:function(){return s=d=[],r||a||(o=r=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],d.push(t),a||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},w.extend({Deferred:function(e){var t=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],a="pending",r={state:function(){return a},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return w.Deferred((function(n){w.each(t,(function(t,a){var r=y(e[a[4]])&&e[a[4]];i[a[1]]((function(){var e=r&&r.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[a[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,a,r){var i=0;function s(e,t,a,r){return function(){var o=this,d=arguments,l=function(){var n,l;if(!(e<i)){if((n=a.apply(o,d))===t.promise())throw new TypeError("Thenable self-resolution");l=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(l)?r?l.call(n,s(i,t,F,r),s(i,t,B,r)):(i++,l.call(n,s(i,t,F,r),s(i,t,B,r),s(i,t,F,t.notifyWith))):(a!==F&&(o=void 0,d=[n]),(r||t.resolveWith)(o,d))}},u=r?l:function(){try{l()}catch(n){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(n,u.stackTrace),i<=e+1&&(a!==B&&(o=void 0,d=[n]),t.rejectWith(o,d))}};e?u():(w.Deferred.getStackHook&&(u.stackTrace=w.Deferred.getStackHook()),n.setTimeout(u))}}return w.Deferred((function(n){t[0][3].add(s(0,n,y(r)?r:F,n.notifyWith)),t[1][3].add(s(0,n,y(e)?e:F)),t[2][3].add(s(0,n,y(a)?a:B))})).promise()},promise:function(e){return null!=e?w.extend(e,r):r}},i={};return w.each(t,(function(e,n){var s=n[2],o=n[5];r[n[1]]=s.add,o&&s.add((function(){a=o}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=s.fireWith})),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,a=Array(n),r=o.call(arguments),i=w.Deferred(),s=function(e){return function(n){a[e]=this,r[e]=1<arguments.length?o.call(arguments):n,--t||i.resolveWith(a,r)}};if(t<=1&&(R(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||y(r[n]&&r[n].then)))return i.then();for(;n--;)R(r[n],s(n),i.reject);return i.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&I.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},w.readyException=function(e){n.setTimeout((function(){throw e}))};var z=w.Deferred();function q(){v.removeEventListener("DOMContentLoaded",q),n.removeEventListener("load",q),w.ready()}w.fn.ready=function(e){return z.then(e).catch((function(e){w.readyException(e)})),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0)!==e&&0<--w.readyWait||z.resolveWith(v,[w])}}),w.ready.then=z.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?n.setTimeout(w.ready):(v.addEventListener("DOMContentLoaded",q),n.addEventListener("load",q));var $=function(e,t,n,a,r,i,s){var o=0,d=e.length,l=null==n;if("object"===k(n))for(o in r=!0,n)$(e,t,o,n[o],!0,i,s);else if(void 0!==a&&(r=!0,y(a)||(s=!0),l&&(s?(t.call(e,a),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;o<d;o++)t(e[o],n,s?a:a.call(e[o],o,t(e[o],n)));return r?e:l?t.call(e):d?t(e[0],n):i},U=/^-ms-/,J=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function V(e){return e.replace(U,"ms-").replace(J,G)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=w.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var a,r=this.cache(e);if("string"==typeof t)r[V(t)]=n;else for(a in t)r[V(a)]=t[a];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,a=e[this.expando];if(void 0!==a){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in a?[t]:t.match(N)||[]).length;for(;n--;)delete a[t[n]]}(void 0===t||w.isEmptyObject(a))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var Q=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var a,r;if(void 0===n&&1===e.nodeType)if(a="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(a))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:ee.test(r)?JSON.parse(r):r)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,a,r,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(r=Z.get(i),1===i.nodeType&&!Q.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(a=s[n].name).indexOf("data-")&&(a=V(a.slice(5)),ne(i,a,r[a]));Q.set(i,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Z.set(this,e)})):$(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,1<arguments.length,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),w.extend({queue:function(e,t,n){var a;if(e)return t=(t||"fx")+"queue",a=Q.get(e,t),n&&(!a||Array.isArray(n)?a=Q.access(e,t,w.makeArray(n)):a.push(n)),a||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),a=n.length,r=n.shift(),i=w._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),a--),r&&("fx"===t&&n.unshift("inprogress"),delete i.stop,r.call(e,(function(){w.dequeue(e,t)}),i)),!a&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:w.Callbacks("once memory").add((function(){Q.remove(e,[t+"queue",n])}))})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each((function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){w.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,a=1,r=w.Deferred(),i=this,s=this.length,o=function(){--a||r.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(i[s],e+"queueHooks"))&&n.empty&&(a++,n.empty.add(o));return o(),r.promise(t)}});var ae=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ae+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=v.documentElement,oe=function(e){return w.contains(e.ownerDocument,e)},de={composed:!0};se.getRootNode&&(oe=function(e){return w.contains(e.ownerDocument,e)||e.getRootNode(de)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===w.css(e,"display")};function ue(e,t,n,a){var r,i,s=20,o=a?function(){return a.cur()}:function(){return w.css(e,t,"")},d=o(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),u=e.nodeType&&(w.cssNumber[t]||"px"!==l&&+d)&&re.exec(w.css(e,t));if(u&&u[3]!==l){for(d/=2,l=l||u[3],u=+d||1;s--;)w.style(e,t,u+l),(1-i)*(1-(i=o()/d||.5))<=0&&(s=0),u/=i;u*=2,w.style(e,t,u+l),n=n||[]}return n&&(u=+u||+d||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],a&&(a.unit=l,a.start=u,a.end=r)),r}var ce={};function me(e,t){for(var n,a,r,i,s,o,d,l=[],u=0,c=e.length;u<c;u++)(a=e[u]).style&&(n=a.style.display,t?("none"===n&&(l[u]=Q.get(a,"display")||null,l[u]||(a.style.display="")),""===a.style.display&&le(a)&&(l[u]=(d=s=i=void 0,s=(r=a).ownerDocument,o=r.nodeName,(d=ce[o])||(i=s.body.appendChild(s.createElement(o)),d=w.css(i,"display"),i.parentNode.removeChild(i),"none"===d&&(d="block"),ce[o]=d)))):"none"!==n&&(l[u]="none",Q.set(a,"display",n)));for(u=0;u<c;u++)null!=l[u]&&(e[u].style.display=l[u]);return e}w.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?w(this).show():w(this).hide()}))}});var fe,he,_e=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;fe=v.createDocumentFragment().appendChild(v.createElement("div")),(he=v.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),fe.appendChild(he),p.checkClone=fe.cloneNode(!0).cloneNode(!0).lastChild.checked,fe.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!fe.cloneNode(!0).lastChild.defaultValue,fe.innerHTML="<option></option>",p.option=!!fe.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&j(e,t)?w.merge([e],n):n}function Me(e,t){for(var n=0,a=e.length;n<a;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,p.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var Le=/<|&#?\w+;/;function ke(e,t,n,a,r){for(var i,s,o,d,l,u,c=t.createDocumentFragment(),m=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if("object"===k(i))w.merge(m,i.nodeType?[i]:i);else if(Le.test(i)){for(s=s||c.appendChild(t.createElement("div")),o=(pe.exec(i)||["",""])[1].toLowerCase(),d=ge[o]||ge._default,s.innerHTML=d[1]+w.htmlPrefilter(i)+d[2],u=d[0];u--;)s=s.lastChild;w.merge(m,s.childNodes),(s=c.firstChild).textContent=""}else m.push(t.createTextNode(i));for(c.textContent="",f=0;i=m[f++];)if(a&&-1<w.inArray(i,a))r&&r.push(i);else if(l=oe(i),s=ve(c.appendChild(i),"script"),l&&Me(s),n)for(u=0;i=s[u++];)ye.test(i.type||"")&&n.push(i);return c}var be=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ye=/^([^.]*)(?:\.(.+)|)/;function De(){return!0}function Te(){return!1}function xe(e,t){return e===function(){try{return v.activeElement}catch(e){}}()==("focus"===t)}function Se(e,t,n,a,r,i){var s,o;if("object"==typeof t){for(o in"string"!=typeof n&&(a=a||n,n=void 0),t)Se(e,o,n,a,t[o],i);return e}if(null==a&&null==r?(r=n,a=n=void 0):null==r&&("string"==typeof n?(r=a,a=void 0):(r=a,a=n,n=void 0)),!1===r)r=Te;else if(!r)return e;return 1===i&&(s=r,(r=function(e){return w().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=w.guid++)),e.each((function(){w.event.add(this,t,r,a,n)}))}function je(e,t,n){n?(Q.set(e,t,!1),w.event.add(e,t,{namespace:!1,handler:function(e){var a,r,i=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(w.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),Q.set(this,t,i),a=n(this,t),this[t](),i!==(r=Q.get(this,t))||a?Q.set(this,t,!1):r={},i!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else i.length&&(Q.set(this,t,{value:w.event.trigger(w.extend(i[0],w.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&w.event.add(e,t,De)}w.event={global:{},add:function(e,t,n,a,r){var i,s,o,d,l,u,c,m,f,h,_,p=Q.get(e);if(K(e))for(n.handler&&(n=(i=n).handler,r=i.selector),r&&w.find.matchesSelector(se,r),n.guid||(n.guid=w.guid++),(d=p.events)||(d=p.events=Object.create(null)),(s=p.handle)||(s=p.handle=function(t){return void 0!==w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(N)||[""]).length;l--;)f=_=(o=Ye.exec(t[l])||[])[1],h=(o[2]||"").split(".").sort(),f&&(c=w.event.special[f]||{},f=(r?c.delegateType:c.bindType)||f,c=w.event.special[f]||{},u=w.extend({type:f,origType:_,data:a,handler:n,guid:n.guid,selector:r,needsContext:r&&w.expr.match.needsContext.test(r),namespace:h.join(".")},i),(m=d[f])||((m=d[f]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,a,h,s)||e.addEventListener&&e.addEventListener(f,s)),c.add&&(c.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?m.splice(m.delegateCount++,0,u):m.push(u),w.event.global[f]=!0)},remove:function(e,t,n,a,r){var i,s,o,d,l,u,c,m,f,h,_,p=Q.hasData(e)&&Q.get(e);if(p&&(d=p.events)){for(l=(t=(t||"").match(N)||[""]).length;l--;)if(f=_=(o=Ye.exec(t[l])||[])[1],h=(o[2]||"").split(".").sort(),f){for(c=w.event.special[f]||{},m=d[f=(a?c.delegateType:c.bindType)||f]||[],o=o[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=m.length;i--;)u=m[i],!r&&_!==u.origType||n&&n.guid!==u.guid||o&&!o.test(u.namespace)||a&&a!==u.selector&&("**"!==a||!u.selector)||(m.splice(i,1),u.selector&&m.delegateCount--,c.remove&&c.remove.call(e,u));s&&!m.length&&(c.teardown&&!1!==c.teardown.call(e,h,p.handle)||w.removeEvent(e,f,p.handle),delete d[f])}else for(f in d)w.event.remove(e,f+t[l],n,a,!0);w.isEmptyObject(d)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,a,r,i,s,o=new Array(arguments.length),d=w.event.fix(e),l=(Q.get(this,"events")||Object.create(null))[d.type]||[],u=w.event.special[d.type]||{};for(o[0]=d,t=1;t<arguments.length;t++)o[t]=arguments[t];if(d.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,d)){for(s=w.event.handlers.call(this,d,l),t=0;(r=s[t++])&&!d.isPropagationStopped();)for(d.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!d.isImmediatePropagationStopped();)d.rnamespace&&!1!==i.namespace&&!d.rnamespace.test(i.namespace)||(d.handleObj=i,d.data=i.data,void 0!==(a=((w.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,o))&&!1===(d.result=a)&&(d.preventDefault(),d.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,d),d.result}},handlers:function(e,t){var n,a,r,i,s,o=[],d=t.delegateCount,l=e.target;if(d&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(i=[],s={},n=0;n<d;n++)void 0===s[r=(a=t[n]).selector+" "]&&(s[r]=a.needsContext?-1<w(r,this).index(l):w.find(r,this,null,[l]).length),s[r]&&i.push(a);i.length&&o.push({elem:l,handlers:i})}return l=this,d<t.length&&o.push({elem:l,handlers:t.slice(d)}),o},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return _e.test(t.type)&&t.click&&j(t,"input")&&je(t,"click",De),!1},trigger:function(e){var t=this||e;return _e.test(t.type)&&t.click&&j(t,"input")&&je(t,"click"),!0},_default:function(e){var t=e.target;return _e.test(t.type)&&t.click&&j(t,"input")&&Q.get(t,"click")||j(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?De:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=De,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=De,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=De,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({focus:"focusin",blur:"focusout"},(function(e,t){w.event.special[e]={setup:function(){return je(this,e,xe),!1},trigger:function(){return je(this,e),!0},delegateType:t}})),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,a=e.relatedTarget,r=e.handleObj;return a&&(a===this||w.contains(this,a))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),w.fn.extend({on:function(e,t,n,a){return Se(this,e,t,n,a)},one:function(e,t,n,a){return Se(this,e,t,n,a,1)},off:function(e,t,n){var a,r;if(e&&e.preventDefault&&e.handleObj)return a=e.handleObj,w(e.delegateTarget).off(a.namespace?a.origType+"."+a.namespace:a.origType,a.selector,a.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Te),this.each((function(){w.event.remove(this,e,n,t)}))}});var Ce=/<script|<style|<link/i,He=/checked\s*(?:[^=]|=\s*.checked.)/i,Ee=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return j(e,"table")&&j(11!==t.nodeType?t:t.firstChild,"tr")&&w(e).children("tbody")[0]||e}function Oe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function We(e,t){var n,a,r,i,s,o;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.get(e).events))for(r in Q.remove(t,"handle events"),o)for(n=0,a=o[r].length;n<a;n++)w.event.add(t,r,o[r][n]);Z.hasData(e)&&(i=Z.access(e),s=w.extend({},i),Z.set(t,s))}}function Ne(e,t,n,a){t=d(t);var r,i,s,o,l,u,c=0,m=e.length,f=m-1,h=t[0],_=y(h);if(_||1<m&&"string"==typeof h&&!p.checkClone&&He.test(h))return e.each((function(r){var i=e.eq(r);_&&(t[0]=h.call(this,r,i.html())),Ne(i,t,n,a)}));if(m&&(i=(r=ke(t,e[0].ownerDocument,!1,e,a)).firstChild,1===r.childNodes.length&&(r=i),i||a)){for(o=(s=w.map(ve(r,"script"),Oe)).length;c<m;c++)l=r,c!==f&&(l=w.clone(l,!0,!0),o&&w.merge(s,ve(l,"script"))),n.call(e[c],l,c);if(o)for(u=s[s.length-1].ownerDocument,w.map(s,Pe),c=0;c<o;c++)l=s[c],ye.test(l.type||"")&&!Q.access(l,"globalEval")&&w.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&!l.noModule&&w._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):L(l.textContent.replace(Ee,""),l,u))}return e}function Fe(e,t,n){for(var a,r=t?w.filter(t,e):e,i=0;null!=(a=r[i]);i++)n||1!==a.nodeType||w.cleanData(ve(a)),a.parentNode&&(n&&oe(a)&&Me(ve(a,"script")),a.parentNode.removeChild(a));return e}w.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var a,r,i,s,o,d,l,u=e.cloneNode(!0),c=oe(e);if(!(p.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(s=ve(u),a=0,r=(i=ve(e)).length;a<r;a++)o=i[a],"input"===(l=(d=s[a]).nodeName.toLowerCase())&&_e.test(o.type)?d.checked=o.checked:"input"!==l&&"textarea"!==l||(d.defaultValue=o.defaultValue);if(t)if(n)for(i=i||ve(e),s=s||ve(u),a=0,r=i.length;a<r;a++)We(i[a],s[a]);else We(e,u);return 0<(s=ve(u,"script")).length&&Me(s,!c&&ve(e,"script")),u},cleanData:function(e){for(var t,n,a,r=w.event.special,i=0;void 0!==(n=e[i]);i++)if(K(n)){if(t=n[Q.expando]){if(t.events)for(a in t.events)r[a]?w.event.remove(n,a):w.removeEvent(n,a,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Fe(this,e,!0)},remove:function(e){return Fe(this,e)},text:function(e){return $(this,(function(e){return void 0===e?w.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ne(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)}))},prepend:function(){return Ne(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ne(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ne(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return w.clone(this,e,t)}))},html:function(e){return $(this,(function(e){var t=this[0]||{},n=0,a=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ce.test(e)&&!ge[(pe.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<a;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ne(this,arguments,(function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ve(this)),n&&n.replaceChild(t,this))}),e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){w.fn[e]=function(e){for(var n,a=[],r=w(e),i=r.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),w(r[s])[t](n),l.apply(a,n.get());return this.pushStack(a)}}));var Be=new RegExp("^("+ae+")(?!px)[a-z%]+$","i"),Re=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ie=function(e,t,n){var a,r,i={};for(r in t)i[r]=e.style[r],e.style[r]=t[r];for(r in a=n.call(e),t)e.style[r]=i[r];return a},ze=new RegExp(ie.join("|"),"i");function qe(e,t,n){var a,r,i,s,o=e.style;return(n=n||Re(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||oe(e)||(s=w.style(e,t)),!p.pixelBoxStyles()&&Be.test(s)&&ze.test(t)&&(a=o.width,r=o.minWidth,i=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=a,o.minWidth=r,o.maxWidth=i)),void 0!==s?s+"":s}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(l).appendChild(u);var e=n.getComputedStyle(u);a="1%"!==e.top,d=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),r=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),se.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var a,r,i,s,o,d,l=v.createElement("div"),u=v.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===u.style.backgroundClip,w.extend(p,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),a},reliableMarginLeft:function(){return e(),d},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,a,r;return null==o&&(e=v.createElement("table"),t=v.createElement("tr"),a=v.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",a.style.height="9px",se.appendChild(e).appendChild(t).appendChild(a),r=n.getComputedStyle(t),o=3<parseInt(r.height),se.removeChild(e)),o}}))}();var Ue=["Webkit","Moz","ms"],Je=v.createElement("div").style,Ge={};function Ve(e){return w.cssProps[e]||Ge[e]||(e in Je?e:Ge[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in Je)return e}(e)||e)}var Ke=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var a=re.exec(t);return a?Math.max(0,a[2]-(n||0))+(a[3]||"px"):t}function tt(e,t,n,a,r,i){var s="width"===t?1:0,o=0,d=0;if(n===(a?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(d+=w.css(e,n+ie[s],!0,r)),a?("content"===n&&(d-=w.css(e,"padding"+ie[s],!0,r)),"margin"!==n&&(d-=w.css(e,"border"+ie[s]+"Width",!0,r))):(d+=w.css(e,"padding"+ie[s],!0,r),"padding"!==n?d+=w.css(e,"border"+ie[s]+"Width",!0,r):o+=w.css(e,"border"+ie[s]+"Width",!0,r));return!a&&0<=i&&(d+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-d-o-.5))||0),d}function nt(e,t,n){var a=Re(e),r=(!p.boxSizingReliable()||n)&&"border-box"===w.css(e,"boxSizing",!1,a),i=r,s=qe(e,t,a),o="offset"+t[0].toUpperCase()+t.slice(1);if(Be.test(s)){if(!n)return s;s="auto"}return(!p.boxSizingReliable()&&r||!p.reliableTrDimensions()&&j(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===w.css(e,"display",!1,a))&&e.getClientRects().length&&(r="border-box"===w.css(e,"boxSizing",!1,a),(i=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+tt(e,t,n||(r?"border":"content"),i,a,s)+"px"}function at(e,t,n,a,r){return new at.prototype.init(e,t,n,a,r)}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,a){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,i,s,o=V(t),d=Xe.test(t),l=e.style;if(d||(t=Ve(o)),s=w.cssHooks[t]||w.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,a))?r:l[t];"string"==(i=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ue(e,t,r),i="number"),null!=n&&n==n&&("number"!==i||d||(n+=r&&r[3]||(w.cssNumber[o]?"":"px")),p.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,a))||(d?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,a){var r,i,s,o=V(t);return Xe.test(t)||(t=Ve(o)),(s=w.cssHooks[t]||w.cssHooks[o])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=qe(e,t,a)),"normal"===r&&t in Ze&&(r=Ze[t]),""===n||n?(i=parseFloat(r),!0===n||isFinite(i)?i||0:r):r}}),w.each(["height","width"],(function(e,t){w.cssHooks[t]={get:function(e,n,a){if(n)return!Ke.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,a):Ie(e,Qe,(function(){return nt(e,t,a)}))},set:function(e,n,a){var r,i=Re(e),s=!p.scrollboxSize()&&"absolute"===i.position,o=(s||a)&&"border-box"===w.css(e,"boxSizing",!1,i),d=a?tt(e,t,a,o,i):0;return o&&s&&(d-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-tt(e,t,"border",!1,i)-.5)),d&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),et(0,n,d)}}})),w.cssHooks.marginLeft=$e(p.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),w.each({margin:"",padding:"",border:"Width"},(function(e,t){w.cssHooks[e+t]={expand:function(n){for(var a=0,r={},i="string"==typeof n?n.split(" "):[n];a<4;a++)r[e+ie[a]+t]=i[a]||i[a-2]||i[0];return r}},"margin"!==e&&(w.cssHooks[e+t].set=et)})),w.fn.extend({css:function(e,t){return $(this,(function(e,t,n){var a,r,i={},s=0;if(Array.isArray(t)){for(a=Re(e),r=t.length;s<r;s++)i[t[s]]=w.css(e,t[s],!1,a);return i}return void 0!==n?w.style(e,t,n):w.css(e,t)}),e,t,1<arguments.length)}}),((w.Tween=at).prototype={constructor:at,init:function(e,t,n,a,r,i){this.elem=e,this.prop=n,this.easing=r||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=a,this.unit=i||(w.cssNumber[n]?"":"px")},cur:function(){var e=at.propHooks[this.prop];return e&&e.get?e.get(this):at.propHooks._default.get(this)},run:function(e){var t,n=at.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):at.propHooks._default.set(this),this}}).init.prototype=at.prototype,(at.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||!w.cssHooks[e.prop]&&null==e.elem.style[Ve(e.prop)]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=at.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},w.fx=at.prototype.init,w.fx.step={};var rt,it,st,ot,dt=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ut(){it&&(!1===v.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ut):n.setTimeout(ut,w.fx.interval),w.fx.tick())}function ct(){return n.setTimeout((function(){rt=void 0})),rt=Date.now()}function mt(e,t){var n,a=0,r={height:e};for(t=t?1:0;a<4;a+=2-t)r["margin"+(n=ie[a])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var a,r=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),i=0,s=r.length;i<s;i++)if(a=r[i].call(n,t,e))return a}function ht(e,t,n){var a,r,i=0,s=ht.prefilters.length,o=w.Deferred().always((function(){delete d.elem})),d=function(){if(r)return!1;for(var t=rt||ct(),n=Math.max(0,l.startTime+l.duration-t),a=1-(n/l.duration||0),i=0,s=l.tweens.length;i<s;i++)l.tweens[i].run(a);return o.notifyWith(e,[l,a,n]),a<1&&s?n:(s||o.notifyWith(e,[l,1,0]),o.resolveWith(e,[l]),!1)},l=o.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var a=w.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(a),a},stop:function(t){var n=0,a=t?l.tweens.length:0;if(r)return this;for(r=!0;n<a;n++)l.tweens[n].run(1);return t?(o.notifyWith(e,[l,1,0]),o.resolveWith(e,[l,t])):o.rejectWith(e,[l,t]),this}}),u=l.props;for(function(e,t){var n,a,r,i,s;for(n in e)if(r=t[a=V(n)],i=e[n],Array.isArray(i)&&(r=i[1],i=e[n]=i[0]),n!==a&&(e[a]=i,delete e[n]),(s=w.cssHooks[a])&&"expand"in s)for(n in i=s.expand(i),delete e[a],i)n in e||(e[n]=i[n],t[n]=r);else t[a]=r}(u,l.opts.specialEasing);i<s;i++)if(a=ht.prefilters[i].call(l,e,u,l.opts))return y(a.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=a.stop.bind(a)),a;return w.map(u,ft,l),y(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(d,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(N);for(var n,a=0,r=e.length;a<r;a++)n=e[a],ht.tweeners[n]=ht.tweeners[n]||[],ht.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var a,r,i,s,o,d,l,u,c="width"in t||"height"in t,m=this,f={},h=e.style,_=e.nodeType&&le(e),p=Q.get(e,"fxshow");for(a in n.queue||(null==(s=w._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,m.always((function(){m.always((function(){s.unqueued--,w.queue(e,"fx").length||s.empty.fire()}))}))),t)if(r=t[a],dt.test(r)){if(delete t[a],i=i||"toggle"===r,r===(_?"hide":"show")){if("show"!==r||!p||void 0===p[a])continue;_=!0}f[a]=p&&p[a]||w.style(e,a)}if((d=!w.isEmptyObject(t))||!w.isEmptyObject(f))for(a in c&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=p&&p.display)&&(l=Q.get(e,"display")),"none"===(u=w.css(e,"display"))&&(l?u=l:(me([e],!0),l=e.style.display||l,u=w.css(e,"display"),me([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===w.css(e,"float")&&(d||(m.done((function(){h.display=l})),null==l&&(u=h.display,l="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",m.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),d=!1,f)d||(p?"hidden"in p&&(_=p.hidden):p=Q.access(e,"fxshow",{display:l}),i&&(p.hidden=!_),_&&me([e],!0),m.done((function(){for(a in _||me([e]),Q.remove(e,"fxshow"),f)w.style(e,a,f[a])}))),d=ft(_?p[a]:0,a,m),a in p||(p[a]=d.start,_&&(d.end=d.start,d.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),w.speed=function(e,t,n){var a=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return w.fx.off?a.duration=0:"number"!=typeof a.duration&&(a.duration in w.fx.speeds?a.duration=w.fx.speeds[a.duration]:a.duration=w.fx.speeds._default),null!=a.queue&&!0!==a.queue||(a.queue="fx"),a.old=a.complete,a.complete=function(){y(a.old)&&a.old.call(this),a.queue&&w.dequeue(this,a.queue)},a},w.fn.extend({fadeTo:function(e,t,n,a){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,a)},animate:function(e,t,n,a){var r=w.isEmptyObject(e),i=w.speed(t,n,a),s=function(){var t=ht(this,w.extend({},e),i);(r||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var a=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",i=w.timers,s=Q.get(this);if(r)s[r]&&s[r].stop&&a(s[r]);else for(r in s)s[r]&&s[r].stop&&lt.test(r)&&a(s[r]);for(r=i.length;r--;)i[r].elem!==this||null!=e&&i[r].queue!==e||(i[r].anim.stop(n),t=!1,i.splice(r,1));!t&&n||w.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Q.get(this),a=n[e+"queue"],r=n[e+"queueHooks"],i=w.timers,s=a?a.length:0;for(n.finish=!0,w.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)a[t]&&a[t].finish&&a[t].finish.call(this);delete n.finish}))}}),w.each(["toggle","show","hide"],(function(e,t){var n=w.fn[t];w.fn[t]=function(e,a,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(mt(t,!0),e,a,r)}})),w.each({slideDown:mt("show"),slideUp:mt("hide"),slideToggle:mt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){w.fn[e]=function(e,n,a){return this.animate(t,e,n,a)}})),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),rt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){it||(it=!0,ut())},w.fx.stop=function(){it=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(e,t){return e=w.fx&&w.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,a){var r=n.setTimeout(t,e);a.stop=function(){n.clearTimeout(r)}}))},st=v.createElement("input"),ot=v.createElement("select").appendChild(v.createElement("option")),st.type="checkbox",p.checkOn=""!==st.value,p.optSelected=ot.selected,(st=v.createElement("input")).value="t",st.type="radio",p.radioValue="t"===st.value;var _t,pt=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return $(this,w.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each((function(){w.removeAttr(this,e)}))}}),w.extend({attr:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?w.prop(e,t,n):(1===i&&w.isXMLDoc(e)||(r=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?_t:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(a=r.get(e,t))?a:null==(a=w.find.attr(e,t))?void 0:a)},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&"radio"===t&&j(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,a=0,r=t&&t.match(N);if(r&&1===e.nodeType)for(;n=r[a++];)e.removeAttribute(n)}}),_t={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=pt[t]||w.find.attr;pt[t]=function(e,t,a){var r,i,s=t.toLowerCase();return a||(i=pt[s],pt[s]=r,r=null!=n(e,t,a)?s:null,pt[s]=i),r}}));var yt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function vt(e){return(e.match(N)||[]).join(" ")}function Mt(e){return e.getAttribute&&e.getAttribute("class")||""}function Lt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}w.fn.extend({prop:function(e,t){return $(this,w.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each((function(){delete this[w.propFix[e]||e]}))}}),w.extend({prop:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&w.isXMLDoc(e)||(t=w.propFix[t]||t,r=w.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:e[t]=n:r&&"get"in r&&null!==(a=r.get(e,t))?a:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){w.propFix[this.toLowerCase()]=this})),w.fn.extend({addClass:function(e){var t,n,a,r,i,s,o,d=0;if(y(e))return this.each((function(t){w(this).addClass(e.call(this,t,Mt(this)))}));if((t=Lt(e)).length)for(;n=this[d++];)if(r=Mt(n),a=1===n.nodeType&&" "+vt(r)+" "){for(s=0;i=t[s++];)a.indexOf(" "+i+" ")<0&&(a+=i+" ");r!==(o=vt(a))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,a,r,i,s,o,d=0;if(y(e))return this.each((function(t){w(this).removeClass(e.call(this,t,Mt(this)))}));if(!arguments.length)return this.attr("class","");if((t=Lt(e)).length)for(;n=this[d++];)if(r=Mt(n),a=1===n.nodeType&&" "+vt(r)+" "){for(s=0;i=t[s++];)for(;-1<a.indexOf(" "+i+" ");)a=a.replace(" "+i+" "," ");r!==(o=vt(a))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e,a="string"===n||Array.isArray(e);return"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){w(this).toggleClass(e.call(this,n,Mt(this),t),t)})):this.each((function(){var t,r,i,s;if(a)for(r=0,i=w(this),s=Lt(e);t=s[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=Mt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,a=0;for(t=" "+e+" ";n=this[a++];)if(1===n.nodeType&&-1<(" "+vt(Mt(n))+" ").indexOf(t))return!0;return!1}});var kt=/\r/g;w.fn.extend({val:function(e){var t,n,a,r=this[0];return arguments.length?(a=y(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=a?e.call(this,n,w(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=w.map(r,(function(e){return null==e?"":e+""}))),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=w.valHooks[r.type]||w.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(kt,""):null==n?"":n:void 0}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:vt(w.text(e))}},select:{get:function(e){var t,n,a,r=e.options,i=e.selectedIndex,s="select-one"===e.type,o=s?null:[],d=s?i+1:r.length;for(a=i<0?d:s?i:0;a<d;a++)if(((n=r[a]).selected||a===i)&&!n.disabled&&(!n.parentNode.disabled||!j(n.parentNode,"optgroup"))){if(t=w(n).val(),s)return t;o.push(t)}return o},set:function(e,t){for(var n,a,r=e.options,i=w.makeArray(t),s=r.length;s--;)((a=r[s]).selected=-1<w.inArray(w.valHooks.option.get(a),i))&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),w.each(["radio","checkbox"],(function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<w.inArray(w(e).val(),t)}},p.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),p.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(e,t,a,r){var i,s,o,d,l,u,c,m,h=[a||v],_=f.call(e,"type")?e.type:e,p=f.call(e,"namespace")?e.namespace.split("."):[];if(s=m=o=a=a||v,3!==a.nodeType&&8!==a.nodeType&&!bt.test(_+w.event.triggered)&&(-1<_.indexOf(".")&&(_=(p=_.split(".")).shift(),p.sort()),l=_.indexOf(":")<0&&"on"+_,(e=e[w.expando]?e:new w.Event(_,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=a),t=null==t?[e]:w.makeArray(t,[e]),c=w.event.special[_]||{},r||!c.trigger||!1!==c.trigger.apply(a,t))){if(!r&&!c.noBubble&&!g(a)){for(d=c.delegateType||_,bt.test(d+_)||(s=s.parentNode);s;s=s.parentNode)h.push(s),o=s;o===(a.ownerDocument||v)&&h.push(o.defaultView||o.parentWindow||n)}for(i=0;(s=h[i++])&&!e.isPropagationStopped();)m=s,e.type=1<i?d:c.bindType||_,(u=(Q.get(s,"events")||Object.create(null))[e.type]&&Q.get(s,"handle"))&&u.apply(s,t),(u=l&&s[l])&&u.apply&&K(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=_,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(h.pop(),t)||!K(a)||l&&y(a[_])&&!g(a)&&((o=a[l])&&(a[l]=null),w.event.triggered=_,e.isPropagationStopped()&&m.addEventListener(_,wt),a[_](),e.isPropagationStopped()&&m.removeEventListener(_,wt),w.event.triggered=void 0,o&&(a[l]=o)),e.result}},simulate:function(e,t,n){var a=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(a,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each((function(){w.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),p.focusin||w.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var a=this.ownerDocument||this.document||this,r=Q.access(a,t);r||a.addEventListener(e,n,!0),Q.access(a,t,(r||0)+1)},teardown:function(){var a=this.ownerDocument||this.document||this,r=Q.access(a,t)-1;r?Q.access(a,t,r):(a.removeEventListener(e,n,!0),Q.remove(a,t))}}}));var Yt=n.location,Dt={guid:Date.now()},Tt=/\?/;w.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+e),t};var xt=/\[\]$/,St=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;function Ht(e,t,n,a){var r;if(Array.isArray(t))w.each(t,(function(t,r){n||xt.test(e)?a(e,r):Ht(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,a)}));else if(n||"object"!==k(t))a(e,t);else for(r in t)Ht(e+"["+r+"]",t[r],n,a)}w.param=function(e,t){var n,a=[],r=function(e,t){var n=y(t)?t():t;a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,(function(){r(this.name,this.value)}));else for(n in e)Ht(n,e[n],t,r);return a.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&Ct.test(this.nodeName)&&!jt.test(e)&&(this.checked||!_e.test(e))})).map((function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,(function(e){return{name:t.name,value:e.replace(St,"\r\n")}})):{name:t.name,value:n.replace(St,"\r\n")}})).get()}});var Et=/%20/g,At=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,Nt=/^\/\//,Ft={},Bt={},Rt="*/".concat("*"),It=v.createElement("a");function zt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var a,r=0,i=t.toLowerCase().match(N)||[];if(y(n))for(;a=i[r++];)"+"===a[0]?(a=a.slice(1)||"*",(e[a]=e[a]||[]).unshift(n)):(e[a]=e[a]||[]).push(n)}}function qt(e,t,n,a){var r={},i=e===Bt;function s(o){var d;return r[o]=!0,w.each(e[o]||[],(function(e,o){var l=o(t,n,a);return"string"!=typeof l||i||r[l]?i?!(d=l):void 0:(t.dataTypes.unshift(l),s(l),!1)})),d}return s(t.dataTypes[0])||!r["*"]&&s("*")}function $t(e,t){var n,a,r=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:a||(a={}))[n]=t[n]);return a&&w.extend(!0,e,a),e}It.href=Yt.href,w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Yt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Yt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$t($t(e,w.ajaxSettings),t):$t(w.ajaxSettings,e)},ajaxPrefilter:zt(Ft),ajaxTransport:zt(Bt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var a,r,i,s,o,d,l,u,c,m,f=w.ajaxSetup({},t),h=f.context||f,_=f.context&&(h.nodeType||h.jquery)?w(h):w.event,p=w.Deferred(),y=w.Callbacks("once memory"),g=f.statusCode||{},M={},L={},k="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=Pt.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return l?i:null},setRequestHeader:function(e,t){return null==l&&(e=L[e.toLowerCase()]=L[e.toLowerCase()]||e,M[e]=t),this},overrideMimeType:function(e){return null==l&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)b.always(e[b.status]);else for(t in e)g[t]=[g[t],e[t]];return this},abort:function(e){var t=e||k;return a&&a.abort(t),Y(0,t),this}};if(p.promise(b),f.url=((e||f.url||Yt.href)+"").replace(Nt,Yt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(N)||[""],null==f.crossDomain){d=v.createElement("a");try{d.href=f.url,d.href=d.href,f.crossDomain=It.protocol+"//"+It.host!=d.protocol+"//"+d.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=w.param(f.data,f.traditional)),qt(Ft,f,t,b),l)return b;for(c in(u=w.event&&f.global)&&0==w.active++&&w.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Wt.test(f.type),r=f.url.replace(At,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Et,"+")):(m=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(Tt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Ot,"$1"),m=(Tt.test(r)?"&":"?")+"_="+Dt.guid+++m),f.url=r+m),f.ifModified&&(w.lastModified[r]&&b.setRequestHeader("If-Modified-Since",w.lastModified[r]),w.etag[r]&&b.setRequestHeader("If-None-Match",w.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&b.setRequestHeader("Content-Type",f.contentType),b.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Rt+"; q=0.01":""):f.accepts["*"]),f.headers)b.setRequestHeader(c,f.headers[c]);if(f.beforeSend&&(!1===f.beforeSend.call(h,b,f)||l))return b.abort();if(k="abort",y.add(f.complete),b.done(f.success),b.fail(f.error),a=qt(Bt,f,t,b)){if(b.readyState=1,u&&_.trigger("ajaxSend",[b,f]),l)return b;f.async&&0<f.timeout&&(o=n.setTimeout((function(){b.abort("timeout")}),f.timeout));try{l=!1,a.send(M,Y)}catch(e){if(l)throw e;Y(-1,e)}}else Y(-1,"No Transport");function Y(e,t,s,d){var c,m,v,M,L,k=t;l||(l=!0,o&&n.clearTimeout(o),a=void 0,i=d||"",b.readyState=0<e?4:0,c=200<=e&&e<300||304===e,s&&(M=function(e,t,n){for(var a,r,i,s,o=e.contents,d=e.dataTypes;"*"===d[0];)d.shift(),void 0===a&&(a=e.mimeType||t.getResponseHeader("Content-Type"));if(a)for(r in o)if(o[r]&&o[r].test(a)){d.unshift(r);break}if(d[0]in n)i=d[0];else{for(r in n){if(!d[0]||e.converters[r+" "+d[0]]){i=r;break}s||(s=r)}i=i||s}if(i)return i!==d[0]&&d.unshift(i),n[i]}(f,b,s)),!c&&-1<w.inArray("script",f.dataTypes)&&(f.converters["text script"]=function(){}),M=function(e,t,n,a){var r,i,s,o,d,l={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!d&&a&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),d=i,i=u.shift())if("*"===i)i=d;else if("*"!==d&&d!==i){if(!(s=l[d+" "+i]||l["* "+i]))for(r in l)if((o=r.split(" "))[1]===i&&(s=l[d+" "+o[0]]||l["* "+o[0]])){!0===s?s=l[r]:!0!==l[r]&&(i=o[0],u.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+d+" to "+i}}}return{state:"success",data:t}}(f,M,b,c),c?(f.ifModified&&((L=b.getResponseHeader("Last-Modified"))&&(w.lastModified[r]=L),(L=b.getResponseHeader("etag"))&&(w.etag[r]=L)),204===e||"HEAD"===f.type?k="nocontent":304===e?k="notmodified":(k=M.state,m=M.data,c=!(v=M.error))):(v=k,!e&&k||(k="error",e<0&&(e=0))),b.status=e,b.statusText=(t||k)+"",c?p.resolveWith(h,[m,k,b]):p.rejectWith(h,[b,k,v]),b.statusCode(g),g=void 0,u&&_.trigger(c?"ajaxSuccess":"ajaxError",[b,f,c?m:v]),y.fireWith(h,[b,k]),u&&(_.trigger("ajaxComplete",[b,f]),--w.active||w.event.trigger("ajaxStop")))}return b},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],(function(e,t){w[t]=function(e,n,a,r){return y(n)&&(r=r||a,a=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:r,data:n,success:a},w.isPlainObject(e)&&e))}})),w.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),w._evalUrl=function(e,t,n){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){w.globalEval(e,t,n)}})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){w(this).wrapInner(e.call(this,t))})):this.each((function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){w(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){w(this).replaceWith(this.childNodes)})),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Jt=w.ajaxSettings.xhr();p.cors=!!Jt&&"withCredentials"in Jt,p.ajax=Jt=!!Jt,w.ajaxTransport((function(e){var t,a;if(p.cors||Jt&&!e.crossDomain)return{send:function(r,i){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)o.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=a=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?i(0,"error"):i(o.status,o.statusText):i(Ut[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=t(),a=o.onerror=o.ontimeout=t("error"),void 0!==o.onabort?o.onabort=a:o.onreadystatechange=function(){4===o.readyState&&n.setTimeout((function(){t&&a()}))},t=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(r){if(t)throw r}},abort:function(){t&&t()}}})),w.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),w.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(a,r){t=w("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),v.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Gt,Vt=[],Kt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||w.expando+"_"+Dt.guid++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",(function(e,t,a){var r,i,s,o=!1!==e.jsonp&&(Kt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kt.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(Kt,"$1"+r):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||w.error(r+" was not called"),s[0]},e.dataTypes[0]="json",i=n[r],n[r]=function(){s=arguments},a.always((function(){void 0===i?w(n).removeProp(r):n[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Vt.push(r)),s&&y(i)&&i(s[0]),s=i=void 0})),"script"})),p.createHTMLDocument=((Gt=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Gt.childNodes.length),w.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(p.createHTMLDocument?((a=(t=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,t.head.appendChild(a)):t=v),i=!n&&[],(r=C.exec(e))?[t.createElement(r[1])]:(r=ke([e],t,i),i&&i.length&&w(i).remove(),w.merge([],r.childNodes)));var a,r,i},w.fn.load=function(e,t,n){var a,r,i,s=this,o=e.indexOf(" ");return-1<o&&(a=vt(e.slice(o)),e=e.slice(0,o)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),0<s.length&&w.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){i=arguments,s.html(a?w("<div>").append(w.parseHTML(e)).find(a):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},w.expr.pseudos.animated=function(e){return w.grep(w.timers,(function(t){return e===t.elem})).length},w.offset={setOffset:function(e,t,n){var a,r,i,s,o,d,l=w.css(e,"position"),u=w(e),c={};"static"===l&&(e.style.position="relative"),o=u.offset(),i=w.css(e,"top"),d=w.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(i+d).indexOf("auto")?(s=(a=u.position()).top,r=a.left):(s=parseFloat(i)||0,r=parseFloat(d)||0),y(t)&&(t=t.call(e,n,w.extend({},o))),null!=t.top&&(c.top=t.top-o.top+s),null!=t.left&&(c.left=t.left-o.left+r),"using"in t?t.using.call(e,c):("number"==typeof c.top&&(c.top+="px"),"number"==typeof c.left&&(c.left+="px"),u.css(c))}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){w.offset.setOffset(this,e,t)}));var t,n,a=this[0];return a?a.getClientRects().length?(t=a.getBoundingClientRect(),n=a.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,a=this[0],r={top:0,left:0};if("fixed"===w.css(a,"position"))t=a.getBoundingClientRect();else{for(t=this.offset(),n=a.ownerDocument,e=a.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position");)e=e.parentNode;e&&e!==a&&1===e.nodeType&&((r=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),r.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-w.css(a,"marginTop",!0),left:t.left-r.left-w.css(a,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===w.css(e,"position");)e=e.offsetParent;return e||se}))}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;w.fn[e]=function(a){return $(this,(function(e,a,r){var i;if(g(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===r)return i?i[t]:e[a];i?i.scrollTo(n?i.pageXOffset:r,n?r:i.pageYOffset):e[a]=r}),e,a,arguments.length)}})),w.each(["top","left"],(function(e,t){w.cssHooks[t]=$e(p.pixelPosition,(function(e,n){if(n)return n=qe(e,t),Be.test(n)?w(e).position()[t]+"px":n}))})),w.each({Height:"height",Width:"width"},(function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,a){w.fn[a]=function(r,i){var s=arguments.length&&(n||"boolean"!=typeof r),o=n||(!0===r||!0===i?"margin":"border");return $(this,(function(t,n,r){var i;return g(t)?0===a.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?w.css(t,n,o):w.style(t,n,r,o)}),t,s?r:void 0,s)}}))})),w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){w.fn[t]=function(e){return this.on(t,e)}})),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,a){return this.on(t,e,n,a)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){w.fn[t]=function(e,n){return 0<arguments.length?this.on(t,null,e,n):this.trigger(t)}}));var Xt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.proxy=function(e,t){var n,a,r;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return a=o.call(arguments,2),(r=function(){return e.apply(t||this,a.concat(o.call(arguments)))}).guid=e.guid=e.guid||w.guid++,r},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=j,w.isFunction=y,w.isWindow=g,w.camelCase=V,w.type=k,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},w.trim=function(e){return null==e?"":(e+"").replace(Xt,"")},void 0===(a=function(){return w}.apply(t,[]))||(e.exports=a);var Qt=n.jQuery,Zt=n.$;return w.noConflict=function(e){return n.$===w&&(n.$=Zt),e&&n.jQuery===w&&(n.jQuery=Qt),w},void 0===r&&(n.jQuery=n.$=w),w}))},function(e,t,n){e.exports=function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function a(e,t,a){return t&&n(e.prototype,t),a&&n(e,a),e}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e,t,n){return(o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var a=[null];a.push.apply(a,t);var r=new(Function.bind.apply(e,a));return n&&s(r,n.prototype),r}).apply(null,arguments)}function d(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e,t,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var a=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=i(e)););return e}(e,t);if(a){var r=Object.getOwnPropertyDescriptor(a,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function u(e){return Object.keys(e).map((function(t){return e[t]}))}function c(e){return Array.prototype.slice.call(e)}function m(e){console.error("".concat(g," ").concat(e))}function f(e,t){!function(e){-1===M.indexOf(e)&&(M.push(e),v(e))}('"'.concat(e,'" is deprecated and will be removed in the next major release. Please use "').concat(t,'" instead.'))}function h(e){return e&&Promise.resolve(e)===e}function _(e){var t={};for(var n in e)t[e[n]]="swal2-"+e[n];return t}function p(e,t){return e.classList.contains(t)}function y(t,n,a){if(function(e){c(e.classList).forEach((function(t){-1===u(b).indexOf(t)&&-1===u(w).indexOf(t)&&e.classList.remove(t)}))}(t),n&&n[a]){if("string"!=typeof n[a]&&!n[a].forEach)return v("Invalid type of customClass.".concat(a,'! Expected string or iterable object, got "').concat(e(n[a]),'"'));re(t,n[a])}}var g="SweetAlert2:",v=function(e){console.warn("".concat(g," ").concat(e))},M=[],L=function(e){return"function"==typeof e?e():e},k=Object.freeze({cancel:"cancel",backdrop:"backdrop",close:"close",esc:"esc",timer:"timer"}),b=_(["container","shown","height-auto","iosfix","popup","modal","no-backdrop","toast","toast-shown","toast-column","show","hide","noanimation","close","title","header","content","actions","confirm","cancel","footer","icon","image","input","file","range","select","radio","checkbox","label","textarea","inputerror","validation-message","progress-steps","active-progress-step","progress-step","progress-step-line","loading","styled","top","top-start","top-end","top-left","top-right","center","center-start","center-end","center-left","center-right","bottom","bottom-start","bottom-end","bottom-left","bottom-right","grow-row","grow-column","grow-fullscreen","rtl"]),w=_(["success","warning","info","question","error"]),Y={previousBodyPadding:null};function D(e,t){if(!t)return null;switch(t){case"select":case"textarea":case"file":return se(e,b[t]);case"checkbox":return e.querySelector(".".concat(b.checkbox," input"));case"radio":return e.querySelector(".".concat(b.radio," input:checked"))||e.querySelector(".".concat(b.radio," input:first-child"));case"range":return e.querySelector(".".concat(b.range," input"));default:return se(e,b.input)}}function T(e){if(e.focus(),"file"!==e.type){var t=e.value;e.value="",e.value=t}}function x(e,t,n){e&&t&&("string"==typeof t&&(t=t.split(/\s+/).filter(Boolean)),t.forEach((function(t){e.forEach?e.forEach((function(e){n?e.classList.add(t):e.classList.remove(t)})):n?e.classList.add(t):e.classList.remove(t)})))}function S(e,t,n){n||0===parseInt(n)?e.style[t]="number"==typeof n?n+"px":n:e.style.removeProperty(t)}function j(e,t){var n=1<arguments.length&&void 0!==t?t:"flex";e.style.opacity="",e.style.display=n}function C(e){e.style.opacity="",e.style.display="none"}function H(e,t,n){t?j(e,n):C(e)}function E(e){return!(!e||!(e.offsetWidth||e.offsetHeight||e.getClientRects().length))}function A(e){var t=window.getComputedStyle(e),n=parseFloat(t.getPropertyValue("animation-duration")||"0"),a=parseFloat(t.getPropertyValue("transition-duration")||"0");return 0<n||0<a}function O(){return document.body.querySelector("."+b.container)}function P(e){var t=O();return t?t.querySelector(e):null}function W(e){return P("."+e)}function N(){return W(b.popup)}function F(){return c(N().querySelectorAll("."+b.icon))}function B(){var e=F().filter((function(e){return E(e)}));return e.length?e[0]:null}function R(){return W(b.title)}function I(){return W(b.content)}function z(){return W(b.image)}function q(){return W(b["progress-steps"])}function $(){return W(b["validation-message"])}function U(){return P("."+b.actions+" ."+b.confirm)}function J(){return P("."+b.actions+" ."+b.cancel)}function G(){return W(b.actions)}function V(){return W(b.header)}function K(){return W(b.footer)}function X(){return W(b.close)}function Q(){var e=c(N().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort((function(e,t){return e=parseInt(e.getAttribute("tabindex")),(t=parseInt(t.getAttribute("tabindex")))<e?1:e<t?-1:0})),t=c(N().querySelectorAll('\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n')).filter((function(e){return"-1"!==e.getAttribute("tabindex")}));return function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(e.concat(t)).filter((function(e){return E(e)}))}function Z(){return!oe()&&!document.body.classList.contains(b["no-backdrop"])}function ee(){return"undefined"==typeof window||"undefined"==typeof document}function te(e){Lt.isVisible()&&ae!==e.target.value&&Lt.resetValidationMessage(),ae=e.target.value}function ne(t,n){t instanceof HTMLElement?n.appendChild(t):"object"===e(t)?le(n,t):t&&(n.innerHTML=t)}var ae,re=function(e,t){x(e,t,!0)},ie=function(e,t){x(e,t,!1)},se=function(e,t){for(var n=0;n<e.childNodes.length;n++)if(p(e.childNodes[n],t))return e.childNodes[n]},oe=function(){return document.body.classList.contains(b["toast-shown"])},de='\n <div aria-labelledby="'.concat(b.title,'" aria-describedby="').concat(b.content,'" class="').concat(b.popup,'" tabindex="-1">\n   <div class="').concat(b.header,'">\n     <ul class="').concat(b["progress-steps"],'"></ul>\n     <div class="').concat(b.icon," ").concat(w.error,'">\n       <span class="swal2-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span>\n     </div>\n     <div class="').concat(b.icon," ").concat(w.question,'"></div>\n     <div class="').concat(b.icon," ").concat(w.warning,'"></div>\n     <div class="').concat(b.icon," ").concat(w.info,'"></div>\n     <div class="').concat(b.icon," ").concat(w.success,'">\n       <div class="swal2-success-circular-line-left"></div>\n       <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n       <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n       <div class="swal2-success-circular-line-right"></div>\n     </div>\n     <img class="').concat(b.image,'" />\n     <h2 class="').concat(b.title,'" id="').concat(b.title,'"></h2>\n     <button type="button" class="').concat(b.close,'"></button>\n   </div>\n   <div class="').concat(b.content,'">\n     <div id="').concat(b.content,'"></div>\n     <input class="').concat(b.input,'" />\n     <input type="file" class="').concat(b.file,'" />\n     <div class="').concat(b.range,'">\n       <input type="range" />\n       <output></output>\n     </div>\n     <select class="').concat(b.select,'"></select>\n     <div class="').concat(b.radio,'"></div>\n     <label for="').concat(b.checkbox,'" class="').concat(b.checkbox,'">\n       <input type="checkbox" />\n       <span class="').concat(b.label,'"></span>\n     </label>\n     <textarea class="').concat(b.textarea,'"></textarea>\n     <div class="').concat(b["validation-message"],'" id="').concat(b["validation-message"],'"></div>\n   </div>\n   <div class="').concat(b.actions,'">\n     <button type="button" class="').concat(b.confirm,'">OK</button>\n     <button type="button" class="').concat(b.cancel,'">Cancel</button>\n   </div>\n   <div class="').concat(b.footer,'">\n   </div>\n </div>\n').replace(/(^|\n)\s*/g,""),le=function(e,t){if(e.innerHTML="",0 in t)for(var n=0;n in t;n++)e.appendChild(t[n].cloneNode(!0));else e.appendChild(t.cloneNode(!0))},ue=function(){if(ee())return!1;var e=document.createElement("div"),t={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&void 0!==e.style[n])return t[n];return!1}();function ce(e,t,n){H(e,n["showC"+t.substring(1)+"Button"],"inline-block"),e.innerHTML=n[t+"ButtonText"],e.setAttribute("aria-label",n[t+"ButtonAriaLabel"]),e.className=b[t],y(e,n.customClass,t+"Button"),re(e,n[t+"ButtonClass"])}function me(e,t){e.placeholder&&!t.inputPlaceholder||(e.placeholder=t.inputPlaceholder)}var fe={promise:new WeakMap,innerParams:new WeakMap,domCache:new WeakMap},he=["input","file","range","select","radio","checkbox","textarea"],_e=function(e){var t=b[e]?b[e]:b.input;return se(I(),t)},pe={};function ye(e,t){var n=I().querySelector("#"+b.content);t.html?(ne(t.html,n),j(n,"block")):t.text?(n.textContent=t.text,j(n,"block")):C(n),function(e,t){var n=I(),a=fe.innerParams.get(e),r=!a||t.input!==a.input;he.forEach((function(e){var a=b[e],i=se(n,a);(function(e,t){var n=D(I(),e);if(n)for(var a in function(e){for(var t=0;t<e.attributes.length;t++){var n=e.attributes[t].name;-1===["type","value","style"].indexOf(n)&&e.removeAttribute(n)}}(n),t)"range"===e&&"placeholder"===a||n.setAttribute(a,t[a])})(e,t.inputAttributes),i.className=a,r&&C(i)})),t.input&&(r&&function(e){if(!pe[e.input])return m('Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "'.concat(e.input,'"'));var t=_e(e.input),n=pe[e.input](t,e);j(n),setTimeout((function(){T(n)}))}(t),function(e){var t=_e(e.input);e.inputClass&&re(t,e.inputClass),e.customClass&&re(t,e.customClass.input)}(t))}(e,t),y(I(),t.customClass,"content")}function ge(e,t){var n=q();if(!t.progressSteps||0===t.progressSteps.length)return C(n);j(n),n.innerHTML="";var a=parseInt(null===t.currentProgressStep?Lt.getQueueStep():t.currentProgressStep);a>=t.progressSteps.length&&v("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),t.progressSteps.forEach((function(e,r){var i=function(e){var t=document.createElement("li");return re(t,b["progress-step"]),t.innerHTML=e,t}(e);if(n.appendChild(i),r===a&&re(i,b["active-progress-step"]),r!==t.progressSteps.length-1){var s=function(e){var t=document.createElement("li");return re(t,b["progress-step-line"]),e.progressStepsDistance&&(t.style.width=e.progressStepsDistance),t}(e);n.appendChild(s)}}))}function ve(e,t){!function(e,t){var n=N();S(n,"width",t.width),S(n,"padding",t.padding),t.background&&(n.style.background=t.background),n.className=b.popup,t.toast?(re([document.documentElement,document.body],b["toast-shown"]),re(n,b.toast)):re(n,b.modal),y(n,t.customClass,"popup"),"string"==typeof t.customClass&&re(n,t.customClass),x(n,b.noanimation,!t.animation)}(0,t),function(e,t){var n=O();n&&(function(e,t){"string"==typeof t?e.style.background=t:t||re([document.documentElement,document.body],b["no-backdrop"])}(n,t.backdrop),!t.backdrop&&t.allowOutsideClick&&v('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`'),function(e,t){t in b?re(e,b[t]):(v('The "position" parameter is not valid, defaulting to "center"'),re(e,b.center))}(n,t.position),function(e,t){if(t&&"string"==typeof t){var n="grow-"+t;n in b&&re(e,b[n])}}(n,t.grow),y(n,t.customClass,"container"),t.customContainerClass&&re(n,t.customContainerClass))}(0,t),function(e,t){y(V(),t.customClass,"header"),ge(0,t),function(e,t){var n=fe.innerParams.get(e);if(n&&t.type===n.type&&B())y(B(),t.customClass,"icon");else if(Le(),t.type)if(ke(),-1!==Object.keys(w).indexOf(t.type)){var a=P(".".concat(b.icon,".").concat(w[t.type]));j(a),y(a,t.customClass,"icon"),x(a,"swal2-animate-".concat(t.type,"-icon"),t.animation)}else m('Unknown type! Expected "success", "error", "warning", "info" or "question", got "'.concat(t.type,'"'))}(e,t),function(e,t){var n=z();if(!t.imageUrl)return C(n);j(n),n.setAttribute("src",t.imageUrl),n.setAttribute("alt",t.imageAlt),S(n,"width",t.imageWidth),S(n,"height",t.imageHeight),n.className=b.image,y(n,t.customClass,"image"),t.imageClass&&re(n,t.imageClass)}(0,t),function(e,t){var n=R();H(n,t.title||t.titleText),t.title&&ne(t.title,n),t.titleText&&(n.innerText=t.titleText),y(n,t.customClass,"title")}(0,t),function(e,t){var n=X();n.innerHTML=t.closeButtonHtml,y(n,t.customClass,"closeButton"),H(n,t.showCloseButton),n.setAttribute("aria-label",t.closeButtonAriaLabel)}(0,t)}(e,t),ye(e,t),function(e,t){var n=G(),a=U(),r=J();t.showConfirmButton||t.showCancelButton||C(n),y(n,t.customClass,"actions"),ce(a,"confirm",t),ce(r,"cancel",t),t.buttonsStyling?function(e,t,n){re([e,t],b.styled),n.confirmButtonColor&&(e.style.backgroundColor=n.confirmButtonColor),n.cancelButtonColor&&(t.style.backgroundColor=n.cancelButtonColor);var a=window.getComputedStyle(e).getPropertyValue("background-color");e.style.borderLeftColor=a,e.style.borderRightColor=a}(a,r,t):(ie([a,r],b.styled),a.style.backgroundColor=a.style.borderLeftColor=a.style.borderRightColor="",r.style.backgroundColor=r.style.borderLeftColor=r.style.borderRightColor=""),t.reverseButtons&&a.parentNode.insertBefore(r,a)}(0,t),function(e,t){var n=K();H(n,t.footer),t.footer&&ne(t.footer,n),y(n,t.customClass,"footer")}(0,t),"function"==typeof t.onRender&&t.onRender(N())}function Me(){return U()&&U().click()}pe.text=pe.email=pe.password=pe.number=pe.tel=pe.url=function(t,n){return"string"==typeof n.inputValue||"number"==typeof n.inputValue?t.value=n.inputValue:h(n.inputValue)||v('Unexpected type of inputValue! Expected "string", "number" or "Promise", got "'.concat(e(n.inputValue),'"')),me(t,n),t.type=n.input,t},pe.file=function(e,t){return me(e,t),e},pe.range=function(e,t){var n=e.querySelector("input"),a=e.querySelector("output");return n.value=t.inputValue,n.type=t.input,a.value=t.inputValue,e},pe.select=function(e,t){if(e.innerHTML="",t.inputPlaceholder){var n=document.createElement("option");n.innerHTML=t.inputPlaceholder,n.value="",n.disabled=!0,n.selected=!0,e.appendChild(n)}return e},pe.radio=function(e){return e.innerHTML="",e},pe.checkbox=function(e,t){var n=D(I(),"checkbox");return n.value=1,n.id=b.checkbox,n.checked=Boolean(t.inputValue),e.querySelector("span").innerHTML=t.inputPlaceholder,e},pe.textarea=function(e,t){if(e.value=t.inputValue,me(e,t),"MutationObserver"in window){var n=parseInt(window.getComputedStyle(N()).width),a=parseInt(window.getComputedStyle(N()).paddingLeft)+parseInt(window.getComputedStyle(N()).paddingRight);new MutationObserver((function(){var t=e.offsetWidth+a;N().style.width=n<t?t+"px":null})).observe(e,{attributes:!0,attributeFilter:["style"]})}return e};var Le=function(){for(var e=F(),t=0;t<e.length;t++)C(e[t])},ke=function(){for(var e=N(),t=window.getComputedStyle(e).getPropertyValue("background-color"),n=e.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix"),a=0;a<n.length;a++)n[a].style.backgroundColor=t};function be(){var e=N();e||Lt.fire(""),e=N();var t=G(),n=U(),a=J();j(t),j(n),re([e,t],b.loading),n.disabled=!0,a.disabled=!0,e.setAttribute("data-loading",!0),e.setAttribute("aria-busy",!0),e.focus()}function we(e){return Object.prototype.hasOwnProperty.call(xe,e)}function Ye(e){return je[e]}var De=[],Te={},xe={title:"",titleText:"",text:"",html:"",footer:"",type:null,toast:!1,customClass:"",customContainerClass:"",target:"body",backdrop:!0,animation:!0,heightAuto:!0,allowOutsideClick:!0,allowEscapeKey:!0,allowEnterKey:!0,stopKeydownPropagation:!0,keydownListenerCapture:!1,showConfirmButton:!0,showCancelButton:!1,preConfirm:null,confirmButtonText:"OK",confirmButtonAriaLabel:"",confirmButtonColor:null,confirmButtonClass:"",cancelButtonText:"Cancel",cancelButtonAriaLabel:"",cancelButtonColor:null,cancelButtonClass:"",buttonsStyling:!0,reverseButtons:!1,focusConfirm:!0,focusCancel:!1,showCloseButton:!1,closeButtonHtml:"&times;",closeButtonAriaLabel:"Close this dialog",showLoaderOnConfirm:!1,imageUrl:null,imageWidth:null,imageHeight:null,imageAlt:"",imageClass:"",timer:null,width:null,padding:null,background:null,input:null,inputPlaceholder:"",inputValue:"",inputOptions:{},inputAutoTrim:!0,inputClass:"",inputAttributes:{},inputValidator:null,validationMessage:null,grow:!1,position:"center",progressSteps:[],currentProgressStep:null,progressStepsDistance:null,onBeforeOpen:null,onOpen:null,onRender:null,onClose:null,onAfterClose:null,scrollbarPadding:!0},Se=["title","titleText","text","html","type","customClass","showConfirmButton","showCancelButton","confirmButtonText","confirmButtonAriaLabel","confirmButtonColor","confirmButtonClass","cancelButtonText","cancelButtonAriaLabel","cancelButtonColor","cancelButtonClass","buttonsStyling","reverseButtons","imageUrl","imageWidth","imageHeigth","imageAlt","imageClass","progressSteps","currentProgressStep"],je={customContainerClass:"customClass",confirmButtonClass:"customClass",cancelButtonClass:"customClass",imageClass:"customClass",inputClass:"customClass"},Ce=["allowOutsideClick","allowEnterKey","backdrop","focusConfirm","focusCancel","heightAuto","keydownListenerCapture"],He=Object.freeze({isValidParameter:we,isUpdatableParameter:function(e){return-1!==Se.indexOf(e)},isDeprecatedParameter:Ye,argsToParams:function(t){var n={};switch(e(t[0])){case"object":r(n,t[0]);break;default:["title","html","type"].forEach((function(a,r){switch(e(t[r])){case"string":n[a]=t[r];break;case"undefined":break;default:m("Unexpected type of ".concat(a,'! Expected "string", got ').concat(e(t[r])))}}))}return n},isVisible:function(){return E(N())},clickConfirm:Me,clickCancel:function(){return J()&&J().click()},getContainer:O,getPopup:N,getTitle:R,getContent:I,getImage:z,getIcon:B,getIcons:F,getCloseButton:X,getActions:G,getConfirmButton:U,getCancelButton:J,getHeader:V,getFooter:K,getFocusableElements:Q,getValidationMessage:$,isLoading:function(){return N().hasAttribute("data-loading")},fire:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return o(this,t)},mixin:function(e){return function(n){function o(){return t(this,o),d(this,i(o).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(o,n),a(o,[{key:"_main",value:function(t){return l(i(o.prototype),"_main",this).call(this,r({},e,t))}}]),o}(this)},queue:function(e){var t=this;function n(e,t){De=[],document.body.removeAttribute("data-swal2-queue-step"),e(t)}De=e;var a=[];return new Promise((function(e){!function r(i,s){i<De.length?(document.body.setAttribute("data-swal2-queue-step",i),t.fire(De[i]).then((function(t){void 0!==t.value?(a.push(t.value),r(i+1,s)):n(e,{dismiss:t.dismiss})}))):n(e,{value:a})}(0)}))},getQueueStep:function(){return document.body.getAttribute("data-swal2-queue-step")},insertQueueStep:function(e,t){return t&&t<De.length?De.splice(t,0,e):De.push(e)},deleteQueueStep:function(e){void 0!==De[e]&&De.splice(e,1)},showLoading:be,enableLoading:be,getTimerLeft:function(){return Te.timeout&&Te.timeout.getTimerLeft()},stopTimer:function(){return Te.timeout&&Te.timeout.stop()},resumeTimer:function(){return Te.timeout&&Te.timeout.start()},toggleTimer:function(){var e=Te.timeout;return e&&(e.running?e.stop():e.start())},increaseTimer:function(e){return Te.timeout&&Te.timeout.increase(e)},isTimerRunning:function(){return Te.timeout&&Te.timeout.isRunning()}});function Ee(){var e=fe.innerParams.get(this),t=fe.domCache.get(this);e.showConfirmButton||(C(t.confirmButton),e.showCancelButton||C(t.actions)),ie([t.popup,t.actions],b.loading),t.popup.removeAttribute("aria-busy"),t.popup.removeAttribute("data-loading"),t.confirmButton.disabled=!1,t.cancelButton.disabled=!1}function Ae(){return!!window.MSInputMethodContext&&!!document.documentMode}function Oe(){var e=O(),t=N();e.style.removeProperty("align-items"),t.offsetTop<0&&(e.style.alignItems="flex-start")}var Pe={swalPromiseResolve:new WeakMap};function We(e,t,n,a){n?Re(e,a):(new Promise((function(e){var t=window.scrollX,n=window.scrollY;Te.restoreFocusTimeout=setTimeout((function(){Te.previousActiveElement&&Te.previousActiveElement.focus?(Te.previousActiveElement.focus(),Te.previousActiveElement=null):document.body&&document.body.focus(),e()}),100),void 0!==t&&void 0!==n&&window.scrollTo(t,n)})).then((function(){return Re(e,a)})),Te.keydownTarget.removeEventListener("keydown",Te.keydownHandler,{capture:Te.keydownListenerCapture}),Te.keydownHandlerAdded=!1),t.parentNode&&t.parentNode.removeChild(t),Z()&&(null!==Y.previousBodyPadding&&(document.body.style.paddingRight=Y.previousBodyPadding+"px",Y.previousBodyPadding=null),function(){if(p(document.body,b.iosfix)){var e=parseInt(document.body.style.top,10);ie(document.body,b.iosfix),document.body.style.top="",document.body.scrollTop=-1*e}}(),"undefined"!=typeof window&&Ae()&&window.removeEventListener("resize",Oe),c(document.body.children).forEach((function(e){e.hasAttribute("data-previous-aria-hidden")?(e.setAttribute("aria-hidden",e.getAttribute("data-previous-aria-hidden")),e.removeAttribute("data-previous-aria-hidden")):e.removeAttribute("aria-hidden")}))),ie([document.documentElement,document.body],[b.shown,b["height-auto"],b["no-backdrop"],b["toast-shown"],b["toast-column"]])}function Ne(e){var t=N();if(t&&!p(t,b.hide)){var n=fe.innerParams.get(this);if(n){var a=Pe.swalPromiseResolve.get(this);ie(t,b.show),re(t,b.hide),function(e,t,n){var a=O(),r=ue&&A(t),i=n.onClose,s=n.onAfterClose;null!==i&&"function"==typeof i&&i(t),r?Be(e,t,a,s):We(e,a,oe(),s)}(this,t,n),a(e||{})}}}function Fe(e){for(var t in e)e[t]=new WeakMap}var Be=function(e,t,n,a){Te.swalCloseEventFinishedCallback=We.bind(null,e,n,oe(),a),t.addEventListener(ue,(function(e){e.target===t&&(Te.swalCloseEventFinishedCallback(),delete Te.swalCloseEventFinishedCallback)}))},Re=function(e,t){setTimeout((function(){null!==t&&"function"==typeof t&&t(),N()||function(e){delete e.params,delete Te.keydownHandler,delete Te.keydownTarget,Fe(fe),Fe(Pe)}(e)}))};function Ie(e,t,n){var a=fe.domCache.get(e);t.forEach((function(e){a[e].disabled=n}))}function ze(e,t){if(!e)return!1;if("radio"===e.type)for(var n=e.parentNode.parentNode.querySelectorAll("input"),a=0;a<n.length;a++)n[a].disabled=t;else e.disabled=t}var qe=function(){function e(n,a){t(this,e),this.callback=n,this.remaining=a,this.running=!1,this.start()}return a(e,[{key:"start",value:function(){return this.running||(this.running=!0,this.started=new Date,this.id=setTimeout(this.callback,this.remaining)),this.remaining}},{key:"stop",value:function(){return this.running&&(this.running=!1,clearTimeout(this.id),this.remaining-=new Date-this.started),this.remaining}},{key:"increase",value:function(e){var t=this.running;return t&&this.stop(),this.remaining+=e,t&&this.start(),this.remaining}},{key:"getTimerLeft",value:function(){return this.running&&(this.stop(),this.start()),this.remaining}},{key:"isRunning",value:function(){return this.running}}]),e}(),$e={email:function(e,t){return/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid email address")},url:function(e,t){return/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid URL")}};function Ue(e){!function(e){e.inputValidator||Object.keys($e).forEach((function(t){e.input===t&&(e.inputValidator=$e[t])}))}(e),e.showLoaderOnConfirm&&!e.preConfirm&&v("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request"),e.animation=L(e.animation),function(e){e.target&&("string"!=typeof e.target||document.querySelector(e.target))&&("string"==typeof e.target||e.target.appendChild)||(v('Target parameter is not valid, defaulting to "body"'),e.target="body")}(e),"string"==typeof e.title&&(e.title=e.title.split("\n").join("<br />")),function(e){if(function(){var e=O();e&&(e.parentNode.removeChild(e),ie([document.documentElement,document.body],[b["no-backdrop"],b["toast-shown"],b["has-column"]]))}(),ee())m("SweetAlert2 requires document to initialize");else{var t=document.createElement("div");t.className=b.container,t.innerHTML=de;var n=function(e){return"string"==typeof e?document.querySelector(e):e}(e.target);n.appendChild(t),function(e){var t=N();t.setAttribute("role",e.toast?"alert":"dialog"),t.setAttribute("aria-live",e.toast?"polite":"assertive"),e.toast||t.setAttribute("aria-modal","true")}(e),function(e){"rtl"===window.getComputedStyle(e).direction&&re(O(),b.rtl)}(n),function(){var e=I(),t=se(e,b.input),n=se(e,b.file),a=e.querySelector(".".concat(b.range," input")),r=e.querySelector(".".concat(b.range," output")),i=se(e,b.select),s=e.querySelector(".".concat(b.checkbox," input")),o=se(e,b.textarea);t.oninput=te,n.onchange=te,i.onchange=te,s.onchange=te,o.oninput=te,a.oninput=function(e){te(e),r.value=a.value},a.onchange=function(e){te(e),a.nextSibling.value=a.value}}()}}(e)}function Je(e,t){e.removeEventListener(ue,Je),t.style.overflowY="auto"}function Ge(e,t){e.closePopup({value:t})}function Ve(e,t,n){for(var a=Q(),r=0;r<a.length;r++)return(t+=n)===a.length?t=0:-1===t&&(t=a.length-1),a[t].focus();N().focus()}var Ke,Xe=function(e,t){ue&&A(t)?(e.style.overflowY="hidden",t.addEventListener(ue,Je.bind(null,t,e))):e.style.overflowY="auto"},Qe=function(e,t){!function(){if((/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream||"MacIntel"===navigator.platform&&1<navigator.maxTouchPoints)&&!p(document.body,b.iosfix)){var e=document.body.scrollTop;document.body.style.top=-1*e+"px",re(document.body,b.iosfix),function(){var e,t=O();t.ontouchstart=function(n){e=n.target===t||!function(e){return!!(e.scrollHeight>e.clientHeight)}(t)&&"INPUT"!==n.target.tagName},t.ontouchmove=function(t){e&&(t.preventDefault(),t.stopPropagation())}}()}}(),"undefined"!=typeof window&&Ae()&&(Oe(),window.addEventListener("resize",Oe)),c(document.body.children).forEach((function(e){e===O()||function(e,t){if("function"==typeof e.contains)return e.contains(t)}(e,O())||(e.hasAttribute("aria-hidden")&&e.setAttribute("data-previous-aria-hidden",e.getAttribute("aria-hidden")),e.setAttribute("aria-hidden","true"))})),t&&null===Y.previousBodyPadding&&document.body.scrollHeight>window.innerHeight&&(Y.previousBodyPadding=parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right")),document.body.style.paddingRight=Y.previousBodyPadding+function(){if("ontouchstart"in window||navigator.msMaxTouchPoints)return 0;var e=document.createElement("div");e.style.width="50px",e.style.height="50px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}()+"px"),setTimeout((function(){e.scrollTop=0}))},Ze=function(e,t,n){n.animation&&re(t,b.show),j(t),re([document.documentElement,document.body,e],b.shown),n.heightAuto&&n.backdrop&&!n.toast&&re([document.documentElement,document.body],b["height-auto"])},et=function(t,n){function a(e){return nt[n.input](r,at(e),n)}var r=I();h(n.inputOptions)?(be(),n.inputOptions.then((function(e){t.hideLoading(),a(e)}))):"object"===e(n.inputOptions)?a(n.inputOptions):m("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(e(n.inputOptions)))},tt=function(e,t){var n=e.getInput();C(n),t.inputValue.then((function(a){n.value="number"===t.input?parseFloat(a)||0:a+"",j(n),n.focus(),e.hideLoading()})).catch((function(t){m("Error in inputValue promise: "+t),n.value="",j(n),n.focus(),e.hideLoading()}))},nt={select:function(e,t,n){var a=se(e,b.select);t.forEach((function(e){var t=e[0],r=e[1],i=document.createElement("option");i.value=t,i.innerHTML=r,n.inputValue.toString()===t.toString()&&(i.selected=!0),a.appendChild(i)})),a.focus()},radio:function(e,t,n){var a=se(e,b.radio);t.forEach((function(e){var t=e[0],r=e[1],i=document.createElement("input"),s=document.createElement("label");i.type="radio",i.name=b.radio,i.value=t,n.inputValue.toString()===t.toString()&&(i.checked=!0);var o=document.createElement("span");o.innerHTML=r,o.className=b.label,s.appendChild(i),s.appendChild(o),a.appendChild(s)}));var r=a.querySelectorAll("input");r.length&&r[0].focus()}},at=function(e){var t=[];return"undefined"!=typeof Map&&e instanceof Map?e.forEach((function(e,n){t.push([n,e])})):Object.keys(e).forEach((function(n){t.push([n,e[n]])})),t},rt=function(e,t){var n=function(e,t){var n=e.getInput();if(!n)return null;switch(t.input){case"checkbox":return function(e){return e.checked?1:0}(n);case"radio":return function(e){return e.checked?e.value:null}(n);case"file":return function(e){return e.files.length?null!==e.getAttribute("multiple")?e.files:e.files[0]:null}(n);default:return t.inputAutoTrim?n.value.trim():n.value}}(e,t);t.inputValidator?(e.disableInput(),Promise.resolve().then((function(){return t.inputValidator(n,t.validationMessage)})).then((function(a){e.enableButtons(),e.enableInput(),a?e.showValidationMessage(a):it(e,t,n)}))):e.getInput().checkValidity()?it(e,t,n):(e.enableButtons(),e.showValidationMessage(t.validationMessage))},it=function(e,t,n){t.showLoaderOnConfirm&&be(),t.preConfirm?(e.resetValidationMessage(),Promise.resolve().then((function(){return t.preConfirm(n,t.validationMessage)})).then((function(t){E($())||!1===t?e.hideLoading():Ge(e,void 0===t?n:t)}))):Ge(e,n)},st=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Left","Right","Up","Down"],ot=["Escape","Esc"],dt=function(e,t,n,a){n.stopKeydownPropagation&&t.stopPropagation(),"Enter"===t.key?lt(e,t,n):"Tab"===t.key?ut(t,n):-1!==st.indexOf(t.key)?ct():-1!==ot.indexOf(t.key)&&mt(t,n,a)},lt=function(e,t,n){if(!t.isComposing&&t.target&&e.getInput()&&t.target.outerHTML===e.getInput().outerHTML){if(-1!==["textarea","file"].indexOf(n.input))return;Me(),t.preventDefault()}},ut=function(e,t){for(var n=e.target,a=Q(),r=-1,i=0;i<a.length;i++)if(n===a[i]){r=i;break}e.shiftKey?Ve(0,r,-1):Ve(0,r,1),e.stopPropagation(),e.preventDefault()},ct=function(){var e=U(),t=J();document.activeElement===e&&E(t)?t.focus():document.activeElement===t&&E(e)&&e.focus()},mt=function(e,t,n){L(t.allowEscapeKey)&&(e.preventDefault(),n(k.esc))},ft=function(e,t,n){e.popup.onclick=function(){t.showConfirmButton||t.showCancelButton||t.showCloseButton||t.input||n(k.close)}},ht=!1,_t=function(e){e.popup.onmousedown=function(){e.container.onmouseup=function(t){e.container.onmouseup=void 0,t.target===e.container&&(ht=!0)}}},pt=function(e){e.container.onmousedown=function(){e.popup.onmouseup=function(t){e.popup.onmouseup=void 0,t.target!==e.popup&&!e.popup.contains(t.target)||(ht=!0)}}},yt=function(e,t,n){e.container.onclick=function(a){ht?ht=!1:a.target===e.container&&L(t.allowOutsideClick)&&n(k.backdrop)}},gt=function(){document.activeElement&&"function"==typeof document.activeElement.blur&&document.activeElement.blur()},vt=Object.freeze({hideLoading:Ee,disableLoading:Ee,getInput:function(e){var t=fe.innerParams.get(e||this),n=fe.domCache.get(e||this);return n?D(n.content,t.input):null},close:Ne,closePopup:Ne,closeModal:Ne,closeToast:Ne,enableButtons:function(){Ie(this,["confirmButton","cancelButton"],!1)},disableButtons:function(){Ie(this,["confirmButton","cancelButton"],!0)},enableConfirmButton:function(){f("Swal.enableConfirmButton()","Swal.getConfirmButton().removeAttribute('disabled')"),Ie(this,["confirmButton"],!1)},disableConfirmButton:function(){f("Swal.disableConfirmButton()","Swal.getConfirmButton().setAttribute('disabled', '')"),Ie(this,["confirmButton"],!0)},enableInput:function(){return ze(this.getInput(),!1)},disableInput:function(){return ze(this.getInput(),!0)},showValidationMessage:function(e){var t=fe.domCache.get(this);t.validationMessage.innerHTML=e;var n=window.getComputedStyle(t.popup);t.validationMessage.style.marginLeft="-".concat(n.getPropertyValue("padding-left")),t.validationMessage.style.marginRight="-".concat(n.getPropertyValue("padding-right")),j(t.validationMessage);var a=this.getInput();a&&(a.setAttribute("aria-invalid",!0),a.setAttribute("aria-describedBy",b["validation-message"]),T(a),re(a,b.inputerror))},resetValidationMessage:function(){var e=fe.domCache.get(this);e.validationMessage&&C(e.validationMessage);var t=this.getInput();t&&(t.removeAttribute("aria-invalid"),t.removeAttribute("aria-describedBy"),ie(t,b.inputerror))},getProgressSteps:function(){return f("Swal.getProgressSteps()","const swalInstance = Swal.fire({progressSteps: ['1', '2', '3']}); const progressSteps = swalInstance.params.progressSteps"),fe.innerParams.get(this).progressSteps},setProgressSteps:function(e){f("Swal.setProgressSteps()","Swal.update()");var t=r({},fe.innerParams.get(this),{progressSteps:e});ge(0,t),fe.innerParams.set(this,t)},showProgressSteps:function(){j(fe.domCache.get(this).progressSteps)},hideProgressSteps:function(){C(fe.domCache.get(this).progressSteps)},_main:function(e){!function(e){for(var t in e)we(r=t)||v('Unknown parameter "'.concat(r,'"')),e.toast&&(a=t,-1!==Ce.indexOf(a)&&v('The parameter "'.concat(a,'" is incompatible with toasts'))),Ye(n=void 0)&&f(n,Ye(n));var n,a,r}(e),N()&&Te.swalCloseEventFinishedCallback&&(Te.swalCloseEventFinishedCallback(),delete Te.swalCloseEventFinishedCallback),Te.deferDisposalTimer&&(clearTimeout(Te.deferDisposalTimer),delete Te.deferDisposalTimer);var t=r({},xe,e);Ue(t),Object.freeze(t),Te.timeout&&(Te.timeout.stop(),delete Te.timeout),clearTimeout(Te.restoreFocusTimeout);var n=function(e){var t={popup:N(),container:O(),content:I(),actions:G(),confirmButton:U(),cancelButton:J(),closeButton:X(),validationMessage:$(),progressSteps:q()};return fe.domCache.set(e,t),t}(this);return ve(this,t),fe.innerParams.set(this,t),function(e,t,n){return new Promise((function(a){var r=function(t){e.closePopup({dismiss:t})};Pe.swalPromiseResolve.set(e,a),function(e,t,n){t.timer&&(e.timeout=new qe((function(){n("timer"),delete e.timeout}),t.timer))}(Te,n,r),t.confirmButton.onclick=function(){return function(e,t){e.disableButtons(),t.input?rt(e,t):it(e,t,!0)}(e,n)},t.cancelButton.onclick=function(){return function(e,t){e.disableButtons(),t(k.cancel)}(e,r)},t.closeButton.onclick=function(){return r(k.close)},function(e,t,n){t.toast?ft(e,t,n):(_t(e),pt(e),yt(e,t,n))}(t,n,r),function(e,t,n,a){t.keydownTarget&&t.keydownHandlerAdded&&(t.keydownTarget.removeEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!1),n.toast||(t.keydownHandler=function(t){return dt(e,t,n,a)},t.keydownTarget=n.keydownListenerCapture?window:N(),t.keydownListenerCapture=n.keydownListenerCapture,t.keydownTarget.addEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!0)}(e,Te,n,r),n.toast&&(n.input||n.footer||n.showCloseButton)?re(document.body,b["toast-column"]):ie(document.body,b["toast-column"]),function(e,t){"select"===t.input||"radio"===t.input?et(e,t):-1!==["text","email","number","tel","textarea"].indexOf(t.input)&&h(t.inputValue)&&tt(e,t)}(e,n),function(e){var t=O(),n=N();"function"==typeof e.onBeforeOpen&&e.onBeforeOpen(n),Ze(t,n,e),Xe(t,n),Z()&&Qe(t,e.scrollbarPadding),oe()||Te.previousActiveElement||(Te.previousActiveElement=document.activeElement),"function"==typeof e.onOpen&&setTimeout((function(){return e.onOpen(n)}))}(n),function(e,t){t.toast||(L(t.allowEnterKey)?t.focusCancel&&E(e.cancelButton)?e.cancelButton.focus():t.focusConfirm&&E(e.confirmButton)?e.confirmButton.focus():Ve(0,-1,1):gt())}(t,n),t.container.scrollTop=0}))}(this,n,t)},update:function(e){var t=N();if(!t||p(t,b.hide))return v("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");var n={};Object.keys(e).forEach((function(t){Lt.isUpdatableParameter(t)?n[t]=e[t]:v('Invalid parameter to update: "'.concat(t,'". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js'))}));var a=r({},fe.innerParams.get(this),n);ve(this,a),fe.innerParams.set(this,a),Object.defineProperties(this,{params:{value:r({},this.params,e),writable:!1,enumerable:!0}})}});function Mt(){if("undefined"!=typeof window){"undefined"==typeof Promise&&m("This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)"),Ke=this;for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=Object.freeze(this.constructor.argsToParams(t));Object.defineProperties(this,{params:{value:a,writable:!1,enumerable:!0,configurable:!0}});var r=this._main(this.params);fe.promise.set(this,r)}}Mt.prototype.then=function(e){return fe.promise.get(this).then(e)},Mt.prototype.finally=function(e){return fe.promise.get(this).finally(e)},r(Mt.prototype,vt),r(Mt,He),Object.keys(vt).forEach((function(e){Mt[e]=function(){var t;if(Ke)return(t=Ke)[e].apply(t,arguments)}})),Mt.DismissReason=k,Mt.version="8.19.0";var Lt=Mt;return Lt.default=Lt}(),void 0!==this&&this.Sweetalert2&&(this.swal=this.sweetAlert=this.Swal=this.SweetAlert=this.Sweetalert2)},function(e,t,n){"use strict";n.r(t);var a=n(1);$(document).on("click","[data-accordion-click]",(function(){var e,t,n=$(this),r=n.attr("data-accordion-click"),i=n.closest(".js_accordion_item"),s=n.closest(".js_accordion_parent"),o='[data-accordion="'+r+'"]',d=s.find(o),l=$("body").attr("data-js-anim");if(s.hasClass("js_toggle"))var u=s.find("[data-accordion]"),c=s.find($("[data-accordion-click]")),m=s.find(".js_accordion_item");if(-1!=l.indexOf("anim")||-1!=window.location.href.indexOf("login"))var f=300;n.hasClass("is_active")?(n.removeClass("is_active"),i.removeClass("is_active"),-1!=l.indexOf("anim")||-1!=window.location.href.indexOf("login")?d.slideUp(f,(function(){$(this).removeClass("is_active").removeAttr("style")})):d.removeClass("is_active")):(s.hasClass("js_toggle")&&(c.removeClass("is_active"),m.removeClass("is_active"),-1!=l.indexOf("anim")||-1!=window.location.href.indexOf("login")?u.slideUp(f,(function(){$(this).removeClass("is_active").removeAttr("style")})):u.removeClass("is_active")),n.addClass("is_active"),i.addClass("is_active"),-1!=l.indexOf("anim")||-1!=window.location.href.indexOf("login")?d.slideDown(f,(function(){$(this).addClass("is_active").removeAttr("style"),Object(a.default)()})):(d.addClass("is_active"),Object(a.default)())),s.hasClass("js_hash")&&(e=$(".accordion:visible"),t="",$.each(e,(function(e,n){0!=$(n).find("[data-accordion-click].is_active").length?t+="!"+e+"-"+$(n).find("[data-accordion-click].is_active").attr("data-accordion-click"):t+="!"+e+"-"+$(n).find(".js_accordion_item").eq(0).find("[data-accordion-click]").attr("data-accordion-click")})),window.location.hash=t)})),setTimeout((function(){!function(){if(""!=window.location.hash){var e=window.location.hash.split("-")[1];$('.js_accordion_link[data-accordion-click="'+e+'"]').trigger("click")}}()}),1e3)},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},function(e,t,n){var a,r,i;r=[n(2)],void 0===(i="function"==typeof(a=function(e){var t,n,a=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],r="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],i=Array.prototype.slice;if(e.event.fixHooks)for(var s=a.length;s;)e.event.fixHooks[a[--s]]=e.event.mouseHooks;var o=e.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var t=r.length;t;)this.addEventListener(r[--t],d,!1);else this.onmousewheel=d;e.data(this,"mousewheel-line-height",o.getLineHeight(this)),e.data(this,"mousewheel-page-height",o.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var t=r.length;t;)this.removeEventListener(r[--t],d,!1);else this.onmousewheel=null;e.removeData(this,"mousewheel-line-height"),e.removeData(this,"mousewheel-page-height")},getLineHeight:function(t){var n=e(t),a=n["offsetParent"in e.fn?"offsetParent":"parent"]();return a.length||(a=e("body")),parseInt(a.css("fontSize"),10)||parseInt(n.css("fontSize"),10)||16},getPageHeight:function(t){return e(t).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};function d(a){var r=a||window.event,s=i.call(arguments,1),d=0,c=0,m=0,f=0,h=0,_=0;if((a=e.event.fix(r)).type="mousewheel","detail"in r&&(m=-1*r.detail),"wheelDelta"in r&&(m=r.wheelDelta),"wheelDeltaY"in r&&(m=r.wheelDeltaY),"wheelDeltaX"in r&&(c=-1*r.wheelDeltaX),"axis"in r&&r.axis===r.HORIZONTAL_AXIS&&(c=-1*m,m=0),d=0===m?c:m,"deltaY"in r&&(d=m=-1*r.deltaY),"deltaX"in r&&(c=r.deltaX,0===m&&(d=-1*c)),0!==m||0!==c){if(1===r.deltaMode){var p=e.data(this,"mousewheel-line-height");d*=p,m*=p,c*=p}else if(2===r.deltaMode){var y=e.data(this,"mousewheel-page-height");d*=y,m*=y,c*=y}if(f=Math.max(Math.abs(m),Math.abs(c)),(!n||f<n)&&(n=f,u(r,f)&&(n/=40)),u(r,f)&&(d/=40,c/=40,m/=40),d=Math[d>=1?"floor":"ceil"](d/n),c=Math[c>=1?"floor":"ceil"](c/n),m=Math[m>=1?"floor":"ceil"](m/n),o.settings.normalizeOffset&&this.getBoundingClientRect){var g=this.getBoundingClientRect();h=a.clientX-g.left,_=a.clientY-g.top}return a.deltaX=c,a.deltaY=m,a.deltaFactor=n,a.offsetX=h,a.offsetY=_,a.deltaMode=0,s.unshift(a,d,c,m),t&&clearTimeout(t),t=setTimeout(l,200),(e.event.dispatch||e.event.handle).apply(this,s)}}function l(){n=null}function u(e,t){return o.settings.adjustOldDeltas&&"mousewheel"===e.type&&t%120==0}e.fn.extend({mousewheel:function(e){return e?this.bind("mousewheel",e):this.trigger("mousewheel")},unmousewheel:function(e){return this.unbind("mousewheel",e)}})})?a.apply(t,r):a)||(e.exports=i)},function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},a=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,s){var o=a(t),d=r[e][a(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(a,r,i,s){var o=t(a),d=n[e][t(a)];return 2===o&&(d=d[r?0:1]),d.replace(/%d/i,a)}},r=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:r,monthsShort:r,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(t,r,i,s){var o=n(t),d=a[e][n(t)];return 2===o&&(d=d[r?0:1]),d.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a,r;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(a=+e,r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}var n=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,r=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:r,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:r,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=e+" ";switch(n){case"ss":return a+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return a+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return a+=1===e?"dan":"dana";case"MM":return a+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return a+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),a=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],r=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"pár sekund":"pár sekundami";case"ss":return t||a?r+(i(e)?"sekundy":"sekund"):r+"sekundami";case"m":return t?"minuta":a?"minutu":"minutou";case"mm":return t||a?r+(i(e)?"minuty":"minut"):r+"minutami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?r+(i(e)?"hodiny":"hodin"):r+"hodinami";case"d":return t||a?"den":"dnem";case"dd":return t||a?r+(i(e)?"dny":"dní"):r+"dny";case"M":return t||a?"měsíc":"měsícem";case"MM":return t||a?r+(i(e)?"měsíce":"měsíců"):r+"měsíci";case"y":return t||a?"rok":"rokem";case"yy":return t||a?r+(i(e)?"roky":"let"):r+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,a=this._calendarEl[e],r=t&&t.hours();return n=a,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(a=a.apply(t)),a.replace("{}",r%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?r[n][2]?r[n][2]:r[n][1]:a?r[n][0]:r[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function a(e,a,r,i){var s="";switch(r){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":s=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return s=function(e,a){return e<10?a?n[e]:t[e]:e}(e,i)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return a?r[n][0]:r[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return a?r[n][0]:r[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},a=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:a,longMonthsParse:a,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=e+" ";switch(n){case"ss":return a+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return a+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return a+=1===e?"dan":"dana";case"MM":return a+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return a+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,a){var r=e;switch(n){case"s":return a||t?"néhány másodperc":"néhány másodperce";case"ss":return r+(a||t)?" másodperc":" másodperce";case"m":return"egy"+(a||t?" perc":" perce");case"mm":return r+(a||t?" perc":" perce");case"h":return"egy"+(a||t?" óra":" órája");case"hh":return r+(a||t?" óra":" órája");case"d":return"egy"+(a||t?" nap":" napja");case"dd":return r+(a||t?" nap":" napja");case"M":return"egy"+(a||t?" hónap":" hónapja");case"MM":return r+(a||t?" hónap":" hónapja");case"y":return"egy"+(a||t?" év":" éve");case"yy":return r+(a||t?" év":" éve")}return""}function a(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return a.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return a.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,a,r){var i=e+" ";switch(a){case"s":return n||r?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||r?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||r?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||r?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":r?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(r?"daga":"dögum"):n?i+"dagur":i+(r?"dag":"degi");case"M":return n?"mánuður":r?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(r?"mánuði":"mánuðum"):n?i+"mánuður":i+(r?"mánuð":"mánuði");case"y":return n||r?"ár":"ári";case"yy":return t(e)?i+(n||r?"ár":"árum"):i+(n||r?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},a=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:a,monthsShort:a,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?r[n][0]:r[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,a){return t?r(n)[0]:a?r(n)[1]:r(n)[2]}function a(e){return e%10==0||e>10&&e<20}function r(e){return t[e].split("_")}function i(e,t,i,s){var o=e+" ";return 1===e?o+n(0,t,i[0],s):t?o+(a(e)?r(i)[1]:r(i)[0]):s?o+r(i)[1]:o+(a(e)?r(i)[1]:r(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,a){return t?"kelios sekundės":a?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function a(e,a,r){return e+" "+n(t[r],e,a)}function r(e,a,r){return n(t[r],e,a)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:a,m:r,mm:a,h:r,hh:a,d:r,dd:a,M:r,MM:a,y:r,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function a(e,t,n,a){var r="";if(t)switch(n){case"s":r="काही सेकंद";break;case"ss":r="%d सेकंद";break;case"m":r="एक मिनिट";break;case"mm":r="%d मिनिटे";break;case"h":r="एक तास";break;case"hh":r="%d तास";break;case"d":r="एक दिवस";break;case"dd":r="%d दिवस";break;case"M":r="एक महिना";break;case"MM":r="%d महिने";break;case"y":r="एक वर्ष";break;case"yy":r="%d वर्षे"}else switch(n){case"s":r="काही सेकंदां";break;case"ss":r="%d सेकंदां";break;case"m":r="एका मिनिटा";break;case"mm":r="%d मिनिटां";break;case"h":r="एका तासा";break;case"hh":r="%d तासां";break;case"d":r="एका दिवसा";break;case"dd":r="%d दिवसां";break;case"M":r="एका महिन्या";break;case"MM":r="%d महिन्यां";break;case"y":r="एका वर्षा";break;case"yy":r="%d वर्षां"}return r.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),a=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],r=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),a=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],r=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),a=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var a=e+" ";switch(n){case"ss":return a+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return a+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(r(e)?"godziny":"godzin");case"ww":return a+(r(e)?"tygodnie":"tygodni");case"MM":return a+(r(e)?"miesiące":"miesięcy");case"yy":return a+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,a){return e?/D MMMM/.test(a)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=" ";return(e%100>=20||e>=100&&e%100==0)&&(a=" de "),e+a+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a,r;return"m"===n?t?"минута":"минуту":e+" "+(a=+e,r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function a(e){return e>1&&e<5}function r(e,t,n,r){var i=e+" ";switch(n){case"s":return t||r?"pár sekúnd":"pár sekundami";case"ss":return t||r?i+(a(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":r?"minútu":"minútou";case"mm":return t||r?i+(a(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?i+(a(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||r?"deň":"dňom";case"dd":return t||r?i+(a(e)?"dni":"dní"):i+"dňami";case"M":return t||r?"mesiac":"mesiacom";case"MM":return t||r?i+(a(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||r?"rok":"rokom";case"yy":return t||r?i+(a(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"nekaj sekund":"nekaj sekundami";case"ss":return r+=1===e?t?"sekundo":"sekundi":2===e?t||a?"sekundi":"sekundah":e<5?t||a?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return r+=1===e?t?"minuta":"minuto":2===e?t||a?"minuti":"minutama":e<5?t||a?"minute":"minutami":t||a?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return r+=1===e?t?"ura":"uro":2===e?t||a?"uri":"urama":e<5?t||a?"ure":"urami":t||a?"ur":"urami";case"d":return t||a?"en dan":"enim dnem";case"dd":return r+=1===e?t||a?"dan":"dnem":2===e?t||a?"dni":"dnevoma":t||a?"dni":"dnevi";case"M":return t||a?"en mesec":"enim mesecem";case"MM":return r+=1===e?t||a?"mesec":"mesecem":2===e?t||a?"meseca":"mesecema":e<5?t||a?"mesece":"meseci":t||a?"mesecev":"meseci";case"y":return t||a?"eno leto":"enim letom";case"yy":return r+=1===e?t||a?"leto":"letom":2===e?t||a?"leti":"letoma":e<5?t||a?"leta":"leti":t||a?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,a,r){var i=function(e){var n=Math.floor(e%1e3/100),a=Math.floor(e%100/10),r=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),a>0&&(i+=(""!==i?" ":"")+t[a]+"maH"),r>0&&(i+=(""!==i?" ":"")+t[r]),""===i?"pagh":i}(e);switch(a){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return a||t?r[n][0]:r[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"يېرىم كېچە":a<900?"سەھەر":a<1130?"چۈشتىن بۇرۇن":a<1230?"چۈش":a<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a,r;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(a=+e,r={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1200?"上午":1200===a?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},,,,,,,function(e,t,n){e.exports=n(150)},function(e,t,n){n(3),window.$=window.jQuery=n(2);window.Swal=n(4),n(151);n(7),n(153),n(0),n(157),n(1),n(5),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169)},function(e,t,n){var a,r,i;r=[n(152),n(6)],void 0===(i="function"==typeof(a=function(e,t,n){var a=t.document,r=navigator.userAgent,i=r.indexOf("MSIE ")>0||r.indexOf("Trident/")>0,s=m("touchstart"),o=/iemobile/i.test(r),d=/iphone/i.test(r)&&!o;function l(t,a,r){if(!(this instanceof l))return new l(t,a,r);this.el=n,this.events={},this.maskset=n,this.refreshValue=!1,!0!==r&&(e.isPlainObject(t)?a=t:(a=a||{},t&&(a.alias=t)),this.opts=e.extend(!0,{},this.defaults,a),this.noMasksCache=a&&a.definitions!==n,this.userOptions=a||{},this.isRTL=this.opts.numericInput,u(this.opts.alias,a,this.opts))}function u(t,a,r){var i=l.prototype.aliases[t];return i?(i.alias&&u(i.alias,n,r),e.extend(!0,r,i),e.extend(!0,r,a),!0):(null===r.mask&&(r.mask=t),!1)}function c(t,a){function r(t,r,i){var s=!1;if(null!==t&&""!==t||((s=null!==i.regex)?t=(t=i.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(s=!0,t=".*")),1===t.length&&!1===i.greedy&&0!==i.repeat&&(i.placeholder=""),i.repeat>0||"*"===i.repeat||"+"===i.repeat){var o="*"===i.repeat?0:"+"===i.repeat?1:i.repeat;t=i.groupmarker[0]+t+i.groupmarker[1]+i.quantifiermarker[0]+o+","+i.repeat+i.quantifiermarker[1]}var d,u=s?"regex_"+i.regex:i.numericInput?t.split("").reverse().join(""):t;return l.prototype.masksCache[u]===n||!0===a?(d={mask:t,maskToken:l.prototype.analyseMask(t,s,i),validPositions:{},_buffer:n,buffer:n,tests:{},excludes:{},metadata:r,maskLength:n,jitOffset:{}},!0!==a&&(l.prototype.masksCache[u]=d,d=e.extend(!0,{},l.prototype.masksCache[u]))):d=e.extend(!0,{},l.prototype.masksCache[u]),d}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){if(null===t.keepStatic){t.keepStatic="auto";for(var i=0;i<t.mask.length;i++)if(t.mask[i].charAt(0)!==t.mask[0].charAt(0)){t.keepStatic=!0;break}}var s=t.groupmarker[0];return e.each(t.isRTL?t.mask.reverse():t.mask,(function(a,r){s.length>1&&(s+=t.groupmarker[1]+t.alternatormarker+t.groupmarker[0]),r.mask===n||e.isFunction(r.mask)?s+=r:s+=r.mask})),r(s+=t.groupmarker[1],t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==n&&!e.isFunction(t.mask.mask)?r(t.mask.mask,t.mask,t):r(t.mask,t.mask,t)}function m(e){var t=a.createElement("input"),n="on"+e,r=n in t;return r||(t.setAttribute(n,"return;"),r="function"==typeof t[n]),t=null,r}function f(r,u,c){u=u||this.maskset,c=c||this.opts;var h,_,p,y,g,v=this,M=this.el,L=this.isRTL,k=!1,b=!1,w=!1,Y=!1,D=function(e,t,a,r,i){var s=c.greedy;i&&(c.greedy=!1),t=t||0;var o,d,l,u=[],m=0;S();do{if(!0===e&&T().validPositions[m])d=(l=i&&!0===T().validPositions[m].match.optionality&&T().validPositions[m+1]===n&&(!0===T().validPositions[m].generatedInput||T().validPositions[m].input==c.skipOptionalPartCharacter&&m>0)?H(m,P(m,o,m-1)):T().validPositions[m]).match,o=l.locator.slice(),u.push(!0===a?l.input:!1===a?d.nativeDef:K(m,d));else{d=(l=E(m,o,m-1)).match,o=l.locator.slice();var f=!0!==r&&(!1!==c.jitMasking?c.jitMasking:d.jit);(!1===f||f===n||"number"==typeof f&&isFinite(f)&&f>m)&&u.push(!1===a?d.nativeDef:K(m,d))}"auto"===c.keepStatic&&d.newBlockMarker&&null!==d.fn&&(c.keepStatic=m-1),m++}while((p===n||m<p)&&(null!==d.fn||""!==d.def)||t>m);return""===u[u.length-1]&&u.pop(),!1===a&&T().maskLength!==n||(T().maskLength=m-1),c.greedy=s,u};function T(){return u}function x(e){var t=T();t.buffer=n,!0!==e&&(t.validPositions={},t.p=0)}function S(e,t,a){var r=-1,i=-1,s=a||T().validPositions;for(var o in e===n&&(e=-1),s){var d=parseInt(o);s[d]&&(t||!0!==s[d].generatedInput)&&(d<=e&&(r=d),d>=e&&(i=d))}return-1===r||r==e?i:-1==i||e-r<i-e?r:i}function j(e){var t=e.locator[e.alternation];return"string"==typeof t&&t.length>0&&(t=t.split(",")[0]),t!==n?t.toString():""}function C(e,t){var a=(e.alternation!=n?e.mloc[j(e)]:e.locator).join("");if(""!==a)for(;a.length<t;)a+="0";return a}function H(e,t){for(var a,r,i,s=C(A(e=e>0?e-1:0)),o=0;o<t.length;o++){var d=t[o];a=C(d,s.length);var l=Math.abs(a-s);(r===n||""!==a&&l<r||i&&!c.greedy&&i.match.optionality&&"master"===i.match.newBlockMarker&&(!d.match.optionality||!d.match.newBlockMarker)||i&&i.match.optionalQuantifier&&!d.match.optionalQuantifier)&&(r=l,i=d)}return i}function E(e,t,n){return T().validPositions[e]||H(e,P(e,t?t.slice():t,n))}function A(e,t){return T().validPositions[e]?T().validPositions[e]:(t||P(e))[0]}function O(e,t){for(var n=!1,a=P(e),r=0;r<a.length;r++)if(a[r].match&&a[r].match.def===t){n=!0;break}return n}function P(t,a,r){var i,s=T().maskToken,o=a?r:0,d=a?a.slice():[0],l=[],u=!1,m=a?a.join(""):"";function f(a,r,s,d){function h(s,d,_){function p(t,n){var a=0===e.inArray(t,n.matches);return a||e.each(n.matches,(function(e,r){if(!0===r.isQuantifier?a=p(t,n.matches[e-1]):r.hasOwnProperty("matches")&&(a=p(t,r)),a)return!1})),a}function y(t,a,r){var i,s;if((T().tests[t]||T().validPositions[t])&&e.each(T().tests[t]||[T().validPositions[t]],(function(e,t){if(t.mloc[a])return i=t,!1;var o=r!==n?r:t.alternation,d=t.locator[o]!==n?t.locator[o].toString().indexOf(a):-1;(s===n||d<s)&&-1!==d&&(i=t,s=d)})),i){var o=i.locator[i.alternation];return(i.mloc[a]||i.mloc[o]||i.locator).slice((r!==n?r:i.alternation)+1)}return r!==n?y(t,a):n}function g(e,t){function n(e){for(var t,n,a=[],r=0,i=e.length;r<i;r++)if("-"===e.charAt(r))for(n=e.charCodeAt(r+1);++t<n;)a.push(String.fromCharCode(t));else t=e.charCodeAt(r),a.push(e.charAt(r));return a.join("")}return c.regex&&null!==e.match.fn&&null!==t.match.fn?-1!==n(t.match.def.replace(/[\[\]]/g,"")).indexOf(n(e.match.def.replace(/[\[\]]/g,""))):e.match.def===t.match.nativeDef}function v(e,t){if(t===n||e.alternation===t.alternation&&-1===e.locator[e.alternation].toString().indexOf(t.locator[t.alternation])){e.mloc=e.mloc||{};var a=e.locator[e.alternation];if(a!==n){if("string"==typeof a&&(a=a.split(",")[0]),e.mloc[a]===n&&(e.mloc[a]=e.locator.slice()),t!==n){for(var r in t.mloc)"string"==typeof r&&(r=r.split(",")[0]),e.mloc[r]===n&&(e.mloc[r]=t.mloc[r]);e.locator[e.alternation]=Object.keys(e.mloc).join(",")}return!0}e.alternation=n}return!1}if(o>500&&_!==n)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+T().mask;if(o===t&&s.matches===n)return l.push({match:s,locator:d.reverse(),cd:m,mloc:{}}),!0;if(s.matches!==n){if(s.isGroup&&_!==s){if(s=h(a.matches[e.inArray(s,a.matches)+1],d,_))return!0}else if(s.isOptional){var M=s;if(s=f(s,r,d,_)){if(e.each(l,(function(e,t){t.match.optionality=!0})),i=l[l.length-1].match,_!==n||!p(i,M))return!0;u=!0,o=t}}else if(s.isAlternator){var L,k=s,b=[],w=l.slice(),Y=d.length,D=r.length>0?r.shift():-1;if(-1===D||"string"==typeof D){var x,S=o,j=r.slice(),C=[];if("string"==typeof D)C=D.split(",");else for(x=0;x<k.matches.length;x++)C.push(x.toString());if(T().excludes[t]){for(var H=C.slice(),E=0,A=T().excludes[t].length;E<A;E++)C.splice(C.indexOf(T().excludes[t][E].toString()),1);0===C.length&&(T().excludes[t]=n,C=H)}(!0===c.keepStatic||isFinite(parseInt(c.keepStatic))&&S>=c.keepStatic)&&(C=C.slice(0,1));for(var O=!1,P=0;P<C.length;P++){x=parseInt(C[P]),l=[],r="string"==typeof D&&y(o,x,Y)||j.slice(),k.matches[x]&&h(k.matches[x],[x].concat(d),_)?s=!0:0===P&&(O=!0),L=l.slice(),o=S,l=[];for(var W=0;W<L.length;W++){var N=L[W],F=!1;N.match.jit=N.match.jit||O,N.alternation=N.alternation||Y,v(N);for(var B=0;B<b.length;B++){var R=b[B];if("string"!=typeof D||N.alternation!==n&&-1!==e.inArray(N.locator[N.alternation].toString(),C)){if(N.match.nativeDef===R.match.nativeDef){F=!0,v(R,N);break}if(g(N,R)){v(N,R)&&(F=!0,b.splice(b.indexOf(R),0,N));break}if(g(R,N)){v(R,N);break}if(U=R,($=N).locator.slice($.alternation).join("")==U.locator.slice(U.alternation).join("")&&null===$.match.fn&&null!==U.match.fn&&U.match.fn.test($.match.def,T(),t,!1,c,!1)){v(N,R)&&(F=!0,b.splice(b.indexOf(R),0,N));break}}}F||b.push(N)}}l=w.concat(b),o=t,u=l.length>0,s=b.length>0,r=j.slice()}else s=h(k.matches[D]||a.matches[D],[D].concat(d),_);if(s)return!0}else if(s.isQuantifier&&_!==a.matches[e.inArray(s,a.matches)-1])for(var I=s,z=r.length>0?r.shift():0;z<(isNaN(I.quantifier.max)?z+1:I.quantifier.max)&&o<=t;z++){var q=a.matches[e.inArray(I,a.matches)-1];if(s=h(q,[z].concat(d),q)){if((i=l[l.length-1].match).optionalQuantifier=z>=I.quantifier.min,i.jit=(z||1)*q.matches.indexOf(i)>=I.quantifier.jit,i.optionalQuantifier&&p(i,q)){u=!0,o=t;break}return i.jit&&(T().jitOffset[t]=q.matches.indexOf(i)),!0}}else if(s=f(s,r,d,_))return!0}else o++;var $,U}for(var _=r.length>0?r.shift():0;_<a.matches.length;_++)if(!0!==a.matches[_].isQuantifier){var p=h(a.matches[_],[_].concat(s),d);if(p&&o===t)return p;if(o>t)break}}if(t>-1){if(a===n){for(var h,_=t-1;(h=T().validPositions[_]||T().tests[_])===n&&_>-1;)_--;h!==n&&_>-1&&(d=function(t,a){var r=[];return e.isArray(a)||(a=[a]),a.length>0&&(a[0].alternation===n?0===(r=H(t,a.slice()).locator.slice()).length&&(r=a[0].locator.slice()):e.each(a,(function(e,t){if(""!==t.def)if(0===r.length)r=t.locator.slice();else for(var n=0;n<r.length;n++)t.locator[n]&&-1===r[n].toString().indexOf(t.locator[n])&&(r[n]+=","+t.locator[n])}))),r}(_,h),m=d.join(""),o=_)}if(T().tests[t]&&T().tests[t][0].cd===m)return T().tests[t];for(var p=d.shift();p<s.length&&!(f(s[p],d,[p])&&o===t||o>t);p++);}return(0===l.length||u)&&l.push({match:{fn:null,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:m}),a!==n&&T().tests[t]?e.extend(!0,[],l):(T().tests[t]=e.extend(!0,[],l),T().tests[t])}function W(){return T()._buffer===n&&(T()._buffer=D(!1,1),T().buffer===n&&(T().buffer=T()._buffer.slice())),T()._buffer}function N(e){return T().buffer!==n&&!0!==e||(T().buffer=D(!0,S(),!0),T()._buffer===n&&(T()._buffer=T().buffer.slice())),T().buffer}function F(e,t,a){var r,i;if(!0===e)x(),e=0,t=a.length;else for(r=e;r<t;r++)delete T().validPositions[r];for(i=e,r=e;r<t;r++)if(x(!0),a[r]!==c.skipOptionalPartCharacter){var s=z(i,a[r],!0,!0);!1!==s&&(x(!0),i=s.caret!==n?s.caret:s.pos+1)}}function B(t,n,a){switch(c.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var r=T().validPositions[a-1];t=0===a||r&&r.input===String.fromCharCode(l.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(c.casing)){var i=Array.prototype.slice.call(arguments);i.push(T().validPositions),t=c.casing.apply(this,i)}}return t}function R(t,a,r){for(var i,s=c.greedy?a:a.slice(0,1),o=!1,d=r!==n?r.split(","):[],l=0;l<d.length;l++)-1!==(i=t.indexOf(d[l]))&&t.splice(i,1);for(var u=0;u<t.length;u++)if(-1!==e.inArray(t[u],s)){o=!0;break}return o}function I(t,a,r,i,s){var o,d,l,u,c,m,f,h=e.extend(!0,{},T().validPositions),_=!1,p=s!==n?s:S();if(-1===p&&s===n)d=(u=A(o=0)).alternation;else for(;p>=0;p--)if((l=T().validPositions[p])&&l.alternation!==n){if(u&&u.locator[l.alternation]!==l.locator[l.alternation])break;o=p,d=T().validPositions[o].alternation,u=l}if(d!==n){f=parseInt(o),T().excludes[f]=T().excludes[f]||[],!0!==t&&T().excludes[f].push(j(u));var y=[],g=0;for(c=f;c<S(n,!0)+1;c++)(m=T().validPositions[c])&&!0!==m.generatedInput?y.push(m.input):c<t&&g++,delete T().validPositions[c];for(;T().excludes[f]&&T().excludes[f].length<10;){var v=-1*g,M=y.slice();for(T().tests[f]=n,x(!0),_=!0;M.length>0;){var L=M.shift();if(!(_=z(S(n,!0)+1,L,!1,i,!0)))break}if(_&&a!==n){var k=S(t)+1;for(c=f;c<S()+1;c++)((m=T().validPositions[c])===n||null==m.match.fn)&&c<t+v&&v++;_=z((t+=v)>k?k:t,a,r,i,!0)}if(_)break;if(x(),u=A(f),T().validPositions=e.extend(!0,{},h),!T().excludes[f]){_=I(t,a,r,i,f-1);break}var b=j(u);if(-1!==T().excludes[f].indexOf(b)){_=I(t,a,r,i,f-1);break}for(T().excludes[f].push(b),c=f;c<S(n,!0)+1;c++)delete T().validPositions[c]}}return T().excludes[f]=n,_}function z(t,a,r,i,s,o){function d(e){return L?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1}r=!0===r;var l=t;function u(a,r,s){var o=!1;return e.each(P(a),(function(l,u){var m=u.match;if(N(!0),!1!==(o=null!=m.fn?m.fn.test(r,T(),a,s,c,d(t)):(r===m.def||r===c.skipOptionalPartCharacter)&&""!==m.def&&{c:K(a,m,!0)||m.def,pos:a})){var f=o.c!==n?o.c:r,h=a;return f=f===c.skipOptionalPartCharacter&&null===m.fn?K(a,m,!0)||m.def:f,o.remove!==n&&(e.isArray(o.remove)||(o.remove=[o.remove]),e.each(o.remove.sort((function(e,t){return t-e})),(function(e,t){$({begin:t,end:t+1})}))),o.insert!==n&&(e.isArray(o.insert)||(o.insert=[o.insert]),e.each(o.insert.sort((function(e,t){return e-t})),(function(e,t){z(t.pos,t.c,!0,i)}))),!0!==o&&o.pos!==n&&o.pos!==a&&(h=o.pos),!0!==o&&o.pos===n&&o.c===n||$(t,e.extend({},u,{input:B(f,m,h)}),i,h)||(o=!1),!1}})),o}t.begin!==n&&(l=L?t.end:t.begin);var m=!0,f=e.extend(!0,{},T().validPositions);if(e.isFunction(c.preValidation)&&!r&&!0!==i&&!0!==o&&(m=c.preValidation(N(),l,a,d(t),c,T())),!0===m){if(q(n,l,!0),(p===n||l<p)&&(m=u(l,a,r),(!r||!0===i)&&!1===m&&!0!==o)){var h=T().validPositions[l];if(!h||null!==h.match.fn||h.match.def!==a&&a!==c.skipOptionalPartCharacter){if((c.insertMode||T().validPositions[J(l)]===n)&&(!U(l,!0)||T().jitOffset[l]))if(T().jitOffset[l]&&T().validPositions[J(l)]===n)!1!==(m=z(l+T().jitOffset[l],a,r))&&(m.caret=l);else for(var _=l+1,y=J(l);_<=y;_++)if(!1!==(m=u(_,a,r))){m=q(l,m.pos!==n?m.pos:_)||m,l=_;break}}else m={caret:J(l)}}!1!==m||!1===c.keepStatic||null!=c.regex&&!se(N())||r||!0===s||(m=I(l,a,r,i)),!0===m&&(m={pos:l})}if(e.isFunction(c.postValidation)&&!1!==m&&!r&&!0!==i&&!0!==o){var g=c.postValidation(N(!0),t.begin!==n?L?t.end:t.begin:t,m,c);if(g!==n){if(g.refreshFromBuffer&&g.buffer){var v=g.refreshFromBuffer;F(!0===v?v:v.start,v.end,g.buffer)}m=!0===g?m:g}}return m&&m.pos===n&&(m.pos=l),!1!==m&&!0!==o||(x(!0),T().validPositions=e.extend(!0,{},f)),m}function q(t,a,r){var i;if(t===n)for(t=a-1;t>0&&!T().validPositions[t];t--);for(var s=t;s<a;s++)if(T().validPositions[s]===n&&!U(s,!0)&&(0==s?A(s):T().validPositions[s-1])){var o=P(s).slice();""===o[o.length-1].match.def&&o.pop();var d=H(s,o);if((d=e.extend({},d,{input:K(s,d.match,!0)||d.match.def})).generatedInput=!0,$(s,d,!0),!0!==r){var l=T().validPositions[a].input;T().validPositions[a]=n,i=z(a,l,!0,!0)}}return i}function $(t,a,r,i){function s(e,t,a){var r=t[e];if(r!==n&&(null===r.match.fn&&!0!==r.match.optionality||r.input===c.radixPoint)){var i=a.begin<=e-1?t[e-1]&&null===t[e-1].match.fn&&t[e-1]:t[e-1],s=a.end>e+1?t[e+1]&&null===t[e+1].match.fn&&t[e+1]:t[e+1];return i&&s}return!1}var o=t.begin!==n?t.begin:t,d=t.end!==n?t.end:t;if(t.begin>t.end&&(o=t.end,d=t.begin),i=i!==n?i:o,o!==d||c.insertMode&&T().validPositions[i]!==n&&r===n){var l=e.extend(!0,{},T().validPositions),u=S(n,!0);for(T().p=o,p=u;p>=o;p--)T().validPositions[p]&&"+"===T().validPositions[p].match.nativeDef&&(c.isNegative=!1),delete T().validPositions[p];var m=!0,f=i,h=(T().validPositions,!1),_=f,p=f;for(a&&(T().validPositions[i]=e.extend(!0,{},a),_++,f++,o<d&&p++);p<=u;p++){var y=l[p];if(y!==n&&(p>=d||p>=o&&!0!==y.generatedInput&&s(p,l,{begin:o,end:d}))){for(;""!==A(_).match.def;){if(!1===h&&l[_]&&l[_].match.nativeDef===y.match.nativeDef)T().validPositions[_]=e.extend(!0,{},l[_]),T().validPositions[_].input=y.input,q(n,_,!0),f=_+1,m=!0;else if(c.shiftPositions&&O(_,y.match.def)){var g=z(_,y.input,!0,!0);m=!1!==g,f=g.caret||g.insert?S():_+1,h=!0}else m=!0===y.generatedInput||y.input===c.radixPoint&&!0===c.numericInput;if(m)break;if(!m&&_>d&&U(_,!0)&&(null!==y.match.fn||_>T().maskLength))break;_++}""==A(_).match.def&&(m=!1),_=f}if(!m)break}if(!m)return T().validPositions=e.extend(!0,{},l),x(!0),!1}else a&&(T().validPositions[i]=e.extend(!0,{},a));return x(!0),!0}function U(e,t){var n=E(e).match;if(""===n.def&&(n=A(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var a=P(e);return a.length>1+(""===a[a.length-1].match.def?1:0)}return!1}function J(e,t){for(var n=e+1;""!==A(n).match.def&&(!0===t&&(!0!==A(n).match.newBlockMarker||!U(n))||!0!==t&&!U(n));)n++;return n}function G(e,t){var n,a=e;if(a<=0)return 0;for(;--a>0&&(!0===t&&!0!==A(a).match.newBlockMarker||!0!==t&&!U(a)&&((n=P(a)).length<2||2===n.length&&""===n[1].match.def)););return a}function V(t,a,r,i,s){if(i&&e.isFunction(c.onBeforeWrite)){var o=c.onBeforeWrite.call(v,i,a,r,c);if(o){if(o.refreshFromBuffer){var d=o.refreshFromBuffer;F(!0===d?d:d.start,d.end,o.buffer||a),a=N(!0)}r!==n&&(r=o.caret!==n?o.caret:r)}}if(t!==n&&(t.inputmask._valueSet(a.join("")),r===n||i!==n&&"blur"===i.type?le(t,r,0===a.length):ae(t,r),!0===s)){var l=e(t),u=t.inputmask._valueGet();b=!0,l.trigger("input"),setTimeout((function(){u===W().join("")?l.trigger("cleared"):!0===se(a)&&l.trigger("complete")}),0)}}function K(t,a,r){if((a=a||A(t).match).placeholder!==n||!0===r)return e.isFunction(a.placeholder)?a.placeholder(c):a.placeholder;if(null===a.fn){if(t>-1&&T().validPositions[t]===n){var i,s=P(t),o=[];if(s.length>1+(""===s[s.length-1].match.def?1:0))for(var d=0;d<s.length;d++)if(!0!==s[d].match.optionality&&!0!==s[d].match.optionalQuantifier&&(null===s[d].match.fn||i===n||!1!==s[d].match.fn.test(i.match.def,T(),t,!0,c))&&(o.push(s[d]),null===s[d].match.fn&&(i=s[d]),o.length>1&&/[0-9a-bA-Z]/.test(o[0].match.def)))return c.placeholder.charAt(t%c.placeholder.length)}return a.def}return c.placeholder.charAt(t%c.placeholder.length)}function X(e,t){if(i){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var n=N().slice(),a=e.inputmask._valueGet();if(a!==t){var r=S();-1===r&&a===W().join("")?n=[]:-1!==r&&ie(n),V(e,n)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}var Q,Z={on:function(t,a,r){var i=function(t){var a=this;if(a.inputmask===n&&"FORM"!==this.nodeName){var i=e.data(a,"_inputmask_opts");i?new l(i).mask(a):Z.off(a)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(a.disabled||a.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===c.tabThrough&&t.keyCode===l.keyCode.TAB))){switch(t.type){case"input":if(!0===b)return b=!1,t.preventDefault();if(s){var u=arguments;return setTimeout((function(){r.apply(a,u),ae(a,a.inputmask.caretPos,n,!0)}),0),!1}break;case"keydown":k=!1,b=!1;break;case"keypress":if(!0===k)return t.preventDefault();k=!0;break;case"click":if(o||d)return u=arguments,setTimeout((function(){r.apply(a,u)}),0),!1}var m=r.apply(a,arguments);return!1===m&&(t.preventDefault(),t.stopPropagation()),m}t.preventDefault()}};t.inputmask.events[a]=t.inputmask.events[a]||[],t.inputmask.events[a].push(i),-1!==e.inArray(a,["submit","reset"])?null!==t.form&&e(t.form).on(a,i):e(t).on(a,i)},off:function(t,n){var a;t.inputmask&&t.inputmask.events&&(n?(a=[])[n]=t.inputmask.events[n]:a=t.inputmask.events,e.each(a,(function(n,a){for(;a.length>0;){var r=a.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,r):e(t).off(n,r)}delete t.inputmask.events[n]})))}},ee={keydownEvent:function(t){var n=e(this),a=t.keyCode,r=ae(this);if(a===l.keyCode.BACKSPACE||a===l.keyCode.DELETE||d&&a===l.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&a===l.keyCode.X&&!m("cut"))t.preventDefault(),oe(0,a,r),V(this,N(!0),T().p,t,this.inputmask._valueGet()!==N().join(""));else if(a===l.keyCode.END||a===l.keyCode.PAGE_DOWN){t.preventDefault();var i=J(S());ae(this,t.shiftKey?r.begin:i,i,!0)}else a===l.keyCode.HOME&&!t.shiftKey||a===l.keyCode.PAGE_UP?(t.preventDefault(),ae(this,0,t.shiftKey?r.begin:0,!0)):(c.undoOnEscape&&a===l.keyCode.ESCAPE||90===a&&t.ctrlKey)&&!0!==t.altKey?(te(this,!0,!1,h.split("")),n.trigger("click")):a!==l.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===c.tabThrough&&a===l.keyCode.TAB&&(!0===t.shiftKey?(null===A(r.begin).match.fn&&(r.begin=J(r.begin)),r.end=G(r.begin,!0),r.begin=G(r.end,!0)):(r.begin=J(r.begin,!0),r.end=J(r.begin,!0),r.end<T().maskLength&&r.end--),r.begin<T().maskLength&&(t.preventDefault(),ae(this,r.begin,r.end))):(c.insertMode=!c.insertMode,this.setAttribute("im-insert",c.insertMode));c.onKeyDown.call(this,t,N(),ae(this).begin,c),w=-1!==e.inArray(a,c.ignorables)},keypressEvent:function(t,a,r,i,s){var o=this,d=e(o),u=t.which||t.charCode||t.keyCode;if(!(!0===a||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||w))return u===l.keyCode.ENTER&&h!==N().join("")&&(h=N().join(""),setTimeout((function(){d.trigger("change")}),0)),!0;if(u){46===u&&!1===t.shiftKey&&""!==c.radixPoint&&(u=c.radixPoint.charCodeAt(0));var m,f=a?{begin:s,end:s}:ae(o),_=String.fromCharCode(u),p=0;if(c._radixDance&&c.numericInput){var y=N().indexOf(c.radixPoint.charAt(0))+1;f.begin<=y&&(u===c.radixPoint.charCodeAt(0)&&(p=1),f.begin-=1,f.end-=1)}T().writeOutBuffer=!0;var g=z(f,_,i);if(!1!==g&&(x(!0),m=g.caret!==n?g.caret:J(g.pos.begin?g.pos.begin:g.pos),T().p=m),m=(c.numericInput&&g.caret===n?G(m):m)+p,!1!==r&&(setTimeout((function(){c.onKeyValidation.call(o,u,g,c)}),0),T().writeOutBuffer&&!1!==g)){var v=N();V(o,v,m,t,!0!==a)}if(t.preventDefault(),a)return!1!==g&&(g.forwardPosition=m),g}},pasteEvent:function(n){var a,r=n.originalEvent||n,i=(e(this),this.inputmask._valueGet(!0)),s=ae(this);L&&(a=s.end,s.end=s.begin,s.begin=a);var o=i.substr(0,s.begin),d=i.substr(s.end,i.length);if(o===(L?W().reverse():W()).slice(0,s.begin).join("")&&(o=""),d===(L?W().reverse():W()).slice(s.end).join("")&&(d=""),t.clipboardData&&t.clipboardData.getData)i=o+t.clipboardData.getData("Text")+d;else{if(!r.clipboardData||!r.clipboardData.getData)return!0;i=o+r.clipboardData.getData("text/plain")+d}var l=i;if(e.isFunction(c.onBeforePaste)){if(!1===(l=c.onBeforePaste.call(v,i,c)))return n.preventDefault();l||(l=i)}return te(this,!1,!1,l.toString().split("")),V(this,N(),J(S()),n,h!==N().join("")),n.preventDefault()},inputFallBackEvent:function(t){var n=this,a=n.inputmask._valueGet();if(N().join("")!==a){var r=ae(n);if(a=function(e,t,n){if(o){var a=t.replace(N().join(""),"");if(1===a.length){var r=t.split("");r.splice(n.begin,0,a),t=r.join("")}}return t}(0,a=function(e,t,n){return"."===t.charAt(n.begin-1)&&""!==c.radixPoint&&((t=t.split(""))[n.begin-1]=c.radixPoint.charAt(0),t=t.join("")),t}(0,a,r),r),N().join("")!==a){var i=N().join(""),s=!c.numericInput&&a.length>i.length?-1:0,d=a.substr(0,r.begin),u=a.substr(r.begin),m=i.substr(0,r.begin+s),f=i.substr(r.begin+s),h=r,_="",p=!1;if(d!==m){var y,g=(p=d.length>=m.length)?d.length:m.length;for(y=0;d.charAt(y)===m.charAt(y)&&y<g;y++);p&&(h.begin=y-s,_+=d.slice(y,h.end))}if(u!==f&&(u.length>f.length?_+=u.slice(0,1):u.length<f.length&&(h.end+=f.length-u.length,p||""===c.radixPoint||""!==u||d.charAt(h.begin+s-1)!==c.radixPoint||(h.begin--,_=c.radixPoint))),V(n,N(),{begin:h.begin+s,end:h.end+s}),_.length>0)e.each(_.split(""),(function(t,a){var r=new e.Event("keypress");r.which=a.charCodeAt(0),w=!1,ee.keypressEvent.call(n,r)}));else{h.begin===h.end-1&&(h.begin=G(h.begin+1),h.begin===h.end-1?ae(n,h.begin):ae(n,h.begin,h.end));var v=new e.Event("keydown");v.keyCode=c.numericInput?l.keyCode.BACKSPACE:l.keyCode.DELETE,ee.keydownEvent.call(n,v)}t.preventDefault()}}},beforeInputEvent:function(t){if(t.cancelable){var n=this;switch(t.inputType){case"insertText":return e.each(t.data.split(""),(function(t,a){var r=new e.Event("keypress");r.which=a.charCodeAt(0),w=!1,ee.keypressEvent.call(n,r)})),t.preventDefault();case"deleteContentBackward":return(a=new e.Event("keydown")).keyCode=l.keyCode.BACKSPACE,ee.keydownEvent.call(n,a),t.preventDefault();case"deleteContentForward":var a;return(a=new e.Event("keydown")).keyCode=l.keyCode.DELETE,ee.keydownEvent.call(n,a),t.preventDefault()}}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this,a=(a=t&&t.detail?t.detail[0]:arguments[1])||n.inputmask._valueGet(!0);e.isFunction(c.onBeforeMask)&&(a=c.onBeforeMask.call(v,a,c)||a),te(n,!0,!1,a=a.toString().split("")),h=N().join(""),(c.clearMaskOnLostFocus||c.clearIncomplete)&&n.inputmask._valueGet()===W().join("")&&n.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();c.showMaskOnFocus&&(t!==N().join("")?V(this,N(),J(S())):!1===Y&&ae(this,J(S()))),!0===c.positionCaretOnTab&&!1===Y&&ee.clickEvent.apply(this,[e,!0]),h=N().join("")},mouseleaveEvent:function(e){Y=!1,c.clearMaskOnLostFocus&&a.activeElement!==this&&X(this,g)},clickEvent:function(t,r){var i=this;setTimeout((function(){if(a.activeElement===i){var t=ae(i);if(r&&(L?t.end=t.begin:t.begin=t.end),t.begin===t.end)switch(c.positionCaretOnClick){case"none":break;case"select":ae(i,0,N().length);break;case"ignore":ae(i,J(S()));break;case"radixFocus":if(function(t){if(""!==c.radixPoint){var a=T().validPositions;if(a[t]===n||a[t].input===K(t)){if(t<J(-1))return!0;var r=e.inArray(c.radixPoint,N());if(-1!==r){for(var i in a)if(r<i&&a[i].input!==K(i))return!1;return!0}}}return!1}(t.begin)){var s=N().join("").indexOf(c.radixPoint);ae(i,c.numericInput?J(s):s);break}default:var o=t.begin,d=S(o,!0),l=J(d);if(o<l)ae(i,U(o,!0)||U(o-1,!0)?o:J(o));else{var u=T().validPositions[d],m=E(l,u?u.match.locator:n,u),f=K(l,m.match);if(""!==f&&N()[l]!==f&&!0!==m.match.optionalQuantifier&&!0!==m.match.newBlockMarker||!U(l,c.keepStatic)&&m.match.def===f){var h=J(l);(o>=h||o===l)&&(l=h)}ae(i,l)}}}}),0)},cutEvent:function(n){e(this);var r=ae(this),i=n.originalEvent||n,s=t.clipboardData||i.clipboardData,o=L?N().slice(r.end,r.begin):N().slice(r.begin,r.end);s.setData("text",L?o.reverse().join(""):o.join("")),a.execCommand&&a.execCommand("copy"),oe(0,l.keyCode.DELETE,r),V(this,N(),T().p,n,h!==N().join(""))},blurEvent:function(t){var a=e(this);if(this.inputmask){X(this,g);var r=this.inputmask._valueGet(),i=N().slice();""===r&&y===n||(c.clearMaskOnLostFocus&&(-1===S()&&r===W().join("")?i=[]:ie(i)),!1===se(i)&&(setTimeout((function(){a.trigger("incomplete")}),0),c.clearIncomplete&&(x(),i=c.clearMaskOnLostFocus?[]:W().slice())),V(this,i,n,t)),h!==N().join("")&&(h=i.join(""),a.trigger("change"))}},mouseenterEvent:function(e){Y=!0,a.activeElement!==this&&c.showMaskOnHover&&X(this,(L?N().slice().reverse():N()).join(""))},submitEvent:function(e){h!==N().join("")&&_.trigger("change"),c.clearMaskOnLostFocus&&-1===S()&&M.inputmask._valueGet&&M.inputmask._valueGet()===W().join("")&&M.inputmask._valueSet(""),c.clearIncomplete&&!1===se(N())&&M.inputmask._valueSet(""),c.removeMaskOnSubmit&&(M.inputmask._valueSet(M.inputmask.unmaskedvalue(),!0),setTimeout((function(){V(M,N())}),0))},resetEvent:function(e){M.inputmask.refreshValue=!0,setTimeout((function(){_.trigger("setvalue")}),0)}};function te(t,a,r,i,s){var o=this||t.inputmask,d=i.slice(),u="",m=-1,f=n;if(x(),r||!0===c.autoUnmask)m=J(m);else{var h=W().slice(0,J(-1)).join(""),_=d.join("").match(new RegExp("^"+l.escapeRegex(h),"g"));_&&_.length>0&&(d.splice(0,_.length*h.length),m=J(m))}-1===m?(T().p=J(m),m=0):T().p=m,o.caretPos={begin:m},e.each(d,(function(a,i){if(i!==n)if(T().validPositions[a]===n&&d[a]===K(a)&&U(a,!0)&&!1===z(a,d[a],!0,n,n,!0))T().p++;else{var s=new e.Event("_checkval");s.which=i.charCodeAt(0),u+=i;var l=S(n,!0);!function(e,t){return-1!==D(!0,0,!1).slice(e,J(e)).join("").replace(/'/g,"").indexOf(t)&&!U(e)&&(A(e).match.nativeDef===t.charAt(0)||null===A(e).match.fn&&A(e).match.nativeDef==="'"+t.charAt(0)||" "===A(e).match.nativeDef&&(A(e+1).match.nativeDef===t.charAt(0)||null===A(e+1).match.fn&&A(e+1).match.nativeDef==="'"+t.charAt(0)))}(m,u)?(f=ee.keypressEvent.call(t,s,!0,!1,r,o.caretPos.begin))&&(m=o.caretPos.begin+1,u=""):f=ee.keypressEvent.call(t,s,!0,!1,r,l+1),f&&(V(n,N(),f.forwardPosition,s,!1),o.caretPos={begin:f.forwardPosition,end:f.forwardPosition})}})),a&&V(t,N(),f?f.forwardPosition:n,s||new e.Event("checkval"),s&&"input"===s.type)}function ne(t){if(t){if(t.inputmask===n)return t.value;t.inputmask&&t.inputmask.refreshValue&&ee.setValueEvent.call(t)}var a=[],r=T().validPositions;for(var i in r)r[i].match&&null!=r[i].match.fn&&a.push(r[i].input);var s=0===a.length?"":(L?a.reverse():a).join("");if(e.isFunction(c.onUnMask)){var o=(L?N().slice().reverse():N()).join("");s=c.onUnMask.call(v,o,s,c)}return s}function ae(r,i,s,o){function d(e){return!L||"number"!=typeof e||c.greedy&&""===c.placeholder||!M||(e=M.inputmask._valueGet().length-e),e}var l;if(i===n)return"selectionStart"in r?(i=r.selectionStart,s=r.selectionEnd):t.getSelection?(l=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==r&&l.commonAncestorContainer!==r||(i=l.startOffset,s=l.endOffset):a.selection&&a.selection.createRange&&(s=(i=0-(l=a.selection.createRange()).duplicate().moveStart("character",-r.inputmask._valueGet().length))+l.text.length),{begin:o?i:d(i),end:o?s:d(s)};if(e.isArray(i)&&(s=L?i[0]:i[1],i=L?i[1]:i[0]),i.begin!==n&&(s=L?i.begin:i.end,i=L?i.end:i.begin),"number"==typeof i){i=o?i:d(i),s="number"==typeof(s=o?s:d(s))?s:i;var u=parseInt(((r.ownerDocument.defaultView||t).getComputedStyle?(r.ownerDocument.defaultView||t).getComputedStyle(r,null):r.currentStyle).fontSize)*s;if(r.scrollLeft=u>r.scrollWidth?u:0,r.inputmask.caretPos={begin:i,end:s},r===a.activeElement){if("selectionStart"in r)r.selectionStart=i,r.selectionEnd=s;else if(t.getSelection){if(l=a.createRange(),r.firstChild===n||null===r.firstChild){var m=a.createTextNode("");r.appendChild(m)}l.setStart(r.firstChild,i<r.inputmask._valueGet().length?i:r.inputmask._valueGet().length),l.setEnd(r.firstChild,s<r.inputmask._valueGet().length?s:r.inputmask._valueGet().length),l.collapse(!0);var f=t.getSelection();f.removeAllRanges(),f.addRange(l)}else r.createTextRange&&((l=r.createTextRange()).collapse(!0),l.moveEnd("character",s),l.moveStart("character",i),l.select());le(r,{begin:i,end:s})}}}function re(t){var a,r,i=D(!0,S(),!0,!0),s=i.length,o=S(),d={},l=T().validPositions[o],u=l!==n?l.locator.slice():n;for(a=o+1;a<i.length;a++)u=(r=E(a,u,a-1)).locator.slice(),d[a]=e.extend(!0,{},r);var c=l&&l.alternation!==n?l.locator[l.alternation]:n;for(a=s-1;a>o&&((r=d[a]).match.optionality||r.match.optionalQuantifier&&r.match.newBlockMarker||c&&(c!==d[a].locator[l.alternation]&&null!=r.match.fn||null===r.match.fn&&r.locator[l.alternation]&&R(r.locator[l.alternation].toString().split(","),c.toString().split(","))&&""!==P(a)[0].def))&&i[a]===K(a,r.match);a--)s--;return t?{l:s,def:d[s]?d[s].match:n}:s}function ie(e){e.length=0;for(var t,a=D(!0,0,!0,n,!0);(t=a.shift())!==n;)e.push(t);return e}function se(t){if(e.isFunction(c.isComplete))return c.isComplete(t,c);if("*"===c.repeat)return n;var a=!1,r=re(!0),i=G(r.l);if(r.def===n||r.def.newBlockMarker||r.def.optionality||r.def.optionalQuantifier){a=!0;for(var s=0;s<=i;s++){var o=E(s).match;if(null!==o.fn&&T().validPositions[s]===n&&!0!==o.optionality&&!0!==o.optionalQuantifier||null===o.fn&&t[s]!==K(s,o)){a=!1;break}}}return a}function oe(e,t,a,r,i){if((c.numericInput||L)&&(t===l.keyCode.BACKSPACE?t=l.keyCode.DELETE:t===l.keyCode.DELETE&&(t=l.keyCode.BACKSPACE),L)){var s=a.end;a.end=a.begin,a.begin=s}if(t===l.keyCode.BACKSPACE&&a.end-a.begin<1?(a.begin=G(a.begin),T().validPositions[a.begin]!==n&&T().validPositions[a.begin].input===c.groupSeparator&&a.begin--):t===l.keyCode.DELETE&&a.begin===a.end&&(a.end=U(a.end,!0)&&T().validPositions[a.end]&&T().validPositions[a.end].input!==c.radixPoint?a.end+1:J(a.end)+1,T().validPositions[a.begin]!==n&&T().validPositions[a.begin].input===c.groupSeparator&&a.end++),$(a),!0!==r&&!1!==c.keepStatic||null!==c.regex){var o=I(!0);if(o){var d=o.caret!==n?o.caret:o.pos?J(o.pos.begin?o.pos.begin:o.pos):S(-1,!0);(t!==l.keyCode.DELETE||a.begin>d)&&a.begin}}var u=S(a.begin,!0);if(u<a.begin||-1===a.begin)T().p=J(u);else if(!0!==r&&(T().p=a.begin,!0!==i))for(;T().p<u&&T().validPositions[T().p]===n;)T().p++}function de(n){var r=(n.ownerDocument.defaultView||t).getComputedStyle(n,null),i=a.createElement("div");i.style.width=r.width,i.style.textAlign=r.textAlign,y=a.createElement("div"),n.inputmask.colorMask=y,y.className="im-colormask",n.parentNode.insertBefore(y,n),n.parentNode.removeChild(n),y.appendChild(n),y.appendChild(i),n.style.left=i.offsetLeft+"px",e(y).on("mouseleave",(function(e){return ee.mouseleaveEvent.call(n,[e])})),e(y).on("mouseenter",(function(e){return ee.mouseenterEvent.call(n,[e])})),e(y).on("click",(function(e){return ae(n,function(e){var t,i=a.createElement("span");for(var s in r)isNaN(s)&&-1!==s.indexOf("font")&&(i.style[s]=r[s]);i.style.textTransform=r.textTransform,i.style.letterSpacing=r.letterSpacing,i.style.position="absolute",i.style.height="auto",i.style.width="auto",i.style.visibility="hidden",i.style.whiteSpace="nowrap",a.body.appendChild(i);var o,d=n.inputmask._valueGet(),l=0;for(t=0,o=d.length;t<=o;t++){if(i.innerHTML+=d.charAt(t)||"_",i.offsetWidth>=e){var u=e-l,c=i.offsetWidth-e;i.innerHTML=d.charAt(t),t=(u-=i.offsetWidth/3)<c?t-1:t;break}l=i.offsetWidth}return a.body.removeChild(i),t}(e.clientX)),ee.clickEvent.call(n,[e])}))}function le(e,t,r){var i,s,o,d=[],l=!1,u=0;function m(e){if(e===n&&(e=""),l||null!==i.fn&&s.input!==n)if(l&&(null!==i.fn&&s.input!==n||""===i.def)){l=!1;var t=d.length;d[t-1]=d[t-1]+"</span>",d.push(e)}else d.push(e);else l=!0,d.push("<span class='im-static'>"+e)}if(y!==n){var f=N();if(t===n?t=ae(e):t.begin===n&&(t={begin:t,end:t}),!0!==r){var h=S();do{T().validPositions[u]?(s=T().validPositions[u],i=s.match,o=s.locator.slice(),m(f[u])):(s=E(u,o,u-1),i=s.match,o=s.locator.slice(),!1===c.jitMasking||u<h||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>u?m(K(u,i)):l=!1),u++}while((p===n||u<p)&&(null!==i.fn||""!==i.def)||h>u||l);l&&m(),a.activeElement===e&&(d.splice(t.begin,0,t.begin===t.end||t.end>T().maskLength?'<mark class="im-caret" style="border-right-width: 1px;border-right-style: solid;">':'<mark class="im-caret-select">'),d.splice(t.end+1,0,"</mark>"))}var _=y.getElementsByTagName("div")[0];_.innerHTML=d.join(""),e.inputmask.positionColorMask(e,_)}}if(r!==n)switch(r.action){case"isComplete":return M=r.el,se(N());case"unmaskedvalue":return M!==n&&r.value===n||(Q=r.value,Q=(e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(v,Q,c)||Q).split(""),te.call(this,n,!1,!1,Q),e.isFunction(c.onBeforeWrite)&&c.onBeforeWrite.call(v,n,N(),0,c)),ne(M);case"mask":!function(t){Z.off(t);var r=function(t,r){var i=t.getAttribute("type"),s="INPUT"===t.tagName&&-1!==e.inArray(i,r.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!s)if("INPUT"===t.tagName){var o=a.createElement("input");o.setAttribute("type",i),s="text"===o.type,o=null}else s="partial";return!1!==s?function(t){var i,s;function o(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==S()||!0!==r.nullable?a.activeElement===this&&r.clearMaskOnLostFocus?(L?ie(N().slice()).reverse():ie(N().slice())).join(""):i.call(this):"":i.call(this)}function d(t){s.call(this,t),this.inputmask&&e(this).trigger("setvalue",[t])}if(!t.inputmask.__valueGet){if(!0!==r.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"==typeof"test".__proto__?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var l=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):n;l&&l.get&&l.set?(i=l.get,s=l.set,Object.defineProperty(t,"value",{get:o,set:d,configurable:!0})):"INPUT"!==t.tagName&&(i=function(){return this.textContent},s=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:o,set:d,configurable:!0}))}else a.__lookupGetter__&&t.__lookupGetter__("value")&&(i=t.__lookupGetter__("value"),s=t.__lookupSetter__("value"),t.__defineGetter__("value",o),t.__defineSetter__("value",d));t.inputmask.__valueGet=i,t.inputmask.__valueSet=s}t.inputmask._valueGet=function(e){return L&&!0!==e?i.call(this.el).split("").reverse().join(""):i.call(this.el)},t.inputmask._valueSet=function(e,t){s.call(this.el,null===e||e===n?"":!0!==t&&L?e.split("").reverse().join(""):e)},i===n&&(i=function(){return this.value},s=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===n||!0!==e.valHooks[t].inputmaskpatch)){var a=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},i=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=a(e);return-1!==S(n,n,e.inputmask.maskset.validPositions)||!0!==r.nullable?t:""}return a(e)},set:function(t,n){var a,r=e(t);return a=i(t,n),t.inputmask&&r.trigger("setvalue",[n]),a},inputmaskpatch:!0}}}(t.type),function(t){Z.on(t,"mouseenter",(function(t){var n=e(this);this.inputmask._valueGet()!==N().join("")&&n.trigger("setvalue")}))}(t))}}(t):t.inputmask=n,s}(t,c);if(!1!==r&&(_=e(M=t),g=M.placeholder,-1===(p=M!==n?M.maxLength:n)&&(p=n),!0===c.colorMask&&de(M),s&&("inputMode"in M&&(M.inputmode=c.inputmode,M.setAttribute("inputmode",c.inputmode)),!0===c.disablePredictiveText&&("autocorrect"in M?M.autocorrect=!1:(!0!==c.colorMask&&de(M),M.type="password"))),!0===r&&(M.setAttribute("im-insert",c.insertMode),Z.on(M,"submit",ee.submitEvent),Z.on(M,"reset",ee.resetEvent),Z.on(M,"blur",ee.blurEvent),Z.on(M,"focus",ee.focusEvent),!0!==c.colorMask&&(Z.on(M,"click",ee.clickEvent),Z.on(M,"mouseleave",ee.mouseleaveEvent),Z.on(M,"mouseenter",ee.mouseenterEvent)),Z.on(M,"paste",ee.pasteEvent),Z.on(M,"cut",ee.cutEvent),Z.on(M,"complete",c.oncomplete),Z.on(M,"incomplete",c.onincomplete),Z.on(M,"cleared",c.oncleared),s||!0===c.inputEventOnly?M.removeAttribute("maxLength"):(Z.on(M,"keydown",ee.keydownEvent),Z.on(M,"keypress",ee.keypressEvent)),Z.on(M,"input",ee.inputFallBackEvent),Z.on(M,"beforeinput",ee.beforeInputEvent)),Z.on(M,"setvalue",ee.setValueEvent),h=W().join(""),""!==M.inputmask._valueGet(!0)||!1===c.clearMaskOnLostFocus||a.activeElement===M)){var i=e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(v,M.inputmask._valueGet(!0),c)||M.inputmask._valueGet(!0);""!==i&&te(M,!0,!1,i.split(""));var o=N().slice();h=o.join(""),!1===se(o)&&c.clearIncomplete&&x(),c.clearMaskOnLostFocus&&a.activeElement!==M&&(-1===S()?o=[]:ie(o)),(!1===c.clearMaskOnLostFocus||c.showMaskOnFocus&&a.activeElement===M||""!==M.inputmask._valueGet(!0))&&V(M,o),a.activeElement===M&&ae(M,J(S()))}}(M);break;case"format":return Q=(e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(v,r.value,c)||r.value).split(""),te.call(this,n,!0,!1,Q),r.metadata?{value:L?N().slice().reverse().join(""):N().join(""),metadata:f.call(this,{action:"getmetadata"},u,c)}:L?N().slice().reverse().join(""):N().join("");case"isValid":r.value?(Q=r.value.split(""),te.call(this,n,!0,!0,Q)):r.value=N().join("");for(var ue=N(),ce=re(),me=ue.length-1;me>ce&&!U(me);me--);return ue.splice(ce,me+1-ce),se(ue)&&r.value===N().join("");case"getemptymask":return W().join("");case"remove":return M&&M.inputmask&&(e.data(M,"_inputmask_opts",null),_=e(M),M.inputmask._valueSet(c.autoUnmask?ne(M):M.inputmask._valueGet(!0)),Z.off(M),M.inputmask.colorMask&&((y=M.inputmask.colorMask).removeChild(M),y.parentNode.insertBefore(M,y),y.parentNode.removeChild(y)),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(M),"value")&&M.inputmask.__valueGet&&Object.defineProperty(M,"value",{get:M.inputmask.__valueGet,set:M.inputmask.__valueSet,configurable:!0}):a.__lookupGetter__&&M.__lookupGetter__("value")&&M.inputmask.__valueGet&&(M.__defineGetter__("value",M.inputmask.__valueGet),M.__defineSetter__("value",M.inputmask.__valueSet)),M.inputmask=n),M;case"getmetadata":if(e.isArray(u.metadata)){var fe=D(!0,0,!1).join("");return e.each(u.metadata,(function(e,t){if(t.mask===fe)return fe=t,!1})),fe}return u.metadata}}return l.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:n,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,disablePredictiveText:!1,importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(r){var i=this;return"string"==typeof r&&(r=a.getElementById(r)||a.querySelectorAll(r)),r=r.nodeName?[r]:r,e.each(r,(function(a,r){var s=e.extend(!0,{},i.opts);if(function(a,r,i,s){if(!0===r.importDataAttributes){var o,d,l,c,m=a.getAttribute(s),f=function(e,r){null!==(r=r!==n?r:a.getAttribute(s+"-"+e))&&("string"==typeof r&&(0===e.indexOf("on")?r=t[r]:"false"===r?r=!1:"true"===r&&(r=!0)),i[e]=r)};if(m&&""!==m&&(m=m.replace(/'/g,'"'),d=JSON.parse("{"+m+"}")),d)for(c in l=n,d)if("alias"===c.toLowerCase()){l=d[c];break}for(o in f("alias",l),i.alias&&u(i.alias,i,r),r){if(d)for(c in l=n,d)if(c.toLowerCase()===o.toLowerCase()){l=d[c];break}f(o,l)}}return e.extend(!0,r,i),("rtl"===a.dir||r.rightAlign)&&(a.style.textAlign="right"),("rtl"===a.dir||r.numericInput)&&(a.dir="ltr",a.removeAttribute("dir"),r.isRTL=!0),Object.keys(i).length}(r,s,e.extend(!0,{},i.userOptions),i.dataAttribute)){var o=c(s,i.noMasksCache);o!==n&&(r.inputmask!==n&&(r.inputmask.opts.autoUnmask=!0,r.inputmask.remove()),r.inputmask=new l(n,n,!0),r.inputmask.opts=s,r.inputmask.noMasksCache=i.noMasksCache,r.inputmask.userOptions=e.extend(!0,{},i.userOptions),r.inputmask.isRTL=s.isRTL||s.numericInput,r.inputmask.el=r,r.inputmask.maskset=o,e.data(r,"_inputmask_opts",s),f.call(r.inputmask,{action:"mask"}))}})),r&&r[0]&&r[0].inputmask||this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"==typeof t?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return f.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"format",value:e,metadata:t})},setValue:function(t){this.el&&e(this.el).trigger("setvalue",[t])},analyseMask:function(t,a,r){var i,s,o,d,u,c,m=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?(?:\|[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,f=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,h=!1,_=new g,p=[],y=[];function g(e,t,n,a){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=a||!1,this.quantifier={min:1,max:1}}function v(t,i,s){s=s!==n?s:t.matches.length;var o=t.matches[s-1];if(a)0===i.indexOf("[")||h&&/\\d|\\s|\\w]/i.test(i)||"."===i?t.matches.splice(s++,0,{fn:new RegExp(i,r.casing?"i":""),optionality:!1,newBlockMarker:o===n?"master":o.def!==i,casing:null,def:i,placeholder:n,nativeDef:i}):(h&&(i=i[i.length-1]),e.each(i.split(""),(function(e,a){o=t.matches[s-1],t.matches.splice(s++,0,{fn:null,optionality:!1,newBlockMarker:o===n?"master":o.def!==a&&null!==o.fn,casing:null,def:r.staticDefinitionSymbol||a,placeholder:r.staticDefinitionSymbol!==n?a:n,nativeDef:(h?"'":"")+a})}))),h=!1;else{var d=(r.definitions?r.definitions[i]:n)||l.prototype.definitions[i];d&&!h?t.matches.splice(s++,0,{fn:d.validator?"string"==typeof d.validator?new RegExp(d.validator,r.casing?"i":""):new function(){this.test=d.validator}:new RegExp("."),optionality:!1,newBlockMarker:o===n?"master":o.def!==(d.definitionSymbol||i),casing:d.casing,def:d.definitionSymbol||i,placeholder:d.placeholder,nativeDef:i}):(t.matches.splice(s++,0,{fn:null,optionality:!1,newBlockMarker:o===n?"master":o.def!==i&&null!==o.fn,casing:null,def:r.staticDefinitionSymbol||i,placeholder:r.staticDefinitionSymbol!==n?i:n,nativeDef:(h?"'":"")+i}),h=!1)}}function M(){if(p.length>0){if(v(d=p[p.length-1],s),d.isAlternator){u=p.pop();for(var e=0;e<u.matches.length;e++)u.matches[e].isGroup&&(u.matches[e].isGroup=!1);p.length>0?(d=p[p.length-1]).matches.push(u):_.matches.push(u)}}else v(_,s)}function L(e){var t=new g(!0);return t.openGroup=!1,t.matches=e,t}for(a&&(r.optionalmarker[0]=n,r.optionalmarker[1]=n);i=a?f.exec(t):m.exec(t);){if(s=i[0],a)switch(s.charAt(0)){case"?":s="{0,1}";break;case"+":case"*":s="{"+s+"}"}if(h)M();else switch(s.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case r.escapeChar:h=!0,a&&M();break;case r.optionalmarker[1]:case r.groupmarker[1]:if((o=p.pop()).openGroup=!1,o!==n)if(p.length>0){if((d=p[p.length-1]).matches.push(o),d.isAlternator){u=p.pop();for(var k=0;k<u.matches.length;k++)u.matches[k].isGroup=!1,u.matches[k].alternatorGroup=!1;p.length>0?(d=p[p.length-1]).matches.push(u):_.matches.push(u)}}else _.matches.push(o);else M();break;case r.optionalmarker[0]:p.push(new g(!1,!0));break;case r.groupmarker[0]:p.push(new g(!0));break;case r.quantifiermarker[0]:var b=new g(!1,!1,!0),w=(s=s.replace(/[{}]/g,"")).split("|"),Y=w[0].split(","),D=isNaN(Y[0])?Y[0]:parseInt(Y[0]),T=1===Y.length?D:isNaN(Y[1])?Y[1]:parseInt(Y[1]);"*"!==D&&"+"!==D||(D="*"===T?0:1),b.quantifier={min:D,max:T,jit:w[1]};var x=p.length>0?p[p.length-1].matches:_.matches;if((i=x.pop()).isAlternator){x.push(i),x=i.matches;var S=new g(!0),j=x.pop();x.push(S),x=S.matches,i=j}i.isGroup||(i=L([i])),x.push(i),x.push(b);break;case r.alternatormarker:var C=function(e){var t=e.pop();return t.isQuantifier&&(t=L([e.pop(),t])),t};if(p.length>0){var H=(d=p[p.length-1]).matches[d.matches.length-1];c=d.openGroup&&(H.matches===n||!1===H.isGroup&&!1===H.isAlternator)?p.pop():C(d.matches)}else c=C(_.matches);if(c.isAlternator)p.push(c);else if(c.alternatorGroup?(u=p.pop(),c.alternatorGroup=!1):u=new g(!1,!1,!1,!0),u.matches.push(c),p.push(u),c.openGroup){c.openGroup=!1;var E=new g(!0);E.alternatorGroup=!0,p.push(E)}break;default:M()}}for(;p.length>0;)o=p.pop(),_.matches.push(o);return _.matches.length>0&&(function t(i){i&&i.matches&&e.each(i.matches,(function(e,s){var o=i.matches[e+1];(o===n||o.matches===n||!1===o.isQuantifier)&&s&&s.isGroup&&(s.isGroup=!1,a||(v(s,r.groupmarker[0],0),!0!==s.openGroup&&v(s,r.groupmarker[1]))),t(s)}))}(_),y.push(_)),(r.numericInput||r.isRTL)&&function e(t){for(var a in t.matches=t.matches.reverse(),t.matches)if(t.matches.hasOwnProperty(a)){var i=parseInt(a);if(t.matches[a].isQuantifier&&t.matches[i+1]&&t.matches[i+1].isGroup){var s=t.matches[a];t.matches.splice(a,1),t.matches.splice(i+1,0,s)}t.matches[a].matches!==n?t.matches[a]=e(t.matches[a]):t.matches[a]=((o=t.matches[a])===r.optionalmarker[0]?o=r.optionalmarker[1]:o===r.optionalmarker[1]?o=r.optionalmarker[0]:o===r.groupmarker[0]?o=r.groupmarker[1]:o===r.groupmarker[1]&&(o=r.groupmarker[0]),o)}var o;return t}(y[0]),y},positionColorMask:function(e,t){e.style.left=t.offsetLeft+"px"}},l.extendDefaults=function(t){e.extend(!0,l.prototype.defaults,t)},l.extendDefinitions=function(t){e.extend(!0,l.prototype.definitions,t)},l.extendAliases=function(t){e.extend(!0,l.prototype.aliases,t)},l.format=function(e,t,n){return l(t).format(e,n)},l.unmask=function(e,t){return l(t).unmaskedvalue(e)},l.isValid=function(e,t){return l(t).isValid(e)},l.remove=function(t){"string"==typeof t&&(t=a.getElementById(t)||a.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(e,t){t.inputmask&&t.inputmask.remove()}))},l.setValue=function(t,n){"string"==typeof t&&(t=a.getElementById(t)||a.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(t,a){a.inputmask?a.inputmask.setValue(n):e(a).trigger("setvalue",[n])}))},l.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},l.keyCode={BACKSPACE:8,BACKSPACE_SAFARI:127,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,RIGHT:39,SPACE:32,TAB:9,UP:38,X:88,CONTROL:17},l.dependencyLib=e,l})?a.apply(t,r):a)||(e.exports=i)},function(e,t,n){var a,r,i;r=[n(6)],void 0===(i="function"==typeof(a=function(e){var t=e.document;function n(e){return null!=e&&e===e.window}function a(e){return e instanceof Element}function r(n){return n instanceof r?n:this instanceof r?void(null!=n&&n!==e&&(this[0]=n.nodeName?n:void 0!==n[0]&&n[0].nodeName?n[0]:t.querySelector(n),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new r(n)}return r.prototype={on:function(e,t){if(a(this[0]))for(var n=this[0].eventRegistry,r=this[0],i=function(e,a){r.addEventListener?r.addEventListener(e,t,!1):r.attachEvent&&r.attachEvent("on"+e,t),n[e]=n[e]||{},n[e][a]=n[e][a]||[],n[e][a].push(t)},s=e.split(" "),o=0;o<s.length;o++){var d=s[o].split(".");i(d[0],d[1]||"global")}return this},off:function(e,t){if(a(this[0]))for(var n=this[0].eventRegistry,r=this[0],i=function(e,t,a){if(e in n==1)if(r.removeEventListener?r.removeEventListener(e,a,!1):r.detachEvent&&r.detachEvent("on"+e,a),"global"===t)for(var i in n[e])n[e][i].splice(n[e][i].indexOf(a),1);else n[e][t].splice(n[e][t].indexOf(a),1)},s=function(e,a){var r,i,s=[];if(e.length>0)if(void 0===t)for(r=0,i=n[e][a].length;r<i;r++)s.push({ev:e,namespace:a&&a.length>0?a:"global",handler:n[e][a][r]});else s.push({ev:e,namespace:a&&a.length>0?a:"global",handler:t});else if(a.length>0)for(var o in n)for(var d in n[o])if(d===a)if(void 0===t)for(r=0,i=n[o][d].length;r<i;r++)s.push({ev:o,namespace:d,handler:n[o][d][r]});else s.push({ev:o,namespace:d,handler:t});return s},o=e.split(" "),d=0;d<o.length;d++)for(var l=o[d].split("."),u=s(l[0],l[1]),c=0,m=u.length;c<m;c++)i(u[c].ev,u[c].namespace,u[c].handler);return this},trigger:function(e){if(a(this[0]))for(var n=this[0].eventRegistry,i=this[0],s="string"==typeof e?e.split(" "):[e.type],o=0;o<s.length;o++){var d=s[o].split("."),l=d[0],u=d[1]||"global";if(void 0!==t&&"global"===u){var c,m,f={bubbles:!0,cancelable:!0,detail:arguments[1]};if(t.createEvent){try{c=new CustomEvent(l,f)}catch(e){(c=t.createEvent("CustomEvent")).initCustomEvent(l,f.bubbles,f.cancelable,f.detail)}e.type&&r.extend(c,e),i.dispatchEvent(c)}else(c=t.createEventObject()).eventType=l,c.detail=arguments[1],e.type&&r.extend(c,e),i.fireEvent("on"+c.eventType,c)}else if(void 0!==n[l])if(arguments[0]=arguments[0].type?arguments[0]:r.Event(arguments[0]),"global"===u)for(var h in n[l])for(m=0;m<n[l][h].length;m++)n[l][h][m].apply(i,arguments);else for(m=0;m<n[l][u].length;m++)n[l][u][m].apply(i,arguments)}return this}},r.isFunction=function(e){return"function"==typeof e},r.noop=function(){},r.isArray=Array.isArray,r.inArray=function(e,t,n){return null==t?-1:function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1}(t,e)},r.valHooks=void 0,r.isPlainObject=function(e){return!("object"!=typeof e||e.nodeType||n(e)||e.constructor&&!Object.hasOwnProperty.call(e.constructor.prototype,"isPrototypeOf"))},r.extend=function(){var e,t,n,a,i,s,o=arguments[0]||{},d=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[d]||{},d++),"object"==typeof o||r.isFunction(o)||(o={}),d===l&&(o=this,d--);d<l;d++)if(null!=(e=arguments[d]))for(t in e)n=o[t],o!==(a=e[t])&&(u&&a&&(r.isPlainObject(a)||(i=r.isArray(a)))?(i?(i=!1,s=n&&r.isArray(n)?n:[]):s=n&&r.isPlainObject(n)?n:{},o[t]=r.extend(u,s,a)):void 0!==a&&(o[t]=a));return o},r.each=function(e,t){var a=0;if(function(e){var t="length"in e&&e.length,a=typeof e;return"function"!==a&&!n(e)&&(!(1!==e.nodeType||!t)||("array"===a||0===t||"number"==typeof t&&t>0&&t-1 in e))}(e))for(var r=e.length;a<r&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},r.data=function(e,t,n){if(void 0===n)return e.__data?e.__data[t]:null;e.__data=e.__data||{},e.__data[t]=n},"function"==typeof e.CustomEvent?r.Event=e.CustomEvent:(r.Event=function(e,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var a=t.createEvent("CustomEvent");return a.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),a},r.Event.prototype=e.Event.prototype),r})?a.apply(t,r):a)||(e.exports=i)},function(e,t,n){var a,r,i;r=[n(2)],void 0===(i="function"==typeof(a=function(t){var a,r,i,s,o,d,l,u,c,m,f,h,_,p,y,g,v,M,L,k,b,w,Y,D,T,x,S,j,C,H,E,A,O,P,W,N,F,B,R,I,z,q,$,U,J,G,V,K,X,Q,Z,ee,te,ne,ae,re,ie,se;re=n(154),ie=e.exports,se="https:"==document.location.protocol?"https:":"http:",re||(ie?n(7)(t):t.event.special.mousewheel||t("head").append(decodeURI("%3Cscript src="+se+"//cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js%3E%3C/script%3E"))),r="mCustomScrollbar",i={setTop:0,setLeft:0,axis:"y",scrollbarPosition:"inside",scrollInertia:950,autoDraggerLength:!0,alwaysShowScrollbar:0,snapOffset:0,mouseWheel:{enable:!0,scrollAmount:"auto",axis:"y",deltaFactor:"auto",disableOver:["select","option","keygen","datalist","textarea"]},scrollButtons:{scrollType:"stepless",scrollAmount:"auto"},keyboard:{enable:!0,scrollType:"stepless",scrollAmount:"auto"},contentTouchScroll:25,documentTouchScroll:!0,advanced:{autoScrollOnFocus:"input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",updateOnContentResize:!0,updateOnImageLoad:!1,autoUpdateTimeout:60},theme:"light",callbacks:{onTotalScrollOffset:0,onTotalScrollBackOffset:0,alwaysTriggerOffsets:!0}},s=0,o={},d=window.attachEvent&&!window.addEventListener?1:0,l=!1,u=["mCSB_dragger_onDrag","mCSB_scrollTools_onDrag","mCS_img_loaded","mCS_disabled","mCS_destroyed","mCS_no_scrollbar","mCS-autoHide","mCS-dir-rtl","mCS_no_scrollbar_y","mCS_no_scrollbar_x","mCS_y_hidden","mCS_x_hidden","mCSB_draggerContainer","mCSB_buttonUp","mCSB_buttonDown","mCSB_buttonLeft","mCSB_buttonRight"],c={init:function(e){e=t.extend(!0,{},i,e);var n=m.call(this);if(e.live){var a=e.liveSelector||this.selector||".mCustomScrollbar",r=t(a);if("off"===e.live)return void h(a);o[a]=setTimeout((function(){r.mCustomScrollbar(e),"once"===e.live&&r.length&&h(a)}),500)}else h(a);return e.setWidth=e.set_width?e.set_width:e.setWidth,e.setHeight=e.set_height?e.set_height:e.setHeight,e.axis=e.horizontalScroll?"x":_(e.axis),e.scrollInertia=e.scrollInertia>0&&e.scrollInertia<17?17:e.scrollInertia,"object"!=typeof e.mouseWheel&&1==e.mouseWheel&&(e.mouseWheel={enable:!0,scrollAmount:"auto",axis:"y",preventDefault:!1,deltaFactor:"auto",normalizeDelta:!1,invert:!1}),e.mouseWheel.scrollAmount=e.mouseWheelPixels?e.mouseWheelPixels:e.mouseWheel.scrollAmount,e.mouseWheel.normalizeDelta=e.advanced.normalizeMouseWheelDelta?e.advanced.normalizeMouseWheelDelta:e.mouseWheel.normalizeDelta,e.scrollButtons.scrollType=p(e.scrollButtons.scrollType),f(e),t(n).each((function(){var n=t(this);if(!n.data("mCS")){n.data("mCS",{idx:++s,opt:e,scrollRatio:{y:null,x:null},overflowed:null,contentReset:{y:null,x:null},bindEvents:!1,tweenRunning:!1,sequential:{},langDir:n.css("direction"),cbOffsets:null,trigger:null,poll:{size:{o:0,n:0},img:{o:0,n:0},change:{o:0,n:0}}});var a=n.data("mCS"),r=a.opt,i=n.data("mcs-axis"),o=n.data("mcs-scrollbar-position"),d=n.data("mcs-theme");i&&(r.axis=i),o&&(r.scrollbarPosition=o),d&&(r.theme=d,f(r)),y.call(this),a&&r.callbacks.onCreate&&"function"==typeof r.callbacks.onCreate&&r.callbacks.onCreate.call(this),t("#mCSB_"+a.idx+"_container img:not(."+u[2]+")").addClass(u[2]),c.update.call(null,n)}}))},update:function(e,n){var a=e||m.call(this);return t(a).each((function(){var e=t(this);if(e.data("mCS")){var a=e.data("mCS"),r=a.opt,i=t("#mCSB_"+a.idx+"_container"),s=t("#mCSB_"+a.idx),o=[t("#mCSB_"+a.idx+"_dragger_vertical"),t("#mCSB_"+a.idx+"_dragger_horizontal")];if(!i.length)return;a.tweenRunning&&J(e),n&&a&&r.callbacks.onBeforeUpdate&&"function"==typeof r.callbacks.onBeforeUpdate&&r.callbacks.onBeforeUpdate.call(this),e.hasClass(u[3])&&e.removeClass(u[3]),e.hasClass(u[4])&&e.removeClass(u[4]),s.css("max-height","none"),s.height()!==e.height()&&s.css("max-height",e.height()),v.call(this),"y"===r.axis||r.advanced.autoExpandHorizontalScroll||i.css("width",g(i)),a.overflowed=w.call(this),x.call(this),r.autoDraggerLength&&L.call(this),k.call(this),D.call(this);var d=[Math.abs(i[0].offsetTop),Math.abs(i[0].offsetLeft)];"x"!==r.axis&&(a.overflowed[0]?o[0].height()>o[0].parent().height()?Y.call(this):(G(e,d[0].toString(),{dir:"y",dur:0,overwrite:"none"}),a.contentReset.y=null):(Y.call(this),"y"===r.axis?T.call(this):"yx"===r.axis&&a.overflowed[1]&&G(e,d[1].toString(),{dir:"x",dur:0,overwrite:"none"}))),"y"!==r.axis&&(a.overflowed[1]?o[1].width()>o[1].parent().width()?Y.call(this):(G(e,d[1].toString(),{dir:"x",dur:0,overwrite:"none"}),a.contentReset.x=null):(Y.call(this),"x"===r.axis?T.call(this):"yx"===r.axis&&a.overflowed[0]&&G(e,d[0].toString(),{dir:"y",dur:0,overwrite:"none"}))),n&&a&&(2===n&&r.callbacks.onImageLoad&&"function"==typeof r.callbacks.onImageLoad?r.callbacks.onImageLoad.call(this):3===n&&r.callbacks.onSelectorChange&&"function"==typeof r.callbacks.onSelectorChange?r.callbacks.onSelectorChange.call(this):r.callbacks.onUpdate&&"function"==typeof r.callbacks.onUpdate&&r.callbacks.onUpdate.call(this)),U.call(this)}}))},scrollTo:function(e,n){if(void 0!==e&&null!=e){var a=m.call(this);return t(a).each((function(){var a=t(this);if(a.data("mCS")){var r=a.data("mCS"),i=r.opt,s={trigger:"external",scrollInertia:i.scrollInertia,scrollEasing:"mcsEaseInOut",moveDragger:!1,timeout:60,callbacks:!0,onStart:!0,onUpdate:!0,onComplete:!0},o=t.extend(!0,{},s,n),d=q.call(this,e),l=o.scrollInertia>0&&o.scrollInertia<17?17:o.scrollInertia;d[0]=$.call(this,d[0],"y"),d[1]=$.call(this,d[1],"x"),o.moveDragger&&(d[0]*=r.scrollRatio.y,d[1]*=r.scrollRatio.x),o.dur=ae()?0:l,setTimeout((function(){null!==d[0]&&void 0!==d[0]&&"x"!==i.axis&&r.overflowed[0]&&(o.dir="y",o.overwrite="all",G(a,d[0].toString(),o)),null!==d[1]&&void 0!==d[1]&&"y"!==i.axis&&r.overflowed[1]&&(o.dir="x",o.overwrite="none",G(a,d[1].toString(),o))}),o.timeout)}}))}},stop:function(){var e=m.call(this);return t(e).each((function(){var e=t(this);e.data("mCS")&&J(e)}))},disable:function(e){var n=m.call(this);return t(n).each((function(){var n=t(this);n.data("mCS")&&(n.data("mCS"),U.call(this,"remove"),T.call(this),e&&Y.call(this),x.call(this,!0),n.addClass(u[3]))}))},destroy:function(){var e=m.call(this);return t(e).each((function(){var n=t(this);if(n.data("mCS")){var a=n.data("mCS"),i=a.opt,s=t("#mCSB_"+a.idx),o=t("#mCSB_"+a.idx+"_container"),d=t(".mCSB_"+a.idx+"_scrollbar");i.live&&h(i.liveSelector||t(e).selector),U.call(this,"remove"),T.call(this),Y.call(this),n.removeData("mCS"),Q(this,"mcs"),d.remove(),o.find("img."+u[2]).removeClass(u[2]),s.replaceWith(o.contents()),n.removeClass(r+" _mCS_"+a.idx+" "+u[6]+" "+u[7]+" "+u[5]+" "+u[3]).addClass(u[4])}}))}},m=function(){return"object"!=typeof t(this)||t(this).length<1?".mCustomScrollbar":this},f=function(e){e.autoDraggerLength=!(t.inArray(e.theme,["rounded","rounded-dark","rounded-dots","rounded-dots-dark"])>-1)&&e.autoDraggerLength,e.autoExpandScrollbar=!(t.inArray(e.theme,["rounded-dots","rounded-dots-dark","3d","3d-dark","3d-thick","3d-thick-dark","inset","inset-dark","inset-2","inset-2-dark","inset-3","inset-3-dark"])>-1)&&e.autoExpandScrollbar,e.scrollButtons.enable=!(t.inArray(e.theme,["minimal","minimal-dark"])>-1)&&e.scrollButtons.enable,e.autoHideScrollbar=t.inArray(e.theme,["minimal","minimal-dark"])>-1||e.autoHideScrollbar,e.scrollbarPosition=t.inArray(e.theme,["minimal","minimal-dark"])>-1?"outside":e.scrollbarPosition},h=function(e){o[e]&&(clearTimeout(o[e]),Q(o,e))},_=function(e){return"yx"===e||"xy"===e||"auto"===e?"yx":"x"===e||"horizontal"===e?"x":"y"},p=function(e){return"stepped"===e||"pixels"===e||"step"===e||"click"===e?"stepped":"stepless"},y=function(){var e=t(this),n=e.data("mCS"),a=n.opt,i=a.autoExpandScrollbar?" "+u[1]+"_expand":"",s=["<div id='mCSB_"+n.idx+"_scrollbar_vertical' class='mCSB_scrollTools mCSB_"+n.idx+"_scrollbar mCS-"+a.theme+" mCSB_scrollTools_vertical"+i+"'><div class='"+u[12]+"'><div id='mCSB_"+n.idx+"_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>","<div id='mCSB_"+n.idx+"_scrollbar_horizontal' class='mCSB_scrollTools mCSB_"+n.idx+"_scrollbar mCS-"+a.theme+" mCSB_scrollTools_horizontal"+i+"'><div class='"+u[12]+"'><div id='mCSB_"+n.idx+"_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],o="yx"===a.axis?"mCSB_vertical_horizontal":"x"===a.axis?"mCSB_horizontal":"mCSB_vertical",d="yx"===a.axis?s[0]+s[1]:"x"===a.axis?s[1]:s[0],l="yx"===a.axis?"<div id='mCSB_"+n.idx+"_container_wrapper' class='mCSB_container_wrapper' />":"",c=a.autoHideScrollbar?" "+u[6]:"",m="x"!==a.axis&&"rtl"===n.langDir?" "+u[7]:"";a.setWidth&&e.css("width",a.setWidth),a.setHeight&&e.css("height",a.setHeight),a.setLeft="y"!==a.axis&&"rtl"===n.langDir?"989999px":a.setLeft,e.addClass(r+" _mCS_"+n.idx+c+m).wrapInner("<div id='mCSB_"+n.idx+"' class='mCustomScrollBox mCS-"+a.theme+" "+o+"'><div id='mCSB_"+n.idx+"_container' class='mCSB_container' style='position:relative; top:"+a.setTop+"; left:"+a.setLeft+";' dir='"+n.langDir+"' /></div>");var f=t("#mCSB_"+n.idx),h=t("#mCSB_"+n.idx+"_container");"y"===a.axis||a.advanced.autoExpandHorizontalScroll||h.css("width",g(h)),"outside"===a.scrollbarPosition?("static"===e.css("position")&&e.css("position","relative"),e.css("overflow","visible"),f.addClass("mCSB_outside").after(d)):(f.addClass("mCSB_inside").append(d),h.wrap(l)),M.call(this);var _=[t("#mCSB_"+n.idx+"_dragger_vertical"),t("#mCSB_"+n.idx+"_dragger_horizontal")];_[0].css("min-height",_[0].height()),_[1].css("min-width",_[1].width())},g=function(e){var n=[e[0].scrollWidth,Math.max.apply(Math,e.children().map((function(){return t(this).outerWidth(!0)})).get())],a=e.parent().width();return n[0]>a?n[0]:n[1]>a?n[1]:"100%"},v=function(){var e=t(this).data("mCS"),n=e.opt,a=t("#mCSB_"+e.idx+"_container");if(n.advanced.autoExpandHorizontalScroll&&"y"!==n.axis){a.css({width:"auto","min-width":0,"overflow-x":"scroll"});var r=Math.ceil(a[0].scrollWidth);3===n.advanced.autoExpandHorizontalScroll||2!==n.advanced.autoExpandHorizontalScroll&&r>a.parent().width()?a.css({width:r,"min-width":"100%","overflow-x":"inherit"}):a.css({"overflow-x":"inherit",position:"absolute"}).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({width:Math.ceil(a[0].getBoundingClientRect().right+.4)-Math.floor(a[0].getBoundingClientRect().left),"min-width":"100%",position:"relative"}).unwrap()}},M=function(){var e=t(this).data("mCS"),n=e.opt,a=t(".mCSB_"+e.idx+"_scrollbar:first"),r=te(n.scrollButtons.tabindex)?"tabindex='"+n.scrollButtons.tabindex+"'":"",i=["<a href='#' class='"+u[13]+"' "+r+" />","<a href='#' class='"+u[14]+"' "+r+" />","<a href='#' class='"+u[15]+"' "+r+" />","<a href='#' class='"+u[16]+"' "+r+" />"],s=["x"===n.axis?i[2]:i[0],"x"===n.axis?i[3]:i[1],i[2],i[3]];n.scrollButtons.enable&&a.prepend(s[0]).append(s[1]).next(".mCSB_scrollTools").prepend(s[2]).append(s[3])},L=function(){var e=t(this).data("mCS"),n=t("#mCSB_"+e.idx),a=t("#mCSB_"+e.idx+"_container"),r=[t("#mCSB_"+e.idx+"_dragger_vertical"),t("#mCSB_"+e.idx+"_dragger_horizontal")],i=[n.height()/a.outerHeight(!1),n.width()/a.outerWidth(!1)],s=[parseInt(r[0].css("min-height")),Math.round(i[0]*r[0].parent().height()),parseInt(r[1].css("min-width")),Math.round(i[1]*r[1].parent().width())],o=d&&s[1]<s[0]?s[0]:s[1],l=d&&s[3]<s[2]?s[2]:s[3];r[0].css({height:o,"max-height":r[0].parent().height()-10}).find(".mCSB_dragger_bar").css({"line-height":s[0]+"px"}),r[1].css({width:l,"max-width":r[1].parent().width()-10})},k=function(){var e=t(this).data("mCS"),n=t("#mCSB_"+e.idx),a=t("#mCSB_"+e.idx+"_container"),r=[t("#mCSB_"+e.idx+"_dragger_vertical"),t("#mCSB_"+e.idx+"_dragger_horizontal")],i=[a.outerHeight(!1)-n.height(),a.outerWidth(!1)-n.width()],s=[i[0]/(r[0].parent().height()-r[0].height()),i[1]/(r[1].parent().width()-r[1].width())];e.scrollRatio={y:s[0],x:s[1]}},b=function(e,t,n){var a=n?u[0]+"_expanded":"",r=e.closest(".mCSB_scrollTools");"active"===t?(e.toggleClass(u[0]+" "+a),r.toggleClass(u[1]),e[0]._draggable=e[0]._draggable?0:1):e[0]._draggable||("hide"===t?(e.removeClass(u[0]),r.removeClass(u[1])):(e.addClass(u[0]),r.addClass(u[1])))},w=function(){var e=t(this).data("mCS"),n=t("#mCSB_"+e.idx),a=t("#mCSB_"+e.idx+"_container"),r=null==e.overflowed?a.height():a.outerHeight(!1),i=null==e.overflowed?a.width():a.outerWidth(!1),s=a[0].scrollHeight,o=a[0].scrollWidth;return s>r&&(r=s),o>i&&(i=o),[r>n.height(),i>n.width()]},Y=function(){var e=t(this),n=e.data("mCS"),a=n.opt,r=t("#mCSB_"+n.idx),i=t("#mCSB_"+n.idx+"_container"),s=[t("#mCSB_"+n.idx+"_dragger_vertical"),t("#mCSB_"+n.idx+"_dragger_horizontal")];if(J(e),("x"!==a.axis&&!n.overflowed[0]||"y"===a.axis&&n.overflowed[0])&&(s[0].add(i).css("top",0),G(e,"_resetY")),"y"!==a.axis&&!n.overflowed[1]||"x"===a.axis&&n.overflowed[1]){var o=dx=0;"rtl"===n.langDir&&(o=r.width()-i.outerWidth(!1),dx=Math.abs(o/n.scrollRatio.x)),i.css("left",o),s[1].css("left",dx),G(e,"_resetX")}},D=function(){var e,n=t(this),a=n.data("mCS"),r=a.opt;a.bindEvents||(j.call(this),r.contentTouchScroll&&C.call(this),H.call(this),r.mouseWheel.enable&&function a(){e=setTimeout((function(){t.event.special.mousewheel?(clearTimeout(e),E.call(n[0])):a()}),100)}(),N.call(this),B.call(this),r.advanced.autoScrollOnFocus&&F.call(this),r.scrollButtons.enable&&R.call(this),r.keyboard.enable&&I.call(this),a.bindEvents=!0)},T=function(){var e=t(this),n=e.data("mCS"),a=n.opt,r="mCS_"+n.idx,i=".mCSB_"+n.idx+"_scrollbar",s=t("#mCSB_"+n.idx+",#mCSB_"+n.idx+"_container,#mCSB_"+n.idx+"_container_wrapper,"+i+" ."+u[12]+",#mCSB_"+n.idx+"_dragger_vertical,#mCSB_"+n.idx+"_dragger_horizontal,"+i+">a"),o=t("#mCSB_"+n.idx+"_container");a.advanced.releaseDraggableSelectors&&s.add(t(a.advanced.releaseDraggableSelectors)),a.advanced.extraDraggableSelectors&&s.add(t(a.advanced.extraDraggableSelectors)),n.bindEvents&&(t(document).add(t(!O()||top.document)).unbind("."+r),s.each((function(){t(this).unbind("."+r)})),clearTimeout(e[0]._focusTimeout),Q(e[0],"_focusTimeout"),clearTimeout(n.sequential.step),Q(n.sequential,"step"),clearTimeout(o[0].onCompleteTimeout),Q(o[0],"onCompleteTimeout"),n.bindEvents=!1)},x=function(e){var n=t(this),a=n.data("mCS"),r=a.opt,i=t("#mCSB_"+a.idx+"_container_wrapper"),s=i.length?i:t("#mCSB_"+a.idx+"_container"),o=[t("#mCSB_"+a.idx+"_scrollbar_vertical"),t("#mCSB_"+a.idx+"_scrollbar_horizontal")],d=[o[0].find(".mCSB_dragger"),o[1].find(".mCSB_dragger")];"x"!==r.axis&&(a.overflowed[0]&&!e?(o[0].add(d[0]).add(o[0].children("a")).css("display","block"),s.removeClass(u[8]+" "+u[10])):(r.alwaysShowScrollbar?(2!==r.alwaysShowScrollbar&&d[0].css("display","none"),s.removeClass(u[10])):(o[0].css("display","none"),s.addClass(u[10])),s.addClass(u[8]))),"y"!==r.axis&&(a.overflowed[1]&&!e?(o[1].add(d[1]).add(o[1].children("a")).css("display","block"),s.removeClass(u[9]+" "+u[11])):(r.alwaysShowScrollbar?(2!==r.alwaysShowScrollbar&&d[1].css("display","none"),s.removeClass(u[11])):(o[1].css("display","none"),s.addClass(u[11])),s.addClass(u[9]))),a.overflowed[0]||a.overflowed[1]?n.removeClass(u[5]):n.addClass(u[5])},S=function(e){var n=e.type,a=e.target.ownerDocument!==document&&null!==frameElement?[t(frameElement).offset().top,t(frameElement).offset().left]:null,r=O()&&e.target.ownerDocument!==top.document&&null!==frameElement?[t(e.view.frameElement).offset().top,t(e.view.frameElement).offset().left]:[0,0];switch(n){case"pointerdown":case"MSPointerDown":case"pointermove":case"MSPointerMove":case"pointerup":case"MSPointerUp":return a?[e.originalEvent.pageY-a[0]+r[0],e.originalEvent.pageX-a[1]+r[1],!1]:[e.originalEvent.pageY,e.originalEvent.pageX,!1];case"touchstart":case"touchmove":case"touchend":var i=e.originalEvent.touches[0]||e.originalEvent.changedTouches[0],s=e.originalEvent.touches.length||e.originalEvent.changedTouches.length;return e.target.ownerDocument!==document?[i.screenY,i.screenX,s>1]:[i.pageY,i.pageX,s>1];default:return a?[e.pageY-a[0]+r[0],e.pageX-a[1]+r[1],!1]:[e.pageY,e.pageX,!1]}},j=function(){var e,n,a,r=t(this),i=r.data("mCS"),s=i.opt,o="mCS_"+i.idx,u=["mCSB_"+i.idx+"_dragger_vertical","mCSB_"+i.idx+"_dragger_horizontal"],c=t("#mCSB_"+i.idx+"_container"),m=t("#"+u[0]+",#"+u[1]),f=s.advanced.releaseDraggableSelectors?m.add(t(s.advanced.releaseDraggableSelectors)):m,h=s.advanced.extraDraggableSelectors?t(!O()||top.document).add(t(s.advanced.extraDraggableSelectors)):t(!O()||top.document);function _(t,n,a,o){if(c[0].idleTimer=s.scrollInertia<233?250:0,e.attr("id")===u[1])var d="x",l=(e[0].offsetLeft-n+o)*i.scrollRatio.x;else d="y",l=(e[0].offsetTop-t+a)*i.scrollRatio.y;G(r,l.toString(),{dir:d,drag:!0})}m.bind("contextmenu."+o,(function(e){e.preventDefault()})).bind("mousedown."+o+" touchstart."+o+" pointerdown."+o+" MSPointerDown."+o,(function(i){if(i.stopImmediatePropagation(),i.preventDefault(),Z(i)){l=!0,d&&(document.onselectstart=function(){return!1}),P.call(c,!1),J(r);var o=(e=t(this)).offset(),u=S(i)[0]-o.top,m=S(i)[1]-o.left,f=e.height()+o.top,h=e.width()+o.left;u<f&&u>0&&m<h&&m>0&&(n=u,a=m),b(e,"active",s.autoExpandScrollbar)}})).bind("touchmove."+o,(function(t){t.stopImmediatePropagation(),t.preventDefault();var r=e.offset(),i=S(t)[0]-r.top,s=S(t)[1]-r.left;_(n,a,i,s)})),t(document).add(h).bind("mousemove."+o+" pointermove."+o+" MSPointerMove."+o,(function(t){if(e){var r=e.offset(),i=S(t)[0]-r.top,s=S(t)[1]-r.left;if(n===i&&a===s)return;_(n,a,i,s)}})).add(f).bind("mouseup."+o+" touchend."+o+" pointerup."+o+" MSPointerUp."+o,(function(t){e&&(b(e,"active",s.autoExpandScrollbar),e=null),l=!1,d&&(document.onselectstart=null),P.call(c,!0)}))},C=function(){var e,n,r,i,s,o,d,u,c,m,f,h,_,p,y=t(this),g=y.data("mCS"),v=g.opt,M="mCS_"+g.idx,L=t("#mCSB_"+g.idx),k=t("#mCSB_"+g.idx+"_container"),b=[t("#mCSB_"+g.idx+"_dragger_vertical"),t("#mCSB_"+g.idx+"_dragger_horizontal")],w=[],Y=[],D="yx"===v.axis?"none":"all",T=[],x=k.find("iframe"),j=["touchstart."+M+" pointerdown."+M+" MSPointerDown."+M,"touchmove."+M+" pointermove."+M+" MSPointerMove."+M,"touchend."+M+" pointerup."+M+" MSPointerUp."+M],C=void 0!==document.body.style.touchAction&&""!==document.body.style.touchAction;function H(t){if(!ee(t)||l||S(t)[2])a=0;else{a=1,_=0,p=0,e=1,y.removeClass("mCS_touch_action");var i=k.offset();n=S(t)[0]-i.top,r=S(t)[1]-i.left,T=[S(t)[0],S(t)[1]]}}function E(t){if(ee(t)&&!l&&!S(t)[2]&&(v.documentTouchScroll||t.preventDefault(),t.stopImmediatePropagation(),(!p||_)&&e)){d=K();var a=L.offset(),i=S(t)[0]-a.top,s=S(t)[1]-a.left;if(w.push(i),Y.push(s),T[2]=Math.abs(S(t)[0]-T[0]),T[3]=Math.abs(S(t)[1]-T[1]),g.overflowed[0])var o=b[0].parent().height()-b[0].height(),u=n-i>0&&i-n>-o*g.scrollRatio.y&&(2*T[3]<T[2]||"yx"===v.axis);if(g.overflowed[1])var c=b[1].parent().width()-b[1].width(),m=r-s>0&&s-r>-c*g.scrollRatio.x&&(2*T[2]<T[3]||"yx"===v.axis);u||m?(C||t.preventDefault(),_=1):(p=1,y.addClass("mCS_touch_action")),C&&t.preventDefault(),f="yx"===v.axis?[n-i,r-s]:"x"===v.axis?[null,r-s]:[n-i,null],k[0].idleTimer=250,g.overflowed[0]&&N(f[0],0,"mcsLinearOut","y","all",!0),g.overflowed[1]&&N(f[1],0,"mcsLinearOut","x",D,!0)}}function A(e){if(!ee(e)||l||S(e)[2])a=0;else{a=1,e.stopImmediatePropagation(),J(y),o=K();var t=L.offset();i=S(e)[0]-t.top,s=S(e)[1]-t.left,w=[],Y=[]}}function P(t){if(ee(t)&&!l&&!S(t)[2]){e=0,t.stopImmediatePropagation(),_=0,p=0,u=K();var n=L.offset(),a=S(t)[0]-n.top,r=S(t)[1]-n.left;if(!(u-d>30)){var y=(m=1e3/(u-o))<2.5,M=y?[w[w.length-2],Y[Y.length-2]]:[0,0];c=y?[a-M[0],r-M[1]]:[a-i,r-s];var b=[Math.abs(c[0]),Math.abs(c[1])];m=y?[Math.abs(c[0]/4),Math.abs(c[1]/4)]:[m,m];var T=[Math.abs(k[0].offsetTop)-c[0]*W(b[0]/m[0],m[0]),Math.abs(k[0].offsetLeft)-c[1]*W(b[1]/m[1],m[1])];f="yx"===v.axis?[T[0],T[1]]:"x"===v.axis?[null,T[1]]:[T[0],null],h=[4*b[0]+v.scrollInertia,4*b[1]+v.scrollInertia];var x=parseInt(v.contentTouchScroll)||0;f[0]=b[0]>x?f[0]:0,f[1]=b[1]>x?f[1]:0,g.overflowed[0]&&N(f[0],h[0],"mcsEaseOut","y",D,!1),g.overflowed[1]&&N(f[1],h[1],"mcsEaseOut","x",D,!1)}}}function W(e,t){var n=[1.5*t,2*t,t/1.5,t/2];return e>90?t>4?n[0]:n[3]:e>60?t>3?n[3]:n[2]:e>30?t>8?n[1]:t>6?n[0]:t>4?t:n[2]:t>8?t:n[3]}function N(e,t,n,a,r,i){e&&G(y,e.toString(),{dur:t,scrollEasing:n,dir:a,overwrite:r,drag:i})}k.bind(j[0],(function(e){H(e)})).bind(j[1],(function(e){E(e)})),L.bind(j[0],(function(e){A(e)})).bind(j[2],(function(e){P(e)})),x.length&&x.each((function(){t(this).bind("load",(function(){O(this)&&t(this.contentDocument||this.contentWindow.document).bind(j[0],(function(e){H(e),A(e)})).bind(j[1],(function(e){E(e)})).bind(j[2],(function(e){P(e)}))}))}))},H=function(){var e,n=t(this),r=n.data("mCS"),i=r.opt,s=r.sequential,o="mCS_"+r.idx,d=t("#mCSB_"+r.idx+"_container"),u=d.parent();function c(t,a,r){s.type=r&&e?"stepped":"stepless",s.scrollAmount=10,z(n,t,a,"mcsLinearOut",r?60:null)}d.bind("mousedown."+o,(function(t){a||e||(e=1,l=!0)})).add(document).bind("mousemove."+o,(function(t){if(!a&&e&&(window.getSelection?window.getSelection().toString():document.selection&&"Control"!=document.selection.type&&document.selection.createRange().text)){var n=d.offset(),o=S(t)[0]-n.top+d[0].offsetTop,l=S(t)[1]-n.left+d[0].offsetLeft;o>0&&o<u.height()&&l>0&&l<u.width()?s.step&&c("off",null,"stepped"):("x"!==i.axis&&r.overflowed[0]&&(o<0?c("on",38):o>u.height()&&c("on",40)),"y"!==i.axis&&r.overflowed[1]&&(l<0?c("on",37):l>u.width()&&c("on",39)))}})).bind("mouseup."+o+" dragend."+o,(function(t){a||(e&&(e=0,c("off",null)),l=!1)}))},E=function(){if(t(this).data("mCS")){var e=t(this),n=e.data("mCS"),a=n.opt,r="mCS_"+n.idx,i=t("#mCSB_"+n.idx),s=[t("#mCSB_"+n.idx+"_dragger_vertical"),t("#mCSB_"+n.idx+"_dragger_horizontal")],o=t("#mCSB_"+n.idx+"_container").find("iframe");o.length&&o.each((function(){t(this).bind("load",(function(){O(this)&&t(this.contentDocument||this.contentWindow.document).bind("mousewheel."+r,(function(e,t){l(e,t)}))}))})),i.bind("mousewheel."+r,(function(e,t){l(e,t)}))}function l(r,o){if(J(e),!W(e,r.target)){var l="auto"!==a.mouseWheel.deltaFactor?parseInt(a.mouseWheel.deltaFactor):d&&r.deltaFactor<100?100:r.deltaFactor||100,u=a.scrollInertia;if("x"===a.axis||"x"===a.mouseWheel.axis)var c="x",m=[Math.round(l*n.scrollRatio.x),parseInt(a.mouseWheel.scrollAmount)],f="auto"!==a.mouseWheel.scrollAmount?m[1]:m[0]>=i.width()?.9*i.width():m[0],h=Math.abs(t("#mCSB_"+n.idx+"_container")[0].offsetLeft),_=s[1][0].offsetLeft,p=s[1].parent().width()-s[1].width(),y="y"===a.mouseWheel.axis?r.deltaY||o:r.deltaX;else c="y",m=[Math.round(l*n.scrollRatio.y),parseInt(a.mouseWheel.scrollAmount)],f="auto"!==a.mouseWheel.scrollAmount?m[1]:m[0]>=i.height()?.9*i.height():m[0],h=Math.abs(t("#mCSB_"+n.idx+"_container")[0].offsetTop),_=s[0][0].offsetTop,p=s[0].parent().height()-s[0].height(),y=r.deltaY||o;"y"===c&&!n.overflowed[0]||"x"===c&&!n.overflowed[1]||((a.mouseWheel.invert||r.webkitDirectionInvertedFromDevice)&&(y=-y),a.mouseWheel.normalizeDelta&&(y=y<0?-1:1),(y>0&&0!==_||y<0&&_!==p||a.mouseWheel.preventDefault)&&(r.stopImmediatePropagation(),r.preventDefault()),r.deltaFactor<5&&!a.mouseWheel.normalizeDelta&&(f=r.deltaFactor,u=17),G(e,(h-y*f).toString(),{dir:c,dur:u}))}}},A=new Object,O=function(e){var n=!1,a=!1,r=null;if(void 0===e?a="#empty":void 0!==t(e).attr("id")&&(a=t(e).attr("id")),!1!==a&&void 0!==A[a])return A[a];if(e){try{r=(e.contentDocument||e.contentWindow.document).body.innerHTML}catch(e){}n=null!==r}else{try{r=top.document.body.innerHTML}catch(e){}n=null!==r}return!1!==a&&(A[a]=n),n},P=function(e){var t=this.find("iframe");if(t.length){var n=e?"auto":"none";t.css("pointer-events",n)}},W=function(e,n){var a=n.nodeName.toLowerCase(),r=e.data("mCS").opt.mouseWheel.disableOver;return t.inArray(a,r)>-1&&!(t.inArray(a,["select","textarea"])>-1&&!t(n).is(":focus"))},N=function(){var e,n=t(this),a=n.data("mCS"),r="mCS_"+a.idx,i=t("#mCSB_"+a.idx+"_container"),s=i.parent();t(".mCSB_"+a.idx+"_scrollbar ."+u[12]).bind("mousedown."+r+" touchstart."+r+" pointerdown."+r+" MSPointerDown."+r,(function(n){l=!0,t(n.target).hasClass("mCSB_dragger")||(e=1)})).bind("touchend."+r+" pointerup."+r+" MSPointerUp."+r,(function(e){l=!1})).bind("click."+r,(function(r){if(e&&(e=0,t(r.target).hasClass(u[12])||t(r.target).hasClass("mCSB_draggerRail"))){J(n);var o=t(this),d=o.find(".mCSB_dragger");if(o.parent(".mCSB_scrollTools_horizontal").length>0){if(!a.overflowed[1])return;var l="x",c=r.pageX>d.offset().left?-1:1,m=Math.abs(i[0].offsetLeft)-c*(.9*s.width())}else{if(!a.overflowed[0])return;l="y",c=r.pageY>d.offset().top?-1:1,m=Math.abs(i[0].offsetTop)-c*(.9*s.height())}G(n,m.toString(),{dir:l,scrollEasing:"mcsEaseInOut"})}}))},F=function(){var e=t(this),n=e.data("mCS"),a=n.opt,r="mCS_"+n.idx,i=t("#mCSB_"+n.idx+"_container"),s=i.parent();i.bind("focusin."+r,(function(n){var r=t(document.activeElement),o=i.find(".mCustomScrollBox").length;r.is(a.advanced.autoScrollOnFocus)&&(J(e),clearTimeout(e[0]._focusTimeout),e[0]._focusTimer=o?17*o:0,e[0]._focusTimeout=setTimeout((function(){var t=[ne(r)[0],ne(r)[1]],n=[i[0].offsetTop,i[0].offsetLeft],o=[n[0]+t[0]>=0&&n[0]+t[0]<s.height()-r.outerHeight(!1),n[1]+t[1]>=0&&n[0]+t[1]<s.width()-r.outerWidth(!1)],d="yx"!==a.axis||o[0]||o[1]?"all":"none";"x"===a.axis||o[0]||G(e,t[0].toString(),{dir:"y",scrollEasing:"mcsEaseInOut",overwrite:d,dur:0}),"y"===a.axis||o[1]||G(e,t[1].toString(),{dir:"x",scrollEasing:"mcsEaseInOut",overwrite:d,dur:0})}),e[0]._focusTimer))}))},B=function(){var e=t(this).data("mCS"),n="mCS_"+e.idx,a=t("#mCSB_"+e.idx+"_container").parent();a.bind("scroll."+n,(function(n){0===a.scrollTop()&&0===a.scrollLeft()||t(".mCSB_"+e.idx+"_scrollbar").css("visibility","hidden")}))},R=function(){var e=t(this),n=e.data("mCS"),a=n.opt,r=n.sequential,i="mCS_"+n.idx,s=".mCSB_"+n.idx+"_scrollbar";t(s+">a").bind("contextmenu."+i,(function(e){e.preventDefault()})).bind("mousedown."+i+" touchstart."+i+" pointerdown."+i+" MSPointerDown."+i+" mouseup."+i+" touchend."+i+" pointerup."+i+" MSPointerUp."+i+" mouseout."+i+" pointerout."+i+" MSPointerOut."+i+" click."+i,(function(i){if(i.preventDefault(),Z(i)){var s=t(this).attr("class");switch(r.type=a.scrollButtons.scrollType,i.type){case"mousedown":case"touchstart":case"pointerdown":case"MSPointerDown":if("stepped"===r.type)return;l=!0,n.tweenRunning=!1,o("on",s);break;case"mouseup":case"touchend":case"pointerup":case"MSPointerUp":case"mouseout":case"pointerout":case"MSPointerOut":if("stepped"===r.type)return;l=!1,r.dir&&o("off",s);break;case"click":if("stepped"!==r.type||n.tweenRunning)return;o("on",s)}}function o(t,n){r.scrollAmount=a.scrollButtons.scrollAmount,z(e,t,n)}}))},I=function(){var e=t(this),n=e.data("mCS"),a=n.opt,r=n.sequential,i="mCS_"+n.idx,s=t("#mCSB_"+n.idx),o=t("#mCSB_"+n.idx+"_container"),d=o.parent(),l="input,textarea,select,datalist,keygen,[contenteditable='true']",u=o.find("iframe"),c=["blur."+i+" keydown."+i+" keyup."+i];function m(i){switch(i.type){case"blur":n.tweenRunning&&r.dir&&h("off",null);break;case"keydown":case"keyup":var s=i.keyCode?i.keyCode:i.which,u="on";if("x"!==a.axis&&(38===s||40===s)||"y"!==a.axis&&(37===s||39===s)){if((38===s||40===s)&&!n.overflowed[0]||(37===s||39===s)&&!n.overflowed[1])return;"keyup"===i.type&&(u="off"),t(document.activeElement).is(l)||(i.preventDefault(),i.stopImmediatePropagation(),h(u,s))}else if(33===s||34===s){if((n.overflowed[0]||n.overflowed[1])&&(i.preventDefault(),i.stopImmediatePropagation()),"keyup"===i.type){J(e);var c=34===s?-1:1;if("x"===a.axis||"yx"===a.axis&&n.overflowed[1]&&!n.overflowed[0])var m="x",f=Math.abs(o[0].offsetLeft)-c*(.9*d.width());else m="y",f=Math.abs(o[0].offsetTop)-c*(.9*d.height());G(e,f.toString(),{dir:m,scrollEasing:"mcsEaseInOut"})}}else 35!==s&&36!==s||t(document.activeElement).is(l)||((n.overflowed[0]||n.overflowed[1])&&(i.preventDefault(),i.stopImmediatePropagation()),"keyup"!==i.type)||("x"===a.axis||"yx"===a.axis&&n.overflowed[1]&&!n.overflowed[0]?(m="x",f=35===s?Math.abs(d.width()-o.outerWidth(!1)):0):(m="y",f=35===s?Math.abs(d.height()-o.outerHeight(!1)):0),G(e,f.toString(),{dir:m,scrollEasing:"mcsEaseInOut"}))}function h(t,i){r.type=a.keyboard.scrollType,r.scrollAmount=a.keyboard.scrollAmount,"stepped"===r.type&&n.tweenRunning||z(e,t,i)}}u.length&&u.each((function(){t(this).bind("load",(function(){O(this)&&t(this.contentDocument||this.contentWindow.document).bind(c[0],(function(e){m(e)}))}))})),s.attr("tabindex","0").bind(c[0],(function(e){m(e)}))},z=function(e,n,a,r,i){var s=e.data("mCS"),o=s.opt,d=s.sequential,l=t("#mCSB_"+s.idx+"_container"),c="stepped"===d.type,m=o.scrollInertia<26?26:o.scrollInertia,f=o.scrollInertia<1?17:o.scrollInertia;switch(n){case"on":if(d.dir=[a===u[16]||a===u[15]||39===a||37===a?"x":"y",a===u[13]||a===u[15]||38===a||37===a?-1:1],J(e),te(a)&&"stepped"===d.type)return;h(c);break;case"off":clearTimeout(d.step),Q(d,"step"),J(e),(c||s.tweenRunning&&d.dir)&&h(!0)}function h(t){o.snapAmount&&(d.scrollAmount=o.snapAmount instanceof Array?"x"===d.dir[0]?o.snapAmount[1]:o.snapAmount[0]:o.snapAmount);var n="stepped"!==d.type,a=i||(t?n?m/1.5:f:1e3/60),u=t?n?7.5:40:2.5,c=[Math.abs(l[0].offsetTop),Math.abs(l[0].offsetLeft)],_=[s.scrollRatio.y>10?10:s.scrollRatio.y,s.scrollRatio.x>10?10:s.scrollRatio.x],p="x"===d.dir[0]?c[1]+d.dir[1]*(_[1]*u):c[0]+d.dir[1]*(_[0]*u),y="x"===d.dir[0]?c[1]+d.dir[1]*parseInt(d.scrollAmount):c[0]+d.dir[1]*parseInt(d.scrollAmount),g="auto"!==d.scrollAmount?y:p,v=r||(t?n?"mcsLinearOut":"mcsEaseInOut":"mcsLinear"),M=!!t;t&&a<17&&(g="x"===d.dir[0]?c[1]:c[0]),G(e,g.toString(),{dir:d.dir[0],scrollEasing:v,dur:a,onComplete:M}),t?d.dir=!1:(clearTimeout(d.step),d.step=setTimeout((function(){h()}),a))}},q=function(e){var n=t(this).data("mCS").opt,a=[];return"function"==typeof e&&(e=e()),e instanceof Array?a=e.length>1?[e[0],e[1]]:"x"===n.axis?[null,e[0]]:[e[0],null]:(a[0]=e.y?e.y:e.x||"x"===n.axis?null:e,a[1]=e.x?e.x:e.y||"y"===n.axis?null:e),"function"==typeof a[0]&&(a[0]=a[0]()),"function"==typeof a[1]&&(a[1]=a[1]()),a},$=function(e,n){if(null!=e&&void 0!==e){var a=t(this),r=a.data("mCS"),i=r.opt,s=t("#mCSB_"+r.idx+"_container"),o=s.parent(),d=typeof e;n||(n="x"===i.axis?"x":"y");var l="x"===n?s.outerWidth(!1)-o.width():s.outerHeight(!1)-o.height(),u="x"===n?s[0].offsetLeft:s[0].offsetTop,m="x"===n?"left":"top";switch(d){case"function":return e();case"object":if(!(h=e.jquery?e:t(e)).length)return;return"x"===n?ne(h)[1]:ne(h)[0];case"string":case"number":if(te(e))return Math.abs(e);if(-1!==e.indexOf("%"))return Math.abs(l*parseInt(e)/100);if(-1!==e.indexOf("-="))return Math.abs(u-parseInt(e.split("-=")[1]));if(-1!==e.indexOf("+=")){var f=u+parseInt(e.split("+=")[1]);return f>=0?0:Math.abs(f)}if(-1!==e.indexOf("px")&&te(e.split("px")[0]))return Math.abs(e.split("px")[0]);if("top"===e||"left"===e)return 0;if("bottom"===e)return Math.abs(o.height()-s.outerHeight(!1));if("right"===e)return Math.abs(o.width()-s.outerWidth(!1));if("first"===e||"last"===e){var h=s.find(":"+e);return"x"===n?ne(h)[1]:ne(h)[0]}return t(e).length?"x"===n?ne(t(e))[1]:ne(t(e))[0]:(s.css(m,e),void c.update.call(null,a[0]))}}},U=function(e){var n=t(this),a=n.data("mCS"),r=a.opt,i=t("#mCSB_"+a.idx+"_container");if(e)return clearTimeout(i[0].autoUpdate),void Q(i[0],"autoUpdate");function s(e){clearTimeout(i[0].autoUpdate),c.update.call(null,n[0],e)}!function e(){clearTimeout(i[0].autoUpdate),0!==n.parents("html").length?i[0].autoUpdate=setTimeout((function(){return r.advanced.updateOnSelectorChange&&(a.poll.change.n=function(){!0===r.advanced.updateOnSelectorChange&&(r.advanced.updateOnSelectorChange="*");var e=0,t=i.find(r.advanced.updateOnSelectorChange);return r.advanced.updateOnSelectorChange&&t.length>0&&t.each((function(){e+=this.offsetHeight+this.offsetWidth})),e}(),a.poll.change.n!==a.poll.change.o)?(a.poll.change.o=a.poll.change.n,void s(3)):r.advanced.updateOnContentResize&&(a.poll.size.n=n[0].scrollHeight+n[0].scrollWidth+i[0].offsetHeight+n[0].offsetHeight+n[0].offsetWidth,a.poll.size.n!==a.poll.size.o)?(a.poll.size.o=a.poll.size.n,void s(1)):!r.advanced.updateOnImageLoad||"auto"===r.advanced.updateOnImageLoad&&"y"===r.axis||(a.poll.img.n=i.find("img").length,a.poll.img.n===a.poll.img.o)?void((r.advanced.updateOnSelectorChange||r.advanced.updateOnContentResize||r.advanced.updateOnImageLoad)&&e()):(a.poll.img.o=a.poll.img.n,void i.find("img").each((function(){!function(e){if(t(e).hasClass(u[2]))s();else{var n,a,r=new Image;r.onload=(n=r,a=function(){this.onload=null,t(e).addClass(u[2]),s(2)},function(){return a.apply(n,arguments)}),r.src=e.src}}(this)})))}),r.advanced.autoUpdateTimeout):n=null}()},J=function(e){var n=e.data("mCS");t("#mCSB_"+n.idx+"_container,#mCSB_"+n.idx+"_container_wrapper,#mCSB_"+n.idx+"_dragger_vertical,#mCSB_"+n.idx+"_dragger_horizontal").each((function(){X.call(this)}))},G=function(e,n,a){var r=e.data("mCS"),i=r.opt,s={trigger:"internal",dir:"y",scrollEasing:"mcsEaseOut",drag:!1,dur:i.scrollInertia,overwrite:"all",callbacks:!0,onStart:!0,onUpdate:!0,onComplete:!0},o=[(a=t.extend(s,a)).dur,a.drag?0:a.dur],d=t("#mCSB_"+r.idx),l=t("#mCSB_"+r.idx+"_container"),u=l.parent(),c=i.callbacks.onTotalScrollOffset?q.call(e,i.callbacks.onTotalScrollOffset):[0,0],m=i.callbacks.onTotalScrollBackOffset?q.call(e,i.callbacks.onTotalScrollBackOffset):[0,0];if(r.trigger=a.trigger,0===u.scrollTop()&&0===u.scrollLeft()||(t(".mCSB_"+r.idx+"_scrollbar").css("visibility","visible"),u.scrollTop(0).scrollLeft(0)),"_resetY"!==n||r.contentReset.y||(k("onOverflowYNone")&&i.callbacks.onOverflowYNone.call(e[0]),r.contentReset.y=1),"_resetX"!==n||r.contentReset.x||(k("onOverflowXNone")&&i.callbacks.onOverflowXNone.call(e[0]),r.contentReset.x=1),"_resetY"!==n&&"_resetX"!==n){switch(!r.contentReset.y&&e[0].mcs||!r.overflowed[0]||(k("onOverflowY")&&i.callbacks.onOverflowY.call(e[0]),r.contentReset.x=null),!r.contentReset.x&&e[0].mcs||!r.overflowed[1]||(k("onOverflowX")&&i.callbacks.onOverflowX.call(e[0]),r.contentReset.x=null),i.snapAmount&&(n=function(e,t,n){return Math.round(e/t)*t-n}(n,i.snapAmount instanceof Array?"x"===a.dir?i.snapAmount[1]:i.snapAmount[0]:i.snapAmount,i.snapOffset)),a.dir){case"x":var f=t("#mCSB_"+r.idx+"_dragger_horizontal"),h="left",_=l[0].offsetLeft,p=[d.width()-l.outerWidth(!1),f.parent().width()-f.width()],y=[n,0===n?0:n/r.scrollRatio.x],g=c[1],v=m[1],M=g>0?g/r.scrollRatio.x:0,L=v>0?v/r.scrollRatio.x:0;break;case"y":f=t("#mCSB_"+r.idx+"_dragger_vertical"),h="top",_=l[0].offsetTop,p=[d.height()-l.outerHeight(!1),f.parent().height()-f.height()],y=[n,0===n?0:n/r.scrollRatio.y],g=c[0],v=m[0],M=g>0?g/r.scrollRatio.y:0,L=v>0?v/r.scrollRatio.y:0}y[1]<0||0===y[0]&&0===y[1]?y=[0,0]:y[1]>=p[1]?y=[p[0],p[1]]:y[0]=-y[0],e[0].mcs||(w(),k("onInit")&&i.callbacks.onInit.call(e[0])),clearTimeout(l[0].onCompleteTimeout),V(f[0],h,Math.round(y[1]),o[1],a.scrollEasing),!r.tweenRunning&&(0===_&&y[0]>=0||_===p[0]&&y[0]<=p[0])||V(l[0],h,Math.round(y[0]),o[0],a.scrollEasing,a.overwrite,{onStart:function(){a.callbacks&&a.onStart&&!r.tweenRunning&&(k("onScrollStart")&&(w(),i.callbacks.onScrollStart.call(e[0])),r.tweenRunning=!0,b(f),r.cbOffsets=[i.callbacks.alwaysTriggerOffsets||_>=p[0]+g,i.callbacks.alwaysTriggerOffsets||_<=-v])},onUpdate:function(){a.callbacks&&a.onUpdate&&k("whileScrolling")&&(w(),i.callbacks.whileScrolling.call(e[0]))},onComplete:function(){if(a.callbacks&&a.onComplete){"yx"===i.axis&&clearTimeout(l[0].onCompleteTimeout);var t=l[0].idleTimer||0;l[0].onCompleteTimeout=setTimeout((function(){k("onScroll")&&(w(),i.callbacks.onScroll.call(e[0])),k("onTotalScroll")&&y[1]>=p[1]-M&&r.cbOffsets[0]&&(w(),i.callbacks.onTotalScroll.call(e[0])),k("onTotalScrollBack")&&y[1]<=L&&r.cbOffsets[1]&&(w(),i.callbacks.onTotalScrollBack.call(e[0])),r.tweenRunning=!1,l[0].idleTimer=0,b(f,"hide")}),t)}}})}function k(e){return r&&i.callbacks[e]&&"function"==typeof i.callbacks[e]}function w(){var t=[l[0].offsetTop,l[0].offsetLeft],n=[f[0].offsetTop,f[0].offsetLeft],r=[l.outerHeight(!1),l.outerWidth(!1)],i=[d.height(),d.width()];e[0].mcs={content:l,top:t[0],left:t[1],draggerTop:n[0],draggerLeft:n[1],topPct:Math.round(100*Math.abs(t[0])/(Math.abs(r[0])-i[0])),leftPct:Math.round(100*Math.abs(t[1])/(Math.abs(r[1])-i[1])),direction:a.dir}}},V=function(e,t,n,a,r,i,s){e._mTween||(e._mTween={top:{},left:{}});var o,d,l=(s=s||{}).onStart||function(){},u=s.onUpdate||function(){},c=s.onComplete||function(){},m=K(),f=0,h=e.offsetTop,_=e.style,p=e._mTween[t];"left"===t&&(h=e.offsetLeft);var y=n-h;function g(){p.stop||(f||l.call(),f=K()-m,v(),f>=p.time&&(p.time=f>p.time?f+o-(f-p.time):f+o-1,p.time<f+1&&(p.time=f+1)),p.time<a?p.id=d(g):c.call())}function v(){a>0?(p.currVal=function(e,t,n,a,r){switch(r){case"linear":case"mcsLinear":return n*e/a+t;case"mcsLinearOut":return e/=a,e--,n*Math.sqrt(1-e*e)+t;case"easeInOutSmooth":return(e/=a/2)<1?n/2*e*e+t:(e--,-n/2*(e*(e-2)-1)+t);case"easeInOutStrong":return(e/=a/2)<1?n/2*Math.pow(2,10*(e-1))+t:(e--,n/2*(2-Math.pow(2,-10*e))+t);case"easeInOut":case"mcsEaseInOut":return(e/=a/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t;case"easeOutSmooth":return e/=a,e--,-n*(e*e*e*e-1)+t;case"easeOutStrong":return n*(1-Math.pow(2,-10*e/a))+t;case"easeOut":case"mcsEaseOut":default:var i=(e/=a)*e,s=i*e;return t+n*(.499999999999997*s*i+-2.5*i*i+5.5*s+-6.5*i+4*e)}}(p.time,h,y,a,r),_[t]=Math.round(p.currVal)+"px"):_[t]=n+"px",u.call()}p.stop=0,"none"!==i&&null!=p.id&&(window.requestAnimationFrame?window.cancelAnimationFrame(p.id):clearTimeout(p.id),p.id=null),o=1e3/60,p.time=f+o,d=window.requestAnimationFrame?window.requestAnimationFrame:function(e){return v(),setTimeout(e,.01)},p.id=d(g)},K=function(){return window.performance&&window.performance.now?window.performance.now():window.performance&&window.performance.webkitNow?window.performance.webkitNow():Date.now?Date.now():(new Date).getTime()},X=function(){var e=this;e._mTween||(e._mTween={top:{},left:{}});for(var t=["top","left"],n=0;n<t.length;n++){var a=t[n];e._mTween[a].id&&(window.requestAnimationFrame?window.cancelAnimationFrame(e._mTween[a].id):clearTimeout(e._mTween[a].id),e._mTween[a].id=null,e._mTween[a].stop=1)}},Q=function(e,t){try{delete e[t]}catch(n){e[t]=null}},Z=function(e){return!(e.which&&1!==e.which)},ee=function(e){var t=e.originalEvent.pointerType;return!(t&&"touch"!==t&&2!==t)},te=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},ne=function(e){var t=e.parents(".mCSB_container");return[e.offset().top-t.offset().top,e.offset().left-t.offset().left]},ae=function(){var e=function(){var e=["webkit","moz","ms","o"];if("hidden"in document)return"hidden";for(var t=0;t<e.length;t++)if(e[t]+"Hidden"in document)return e[t]+"Hidden";return null}();return!!e&&document[e]},t.fn[r]=function(e){return c[e]?c[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void t.error("Method "+e+" does not exist"):c.init.apply(this,arguments)},t[r]=function(e){return c[e]?c[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void t.error("Method "+e+" does not exist"):c.init.apply(this,arguments)},t[r].defaults=i,window[r]=!0,t(window).bind("load",(function(){t(".mCustomScrollbar")[r](),t.extend(t.expr[":"],{mcsInView:t.expr[":"].mcsInView||function(e){var n,a,r=t(e),i=r.parents(".mCSB_container");if(i.length)return n=i.parent(),(a=[i[0].offsetTop,i[0].offsetLeft])[0]+ne(r)[0]>=0&&a[0]+ne(r)[0]<n.height()-r.outerHeight(!1)&&a[1]+ne(r)[1]>=0&&a[1]+ne(r)[1]<n.width()-r.outerWidth(!1)},mcsInSight:t.expr[":"].mcsInSight||function(e,n,a){var r,i,s,o,d=t(e),l=d.parents(".mCSB_container"),u="exact"===a[3]?[[1,0],[1,0]]:[[.9,.1],[.6,.4]];if(l.length)return r=[d.outerHeight(!1),d.outerWidth(!1)],s=[l[0].offsetTop+ne(d)[0],l[0].offsetLeft+ne(d)[1]],i=[l.parent()[0].offsetHeight,l.parent()[0].offsetWidth],s[0]-i[0]*(o=[r[0]<i[0]?u[0]:u[1],r[1]<i[1]?u[0]:u[1]])[0][0]<0&&s[0]+r[0]-i[0]*o[0][1]>=0&&s[1]-i[1]*o[1][0]<0&&s[1]+r[1]-i[1]*o[1][1]>=0},mcsOverflow:t.expr[":"].mcsOverflow||function(e){var n=t(e).data("mCS");if(n)return n.overflowed[0]||n.overflowed[1]}})}))})?a.apply(t,r):a)||(e.exports=i)},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var a={"./af":8,"./af.js":8,"./ar":9,"./ar-dz":10,"./ar-dz.js":10,"./ar-kw":11,"./ar-kw.js":11,"./ar-ly":12,"./ar-ly.js":12,"./ar-ma":13,"./ar-ma.js":13,"./ar-sa":14,"./ar-sa.js":14,"./ar-tn":15,"./ar-tn.js":15,"./ar.js":9,"./az":16,"./az.js":16,"./be":17,"./be.js":17,"./bg":18,"./bg.js":18,"./bm":19,"./bm.js":19,"./bn":20,"./bn-bd":21,"./bn-bd.js":21,"./bn.js":20,"./bo":22,"./bo.js":22,"./br":23,"./br.js":23,"./bs":24,"./bs.js":24,"./ca":25,"./ca.js":25,"./cs":26,"./cs.js":26,"./cv":27,"./cv.js":27,"./cy":28,"./cy.js":28,"./da":29,"./da.js":29,"./de":30,"./de-at":31,"./de-at.js":31,"./de-ch":32,"./de-ch.js":32,"./de.js":30,"./dv":33,"./dv.js":33,"./el":34,"./el.js":34,"./en-au":35,"./en-au.js":35,"./en-ca":36,"./en-ca.js":36,"./en-gb":37,"./en-gb.js":37,"./en-ie":38,"./en-ie.js":38,"./en-il":39,"./en-il.js":39,"./en-in":40,"./en-in.js":40,"./en-nz":41,"./en-nz.js":41,"./en-sg":42,"./en-sg.js":42,"./eo":43,"./eo.js":43,"./es":44,"./es-do":45,"./es-do.js":45,"./es-mx":46,"./es-mx.js":46,"./es-us":47,"./es-us.js":47,"./es.js":44,"./et":48,"./et.js":48,"./eu":49,"./eu.js":49,"./fa":50,"./fa.js":50,"./fi":51,"./fi.js":51,"./fil":52,"./fil.js":52,"./fo":53,"./fo.js":53,"./fr":54,"./fr-ca":55,"./fr-ca.js":55,"./fr-ch":56,"./fr-ch.js":56,"./fr.js":54,"./fy":57,"./fy.js":57,"./ga":58,"./ga.js":58,"./gd":59,"./gd.js":59,"./gl":60,"./gl.js":60,"./gom-deva":61,"./gom-deva.js":61,"./gom-latn":62,"./gom-latn.js":62,"./gu":63,"./gu.js":63,"./he":64,"./he.js":64,"./hi":65,"./hi.js":65,"./hr":66,"./hr.js":66,"./hu":67,"./hu.js":67,"./hy-am":68,"./hy-am.js":68,"./id":69,"./id.js":69,"./is":70,"./is.js":70,"./it":71,"./it-ch":72,"./it-ch.js":72,"./it.js":71,"./ja":73,"./ja.js":73,"./jv":74,"./jv.js":74,"./ka":75,"./ka.js":75,"./kk":76,"./kk.js":76,"./km":77,"./km.js":77,"./kn":78,"./kn.js":78,"./ko":79,"./ko.js":79,"./ku":80,"./ku.js":80,"./ky":81,"./ky.js":81,"./lb":82,"./lb.js":82,"./lo":83,"./lo.js":83,"./lt":84,"./lt.js":84,"./lv":85,"./lv.js":85,"./me":86,"./me.js":86,"./mi":87,"./mi.js":87,"./mk":88,"./mk.js":88,"./ml":89,"./ml.js":89,"./mn":90,"./mn.js":90,"./mr":91,"./mr.js":91,"./ms":92,"./ms-my":93,"./ms-my.js":93,"./ms.js":92,"./mt":94,"./mt.js":94,"./my":95,"./my.js":95,"./nb":96,"./nb.js":96,"./ne":97,"./ne.js":97,"./nl":98,"./nl-be":99,"./nl-be.js":99,"./nl.js":98,"./nn":100,"./nn.js":100,"./oc-lnc":101,"./oc-lnc.js":101,"./pa-in":102,"./pa-in.js":102,"./pl":103,"./pl.js":103,"./pt":104,"./pt-br":105,"./pt-br.js":105,"./pt.js":104,"./ro":106,"./ro.js":106,"./ru":107,"./ru.js":107,"./sd":108,"./sd.js":108,"./se":109,"./se.js":109,"./si":110,"./si.js":110,"./sk":111,"./sk.js":111,"./sl":112,"./sl.js":112,"./sq":113,"./sq.js":113,"./sr":114,"./sr-cyrl":115,"./sr-cyrl.js":115,"./sr.js":114,"./ss":116,"./ss.js":116,"./sv":117,"./sv.js":117,"./sw":118,"./sw.js":118,"./ta":119,"./ta.js":119,"./te":120,"./te.js":120,"./tet":121,"./tet.js":121,"./tg":122,"./tg.js":122,"./th":123,"./th.js":123,"./tk":124,"./tk.js":124,"./tl-ph":125,"./tl-ph.js":125,"./tlh":126,"./tlh.js":126,"./tr":127,"./tr.js":127,"./tzl":128,"./tzl.js":128,"./tzm":129,"./tzm-latn":130,"./tzm-latn.js":130,"./tzm.js":129,"./ug-cn":131,"./ug-cn.js":131,"./uk":132,"./uk.js":132,"./ur":133,"./ur.js":133,"./uz":134,"./uz-latn":135,"./uz-latn.js":135,"./uz.js":134,"./vi":136,"./vi.js":136,"./x-pseudo":137,"./x-pseudo.js":137,"./yo":138,"./yo.js":138,"./zh-cn":139,"./zh-cn.js":139,"./zh-hk":140,"./zh-hk.js":140,"./zh-mo":141,"./zh-mo.js":141,"./zh-tw":142,"./zh-tw.js":142};function r(e){var t=i(e);return n(t)}function i(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=i,e.exports=r,r.id=156},function(e,t,n){!function(t,n){"use strict";var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();var r,i=!1,s=void 0!==t;s&&t.getComputedStyle?(r=n.createElement("div"),["","-webkit-","-moz-","-ms-"].some((function(e){try{r.style.position=e+"sticky"}catch(e){}return""!=r.style.position}))&&(i=!0)):i=!0;var o=!1,d="undefined"!=typeof ShadowRoot,l={top:null,left:null},u=[];function c(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}function m(e){return parseFloat(e)||0}function f(e){for(var t=0;e;)t+=e.offsetTop,e=e.offsetParent;return t}var h=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t instanceof HTMLElement))throw new Error("First argument must be HTMLElement");if(u.some((function(e){return e._node===t})))throw new Error("Stickyfill is already applied to this node");this._node=t,this._stickyMode=null,this._active=!1,u.push(this),this.refresh()}return a(e,[{key:"refresh",value:function(){if(!i&&!this._removed){this._active&&this._deactivate();var e=this._node,a=getComputedStyle(e),r={position:a.position,top:a.top,display:a.display,marginTop:a.marginTop,marginBottom:a.marginBottom,marginLeft:a.marginLeft,marginRight:a.marginRight,cssFloat:a.cssFloat};if(!isNaN(parseFloat(r.top))&&"table-cell"!=r.display&&"none"!=r.display){this._active=!0;var s=e.style.position;"sticky"!=a.position&&"-webkit-sticky"!=a.position||(e.style.position="static");var o=e.parentNode,l=d&&o instanceof ShadowRoot?o.host:o,u=e.getBoundingClientRect(),h=l.getBoundingClientRect(),_=getComputedStyle(l);this._parent={node:l,styles:{position:l.style.position},offsetHeight:l.offsetHeight},this._offsetToWindow={left:u.left,right:n.documentElement.clientWidth-u.right},this._offsetToParent={top:u.top-h.top-m(_.borderTopWidth),left:u.left-h.left-m(_.borderLeftWidth),right:-u.right+h.right-m(_.borderRightWidth)},this._styles={position:s,top:e.style.top,bottom:e.style.bottom,left:e.style.left,right:e.style.right,width:e.style.width,marginTop:e.style.marginTop,marginLeft:e.style.marginLeft,marginRight:e.style.marginRight};var p=m(r.top);this._limits={start:u.top+t.pageYOffset-p,end:h.top+t.pageYOffset+l.offsetHeight-m(_.borderBottomWidth)-e.offsetHeight-p-m(r.marginBottom)};var y=_.position;"absolute"!=y&&"relative"!=y&&(l.style.position="relative"),this._recalcPosition();var g=this._clone={};g.node=n.createElement("div"),c(g.node.style,{width:u.right-u.left+"px",height:u.bottom-u.top+"px",marginTop:r.marginTop,marginBottom:r.marginBottom,marginLeft:r.marginLeft,marginRight:r.marginRight,cssFloat:r.cssFloat,padding:0,border:0,borderSpacing:0,fontSize:"1em",position:"static"}),o.insertBefore(g.node,e),g.docOffsetTop=f(g.node)}}}},{key:"_recalcPosition",value:function(){if(this._active&&!this._removed){var e=l.top<=this._limits.start?"start":l.top>=this._limits.end?"end":"middle";if(this._stickyMode!=e){switch(e){case"start":c(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:this._offsetToParent.top+"px",bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"middle":c(this._node.style,{position:"fixed",left:this._offsetToWindow.left+"px",right:this._offsetToWindow.right+"px",top:this._styles.top,bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"end":c(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:"auto",bottom:0,width:"auto",marginLeft:0,marginRight:0})}this._stickyMode=e}}}},{key:"_fastCheck",value:function(){this._active&&!this._removed&&(Math.abs(f(this._clone.node)-this._clone.docOffsetTop)>1||Math.abs(this._parent.node.offsetHeight-this._parent.offsetHeight)>1)&&this.refresh()}},{key:"_deactivate",value:function(){var e=this;this._active&&!this._removed&&(this._clone.node.parentNode.removeChild(this._clone.node),delete this._clone,c(this._node.style,this._styles),delete this._styles,u.some((function(t){return t!==e&&t._parent&&t._parent.node===e._parent.node}))||c(this._parent.node.style,this._parent.styles),delete this._parent,this._stickyMode=null,this._active=!1,delete this._offsetToWindow,delete this._offsetToParent,delete this._limits)}},{key:"remove",value:function(){var e=this;this._deactivate(),u.some((function(t,n){if(t._node===e._node)return u.splice(n,1),!0})),this._removed=!0}}]),e}(),_={stickies:u,Sticky:h,forceSticky:function(){i=!1,p(),this.refreshAll()},addOne:function(e){if(!(e instanceof HTMLElement)){if(!e.length||!e[0])return;e=e[0]}for(var t=0;t<u.length;t++)if(u[t]._node===e)return u[t];return new h(e)},add:function(e){if(e instanceof HTMLElement&&(e=[e]),e.length){for(var t=[],n=function(n){var a=e[n];return a instanceof HTMLElement?u.some((function(e){if(e._node===a)return t.push(e),!0}))?"continue":void t.push(new h(a)):(t.push(void 0),"continue")},a=0;a<e.length;a++)n(a);return t}},refreshAll:function(){u.forEach((function(e){return e.refresh()}))},removeOne:function(e){if(!(e instanceof HTMLElement)){if(!e.length||!e[0])return;e=e[0]}u.some((function(t){if(t._node===e)return t.remove(),!0}))},remove:function(e){if(e instanceof HTMLElement&&(e=[e]),e.length)for(var t=function(t){var n=e[t];u.some((function(e){if(e._node===n)return e.remove(),!0}))},n=0;n<e.length;n++)t(n)},removeAll:function(){for(;u.length;)u[0].remove()}};function p(){if(!o){o=!0,i(),t.addEventListener("scroll",i),t.addEventListener("resize",_.refreshAll),t.addEventListener("orientationchange",_.refreshAll);var e=void 0,a=void 0,r=void 0;"hidden"in n?(a="hidden",r="visibilitychange"):"webkitHidden"in n&&(a="webkitHidden",r="webkitvisibilitychange"),r?(n[a]||s(),n.addEventListener(r,(function(){n[a]?clearInterval(e):s()}))):s()}function i(){t.pageXOffset!=l.left?(l.top=t.pageYOffset,l.left=t.pageXOffset,_.refreshAll()):t.pageYOffset!=l.top&&(l.top=t.pageYOffset,l.left=t.pageXOffset,u.forEach((function(e){return e._recalcPosition()})))}function s(){e=setInterval((function(){u.forEach((function(e){return e._fastCheck()}))}),500)}}i||p(),e.exports?e.exports=_:s&&(t.Stickyfill=_)}(window,document)},function(e,t){$(document).on("click","[data-menu-click]",(function(e){e.preventDefault(),e.stopPropagation();var t=$(this),n=t.attr("data-menu-click"),a=t.closest(".js_menu_parent"),r='[data-menu="'+n+'"]',i=a.find(r),s=$("body").attr("data-js-anim"),o=window.localStorage;if(-1!=s.indexOf("anim"))var d=300;t.hasClass("is_active")?(o.removeItem("stateMenu"),t.removeClass("is_active"),i.removeClass("is_active"),a.removeClass("navbar_close"),console.log("open")):(o.setItem("stateMenu","navbar_close"),t.addClass("is_active"),i.addClass("is_active"),-1!=s.indexOf("anim")?setTimeout((function(){a.addClass("navbar_close")}),d):a.addClass("navbar_close"),console.log("close"))})),$(".js_navbar_parent").mCustomScrollbar({scrollbarPosition:"outside",scrollInertia:100,callbacks:{whileScrolling:function(){if(this.classList.contains("js_filter")){var e=document.querySelector(".js_filter_fixed");document.querySelector(".js_filter_fixed_cover").offsetTop<=-this.mcs.top?(this.style.paddingTop="45px",e.classList.add("js_fixed")):(e.classList.remove("js_fixed"),this.style.paddingTop="20px")}}}}),$(document).on("click",".js_close_navbar",(function(){$("[data-menu-click]").trigger("click")}))},function(e,t){$(document).on("click","[data-navbar-click]",(function(e){if(e.preventDefault(),e.stopPropagation(),$(this).hasClass("nav__arrow"))var t=$(this),n=t.closest(".nav__link"),a=t.attr("data-navbar-click");else a=(n=$(this)).attr("data-navbar-click");var r=n.closest(".js_navbar_item"),i=n.closest(".js_navbar_parent"),s=n.closest(".nav__ul"),o='[data-navbar="'+a+'"]',d=s.find(o),l=$("body").attr("data-js-anim");if(i.hasClass("js_toggle")){var u=s.find("[data-navbar]"),c=s.find(".js_navbar_item");if($(this).hasClass("nav__arrow"))var m=s.find(".nav__link");else m=s.find("[data-navbar-click]")}if(-1!=l.indexOf("anim"))var f=300;-1!=l.indexOf("anim")?n.hasClass("is_active")?(n.removeClass("is_active"),r.removeClass("is_active"),d.slideUp(f,(function(){$(this).removeClass("is_active").removeAttr("style")}))):(i.hasClass("js_toggle")&&(m.removeClass("is_active"),c.removeClass("is_active"),u.slideUp(f,(function(){$(this).removeClass("is_active").removeAttr("style")}))),n.addClass("is_active"),r.addClass("is_active"),d.slideDown(f,(function(){$(this).addClass("is_active").removeAttr("style")}))):n.hasClass("is_active")?(n.removeClass("is_active"),r.removeClass("is_active"),d.removeClass("is_active")):(i.hasClass("js_toggle")&&(m.removeClass("is_active"),c.removeClass("is_active"),u.removeClass("is_active")),n.addClass("is_active"),r.addClass("is_active"),d.addClass("is_active"))}))},function(e,t,n){"use strict";n.r(t);var a=n(1);$(document).on("click","[data-modalka-click]",(function(e){var t=$(this).attr("data-modalka-click"),n=$('[data-modalka="'+t+'"]');$("body").attr("data-js-anim");0!=n.length?n.hasClass("is_active")||(n.addClass("is_active"),Object(a.default)()):$(document).ajaxComplete((function(){var e=$('[data-modalka="'+t+'"]');e.hasClass("is_active")||(e.addClass("is_active"),Object(a.default)())}))})),$(document).on("click",".modalka__close, .modalka__overlay, .modalka__cancel",(function(e){var t=$(this).closest("[data-modalka]");t.removeClass("is_active"),0!=t.find("#photo_frame").length&&($("#photo").imgAreaSelect().remove(),$("#crop_wrapper").empty(),$("#crop_outer").empty())}))},function(e,t,n){function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}$(document).on("mouseenter",".tables__link",(function(){var e=$(this),t=e.attr("data-hover"),n=e.closest(".tables__tr"),r=n.attr("data-tr-href");n.addClass(t),"undefined"!==a(r)&&!1!==r&&(n.attr("data-tr-href-memory",r),n.removeAttr("data-tr-href"))})),$(document).on("mouseleave",".tables__link",(function(){var e=$(this),t=e.attr("data-hover"),n=e.closest(".tables__tr");tablesLinkTrHref=n.attr("data-tr-href-memory"),n.removeClass(t),"undefined"!==("undefined"==typeof tablesLinkTrHref?"undefined":a(tablesLinkTrHref))&&!1!==tablesLinkTrHref&&(n.attr("data-tr-href",tablesLinkTrHref),n.removeAttr("data-tr-href-memory"))})),$(document).on("mouseup","[data-tr-href]",(function(e){var t=$(this),n=t.attr("data-tr-href"),a=t.attr("data-tr-target");return""!=n&&("_blank"==a?(window.open(n),!1):1==e.which?(window.location.href=n,!1):2==e.which&&(window.open(n),!1))}))},function(e,t){$(document).on("click","[data-anchor-click]",(function(){var e=$(this),t=$("[data-anchor-click]");if($elAnchor=e.attr("data-anchor-click"),anchor=$('[data-anchor="'+$elAnchor+'"]'),anchorAll=$("[data-anchor]"),anchorPosTop=anchor.position().top,jsAnim=$("body").attr("data-js-anim"),!e.hasClass("is_active"))return t.removeClass("is_active"),e.addClass("is_active"),anchorAll.removeClass("is_active"),anchor.addClass("is_active"),-1!=jsAnim.indexOf("anim")?$(".must_scrolltop").animate({scrollTop:anchorPosTop}):$(".must_scrolltop").scrollTop(anchorPosTop),!1}))},function(e,t,n){function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(){var e=$(".tabs:visible"),t="";$.each(e,(function(e,n){t+="!"+e+"-"+$(n).find(".tabs__a.is_active").attr("data-tabs-click")})),window.location.hash=t}$(document).on("ready",(function(){activeTabs()})),$(document).on("click","[data-tabs-click]",(function(){var e=$(this),t=e.attr("data-tab-id"),n=e.attr("data-tabs-click"),i=e.closest(".tabs__li"),s=e.closest(".tabs"),o=(s.index(".tabs"),'[data-tabs="'+n+'"]'),d=s.find(o).not(s.find(".tabs [data-tabs]")),l=$(".actions__list");0!=l.find("[data-tabs]").length&&(openActionsBlockAll=l.find("[data-tabs]"),openActionsBlock=l.find('[data-tabs="'+n+'"]')),clickAll=s.find(".tabs__a").not(s.find(".tabs .tabs__a")),clickLiAll=s.find(".tabs__li:not([data-tabs])").not(s.find(".tabs .tabs__li")),openBlockAll=s.find("[data-tabs]").not(s.find(".tabs [data-tabs]")),jsAnim=$(".body").attr("data-js-anim"),-1!=jsAnim.indexOf("anim")&&(dur=300),"undefined"!==a(t)&&!1!==t&&(TAB_ID=parseInt(t)),e.hasClass("is_active")||(clickAll.removeClass("is_active"),e.addClass("is_active"),clickLiAll.removeClass("is_active"),i.addClass("is_active"),-1!=jsAnim.indexOf("anim")?(openBlockAll.stop().slideUp(dur,(function(){$(this).removeClass("is_active").removeAttr("style")})),d.stop().slideDown(dur,(function(){$(this).addClass("is_active").removeAttr("style"),r()}))):(openBlockAll.removeClass("is_active"),d.addClass("is_active"),r()),0!=l.find("[data-tabs]").length&&(openActionsBlockAll.removeClass("is_active"),openActionsBlock.addClass("is_active")))})),window.activeTabs=function(){var e=$(".tabs"),t=window.location.hash.substr(2);if(""!=t)for(var n=t.split("!"),a=0;a<n.length;a++)key=n[a].split("-"),activeA=$(e[key[0]]).find('[data-tabs-click="'+key[1]+'"]').eq(0),activeLi=activeA.closest(".tabs__li"),activeBlock=$(e[key[0]]).find('[data-tabs="'+key[1]+'"]').not($(e[key[0]]).find(".tabs [data-tabs]")),0!=activeA.length?(activeA.addClass("is_active"),activeLi.addClass("is_active"),activeBlock.addClass("is_active"),TAB_ID=parseInt(activeA.attr("data-tab-id")),0!=$(".actions__item[data-tabs]").length&&$('.actions__item[data-tabs="'+key[1]+'"]').addClass("is_active")):e.each((function(){var e=$(this),t=e.find("[data-tabs-click].is_active"),n=e.find(".tabs__li:not([data-tabs])").eq(0),a=n.find(".tabs__a"),i='[data-tabs="'+a.attr("data-tabs-click")+'"]',s=e.find(i).eq(0);0==t.length&&(n.addClass("is_active"),a.addClass("is_active"),s.addClass("is_active"),TAB_ID=parseInt(a.attr("data-tab-id")),0!=$(".actions__item[data-tabs]").length&&$(".actions__item[data-tabs]").eq(0).addClass("is_active"),r())}));else e.each((function(){var e=$(this),t=e.find("[data-tabs-click].is_active"),n=e.find(".tabs__li:not([data-tabs])").eq(0),a=n.find(".tabs__a"),i='[data-tabs="'+(o=a.attr("data-tabs-click"))+'"]',s=e.find(i);if(0==t.length){n.addClass("is_active"),a.addClass("is_active"),s.addClass("is_active");var o=a.attr("data-tabs-click");TAB_ID=parseInt(a.attr("data-tab-id")),0!=$(".actions__item[data-tabs]").length&&$('.actions__item[data-tabs="'+o+'"]').addClass("is_active"),r()}else console.log("Есть активный таб => ",t)}))}},function(e,t){$(document).on("change",".js_change_checkbox",(function(){var e=$(this).is(":checked")?1:0,t=$(this).attr("data-click");console.log(t),1==e?$('.js_checkbox__block[data-block= "'+t+'"]').slideDown(400,(function(e){$(this).addClass("is_active")})):$('.js_checkbox__block[data-block= "'+t+'"]').slideUp(400,(function(e){$(this).removeClass("is_active")}))}))},function(e,t){$(document).on("click",".js_link_toogle",(function(){var e=$(this).attr("data-toggle"),t=$('.js_block_toggle[data-toggle-block = "'+e+'"]');$(this).hasClass("js_active")?$(this).parent(".tables")?($(this).removeClass("js_active"),t.addClass("css_hidden")):($(this).removeClass("js_active"),t.slideUp(400,(function(e){$(this).addClass("css_hidden")}))):$(this).parent(".tables")?($(".js_link_toogle").removeClass("js_active"),$(".js_block_toggle").addClass("css_hidden"),$(this).addClass("js_active"),t.removeClass("css_hidden")):($(this).addClass("js_active"),t.slideDown(400,(function(e){$(this).removeClass("css_hidden")})))})),$(document).on("click",".js_link_toogle_new",(function(){var e=$(this).attr("data-toggle"),t=$('.js_block_toggle_new[data-toggle-block = "'+e+'"]'),n=$(this).parents(".js_parent_toggle").first();$(this).hasClass("js_active")?($(this).removeClass("js_active"),t.slideUp(400,(function(e){$(this).addClass("css_hidden")}))):(n.find(".js_link_toogle_new").removeClass("js_active"),n.find(".js_block_toggle_new").slideUp(400,(function(e){$(this).addClass("css_hidden")})),$(this).addClass("js_active"),t.slideDown(400,(function(e){$(this).removeClass("css_hidden")})))}))},function(e,t){$(document).ready((function(){$(".js_main_scroll").mCustomScrollbar({axis:"x",scrollInertia:1e3,scrollbarPosition:"outside",scrollEasing:"linear",theme:"dark-2",mouseWheel:"auto",scrollButtons:{enable:!0,scrollAmount:50,scrollType:"stepless",tabindex:200},advanced:{updateOnImageLoad:!1,autoExpandHorizontalScroll:!0,updateOnBrowserResize:!0,updateOnContentResize:!0},callbacks:{onInit:function(){$(".main__scrollbar .mCSB_buttonLeft").addClass("js_hidden"),$(".main__scrollbar .mCSB_buttonRight").removeClass("js_hidden")},onScrollStart:function(){$(".main__scrollbar .mCSB_buttonLeft").removeClass("js_hidden"),$(".main__scrollbar .mCSB_buttonRight").removeClass("js_hidden")},onTotalScrollBack:function(){$(".main__scrollbar .mCSB_buttonLeft").addClass("js_hidden")},onTotalScroll:function(){$(".main__scrollbar .mCSB_buttonRight").addClass("js_hidden")}}})})),window.globalScrollNew=function(){$(".js_main_scrollNew").mCustomScrollbar({axis:"x",scrollInertia:1e3,scrollbarPosition:"outside",scrollEasing:"linear",theme:"dark-2",mouseWheel:"auto",scrollButtons:{enable:!0,scrollAmount:50,scrollType:"stepless",tabindex:200},advanced:{updateOnImageLoad:!1,autoExpandHorizontalScroll:!0,updateOnBrowserResize:!0,updateOnContentResize:!0},callbacks:{onInit:function(){$(".main__scrollbar .mCSB_buttonLeft").addClass("js_hidden"),$(".main__scrollbar .mCSB_buttonRight").removeClass("js_hidden")},onScrollStart:function(){$(".main__scrollbar .mCSB_buttonLeft").removeClass("js_hidden"),$(".main__scrollbar .mCSB_buttonRight").removeClass("js_hidden")},onTotalScrollBack:function(){$(".main__scrollbar .mCSB_buttonLeft").addClass("js_hidden")},onTotalScroll:function(){$(".main__scrollbar .mCSB_buttonRight").addClass("js_hidden")}}})},globalScrollNew(),$(window).on("resize load",(function(){}))},function(e,t){window.onload=function(){var e=$(".card_fixed").outerHeight();console.log(1),console.log(e),$("*").is(".card_fixed")?$(".fixtable th").css("top",e):$(".fixtable th").css("top",0)}},function(e,t){$(document).on("click",".js_filter_open",(function(){$(".js_filter").addClass("js_active"),$(".main__holder").addClass("js_notoverflow"),$(".js_filters_overlay").addClass("js_active"),$(".js_filter_close").removeClass("css_hidden")})),$(document).on("click",".js_filters_overlay, .js_filter_close",(function(){$(".js_filter").removeClass("js_active"),$(".main__holder").removeClass("js_notoverflow"),$(".js_filters_overlay").removeClass("js_active"),$(".js_filter_close").addClass("css_hidden")}))},function(e,t){$(document).on("keypress",".js_search_enter",(function(e){"13"==(e.keyCode?e.keyCode:e.which)&&""!=$(this).val()&&$(this).parents(".js_search_parent").find("button").trigger("click")}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
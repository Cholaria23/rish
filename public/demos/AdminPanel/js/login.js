!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=147)}({1:function(e,t,n){"use strict";n.r(t),$(document).on("blur",".input__field",(function(){var e=$(this),t=e.closest(".input__row");""!=e.val()?t.addClass("is_focus"):t.removeClass("is_focus")})),$(document).on("focus paste change input",".input__field",(function(){var e=$(this).closest(".input__row");e.hasClass("is_focus")||e.addClass("is_focus")})),t.default=function(){$(".js_for_focus").each((function(){var e=$(this);e.is(":visible")&&e.find(".input__row").eq(0).find(".input__field").focus()}))}},147:function(e,t,n){e.exports=n(148)},148:function(e,t,n){n(3),window.$=window.jQuery=n(2);window.Swal=n(4);n(1),n(5)},2:function(e,t,n){var r;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,o){"use strict";var i=[],a=Object.getPrototypeOf,s=i.slice,u=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},c=i.push,l=i.indexOf,f={},d=f.toString,p=f.hasOwnProperty,h=p.toString,g=h.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},b=n.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,o,i=(n=n||b).createElement("script");if(i.text=e,t)for(r in x)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[d.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)};function k(e){var t=!!e&&"length"in e&&e.length,n=C(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.5.1",constructor:T,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(T.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},T.extend=T.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(T.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||T.isPlainObject(n)?n:{},o=!1,a[t]=T.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},T.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=a(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&h.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(k(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(k(Object(e))?T.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(k(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return u(a)},guid:1,support:m}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=i[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var S=function(e){var t,n,r,o,i,a,s,u,c,l,f,d,p,h,g,m,v,y,b,x="sizzle"+1*new Date,w=e.document,C=0,T=0,k=ue(),S=ue(),E=ue(),A=ue(),j=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,D=[],L=D.pop,q=D.push,O=D.push,P=D.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+M+"*\\]",_=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",W=new RegExp(M+"+","g"),$=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),F=new RegExp("^"+M+"*,"+M+"*"),V=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp(M+"|>"),U=new RegExp(_),X=new RegExp("^"+R+"$"),Y={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+B+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){d()},ae=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(D=P.call(w.childNodes),w.childNodes),D[w.childNodes.length].nodeType}catch(e){O={apply:D.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,o){var i,s,c,l,f,h,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return r;if(!o&&(d(t),t=t||p,g)){if(11!==w&&(f=Z.exec(e)))if(i=f[1]){if(9===w){if(!(c=t.getElementById(i)))return r;if(c.id===i)return r.push(c),r}else if(y&&(c=y.getElementById(i))&&b(t,c)&&c.id===i)return r.push(c),r}else{if(f[2])return O.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!A[e+" "]&&(!m||!m.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===w&&(z.test(e)||V.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((l=t.getAttribute("id"))?l=l.replace(re,oe):t.setAttribute("id",l=x)),s=(h=a(e)).length;s--;)h[s]=(l?"#"+l:":scope")+" "+be(h[s]);v=h.join(",")}try{return O.apply(r,y.querySelectorAll(v)),r}catch(t){A(e,!0)}finally{l===x&&t.removeAttribute("id")}}}return u(e.replace($,"$1"),t,r,o)}function ue(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[x]=!0,e}function le(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ce((function(t){return t=+t,ce((function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},d=se.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:w;return a!=p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,g=!i(p),w!=p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.scope=le((function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=le((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=le((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=le((function(e){return h.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=J.test(p.querySelectorAll))&&(le((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+B+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),le((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&le((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",_)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==w&&b(w,e)?-1:t==p||t.ownerDocument==w&&b(w,t)?1:l?H(l,e)-H(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],s=[t];if(!o||!i)return e==p?-1:t==p?1:o?-1:i?1:l?H(l,e)-H(l,t):0;if(o===i)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?de(a[r],s[r]):a[r]==w?-1:s[r]==w?1:0},p):p},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&g&&!A[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){A(t,!0)}return se(t,p,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=p&&d(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=p&&d(e);var o=r.attrHandle[t.toLowerCase()],i=o&&N.call(r.attrHandle,t.toLowerCase())?o(e,t,!g):void 0;return void 0!==i?i:n.attributes||!g?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(re,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(j),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return l=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ce,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&k(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=se.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(W," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,p,h,g=i!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!u&&!s,b=!1;if(m){if(i){for(;g;){for(d=t;d=d[g];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(b=(p=(c=(l=(f=(d=m)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){l[e]=[C,p,b];break}}else if(y&&(b=p=(c=(l=(f=(d=t)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===b)for(;(d=++p&&d&&d[g]||(b=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((l=(f=d[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[C,b]),d!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=H(e,i[a])]=!(n[r]=i[a])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace($,"$1"));return r[x]?ce((function(e,t,n,o){for(var i,a=r(e,null,o,[]),s=e.length;s--;)(i=a[s])&&(e[s]=!(t[s]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return X.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,s=T++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,u){var c,l,f,d=[C,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=(f=t[x]||(t[x]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[i])&&c[0]===C&&c[1]===s)return d[2]=c[2];if(l[i]=d,d[2]=e(t,n,u))return!0}return!1}}function we(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function Ce(e,t,n,r,o){for(var i,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),c&&t.push(s)));return a}function Te(e,t,n,r,o,i){return r&&!r[x]&&(r=Te(r)),o&&!o[x]&&(o=Te(o,i)),ce((function(i,a,s,u){var c,l,f,d=[],p=[],h=a.length,g=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!i&&t?g:Ce(g,d,e,s,u),v=n?o||(i?e:h||r)?[]:a:m;if(n&&n(m,v,s,u),r)for(c=Ce(v,p),r(c,[],s,u),l=c.length;l--;)(f=c[l])&&(v[p[l]]=!(m[p[l]]=f));if(i){if(o||e){if(o){for(c=[],l=v.length;l--;)(f=v[l])&&c.push(m[l]=f);o(null,v=[],c,u)}for(l=v.length;l--;)(f=v[l])&&(c=o?H(i,f):d[l])>-1&&(i[c]=!(a[c]=f))}}else v=Ce(v===a?v.splice(h,v.length):v),o?o(null,a,v,u):O.apply(a,v)}))}function ke(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,l=xe((function(e){return e===t}),s,!0),f=xe((function(e){return H(t,e)>-1}),s,!0),d=[function(e,n,r){var o=!a&&(r||n!==c)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,o}];u<i;u++)if(n=r.relative[e[u].type])d=[xe(we(d),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[x]){for(o=++u;o<i&&!r.relative[e[o].type];o++);return Te(u>1&&we(d),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace($,"$1"),n,u<o&&ke(e.slice(u,o)),o<i&&ke(e=e.slice(o)),o<i&&be(e))}d.push(n)}return we(d)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=se.tokenize=function(e,t){var n,o,i,a,s,u,c,l=S[e+" "];if(l)return t?0:l.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(o=F.exec(s))||(o&&(s=s.slice(o[0].length)||s),u.push(i=[])),n=!1,(o=V.exec(s))&&(n=o.shift(),i.push({value:n,type:o[0].replace($," ")}),s=s.slice(n.length)),r.filter)!(o=Y[a].exec(s))||c[a]&&!(o=c[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):S(e,u).slice(0)},s=se.compile=function(e,t){var n,o=[],i=[],s=E[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=ke(t[n]))[x]?o.push(s):i.push(s);(s=E(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,s,u,l){var f,h,m,v=0,y="0",b=i&&[],x=[],w=c,T=i||o&&r.find.TAG("*",l),k=C+=null==w?1:Math.random()||.1,S=T.length;for(l&&(c=a==p||a||l);y!==S&&null!=(f=T[y]);y++){if(o&&f){for(h=0,a||f.ownerDocument==p||(d(f),s=!g);m=e[h++];)if(m(f,a||p,s)){u.push(f);break}l&&(C=k)}n&&((f=!m&&f)&&v--,i&&b.push(f))}if(v+=y,n&&y!==v){for(h=0;m=t[h++];)m(b,x,a,s);if(i){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=L.call(u));x=Ce(x)}O.apply(u,x),l&&!i&&x.length>0&&v+t.length>1&&se.uniqueSort(u)}return l&&(C=k,c=w),b};return n?ce(i):i}(i,o))).selector=e}return s},u=se.select=function(e,t,n,o){var i,u,c,l,f,d="function"==typeof e&&e,p=!o&&a(e=d.selector||e);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(i=Y.needsContext.test(e)?0:u.length;i--&&(c=u[i],!r.relative[l=c.type]);)if((f=r.find[l])&&(o=f(c.matches[0].replace(te,ne),ee.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(i,1),!(e=o.length&&be(u)))return O.apply(n,o),n;break}}return(d||s(e,p))(o,t,!g,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=x.split("").sort(j).join("")===x,n.detectDuplicates=!!f,d(),n.sortDetached=le((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),le((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&le((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),le((function(e){return null==e.getAttribute("disabled")}))||fe(B,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);T.find=S,T.expr=S.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=S.uniqueSort,T.text=S.getText,T.isXMLDoc=S.isXML,T.contains=S.contains,T.escapeSelector=S.escape;var E=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&T(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},j=T.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,t,n){return v(t)?T.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?T.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?T.grep(e,(function(e){return l.call(t,e)>-1!==n})):T.filter(t,e,n)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,(function(e){return 1===e.nodeType})))},T.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(T(e).filter((function(){for(t=0;t<r;t++)if(T.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,o[t],n);return r>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&j.test(e)?T(e):e||[],!1).length}});var q,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:O.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),D.test(r[1])&&T.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=b.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,q=T(b);var P=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function B(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&T(e);if(!j.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?T.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?l.call(T(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return E(e,"parentNode")},parentsUntil:function(e,t,n){return E(e,"parentNode",n)},next:function(e){return B(e,"nextSibling")},prev:function(e){return B(e,"previousSibling")},nextAll:function(e){return E(e,"nextSibling")},prevAll:function(e){return E(e,"previousSibling")},nextUntil:function(e,t,n){return E(e,"nextSibling",n)},prevUntil:function(e,t,n){return E(e,"previousSibling",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(N(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},(function(e,t){T.fn[e]=function(n,r){var o=T.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=T.filter(r,o)),this.length>1&&(H[e]||T.uniqueSort(o),P.test(e)&&o.reverse()),this.pushStack(o)}}));var M=/[^\x20\t\r\n\f]+/g;function R(e){return e}function I(e){throw e}function _(e,t,n,r){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(M)||[],(function(e,n){t[n]=!0})),t}(e):T.extend({},e);var t,n,r,o,i=[],a=[],s=-1,u=function(){for(o=o||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(s=i.length-1,a.push(n)),function t(n){T.each(n,(function(n,r){v(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==C(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return T.each(arguments,(function(e,t){for(var n;(n=T.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?T.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return T.Deferred((function(n){T.each(t,(function(t,r){var o=v(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,o){var i=0;function a(e,t,r,o){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(e<i)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(c)?o?c.call(n,a(i,t,R,o),a(i,t,I,o)):(i++,c.call(n,a(i,t,R,o),a(i,t,I,o),a(i,t,R,t.notifyWith))):(r!==R&&(s=void 0,u=[n]),(o||t.resolveWith)(s,u))}},l=o?c:function(){try{c()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,l.stackTrace),e+1>=i&&(r!==I&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?l():(T.Deferred.getStackHook&&(l.stackTrace=T.Deferred.getStackHook()),n.setTimeout(l))}}return T.Deferred((function(n){t[0][3].add(a(0,n,v(o)?o:R,n.notifyWith)),t[1][3].add(a(0,n,v(e)?e:R)),t[2][3].add(a(0,n,v(r)?r:I))})).promise()},promise:function(e){return null!=e?T.extend(e,o):o}},i={};return T.each(t,(function(e,n){var a=n[2],s=n[5];o[n[1]]=a.add,s&&a.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=a.fireWith})),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=s.call(arguments),i=T.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?s.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(_(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||v(o[n]&&o[n].then)))return i.then();for(;n--;)_(o[n],a(n),i.reject);return i.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&W.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout((function(){throw e}))};var $=T.Deferred();function F(){b.removeEventListener("DOMContentLoaded",F),n.removeEventListener("load",F),T.ready()}T.fn.ready=function(e){return $.then(e).catch((function(e){T.readyException(e)})),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||$.resolveWith(b,[T]))}}),T.ready.then=$.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(T.ready):(b.addEventListener("DOMContentLoaded",F),n.addEventListener("load",F));var V=function(e,t,n,r,o,i,a){var s=0,u=e.length,c=null==n;if("object"===C(n))for(s in o=!0,n)V(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,v(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(T(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):u?t(e[0],n):i},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(z,"ms-").replace(U,X)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=T.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Y(t)]=n;else for(r in t)o[Y(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(M)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var K=new G,J=new G,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return J.hasData(e)||K.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=J.get(i),1===i.nodeType&&!K.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Y(r.slice(5)),te(i,r,o[r]));K.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){J.set(this,e)})):V(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=J.get(i,e))||void 0!==(n=te(i,e))?n:void 0;this.each((function(){J.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,o=n.shift(),i=T._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){T.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:T.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",n])}))})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each((function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){T.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=T.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=K.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),o.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ie=b.documentElement,ae=function(e){return T.contains(e.ownerDocument,e)},se={composed:!0};ie.getRootNode&&(ae=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===T.css(e,"display")};function ce(e,t,n,r){var o,i,a=20,s=r?function(){return r.cur()}:function(){return T.css(e,t,"")},u=s(),c=n&&n[3]||(T.cssNumber[t]?"":"px"),l=e.nodeType&&(T.cssNumber[t]||"px"!==c&&+u)&&re.exec(T.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;a--;)T.style(e,t,l+c),(1-i)*(1-(i=s()/u||.5))<=0&&(a=0),l/=i;l*=2,T.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,o=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=o)),o}var le={};function fe(e){var t,n=e.ownerDocument,r=e.nodeName,o=le[r];return o||(t=n.body.appendChild(n.createElement(r)),o=T.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),le[r]=o,o)}function de(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=K.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&ue(r)&&(o[i]=fe(r))):"none"!==n&&(o[i]="none",K.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}T.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?T(this).show():T(this).hide()}))}});var pe,he,ge=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(he=b.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),pe.appendChild(he),m.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",m.option=!!pe.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?T.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,m.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var we=/<|&#?\w+;/;function Ce(e,t,n,r,o){for(var i,a,s,u,c,l,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((i=e[p])||0===i)if("object"===C(i))T.merge(d,i.nodeType?[i]:i);else if(we.test(i)){for(a=a||f.appendChild(t.createElement("div")),s=(me.exec(i)||["",""])[1].toLowerCase(),u=ye[s]||ye._default,a.innerHTML=u[1]+T.htmlPrefilter(i)+u[2],l=u[0];l--;)a=a.lastChild;T.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(i));for(f.textContent="",p=0;i=d[p++];)if(r&&T.inArray(i,r)>-1)o&&o.push(i);else if(c=ae(i),a=be(f.appendChild(i),"script"),c&&xe(a),n)for(l=0;i=a[l++];)ve.test(i.type||"")&&n.push(i);return f}var Te=/^key/,ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Ae(){return!1}function je(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Ne(e,t,n,r,o,i){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ne(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Ae;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return T().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),e.each((function(){T.event.add(this,t,o,r,n)}))}function De(e,t,n){n?(K.set(e,t,!1),T.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=K.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(T.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),K.set(this,t,i),r=n(this,t),this[t](),i!==(o=K.get(this,t))||r?K.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else i.length&&(K.set(this,t,{value:T.event.trigger(T.extend(i[0],T.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&T.event.add(e,t,Ee)}T.event={global:{},add:function(e,t,n,r,o){var i,a,s,u,c,l,f,d,p,h,g,m=K.get(e);if(Q(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&T.find.matchesSelector(ie,o),n.guid||(n.guid=T.guid++),(u=m.events)||(u=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(M)||[""]).length;c--;)p=g=(s=Se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=T.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=T.event.special[p]||{},l=T.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&T.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,l):d.push(l),T.event.global[p]=!0)},remove:function(e,t,n,r,o){var i,a,s,u,c,l,f,d,p,h,g,m=K.hasData(e)&&K.get(e);if(m&&(u=m.events)){for(c=(t=(t||"").match(M)||[""]).length;c--;)if(p=g=(s=Se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=T.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=d.length;i--;)l=d[i],!o&&g!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(d.splice(i,1),l.selector&&d.delegateCount--,f.remove&&f.remove.call(e,l));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,m.handle)||T.removeEvent(e,p,m.handle),delete u[p])}else for(p in u)T.event.remove(e,p+t[c],n,r,!0);T.isEmptyObject(u)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,s=new Array(arguments.length),u=T.event.fix(e),c=(K.get(this,"events")||Object.create(null))[u.type]||[],l=T.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(a=T.event.handlers.call(this,u,c),t=0;(o=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==i.namespace&&!u.rnamespace.test(i.namespace)||(u.handleObj=i,u.data=i.data,void 0!==(r=((T.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,o,i,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(i=[],a={},n=0;n<u;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?T(o,this).index(c)>-1:T.find(o,this,null,[c]).length),a[o]&&i.push(r);i.length&&s.push({elem:c,handlers:i})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&N(t,"input")&&De(t,"click",Ee),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&N(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&N(t,"input")&&K.get(t,"click")||N(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Ae,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Ae,isPropagationStopped:Ae,isImmediatePropagationStopped:Ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(e,t){T.event.special[e]={setup:function(){return De(this,e,je),!1},trigger:function(){return De(this,e),!0},delegateType:t}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||T.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),T.fn.extend({on:function(e,t,n,r){return Ne(this,e,t,n,r)},one:function(e,t,n,r){return Ne(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ae),this.each((function(){T.event.remove(this,e,n,t)}))}});var Le=/<script|<style|<link/i,qe=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pe(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Be(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,o,i,a,s;if(1===t.nodeType){if(K.hasData(e)&&(s=K.get(e).events))for(o in K.remove(t,"handle events"),s)for(n=0,r=s[o].length;n<r;n++)T.event.add(t,o,s[o][n]);J.hasData(e)&&(i=J.access(e),a=T.extend({},i),J.set(t,a))}}function Re(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ie(e,t,n,r){t=u(t);var o,i,a,s,c,l,f=0,d=e.length,p=d-1,h=t[0],g=v(h);if(g||d>1&&"string"==typeof h&&!m.checkClone&&qe.test(h))return e.each((function(o){var i=e.eq(o);g&&(t[0]=h.call(this,o,i.html())),Ie(i,t,n,r)}));if(d&&(i=(o=Ce(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(s=(a=T.map(be(o,"script"),He)).length;f<d;f++)c=o,f!==p&&(c=T.clone(c,!0,!0),s&&T.merge(a,be(c,"script"))),n.call(e[f],c,f);if(s)for(l=a[a.length-1].ownerDocument,T.map(a,Be),f=0;f<s;f++)c=a[f],ve.test(c.type||"")&&!K.access(c,"globalEval")&&T.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?T._evalUrl&&!c.noModule&&T._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},l):w(c.textContent.replace(Oe,""),c,l))}return e}function _e(e,t,n){for(var r,o=t?T.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||T.cleanData(be(r)),r.parentNode&&(n&&ae(r)&&xe(be(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,a,s=e.cloneNode(!0),u=ae(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(a=be(s),r=0,o=(i=be(e)).length;r<o;r++)Re(i[r],a[r]);if(t)if(n)for(i=i||be(e),a=a||be(s),r=0,o=i.length;r<o;r++)Me(i[r],a[r]);else Me(e,s);return(a=be(s,"script")).length>0&&xe(a,!u&&be(e,"script")),s},cleanData:function(e){for(var t,n,r,o=T.event.special,i=0;void 0!==(n=e[i]);i++)if(Q(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)o[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),T.fn.extend({detach:function(e){return _e(this,e,!0)},remove:function(e){return _e(this,e)},text:function(e){return V(this,(function(e){return void 0===e?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ie(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pe(this,e).appendChild(e)}))},prepend:function(){return Ie(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Pe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ie(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ie(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return T.clone(this,e,t)}))},html:function(e){return V(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!ye[(me.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ie(this,arguments,(function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){T.fn[e]=function(e){for(var n,r=[],o=T(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),T(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var We=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),$e=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Fe=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},Ve=new RegExp(oe.join("|"),"i");function ze(e,t,n){var r,o,i,a,s=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ae(e)||(a=T.style(e,t)),!m.pixelBoxStyles()&&We.test(a)&&Ve.test(t)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",a=36===t(e.right),o=36===t(e.width),l.style.position="absolute",i=12===t(l.offsetWidth/3),ie.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,a,s,u,c=b.createElement("div"),l=b.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,T.extend(m,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,r,o;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),r=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",r.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(r),o=n.getComputedStyle(t),s=parseInt(o.height)>3,ie.removeChild(e)),s}}))}();var Xe=["Webkit","Moz","ms"],Ye=b.createElement("div").style,Qe={};function Ge(e){var t=T.cssProps[e]||Qe[e];return t||(e in Ye?e:Qe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ye)return e}(e)||e)}var Ke=/^(none|table(?!-c[ea]).+)/,Je=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var r=re.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function nt(e,t,n,r,o,i){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=T.css(e,n+oe[a],!0,o)),r?("content"===n&&(u-=T.css(e,"padding"+oe[a],!0,o)),"margin"!==n&&(u-=T.css(e,"border"+oe[a]+"Width",!0,o))):(u+=T.css(e,"padding"+oe[a],!0,o),"padding"!==n?u+=T.css(e,"border"+oe[a]+"Width",!0,o):s+=T.css(e,"border"+oe[a]+"Width",!0,o));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-u-s-.5))||0),u}function rt(e,t,n){var r=$e(e),o=(!m.boxSizingReliable()||n)&&"border-box"===T.css(e,"boxSizing",!1,r),i=o,a=ze(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(We.test(a)){if(!n)return a;a="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&N(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===T.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===T.css(e,"boxSizing",!1,r),(i=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+nt(e,t,n||(o?"border":"content"),i,r,a)+"px"}function ot(e,t,n,r,o){return new ot.prototype.init(e,t,n,r,o)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=Y(t),u=Je.test(t),c=e.style;if(u||(t=Ge(s)),a=T.cssHooks[t]||T.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:c[t];"string"===(i=typeof n)&&(o=re.exec(n))&&o[1]&&(n=ce(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||u||(n+=o&&o[3]||(T.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,i,a,s=Y(t);return Je.test(t)||(t=Ge(s)),(a=T.cssHooks[t]||T.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=ze(e,t,r)),"normal"===o&&t in et&&(o=et[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),T.each(["height","width"],(function(e,t){T.cssHooks[t]={get:function(e,n,r){if(n)return!Ke.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,r):Fe(e,Ze,(function(){return rt(e,t,r)}))},set:function(e,n,r){var o,i=$e(e),a=!m.scrollboxSize()&&"absolute"===i.position,s=(a||r)&&"border-box"===T.css(e,"boxSizing",!1,i),u=r?nt(e,t,r,s,i):0;return s&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-nt(e,t,"border",!1,i)-.5)),u&&(o=re.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),tt(0,n,u)}}})),T.cssHooks.marginLeft=Ue(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(ze(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(e,t){T.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+oe[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(T.cssHooks[e+t].set=tt)})),T.fn.extend({css:function(e,t){return V(this,(function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=$e(e),o=t.length;a<o;a++)i[t[a]]=T.css(e,t[a],!1,r);return i}return void 0!==n?T.style(e,t,n):T.css(e,t)}),e,t,arguments.length>1)}}),T.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(T.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=ot.prototype.init,T.fx.step={};var it,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function ct(){at&&(!1===b.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,T.fx.interval),T.fx.tick())}function lt(){return n.setTimeout((function(){it=void 0})),it=Date.now()}function ft(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=oe[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function dt(e,t,n){for(var r,o=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function pt(e,t,n){var r,o,i=0,a=pt.prefilters.length,s=T.Deferred().always((function(){delete u.elem})),u=function(){if(o)return!1;for(var t=it||lt(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),i=0,a=c.tweens.length;i<a;i++)c.tweens[i].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=T.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=Y(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(l,c.opts.specialEasing);i<a;i++)if(r=pt.prefilters[i].call(c,e,l,c.opts))return v(r.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return T.map(l,dt,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,o=e.length;r<o;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,s,u,c,l,f="width"in t||"height"in t,d=this,p={},h=e.style,g=e.nodeType&&ue(e),m=K.get(e,"fxshow");for(r in n.queue||(null==(a=T._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,T.queue(e,"fx").length||a.empty.fire()}))}))),t)if(o=t[r],st.test(o)){if(delete t[r],i=i||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[r])continue;g=!0}p[r]=m&&m[r]||T.style(e,r)}if((u=!T.isEmptyObject(t))||!T.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=K.get(e,"display")),"none"===(l=T.css(e,"display"))&&(c?l=c:(de([e],!0),c=e.style.display||c,l=T.css(e,"display"),de([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===T.css(e,"float")&&(u||(d.done((function(){h.display=c})),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),u=!1,p)u||(m?"hidden"in m&&(g=m.hidden):m=K.access(e,"fxshow",{display:c}),i&&(m.hidden=!g),g&&de([e],!0),d.done((function(){for(r in g||de([e]),K.remove(e,"fxshow"),p)T.style(e,r,p[r])}))),u=dt(g?m[r]:0,r,d),r in m||(m[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=T.isEmptyObject(e),i=T.speed(t,n,r),a=function(){var t=pt(this,T.extend({},e),i);(o||K.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=T.timers,a=K.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&ut.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||T.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=K.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=T.timers,a=r?r.length:0;for(n.finish=!0,T.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(e,t){var n=T.fn[t];T.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ft(t,!0),e,r,o)}})),T.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){T.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(it=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),it=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){at||(at=!0,ct())},T.fx.stop=function(){at=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ht,gt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return V(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){T.removeAttr(this,e)}))}}),T.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?T.prop(e,t,n):(1===i&&T.isXMLDoc(e)||(o=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(M);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=gt[t]||T.find.attr;gt[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=gt[a],gt[a]=o,o=null!=n(e,t,r)?a:null,gt[a]=i),o}}));var mt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function yt(e){return(e.match(M)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(M)||[]}T.fn.extend({prop:function(e,t){return V(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[T.propFix[e]||e]}))}}),T.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&T.isXMLDoc(e)||(t=T.propFix[t]||t,o=T.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(e){var t,n,r,o,i,a,s,u=0;if(v(e))return this.each((function(t){T(this).addClass(e.call(this,t,bt(this)))}));if((t=xt(e)).length)for(;n=this[u++];)if(o=bt(n),r=1===n.nodeType&&" "+yt(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(s=yt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,o,i,a,s,u=0;if(v(e))return this.each((function(t){T(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)for(;n=this[u++];)if(o=bt(n),r=1===n.nodeType&&" "+yt(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(s=yt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){T(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,o,i,a;if(r)for(o=0,i=T(this),a=xt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+yt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;T.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=v(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,T(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=T.map(o,(function(e){return null==e?"":e+""}))),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=T.valHooks[o.type]||T.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(wt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:yt(T.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?i+1:o.length;for(r=i<0?u:a?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=T(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,o=e.options,i=T.makeArray(t),a=o.length;a--;)((r=o[a]).selected=T.inArray(T.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},m.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in n;var Ct=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,r,o){var i,a,s,u,c,l,f,d,h=[r||b],g=p.call(e,"type")?e.type:e,m=p.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=r=r||b,3!==r.nodeType&&8!==r.nodeType&&!Ct.test(g+T.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[T.expando]?e:new T.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:T.makeArray(t,[e]),f=T.event.special[g]||{},o||!f.trigger||!1!==f.trigger.apply(r,t))){if(!o&&!f.noBubble&&!y(r)){for(u=f.delegateType||g,Ct.test(u+g)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(r.ownerDocument||b)&&h.push(s.defaultView||s.parentWindow||n)}for(i=0;(a=h[i++])&&!e.isPropagationStopped();)d=a,e.type=i>1?u:f.bindType||g,(l=(K.get(a,"events")||Object.create(null))[e.type]&&K.get(a,"handle"))&&l.apply(a,t),(l=c&&a[c])&&l.apply&&Q(a)&&(e.result=l.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),t)||!Q(r)||c&&v(r[g])&&!y(r)&&((s=r[c])&&(r[c]=null),T.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,Tt),r[g](),e.isPropagationStopped()&&d.removeEventListener(g,Tt),T.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each((function(){T.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),m.focusin||T.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=K.access(r,t);o||r.addEventListener(e,n,!0),K.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=K.access(r,t)-1;o?K.access(r,t,o):(r.removeEventListener(e,n,!0),K.remove(r,t))}}}));var kt=n.location,St={guid:Date.now()},Et=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var At=/\[\]$/,jt=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;function Lt(e,t,n,r){var o;if(Array.isArray(t))T.each(t,(function(t,o){n||At.test(e)?r(e,o):Lt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==C(t))r(e,t);else for(o in t)Lt(e+"["+o+"]",t[o],n,r)}T.param=function(e,t){var n,r=[],o=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,(function(){o(this.name,this.value)}));else for(n in e)Lt(n,e[n],t,o);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Dt.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(e){return{name:t.name,value:e.replace(jt,"\r\n")}})):{name:t.name,value:n.replace(jt,"\r\n")}})).get()}});var qt=/%20/g,Ot=/#.*$/,Pt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Bt=/^(?:GET|HEAD)$/,Mt=/^\/\//,Rt={},It={},_t="*/".concat("*"),Wt=b.createElement("a");function $t(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(M)||[];if(v(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ft(e,t,n,r){var o={},i=e===It;function a(s){var u;return o[s]=!0,T.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||i||o[c]?i?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),u}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Vt(e,t){var n,r,o=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&T.extend(!0,e,r),e}Wt.href=kt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Vt(Vt(e,T.ajaxSettings),t):Vt(T.ajaxSettings,e)},ajaxPrefilter:$t(Rt),ajaxTransport:$t(It),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,a,s,u,c,l,f,d,p=T.ajaxSetup({},t),h=p.context||p,g=p.context&&(h.nodeType||h.jquery)?T(h):T.event,m=T.Deferred(),v=T.Callbacks("once memory"),y=p.statusCode||{},x={},w={},C="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Ht.exec(i);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)k.always(e[k.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),S(0,t),this}};if(m.promise(k),p.url=((e||p.url||kt.href)+"").replace(Mt,kt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(M)||[""],null==p.crossDomain){u=b.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=Wt.protocol+"//"+Wt.host!=u.protocol+"//"+u.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=T.param(p.data,p.traditional)),Ft(Rt,p,t,k),c)return k;for(f in(l=T.event&&p.global)&&0==T.active++&&T.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Bt.test(p.type),o=p.url.replace(Ot,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(qt,"+")):(d=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=(Et.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(Pt,"$1"),d=(Et.test(o)?"&":"?")+"_="+St.guid+++d),p.url=o+d),p.ifModified&&(T.lastModified[o]&&k.setRequestHeader("If-Modified-Since",T.lastModified[o]),T.etag[o]&&k.setRequestHeader("If-None-Match",T.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&k.setRequestHeader("Content-Type",p.contentType),k.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+_t+"; q=0.01":""):p.accepts["*"]),p.headers)k.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(h,k,p)||c))return k.abort();if(C="abort",v.add(p.complete),k.done(p.success),k.fail(p.error),r=Ft(It,p,t,k)){if(k.readyState=1,l&&g.trigger("ajaxSend",[k,p]),c)return k;p.async&&p.timeout>0&&(s=n.setTimeout((function(){k.abort("timeout")}),p.timeout));try{c=!1,r.send(x,S)}catch(e){if(c)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,a,u){var f,d,b,x,w,C=t;c||(c=!0,s&&n.clearTimeout(s),r=void 0,i=u||"",k.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(x=function(e,t,n){for(var r,o,i,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==u[0]&&u.unshift(i),n[i]}(p,k,a)),!f&&T.inArray("script",p.dataTypes)>-1&&(p.converters["text script"]=function(){}),x=function(e,t,n,r){var o,i,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=l.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(a=c[u+" "+i]||c["* "+i]))for(o in c)if((s=o.split(" "))[1]===i&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(i=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}(p,x,k,f),f?(p.ifModified&&((w=k.getResponseHeader("Last-Modified"))&&(T.lastModified[o]=w),(w=k.getResponseHeader("etag"))&&(T.etag[o]=w)),204===e||"HEAD"===p.type?C="nocontent":304===e?C="notmodified":(C=x.state,d=x.data,f=!(b=x.error))):(b=C,!e&&C||(C="error",e<0&&(e=0))),k.status=e,k.statusText=(t||C)+"",f?m.resolveWith(h,[d,C,k]):m.rejectWith(h,[k,C,b]),k.statusCode(y),y=void 0,l&&g.trigger(f?"ajaxSuccess":"ajaxError",[k,p,f?d:b]),v.fireWith(h,[k,C]),l&&(g.trigger("ajaxComplete",[k,p]),--T.active||T.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],(function(e,t){T[t]=function(e,n,r,o){return v(n)&&(o=o||r,r=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:o,data:n,success:r},T.isPlainObject(e)&&e))}})),T.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),T._evalUrl=function(e,t,n){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t,n)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){T(this).wrapInner(e.call(this,t))})):this.each((function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){T(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},Ut=T.ajaxSettings.xhr();m.cors=!!Ut&&"withCredentials"in Ut,m.ajax=Ut=!!Ut,T.ajaxTransport((function(e){var t,r;if(m.cors||Ut&&!e.crossDomain)return{send:function(o,i){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(zt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),T.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),T.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=T("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Xt,Yt=[],Qt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||T.expando+"_"+St.guid++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",(function(e,t,r){var o,i,a,s=!1!==e.jsonp&&(Qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Qt,"$1"+o):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||T.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){a=arguments},r.always((function(){void 0===i?T(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(o)),a&&v(i)&&i(a[0]),a=i=void 0})),"script"})),m.createHTMLDocument=((Xt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),i=!n&&[],(o=D.exec(e))?[t.createElement(o[1])]:(o=Ce([e],t,i),i&&i.length&&T(i).remove(),T.merge([],o.childNodes)));var r,o,i},T.fn.load=function(e,t,n){var r,o,i,a=this,s=e.indexOf(" ");return s>-1&&(r=yt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&T.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){i=arguments,a.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},T.expr.pseudos.animated=function(e){return T.grep(T.timers,(function(t){return e===t.elem})).length},T.offset={setOffset:function(e,t,n){var r,o,i,a,s,u,c=T.css(e,"position"),l=T(e),f={};"static"===c&&(e.style.position="relative"),s=l.offset(),i=T.css(e,"top"),u=T.css(e,"left"),("absolute"===c||"fixed"===c)&&(i+u).indexOf("auto")>-1?(a=(r=l.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),v(t)&&(t=t.call(e,n,T.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+o),"using"in t?t.using.call(e,f):("number"==typeof f.top&&(f.top+="px"),"number"==typeof f.left&&(f.left+="px"),l.css(f))}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){T.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),o.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-T.css(r,"marginTop",!0),left:t.left-o.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||ie}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;T.fn[e]=function(r){return V(this,(function(e,r,o){var i;if(y(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),T.each(["top","left"],(function(e,t){T.cssHooks[t]=Ue(m.pixelPosition,(function(e,n){if(n)return n=ze(e,t),We.test(n)?T(e).position()[t]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){T.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),s=n||(!0===o||!0===i?"margin":"border");return V(this,(function(t,n,o){var i;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?T.css(t,n,s):T.style(t,n,o,s)}),t,a?o:void 0,a)}}))})),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){T.fn[t]=function(e){return this.on(t,e)}})),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Gt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||T.guid++,o},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=N,T.isFunction=v,T.isWindow=y,T.camelCase=Y,T.type=C,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},T.trim=function(e){return null==e?"":(e+"").replace(Gt,"")},void 0===(r=function(){return T}.apply(t,[]))||(e.exports=r);var Kt=n.jQuery,Jt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Jt),e&&n.jQuery===T&&(n.jQuery=Kt),T},void 0===o&&(n.jQuery=n.$=T),T}))},3:function(e,t,n){var r;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,o){"use strict";var i=[],a=Object.getPrototypeOf,s=i.slice,u=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},c=i.push,l=i.indexOf,f={},d=f.toString,p=f.hasOwnProperty,h=p.toString,g=h.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},b=n.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,o,i=(n=n||b).createElement("script");if(i.text=e,t)for(r in x)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[d.call(e)]||"object":typeof e}var T="3.5.1",k=function(e,t){return new k.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,n=C(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:T,constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(e){return this.pushStack(k.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(k.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},k.extend=k.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(k.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||k.isPlainObject(n)?n:{},o=!1,a[t]=k.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},k.extend({expando:"jQuery"+(T+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e)||(t=a(e))&&("function"!=typeof(n=p.call(t,"constructor")&&t.constructor)||h.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(S(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?k.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(S(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return u(a)},guid:1,support:m}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=i[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var E=function(e){var t,n,r,o,i,a,s,u,c,l,f,d,p,h,g,m,v,y,b,x="sizzle"+1*new Date,w=e.document,C=0,T=0,k=ue(),S=ue(),E=ue(),A=ue(),j=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,D=[],L=D.pop,q=D.push,O=D.push,P=D.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+M+"*\\]",_=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",W=new RegExp(M+"+","g"),$=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),F=new RegExp("^"+M+"*,"+M+"*"),V=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp(M+"|>"),U=new RegExp(_),X=new RegExp("^"+R+"$"),Y={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+B+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){d()},ae=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(D=P.call(w.childNodes),w.childNodes),D[w.childNodes.length].nodeType}catch(t){O={apply:D.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,o){var i,s,c,l,f,h,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return r;if(!o&&(d(t),t=t||p,g)){if(11!==w&&(f=Z.exec(e)))if(i=f[1]){if(9===w){if(!(c=t.getElementById(i)))return r;if(c.id===i)return r.push(c),r}else if(y&&(c=y.getElementById(i))&&b(t,c)&&c.id===i)return r.push(c),r}else{if(f[2])return O.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!A[e+" "]&&(!m||!m.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===w&&(z.test(e)||V.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((l=t.getAttribute("id"))?l=l.replace(re,oe):t.setAttribute("id",l=x)),s=(h=a(e)).length;s--;)h[s]=(l?"#"+l:":scope")+" "+be(h[s]);v=h.join(",")}try{return O.apply(r,y.querySelectorAll(v)),r}catch(t){A(e,!0)}finally{l===x&&t.removeAttribute("id")}}}return u(e.replace($,"$1"),t,r,o)}function ue(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[x]=!0,e}function le(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ce((function(t){return t=+t,ce((function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},d=se.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:w;return a!=p&&9===a.nodeType&&a.documentElement&&(h=(p=a).documentElement,g=!i(p),w!=p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.scope=le((function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=le((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=le((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=le((function(e){return h.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=J.test(p.querySelectorAll))&&(le((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+B+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),le((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&le((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",_)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==w&&b(w,e)?-1:t==p||t.ownerDocument==w&&b(w,t)?1:l?H(l,e)-H(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],s=[t];if(!o||!i)return e==p?-1:t==p?1:o?-1:i?1:l?H(l,e)-H(l,t):0;if(o===i)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?de(a[r],s[r]):a[r]==w?-1:s[r]==w?1:0}),p},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&g&&!A[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){A(t,!0)}return 0<se(t,p,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=p&&d(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=p&&d(e);var o=r.attrHandle[t.toLowerCase()],i=o&&N.call(r.attrHandle,t.toLowerCase())?o(e,t,!g):void 0;return void 0!==i?i:n.attributes||!g?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(re,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(j),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return l=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ce,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&k(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=se.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&-1<o.indexOf(n):"$="===t?n&&o.slice(-n.length)===n:"~="===t?-1<(" "+o.replace(W," ")+" ").indexOf(n):"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,p,h,g=i!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!u&&!s,b=!1;if(m){if(i){for(;g;){for(d=t;d=d[g];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(b=(p=(c=(l=(f=(d=m)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){l[e]=[C,p,b];break}}else if(y&&(b=p=(c=(l=(f=(d=t)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===b)for(;(d=++p&&d&&d[g]||(b=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((l=(f=d[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[C,b]),d!==t)););return(b-=o)===r||b%r==0&&0<=b/r}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return o[x]?o(t):1<o.length?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=H(e,i[a])]=!(n[r]=i[a])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace($,"$1"));return r[x]?ce((function(e,t,n,o){for(var i,a=r(e,null,o,[]),s=e.length;s--;)(i=a[s])&&(e[s]=!(t[s]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return 0<se(e,t).length}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return-1<(t.textContent||o(t)).indexOf(e)}})),lang:ce((function(e){return X.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,s=T++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,u){var c,l,f,d=[C,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=(f=t[x]||(t[x]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[i])&&c[0]===C&&c[1]===s)return d[2]=c[2];if((l[i]=d)[2]=e(t,n,u))return!0}return!1}}function we(e){return 1<e.length?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function Ce(e,t,n,r,o){for(var i,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),c&&t.push(s)));return a}function Te(e,t,n,r,o,i){return r&&!r[x]&&(r=Te(r)),o&&!o[x]&&(o=Te(o,i)),ce((function(i,a,s,u){var c,l,f,d=[],p=[],h=a.length,g=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!i&&t?g:Ce(g,d,e,s,u),v=n?o||(i?e:h||r)?[]:a:m;if(n&&n(m,v,s,u),r)for(c=Ce(v,p),r(c,[],s,u),l=c.length;l--;)(f=c[l])&&(v[p[l]]=!(m[p[l]]=f));if(i){if(o||e){if(o){for(c=[],l=v.length;l--;)(f=v[l])&&c.push(m[l]=f);o(null,v=[],c,u)}for(l=v.length;l--;)(f=v[l])&&-1<(c=o?H(i,f):d[l])&&(i[c]=!(a[c]=f))}}else v=Ce(v===a?v.splice(h,v.length):v),o?o(null,a,v,u):O.apply(a,v)}))}function ke(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,l=xe((function(e){return e===t}),s,!0),f=xe((function(e){return-1<H(t,e)}),s,!0),d=[function(e,n,r){var o=!a&&(r||n!==c)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,o}];u<i;u++)if(n=r.relative[e[u].type])d=[xe(we(d),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[x]){for(o=++u;o<i&&!r.relative[e[o].type];o++);return Te(1<u&&we(d),1<u&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace($,"$1"),n,u<o&&ke(e.slice(u,o)),o<i&&ke(e=e.slice(o)),o<i&&be(e))}d.push(n)}return we(d)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=se.tokenize=function(e,t){var n,o,i,a,s,u,c,l=S[e+" "];if(l)return t?0:l.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(o=F.exec(s))||(o&&(s=s.slice(o[0].length)||s),u.push(i=[])),n=!1,(o=V.exec(s))&&(n=o.shift(),i.push({value:n,type:o[0].replace($," ")}),s=s.slice(n.length)),r.filter)!(o=Y[a].exec(s))||c[a]&&!(o=c[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):S(e,u).slice(0)},s=se.compile=function(e,t){var n,o,i,s,u,l,f=[],h=[],m=E[e+" "];if(!m){for(t||(t=a(e)),n=t.length;n--;)(m=ke(t[n]))[x]?f.push(m):h.push(m);(m=E(e,(o=h,s=0<(i=f).length,u=0<o.length,l=function(e,t,n,a,l){var f,h,m,v=0,y="0",b=e&&[],x=[],w=c,T=e||u&&r.find.TAG("*",l),k=C+=null==w?1:Math.random()||.1,S=T.length;for(l&&(c=t==p||t||l);y!==S&&null!=(f=T[y]);y++){if(u&&f){for(h=0,t||f.ownerDocument==p||(d(f),n=!g);m=o[h++];)if(m(f,t||p,n)){a.push(f);break}l&&(C=k)}s&&((f=!m&&f)&&v--,e&&b.push(f))}if(v+=y,s&&y!==v){for(h=0;m=i[h++];)m(b,x,t,n);if(e){if(0<v)for(;y--;)b[y]||x[y]||(x[y]=L.call(a));x=Ce(x)}O.apply(a,x),l&&!e&&0<x.length&&1<v+i.length&&se.uniqueSort(a)}return l&&(C=k,c=w),b},s?ce(l):l))).selector=e}return m},u=se.select=function(e,t,n,o){var i,u,c,l,f,d="function"==typeof e&&e,p=!o&&a(e=d.selector||e);if(n=n||[],1===p.length){if(2<(u=p[0]=p[0].slice(0)).length&&"ID"===(c=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(i=Y.needsContext.test(e)?0:u.length;i--&&(c=u[i],!r.relative[l=c.type]);)if((f=r.find[l])&&(o=f(c.matches[0].replace(te,ne),ee.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(i,1),!(e=o.length&&be(u)))return O.apply(n,o),n;break}}return(d||s(e,p))(o,t,!g,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=x.split("").sort(j).join("")===x,n.detectDuplicates=!!f,d(),n.sortDetached=le((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),le((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&le((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),le((function(e){return null==e.getAttribute("disabled")}))||fe(B,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);k.find=E,k.expr=E.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=E.uniqueSort,k.text=E.getText,k.isXMLDoc=E.isXML,k.contains=E.contains,k.escapeSelector=E.escape;var A=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&k(e).is(n))break;r.push(e)}return r},j=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=k.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var L=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function q(e,t,n){return v(t)?k.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?k.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?k.grep(e,(function(e){return-1<l.call(t,e)!==n})):k.filter(t,e,n)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,(function(e){return 1===e.nodeType})))},k.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(k(e).filter((function(){for(t=0;t<r;t++)if(k.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,o[t],n);return 1<r?k.uniqueSort(n):n},filter:function(e){return this.pushStack(q(this,e||[],!1))},not:function(e){return this.pushStack(q(this,e||[],!0))},is:function(e){return!!q(this,"string"==typeof e&&N.test(e)?k(e):e||[],!1).length}});var O,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||O,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:P.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),L.test(r[1])&&k.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=b.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,O=k(b);var H=/^(?:parents|prev(?:Until|All))/,B={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&k(e);if(!N.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(1<i.length?k.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?l.call(k(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return A(e,"parentNode")},parentsUntil:function(e,t,n){return A(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return A(e,"nextSibling")},prevAll:function(e){return A(e,"previousSibling")},nextUntil:function(e,t,n){return A(e,"nextSibling",n)},prevUntil:function(e,t,n){return A(e,"previousSibling",n)},siblings:function(e){return j((e.parentNode||{}).firstChild,e)},children:function(e){return j(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(D(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},(function(e,t){k.fn[e]=function(n,r){var o=k.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=k.filter(r,o)),1<this.length&&(B[e]||k.uniqueSort(o),H.test(e)&&o.reverse()),this.pushStack(o)}}));var R=/[^\x20\t\r\n\f]+/g;function I(e){return e}function _(e){throw e}function W(e,t,n,r){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(e){var t,n;e="string"==typeof e?(t=e,n={},k.each(t.match(R)||[],(function(e,t){n[t]=!0})),n):k.extend({},e);var r,o,i,a,s=[],u=[],c=-1,l=function(){for(a=a||e.once,i=r=!0;u.length;c=-1)for(o=u.shift();++c<s.length;)!1===s[c].apply(o[0],o[1])&&e.stopOnFalse&&(c=s.length,o=!1);e.memory||(o=!1),r=!1,a&&(s=o?[]:"")},f={add:function(){return s&&(o&&!r&&(c=s.length-1,u.push(o)),function t(n){k.each(n,(function(n,r){v(r)?e.unique&&f.has(r)||s.push(r):r&&r.length&&"string"!==C(r)&&t(r)}))}(arguments),o&&!r&&l()),this},remove:function(){return k.each(arguments,(function(e,t){for(var n;-1<(n=k.inArray(t,s,n));)s.splice(n,1),n<=c&&c--})),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=o="",this},disabled:function(){return!s},lock:function(){return a=u=[],o||r||(s=o=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),r||l()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!i}};return f},k.extend({Deferred:function(e){var t=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return k.Deferred((function(n){k.each(t,(function(t,r){var o=v(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,o){var i=0;function a(e,t,r,o){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(e<i)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(c)?o?c.call(n,a(i,t,I,o),a(i,t,_,o)):(i++,c.call(n,a(i,t,I,o),a(i,t,_,o),a(i,t,I,t.notifyWith))):(r!==I&&(s=void 0,u=[n]),(o||t.resolveWith)(s,u))}},l=o?c:function(){try{c()}catch(n){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(n,l.stackTrace),i<=e+1&&(r!==_&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?l():(k.Deferred.getStackHook&&(l.stackTrace=k.Deferred.getStackHook()),n.setTimeout(l))}}return k.Deferred((function(n){t[0][3].add(a(0,n,v(o)?o:I,n.notifyWith)),t[1][3].add(a(0,n,v(e)?e:I)),t[2][3].add(a(0,n,v(r)?r:_))})).promise()},promise:function(e){return null!=e?k.extend(e,o):o}},i={};return k.each(t,(function(e,n){var a=n[2],s=n[5];o[n[1]]=a.add,s&&a.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=a.fireWith})),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=s.call(arguments),i=k.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=1<arguments.length?s.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(W(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||v(o[n]&&o[n].then)))return i.then();for(;n--;)W(o[n],a(n),i.reject);return i.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&$.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){n.setTimeout((function(){throw e}))};var F=k.Deferred();function V(){b.removeEventListener("DOMContentLoaded",V),n.removeEventListener("load",V),k.ready()}k.fn.ready=function(e){return F.then(e).catch((function(e){k.readyException(e)})),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||F.resolveWith(b,[k])}}),k.ready.then=F.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(k.ready):(b.addEventListener("DOMContentLoaded",V),n.addEventListener("load",V));var z=function(e,t,n,r,o,i,a){var s=0,u=e.length,c=null==n;if("object"===C(n))for(s in o=!0,n)z(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,v(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(k(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):u?t(e[0],n):i},U=/^-ms-/,X=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function Q(e){return e.replace(U,"ms-").replace(X,Y)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=k.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Q(t)]=n;else for(r in t)o[Q(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Q(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Q):(t=Q(t))in r?[t]:t.match(R)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var J=new K,Z=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r,o;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:ee.test(o)?JSON.parse(o):o)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),k.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Q(r.slice(5)),ne(i,r,o[r]));J.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){Z.set(this,e)})):z(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,1<arguments.length,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,o=n.shift(),i=k._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){k.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:k.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),k.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?k.queue(this[0],e):void 0===t?this:this.each((function(){var n=k.queue(this,e,t);k._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&k.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){k.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=k.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=b.documentElement,se=function(e){return k.contains(e.ownerDocument,e)},ue={composed:!0};ae.getRootNode&&(se=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===k.css(e,"display")};function le(e,t,n,r){var o,i,a=20,s=r?function(){return r.cur()}:function(){return k.css(e,t,"")},u=s(),c=n&&n[3]||(k.cssNumber[t]?"":"px"),l=e.nodeType&&(k.cssNumber[t]||"px"!==c&&+u)&&oe.exec(k.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;a--;)k.style(e,t,l+c),(1-i)*(1-(i=s()/u||.5))<=0&&(a=0),l/=i;l*=2,k.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,o=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=o)),o}var fe={};function de(e,t){for(var n,r,o,i,a,s,u,c=[],l=0,f=e.length;l<f;l++)(r=e[l]).style&&(n=r.style.display,t?("none"===n&&(c[l]=J.get(r,"display")||null,c[l]||(r.style.display="")),""===r.style.display&&ce(r)&&(c[l]=(u=a=i=void 0,a=(o=r).ownerDocument,s=o.nodeName,(u=fe[s])||(i=a.body.appendChild(a.createElement(s)),u=k.css(i,"display"),i.parentNode.removeChild(i),"none"===u&&(u="block"),fe[s]=u)))):"none"!==n&&(c[l]="none",J.set(r,"display",n)));for(l=0;l<f;l++)null!=c[l]&&(e[l].style.display=c[l]);return e}k.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?k(this).show():k(this).hide()}))}});var pe,he,ge=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(he=b.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),pe.appendChild(he),m.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",m.option=!!pe.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?k.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,m.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var we=/<|&#?\w+;/;function Ce(e,t,n,r,o){for(var i,a,s,u,c,l,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((i=e[p])||0===i)if("object"===C(i))k.merge(d,i.nodeType?[i]:i);else if(we.test(i)){for(a=a||f.appendChild(t.createElement("div")),s=(me.exec(i)||["",""])[1].toLowerCase(),u=ye[s]||ye._default,a.innerHTML=u[1]+k.htmlPrefilter(i)+u[2],l=u[0];l--;)a=a.lastChild;k.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(i));for(f.textContent="",p=0;i=d[p++];)if(r&&-1<k.inArray(i,r))o&&o.push(i);else if(c=se(i),a=be(f.appendChild(i),"script"),c&&xe(a),n)for(l=0;i=a[l++];)ve.test(i.type||"")&&n.push(i);return f}var Te=/^key/,ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Ae(){return!1}function je(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Ne(e,t,n,r,o,i){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ne(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Ae;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return k().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=k.guid++)),e.each((function(){k.event.add(this,t,o,r,n)}))}function De(e,t,n){n?(J.set(e,t,!1),k.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=J.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(k.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),J.set(this,t,i),r=n(this,t),this[t](),i!==(o=J.get(this,t))||r?J.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else i.length&&(J.set(this,t,{value:k.event.trigger(k.extend(i[0],k.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&k.event.add(e,t,Ee)}k.event={global:{},add:function(e,t,n,r,o){var i,a,s,u,c,l,f,d,p,h,g,m=J.get(e);if(G(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&k.find.matchesSelector(ae,o),n.guid||(n.guid=k.guid++),(u=m.events)||(u=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(R)||[""]).length;c--;)p=g=(s=Se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=k.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=k.event.special[p]||{},l=k.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&k.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,l):d.push(l),k.event.global[p]=!0)},remove:function(e,t,n,r,o){var i,a,s,u,c,l,f,d,p,h,g,m=J.hasData(e)&&J.get(e);if(m&&(u=m.events)){for(c=(t=(t||"").match(R)||[""]).length;c--;)if(p=g=(s=Se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=k.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=d.length;i--;)l=d[i],!o&&g!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(d.splice(i,1),l.selector&&d.delegateCount--,f.remove&&f.remove.call(e,l));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,m.handle)||k.removeEvent(e,p,m.handle),delete u[p])}else for(p in u)k.event.remove(e,p+t[c],n,r,!0);k.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,s=new Array(arguments.length),u=k.event.fix(e),c=(J.get(this,"events")||Object.create(null))[u.type]||[],l=k.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(a=k.event.handlers.call(this,u,c),t=0;(o=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==i.namespace&&!u.rnamespace.test(i.namespace)||(u.handleObj=i,u.data=i.data,void 0!==(r=((k.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,o,i,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(i=[],a={},n=0;n<u;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?-1<k(o,this).index(c):k.find(o,this,null,[c]).length),a[o]&&i.push(r);i.length&&s.push({elem:c,handlers:i})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&D(t,"input")&&De(t,"click",Ee),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&D(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&D(t,"input")&&J.get(t,"click")||D(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Ae,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Ae,isPropagationStopped:Ae,isImmediatePropagationStopped:Ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},(function(e,t){k.event.special[e]={setup:function(){return De(this,e,je),!1},trigger:function(){return De(this,e),!0},delegateType:t}})),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){k.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||k.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),k.fn.extend({on:function(e,t,n,r){return Ne(this,e,t,n,r)},one:function(e,t,n,r){return Ne(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ae),this.each((function(){k.event.remove(this,e,n,t)}))}});var Le=/<script|<style|<link/i,qe=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pe(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Be(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,o,i,a,s;if(1===t.nodeType){if(J.hasData(e)&&(s=J.get(e).events))for(o in J.remove(t,"handle events"),s)for(n=0,r=s[o].length;n<r;n++)k.event.add(t,o,s[o][n]);Z.hasData(e)&&(i=Z.access(e),a=k.extend({},i),Z.set(t,a))}}function Re(e,t,n,r){t=u(t);var o,i,a,s,c,l,f=0,d=e.length,p=d-1,h=t[0],g=v(h);if(g||1<d&&"string"==typeof h&&!m.checkClone&&qe.test(h))return e.each((function(o){var i=e.eq(o);g&&(t[0]=h.call(this,o,i.html())),Re(i,t,n,r)}));if(d&&(i=(o=Ce(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(s=(a=k.map(be(o,"script"),He)).length;f<d;f++)c=o,f!==p&&(c=k.clone(c,!0,!0),s&&k.merge(a,be(c,"script"))),n.call(e[f],c,f);if(s)for(l=a[a.length-1].ownerDocument,k.map(a,Be),f=0;f<s;f++)c=a[f],ve.test(c.type||"")&&!J.access(c,"globalEval")&&k.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?k._evalUrl&&!c.noModule&&k._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},l):w(c.textContent.replace(Oe,""),c,l))}return e}function Ie(e,t,n){for(var r,o=t?k.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||k.cleanData(be(r)),r.parentNode&&(n&&se(r)&&xe(be(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,a,s,u,c,l=e.cloneNode(!0),f=se(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(a=be(l),r=0,o=(i=be(e)).length;r<o;r++)s=i[r],"input"===(c=(u=a[r]).nodeName.toLowerCase())&&ge.test(s.type)?u.checked=s.checked:"input"!==c&&"textarea"!==c||(u.defaultValue=s.defaultValue);if(t)if(n)for(i=i||be(e),a=a||be(l),r=0,o=i.length;r<o;r++)Me(i[r],a[r]);else Me(e,l);return 0<(a=be(l,"script")).length&&xe(a,!f&&be(e,"script")),l},cleanData:function(e){for(var t,n,r,o=k.event.special,i=0;void 0!==(n=e[i]);i++)if(G(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)o[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return z(this,(function(e){return void 0===e?k.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Re(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pe(this,e).appendChild(e)}))},prepend:function(){return Re(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Pe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return k.clone(this,e,t)}))},html:function(e){return z(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!ye[(me.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,(function(t){var n=this.parentNode;k.inArray(this,e)<0&&(k.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){k.fn[e]=function(e){for(var n,r=[],o=k(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),k(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var _e=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},$e=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},Fe=new RegExp(ie.join("|"),"i");function Ve(e,t,n){var r,o,i,a,s=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||se(e)||(a=k.style(e,t)),!m.pixelBoxStyles()&&_e.test(a)&&Fe.test(t)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",a=36===t(e.right),o=36===t(e.width),l.style.position="absolute",i=12===t(l.offsetWidth/3),ae.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,a,s,u,c=b.createElement("div"),l=b.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,k.extend(m,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,r,o;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),r=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",r.style.height="9px",ae.appendChild(e).appendChild(t).appendChild(r),o=n.getComputedStyle(t),s=3<parseInt(o.height),ae.removeChild(e)),s}}))}();var Ue=["Webkit","Moz","ms"],Xe=b.createElement("div").style,Ye={};function Qe(e){return k.cssProps[e]||Ye[e]||(e in Xe?e:Ye[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in Xe)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,o,i){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=k.css(e,n+ie[a],!0,o)),r?("content"===n&&(u-=k.css(e,"padding"+ie[a],!0,o)),"margin"!==n&&(u-=k.css(e,"border"+ie[a]+"Width",!0,o))):(u+=k.css(e,"padding"+ie[a],!0,o),"padding"!==n?u+=k.css(e,"border"+ie[a]+"Width",!0,o):s+=k.css(e,"border"+ie[a]+"Width",!0,o));return!r&&0<=i&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-u-s-.5))||0),u}function nt(e,t,n){var r=We(e),o=(!m.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),i=o,a=Ve(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(_e.test(a)){if(!n)return a;a="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&D(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===k.css(e,"boxSizing",!1,r),(i=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+tt(e,t,n||(o?"border":"content"),i,r,a)+"px"}function rt(e,t,n,r,o){return new rt.prototype.init(e,t,n,r,o)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ve(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=Q(t),u=Ke.test(t),c=e.style;if(u||(t=Qe(s)),a=k.cssHooks[t]||k.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:c[t];"string"==(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=le(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||u||(n+=o&&o[3]||(k.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,i,a,s=Q(t);return Ke.test(t)||(t=Qe(s)),(a=k.cssHooks[t]||k.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=Ve(e,t,r)),"normal"===o&&t in Ze&&(o=Ze[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),k.each(["height","width"],(function(e,t){k.cssHooks[t]={get:function(e,n,r){if(n)return!Ge.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):$e(e,Je,(function(){return nt(e,t,r)}))},set:function(e,n,r){var o,i=We(e),a=!m.scrollboxSize()&&"absolute"===i.position,s=(a||r)&&"border-box"===k.css(e,"boxSizing",!1,i),u=r?tt(e,t,r,s,i):0;return s&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-tt(e,t,"border",!1,i)-.5)),u&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=k.css(e,t)),et(0,n,u)}}})),k.cssHooks.marginLeft=ze(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ve(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),k.each({margin:"",padding:"",border:"Width"},(function(e,t){k.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(k.cssHooks[e+t].set=et)})),k.fn.extend({css:function(e,t){return z(this,(function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=We(e),o=t.length;a<o;a++)i[t[a]]=k.css(e,t[a],!1,r);return i}return void 0!==n?k.style(e,t,n):k.css(e,t)}),e,t,1<arguments.length)}}),((k.Tween=rt).prototype={constructor:rt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(k.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}}).init.prototype=rt.prototype,(rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Qe(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=rt.prototype.init,k.fx.step={};var ot,it,at,st,ut=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function lt(){it&&(!1===b.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(lt):n.setTimeout(lt,k.fx.interval),k.fx.tick())}function ft(){return n.setTimeout((function(){ot=void 0})),ot=Date.now()}function dt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function pt(e,t,n){for(var r,o=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function ht(e,t,n){var r,o,i=0,a=ht.prefilters.length,s=k.Deferred().always((function(){delete u.elem})),u=function(){if(o)return!1;for(var t=ot||ft(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),i=0,a=c.tweens.length;i<a;i++)c.tweens[i].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ft(),duration:n.duration,tweens:[],createTween:function(t,n){var r=k.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=Q(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=k.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(l,c.opts.specialEasing);i<a;i++)if(r=ht.prefilters[i].call(c,e,l,c.opts))return v(r.stop)&&(k._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return k.map(l,pt,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),k.fx.timer(k.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}k.Animation=k.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,o=e.length;r<o;r++)n=e[r],ht.tweeners[n]=ht.tweeners[n]||[],ht.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,s,u,c,l,f="width"in t||"height"in t,d=this,p={},h=e.style,g=e.nodeType&&ce(e),m=J.get(e,"fxshow");for(r in n.queue||(null==(a=k._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,k.queue(e,"fx").length||a.empty.fire()}))}))),t)if(o=t[r],ut.test(o)){if(delete t[r],i=i||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[r])continue;g=!0}p[r]=m&&m[r]||k.style(e,r)}if((u=!k.isEmptyObject(t))||!k.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=J.get(e,"display")),"none"===(l=k.css(e,"display"))&&(c?l=c:(de([e],!0),c=e.style.display||c,l=k.css(e,"display"),de([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===k.css(e,"float")&&(u||(d.done((function(){h.display=c})),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),u=!1,p)u||(m?"hidden"in m&&(g=m.hidden):m=J.access(e,"fxshow",{display:c}),i&&(m.hidden=!g),g&&de([e],!0),d.done((function(){for(r in g||de([e]),J.remove(e,"fxshow"),p)k.style(e,r,p[r])}))),u=pt(g?m[r]:0,r,d),r in m||(m[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=k.isEmptyObject(e),i=k.speed(t,n,r),a=function(){var t=ht(this,k.extend({},e),i);(o||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=k.timers,a=J.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&ct.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||k.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=k.timers,a=r?r.length:0;for(n.finish=!0,k.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),k.each(["toggle","show","hide"],(function(e,t){var n=k.fn[t];k.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,r,o)}})),k.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){k.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),ot=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){it||(it=!0,lt())},k.fx.stop=function(){it=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(e,t){return e=k.fx&&k.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}}))},at=b.createElement("input"),st=b.createElement("select").appendChild(b.createElement("option")),at.type="checkbox",m.checkOn=""!==at.value,m.optSelected=st.selected,(at=b.createElement("input")).value="t",at.type="radio",m.radioValue="t"===at.value;var gt,mt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return z(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each((function(){k.removeAttr(this,e)}))}}),k.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?k.prop(e,t,n):(1===i&&k.isXMLDoc(e)||(o=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(R);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=mt[t]||k.find.attr;mt[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=mt[a],mt[a]=o,o=null!=n(e,t,r)?a:null,mt[a]=i),o}}));var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function bt(e){return(e.match(R)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function wt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}k.fn.extend({prop:function(e,t){return z(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each((function(){delete this[k.propFix[e]||e]}))}}),k.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&k.isXMLDoc(e)||(t=k.propFix[t]||t,o=k.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){k.propFix[this.toLowerCase()]=this})),k.fn.extend({addClass:function(e){var t,n,r,o,i,a,s,u=0;if(v(e))return this.each((function(t){k(this).addClass(e.call(this,t,xt(this)))}));if((t=wt(e)).length)for(;n=this[u++];)if(o=xt(n),r=1===n.nodeType&&" "+bt(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(s=bt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,o,i,a,s,u=0;if(v(e))return this.each((function(t){k(this).removeClass(e.call(this,t,xt(this)))}));if(!arguments.length)return this.attr("class","");if((t=wt(e)).length)for(;n=this[u++];)if(o=xt(n),r=1===n.nodeType&&" "+bt(o)+" "){for(a=0;i=t[a++];)for(;-1<r.indexOf(" "+i+" ");)r=r.replace(" "+i+" "," ");o!==(s=bt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){k(this).toggleClass(e.call(this,n,xt(this),t),t)})):this.each((function(){var t,o,i,a;if(r)for(o=0,i=k(this),a=wt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=xt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+bt(xt(n))+" ").indexOf(t))return!0;return!1}});var Ct=/\r/g;k.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=v(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,k(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=k.map(o,(function(e){return null==e?"":e+""}))),(t=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=k.valHooks[o.type]||k.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Ct,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:bt(k.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?i+1:o.length;for(r=i<0?u:a?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=k(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,o=e.options,i=k.makeArray(t),a=o.length;a--;)((r=o[a]).selected=-1<k.inArray(k.valHooks.option.get(r),i))&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),k.each(["radio","checkbox"],(function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},m.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in n;var Tt=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,r,o){var i,a,s,u,c,l,f,d,h=[r||b],g=p.call(e,"type")?e.type:e,m=p.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=r=r||b,3!==r.nodeType&&8!==r.nodeType&&!Tt.test(g+k.event.triggered)&&(-1<g.indexOf(".")&&(g=(m=g.split(".")).shift(),m.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[k.expando]?e:new k.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:k.makeArray(t,[e]),f=k.event.special[g]||{},o||!f.trigger||!1!==f.trigger.apply(r,t))){if(!o&&!f.noBubble&&!y(r)){for(u=f.delegateType||g,Tt.test(u+g)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(r.ownerDocument||b)&&h.push(s.defaultView||s.parentWindow||n)}for(i=0;(a=h[i++])&&!e.isPropagationStopped();)d=a,e.type=1<i?u:f.bindType||g,(l=(J.get(a,"events")||Object.create(null))[e.type]&&J.get(a,"handle"))&&l.apply(a,t),(l=c&&a[c])&&l.apply&&G(a)&&(e.result=l.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),t)||!G(r)||c&&v(r[g])&&!y(r)&&((s=r[c])&&(r[c]=null),k.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,kt),r[g](),e.isPropagationStopped()&&d.removeEventListener(g,kt),k.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each((function(){k.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),m.focusin||k.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){k.event.simulate(t,e.target,k.event.fix(e))};k.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=J.access(r,t);o||r.addEventListener(e,n,!0),J.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=J.access(r,t)-1;o?J.access(r,t,o):(r.removeEventListener(e,n,!0),J.remove(r,t))}}}));var St=n.location,Et={guid:Date.now()},At=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var jt=/\[\]$/,Nt=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;function qt(e,t,n,r){var o;if(Array.isArray(t))k.each(t,(function(t,o){n||jt.test(e)?r(e,o):qt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==C(t))r(e,t);else for(o in t)qt(e+"["+o+"]",t[o],n,r)}k.param=function(e,t){var n,r=[],o=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,(function(){o(this.name,this.value)}));else for(n in e)qt(n,e[n],t,o);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Lt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,(function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}})):{name:t.name,value:n.replace(Nt,"\r\n")}})).get()}});var Ot=/%20/g,Pt=/#.*$/,Ht=/([?&])_=[^&]*/,Bt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:GET|HEAD)$/,Rt=/^\/\//,It={},_t={},Wt="*/".concat("*"),$t=b.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(R)||[];if(v(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Vt(e,t,n,r){var o={},i=e===_t;function a(s){var u;return o[s]=!0,k.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||i||o[c]?i?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),u}return a(t.dataTypes[0])||!o["*"]&&a("*")}function zt(e,t){var n,r,o=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}$t.href=St.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,k.ajaxSettings),t):zt(k.ajaxSettings,e)},ajaxPrefilter:Ft(It),ajaxTransport:Ft(_t),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,a,s,u,c,l,f,d,p=k.ajaxSetup({},t),h=p.context||p,g=p.context&&(h.nodeType||h.jquery)?k(h):k.event,m=k.Deferred(),v=k.Callbacks("once memory"),y=p.statusCode||{},x={},w={},C="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Bt.exec(i);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),S(0,t),this}};if(m.promise(T),p.url=((e||p.url||St.href)+"").replace(Rt,St.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(R)||[""],null==p.crossDomain){u=b.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=$t.protocol+"//"+$t.host!=u.protocol+"//"+u.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=k.param(p.data,p.traditional)),Vt(It,p,t,T),c)return T;for(f in(l=k.event&&p.global)&&0==k.active++&&k.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Mt.test(p.type),o=p.url.replace(Pt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Ot,"+")):(d=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=(At.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(Ht,"$1"),d=(At.test(o)?"&":"?")+"_="+Et.guid+++d),p.url=o+d),p.ifModified&&(k.lastModified[o]&&T.setRequestHeader("If-Modified-Since",k.lastModified[o]),k.etag[o]&&T.setRequestHeader("If-None-Match",k.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Wt+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(h,T,p)||c))return T.abort();if(C="abort",v.add(p.complete),T.done(p.success),T.fail(p.error),r=Vt(_t,p,t,T)){if(T.readyState=1,l&&g.trigger("ajaxSend",[T,p]),c)return T;p.async&&0<p.timeout&&(s=n.setTimeout((function(){T.abort("timeout")}),p.timeout));try{c=!1,r.send(x,S)}catch(e){if(c)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,a,u){var f,d,b,x,w,C=t;c||(c=!0,s&&n.clearTimeout(s),r=void 0,i=u||"",T.readyState=0<e?4:0,f=200<=e&&e<300||304===e,a&&(x=function(e,t,n){for(var r,o,i,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==u[0]&&u.unshift(i),n[i]}(p,T,a)),!f&&-1<k.inArray("script",p.dataTypes)&&(p.converters["text script"]=function(){}),x=function(e,t,n,r){var o,i,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=l.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(a=c[u+" "+i]||c["* "+i]))for(o in c)if((s=o.split(" "))[1]===i&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(i=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}(p,x,T,f),f?(p.ifModified&&((w=T.getResponseHeader("Last-Modified"))&&(k.lastModified[o]=w),(w=T.getResponseHeader("etag"))&&(k.etag[o]=w)),204===e||"HEAD"===p.type?C="nocontent":304===e?C="notmodified":(C=x.state,d=x.data,f=!(b=x.error))):(b=C,!e&&C||(C="error",e<0&&(e=0))),T.status=e,T.statusText=(t||C)+"",f?m.resolveWith(h,[d,C,T]):m.rejectWith(h,[T,C,b]),T.statusCode(y),y=void 0,l&&g.trigger(f?"ajaxSuccess":"ajaxError",[T,p,f?d:b]),v.fireWith(h,[T,C]),l&&(g.trigger("ajaxComplete",[T,p]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],(function(e,t){k[t]=function(e,n,r,o){return v(n)&&(o=o||r,r=n,n=void 0),k.ajax(k.extend({url:e,type:t,dataType:o,data:n,success:r},k.isPlainObject(e)&&e))}})),k.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),k._evalUrl=function(e,t,n){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t,n)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){k(this).wrapInner(e.call(this,t))})):this.each((function(){var t=k(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){k(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){k(this).replaceWith(this.childNodes)})),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=k.ajaxSettings.xhr();m.cors=!!Xt&&"withCredentials"in Xt,m.ajax=Xt=!!Xt,k.ajaxTransport((function(e){var t,r;if(m.cors||Xt&&!e.crossDomain)return{send:function(o,i){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Ut[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(o){if(t)throw o}},abort:function(){t&&t()}}})),k.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),k.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=k("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Yt,Qt=[],Gt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||k.expando+"_"+Et.guid++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",(function(e,t,r){var o,i,a,s=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Gt,"$1"+o):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||k.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){a=arguments},r.always((function(){void 0===i?k(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(o)),a&&v(i)&&i(a[0]),a=i=void 0})),"script"})),m.createHTMLDocument=((Yt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Yt.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),i=!n&&[],(o=L.exec(e))?[t.createElement(o[1])]:(o=Ce([e],t,i),i&&i.length&&k(i).remove(),k.merge([],o.childNodes)));var r,o,i},k.fn.load=function(e,t,n){var r,o,i,a=this,s=e.indexOf(" ");return-1<s&&(r=bt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<a.length&&k.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){i=arguments,a.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},k.expr.pseudos.animated=function(e){return k.grep(k.timers,(function(t){return e===t.elem})).length},k.offset={setOffset:function(e,t,n){var r,o,i,a,s,u,c=k.css(e,"position"),l=k(e),f={};"static"===c&&(e.style.position="relative"),s=l.offset(),i=k.css(e,"top"),u=k.css(e,"left"),("absolute"===c||"fixed"===c)&&-1<(i+u).indexOf("auto")?(a=(r=l.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),v(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+o),"using"in t?t.using.call(e,f):("number"==typeof f.top&&(f.top+="px"),"number"==typeof f.left&&(f.left+="px"),l.css(f))}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){k.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),o.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-k.css(r,"marginTop",!0),left:t.left-o.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||ae}))}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;k.fn[e]=function(r){return z(this,(function(e,r,o){var i;if(y(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),k.each(["top","left"],(function(e,t){k.cssHooks[t]=ze(m.pixelPosition,(function(e,n){if(n)return n=Ve(e,t),_e.test(n)?k(e).position()[t]+"px":n}))})),k.each({Height:"height",Width:"width"},(function(e,t){k.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){k.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),s=n||(!0===o||!0===i?"margin":"border");return z(this,(function(t,n,o){var i;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?k.css(t,n,s):k.style(t,n,o,s)}),t,a?o:void 0,a)}}))})),k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){k.fn[t]=function(e){return this.on(t,e)}})),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){k.fn[t]=function(e,n){return 0<arguments.length?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;k.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||k.guid++,o},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=D,k.isFunction=v,k.isWindow=y,k.camelCase=Q,k.type=C,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},k.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},void 0===(r=function(){return k}.apply(t,[]))||(e.exports=r);var Jt=n.jQuery,Zt=n.$;return k.noConflict=function(e){return n.$===k&&(n.$=Zt),e&&n.jQuery===k&&(n.jQuery=Jt),k},void 0===o&&(n.jQuery=n.$=k),k}))},4:function(e,t,n){e.exports=function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e,t,n){return(s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&a(o,n.prototype),o}).apply(null,arguments)}function u(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e,t,n){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=i(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function l(e){return Object.keys(e).map((function(t){return e[t]}))}function f(e){return Array.prototype.slice.call(e)}function d(e){console.error("".concat(y," ").concat(e))}function p(e,t){!function(e){-1===x.indexOf(e)&&(x.push(e),b(e))}('"'.concat(e,'" is deprecated and will be removed in the next major release. Please use "').concat(t,'" instead.'))}function h(e){return e&&Promise.resolve(e)===e}function g(e){var t={};for(var n in e)t[e[n]]="swal2-"+e[n];return t}function m(e,t){return e.classList.contains(t)}function v(t,n,r){if(function(e){f(e.classList).forEach((function(t){-1===l(T).indexOf(t)&&-1===l(k).indexOf(t)&&e.classList.remove(t)}))}(t),n&&n[r]){if("string"!=typeof n[r]&&!n[r].forEach)return b("Invalid type of customClass.".concat(r,'! Expected string or iterable object, got "').concat(e(n[r]),'"'));oe(t,n[r])}}var y="SweetAlert2:",b=function(e){console.warn("".concat(y," ").concat(e))},x=[],w=function(e){return"function"==typeof e?e():e},C=Object.freeze({cancel:"cancel",backdrop:"backdrop",close:"close",esc:"esc",timer:"timer"}),T=g(["container","shown","height-auto","iosfix","popup","modal","no-backdrop","toast","toast-shown","toast-column","show","hide","noanimation","close","title","header","content","actions","confirm","cancel","footer","icon","image","input","file","range","select","radio","checkbox","label","textarea","inputerror","validation-message","progress-steps","active-progress-step","progress-step","progress-step-line","loading","styled","top","top-start","top-end","top-left","top-right","center","center-start","center-end","center-left","center-right","bottom","bottom-start","bottom-end","bottom-left","bottom-right","grow-row","grow-column","grow-fullscreen","rtl"]),k=g(["success","warning","info","question","error"]),S={previousBodyPadding:null};function E(e,t){if(!t)return null;switch(t){case"select":case"textarea":case"file":return ae(e,T[t]);case"checkbox":return e.querySelector(".".concat(T.checkbox," input"));case"radio":return e.querySelector(".".concat(T.radio," input:checked"))||e.querySelector(".".concat(T.radio," input:first-child"));case"range":return e.querySelector(".".concat(T.range," input"));default:return ae(e,T.input)}}function A(e){if(e.focus(),"file"!==e.type){var t=e.value;e.value="",e.value=t}}function j(e,t,n){e&&t&&("string"==typeof t&&(t=t.split(/\s+/).filter(Boolean)),t.forEach((function(t){e.forEach?e.forEach((function(e){n?e.classList.add(t):e.classList.remove(t)})):n?e.classList.add(t):e.classList.remove(t)})))}function N(e,t,n){n||0===parseInt(n)?e.style[t]="number"==typeof n?n+"px":n:e.style.removeProperty(t)}function D(e,t){var n=1<arguments.length&&void 0!==t?t:"flex";e.style.opacity="",e.style.display=n}function L(e){e.style.opacity="",e.style.display="none"}function q(e,t,n){t?D(e,n):L(e)}function O(e){return!(!e||!(e.offsetWidth||e.offsetHeight||e.getClientRects().length))}function P(e){var t=window.getComputedStyle(e),n=parseFloat(t.getPropertyValue("animation-duration")||"0"),r=parseFloat(t.getPropertyValue("transition-duration")||"0");return 0<n||0<r}function H(){return document.body.querySelector("."+T.container)}function B(e){var t=H();return t?t.querySelector(e):null}function M(e){return B("."+e)}function R(){return M(T.popup)}function I(){return f(R().querySelectorAll("."+T.icon))}function _(){var e=I().filter((function(e){return O(e)}));return e.length?e[0]:null}function W(){return M(T.title)}function $(){return M(T.content)}function F(){return M(T.image)}function V(){return M(T["progress-steps"])}function z(){return M(T["validation-message"])}function U(){return B("."+T.actions+" ."+T.confirm)}function X(){return B("."+T.actions+" ."+T.cancel)}function Y(){return M(T.actions)}function Q(){return M(T.header)}function G(){return M(T.footer)}function K(){return M(T.close)}function J(){var e=f(R().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort((function(e,t){return e=parseInt(e.getAttribute("tabindex")),(t=parseInt(t.getAttribute("tabindex")))<e?1:e<t?-1:0})),t=f(R().querySelectorAll('\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n')).filter((function(e){return"-1"!==e.getAttribute("tabindex")}));return function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(e.concat(t)).filter((function(e){return O(e)}))}function Z(){return!se()&&!document.body.classList.contains(T["no-backdrop"])}function ee(){return"undefined"==typeof window||"undefined"==typeof document}function te(e){wt.isVisible()&&re!==e.target.value&&wt.resetValidationMessage(),re=e.target.value}function ne(t,n){t instanceof HTMLElement?n.appendChild(t):"object"===e(t)?ce(n,t):t&&(n.innerHTML=t)}var re,oe=function(e,t){j(e,t,!0)},ie=function(e,t){j(e,t,!1)},ae=function(e,t){for(var n=0;n<e.childNodes.length;n++)if(m(e.childNodes[n],t))return e.childNodes[n]},se=function(){return document.body.classList.contains(T["toast-shown"])},ue='\n <div aria-labelledby="'.concat(T.title,'" aria-describedby="').concat(T.content,'" class="').concat(T.popup,'" tabindex="-1">\n   <div class="').concat(T.header,'">\n     <ul class="').concat(T["progress-steps"],'"></ul>\n     <div class="').concat(T.icon," ").concat(k.error,'">\n       <span class="swal2-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span>\n     </div>\n     <div class="').concat(T.icon," ").concat(k.question,'"></div>\n     <div class="').concat(T.icon," ").concat(k.warning,'"></div>\n     <div class="').concat(T.icon," ").concat(k.info,'"></div>\n     <div class="').concat(T.icon," ").concat(k.success,'">\n       <div class="swal2-success-circular-line-left"></div>\n       <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n       <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n       <div class="swal2-success-circular-line-right"></div>\n     </div>\n     <img class="').concat(T.image,'" />\n     <h2 class="').concat(T.title,'" id="').concat(T.title,'"></h2>\n     <button type="button" class="').concat(T.close,'"></button>\n   </div>\n   <div class="').concat(T.content,'">\n     <div id="').concat(T.content,'"></div>\n     <input class="').concat(T.input,'" />\n     <input type="file" class="').concat(T.file,'" />\n     <div class="').concat(T.range,'">\n       <input type="range" />\n       <output></output>\n     </div>\n     <select class="').concat(T.select,'"></select>\n     <div class="').concat(T.radio,'"></div>\n     <label for="').concat(T.checkbox,'" class="').concat(T.checkbox,'">\n       <input type="checkbox" />\n       <span class="').concat(T.label,'"></span>\n     </label>\n     <textarea class="').concat(T.textarea,'"></textarea>\n     <div class="').concat(T["validation-message"],'" id="').concat(T["validation-message"],'"></div>\n   </div>\n   <div class="').concat(T.actions,'">\n     <button type="button" class="').concat(T.confirm,'">OK</button>\n     <button type="button" class="').concat(T.cancel,'">Cancel</button>\n   </div>\n   <div class="').concat(T.footer,'">\n   </div>\n </div>\n').replace(/(^|\n)\s*/g,""),ce=function(e,t){if(e.innerHTML="",0 in t)for(var n=0;n in t;n++)e.appendChild(t[n].cloneNode(!0));else e.appendChild(t.cloneNode(!0))},le=function(){if(ee())return!1;var e=document.createElement("div"),t={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&void 0!==e.style[n])return t[n];return!1}();function fe(e,t,n){q(e,n["showC"+t.substring(1)+"Button"],"inline-block"),e.innerHTML=n[t+"ButtonText"],e.setAttribute("aria-label",n[t+"ButtonAriaLabel"]),e.className=T[t],v(e,n.customClass,t+"Button"),oe(e,n[t+"ButtonClass"])}function de(e,t){e.placeholder&&!t.inputPlaceholder||(e.placeholder=t.inputPlaceholder)}var pe={promise:new WeakMap,innerParams:new WeakMap,domCache:new WeakMap},he=["input","file","range","select","radio","checkbox","textarea"],ge=function(e){var t=T[e]?T[e]:T.input;return ae($(),t)},me={};function ve(e,t){var n=$().querySelector("#"+T.content);t.html?(ne(t.html,n),D(n,"block")):t.text?(n.textContent=t.text,D(n,"block")):L(n),function(e,t){var n=$(),r=pe.innerParams.get(e),o=!r||t.input!==r.input;he.forEach((function(e){var r=T[e],i=ae(n,r);(function(e,t){var n=E($(),e);if(n)for(var r in function(e){for(var t=0;t<e.attributes.length;t++){var n=e.attributes[t].name;-1===["type","value","style"].indexOf(n)&&e.removeAttribute(n)}}(n),t)"range"===e&&"placeholder"===r||n.setAttribute(r,t[r])})(e,t.inputAttributes),i.className=r,o&&L(i)})),t.input&&(o&&function(e){if(!me[e.input])return d('Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "'.concat(e.input,'"'));var t=ge(e.input),n=me[e.input](t,e);D(n),setTimeout((function(){A(n)}))}(t),function(e){var t=ge(e.input);e.inputClass&&oe(t,e.inputClass),e.customClass&&oe(t,e.customClass.input)}(t))}(e,t),v($(),t.customClass,"content")}function ye(e,t){var n=V();if(!t.progressSteps||0===t.progressSteps.length)return L(n);D(n),n.innerHTML="";var r=parseInt(null===t.currentProgressStep?wt.getQueueStep():t.currentProgressStep);r>=t.progressSteps.length&&b("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),t.progressSteps.forEach((function(e,o){var i=function(e){var t=document.createElement("li");return oe(t,T["progress-step"]),t.innerHTML=e,t}(e);if(n.appendChild(i),o===r&&oe(i,T["active-progress-step"]),o!==t.progressSteps.length-1){var a=function(e){var t=document.createElement("li");return oe(t,T["progress-step-line"]),e.progressStepsDistance&&(t.style.width=e.progressStepsDistance),t}(e);n.appendChild(a)}}))}function be(e,t){!function(e,t){var n=R();N(n,"width",t.width),N(n,"padding",t.padding),t.background&&(n.style.background=t.background),n.className=T.popup,t.toast?(oe([document.documentElement,document.body],T["toast-shown"]),oe(n,T.toast)):oe(n,T.modal),v(n,t.customClass,"popup"),"string"==typeof t.customClass&&oe(n,t.customClass),j(n,T.noanimation,!t.animation)}(0,t),function(e,t){var n=H();n&&(function(e,t){"string"==typeof t?e.style.background=t:t||oe([document.documentElement,document.body],T["no-backdrop"])}(n,t.backdrop),!t.backdrop&&t.allowOutsideClick&&b('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`'),function(e,t){t in T?oe(e,T[t]):(b('The "position" parameter is not valid, defaulting to "center"'),oe(e,T.center))}(n,t.position),function(e,t){if(t&&"string"==typeof t){var n="grow-"+t;n in T&&oe(e,T[n])}}(n,t.grow),v(n,t.customClass,"container"),t.customContainerClass&&oe(n,t.customContainerClass))}(0,t),function(e,t){v(Q(),t.customClass,"header"),ye(0,t),function(e,t){var n=pe.innerParams.get(e);if(n&&t.type===n.type&&_())v(_(),t.customClass,"icon");else if(we(),t.type)if(Ce(),-1!==Object.keys(k).indexOf(t.type)){var r=B(".".concat(T.icon,".").concat(k[t.type]));D(r),v(r,t.customClass,"icon"),j(r,"swal2-animate-".concat(t.type,"-icon"),t.animation)}else d('Unknown type! Expected "success", "error", "warning", "info" or "question", got "'.concat(t.type,'"'))}(e,t),function(e,t){var n=F();if(!t.imageUrl)return L(n);D(n),n.setAttribute("src",t.imageUrl),n.setAttribute("alt",t.imageAlt),N(n,"width",t.imageWidth),N(n,"height",t.imageHeight),n.className=T.image,v(n,t.customClass,"image"),t.imageClass&&oe(n,t.imageClass)}(0,t),function(e,t){var n=W();q(n,t.title||t.titleText),t.title&&ne(t.title,n),t.titleText&&(n.innerText=t.titleText),v(n,t.customClass,"title")}(0,t),function(e,t){var n=K();n.innerHTML=t.closeButtonHtml,v(n,t.customClass,"closeButton"),q(n,t.showCloseButton),n.setAttribute("aria-label",t.closeButtonAriaLabel)}(0,t)}(e,t),ve(e,t),function(e,t){var n=Y(),r=U(),o=X();t.showConfirmButton||t.showCancelButton||L(n),v(n,t.customClass,"actions"),fe(r,"confirm",t),fe(o,"cancel",t),t.buttonsStyling?function(e,t,n){oe([e,t],T.styled),n.confirmButtonColor&&(e.style.backgroundColor=n.confirmButtonColor),n.cancelButtonColor&&(t.style.backgroundColor=n.cancelButtonColor);var r=window.getComputedStyle(e).getPropertyValue("background-color");e.style.borderLeftColor=r,e.style.borderRightColor=r}(r,o,t):(ie([r,o],T.styled),r.style.backgroundColor=r.style.borderLeftColor=r.style.borderRightColor="",o.style.backgroundColor=o.style.borderLeftColor=o.style.borderRightColor=""),t.reverseButtons&&r.parentNode.insertBefore(o,r)}(0,t),function(e,t){var n=G();q(n,t.footer),t.footer&&ne(t.footer,n),v(n,t.customClass,"footer")}(0,t),"function"==typeof t.onRender&&t.onRender(R())}function xe(){return U()&&U().click()}me.text=me.email=me.password=me.number=me.tel=me.url=function(t,n){return"string"==typeof n.inputValue||"number"==typeof n.inputValue?t.value=n.inputValue:h(n.inputValue)||b('Unexpected type of inputValue! Expected "string", "number" or "Promise", got "'.concat(e(n.inputValue),'"')),de(t,n),t.type=n.input,t},me.file=function(e,t){return de(e,t),e},me.range=function(e,t){var n=e.querySelector("input"),r=e.querySelector("output");return n.value=t.inputValue,n.type=t.input,r.value=t.inputValue,e},me.select=function(e,t){if(e.innerHTML="",t.inputPlaceholder){var n=document.createElement("option");n.innerHTML=t.inputPlaceholder,n.value="",n.disabled=!0,n.selected=!0,e.appendChild(n)}return e},me.radio=function(e){return e.innerHTML="",e},me.checkbox=function(e,t){var n=E($(),"checkbox");return n.value=1,n.id=T.checkbox,n.checked=Boolean(t.inputValue),e.querySelector("span").innerHTML=t.inputPlaceholder,e},me.textarea=function(e,t){if(e.value=t.inputValue,de(e,t),"MutationObserver"in window){var n=parseInt(window.getComputedStyle(R()).width),r=parseInt(window.getComputedStyle(R()).paddingLeft)+parseInt(window.getComputedStyle(R()).paddingRight);new MutationObserver((function(){var t=e.offsetWidth+r;R().style.width=n<t?t+"px":null})).observe(e,{attributes:!0,attributeFilter:["style"]})}return e};var we=function(){for(var e=I(),t=0;t<e.length;t++)L(e[t])},Ce=function(){for(var e=R(),t=window.getComputedStyle(e).getPropertyValue("background-color"),n=e.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix"),r=0;r<n.length;r++)n[r].style.backgroundColor=t};function Te(){var e=R();e||wt.fire(""),e=R();var t=Y(),n=U(),r=X();D(t),D(n),oe([e,t],T.loading),n.disabled=!0,r.disabled=!0,e.setAttribute("data-loading",!0),e.setAttribute("aria-busy",!0),e.focus()}function ke(e){return Object.prototype.hasOwnProperty.call(je,e)}function Se(e){return De[e]}var Ee=[],Ae={},je={title:"",titleText:"",text:"",html:"",footer:"",type:null,toast:!1,customClass:"",customContainerClass:"",target:"body",backdrop:!0,animation:!0,heightAuto:!0,allowOutsideClick:!0,allowEscapeKey:!0,allowEnterKey:!0,stopKeydownPropagation:!0,keydownListenerCapture:!1,showConfirmButton:!0,showCancelButton:!1,preConfirm:null,confirmButtonText:"OK",confirmButtonAriaLabel:"",confirmButtonColor:null,confirmButtonClass:"",cancelButtonText:"Cancel",cancelButtonAriaLabel:"",cancelButtonColor:null,cancelButtonClass:"",buttonsStyling:!0,reverseButtons:!1,focusConfirm:!0,focusCancel:!1,showCloseButton:!1,closeButtonHtml:"&times;",closeButtonAriaLabel:"Close this dialog",showLoaderOnConfirm:!1,imageUrl:null,imageWidth:null,imageHeight:null,imageAlt:"",imageClass:"",timer:null,width:null,padding:null,background:null,input:null,inputPlaceholder:"",inputValue:"",inputOptions:{},inputAutoTrim:!0,inputClass:"",inputAttributes:{},inputValidator:null,validationMessage:null,grow:!1,position:"center",progressSteps:[],currentProgressStep:null,progressStepsDistance:null,onBeforeOpen:null,onOpen:null,onRender:null,onClose:null,onAfterClose:null,scrollbarPadding:!0},Ne=["title","titleText","text","html","type","customClass","showConfirmButton","showCancelButton","confirmButtonText","confirmButtonAriaLabel","confirmButtonColor","confirmButtonClass","cancelButtonText","cancelButtonAriaLabel","cancelButtonColor","cancelButtonClass","buttonsStyling","reverseButtons","imageUrl","imageWidth","imageHeigth","imageAlt","imageClass","progressSteps","currentProgressStep"],De={customContainerClass:"customClass",confirmButtonClass:"customClass",cancelButtonClass:"customClass",imageClass:"customClass",inputClass:"customClass"},Le=["allowOutsideClick","allowEnterKey","backdrop","focusConfirm","focusCancel","heightAuto","keydownListenerCapture"],qe=Object.freeze({isValidParameter:ke,isUpdatableParameter:function(e){return-1!==Ne.indexOf(e)},isDeprecatedParameter:Se,argsToParams:function(t){var n={};switch(e(t[0])){case"object":o(n,t[0]);break;default:["title","html","type"].forEach((function(r,o){switch(e(t[o])){case"string":n[r]=t[o];break;case"undefined":break;default:d("Unexpected type of ".concat(r,'! Expected "string", got ').concat(e(t[o])))}}))}return n},isVisible:function(){return O(R())},clickConfirm:xe,clickCancel:function(){return X()&&X().click()},getContainer:H,getPopup:R,getTitle:W,getContent:$,getImage:F,getIcon:_,getIcons:I,getCloseButton:K,getActions:Y,getConfirmButton:U,getCancelButton:X,getHeader:Q,getFooter:G,getFocusableElements:J,getValidationMessage:z,isLoading:function(){return R().hasAttribute("data-loading")},fire:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return s(this,t)},mixin:function(e){return function(n){function s(){return t(this,s),u(this,i(s).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(s,n),r(s,[{key:"_main",value:function(t){return c(i(s.prototype),"_main",this).call(this,o({},e,t))}}]),s}(this)},queue:function(e){var t=this;function n(e,t){Ee=[],document.body.removeAttribute("data-swal2-queue-step"),e(t)}Ee=e;var r=[];return new Promise((function(e){!function o(i,a){i<Ee.length?(document.body.setAttribute("data-swal2-queue-step",i),t.fire(Ee[i]).then((function(t){void 0!==t.value?(r.push(t.value),o(i+1,a)):n(e,{dismiss:t.dismiss})}))):n(e,{value:r})}(0)}))},getQueueStep:function(){return document.body.getAttribute("data-swal2-queue-step")},insertQueueStep:function(e,t){return t&&t<Ee.length?Ee.splice(t,0,e):Ee.push(e)},deleteQueueStep:function(e){void 0!==Ee[e]&&Ee.splice(e,1)},showLoading:Te,enableLoading:Te,getTimerLeft:function(){return Ae.timeout&&Ae.timeout.getTimerLeft()},stopTimer:function(){return Ae.timeout&&Ae.timeout.stop()},resumeTimer:function(){return Ae.timeout&&Ae.timeout.start()},toggleTimer:function(){var e=Ae.timeout;return e&&(e.running?e.stop():e.start())},increaseTimer:function(e){return Ae.timeout&&Ae.timeout.increase(e)},isTimerRunning:function(){return Ae.timeout&&Ae.timeout.isRunning()}});function Oe(){var e=pe.innerParams.get(this),t=pe.domCache.get(this);e.showConfirmButton||(L(t.confirmButton),e.showCancelButton||L(t.actions)),ie([t.popup,t.actions],T.loading),t.popup.removeAttribute("aria-busy"),t.popup.removeAttribute("data-loading"),t.confirmButton.disabled=!1,t.cancelButton.disabled=!1}function Pe(){return!!window.MSInputMethodContext&&!!document.documentMode}function He(){var e=H(),t=R();e.style.removeProperty("align-items"),t.offsetTop<0&&(e.style.alignItems="flex-start")}var Be={swalPromiseResolve:new WeakMap};function Me(e,t,n,r){n?We(e,r):(new Promise((function(e){var t=window.scrollX,n=window.scrollY;Ae.restoreFocusTimeout=setTimeout((function(){Ae.previousActiveElement&&Ae.previousActiveElement.focus?(Ae.previousActiveElement.focus(),Ae.previousActiveElement=null):document.body&&document.body.focus(),e()}),100),void 0!==t&&void 0!==n&&window.scrollTo(t,n)})).then((function(){return We(e,r)})),Ae.keydownTarget.removeEventListener("keydown",Ae.keydownHandler,{capture:Ae.keydownListenerCapture}),Ae.keydownHandlerAdded=!1),t.parentNode&&t.parentNode.removeChild(t),Z()&&(null!==S.previousBodyPadding&&(document.body.style.paddingRight=S.previousBodyPadding+"px",S.previousBodyPadding=null),function(){if(m(document.body,T.iosfix)){var e=parseInt(document.body.style.top,10);ie(document.body,T.iosfix),document.body.style.top="",document.body.scrollTop=-1*e}}(),"undefined"!=typeof window&&Pe()&&window.removeEventListener("resize",He),f(document.body.children).forEach((function(e){e.hasAttribute("data-previous-aria-hidden")?(e.setAttribute("aria-hidden",e.getAttribute("data-previous-aria-hidden")),e.removeAttribute("data-previous-aria-hidden")):e.removeAttribute("aria-hidden")}))),ie([document.documentElement,document.body],[T.shown,T["height-auto"],T["no-backdrop"],T["toast-shown"],T["toast-column"]])}function Re(e){var t=R();if(t&&!m(t,T.hide)){var n=pe.innerParams.get(this);if(n){var r=Be.swalPromiseResolve.get(this);ie(t,T.show),oe(t,T.hide),function(e,t,n){var r=H(),o=le&&P(t),i=n.onClose,a=n.onAfterClose;null!==i&&"function"==typeof i&&i(t),o?_e(e,t,r,a):Me(e,r,se(),a)}(this,t,n),r(e||{})}}}function Ie(e){for(var t in e)e[t]=new WeakMap}var _e=function(e,t,n,r){Ae.swalCloseEventFinishedCallback=Me.bind(null,e,n,se(),r),t.addEventListener(le,(function(e){e.target===t&&(Ae.swalCloseEventFinishedCallback(),delete Ae.swalCloseEventFinishedCallback)}))},We=function(e,t){setTimeout((function(){null!==t&&"function"==typeof t&&t(),R()||function(e){delete e.params,delete Ae.keydownHandler,delete Ae.keydownTarget,Ie(pe),Ie(Be)}(e)}))};function $e(e,t,n){var r=pe.domCache.get(e);t.forEach((function(e){r[e].disabled=n}))}function Fe(e,t){if(!e)return!1;if("radio"===e.type)for(var n=e.parentNode.parentNode.querySelectorAll("input"),r=0;r<n.length;r++)n[r].disabled=t;else e.disabled=t}var Ve=function(){function e(n,r){t(this,e),this.callback=n,this.remaining=r,this.running=!1,this.start()}return r(e,[{key:"start",value:function(){return this.running||(this.running=!0,this.started=new Date,this.id=setTimeout(this.callback,this.remaining)),this.remaining}},{key:"stop",value:function(){return this.running&&(this.running=!1,clearTimeout(this.id),this.remaining-=new Date-this.started),this.remaining}},{key:"increase",value:function(e){var t=this.running;return t&&this.stop(),this.remaining+=e,t&&this.start(),this.remaining}},{key:"getTimerLeft",value:function(){return this.running&&(this.stop(),this.start()),this.remaining}},{key:"isRunning",value:function(){return this.running}}]),e}(),ze={email:function(e,t){return/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid email address")},url:function(e,t){return/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid URL")}};function Ue(e){!function(e){e.inputValidator||Object.keys(ze).forEach((function(t){e.input===t&&(e.inputValidator=ze[t])}))}(e),e.showLoaderOnConfirm&&!e.preConfirm&&b("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request"),e.animation=w(e.animation),function(e){e.target&&("string"!=typeof e.target||document.querySelector(e.target))&&("string"==typeof e.target||e.target.appendChild)||(b('Target parameter is not valid, defaulting to "body"'),e.target="body")}(e),"string"==typeof e.title&&(e.title=e.title.split("\n").join("<br />")),function(e){if(function(){var e=H();e&&(e.parentNode.removeChild(e),ie([document.documentElement,document.body],[T["no-backdrop"],T["toast-shown"],T["has-column"]]))}(),ee())d("SweetAlert2 requires document to initialize");else{var t=document.createElement("div");t.className=T.container,t.innerHTML=ue;var n=function(e){return"string"==typeof e?document.querySelector(e):e}(e.target);n.appendChild(t),function(e){var t=R();t.setAttribute("role",e.toast?"alert":"dialog"),t.setAttribute("aria-live",e.toast?"polite":"assertive"),e.toast||t.setAttribute("aria-modal","true")}(e),function(e){"rtl"===window.getComputedStyle(e).direction&&oe(H(),T.rtl)}(n),function(){var e=$(),t=ae(e,T.input),n=ae(e,T.file),r=e.querySelector(".".concat(T.range," input")),o=e.querySelector(".".concat(T.range," output")),i=ae(e,T.select),a=e.querySelector(".".concat(T.checkbox," input")),s=ae(e,T.textarea);t.oninput=te,n.onchange=te,i.onchange=te,a.onchange=te,s.oninput=te,r.oninput=function(e){te(e),o.value=r.value},r.onchange=function(e){te(e),r.nextSibling.value=r.value}}()}}(e)}function Xe(e,t){e.removeEventListener(le,Xe),t.style.overflowY="auto"}function Ye(e,t){e.closePopup({value:t})}function Qe(e,t,n){for(var r=J(),o=0;o<r.length;o++)return(t+=n)===r.length?t=0:-1===t&&(t=r.length-1),r[t].focus();R().focus()}var Ge,Ke=function(e,t){le&&P(t)?(e.style.overflowY="hidden",t.addEventListener(le,Xe.bind(null,t,e))):e.style.overflowY="auto"},Je=function(e,t){!function(){if((/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream||"MacIntel"===navigator.platform&&1<navigator.maxTouchPoints)&&!m(document.body,T.iosfix)){var e=document.body.scrollTop;document.body.style.top=-1*e+"px",oe(document.body,T.iosfix),function(){var e,t=H();t.ontouchstart=function(n){e=n.target===t||!function(e){return!!(e.scrollHeight>e.clientHeight)}(t)&&"INPUT"!==n.target.tagName},t.ontouchmove=function(t){e&&(t.preventDefault(),t.stopPropagation())}}()}}(),"undefined"!=typeof window&&Pe()&&(He(),window.addEventListener("resize",He)),f(document.body.children).forEach((function(e){e===H()||function(e,t){if("function"==typeof e.contains)return e.contains(t)}(e,H())||(e.hasAttribute("aria-hidden")&&e.setAttribute("data-previous-aria-hidden",e.getAttribute("aria-hidden")),e.setAttribute("aria-hidden","true"))})),t&&null===S.previousBodyPadding&&document.body.scrollHeight>window.innerHeight&&(S.previousBodyPadding=parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right")),document.body.style.paddingRight=S.previousBodyPadding+function(){if("ontouchstart"in window||navigator.msMaxTouchPoints)return 0;var e=document.createElement("div");e.style.width="50px",e.style.height="50px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}()+"px"),setTimeout((function(){e.scrollTop=0}))},Ze=function(e,t,n){n.animation&&oe(t,T.show),D(t),oe([document.documentElement,document.body,e],T.shown),n.heightAuto&&n.backdrop&&!n.toast&&oe([document.documentElement,document.body],T["height-auto"])},et=function(t,n){function r(e){return nt[n.input](o,rt(e),n)}var o=$();h(n.inputOptions)?(Te(),n.inputOptions.then((function(e){t.hideLoading(),r(e)}))):"object"===e(n.inputOptions)?r(n.inputOptions):d("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(e(n.inputOptions)))},tt=function(e,t){var n=e.getInput();L(n),t.inputValue.then((function(r){n.value="number"===t.input?parseFloat(r)||0:r+"",D(n),n.focus(),e.hideLoading()})).catch((function(t){d("Error in inputValue promise: "+t),n.value="",D(n),n.focus(),e.hideLoading()}))},nt={select:function(e,t,n){var r=ae(e,T.select);t.forEach((function(e){var t=e[0],o=e[1],i=document.createElement("option");i.value=t,i.innerHTML=o,n.inputValue.toString()===t.toString()&&(i.selected=!0),r.appendChild(i)})),r.focus()},radio:function(e,t,n){var r=ae(e,T.radio);t.forEach((function(e){var t=e[0],o=e[1],i=document.createElement("input"),a=document.createElement("label");i.type="radio",i.name=T.radio,i.value=t,n.inputValue.toString()===t.toString()&&(i.checked=!0);var s=document.createElement("span");s.innerHTML=o,s.className=T.label,a.appendChild(i),a.appendChild(s),r.appendChild(a)}));var o=r.querySelectorAll("input");o.length&&o[0].focus()}},rt=function(e){var t=[];return"undefined"!=typeof Map&&e instanceof Map?e.forEach((function(e,n){t.push([n,e])})):Object.keys(e).forEach((function(n){t.push([n,e[n]])})),t},ot=function(e,t){var n=function(e,t){var n=e.getInput();if(!n)return null;switch(t.input){case"checkbox":return function(e){return e.checked?1:0}(n);case"radio":return function(e){return e.checked?e.value:null}(n);case"file":return function(e){return e.files.length?null!==e.getAttribute("multiple")?e.files:e.files[0]:null}(n);default:return t.inputAutoTrim?n.value.trim():n.value}}(e,t);t.inputValidator?(e.disableInput(),Promise.resolve().then((function(){return t.inputValidator(n,t.validationMessage)})).then((function(r){e.enableButtons(),e.enableInput(),r?e.showValidationMessage(r):it(e,t,n)}))):e.getInput().checkValidity()?it(e,t,n):(e.enableButtons(),e.showValidationMessage(t.validationMessage))},it=function(e,t,n){t.showLoaderOnConfirm&&Te(),t.preConfirm?(e.resetValidationMessage(),Promise.resolve().then((function(){return t.preConfirm(n,t.validationMessage)})).then((function(t){O(z())||!1===t?e.hideLoading():Ye(e,void 0===t?n:t)}))):Ye(e,n)},at=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Left","Right","Up","Down"],st=["Escape","Esc"],ut=function(e,t,n,r){n.stopKeydownPropagation&&t.stopPropagation(),"Enter"===t.key?ct(e,t,n):"Tab"===t.key?lt(t,n):-1!==at.indexOf(t.key)?ft():-1!==st.indexOf(t.key)&&dt(t,n,r)},ct=function(e,t,n){if(!t.isComposing&&t.target&&e.getInput()&&t.target.outerHTML===e.getInput().outerHTML){if(-1!==["textarea","file"].indexOf(n.input))return;xe(),t.preventDefault()}},lt=function(e,t){for(var n=e.target,r=J(),o=-1,i=0;i<r.length;i++)if(n===r[i]){o=i;break}e.shiftKey?Qe(0,o,-1):Qe(0,o,1),e.stopPropagation(),e.preventDefault()},ft=function(){var e=U(),t=X();document.activeElement===e&&O(t)?t.focus():document.activeElement===t&&O(e)&&e.focus()},dt=function(e,t,n){w(t.allowEscapeKey)&&(e.preventDefault(),n(C.esc))},pt=function(e,t,n){e.popup.onclick=function(){t.showConfirmButton||t.showCancelButton||t.showCloseButton||t.input||n(C.close)}},ht=!1,gt=function(e){e.popup.onmousedown=function(){e.container.onmouseup=function(t){e.container.onmouseup=void 0,t.target===e.container&&(ht=!0)}}},mt=function(e){e.container.onmousedown=function(){e.popup.onmouseup=function(t){e.popup.onmouseup=void 0,t.target!==e.popup&&!e.popup.contains(t.target)||(ht=!0)}}},vt=function(e,t,n){e.container.onclick=function(r){ht?ht=!1:r.target===e.container&&w(t.allowOutsideClick)&&n(C.backdrop)}},yt=function(){document.activeElement&&"function"==typeof document.activeElement.blur&&document.activeElement.blur()},bt=Object.freeze({hideLoading:Oe,disableLoading:Oe,getInput:function(e){var t=pe.innerParams.get(e||this),n=pe.domCache.get(e||this);return n?E(n.content,t.input):null},close:Re,closePopup:Re,closeModal:Re,closeToast:Re,enableButtons:function(){$e(this,["confirmButton","cancelButton"],!1)},disableButtons:function(){$e(this,["confirmButton","cancelButton"],!0)},enableConfirmButton:function(){p("Swal.enableConfirmButton()","Swal.getConfirmButton().removeAttribute('disabled')"),$e(this,["confirmButton"],!1)},disableConfirmButton:function(){p("Swal.disableConfirmButton()","Swal.getConfirmButton().setAttribute('disabled', '')"),$e(this,["confirmButton"],!0)},enableInput:function(){return Fe(this.getInput(),!1)},disableInput:function(){return Fe(this.getInput(),!0)},showValidationMessage:function(e){var t=pe.domCache.get(this);t.validationMessage.innerHTML=e;var n=window.getComputedStyle(t.popup);t.validationMessage.style.marginLeft="-".concat(n.getPropertyValue("padding-left")),t.validationMessage.style.marginRight="-".concat(n.getPropertyValue("padding-right")),D(t.validationMessage);var r=this.getInput();r&&(r.setAttribute("aria-invalid",!0),r.setAttribute("aria-describedBy",T["validation-message"]),A(r),oe(r,T.inputerror))},resetValidationMessage:function(){var e=pe.domCache.get(this);e.validationMessage&&L(e.validationMessage);var t=this.getInput();t&&(t.removeAttribute("aria-invalid"),t.removeAttribute("aria-describedBy"),ie(t,T.inputerror))},getProgressSteps:function(){return p("Swal.getProgressSteps()","const swalInstance = Swal.fire({progressSteps: ['1', '2', '3']}); const progressSteps = swalInstance.params.progressSteps"),pe.innerParams.get(this).progressSteps},setProgressSteps:function(e){p("Swal.setProgressSteps()","Swal.update()");var t=o({},pe.innerParams.get(this),{progressSteps:e});ye(0,t),pe.innerParams.set(this,t)},showProgressSteps:function(){D(pe.domCache.get(this).progressSteps)},hideProgressSteps:function(){L(pe.domCache.get(this).progressSteps)},_main:function(e){!function(e){for(var t in e)ke(o=t)||b('Unknown parameter "'.concat(o,'"')),e.toast&&(r=t,-1!==Le.indexOf(r)&&b('The parameter "'.concat(r,'" is incompatible with toasts'))),Se(n=void 0)&&p(n,Se(n));var n,r,o}(e),R()&&Ae.swalCloseEventFinishedCallback&&(Ae.swalCloseEventFinishedCallback(),delete Ae.swalCloseEventFinishedCallback),Ae.deferDisposalTimer&&(clearTimeout(Ae.deferDisposalTimer),delete Ae.deferDisposalTimer);var t=o({},je,e);Ue(t),Object.freeze(t),Ae.timeout&&(Ae.timeout.stop(),delete Ae.timeout),clearTimeout(Ae.restoreFocusTimeout);var n=function(e){var t={popup:R(),container:H(),content:$(),actions:Y(),confirmButton:U(),cancelButton:X(),closeButton:K(),validationMessage:z(),progressSteps:V()};return pe.domCache.set(e,t),t}(this);return be(this,t),pe.innerParams.set(this,t),function(e,t,n){return new Promise((function(r){var o=function(t){e.closePopup({dismiss:t})};Be.swalPromiseResolve.set(e,r),function(e,t,n){t.timer&&(e.timeout=new Ve((function(){n("timer"),delete e.timeout}),t.timer))}(Ae,n,o),t.confirmButton.onclick=function(){return function(e,t){e.disableButtons(),t.input?ot(e,t):it(e,t,!0)}(e,n)},t.cancelButton.onclick=function(){return function(e,t){e.disableButtons(),t(C.cancel)}(e,o)},t.closeButton.onclick=function(){return o(C.close)},function(e,t,n){t.toast?pt(e,t,n):(gt(e),mt(e),vt(e,t,n))}(t,n,o),function(e,t,n,r){t.keydownTarget&&t.keydownHandlerAdded&&(t.keydownTarget.removeEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!1),n.toast||(t.keydownHandler=function(t){return ut(e,t,n,r)},t.keydownTarget=n.keydownListenerCapture?window:R(),t.keydownListenerCapture=n.keydownListenerCapture,t.keydownTarget.addEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!0)}(e,Ae,n,o),n.toast&&(n.input||n.footer||n.showCloseButton)?oe(document.body,T["toast-column"]):ie(document.body,T["toast-column"]),function(e,t){"select"===t.input||"radio"===t.input?et(e,t):-1!==["text","email","number","tel","textarea"].indexOf(t.input)&&h(t.inputValue)&&tt(e,t)}(e,n),function(e){var t=H(),n=R();"function"==typeof e.onBeforeOpen&&e.onBeforeOpen(n),Ze(t,n,e),Ke(t,n),Z()&&Je(t,e.scrollbarPadding),se()||Ae.previousActiveElement||(Ae.previousActiveElement=document.activeElement),"function"==typeof e.onOpen&&setTimeout((function(){return e.onOpen(n)}))}(n),function(e,t){t.toast||(w(t.allowEnterKey)?t.focusCancel&&O(e.cancelButton)?e.cancelButton.focus():t.focusConfirm&&O(e.confirmButton)?e.confirmButton.focus():Qe(0,-1,1):yt())}(t,n),t.container.scrollTop=0}))}(this,n,t)},update:function(e){var t=R();if(!t||m(t,T.hide))return b("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");var n={};Object.keys(e).forEach((function(t){wt.isUpdatableParameter(t)?n[t]=e[t]:b('Invalid parameter to update: "'.concat(t,'". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js'))}));var r=o({},pe.innerParams.get(this),n);be(this,r),pe.innerParams.set(this,r),Object.defineProperties(this,{params:{value:o({},this.params,e),writable:!1,enumerable:!0}})}});function xt(){if("undefined"!=typeof window){"undefined"==typeof Promise&&d("This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)"),Ge=this;for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=Object.freeze(this.constructor.argsToParams(t));Object.defineProperties(this,{params:{value:r,writable:!1,enumerable:!0,configurable:!0}});var o=this._main(this.params);pe.promise.set(this,o)}}xt.prototype.then=function(e){return pe.promise.get(this).then(e)},xt.prototype.finally=function(e){return pe.promise.get(this).finally(e)},o(xt.prototype,bt),o(xt,qe),Object.keys(bt).forEach((function(e){xt[e]=function(){var t;if(Ge)return(t=Ge)[e].apply(t,arguments)}})),xt.DismissReason=C,xt.version="8.19.0";var wt=xt;return wt.default=wt}(),void 0!==this&&this.Sweetalert2&&(this.swal=this.sweetAlert=this.Swal=this.SweetAlert=this.Sweetalert2)},5:function(e,t,n){"use strict";n.r(t);var r=n(1);$(document).on("click","[data-accordion-click]",(function(){var e,t,n=$(this),o=n.attr("data-accordion-click"),i=n.closest(".js_accordion_item"),a=n.closest(".js_accordion_parent"),s='[data-accordion="'+o+'"]',u=a.find(s),c=$("body").attr("data-js-anim");if(a.hasClass("js_toggle"))var l=a.find("[data-accordion]"),f=a.find($("[data-accordion-click]")),d=a.find(".js_accordion_item");if(-1!=c.indexOf("anim")||-1!=window.location.href.indexOf("login"))var p=300;n.hasClass("is_active")?(n.removeClass("is_active"),i.removeClass("is_active"),-1!=c.indexOf("anim")||-1!=window.location.href.indexOf("login")?u.slideUp(p,(function(){$(this).removeClass("is_active").removeAttr("style")})):u.removeClass("is_active")):(a.hasClass("js_toggle")&&(f.removeClass("is_active"),d.removeClass("is_active"),-1!=c.indexOf("anim")||-1!=window.location.href.indexOf("login")?l.slideUp(p,(function(){$(this).removeClass("is_active").removeAttr("style")})):l.removeClass("is_active")),n.addClass("is_active"),i.addClass("is_active"),-1!=c.indexOf("anim")||-1!=window.location.href.indexOf("login")?u.slideDown(p,(function(){$(this).addClass("is_active").removeAttr("style"),Object(r.default)()})):(u.addClass("is_active"),Object(r.default)())),a.hasClass("js_hash")&&(e=$(".accordion:visible"),t="",$.each(e,(function(e,n){0!=$(n).find("[data-accordion-click].is_active").length?t+="!"+e+"-"+$(n).find("[data-accordion-click].is_active").attr("data-accordion-click"):t+="!"+e+"-"+$(n).find(".js_accordion_item").eq(0).find("[data-accordion-click]").attr("data-accordion-click")})),window.location.hash=t)})),setTimeout((function(){!function(){if(""!=window.location.hash){var e=window.location.hash.split("-")[1];$('.js_accordion_link[data-accordion-click="'+e+'"]').trigger("click")}}()}),1e3)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2FkbWlucGFuZWwvanMvY29tcG9uZW50cy9pbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYWRtaW5wYW5lbC9qcy9sb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2VldGFsZXJ0Mi9kaXN0L3N3ZWV0YWxlcnQyLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYWRtaW5wYW5lbC9qcy9jb21wb25lbnRzL2FjY29yZGlvbi5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIiQiLCJkb2N1bWVudCIsIm9uIiwiaW5wdXRGIiwidGhpcyIsImlucHV0UiIsImNsb3Nlc3QiLCJ2YWwiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJmb2N1c0ZpcnN0SW5wdXQiLCJlYWNoIiwiaW5wdXRSUCIsImlzIiwiZmluZCIsImVxIiwiZm9jdXMiLCJyZXF1aXJlIiwid2luZG93IiwialF1ZXJ5IiwiU3dhbCIsImdsb2JhbCIsImZhY3RvcnkiLCJ3IiwiRXJyb3IiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImZsYXQiLCJhcnJheSIsImNvbmNhdCIsImFwcGx5IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsIml0ZXJhdG9yIiwic3BsaXQiLCJfaSIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsIkRhdGUiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaE5hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwibmV4dCIsImNoaWxkTm9kZXMiLCJlIiwiZWxzIiwic2VlZCIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwiaGFzIiwidGFyZ2V0cyIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsIl8iLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJlbXB0eSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsInBhcnNlSW50IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJDIiwiZyIsInUiLCJ5IiwieCIsIkUiLCJmIiwiUyIsImgiLCJUIiwiayIsInVlIiwiQSIsIk4iLCJEIiwicSIsIkwiLCJIIiwiTyIsIlAiLCJSIiwiTSIsIkkiLCJXIiwiRiIsIkIiLCJ6IiwiVSIsIlgiLCJWIiwiRyIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJZIiwiUSIsIkoiLCJLIiwiWiIsImVlIiwidGUiLCJuZSIsInJlIiwiaWUiLCJvZSIsImFlIiwiYmUiLCJzZSIsInllIiwieGUiLCJsZSIsImNlIiwiZmUiLCJwZSIsImRlIiwiaGUiLCJnZSIsInZlIiwiZW5hYmxlZCIsImhlYWRlciIsImx0IiwiZ3QiLCJudGgiLCJtZSIsIndlIiwiVGUiLCJDZSIsIkVlIiwiU2UiLCJrZSIsIkFlIiwiTmUiLCJEZSIsImplIiwicWUiLCJMZSIsIkhlIiwiT2UiLCJQZSIsIlJlIiwiTWUiLCJJZSIsIldlIiwiRmUiLCJCZSIsIiRlIiwiX2UiLCJ6ZSIsIlVlIiwiWGUiLCJWZSIsIkdlIiwiWWUiLCJRZSIsIkplIiwiS2UiLCJaZSIsImV0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJ0dCIsIm50IiwicnQiLCJpdCIsIm90IiwiYXQiLCJzdCIsInV0IiwiZnQiLCJwdCIsImR0IiwiaHQiLCJ2dCIsInl0IiwibXQiLCJ4dCIsImJ0Iiwid3QiLCJUdCIsIkN0IiwiRXQiLCJTdCIsImt0IiwiQXQiLCJOdCIsIkR0IiwianQiLCJxdCIsIkx0IiwiSHQiLCJPdCIsIlB0IiwiUnQiLCJNdCIsIkl0IiwiV3QiLCJGdCIsIkJ0IiwiJHQiLCJfdCIsInp0IiwiVXQiLCJYdCIsIlZ0IiwiR3QiLCJZdCIsIlF0IiwiYXNzaWduIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiRnVuY3Rpb24iLCJSZWZlcmVuY2VFcnJvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlByb21pc2UiLCJjbGFzc0xpc3QiLCJmb3JFYWNoIiwiZnJlZXplIiwiY2FuY2VsIiwiYmFja2Ryb3AiLCJjbG9zZSIsImVzYyIsInByZXZpb3VzQm9keVBhZGRpbmciLCJxdWVyeVNlbGVjdG9yIiwicmFuZ2UiLCJCb29sZWFuIiwicmVtb3ZlUHJvcGVydHkiLCJwb3B1cCIsImljb24iLCJ0aXRsZSIsImFjdGlvbnMiLCJjb25maXJtIiwiZm9vdGVyIiwiaXNWaXNpYmxlIiwicmVzZXRWYWxpZGF0aW9uTWVzc2FnZSIsIkhUTUxFbGVtZW50IiwicXVlc3Rpb24iLCJ3YXJuaW5nIiwiaW5mbyIsImxhYmVsIiwidGV4dGFyZWEiLCJXZWJraXRBbmltYXRpb24iLCJPQW5pbWF0aW9uIiwic3Vic3RyaW5nIiwiY3VzdG9tQ2xhc3MiLCJwbGFjZWhvbGRlciIsImlucHV0UGxhY2Vob2xkZXIiLCJXZWFrTWFwIiwiaW5uZXJQYXJhbXMiLCJkb21DYWNoZSIsImlucHV0QXR0cmlidXRlcyIsImlucHV0Q2xhc3MiLCJwcm9ncmVzc1N0ZXBzIiwiY3VycmVudFByb2dyZXNzU3RlcCIsImdldFF1ZXVlU3RlcCIsInByb2dyZXNzU3RlcHNEaXN0YW5jZSIsImJhY2tncm91bmQiLCJ0b2FzdCIsIm1vZGFsIiwibm9hbmltYXRpb24iLCJhbGxvd091dHNpZGVDbGljayIsImNlbnRlciIsImdyb3ciLCJjdXN0b21Db250YWluZXJDbGFzcyIsImltYWdlVXJsIiwiaW1hZ2VBbHQiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJpbWFnZUNsYXNzIiwidGl0bGVUZXh0IiwiaW5uZXJUZXh0IiwiY2xvc2VCdXR0b25IdG1sIiwic2hvd0Nsb3NlQnV0dG9uIiwiY2xvc2VCdXR0b25BcmlhTGFiZWwiLCJzaG93Q29uZmlybUJ1dHRvbiIsInNob3dDYW5jZWxCdXR0b24iLCJidXR0b25zU3R5bGluZyIsInN0eWxlZCIsImNvbmZpcm1CdXR0b25Db2xvciIsImJhY2tncm91bmRDb2xvciIsImNhbmNlbEJ1dHRvbkNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsInJldmVyc2VCdXR0b25zIiwib25SZW5kZXIiLCJlbWFpbCIsIm51bWJlciIsInRlbCIsImlucHV0VmFsdWUiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiYXR0cmlidXRlRmlsdGVyIiwibG9hZGluZyIsImhlaWdodEF1dG8iLCJhbGxvd0VzY2FwZUtleSIsImFsbG93RW50ZXJLZXkiLCJzdG9wS2V5ZG93blByb3BhZ2F0aW9uIiwia2V5ZG93bkxpc3RlbmVyQ2FwdHVyZSIsInByZUNvbmZpcm0iLCJjb25maXJtQnV0dG9uVGV4dCIsImNvbmZpcm1CdXR0b25BcmlhTGFiZWwiLCJjb25maXJtQnV0dG9uQ2xhc3MiLCJjYW5jZWxCdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uQXJpYUxhYmVsIiwiY2FuY2VsQnV0dG9uQ2xhc3MiLCJmb2N1c0NvbmZpcm0iLCJmb2N1c0NhbmNlbCIsInNob3dMb2FkZXJPbkNvbmZpcm0iLCJpbnB1dE9wdGlvbnMiLCJpbnB1dEF1dG9UcmltIiwiaW5wdXRWYWxpZGF0b3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIm9uQmVmb3JlT3BlbiIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJvbkFmdGVyQ2xvc2UiLCJzY3JvbGxiYXJQYWRkaW5nIiwiaXNWYWxpZFBhcmFtZXRlciIsImlzVXBkYXRhYmxlUGFyYW1ldGVyIiwiaXNEZXByZWNhdGVkUGFyYW1ldGVyIiwiYXJnc1RvUGFyYW1zIiwiY2xpY2tDb25maXJtIiwiY2xpY2tDYW5jZWwiLCJnZXRDb250YWluZXIiLCJnZXRQb3B1cCIsImdldFRpdGxlIiwiZ2V0Q29udGVudCIsImdldEltYWdlIiwiZ2V0SWNvbiIsImdldEljb25zIiwiZ2V0Q2xvc2VCdXR0b24iLCJnZXRBY3Rpb25zIiwiZ2V0Q29uZmlybUJ1dHRvbiIsImdldENhbmNlbEJ1dHRvbiIsImdldEhlYWRlciIsImdldEZvb3RlciIsImdldEZvY3VzYWJsZUVsZW1lbnRzIiwiZ2V0VmFsaWRhdGlvbk1lc3NhZ2UiLCJpc0xvYWRpbmciLCJoYXNBdHRyaWJ1dGUiLCJtaXhpbiIsImRpc21pc3MiLCJpbnNlcnRRdWV1ZVN0ZXAiLCJkZWxldGVRdWV1ZVN0ZXAiLCJzaG93TG9hZGluZyIsImVuYWJsZUxvYWRpbmciLCJnZXRUaW1lckxlZnQiLCJzdG9wVGltZXIiLCJyZXN1bWVUaW1lciIsInRvZ2dsZVRpbWVyIiwicnVubmluZyIsImluY3JlYXNlVGltZXIiLCJpbmNyZWFzZSIsImlzVGltZXJSdW5uaW5nIiwiaXNSdW5uaW5nIiwiY29uZmlybUJ1dHRvbiIsImNhbmNlbEJ1dHRvbiIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwib2Zmc2V0VG9wIiwiYWxpZ25JdGVtcyIsIkt0Iiwic3dhbFByb21pc2VSZXNvbHZlIiwiSnQiLCJzY3JvbGxYIiwic2Nyb2xsWSIsInJlc3RvcmVGb2N1c1RpbWVvdXQiLCJwcmV2aW91c0FjdGl2ZUVsZW1lbnQiLCJrZXlkb3duVGFyZ2V0Iiwia2V5ZG93bkhhbmRsZXIiLCJjYXB0dXJlIiwia2V5ZG93bkhhbmRsZXJBZGRlZCIsImlvc2ZpeCIsInNob3duIiwiWnQiLCJzd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2siLCJzdGFydGVkIiwiZGlyZWN0aW9uIiwicnRsIiwib25pbnB1dCIsIm9uY2hhbmdlIiwiY2xvc2VQb3B1cCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIk1TU3RyZWFtIiwicGxhdGZvcm0iLCJtYXhUb3VjaFBvaW50cyIsIm9udG91Y2hzdGFydCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInRhZ05hbWUiLCJvbnRvdWNobW92ZSIsImlubmVySGVpZ2h0IiwibXNNYXhUb3VjaFBvaW50cyIsImNsaWVudFdpZHRoIiwiaGlkZUxvYWRpbmciLCJnZXRJbnB1dCIsIk1hcCIsImZpbGVzIiwiZGlzYWJsZUlucHV0IiwiZW5hYmxlQnV0dG9ucyIsImVuYWJsZUlucHV0Iiwic2hvd1ZhbGlkYXRpb25NZXNzYWdlIiwiY2hlY2tWYWxpZGl0eSIsImlzQ29tcG9zaW5nIiwib3V0ZXJIVE1MIiwib25jbGljayIsIm9ubW91c2Vkb3duIiwib25tb3VzZXVwIiwiZGlzYWJsZUxvYWRpbmciLCJjbG9zZU1vZGFsIiwiY2xvc2VUb2FzdCIsImRpc2FibGVCdXR0b25zIiwiZW5hYmxlQ29uZmlybUJ1dHRvbiIsImRpc2FibGVDb25maXJtQnV0dG9uIiwibWFyZ2luUmlnaHQiLCJpbnB1dGVycm9yIiwiZ2V0UHJvZ3Jlc3NTdGVwcyIsInNldFByb2dyZXNzU3RlcHMiLCJzaG93UHJvZ3Jlc3NTdGVwcyIsImhpZGVQcm9ncmVzc1N0ZXBzIiwiX21haW4iLCJkZWZlckRpc3Bvc2FsVGltZXIiLCJjbG9zZUJ1dHRvbiIsInVwZGF0ZSIsImRlZmluZVByb3BlcnRpZXMiLCJmaW5hbGx5IiwiRGlzbWlzc1JlYXNvbiIsInZlcnNpb24iLCJkZWZhdWx0IiwiU3dlZXRhbGVydDIiLCJzd2FsIiwic3dlZXRBbGVydCIsIlN3ZWV0QWxlcnQiLCJhY2NvcmRpb24iLCJoYXNoQWNjb3JkaW9uIiwiY2xpY2tPcGVuIiwiaXRlbSIsImNsaWNrUGFyZW50Iiwib3BlblNlbGVjdG9yIiwib3BlbkJsb2NrIiwianNBbmltIiwiYWxsT3BlbkJsb2NrIiwiYWxsQ2xpY2siLCJhbGxJdGVtIiwiZHVyIiwic2Vjb25kTnVtIiwiYWNjb3JkaW9uSGFzaEFjdGl2ZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVB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RVksS0FBS3loRCxHQUFXLFNBQVU3bkMsRUFBT3ZiLEdBRWlDLEdBQTVEZSxFQUFFZixHQUFPOEIsS0FBSyxvQ0FBb0N3RCxPQUNsRCs5QyxHQUFpQixJQUFNOW5DLEVBQVEsSUFBTXhhLEVBQUVmLEdBQU84QixLQUFLLG9DQUFvQytRLEtBQUssd0JBRTVGd3dDLEdBQWlCLElBQU05bkMsRUFBUSxJQUFNeGEsRUFBRWYsR0FBTzhCLEtBQUssc0JBQXNCQyxHQUFHLEdBQUdELEtBQUssMEJBQTBCK1EsS0FBSywyQkFHM0gzUSxPQUFPeVQsU0FBU0QsS0FBTzJ0QyxNQVczQnRqQyxZQUFXLFlBUlgsV0FFSSxHQUE0QixJQUF4QjdkLE9BQU95VCxTQUFTRCxLQUFZLENBQzVCLElBQUlzdUMsRUFBWTloRCxPQUFPeVQsU0FBU0QsS0FBSzFNLE1BQU0sS0FBSyxHQUNoRGpJLEVBQUUsNENBQTRDaWpELEVBQVUsTUFBTTE2QixRQUFRLFVBSzFFMjZCLEtBQ0YiLCJmaWxlIjoiL2RlbW9zL0FkbWluUGFuZWwvanMvbG9naW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0Nyk7XG4iLCIkKGRvY3VtZW50KS5vbignYmx1cicsICcuaW5wdXRfX2ZpZWxkJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBpbnB1dEYgPSAkKHRoaXMpLFxuICAgICAgICBpbnB1dFIgPSBpbnB1dEYuY2xvc2VzdCgnLmlucHV0X19yb3cnKTtcbiAgICBpZiAoaW5wdXRGLnZhbCgpICE9ICcnKSB7XG4gICAgICAgIGlucHV0Ui5hZGRDbGFzcygnaXNfZm9jdXMnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbnB1dFIucmVtb3ZlQ2xhc3MoJ2lzX2ZvY3VzJyk7XG4gICAgfVxufSlcbiQoZG9jdW1lbnQpLm9uKCdmb2N1cyBwYXN0ZSBjaGFuZ2UgaW5wdXQnLCAnLmlucHV0X19maWVsZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgaW5wdXRGID0gJCh0aGlzKSxcbiAgICAgICAgaW5wdXRSID0gaW5wdXRGLmNsb3Nlc3QoJy5pbnB1dF9fcm93Jyk7XG4gICAgICAgIC8vIGlmIChpbnB1dEYucHJvcCgnZGlzYWJsZWQnKSA9PSB0cnVlKSB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCdub3RfZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gfVxuICAgIGlmICghaW5wdXRSLmhhc0NsYXNzKCdpc19mb2N1cycpKSB7XG4gICAgICAgIGlucHV0Ui5hZGRDbGFzcygnaXNfZm9jdXMnKTtcbiAgICB9XG59KVxuXG4vLyAkKGRvY3VtZW50KS5vbignZm9jdXMnLCAnLmlucHV0X19maWVsZCcsIGZ1bmN0aW9uICgpIHtcbi8vICAgICBjb25zb2xlLmxvZygnaW5wdXQgZm9jdXMnKTtcbi8vIH0pXG4vLyAkKGRvY3VtZW50KS5vbigncGFzdGUnLCAnLmlucHV0X19maWVsZCcsIGZ1bmN0aW9uICgpIHtcbi8vICAgICBjb25zb2xlLmxvZygnaW5wdXQgcGFzdGUnKTtcbi8vIH0pXG4vLyAkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJy5pbnB1dF9fZmllbGQnLCBmdW5jdGlvbiAoKSB7XG4vLyAgICAgY29uc29sZS5sb2coJ2lucHV0IGNoYW5nZScpO1xuLy8gfSlcbi8vICQoZG9jdW1lbnQpLm9uKCdpbnB1dCcsICcuaW5wdXRfX2ZpZWxkJywgZnVuY3Rpb24gKCkge1xuLy8gICAgIGNvbnNvbGUubG9nKCdpbnB1dCBpbnB1dCcpO1xuLy8gfSlcblxuXG4vLyB3aW5kb3cub25sb2FkID0gKGV2ZW50KSA9PiB7XG4vLyAgICAgbGV0IGlucHV0RiA9ICQoJy5pbnB1dF9fZmllbGQnKTtcbi8vICAgICBpbnB1dEYuZWFjaChmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgIGxldCBpbnB1dEYgPSAkKHRoaXMpLFxuLy8gICAgICAgICAgICAgaW5wdXRSID0gaW5wdXRGLmNsb3Nlc3QoJy5pbnB1dF9fcm93Jyk7XG4vLyAgICAgICAgIGlmIChpbnB1dEYuaXMoJzpmb2N1cycpIHx8IChpbnB1dEYudmFsKCkgIT0gJycgJiYgaW5wdXRGLmlzKCc6aW5wdXQnKSkpIHtcbi8vICAgICAgICAgICAgIGlucHV0Ui5hZGRDbGFzcygnaXNfZm9jdXMnKTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgICBpZiAoaW5wdXRGLmlzKCc6ZGlzYWJsZWQnKSkge1xuLy8gICAgICAgICAgICAgaW5wdXRSLmFkZENsYXNzKCdpc19kaXNhYmxlZCcpO1xuLy8gICAgICAgICB9XG4vLyAgICAgfSlcbi8vIH07XG5cblxuZnVuY3Rpb24gZm9jdXNGaXJzdElucHV0KCkge1xuICAgIGxldCBpbnB1dFJQID0gJCgnLmpzX2Zvcl9mb2N1cycpO1xuICAgIGlucHV0UlAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBpbnB1dFJQID0gJCh0aGlzKTtcbiAgICAgICAgaWYgKGlucHV0UlAuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgIGxldCBpbnB1dFJGb2N1cyA9IGlucHV0UlAuZmluZCgnLmlucHV0X19yb3cnKS5lcSgwKS5maW5kKCcuaW5wdXRfX2ZpZWxkJyk7XG4gICAgICAgICAgICBpbnB1dFJGb2N1cy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfSlcbn1cbmV4cG9ydCBkZWZhdWx0IGZvY3VzRmlyc3RJbnB1dDtcbiIsInJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkubWluJyk7XG53aW5kb3cuJCA9IHdpbmRvdy5qUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbmNvbnN0IFN3YWwgPSB3aW5kb3cuU3dhbCA9IHJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zd2VldGFsZXJ0Mi9kaXN0L3N3ZWV0YWxlcnQyLm1pbicpO1xucmVxdWlyZSgnLi9jb21wb25lbnRzL2lucHV0Jyk7XG5yZXF1aXJlKCcuL2NvbXBvbmVudHMvYWNjb3JkaW9uJyk7XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNS4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMC0wNS0wNFQyMjo0OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy41LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjVcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjAtMDMtMTRcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4XCI7XG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0ICkgPiAzO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHRcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJiBqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMudG9wID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy50b3AgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMubGVmdCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMubGVmdCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qISBqUXVlcnkgdjMuNS4xIHwgKGMpIEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyB8IGpxdWVyeS5vcmcvbGljZW5zZSAqL1xuIWZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUuZG9jdW1lbnQ/dChlLCEwKTpmdW5jdGlvbihlKXtpZighZS5kb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO3JldHVybiB0KGUpfTp0KGUpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKEMsZSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9W10scj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yscz10LnNsaWNlLGc9dC5mbGF0P2Z1bmN0aW9uKGUpe3JldHVybiB0LmZsYXQuY2FsbChlKX06ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY29uY2F0LmFwcGx5KFtdLGUpfSx1PXQucHVzaCxpPXQuaW5kZXhPZixuPXt9LG89bi50b1N0cmluZyx2PW4uaGFzT3duUHJvcGVydHksYT12LnRvU3RyaW5nLGw9YS5jYWxsKE9iamVjdCkseT17fSxtPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJlwibnVtYmVyXCIhPXR5cGVvZiBlLm5vZGVUeXBlfSx4PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lJiZlPT09ZS53aW5kb3d9LEU9Qy5kb2N1bWVudCxjPXt0eXBlOiEwLHNyYzohMCxub25jZTohMCxub01vZHVsZTohMH07ZnVuY3Rpb24gYihlLHQsbil7dmFyIHIsaSxvPShuPW58fEUpLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7aWYoby50ZXh0PWUsdClmb3IociBpbiBjKShpPXRbcl18fHQuZ2V0QXR0cmlidXRlJiZ0LmdldEF0dHJpYnV0ZShyKSkmJm8uc2V0QXR0cmlidXRlKHIsaSk7bi5oZWFkLmFwcGVuZENoaWxkKG8pLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyl9ZnVuY3Rpb24gdyhlKXtyZXR1cm4gbnVsbD09ZT9lK1wiXCI6XCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGU/bltvLmNhbGwoZSldfHxcIm9iamVjdFwiOnR5cGVvZiBlfXZhciBmPVwiMy41LjFcIixTPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBTLmZuLmluaXQoZSx0KX07ZnVuY3Rpb24gcChlKXt2YXIgdD0hIWUmJlwibGVuZ3RoXCJpbiBlJiZlLmxlbmd0aCxuPXcoZSk7cmV0dXJuIW0oZSkmJiF4KGUpJiYoXCJhcnJheVwiPT09bnx8MD09PXR8fFwibnVtYmVyXCI9PXR5cGVvZiB0JiYwPHQmJnQtMSBpbiBlKX1TLmZuPVMucHJvdG90eXBlPXtqcXVlcnk6Zixjb25zdHJ1Y3RvcjpTLGxlbmd0aDowLHRvQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gcy5jYWxsKHRoaXMpfSxnZXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/cy5jYWxsKHRoaXMpOmU8MD90aGlzW2UrdGhpcy5sZW5ndGhdOnRoaXNbZV19LHB1c2hTdGFjazpmdW5jdGlvbihlKXt2YXIgdD1TLm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSxlKTtyZXR1cm4gdC5wcmV2T2JqZWN0PXRoaXMsdH0sZWFjaDpmdW5jdGlvbihlKXtyZXR1cm4gUy5lYWNoKHRoaXMsZSl9LG1hcDpmdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soUy5tYXAodGhpcyxmdW5jdGlvbihlLHQpe3JldHVybiBuLmNhbGwoZSx0LGUpfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhzLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGV2ZW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soUy5ncmVwKHRoaXMsZnVuY3Rpb24oZSx0KXtyZXR1cm4odCsxKSUyfSkpfSxvZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soUy5ncmVwKHRoaXMsZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCUyfSkpfSxlcTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmxlbmd0aCxuPStlKyhlPDA/dDowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soMDw9biYmbjx0P1t0aGlzW25dXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IoKX0scHVzaDp1LHNvcnQ6dC5zb3J0LHNwbGljZTp0LnNwbGljZX0sUy5leHRlbmQ9Uy5mbi5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgZSx0LG4scixpLG8sYT1hcmd1bWVudHNbMF18fHt9LHM9MSx1PWFyZ3VtZW50cy5sZW5ndGgsbD0hMTtmb3IoXCJib29sZWFuXCI9PXR5cGVvZiBhJiYobD1hLGE9YXJndW1lbnRzW3NdfHx7fSxzKyspLFwib2JqZWN0XCI9PXR5cGVvZiBhfHxtKGEpfHwoYT17fSkscz09PXUmJihhPXRoaXMscy0tKTtzPHU7cysrKWlmKG51bGwhPShlPWFyZ3VtZW50c1tzXSkpZm9yKHQgaW4gZSlyPWVbdF0sXCJfX3Byb3RvX19cIiE9PXQmJmEhPT1yJiYobCYmciYmKFMuaXNQbGFpbk9iamVjdChyKXx8KGk9QXJyYXkuaXNBcnJheShyKSkpPyhuPWFbdF0sbz1pJiYhQXJyYXkuaXNBcnJheShuKT9bXTppfHxTLmlzUGxhaW5PYmplY3Qobik/bjp7fSxpPSExLGFbdF09Uy5leHRlbmQobCxvLHIpKTp2b2lkIDAhPT1yJiYoYVt0XT1yKSk7cmV0dXJuIGF9LFMuZXh0ZW5kKHtleHBhbmRvOlwialF1ZXJ5XCIrKGYrTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csXCJcIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoZSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQsbjtyZXR1cm4hKCFlfHxcIltvYmplY3QgT2JqZWN0XVwiIT09by5jYWxsKGUpKSYmKCEodD1yKGUpKXx8XCJmdW5jdGlvblwiPT10eXBlb2Yobj12LmNhbGwodCxcImNvbnN0cnVjdG9yXCIpJiZ0LmNvbnN0cnVjdG9yKSYmYS5jYWxsKG4pPT09bCl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKHQgaW4gZSlyZXR1cm4hMTtyZXR1cm4hMH0sZ2xvYmFsRXZhbDpmdW5jdGlvbihlLHQsbil7YihlLHtub25jZTp0JiZ0Lm5vbmNlfSxuKX0sZWFjaDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MDtpZihwKGUpKXtmb3Iobj1lLmxlbmd0aDtyPG47cisrKWlmKCExPT09dC5jYWxsKGVbcl0scixlW3JdKSlicmVha31lbHNlIGZvcihyIGluIGUpaWYoITE9PT10LmNhbGwoZVtyXSxyLGVbcl0pKWJyZWFrO3JldHVybiBlfSxtYWtlQXJyYXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj10fHxbXTtyZXR1cm4gbnVsbCE9ZSYmKHAoT2JqZWN0KGUpKT9TLm1lcmdlKG4sXCJzdHJpbmdcIj09dHlwZW9mIGU/W2VdOmUpOnUuY2FsbChuLGUpKSxufSxpbkFycmF5OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbnVsbD09dD8tMTppLmNhbGwodCxlLG4pfSxtZXJnZTpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0rdC5sZW5ndGgscj0wLGk9ZS5sZW5ndGg7cjxuO3IrKyllW2krK109dFtyXTtyZXR1cm4gZS5sZW5ndGg9aSxlfSxncmVwOmZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9W10saT0wLG89ZS5sZW5ndGgsYT0hbjtpPG87aSsrKSF0KGVbaV0saSkhPT1hJiZyLnB1c2goZVtpXSk7cmV0dXJuIHJ9LG1hcDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPTAsYT1bXTtpZihwKGUpKWZvcihyPWUubGVuZ3RoO288cjtvKyspbnVsbCE9KGk9dChlW29dLG8sbikpJiZhLnB1c2goaSk7ZWxzZSBmb3IobyBpbiBlKW51bGwhPShpPXQoZVtvXSxvLG4pKSYmYS5wdXNoKGkpO3JldHVybiBnKGEpfSxndWlkOjEsc3VwcG9ydDp5fSksXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoUy5mbltTeW1ib2wuaXRlcmF0b3JdPXRbU3ltYm9sLml0ZXJhdG9yXSksUy5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oZSx0KXtuW1wiW29iamVjdCBcIit0K1wiXVwiXT10LnRvTG93ZXJDYXNlKCl9KTt2YXIgZD1mdW5jdGlvbihuKXt2YXIgZSxkLGIsbyxpLGgsZixnLHcsdSxsLFQsQyxhLEUsdixzLGMseSxTPVwic2l6emxlXCIrMSpuZXcgRGF0ZSxwPW4uZG9jdW1lbnQsaz0wLHI9MCxtPXVlKCkseD11ZSgpLEE9dWUoKSxOPXVlKCksRD1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dCYmKGw9ITApLDB9LGo9e30uaGFzT3duUHJvcGVydHksdD1bXSxxPXQucG9wLEw9dC5wdXNoLEg9dC5wdXNoLE89dC5zbGljZSxQPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKWlmKGVbbl09PT10KXJldHVybiBuO3JldHVybi0xfSxSPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixNPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixJPVwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIitNK1wiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsVz1cIlxcXFxbXCIrTStcIiooXCIrSStcIikoPzpcIitNK1wiKihbKl4kfCF+XT89KVwiK00rXCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIitJK1wiKSl8KVwiK00rXCIqXFxcXF1cIixGPVwiOihcIitJK1wiKSg/OlxcXFwoKCgnKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIitXK1wiKSopfC4qKVxcXFwpfClcIixCPW5ldyBSZWdFeHAoTStcIitcIixcImdcIiksJD1uZXcgUmVnRXhwKFwiXlwiK00rXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiK00rXCIrJFwiLFwiZ1wiKSxfPW5ldyBSZWdFeHAoXCJeXCIrTStcIiosXCIrTStcIipcIiksej1uZXcgUmVnRXhwKFwiXlwiK00rXCIqKFs+K35dfFwiK00rXCIpXCIrTStcIipcIiksVT1uZXcgUmVnRXhwKE0rXCJ8PlwiKSxYPW5ldyBSZWdFeHAoRiksVj1uZXcgUmVnRXhwKFwiXlwiK0krXCIkXCIpLEc9e0lEOm5ldyBSZWdFeHAoXCJeIyhcIitJK1wiKVwiKSxDTEFTUzpuZXcgUmVnRXhwKFwiXlxcXFwuKFwiK0krXCIpXCIpLFRBRzpuZXcgUmVnRXhwKFwiXihcIitJK1wifFsqXSlcIiksQVRUUjpuZXcgUmVnRXhwKFwiXlwiK1cpLFBTRVVETzpuZXcgUmVnRXhwKFwiXlwiK0YpLENISUxEOm5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiK00rXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIitNK1wiKig/OihbKy1dfClcIitNK1wiKihcXFxcZCspfCkpXCIrTStcIipcXFxcKXwpXCIsXCJpXCIpLGJvb2w6bmV3IFJlZ0V4cChcIl4oPzpcIitSK1wiKSRcIixcImlcIiksbmVlZHNDb250ZXh0Om5ldyBSZWdFeHAoXCJeXCIrTStcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIrTStcIiooKD86LVxcXFxkKT9cXFxcZCopXCIrTStcIipcXFxcKXwpKD89W14tXXwkKVwiLFwiaVwiKX0sWT0vSFRNTCQvaSxRPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksSj0vXmhcXGQkL2ksSz0vXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFo9L14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sZWU9L1srfl0vLHRlPW5ldyBSZWdFeHAoXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiK00rXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIixcImdcIiksbmU9ZnVuY3Rpb24oZSx0KXt2YXIgbj1cIjB4XCIrZS5zbGljZSgxKS02NTUzNjtyZXR1cm4gdHx8KG48MD9TdHJpbmcuZnJvbUNoYXJDb2RlKG4rNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUobj4+MTB8NTUyOTYsMTAyMyZufDU2MzIwKSl9LHJlPS8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLGllPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/XCJcXDBcIj09PWU/XCJcXHVmZmZkXCI6ZS5zbGljZSgwLC0xKStcIlxcXFxcIitlLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSkudG9TdHJpbmcoMTYpK1wiIFwiOlwiXFxcXFwiK2V9LG9lPWZ1bmN0aW9uKCl7VCgpfSxhZT1iZShmdW5jdGlvbihlKXtyZXR1cm4hMD09PWUuZGlzYWJsZWQmJlwiZmllbGRzZXRcIj09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKX0se2RpcjpcInBhcmVudE5vZGVcIixuZXh0OlwibGVnZW5kXCJ9KTt0cnl7SC5hcHBseSh0PU8uY2FsbChwLmNoaWxkTm9kZXMpLHAuY2hpbGROb2RlcyksdFtwLmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZX1jYXRjaChlKXtIPXthcHBseTp0Lmxlbmd0aD9mdW5jdGlvbihlLHQpe0wuYXBwbHkoZSxPLmNhbGwodCkpfTpmdW5jdGlvbihlLHQpe3ZhciBuPWUubGVuZ3RoLHI9MDt3aGlsZShlW24rK109dFtyKytdKTtlLmxlbmd0aD1uLTF9fX1mdW5jdGlvbiBzZSh0LGUsbixyKXt2YXIgaSxvLGEscyx1LGwsYyxmPWUmJmUub3duZXJEb2N1bWVudCxwPWU/ZS5ub2RlVHlwZTo5O2lmKG49bnx8W10sXCJzdHJpbmdcIiE9dHlwZW9mIHR8fCF0fHwxIT09cCYmOSE9PXAmJjExIT09cClyZXR1cm4gbjtpZighciYmKFQoZSksZT1lfHxDLEUpKXtpZigxMSE9PXAmJih1PVouZXhlYyh0KSkpaWYoaT11WzFdKXtpZig5PT09cCl7aWYoIShhPWUuZ2V0RWxlbWVudEJ5SWQoaSkpKXJldHVybiBuO2lmKGEuaWQ9PT1pKXJldHVybiBuLnB1c2goYSksbn1lbHNlIGlmKGYmJihhPWYuZ2V0RWxlbWVudEJ5SWQoaSkpJiZ5KGUsYSkmJmEuaWQ9PT1pKXJldHVybiBuLnB1c2goYSksbn1lbHNle2lmKHVbMl0pcmV0dXJuIEguYXBwbHkobixlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHQpKSxuO2lmKChpPXVbM10pJiZkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gSC5hcHBseShuLGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShpKSksbn1pZihkLnFzYSYmIU5bdCtcIiBcIl0mJighdnx8IXYudGVzdCh0KSkmJigxIT09cHx8XCJvYmplY3RcIiE9PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkpe2lmKGM9dCxmPWUsMT09PXAmJihVLnRlc3QodCl8fHoudGVzdCh0KSkpeyhmPWVlLnRlc3QodCkmJnllKGUucGFyZW50Tm9kZSl8fGUpPT09ZSYmZC5zY29wZXx8KChzPWUuZ2V0QXR0cmlidXRlKFwiaWRcIikpP3M9cy5yZXBsYWNlKHJlLGllKTplLnNldEF0dHJpYnV0ZShcImlkXCIscz1TKSksbz0obD1oKHQpKS5sZW5ndGg7d2hpbGUoby0tKWxbb109KHM/XCIjXCIrczpcIjpzY29wZVwiKStcIiBcIit4ZShsW29dKTtjPWwuam9pbihcIixcIil9dHJ5e3JldHVybiBILmFwcGx5KG4sZi5xdWVyeVNlbGVjdG9yQWxsKGMpKSxufWNhdGNoKGUpe04odCwhMCl9ZmluYWxseXtzPT09UyYmZS5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKX19fXJldHVybiBnKHQucmVwbGFjZSgkLFwiJDFcIiksZSxuLHIpfWZ1bmN0aW9uIHVlKCl7dmFyIHI9W107cmV0dXJuIGZ1bmN0aW9uIGUodCxuKXtyZXR1cm4gci5wdXNoKHQrXCIgXCIpPmIuY2FjaGVMZW5ndGgmJmRlbGV0ZSBlW3Iuc2hpZnQoKV0sZVt0K1wiIFwiXT1ufX1mdW5jdGlvbiBsZShlKXtyZXR1cm4gZVtTXT0hMCxlfWZ1bmN0aW9uIGNlKGUpe3ZhciB0PUMuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO3RyeXtyZXR1cm4hIWUodCl9Y2F0Y2goZSl7cmV0dXJuITF9ZmluYWxseXt0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSx0PW51bGx9fWZ1bmN0aW9uIGZlKGUsdCl7dmFyIG49ZS5zcGxpdChcInxcIikscj1uLmxlbmd0aDt3aGlsZShyLS0pYi5hdHRySGFuZGxlW25bcl1dPXR9ZnVuY3Rpb24gcGUoZSx0KXt2YXIgbj10JiZlLHI9biYmMT09PWUubm9kZVR5cGUmJjE9PT10Lm5vZGVUeXBlJiZlLnNvdXJjZUluZGV4LXQuc291cmNlSW5kZXg7aWYocilyZXR1cm4gcjtpZihuKXdoaWxlKG49bi5uZXh0U2libGluZylpZihuPT09dClyZXR1cm4tMTtyZXR1cm4gZT8xOi0xfWZ1bmN0aW9uIGRlKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm5cImlucHV0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJmUudHlwZT09PXR9fWZ1bmN0aW9uIGhlKG4pe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuKFwiaW5wdXRcIj09PXR8fFwiYnV0dG9uXCI9PT10KSYmZS50eXBlPT09bn19ZnVuY3Rpb24gZ2UodCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVyblwiZm9ybVwiaW4gZT9lLnBhcmVudE5vZGUmJiExPT09ZS5kaXNhYmxlZD9cImxhYmVsXCJpbiBlP1wibGFiZWxcImluIGUucGFyZW50Tm9kZT9lLnBhcmVudE5vZGUuZGlzYWJsZWQ9PT10OmUuZGlzYWJsZWQ9PT10OmUuaXNEaXNhYmxlZD09PXR8fGUuaXNEaXNhYmxlZCE9PSF0JiZhZShlKT09PXQ6ZS5kaXNhYmxlZD09PXQ6XCJsYWJlbFwiaW4gZSYmZS5kaXNhYmxlZD09PXR9fWZ1bmN0aW9uIHZlKGEpe3JldHVybiBsZShmdW5jdGlvbihvKXtyZXR1cm4gbz0rbyxsZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShbXSxlLmxlbmd0aCxvKSxpPXIubGVuZ3RoO3doaWxlKGktLSllW249cltpXV0mJihlW25dPSEodFtuXT1lW25dKSl9KX0pfWZ1bmN0aW9uIHllKGUpe3JldHVybiBlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZSYmZX1mb3IoZSBpbiBkPXNlLnN1cHBvcnQ9e30saT1zZS5pc1hNTD1mdW5jdGlvbihlKXt2YXIgdD1lLm5hbWVzcGFjZVVSSSxuPShlLm93bmVyRG9jdW1lbnR8fGUpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4hWS50ZXN0KHR8fG4mJm4ubm9kZU5hbWV8fFwiSFRNTFwiKX0sVD1zZS5zZXREb2N1bWVudD1mdW5jdGlvbihlKXt2YXIgdCxuLHI9ZT9lLm93bmVyRG9jdW1lbnR8fGU6cDtyZXR1cm4gciE9QyYmOT09PXIubm9kZVR5cGUmJnIuZG9jdW1lbnRFbGVtZW50JiYoYT0oQz1yKS5kb2N1bWVudEVsZW1lbnQsRT0haShDKSxwIT1DJiYobj1DLmRlZmF1bHRWaWV3KSYmbi50b3AhPT1uJiYobi5hZGRFdmVudExpc3RlbmVyP24uYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLG9lLCExKTpuLmF0dGFjaEV2ZW50JiZuLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixvZSkpLGQuc2NvcGU9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQoZSkuYXBwZW5kQ2hpbGQoQy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZS5xdWVyeVNlbGVjdG9yQWxsJiYhZS5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiKS5sZW5ndGh9KSxkLmF0dHJpYnV0ZXM9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2xhc3NOYW1lPVwiaVwiLCFlLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKX0pLGQuZ2V0RWxlbWVudHNCeVRhZ05hbWU9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUuYXBwZW5kQ2hpbGQoQy5jcmVhdGVDb21tZW50KFwiXCIpKSwhZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RofSksZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPUsudGVzdChDLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGQuZ2V0QnlJZD1jZShmdW5jdGlvbihlKXtyZXR1cm4gYS5hcHBlbmRDaGlsZChlKS5pZD1TLCFDLmdldEVsZW1lbnRzQnlOYW1lfHwhQy5nZXRFbGVtZW50c0J5TmFtZShTKS5sZW5ndGh9KSxkLmdldEJ5SWQ/KGIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZSh0ZSxuZSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZShcImlkXCIpPT09dH19LGIuZmluZC5JRD1mdW5jdGlvbihlLHQpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0LmdldEVsZW1lbnRCeUlkJiZFKXt2YXIgbj10LmdldEVsZW1lbnRCeUlkKGUpO3JldHVybiBuP1tuXTpbXX19KTooYi5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIG49ZS5yZXBsYWNlKHRlLG5lKTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSYmZS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7cmV0dXJuIHQmJnQudmFsdWU9PT1ufX0sYi5maW5kLklEPWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQmJkUpe3ZhciBuLHIsaSxvPXQuZ2V0RWxlbWVudEJ5SWQoZSk7aWYobyl7aWYoKG49by5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb107aT10LmdldEVsZW1lbnRzQnlOYW1lKGUpLHI9MDt3aGlsZShvPWlbcisrXSlpZigobj1vLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSkmJm4udmFsdWU9PT1lKXJldHVybltvXX1yZXR1cm5bXX19KSxiLmZpbmQuVEFHPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oZSx0KXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5VGFnTmFtZT90LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOmQucXNhP3QucXVlcnlTZWxlY3RvckFsbChlKTp2b2lkIDB9OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxpPTAsbz10LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpO2lmKFwiKlwiPT09ZSl7d2hpbGUobj1vW2krK10pMT09PW4ubm9kZVR5cGUmJnIucHVzaChuKTtyZXR1cm4gcn1yZXR1cm4gb30sYi5maW5kLkNMQVNTPWQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZFKXJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSl9LHM9W10sdj1bXSwoZC5xc2E9Sy50ZXN0KEMucXVlcnlTZWxlY3RvckFsbCkpJiYoY2UoZnVuY3Rpb24oZSl7dmFyIHQ7YS5hcHBlbmRDaGlsZChlKS5pbm5lckhUTUw9XCI8YSBpZD0nXCIrUytcIic+PC9hPjxzZWxlY3QgaWQ9J1wiK1MrXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIixlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgmJnYucHVzaChcIlsqXiRdPVwiK00rXCIqKD86Jyd8XFxcIlxcXCIpXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RofHx2LnB1c2goXCJcXFxcW1wiK00rXCIqKD86dmFsdWV8XCIrUitcIilcIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIitTK1wiLV1cIikubGVuZ3RofHx2LnB1c2goXCJ+PVwiKSwodD1DLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiXCIpLGUuYXBwZW5kQ2hpbGQodCksZS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9JyddXCIpLmxlbmd0aHx8di5wdXNoKFwiXFxcXFtcIitNK1wiKm5hbWVcIitNK1wiKj1cIitNK1wiKig/OicnfFxcXCJcXFwiKVwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGh8fHYucHVzaChcIjpjaGVja2VkXCIpLGUucXVlcnlTZWxlY3RvckFsbChcImEjXCIrUytcIisqXCIpLmxlbmd0aHx8di5wdXNoKFwiLiMuK1srfl1cIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiXFxcXFxcZlwiKSx2LnB1c2goXCJbXFxcXHJcXFxcblxcXFxmXVwiKX0pLGNlKGZ1bmN0aW9uKGUpe2UuaW5uZXJIVE1MPVwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT48c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7dmFyIHQ9Qy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJoaWRkZW5cIiksZS5hcHBlbmRDaGlsZCh0KS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJEXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCYmdi5wdXNoKFwibmFtZVwiK00rXCIqWypeJHwhfl0/PVwiKSwyIT09ZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoJiZ2LnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGEuYXBwZW5kQ2hpbGQoZSkuZGlzYWJsZWQ9ITAsMiE9PWUucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGgmJnYucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKSx2LnB1c2goXCIsLio6XCIpfSkpLChkLm1hdGNoZXNTZWxlY3Rvcj1LLnRlc3QoYz1hLm1hdGNoZXN8fGEud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxhLm1vek1hdGNoZXNTZWxlY3Rvcnx8YS5vTWF0Y2hlc1NlbGVjdG9yfHxhLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJmNlKGZ1bmN0aW9uKGUpe2QuZGlzY29ubmVjdGVkTWF0Y2g9Yy5jYWxsKGUsXCIqXCIpLGMuY2FsbChlLFwiW3MhPScnXTp4XCIpLHMucHVzaChcIiE9XCIsRil9KSx2PXYubGVuZ3RoJiZuZXcgUmVnRXhwKHYuam9pbihcInxcIikpLHM9cy5sZW5ndGgmJm5ldyBSZWdFeHAocy5qb2luKFwifFwiKSksdD1LLnRlc3QoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikseT10fHxLLnRlc3QoYS5jb250YWlucyk/ZnVuY3Rpb24oZSx0KXt2YXIgbj05PT09ZS5ub2RlVHlwZT9lLmRvY3VtZW50RWxlbWVudDplLHI9dCYmdC5wYXJlbnROb2RlO3JldHVybiBlPT09cnx8ISghcnx8MSE9PXIubm9kZVR5cGV8fCEobi5jb250YWlucz9uLmNvbnRhaW5zKHIpOmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJjE2JmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocikpKX06ZnVuY3Rpb24oZSx0KXtpZih0KXdoaWxlKHQ9dC5wYXJlbnROb2RlKWlmKHQ9PT1lKXJldHVybiEwO3JldHVybiExfSxEPXQ/ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gbD0hMCwwO3ZhciBuPSFlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uLSF0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO3JldHVybiBufHwoMSYobj0oZS5vd25lckRvY3VtZW50fHxlKT09KHQub3duZXJEb2N1bWVudHx8dCk/ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KToxKXx8IWQuc29ydERldGFjaGVkJiZ0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpPT09bj9lPT1DfHxlLm93bmVyRG9jdW1lbnQ9PXAmJnkocCxlKT8tMTp0PT1DfHx0Lm93bmVyRG9jdW1lbnQ9PXAmJnkocCx0KT8xOnU/UCh1LGUpLVAodSx0KTowOjQmbj8tMToxKX06ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gbD0hMCwwO3ZhciBuLHI9MCxpPWUucGFyZW50Tm9kZSxvPXQucGFyZW50Tm9kZSxhPVtlXSxzPVt0XTtpZighaXx8IW8pcmV0dXJuIGU9PUM/LTE6dD09Qz8xOmk/LTE6bz8xOnU/UCh1LGUpLVAodSx0KTowO2lmKGk9PT1vKXJldHVybiBwZShlLHQpO249ZTt3aGlsZShuPW4ucGFyZW50Tm9kZSlhLnVuc2hpZnQobik7bj10O3doaWxlKG49bi5wYXJlbnROb2RlKXMudW5zaGlmdChuKTt3aGlsZShhW3JdPT09c1tyXSlyKys7cmV0dXJuIHI/cGUoYVtyXSxzW3JdKTphW3JdPT1wPy0xOnNbcl09PXA/MTowfSksQ30sc2UubWF0Y2hlcz1mdW5jdGlvbihlLHQpe3JldHVybiBzZShlLG51bGwsbnVsbCx0KX0sc2UubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGUsdCl7aWYoVChlKSxkLm1hdGNoZXNTZWxlY3RvciYmRSYmIU5bdCtcIiBcIl0mJighc3x8IXMudGVzdCh0KSkmJighdnx8IXYudGVzdCh0KSkpdHJ5e3ZhciBuPWMuY2FsbChlLHQpO2lmKG58fGQuZGlzY29ubmVjdGVkTWF0Y2h8fGUuZG9jdW1lbnQmJjExIT09ZS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gbn1jYXRjaChlKXtOKHQsITApfXJldHVybiAwPHNlKHQsQyxudWxsLFtlXSkubGVuZ3RofSxzZS5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybihlLm93bmVyRG9jdW1lbnR8fGUpIT1DJiZUKGUpLHkoZSx0KX0sc2UuYXR0cj1mdW5jdGlvbihlLHQpeyhlLm93bmVyRG9jdW1lbnR8fGUpIT1DJiZUKGUpO3ZhciBuPWIuYXR0ckhhbmRsZVt0LnRvTG93ZXJDYXNlKCldLHI9biYmai5jYWxsKGIuYXR0ckhhbmRsZSx0LnRvTG93ZXJDYXNlKCkpP24oZSx0LCFFKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PXI/cjpkLmF0dHJpYnV0ZXN8fCFFP2UuZ2V0QXR0cmlidXRlKHQpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0sc2UuZXNjYXBlPWZ1bmN0aW9uKGUpe3JldHVybihlK1wiXCIpLnJlcGxhY2UocmUsaWUpfSxzZS5lcnJvcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIitlKX0sc2UudW5pcXVlU29ydD1mdW5jdGlvbihlKXt2YXIgdCxuPVtdLHI9MCxpPTA7aWYobD0hZC5kZXRlY3REdXBsaWNhdGVzLHU9IWQuc29ydFN0YWJsZSYmZS5zbGljZSgwKSxlLnNvcnQoRCksbCl7d2hpbGUodD1lW2krK10pdD09PWVbaV0mJihyPW4ucHVzaChpKSk7d2hpbGUoci0tKWUuc3BsaWNlKG5bcl0sMSl9cmV0dXJuIHU9bnVsbCxlfSxvPXNlLmdldFRleHQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1cIlwiLHI9MCxpPWUubm9kZVR5cGU7aWYoaSl7aWYoMT09PWl8fDk9PT1pfHwxMT09PWkpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlLnRleHRDb250ZW50KXJldHVybiBlLnRleHRDb250ZW50O2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZyluKz1vKGUpfWVsc2UgaWYoMz09PWl8fDQ9PT1pKXJldHVybiBlLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKHQ9ZVtyKytdKW4rPW8odCk7cmV0dXJuIG59LChiPXNlLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmxlLG1hdGNoOkcsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnJlcGxhY2UodGUsbmUpLGVbM109KGVbM118fGVbNF18fGVbNV18fFwiXCIpLnJlcGxhY2UodGUsbmUpLFwifj1cIj09PWVbMl0mJihlWzNdPVwiIFwiK2VbM10rXCIgXCIpLGUuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1lWzFdLnNsaWNlKDAsMyk/KGVbM118fHNlLmVycm9yKGVbMF0pLGVbNF09KyhlWzRdP2VbNV0rKGVbNl18fDEpOjIqKFwiZXZlblwiPT09ZVszXXx8XCJvZGRcIj09PWVbM10pKSxlWzVdPSsoZVs3XStlWzhdfHxcIm9kZFwiPT09ZVszXSkpOmVbM10mJnNlLmVycm9yKGVbMF0pLGV9LFBTRVVETzpmdW5jdGlvbihlKXt2YXIgdCxuPSFlWzZdJiZlWzJdO3JldHVybiBHLkNISUxELnRlc3QoZVswXSk/bnVsbDooZVszXT9lWzJdPWVbNF18fGVbNV18fFwiXCI6biYmWC50ZXN0KG4pJiYodD1oKG4sITApKSYmKHQ9bi5pbmRleE9mKFwiKVwiLG4ubGVuZ3RoLXQpLW4ubGVuZ3RoKSYmKGVbMF09ZVswXS5zbGljZSgwLHQpLGVbMl09bi5zbGljZSgwLHQpKSxlLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKHRlLG5lKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09ZT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihlKXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dH19LENMQVNTOmZ1bmN0aW9uKGUpe3ZhciB0PW1bZStcIiBcIl07cmV0dXJuIHR8fCh0PW5ldyBSZWdFeHAoXCIoXnxcIitNK1wiKVwiK2UrXCIoXCIrTStcInwkKVwiKSkmJm0oZSxmdW5jdGlvbihlKXtyZXR1cm4gdC50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBlLmNsYXNzTmFtZSYmZS5jbGFzc05hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZSYmZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihuLHIsaSl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXNlLmF0dHIoZSxuKTtyZXR1cm4gbnVsbD09dD9cIiE9XCI9PT1yOiFyfHwodCs9XCJcIixcIj1cIj09PXI/dD09PWk6XCIhPVwiPT09cj90IT09aTpcIl49XCI9PT1yP2kmJjA9PT10LmluZGV4T2YoaSk6XCIqPVwiPT09cj9pJiYtMTx0LmluZGV4T2YoaSk6XCIkPVwiPT09cj9pJiZ0LnNsaWNlKC1pLmxlbmd0aCk9PT1pOlwifj1cIj09PXI/LTE8KFwiIFwiK3QucmVwbGFjZShCLFwiIFwiKStcIiBcIikuaW5kZXhPZihpKTpcInw9XCI9PT1yJiYodD09PWl8fHQuc2xpY2UoMCxpLmxlbmd0aCsxKT09PWkrXCItXCIpKX19LENISUxEOmZ1bmN0aW9uKGgsZSx0LGcsdil7dmFyIHk9XCJudGhcIiE9PWguc2xpY2UoMCwzKSxtPVwibGFzdFwiIT09aC5zbGljZSgtNCkseD1cIm9mLXR5cGVcIj09PWU7cmV0dXJuIDE9PT1nJiYwPT09dj9mdW5jdGlvbihlKXtyZXR1cm4hIWUucGFyZW50Tm9kZX06ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsPXkhPT1tP1wibmV4dFNpYmxpbmdcIjpcInByZXZpb3VzU2libGluZ1wiLGM9ZS5wYXJlbnROb2RlLGY9eCYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHA9IW4mJiF4LGQ9ITE7aWYoYyl7aWYoeSl7d2hpbGUobCl7YT1lO3doaWxlKGE9YVtsXSlpZih4P2Eubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWY6MT09PWEubm9kZVR5cGUpcmV0dXJuITE7dT1sPVwib25seVwiPT09aCYmIXUmJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZih1PVttP2MuZmlyc3RDaGlsZDpjLmxhc3RDaGlsZF0sbSYmcCl7ZD0ocz0ocj0oaT0obz0oYT1jKVtTXXx8KGFbU109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXXx8W10pWzBdPT09ayYmclsxXSkmJnJbMl0sYT1zJiZjLmNoaWxkTm9kZXNbc107d2hpbGUoYT0rK3MmJmEmJmFbbF18fChkPXM9MCl8fHUucG9wKCkpaWYoMT09PWEubm9kZVR5cGUmJisrZCYmYT09PWUpe2lbaF09W2sscyxkXTticmVha319ZWxzZSBpZihwJiYoZD1zPShyPShpPShvPShhPWUpW1NdfHwoYVtTXT17fSkpW2EudW5pcXVlSURdfHwob1thLnVuaXF1ZUlEXT17fSkpW2hdfHxbXSlbMF09PT1rJiZyWzFdKSwhMT09PWQpd2hpbGUoYT0rK3MmJmEmJmFbbF18fChkPXM9MCl8fHUucG9wKCkpaWYoKHg/YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09ZjoxPT09YS5ub2RlVHlwZSkmJisrZCYmKHAmJigoaT0obz1hW1NdfHwoYVtTXT17fSkpW2EudW5pcXVlSURdfHwob1thLnVuaXF1ZUlEXT17fSkpW2hdPVtrLGRdKSxhPT09ZSkpYnJlYWs7cmV0dXJuKGQtPXYpPT09Z3x8ZCVnPT0wJiYwPD1kL2d9fX0sUFNFVURPOmZ1bmN0aW9uKGUsbyl7dmFyIHQsYT1iLnBzZXVkb3NbZV18fGIuc2V0RmlsdGVyc1tlLnRvTG93ZXJDYXNlKCldfHxzZS5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIrZSk7cmV0dXJuIGFbU10/YShvKToxPGEubGVuZ3RoPyh0PVtlLGUsXCJcIixvXSxiLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKT9sZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShlLG8pLGk9ci5sZW5ndGg7d2hpbGUoaS0tKWVbbj1QKGUscltpXSldPSEodFtuXT1yW2ldKX0pOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsMCx0KX0pOmF9fSxwc2V1ZG9zOntub3Q6bGUoZnVuY3Rpb24oZSl7dmFyIHI9W10saT1bXSxzPWYoZS5yZXBsYWNlKCQsXCIkMVwiKSk7cmV0dXJuIHNbU10/bGUoZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbz1zKGUsbnVsbCxyLFtdKSxhPWUubGVuZ3RoO3doaWxlKGEtLSkoaT1vW2FdKSYmKGVbYV09ISh0W2FdPWkpKX0pOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gclswXT1lLHMocixudWxsLG4saSksclswXT1udWxsLCFpLnBvcCgpfX0pLGhhczpsZShmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIDA8c2UodCxlKS5sZW5ndGh9fSksY29udGFpbnM6bGUoZnVuY3Rpb24odCl7cmV0dXJuIHQ9dC5yZXBsYWNlKHRlLG5lKSxmdW5jdGlvbihlKXtyZXR1cm4tMTwoZS50ZXh0Q29udGVudHx8byhlKSkuaW5kZXhPZih0KX19KSxsYW5nOmxlKGZ1bmN0aW9uKG4pe3JldHVybiBWLnRlc3Qobnx8XCJcIil8fHNlLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIrbiksbj1uLnJlcGxhY2UodGUsbmUpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24oZSl7dmFyIHQ7ZG97aWYodD1FP2UubGFuZzplLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpfHxlLmdldEF0dHJpYnV0ZShcImxhbmdcIikpcmV0dXJuKHQ9dC50b0xvd2VyQ2FzZSgpKT09PW58fDA9PT10LmluZGV4T2YobitcIi1cIil9d2hpbGUoKGU9ZS5wYXJlbnROb2RlKSYmMT09PWUubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihlKXt2YXIgdD1uLmxvY2F0aW9uJiZuLmxvY2F0aW9uLmhhc2g7cmV0dXJuIHQmJnQuc2xpY2UoMSk9PT1lLmlkfSxyb290OmZ1bmN0aW9uKGUpe3JldHVybiBlPT09YX0sZm9jdXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1DLmFjdGl2ZUVsZW1lbnQmJighQy5oYXNGb2N1c3x8Qy5oYXNGb2N1cygpKSYmISEoZS50eXBlfHxlLmhyZWZ8fH5lLnRhYkluZGV4KX0sZW5hYmxlZDpnZSghMSksZGlzYWJsZWQ6Z2UoITApLGNoZWNrZWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PXQmJiEhZS5jaGVja2VkfHxcIm9wdGlvblwiPT09dCYmISFlLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwhMD09PWUuc2VsZWN0ZWR9LGVtcHR5OmZ1bmN0aW9uKGUpe2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZylpZihlLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihlKXtyZXR1cm4hYi5wc2V1ZG9zLmVtcHR5KGUpfSxoZWFkZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIEoudGVzdChlLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIFEudGVzdChlLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiZcImJ1dHRvblwiPT09ZS50eXBlfHxcImJ1dHRvblwiPT09dH0sdGV4dDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm5cImlucHV0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09ZS50eXBlJiYobnVsbD09KHQ9ZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8XCJ0ZXh0XCI9PT10LnRvTG93ZXJDYXNlKCkpfSxmaXJzdDp2ZShmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6dmUoZnVuY3Rpb24oZSx0KXtyZXR1cm5bdC0xXX0pLGVxOnZlKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5bbjwwP24rdDpuXX0pLGV2ZW46dmUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxvZGQ6dmUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MTtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxsdDp2ZShmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPW48MD9uK3Q6dDxuP3Q6bjswPD0tLXI7KWUucHVzaChyKTtyZXR1cm4gZX0pLGd0OnZlKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9bjwwP24rdDpuOysrcjx0OyllLnB1c2gocik7cmV0dXJuIGV9KX19KS5wc2V1ZG9zLm50aD1iLnBzZXVkb3MuZXEse3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWIucHNldWRvc1tlXT1kZShlKTtmb3IoZSBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWIucHNldWRvc1tlXT1oZShlKTtmdW5jdGlvbiBtZSgpe31mdW5jdGlvbiB4ZShlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoLHI9XCJcIjt0PG47dCsrKXIrPWVbdF0udmFsdWU7cmV0dXJuIHJ9ZnVuY3Rpb24gYmUocyxlLHQpe3ZhciB1PWUuZGlyLGw9ZS5uZXh0LGM9bHx8dSxmPXQmJlwicGFyZW50Tm9kZVwiPT09YyxwPXIrKztyZXR1cm4gZS5maXJzdD9mdW5jdGlvbihlLHQsbil7d2hpbGUoZT1lW3VdKWlmKDE9PT1lLm5vZGVUeXBlfHxmKXJldHVybiBzKGUsdCxuKTtyZXR1cm4hMX06ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPVtrLHBdO2lmKG4pe3doaWxlKGU9ZVt1XSlpZigoMT09PWUubm9kZVR5cGV8fGYpJiZzKGUsdCxuKSlyZXR1cm4hMH1lbHNlIHdoaWxlKGU9ZVt1XSlpZigxPT09ZS5ub2RlVHlwZXx8ZilpZihpPShvPWVbU118fChlW1NdPXt9KSlbZS51bmlxdWVJRF18fChvW2UudW5pcXVlSURdPXt9KSxsJiZsPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKWU9ZVt1XXx8ZTtlbHNle2lmKChyPWlbY10pJiZyWzBdPT09ayYmclsxXT09PXApcmV0dXJuIGFbMl09clsyXTtpZigoaVtjXT1hKVsyXT1zKGUsdCxuKSlyZXR1cm4hMH1yZXR1cm4hMX19ZnVuY3Rpb24gd2UoaSl7cmV0dXJuIDE8aS5sZW5ndGg/ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWkubGVuZ3RoO3doaWxlKHItLSlpZighaVtyXShlLHQsbikpcmV0dXJuITE7cmV0dXJuITB9OmlbMF19ZnVuY3Rpb24gVGUoZSx0LG4scixpKXtmb3IodmFyIG8sYT1bXSxzPTAsdT1lLmxlbmd0aCxsPW51bGwhPXQ7czx1O3MrKykobz1lW3NdKSYmKG4mJiFuKG8scixpKXx8KGEucHVzaChvKSxsJiZ0LnB1c2gocykpKTtyZXR1cm4gYX1mdW5jdGlvbiBDZShkLGgsZyx2LHksZSl7cmV0dXJuIHYmJiF2W1NdJiYodj1DZSh2KSkseSYmIXlbU10mJih5PUNlKHksZSkpLGxlKGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzPVtdLHU9W10sbD10Lmxlbmd0aCxjPWV8fGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9MCxpPXQubGVuZ3RoO3I8aTtyKyspc2UoZSx0W3JdLG4pO3JldHVybiBufShofHxcIipcIixuLm5vZGVUeXBlP1tuXTpuLFtdKSxmPSFkfHwhZSYmaD9jOlRlKGMscyxkLG4scikscD1nP3l8fChlP2Q6bHx8dik/W106dDpmO2lmKGcmJmcoZixwLG4sciksdil7aT1UZShwLHUpLHYoaSxbXSxuLHIpLG89aS5sZW5ndGg7d2hpbGUoby0tKShhPWlbb10pJiYocFt1W29dXT0hKGZbdVtvXV09YSkpfWlmKGUpe2lmKHl8fGQpe2lmKHkpe2k9W10sbz1wLmxlbmd0aDt3aGlsZShvLS0pKGE9cFtvXSkmJmkucHVzaChmW29dPWEpO3kobnVsbCxwPVtdLGkscil9bz1wLmxlbmd0aDt3aGlsZShvLS0pKGE9cFtvXSkmJi0xPChpPXk/UChlLGEpOnNbb10pJiYoZVtpXT0hKHRbaV09YSkpfX1lbHNlIHA9VGUocD09PXQ/cC5zcGxpY2UobCxwLmxlbmd0aCk6cCkseT95KG51bGwsdCxwLHIpOkguYXBwbHkodCxwKX0pfWZ1bmN0aW9uIEVlKGUpe2Zvcih2YXIgaSx0LG4scj1lLmxlbmd0aCxvPWIucmVsYXRpdmVbZVswXS50eXBlXSxhPW98fGIucmVsYXRpdmVbXCIgXCJdLHM9bz8xOjAsdT1iZShmdW5jdGlvbihlKXtyZXR1cm4gZT09PWl9LGEsITApLGw9YmUoZnVuY3Rpb24oZSl7cmV0dXJuLTE8UChpLGUpfSxhLCEwKSxjPVtmdW5jdGlvbihlLHQsbil7dmFyIHI9IW8mJihufHx0IT09dyl8fCgoaT10KS5ub2RlVHlwZT91KGUsdCxuKTpsKGUsdCxuKSk7cmV0dXJuIGk9bnVsbCxyfV07czxyO3MrKylpZih0PWIucmVsYXRpdmVbZVtzXS50eXBlXSljPVtiZSh3ZShjKSx0KV07ZWxzZXtpZigodD1iLmZpbHRlcltlW3NdLnR5cGVdLmFwcGx5KG51bGwsZVtzXS5tYXRjaGVzKSlbU10pe2ZvcihuPSsrcztuPHI7bisrKWlmKGIucmVsYXRpdmVbZVtuXS50eXBlXSlicmVhaztyZXR1cm4gQ2UoMTxzJiZ3ZShjKSwxPHMmJnhlKGUuc2xpY2UoMCxzLTEpLmNvbmNhdCh7dmFsdWU6XCIgXCI9PT1lW3MtMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UoJCxcIiQxXCIpLHQsczxuJiZFZShlLnNsaWNlKHMsbikpLG48ciYmRWUoZT1lLnNsaWNlKG4pKSxuPHImJnhlKGUpKX1jLnB1c2godCl9cmV0dXJuIHdlKGMpfXJldHVybiBtZS5wcm90b3R5cGU9Yi5maWx0ZXJzPWIucHNldWRvcyxiLnNldEZpbHRlcnM9bmV3IG1lLGg9c2UudG9rZW5pemU9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxhLHMsdSxsPXhbZStcIiBcIl07aWYobClyZXR1cm4gdD8wOmwuc2xpY2UoMCk7YT1lLHM9W10sdT1iLnByZUZpbHRlcjt3aGlsZShhKXtmb3IobyBpbiBuJiYhKHI9Xy5leGVjKGEpKXx8KHImJihhPWEuc2xpY2UoclswXS5sZW5ndGgpfHxhKSxzLnB1c2goaT1bXSkpLG49ITEsKHI9ei5leGVjKGEpKSYmKG49ci5zaGlmdCgpLGkucHVzaCh7dmFsdWU6bix0eXBlOnJbMF0ucmVwbGFjZSgkLFwiIFwiKX0pLGE9YS5zbGljZShuLmxlbmd0aCkpLGIuZmlsdGVyKSEocj1HW29dLmV4ZWMoYSkpfHx1W29dJiYhKHI9dVtvXShyKSl8fChuPXIuc2hpZnQoKSxpLnB1c2goe3ZhbHVlOm4sdHlwZTpvLG1hdGNoZXM6cn0pLGE9YS5zbGljZShuLmxlbmd0aCkpO2lmKCFuKWJyZWFrfXJldHVybiB0P2EubGVuZ3RoOmE/c2UuZXJyb3IoZSk6eChlLHMpLnNsaWNlKDApfSxmPXNlLmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbix2LHksbSx4LHIsaT1bXSxvPVtdLGE9QVtlK1wiIFwiXTtpZighYSl7dHx8KHQ9aChlKSksbj10Lmxlbmd0aDt3aGlsZShuLS0pKGE9RWUodFtuXSkpW1NdP2kucHVzaChhKTpvLnB1c2goYSk7KGE9QShlLCh2PW8sbT0wPCh5PWkpLmxlbmd0aCx4PTA8di5sZW5ndGgscj1mdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvLGEscyx1PTAsbD1cIjBcIixjPWUmJltdLGY9W10scD13LGQ9ZXx8eCYmYi5maW5kLlRBRyhcIipcIixpKSxoPWsrPW51bGw9PXA/MTpNYXRoLnJhbmRvbSgpfHwuMSxnPWQubGVuZ3RoO2ZvcihpJiYodz10PT1DfHx0fHxpKTtsIT09ZyYmbnVsbCE9KG89ZFtsXSk7bCsrKXtpZih4JiZvKXthPTAsdHx8by5vd25lckRvY3VtZW50PT1DfHwoVChvKSxuPSFFKTt3aGlsZShzPXZbYSsrXSlpZihzKG8sdHx8QyxuKSl7ci5wdXNoKG8pO2JyZWFrfWkmJihrPWgpfW0mJigobz0hcyYmbykmJnUtLSxlJiZjLnB1c2gobykpfWlmKHUrPWwsbSYmbCE9PXUpe2E9MDt3aGlsZShzPXlbYSsrXSlzKGMsZix0LG4pO2lmKGUpe2lmKDA8dSl3aGlsZShsLS0pY1tsXXx8ZltsXXx8KGZbbF09cS5jYWxsKHIpKTtmPVRlKGYpfUguYXBwbHkocixmKSxpJiYhZSYmMDxmLmxlbmd0aCYmMTx1K3kubGVuZ3RoJiZzZS51bmlxdWVTb3J0KHIpfXJldHVybiBpJiYoaz1oLHc9cCksY30sbT9sZShyKTpyKSkpLnNlbGVjdG9yPWV9cmV0dXJuIGF9LGc9c2Uuc2VsZWN0PWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLGM9IXImJmgoZT1sLnNlbGVjdG9yfHxlKTtpZihuPW58fFtdLDE9PT1jLmxlbmd0aCl7aWYoMjwobz1jWzBdPWNbMF0uc2xpY2UoMCkpLmxlbmd0aCYmXCJJRFwiPT09KGE9b1swXSkudHlwZSYmOT09PXQubm9kZVR5cGUmJkUmJmIucmVsYXRpdmVbb1sxXS50eXBlXSl7aWYoISh0PShiLmZpbmQuSUQoYS5tYXRjaGVzWzBdLnJlcGxhY2UodGUsbmUpLHQpfHxbXSlbMF0pKXJldHVybiBuO2wmJih0PXQucGFyZW50Tm9kZSksZT1lLnNsaWNlKG8uc2hpZnQoKS52YWx1ZS5sZW5ndGgpfWk9Ry5uZWVkc0NvbnRleHQudGVzdChlKT8wOm8ubGVuZ3RoO3doaWxlKGktLSl7aWYoYT1vW2ldLGIucmVsYXRpdmVbcz1hLnR5cGVdKWJyZWFrO2lmKCh1PWIuZmluZFtzXSkmJihyPXUoYS5tYXRjaGVzWzBdLnJlcGxhY2UodGUsbmUpLGVlLnRlc3Qob1swXS50eXBlKSYmeWUodC5wYXJlbnROb2RlKXx8dCkpKXtpZihvLnNwbGljZShpLDEpLCEoZT1yLmxlbmd0aCYmeGUobykpKXJldHVybiBILmFwcGx5KG4sciksbjticmVha319fXJldHVybihsfHxmKGUsYykpKHIsdCwhRSxuLCF0fHxlZS50ZXN0KGUpJiZ5ZSh0LnBhcmVudE5vZGUpfHx0KSxufSxkLnNvcnRTdGFibGU9Uy5zcGxpdChcIlwiKS5zb3J0KEQpLmpvaW4oXCJcIik9PT1TLGQuZGV0ZWN0RHVwbGljYXRlcz0hIWwsVCgpLGQuc29ydERldGFjaGVkPWNlKGZ1bmN0aW9uKGUpe3JldHVybiAxJmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oQy5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikpfSksY2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPVwiPGEgaHJlZj0nIyc+PC9hPlwiLFwiI1wiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIil9KXx8ZmUoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsZnVuY3Rpb24oZSx0LG4pe2lmKCFuKXJldHVybiBlLmdldEF0dHJpYnV0ZSh0LFwidHlwZVwiPT09dC50b0xvd2VyQ2FzZSgpPzE6Mil9KSxkLmF0dHJpYnV0ZXMmJmNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD1cIjxpbnB1dC8+XCIsZS5maXJzdENoaWxkLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIiksXCJcIj09PWUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKX0pfHxmZShcInZhbHVlXCIsZnVuY3Rpb24oZSx0LG4pe2lmKCFuJiZcImlucHV0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpcmV0dXJuIGUuZGVmYXVsdFZhbHVlfSksY2UoZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWUuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIil9KXx8ZmUoUixmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoIW4pcmV0dXJuITA9PT1lW3RdP3QudG9Mb3dlckNhc2UoKToocj1lLmdldEF0dHJpYnV0ZU5vZGUodCkpJiZyLnNwZWNpZmllZD9yLnZhbHVlOm51bGx9KSxzZX0oQyk7Uy5maW5kPWQsUy5leHByPWQuc2VsZWN0b3JzLFMuZXhwcltcIjpcIl09Uy5leHByLnBzZXVkb3MsUy51bmlxdWVTb3J0PVMudW5pcXVlPWQudW5pcXVlU29ydCxTLnRleHQ9ZC5nZXRUZXh0LFMuaXNYTUxEb2M9ZC5pc1hNTCxTLmNvbnRhaW5zPWQuY29udGFpbnMsUy5lc2NhcGVTZWxlY3Rvcj1kLmVzY2FwZTt2YXIgaD1mdW5jdGlvbihlLHQsbil7dmFyIHI9W10saT12b2lkIDAhPT1uO3doaWxlKChlPWVbdF0pJiY5IT09ZS5ub2RlVHlwZSlpZigxPT09ZS5ub2RlVHlwZSl7aWYoaSYmUyhlKS5pcyhuKSlicmVhaztyLnB1c2goZSl9cmV0dXJuIHJ9LFQ9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W107ZTtlPWUubmV4dFNpYmxpbmcpMT09PWUubm9kZVR5cGUmJmUhPT10JiZuLnB1c2goZSk7cmV0dXJuIG59LGs9Uy5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtmdW5jdGlvbiBBKGUsdCl7cmV0dXJuIGUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXQudG9Mb3dlckNhc2UoKX12YXIgTj0vXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaTtmdW5jdGlvbiBEKGUsbixyKXtyZXR1cm4gbShuKT9TLmdyZXAoZSxmdW5jdGlvbihlLHQpe3JldHVybiEhbi5jYWxsKGUsdCxlKSE9PXJ9KTpuLm5vZGVUeXBlP1MuZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiBlPT09biE9PXJ9KTpcInN0cmluZ1wiIT10eXBlb2Ygbj9TLmdyZXAoZSxmdW5jdGlvbihlKXtyZXR1cm4tMTxpLmNhbGwobixlKSE9PXJ9KTpTLmZpbHRlcihuLGUscil9Uy5maWx0ZXI9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRbMF07cmV0dXJuIG4mJihlPVwiOm5vdChcIitlK1wiKVwiKSwxPT09dC5sZW5ndGgmJjE9PT1yLm5vZGVUeXBlP1MuZmluZC5tYXRjaGVzU2VsZWN0b3IocixlKT9bcl06W106Uy5maW5kLm1hdGNoZXMoZSxTLmdyZXAodCxmdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV9KSl9LFMuZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj10aGlzLmxlbmd0aCxpPXRoaXM7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIHRoaXMucHVzaFN0YWNrKFMoZSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDt0PHI7dCsrKWlmKFMuY29udGFpbnMoaVt0XSx0aGlzKSlyZXR1cm4hMH0pKTtmb3Iobj10aGlzLnB1c2hTdGFjayhbXSksdD0wO3Q8cjt0KyspUy5maW5kKGUsaVt0XSxuKTtyZXR1cm4gMTxyP1MudW5pcXVlU29ydChuKTpufSxmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKEQodGhpcyxlfHxbXSwhMSkpfSxub3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKEQodGhpcyxlfHxbXSwhMCkpfSxpczpmdW5jdGlvbihlKXtyZXR1cm4hIUQodGhpcyxcInN0cmluZ1wiPT10eXBlb2YgZSYmay50ZXN0KGUpP1MoZSk6ZXx8W10sITEpLmxlbmd0aH19KTt2YXIgaixxPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvOyhTLmZuLmluaXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk7aWYoIWUpcmV0dXJuIHRoaXM7aWYobj1ufHxqLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZighKHI9XCI8XCI9PT1lWzBdJiZcIj5cIj09PWVbZS5sZW5ndGgtMV0mJjM8PWUubGVuZ3RoP1tudWxsLGUsbnVsbF06cS5leGVjKGUpKXx8IXJbMV0mJnQpcmV0dXJuIXR8fHQuanF1ZXJ5Pyh0fHxuKS5maW5kKGUpOnRoaXMuY29uc3RydWN0b3IodCkuZmluZChlKTtpZihyWzFdKXtpZih0PXQgaW5zdGFuY2VvZiBTP3RbMF06dCxTLm1lcmdlKHRoaXMsUy5wYXJzZUhUTUwoclsxXSx0JiZ0Lm5vZGVUeXBlP3Qub3duZXJEb2N1bWVudHx8dDpFLCEwKSksTi50ZXN0KHJbMV0pJiZTLmlzUGxhaW5PYmplY3QodCkpZm9yKHIgaW4gdCltKHRoaXNbcl0pP3RoaXNbcl0odFtyXSk6dGhpcy5hdHRyKHIsdFtyXSk7cmV0dXJuIHRoaXN9cmV0dXJuKGk9RS5nZXRFbGVtZW50QnlJZChyWzJdKSkmJih0aGlzWzBdPWksdGhpcy5sZW5ndGg9MSksdGhpc31yZXR1cm4gZS5ub2RlVHlwZT8odGhpc1swXT1lLHRoaXMubGVuZ3RoPTEsdGhpcyk6bShlKT92b2lkIDAhPT1uLnJlYWR5P24ucmVhZHkoZSk6ZShTKTpTLm1ha2VBcnJheShlLHRoaXMpfSkucHJvdG90eXBlPVMuZm4saj1TKEUpO3ZhciBMPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLEg9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07ZnVuY3Rpb24gTyhlLHQpe3doaWxlKChlPWVbdF0pJiYxIT09ZS5ub2RlVHlwZSk7cmV0dXJuIGV9Uy5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihlKXt2YXIgdD1TKGUsdGhpcyksbj10Lmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGU9MDtlPG47ZSsrKWlmKFMuY29udGFpbnModGhpcyx0W2VdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wLGk9dGhpcy5sZW5ndGgsbz1bXSxhPVwic3RyaW5nXCIhPXR5cGVvZiBlJiZTKGUpO2lmKCFrLnRlc3QoZSkpZm9yKDtyPGk7cisrKWZvcihuPXRoaXNbcl07biYmbiE9PXQ7bj1uLnBhcmVudE5vZGUpaWYobi5ub2RlVHlwZTwxMSYmKGE/LTE8YS5pbmRleChuKToxPT09bi5ub2RlVHlwZSYmUy5maW5kLm1hdGNoZXNTZWxlY3RvcihuLGUpKSl7by5wdXNoKG4pO2JyZWFrfXJldHVybiB0aGlzLnB1c2hTdGFjaygxPG8ubGVuZ3RoP1MudW5pcXVlU29ydChvKTpvKX0saW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJzdHJpbmdcIj09dHlwZW9mIGU/aS5jYWxsKFMoZSksdGhpc1swXSk6aS5jYWxsKHRoaXMsZS5qcXVlcnk/ZVswXTplKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnB1c2hTdGFjayhTLnVuaXF1ZVNvcnQoUy5tZXJnZSh0aGlzLmdldCgpLFMoZSx0KSkpKX0sYWRkQmFjazpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09ZT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSl9fSksUy5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiYxMSE9PXQubm9kZVR5cGU/dDpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBoKGUsXCJwYXJlbnROb2RlXCIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBoKGUsXCJwYXJlbnROb2RlXCIsbil9LG5leHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIE8oZSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2OmZ1bmN0aW9uKGUpe3JldHVybiBPKGUsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIGgoZSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBoKGUsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGgoZSxcIm5leHRTaWJsaW5nXCIsbil9LHByZXZVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGgoZSxcInByZXZpb3VzU2libGluZ1wiLG4pfSxzaWJsaW5nczpmdW5jdGlvbihlKXtyZXR1cm4gVCgoZS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxlKX0sY2hpbGRyZW46ZnVuY3Rpb24oZSl7cmV0dXJuIFQoZS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWUuY29udGVudERvY3VtZW50JiZyKGUuY29udGVudERvY3VtZW50KT9lLmNvbnRlbnREb2N1bWVudDooQShlLFwidGVtcGxhdGVcIikmJihlPWUuY29udGVudHx8ZSksUy5tZXJnZShbXSxlLmNoaWxkTm9kZXMpKX19LGZ1bmN0aW9uKHIsaSl7Uy5mbltyXT1mdW5jdGlvbihlLHQpe3ZhciBuPVMubWFwKHRoaXMsaSxlKTtyZXR1cm5cIlVudGlsXCIhPT1yLnNsaWNlKC01KSYmKHQ9ZSksdCYmXCJzdHJpbmdcIj09dHlwZW9mIHQmJihuPVMuZmlsdGVyKHQsbikpLDE8dGhpcy5sZW5ndGgmJihIW3JdfHxTLnVuaXF1ZVNvcnQobiksTC50ZXN0KHIpJiZuLnJldmVyc2UoKSksdGhpcy5wdXNoU3RhY2sobil9fSk7dmFyIFA9L1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nO2Z1bmN0aW9uIFIoZSl7cmV0dXJuIGV9ZnVuY3Rpb24gTShlKXt0aHJvdyBlfWZ1bmN0aW9uIEkoZSx0LG4scil7dmFyIGk7dHJ5e2UmJm0oaT1lLnByb21pc2UpP2kuY2FsbChlKS5kb25lKHQpLmZhaWwobik6ZSYmbShpPWUudGhlbik/aS5jYWxsKGUsdCxuKTp0LmFwcGx5KHZvaWQgMCxbZV0uc2xpY2UocikpfWNhdGNoKGUpe24uYXBwbHkodm9pZCAwLFtlXSl9fVMuQ2FsbGJhY2tzPWZ1bmN0aW9uKHIpe3ZhciBlLG47cj1cInN0cmluZ1wiPT10eXBlb2Ygcj8oZT1yLG49e30sUy5lYWNoKGUubWF0Y2goUCl8fFtdLGZ1bmN0aW9uKGUsdCl7blt0XT0hMH0pLG4pOlMuZXh0ZW5kKHt9LHIpO3ZhciBpLHQsbyxhLHM9W10sdT1bXSxsPS0xLGM9ZnVuY3Rpb24oKXtmb3IoYT1hfHxyLm9uY2Usbz1pPSEwO3UubGVuZ3RoO2w9LTEpe3Q9dS5zaGlmdCgpO3doaWxlKCsrbDxzLmxlbmd0aCkhMT09PXNbbF0uYXBwbHkodFswXSx0WzFdKSYmci5zdG9wT25GYWxzZSYmKGw9cy5sZW5ndGgsdD0hMSl9ci5tZW1vcnl8fCh0PSExKSxpPSExLGEmJihzPXQ/W106XCJcIil9LGY9e2FkZDpmdW5jdGlvbigpe3JldHVybiBzJiYodCYmIWkmJihsPXMubGVuZ3RoLTEsdS5wdXNoKHQpKSxmdW5jdGlvbiBuKGUpe1MuZWFjaChlLGZ1bmN0aW9uKGUsdCl7bSh0KT9yLnVuaXF1ZSYmZi5oYXModCl8fHMucHVzaCh0KTp0JiZ0Lmxlbmd0aCYmXCJzdHJpbmdcIiE9PXcodCkmJm4odCl9KX0oYXJndW1lbnRzKSx0JiYhaSYmYygpKSx0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gUy5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihlLHQpe3ZhciBuO3doaWxlKC0xPChuPVMuaW5BcnJheSh0LHMsbikpKXMuc3BsaWNlKG4sMSksbjw9bCYmbC0tfSksdGhpc30saGFzOmZ1bmN0aW9uKGUpe3JldHVybiBlPy0xPFMuaW5BcnJheShlLHMpOjA8cy5sZW5ndGh9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHMmJihzPVtdKSx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGE9dT1bXSxzPXQ9XCJcIix0aGlzfSxkaXNhYmxlZDpmdW5jdGlvbigpe3JldHVybiFzfSxsb2NrOmZ1bmN0aW9uKCl7cmV0dXJuIGE9dT1bXSx0fHxpfHwocz10PVwiXCIpLHRoaXN9LGxvY2tlZDpmdW5jdGlvbigpe3JldHVybiEhYX0sZmlyZVdpdGg6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYXx8KHQ9W2UsKHQ9dHx8W10pLnNsaWNlP3Quc2xpY2UoKTp0XSx1LnB1c2godCksaXx8YygpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIGYuZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFvfX07cmV0dXJuIGZ9LFMuZXh0ZW5kKHtEZWZlcnJlZDpmdW5jdGlvbihlKXt2YXIgbz1bW1wibm90aWZ5XCIsXCJwcm9ncmVzc1wiLFMuQ2FsbGJhY2tzKFwibWVtb3J5XCIpLFMuQ2FsbGJhY2tzKFwibWVtb3J5XCIpLDJdLFtcInJlc29sdmVcIixcImRvbmVcIixTLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFMuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMCxcInJlc29sdmVkXCJdLFtcInJlamVjdFwiLFwiZmFpbFwiLFMuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksUy5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwxLFwicmVqZWN0ZWRcIl1dLGk9XCJwZW5kaW5nXCIsYT17c3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIHMuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSx0aGlzfSxcImNhdGNoXCI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEudGhlbihudWxsLGUpfSxwaXBlOmZ1bmN0aW9uKCl7dmFyIGk9YXJndW1lbnRzO3JldHVybiBTLkRlZmVycmVkKGZ1bmN0aW9uKHIpe1MuZWFjaChvLGZ1bmN0aW9uKGUsdCl7dmFyIG49bShpW3RbNF1dKSYmaVt0WzRdXTtzW3RbMV1dKGZ1bmN0aW9uKCl7dmFyIGU9biYmbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7ZSYmbShlLnByb21pc2UpP2UucHJvbWlzZSgpLnByb2dyZXNzKHIubm90aWZ5KS5kb25lKHIucmVzb2x2ZSkuZmFpbChyLnJlamVjdCk6clt0WzBdK1wiV2l0aFwiXSh0aGlzLG4/W2VdOmFyZ3VtZW50cyl9KX0pLGk9bnVsbH0pLnByb21pc2UoKX0sdGhlbjpmdW5jdGlvbih0LG4scil7dmFyIHU9MDtmdW5jdGlvbiBsKGksbyxhLHMpe3JldHVybiBmdW5jdGlvbigpe3ZhciBuPXRoaXMscj1hcmd1bWVudHMsZT1mdW5jdGlvbigpe3ZhciBlLHQ7aWYoIShpPHUpKXtpZigoZT1hLmFwcGx5KG4scikpPT09by5wcm9taXNlKCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiKTt0PWUmJihcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkmJmUudGhlbixtKHQpP3M/dC5jYWxsKGUsbCh1LG8sUixzKSxsKHUsbyxNLHMpKToodSsrLHQuY2FsbChlLGwodSxvLFIscyksbCh1LG8sTSxzKSxsKHUsbyxSLG8ubm90aWZ5V2l0aCkpKTooYSE9PVImJihuPXZvaWQgMCxyPVtlXSksKHN8fG8ucmVzb2x2ZVdpdGgpKG4scikpfX0sdD1zP2U6ZnVuY3Rpb24oKXt0cnl7ZSgpfWNhdGNoKGUpe1MuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayYmUy5EZWZlcnJlZC5leGNlcHRpb25Ib29rKGUsdC5zdGFja1RyYWNlKSx1PD1pKzEmJihhIT09TSYmKG49dm9pZCAwLHI9W2VdKSxvLnJlamVjdFdpdGgobixyKSl9fTtpP3QoKTooUy5EZWZlcnJlZC5nZXRTdGFja0hvb2smJih0LnN0YWNrVHJhY2U9Uy5EZWZlcnJlZC5nZXRTdGFja0hvb2soKSksQy5zZXRUaW1lb3V0KHQpKX19cmV0dXJuIFMuRGVmZXJyZWQoZnVuY3Rpb24oZSl7b1swXVszXS5hZGQobCgwLGUsbShyKT9yOlIsZS5ub3RpZnlXaXRoKSksb1sxXVszXS5hZGQobCgwLGUsbSh0KT90OlIpKSxvWzJdWzNdLmFkZChsKDAsZSxtKG4pP246TSkpfSkucHJvbWlzZSgpfSxwcm9taXNlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lP1MuZXh0ZW5kKGUsYSk6YX19LHM9e307cmV0dXJuIFMuZWFjaChvLGZ1bmN0aW9uKGUsdCl7dmFyIG49dFsyXSxyPXRbNV07YVt0WzFdXT1uLmFkZCxyJiZuLmFkZChmdW5jdGlvbigpe2k9cn0sb1szLWVdWzJdLmRpc2FibGUsb1szLWVdWzNdLmRpc2FibGUsb1swXVsyXS5sb2NrLG9bMF1bM10ubG9jayksbi5hZGQodFszXS5maXJlKSxzW3RbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIHNbdFswXStcIldpdGhcIl0odGhpcz09PXM/dm9pZCAwOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxzW3RbMF0rXCJXaXRoXCJdPW4uZmlyZVdpdGh9KSxhLnByb21pc2UocyksZSYmZS5jYWxsKHMscyksc30sd2hlbjpmdW5jdGlvbihlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoLHQ9bixyPUFycmF5KHQpLGk9cy5jYWxsKGFyZ3VtZW50cyksbz1TLkRlZmVycmVkKCksYT1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7clt0XT10aGlzLGlbdF09MTxhcmd1bWVudHMubGVuZ3RoP3MuY2FsbChhcmd1bWVudHMpOmUsLS1ufHxvLnJlc29sdmVXaXRoKHIsaSl9fTtpZihuPD0xJiYoSShlLG8uZG9uZShhKHQpKS5yZXNvbHZlLG8ucmVqZWN0LCFuKSxcInBlbmRpbmdcIj09PW8uc3RhdGUoKXx8bShpW3RdJiZpW3RdLnRoZW4pKSlyZXR1cm4gby50aGVuKCk7d2hpbGUodC0tKUkoaVt0XSxhKHQpLG8ucmVqZWN0KTtyZXR1cm4gby5wcm9taXNlKCl9fSk7dmFyIFc9L14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87Uy5EZWZlcnJlZC5leGNlcHRpb25Ib29rPWZ1bmN0aW9uKGUsdCl7Qy5jb25zb2xlJiZDLmNvbnNvbGUud2FybiYmZSYmVy50ZXN0KGUubmFtZSkmJkMuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlLGUuc3RhY2ssdCl9LFMucmVhZHlFeGNlcHRpb249ZnVuY3Rpb24oZSl7Qy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZX0pfTt2YXIgRj1TLkRlZmVycmVkKCk7ZnVuY3Rpb24gQigpe0UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixCKSxDLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsQiksUy5yZWFkeSgpfVMuZm4ucmVhZHk9ZnVuY3Rpb24oZSl7cmV0dXJuIEYudGhlbihlKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGUpe1MucmVhZHlFeGNlcHRpb24oZSl9KSx0aGlzfSxTLmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxyZWFkeTpmdW5jdGlvbihlKXsoITA9PT1lPy0tUy5yZWFkeVdhaXQ6Uy5pc1JlYWR5KXx8KFMuaXNSZWFkeT0hMCkhPT1lJiYwPC0tUy5yZWFkeVdhaXR8fEYucmVzb2x2ZVdpdGgoRSxbU10pfX0pLFMucmVhZHkudGhlbj1GLnRoZW4sXCJjb21wbGV0ZVwiPT09RS5yZWFkeVN0YXRlfHxcImxvYWRpbmdcIiE9PUUucmVhZHlTdGF0ZSYmIUUuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsP0Muc2V0VGltZW91dChTLnJlYWR5KTooRS5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLEIpLEMuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixCKSk7dmFyICQ9ZnVuY3Rpb24oZSx0LG4scixpLG8sYSl7dmFyIHM9MCx1PWUubGVuZ3RoLGw9bnVsbD09bjtpZihcIm9iamVjdFwiPT09dyhuKSlmb3IocyBpbiBpPSEwLG4pJChlLHQscyxuW3NdLCEwLG8sYSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYoaT0hMCxtKHIpfHwoYT0hMCksbCYmKGE/KHQuY2FsbChlLHIpLHQ9bnVsbCk6KGw9dCx0PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbC5jYWxsKFMoZSksbil9KSksdCkpZm9yKDtzPHU7cysrKXQoZVtzXSxuLGE/cjpyLmNhbGwoZVtzXSxzLHQoZVtzXSxuKSkpO3JldHVybiBpP2U6bD90LmNhbGwoZSk6dT90KGVbMF0sbik6b30sXz0vXi1tcy0vLHo9Ly0oW2Etel0pL2c7ZnVuY3Rpb24gVShlLHQpe3JldHVybiB0LnRvVXBwZXJDYXNlKCl9ZnVuY3Rpb24gWChlKXtyZXR1cm4gZS5yZXBsYWNlKF8sXCJtcy1cIikucmVwbGFjZSh6LFUpfXZhciBWPWZ1bmN0aW9uKGUpe3JldHVybiAxPT09ZS5ub2RlVHlwZXx8OT09PWUubm9kZVR5cGV8fCErZS5ub2RlVHlwZX07ZnVuY3Rpb24gRygpe3RoaXMuZXhwYW5kbz1TLmV4cGFuZG8rRy51aWQrK31HLnVpZD0xLEcucHJvdG90eXBlPXtjYWNoZTpmdW5jdGlvbihlKXt2YXIgdD1lW3RoaXMuZXhwYW5kb107cmV0dXJuIHR8fCh0PXt9LFYoZSkmJihlLm5vZGVUeXBlP2VbdGhpcy5leHBhbmRvXT10Ok9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHRoaXMuZXhwYW5kbyx7dmFsdWU6dCxjb25maWd1cmFibGU6ITB9KSkpLHR9LHNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaT10aGlzLmNhY2hlKGUpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KWlbWCh0KV09bjtlbHNlIGZvcihyIGluIHQpaVtYKHIpXT10W3JdO3JldHVybiBpfSxnZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD90aGlzLmNhY2hlKGUpOmVbdGhpcy5leHBhbmRvXSYmZVt0aGlzLmV4cGFuZG9dW1godCldfSxhY2Nlc3M6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT10fHx0JiZcInN0cmluZ1wiPT10eXBlb2YgdCYmdm9pZCAwPT09bj90aGlzLmdldChlLHQpOih0aGlzLnNldChlLHQsbiksdm9pZCAwIT09bj9uOnQpfSxyZW1vdmU6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPWVbdGhpcy5leHBhbmRvXTtpZih2b2lkIDAhPT1yKXtpZih2b2lkIDAhPT10KXtuPSh0PUFycmF5LmlzQXJyYXkodCk/dC5tYXAoWCk6KHQ9WCh0KSlpbiByP1t0XTp0Lm1hdGNoKFApfHxbXSkubGVuZ3RoO3doaWxlKG4tLSlkZWxldGUgclt0W25dXX0odm9pZCAwPT09dHx8Uy5pc0VtcHR5T2JqZWN0KHIpKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXZvaWQgMDpkZWxldGUgZVt0aGlzLmV4cGFuZG9dKX19LGhhc0RhdGE6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVt0aGlzLmV4cGFuZG9dO3JldHVybiB2b2lkIDAhPT10JiYhUy5pc0VtcHR5T2JqZWN0KHQpfX07dmFyIFk9bmV3IEcsUT1uZXcgRyxKPS9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxLPS9bQS1aXS9nO2Z1bmN0aW9uIFooZSx0LG4pe3ZhciByLGk7aWYodm9pZCAwPT09biYmMT09PWUubm9kZVR5cGUpaWYocj1cImRhdGEtXCIrdC5yZXBsYWNlKEssXCItJCZcIikudG9Mb3dlckNhc2UoKSxcInN0cmluZ1wiPT10eXBlb2Yobj1lLmdldEF0dHJpYnV0ZShyKSkpe3RyeXtuPVwidHJ1ZVwiPT09KGk9bil8fFwiZmFsc2VcIiE9PWkmJihcIm51bGxcIj09PWk/bnVsbDppPT09K2krXCJcIj8raTpKLnRlc3QoaSk/SlNPTi5wYXJzZShpKTppKX1jYXRjaChlKXt9US5zZXQoZSx0LG4pfWVsc2Ugbj12b2lkIDA7cmV0dXJuIG59Uy5leHRlbmQoe2hhc0RhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIFEuaGFzRGF0YShlKXx8WS5oYXNEYXRhKGUpfSxkYXRhOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUS5hY2Nlc3MoZSx0LG4pfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGUsdCl7US5yZW1vdmUoZSx0KX0sX2RhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBZLmFjY2VzcyhlLHQsbil9LF9yZW1vdmVEYXRhOmZ1bmN0aW9uKGUsdCl7WS5yZW1vdmUoZSx0KX19KSxTLmZuLmV4dGVuZCh7ZGF0YTpmdW5jdGlvbihuLGUpe3ZhciB0LHIsaSxvPXRoaXNbMF0sYT1vJiZvLmF0dHJpYnV0ZXM7aWYodm9pZCAwPT09bil7aWYodGhpcy5sZW5ndGgmJihpPVEuZ2V0KG8pLDE9PT1vLm5vZGVUeXBlJiYhWS5nZXQobyxcImhhc0RhdGFBdHRyc1wiKSkpe3Q9YS5sZW5ndGg7d2hpbGUodC0tKWFbdF0mJjA9PT0ocj1hW3RdLm5hbWUpLmluZGV4T2YoXCJkYXRhLVwiKSYmKHI9WChyLnNsaWNlKDUpKSxaKG8scixpW3JdKSk7WS5zZXQobyxcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gaX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2Ygbj90aGlzLmVhY2goZnVuY3Rpb24oKXtRLnNldCh0aGlzLG4pfSk6JCh0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0O2lmKG8mJnZvaWQgMD09PWUpcmV0dXJuIHZvaWQgMCE9PSh0PVEuZ2V0KG8sbikpP3Q6dm9pZCAwIT09KHQ9WihvLG4pKT90OnZvaWQgMDt0aGlzLmVhY2goZnVuY3Rpb24oKXtRLnNldCh0aGlzLG4sZSl9KX0sbnVsbCxlLDE8YXJndW1lbnRzLmxlbmd0aCxudWxsLCEwKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7US5yZW1vdmUodGhpcyxlKX0pfX0pLFMuZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoZSlyZXR1cm4gdD0odHx8XCJmeFwiKStcInF1ZXVlXCIscj1ZLmdldChlLHQpLG4mJighcnx8QXJyYXkuaXNBcnJheShuKT9yPVkuYWNjZXNzKGUsdCxTLm1ha2VBcnJheShuKSk6ci5wdXNoKG4pKSxyfHxbXX0sZGVxdWV1ZTpmdW5jdGlvbihlLHQpe3Q9dHx8XCJmeFwiO3ZhciBuPVMucXVldWUoZSx0KSxyPW4ubGVuZ3RoLGk9bi5zaGlmdCgpLG89Uy5fcXVldWVIb29rcyhlLHQpO1wiaW5wcm9ncmVzc1wiPT09aSYmKGk9bi5zaGlmdCgpLHItLSksaSYmKFwiZnhcIj09PXQmJm4udW5zaGlmdChcImlucHJvZ3Jlc3NcIiksZGVsZXRlIG8uc3RvcCxpLmNhbGwoZSxmdW5jdGlvbigpe1MuZGVxdWV1ZShlLHQpfSxvKSksIXImJm8mJm8uZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihlLHQpe3ZhciBuPXQrXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIFkuZ2V0KGUsbil8fFkuYWNjZXNzKGUsbix7ZW1wdHk6Uy5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKXtZLnJlbW92ZShlLFt0K1wicXVldWVcIixuXSl9KX0pfX0pLFMuZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbih0LG4pe3ZhciBlPTI7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIHQmJihuPXQsdD1cImZ4XCIsZS0tKSxhcmd1bWVudHMubGVuZ3RoPGU/Uy5xdWV1ZSh0aGlzWzBdLHQpOnZvaWQgMD09PW4/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1TLnF1ZXVlKHRoaXMsdCxuKTtTLl9xdWV1ZUhvb2tzKHRoaXMsdCksXCJmeFwiPT09dCYmXCJpbnByb2dyZXNzXCIhPT1lWzBdJiZTLmRlcXVldWUodGhpcyx0KX0pfSxkZXF1ZXVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtTLmRlcXVldWUodGhpcyxlKX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnF1ZXVlKGV8fFwiZnhcIixbXSl9LHByb21pc2U6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTEsaT1TLkRlZmVycmVkKCksbz10aGlzLGE9dGhpcy5sZW5ndGgscz1mdW5jdGlvbigpey0tcnx8aS5yZXNvbHZlV2l0aChvLFtvXSl9O1wic3RyaW5nXCIhPXR5cGVvZiBlJiYodD1lLGU9dm9pZCAwKSxlPWV8fFwiZnhcIjt3aGlsZShhLS0pKG49WS5nZXQob1thXSxlK1wicXVldWVIb29rc1wiKSkmJm4uZW1wdHkmJihyKyssbi5lbXB0eS5hZGQocykpO3JldHVybiBzKCksaS5wcm9taXNlKHQpfX0pO3ZhciBlZT0vWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsdGU9bmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIrZWUrXCIpKFthLXolXSopJFwiLFwiaVwiKSxuZT1bXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0scmU9RS5kb2N1bWVudEVsZW1lbnQsaWU9ZnVuY3Rpb24oZSl7cmV0dXJuIFMuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfSxvZT17Y29tcG9zZWQ6ITB9O3JlLmdldFJvb3ROb2RlJiYoaWU9ZnVuY3Rpb24oZSl7cmV0dXJuIFMuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfHxlLmdldFJvb3ROb2RlKG9lKT09PWUub3duZXJEb2N1bWVudH0pO3ZhciBhZT1mdW5jdGlvbihlLHQpe3JldHVyblwibm9uZVwiPT09KGU9dHx8ZSkuc3R5bGUuZGlzcGxheXx8XCJcIj09PWUuc3R5bGUuZGlzcGxheSYmaWUoZSkmJlwibm9uZVwiPT09Uy5jc3MoZSxcImRpc3BsYXlcIil9O2Z1bmN0aW9uIHNlKGUsdCxuLHIpe3ZhciBpLG8sYT0yMCxzPXI/ZnVuY3Rpb24oKXtyZXR1cm4gci5jdXIoKX06ZnVuY3Rpb24oKXtyZXR1cm4gUy5jc3MoZSx0LFwiXCIpfSx1PXMoKSxsPW4mJm5bM118fChTLmNzc051bWJlclt0XT9cIlwiOlwicHhcIiksYz1lLm5vZGVUeXBlJiYoUy5jc3NOdW1iZXJbdF18fFwicHhcIiE9PWwmJit1KSYmdGUuZXhlYyhTLmNzcyhlLHQpKTtpZihjJiZjWzNdIT09bCl7dS89MixsPWx8fGNbM10sYz0rdXx8MTt3aGlsZShhLS0pUy5zdHlsZShlLHQsYytsKSwoMS1vKSooMS0obz1zKCkvdXx8LjUpKTw9MCYmKGE9MCksYy89bztjKj0yLFMuc3R5bGUoZSx0LGMrbCksbj1ufHxbXX1yZXR1cm4gbiYmKGM9K2N8fCt1fHwwLGk9blsxXT9jKyhuWzFdKzEpKm5bMl06K25bMl0sciYmKHIudW5pdD1sLHIuc3RhcnQ9YyxyLmVuZD1pKSksaX12YXIgdWU9e307ZnVuY3Rpb24gbGUoZSx0KXtmb3IodmFyIG4scixpLG8sYSxzLHUsbD1bXSxjPTAsZj1lLmxlbmd0aDtjPGY7YysrKShyPWVbY10pLnN0eWxlJiYobj1yLnN0eWxlLmRpc3BsYXksdD8oXCJub25lXCI9PT1uJiYobFtjXT1ZLmdldChyLFwiZGlzcGxheVwiKXx8bnVsbCxsW2NdfHwoci5zdHlsZS5kaXNwbGF5PVwiXCIpKSxcIlwiPT09ci5zdHlsZS5kaXNwbGF5JiZhZShyKSYmKGxbY109KHU9YT1vPXZvaWQgMCxhPShpPXIpLm93bmVyRG9jdW1lbnQscz1pLm5vZGVOYW1lLCh1PXVlW3NdKXx8KG89YS5ib2R5LmFwcGVuZENoaWxkKGEuY3JlYXRlRWxlbWVudChzKSksdT1TLmNzcyhvLFwiZGlzcGxheVwiKSxvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyksXCJub25lXCI9PT11JiYodT1cImJsb2NrXCIpLHVlW3NdPXUpKSkpOlwibm9uZVwiIT09biYmKGxbY109XCJub25lXCIsWS5zZXQocixcImRpc3BsYXlcIixuKSkpO2ZvcihjPTA7YzxmO2MrKyludWxsIT1sW2NdJiYoZVtjXS5zdHlsZS5kaXNwbGF5PWxbY10pO3JldHVybiBlfVMuZm4uZXh0ZW5kKHtzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIGxlKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIGxlKHRoaXMpfSx0b2dnbGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBlP2U/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7YWUodGhpcyk/Uyh0aGlzKS5zaG93KCk6Uyh0aGlzKS5oaWRlKCl9KX19KTt2YXIgY2UsZmUscGU9L14oPzpjaGVja2JveHxyYWRpbykkL2ksZGU9LzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pLGhlPS9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2k7Y2U9RS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkuYXBwZW5kQ2hpbGQoRS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSwoZmU9RS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInJhZGlvXCIpLGZlLnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIixcImNoZWNrZWRcIiksZmUuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwidFwiKSxjZS5hcHBlbmRDaGlsZChmZSkseS5jaGVja0Nsb25lPWNlLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxjZS5pbm5lckhUTUw9XCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCIseS5ub0Nsb25lQ2hlY2tlZD0hIWNlLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZSxjZS5pbm5lckhUTUw9XCI8b3B0aW9uPjwvb3B0aW9uPlwiLHkub3B0aW9uPSEhY2UubGFzdENoaWxkO3ZhciBnZT17dGhlYWQ6WzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXSxjb2w6WzIsXCI8dGFibGU+PGNvbGdyb3VwPlwiLFwiPC9jb2xncm91cD48L3RhYmxlPlwiXSx0cjpbMixcIjx0YWJsZT48dGJvZHk+XCIsXCI8L3Rib2R5PjwvdGFibGU+XCJdLHRkOlszLFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sX2RlZmF1bHQ6WzAsXCJcIixcIlwiXX07ZnVuY3Rpb24gdmUoZSx0KXt2YXIgbjtyZXR1cm4gbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZT9lLmdldEVsZW1lbnRzQnlUYWdOYW1lKHR8fFwiKlwiKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZS5xdWVyeVNlbGVjdG9yQWxsP2UucXVlcnlTZWxlY3RvckFsbCh0fHxcIipcIik6W10sdm9pZCAwPT09dHx8dCYmQShlLHQpP1MubWVyZ2UoW2VdLG4pOm59ZnVuY3Rpb24geWUoZSx0KXtmb3IodmFyIG49MCxyPWUubGVuZ3RoO248cjtuKyspWS5zZXQoZVtuXSxcImdsb2JhbEV2YWxcIiwhdHx8WS5nZXQodFtuXSxcImdsb2JhbEV2YWxcIikpfWdlLnRib2R5PWdlLnRmb290PWdlLmNvbGdyb3VwPWdlLmNhcHRpb249Z2UudGhlYWQsZ2UudGg9Z2UudGQseS5vcHRpb258fChnZS5vcHRncm91cD1nZS5vcHRpb249WzEsXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsXCI8L3NlbGVjdD5cIl0pO3ZhciBtZT0vPHwmIz9cXHcrOy87ZnVuY3Rpb24geGUoZSx0LG4scixpKXtmb3IodmFyIG8sYSxzLHUsbCxjLGY9dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkscD1bXSxkPTAsaD1lLmxlbmd0aDtkPGg7ZCsrKWlmKChvPWVbZF0pfHwwPT09bylpZihcIm9iamVjdFwiPT09dyhvKSlTLm1lcmdlKHAsby5ub2RlVHlwZT9bb106byk7ZWxzZSBpZihtZS50ZXN0KG8pKXthPWF8fGYuYXBwZW5kQ2hpbGQodC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxzPShkZS5leGVjKG8pfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSx1PWdlW3NdfHxnZS5fZGVmYXVsdCxhLmlubmVySFRNTD11WzFdK1MuaHRtbFByZWZpbHRlcihvKSt1WzJdLGM9dVswXTt3aGlsZShjLS0pYT1hLmxhc3RDaGlsZDtTLm1lcmdlKHAsYS5jaGlsZE5vZGVzKSwoYT1mLmZpcnN0Q2hpbGQpLnRleHRDb250ZW50PVwiXCJ9ZWxzZSBwLnB1c2godC5jcmVhdGVUZXh0Tm9kZShvKSk7Zi50ZXh0Q29udGVudD1cIlwiLGQ9MDt3aGlsZShvPXBbZCsrXSlpZihyJiYtMTxTLmluQXJyYXkobyxyKSlpJiZpLnB1c2gobyk7ZWxzZSBpZihsPWllKG8pLGE9dmUoZi5hcHBlbmRDaGlsZChvKSxcInNjcmlwdFwiKSxsJiZ5ZShhKSxuKXtjPTA7d2hpbGUobz1hW2MrK10paGUudGVzdChvLnR5cGV8fFwiXCIpJiZuLnB1c2gobyl9cmV0dXJuIGZ9dmFyIGJlPS9ea2V5Lyx3ZT0vXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sVGU9L14oW14uXSopKD86XFwuKC4rKXwpLztmdW5jdGlvbiBDZSgpe3JldHVybiEwfWZ1bmN0aW9uIEVlKCl7cmV0dXJuITF9ZnVuY3Rpb24gU2UoZSx0KXtyZXR1cm4gZT09PWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBFLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goZSl7fX0oKT09KFwiZm9jdXNcIj09PXQpfWZ1bmN0aW9uIGtlKGUsdCxuLHIsaSxvKXt2YXIgYSxzO2lmKFwib2JqZWN0XCI9PXR5cGVvZiB0KXtmb3IocyBpblwic3RyaW5nXCIhPXR5cGVvZiBuJiYocj1yfHxuLG49dm9pZCAwKSx0KWtlKGUscyxuLHIsdFtzXSxvKTtyZXR1cm4gZX1pZihudWxsPT1yJiZudWxsPT1pPyhpPW4scj1uPXZvaWQgMCk6bnVsbD09aSYmKFwic3RyaW5nXCI9PXR5cGVvZiBuPyhpPXIscj12b2lkIDApOihpPXIscj1uLG49dm9pZCAwKSksITE9PT1pKWk9RWU7ZWxzZSBpZighaSlyZXR1cm4gZTtyZXR1cm4gMT09PW8mJihhPWksKGk9ZnVuY3Rpb24oZSl7cmV0dXJuIFMoKS5vZmYoZSksYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KS5ndWlkPWEuZ3VpZHx8KGEuZ3VpZD1TLmd1aWQrKykpLGUuZWFjaChmdW5jdGlvbigpe1MuZXZlbnQuYWRkKHRoaXMsdCxpLHIsbil9KX1mdW5jdGlvbiBBZShlLGksbyl7bz8oWS5zZXQoZSxpLCExKSxTLmV2ZW50LmFkZChlLGkse25hbWVzcGFjZTohMSxoYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj1ZLmdldCh0aGlzLGkpO2lmKDEmZS5pc1RyaWdnZXImJnRoaXNbaV0pe2lmKHIubGVuZ3RoKShTLmV2ZW50LnNwZWNpYWxbaV18fHt9KS5kZWxlZ2F0ZVR5cGUmJmUuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihyPXMuY2FsbChhcmd1bWVudHMpLFkuc2V0KHRoaXMsaSxyKSx0PW8odGhpcyxpKSx0aGlzW2ldKCksciE9PShuPVkuZ2V0KHRoaXMsaSkpfHx0P1kuc2V0KHRoaXMsaSwhMSk6bj17fSxyIT09bilyZXR1cm4gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCksbi52YWx1ZX1lbHNlIHIubGVuZ3RoJiYoWS5zZXQodGhpcyxpLHt2YWx1ZTpTLmV2ZW50LnRyaWdnZXIoUy5leHRlbmQoclswXSxTLkV2ZW50LnByb3RvdHlwZSksci5zbGljZSgxKSx0aGlzKX0pLGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpfX0pKTp2b2lkIDA9PT1ZLmdldChlLGkpJiZTLmV2ZW50LmFkZChlLGksQ2UpfVMuZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24odCxlLG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLHY9WS5nZXQodCk7aWYoVih0KSl7bi5oYW5kbGVyJiYobj0obz1uKS5oYW5kbGVyLGk9by5zZWxlY3RvciksaSYmUy5maW5kLm1hdGNoZXNTZWxlY3RvcihyZSxpKSxuLmd1aWR8fChuLmd1aWQ9Uy5ndWlkKyspLCh1PXYuZXZlbnRzKXx8KHU9di5ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSksKGE9di5oYW5kbGUpfHwoYT12LmhhbmRsZT1mdW5jdGlvbihlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUyYmUy5ldmVudC50cmlnZ2VyZWQhPT1lLnR5cGU/Uy5ldmVudC5kaXNwYXRjaC5hcHBseSh0LGFyZ3VtZW50cyk6dm9pZCAwfSksbD0oZT0oZXx8XCJcIikubWF0Y2goUCl8fFtcIlwiXSkubGVuZ3RoO3doaWxlKGwtLSlkPWc9KHM9VGUuZXhlYyhlW2xdKXx8W10pWzFdLGg9KHNbMl18fFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksZCYmKGY9Uy5ldmVudC5zcGVjaWFsW2RdfHx7fSxkPShpP2YuZGVsZWdhdGVUeXBlOmYuYmluZFR5cGUpfHxkLGY9Uy5ldmVudC5zcGVjaWFsW2RdfHx7fSxjPVMuZXh0ZW5kKHt0eXBlOmQsb3JpZ1R5cGU6ZyxkYXRhOnIsaGFuZGxlcjpuLGd1aWQ6bi5ndWlkLHNlbGVjdG9yOmksbmVlZHNDb250ZXh0OmkmJlMuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChpKSxuYW1lc3BhY2U6aC5qb2luKFwiLlwiKX0sbyksKHA9dVtkXSl8fCgocD11W2RdPVtdKS5kZWxlZ2F0ZUNvdW50PTAsZi5zZXR1cCYmITEhPT1mLnNldHVwLmNhbGwodCxyLGgsYSl8fHQuYWRkRXZlbnRMaXN0ZW5lciYmdC5hZGRFdmVudExpc3RlbmVyKGQsYSkpLGYuYWRkJiYoZi5hZGQuY2FsbCh0LGMpLGMuaGFuZGxlci5ndWlkfHwoYy5oYW5kbGVyLmd1aWQ9bi5ndWlkKSksaT9wLnNwbGljZShwLmRlbGVnYXRlQ291bnQrKywwLGMpOnAucHVzaChjKSxTLmV2ZW50Lmdsb2JhbFtkXT0hMCl9fSxyZW1vdmU6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLHY9WS5oYXNEYXRhKGUpJiZZLmdldChlKTtpZih2JiYodT12LmV2ZW50cykpe2w9KHQ9KHR8fFwiXCIpLm1hdGNoKFApfHxbXCJcIl0pLmxlbmd0aDt3aGlsZShsLS0paWYoZD1nPShzPVRlLmV4ZWModFtsXSl8fFtdKVsxXSxoPShzWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLGQpe2Y9Uy5ldmVudC5zcGVjaWFsW2RdfHx7fSxwPXVbZD0ocj9mLmRlbGVnYXRlVHlwZTpmLmJpbmRUeXBlKXx8ZF18fFtdLHM9c1syXSYmbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK2guam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpLGE9bz1wLmxlbmd0aDt3aGlsZShvLS0pYz1wW29dLCFpJiZnIT09Yy5vcmlnVHlwZXx8biYmbi5ndWlkIT09Yy5ndWlkfHxzJiYhcy50ZXN0KGMubmFtZXNwYWNlKXx8ciYmciE9PWMuc2VsZWN0b3ImJihcIioqXCIhPT1yfHwhYy5zZWxlY3Rvcil8fChwLnNwbGljZShvLDEpLGMuc2VsZWN0b3ImJnAuZGVsZWdhdGVDb3VudC0tLGYucmVtb3ZlJiZmLnJlbW92ZS5jYWxsKGUsYykpO2EmJiFwLmxlbmd0aCYmKGYudGVhcmRvd24mJiExIT09Zi50ZWFyZG93bi5jYWxsKGUsaCx2LmhhbmRsZSl8fFMucmVtb3ZlRXZlbnQoZSxkLHYuaGFuZGxlKSxkZWxldGUgdVtkXSl9ZWxzZSBmb3IoZCBpbiB1KVMuZXZlbnQucmVtb3ZlKGUsZCt0W2xdLG4sciwhMCk7Uy5pc0VtcHR5T2JqZWN0KHUpJiZZLnJlbW92ZShlLFwiaGFuZGxlIGV2ZW50c1wiKX19LGRpc3BhdGNoOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sYSxzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSx1PVMuZXZlbnQuZml4KGUpLGw9KFkuZ2V0KHRoaXMsXCJldmVudHNcIil8fE9iamVjdC5jcmVhdGUobnVsbCkpW3UudHlwZV18fFtdLGM9Uy5ldmVudC5zcGVjaWFsW3UudHlwZV18fHt9O2ZvcihzWzBdPXUsdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspc1t0XT1hcmd1bWVudHNbdF07aWYodS5kZWxlZ2F0ZVRhcmdldD10aGlzLCFjLnByZURpc3BhdGNofHwhMSE9PWMucHJlRGlzcGF0Y2guY2FsbCh0aGlzLHUpKXthPVMuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLHUsbCksdD0wO3doaWxlKChpPWFbdCsrXSkmJiF1LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe3UuY3VycmVudFRhcmdldD1pLmVsZW0sbj0wO3doaWxlKChvPWkuaGFuZGxlcnNbbisrXSkmJiF1LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpdS5ybmFtZXNwYWNlJiYhMSE9PW8ubmFtZXNwYWNlJiYhdS5ybmFtZXNwYWNlLnRlc3Qoby5uYW1lc3BhY2UpfHwodS5oYW5kbGVPYmo9byx1LmRhdGE9by5kYXRhLHZvaWQgMCE9PShyPSgoUy5ldmVudC5zcGVjaWFsW28ub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxvLmhhbmRsZXIpLmFwcGx5KGkuZWxlbSxzKSkmJiExPT09KHUucmVzdWx0PXIpJiYodS5wcmV2ZW50RGVmYXVsdCgpLHUuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gYy5wb3N0RGlzcGF0Y2gmJmMucG9zdERpc3BhdGNoLmNhbGwodGhpcyx1KSx1LnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzPVtdLHU9dC5kZWxlZ2F0ZUNvdW50LGw9ZS50YXJnZXQ7aWYodSYmbC5ub2RlVHlwZSYmIShcImNsaWNrXCI9PT1lLnR5cGUmJjE8PWUuYnV0dG9uKSlmb3IoO2whPT10aGlzO2w9bC5wYXJlbnROb2RlfHx0aGlzKWlmKDE9PT1sLm5vZGVUeXBlJiYoXCJjbGlja1wiIT09ZS50eXBlfHwhMCE9PWwuZGlzYWJsZWQpKXtmb3Iobz1bXSxhPXt9LG49MDtuPHU7bisrKXZvaWQgMD09PWFbaT0ocj10W25dKS5zZWxlY3RvcitcIiBcIl0mJihhW2ldPXIubmVlZHNDb250ZXh0Py0xPFMoaSx0aGlzKS5pbmRleChsKTpTLmZpbmQoaSx0aGlzLG51bGwsW2xdKS5sZW5ndGgpLGFbaV0mJm8ucHVzaChyKTtvLmxlbmd0aCYmcy5wdXNoKHtlbGVtOmwsaGFuZGxlcnM6b30pfXJldHVybiBsPXRoaXMsdTx0Lmxlbmd0aCYmcy5wdXNoKHtlbGVtOmwsaGFuZGxlcnM6dC5zbGljZSh1KX0pLHN9LGFkZFByb3A6ZnVuY3Rpb24odCxlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoUy5FdmVudC5wcm90b3R5cGUsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0Om0oZSk/ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIGUodGhpcy5vcmlnaW5hbEV2ZW50KX06ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFt0XX0sc2V0OmZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmV9KX19KX0sZml4OmZ1bmN0aW9uKGUpe3JldHVybiBlW1MuZXhwYW5kb10/ZTpuZXcgUy5FdmVudChlKX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGNsaWNrOntzZXR1cDpmdW5jdGlvbihlKXt2YXIgdD10aGlzfHxlO3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCxcImlucHV0XCIpJiZBZSh0LFwiY2xpY2tcIixDZSksITF9LHRyaWdnZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc3x8ZTtyZXR1cm4gcGUudGVzdCh0LnR5cGUpJiZ0LmNsaWNrJiZBKHQsXCJpbnB1dFwiKSYmQWUodCxcImNsaWNrXCIpLCEwfSxfZGVmYXVsdDpmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtyZXR1cm4gcGUudGVzdCh0LnR5cGUpJiZ0LmNsaWNrJiZBKHQsXCJpbnB1dFwiKSYmWS5nZXQodCxcImNsaWNrXCIpfHxBKHQsXCJhXCIpfX0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oZSl7dm9pZCAwIT09ZS5yZXN1bHQmJmUub3JpZ2luYWxFdmVudCYmKGUub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZT1lLnJlc3VsdCl9fX19LFMucmVtb3ZlRXZlbnQ9ZnVuY3Rpb24oZSx0LG4pe2UucmVtb3ZlRXZlbnRMaXN0ZW5lciYmZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsbil9LFMuRXZlbnQ9ZnVuY3Rpb24oZSx0KXtpZighKHRoaXMgaW5zdGFuY2VvZiBTLkV2ZW50KSlyZXR1cm4gbmV3IFMuRXZlbnQoZSx0KTtlJiZlLnR5cGU/KHRoaXMub3JpZ2luYWxFdmVudD1lLHRoaXMudHlwZT1lLnR5cGUsdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZS5kZWZhdWx0UHJldmVudGVkfHx2b2lkIDA9PT1lLmRlZmF1bHRQcmV2ZW50ZWQmJiExPT09ZS5yZXR1cm5WYWx1ZT9DZTpFZSx0aGlzLnRhcmdldD1lLnRhcmdldCYmMz09PWUudGFyZ2V0Lm5vZGVUeXBlP2UudGFyZ2V0LnBhcmVudE5vZGU6ZS50YXJnZXQsdGhpcy5jdXJyZW50VGFyZ2V0PWUuY3VycmVudFRhcmdldCx0aGlzLnJlbGF0ZWRUYXJnZXQ9ZS5yZWxhdGVkVGFyZ2V0KTp0aGlzLnR5cGU9ZSx0JiZTLmV4dGVuZCh0aGlzLHQpLHRoaXMudGltZVN0YW1wPWUmJmUudGltZVN0YW1wfHxEYXRlLm5vdygpLHRoaXNbUy5leHBhbmRvXT0hMH0sUy5FdmVudC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlMuRXZlbnQsaXNEZWZhdWx0UHJldmVudGVkOkVlLGlzUHJvcGFnYXRpb25TdG9wcGVkOkVlLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOkVlLGlzU2ltdWxhdGVkOiExLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPUNlLGUmJiF0aGlzLmlzU2ltdWxhdGVkJiZlLnByZXZlbnREZWZhdWx0KCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUNlLGUmJiF0aGlzLmlzU2ltdWxhdGVkJiZlLnN0b3BQcm9wYWdhdGlvbigpfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD1DZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSx0aGlzLnN0b3BQcm9wYWdhdGlvbigpfX0sUy5lYWNoKHthbHRLZXk6ITAsYnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGNoYW5nZWRUb3VjaGVzOiEwLGN0cmxLZXk6ITAsZGV0YWlsOiEwLGV2ZW50UGhhc2U6ITAsbWV0YUtleTohMCxwYWdlWDohMCxwYWdlWTohMCxzaGlmdEtleTohMCx2aWV3OiEwLFwiY2hhclwiOiEwLGNvZGU6ITAsY2hhckNvZGU6ITAsa2V5OiEwLGtleUNvZGU6ITAsYnV0dG9uOiEwLGJ1dHRvbnM6ITAsY2xpZW50WDohMCxjbGllbnRZOiEwLG9mZnNldFg6ITAsb2Zmc2V0WTohMCxwb2ludGVySWQ6ITAscG9pbnRlclR5cGU6ITAsc2NyZWVuWDohMCxzY3JlZW5ZOiEwLHRhcmdldFRvdWNoZXM6ITAsdG9FbGVtZW50OiEwLHRvdWNoZXM6ITAsd2hpY2g6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5idXR0b247cmV0dXJuIG51bGw9PWUud2hpY2gmJmJlLnRlc3QoZS50eXBlKT9udWxsIT1lLmNoYXJDb2RlP2UuY2hhckNvZGU6ZS5rZXlDb2RlOiFlLndoaWNoJiZ2b2lkIDAhPT10JiZ3ZS50ZXN0KGUudHlwZSk/MSZ0PzE6MiZ0PzM6NCZ0PzI6MDplLndoaWNofX0sUy5ldmVudC5hZGRQcm9wKSxTLmVhY2goe2ZvY3VzOlwiZm9jdXNpblwiLGJsdXI6XCJmb2N1c291dFwifSxmdW5jdGlvbihlLHQpe1MuZXZlbnQuc3BlY2lhbFtlXT17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gQWUodGhpcyxlLFNlKSwhMX0sdHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiBBZSh0aGlzLGUpLCEwfSxkZWxlZ2F0ZVR5cGU6dH19KSxTLmVhY2goe21vdXNlZW50ZXI6XCJtb3VzZW92ZXJcIixtb3VzZWxlYXZlOlwibW91c2VvdXRcIixwb2ludGVyZW50ZXI6XCJwb2ludGVyb3ZlclwiLHBvaW50ZXJsZWF2ZTpcInBvaW50ZXJvdXRcIn0sZnVuY3Rpb24oZSxpKXtTLmV2ZW50LnNwZWNpYWxbZV09e2RlbGVnYXRlVHlwZTppLGJpbmRUeXBlOmksaGFuZGxlOmZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5yZWxhdGVkVGFyZ2V0LHI9ZS5oYW5kbGVPYmo7cmV0dXJuIG4mJihuPT09dGhpc3x8Uy5jb250YWlucyh0aGlzLG4pKXx8KGUudHlwZT1yLm9yaWdUeXBlLHQ9ci5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxlLnR5cGU9aSksdH19fSksUy5mbi5leHRlbmQoe29uOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBrZSh0aGlzLGUsdCxuLHIpfSxvbmU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIGtlKHRoaXMsZSx0LG4sciwxKX0sb2ZmOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKGUmJmUucHJldmVudERlZmF1bHQmJmUuaGFuZGxlT2JqKXJldHVybiByPWUuaGFuZGxlT2JqLFMoZS5kZWxlZ2F0ZVRhcmdldCkub2ZmKHIubmFtZXNwYWNlP3Iub3JpZ1R5cGUrXCIuXCIrci5uYW1lc3BhY2U6ci5vcmlnVHlwZSxyLnNlbGVjdG9yLHIuaGFuZGxlciksdGhpcztpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7Zm9yKGkgaW4gZSl0aGlzLm9mZihpLHQsZVtpXSk7cmV0dXJuIHRoaXN9cmV0dXJuITEhPT10JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0fHwobj10LHQ9dm9pZCAwKSwhMT09PW4mJihuPUVlKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtTLmV2ZW50LnJlbW92ZSh0aGlzLGUsbix0KX0pfX0pO3ZhciBOZT0vPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxEZT0vY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLGplPS9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztmdW5jdGlvbiBxZShlLHQpe3JldHVybiBBKGUsXCJ0YWJsZVwiKSYmQSgxMSE9PXQubm9kZVR5cGU/dDp0LmZpcnN0Q2hpbGQsXCJ0clwiKSYmUyhlKS5jaGlsZHJlbihcInRib2R5XCIpWzBdfHxlfWZ1bmN0aW9uIExlKGUpe3JldHVybiBlLnR5cGU9KG51bGwhPT1lLmdldEF0dHJpYnV0ZShcInR5cGVcIikpK1wiL1wiK2UudHlwZSxlfWZ1bmN0aW9uIEhlKGUpe3JldHVyblwidHJ1ZS9cIj09PShlLnR5cGV8fFwiXCIpLnNsaWNlKDAsNSk/ZS50eXBlPWUudHlwZS5zbGljZSg1KTplLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIiksZX1mdW5jdGlvbiBPZShlLHQpe3ZhciBuLHIsaSxvLGEscztpZigxPT09dC5ub2RlVHlwZSl7aWYoWS5oYXNEYXRhKGUpJiYocz1ZLmdldChlKS5ldmVudHMpKWZvcihpIGluIFkucmVtb3ZlKHQsXCJoYW5kbGUgZXZlbnRzXCIpLHMpZm9yKG49MCxyPXNbaV0ubGVuZ3RoO248cjtuKyspUy5ldmVudC5hZGQodCxpLHNbaV1bbl0pO1EuaGFzRGF0YShlKSYmKG89US5hY2Nlc3MoZSksYT1TLmV4dGVuZCh7fSxvKSxRLnNldCh0LGEpKX19ZnVuY3Rpb24gUGUobixyLGksbyl7cj1nKHIpO3ZhciBlLHQsYSxzLHUsbCxjPTAsZj1uLmxlbmd0aCxwPWYtMSxkPXJbMF0saD1tKGQpO2lmKGh8fDE8ZiYmXCJzdHJpbmdcIj09dHlwZW9mIGQmJiF5LmNoZWNrQ2xvbmUmJkRlLnRlc3QoZCkpcmV0dXJuIG4uZWFjaChmdW5jdGlvbihlKXt2YXIgdD1uLmVxKGUpO2gmJihyWzBdPWQuY2FsbCh0aGlzLGUsdC5odG1sKCkpKSxQZSh0LHIsaSxvKX0pO2lmKGYmJih0PShlPXhlKHIsblswXS5vd25lckRvY3VtZW50LCExLG4sbykpLmZpcnN0Q2hpbGQsMT09PWUuY2hpbGROb2Rlcy5sZW5ndGgmJihlPXQpLHR8fG8pKXtmb3Iocz0oYT1TLm1hcCh2ZShlLFwic2NyaXB0XCIpLExlKSkubGVuZ3RoO2M8ZjtjKyspdT1lLGMhPT1wJiYodT1TLmNsb25lKHUsITAsITApLHMmJlMubWVyZ2UoYSx2ZSh1LFwic2NyaXB0XCIpKSksaS5jYWxsKG5bY10sdSxjKTtpZihzKWZvcihsPWFbYS5sZW5ndGgtMV0ub3duZXJEb2N1bWVudCxTLm1hcChhLEhlKSxjPTA7YzxzO2MrKyl1PWFbY10saGUudGVzdCh1LnR5cGV8fFwiXCIpJiYhWS5hY2Nlc3ModSxcImdsb2JhbEV2YWxcIikmJlMuY29udGFpbnMobCx1KSYmKHUuc3JjJiZcIm1vZHVsZVwiIT09KHUudHlwZXx8XCJcIikudG9Mb3dlckNhc2UoKT9TLl9ldmFsVXJsJiYhdS5ub01vZHVsZSYmUy5fZXZhbFVybCh1LnNyYyx7bm9uY2U6dS5ub25jZXx8dS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKX0sbCk6Yih1LnRleHRDb250ZW50LnJlcGxhY2UoamUsXCJcIiksdSxsKSl9cmV0dXJuIG59ZnVuY3Rpb24gUmUoZSx0LG4pe2Zvcih2YXIgcixpPXQ/Uy5maWx0ZXIodCxlKTplLG89MDtudWxsIT0ocj1pW29dKTtvKyspbnx8MSE9PXIubm9kZVR5cGV8fFMuY2xlYW5EYXRhKHZlKHIpKSxyLnBhcmVudE5vZGUmJihuJiZpZShyKSYmeWUodmUocixcInNjcmlwdFwiKSksci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpKTtyZXR1cm4gZX1TLmV4dGVuZCh7aHRtbFByZWZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sY2xvbmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGM9ZS5jbG9uZU5vZGUoITApLGY9aWUoZSk7aWYoISh5Lm5vQ2xvbmVDaGVja2VkfHwxIT09ZS5ub2RlVHlwZSYmMTEhPT1lLm5vZGVUeXBlfHxTLmlzWE1MRG9jKGUpKSlmb3IoYT12ZShjKSxyPTAsaT0obz12ZShlKSkubGVuZ3RoO3I8aTtyKyspcz1vW3JdLHU9YVtyXSx2b2lkIDAsXCJpbnB1dFwiPT09KGw9dS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSYmcGUudGVzdChzLnR5cGUpP3UuY2hlY2tlZD1zLmNoZWNrZWQ6XCJpbnB1dFwiIT09bCYmXCJ0ZXh0YXJlYVwiIT09bHx8KHUuZGVmYXVsdFZhbHVlPXMuZGVmYXVsdFZhbHVlKTtpZih0KWlmKG4pZm9yKG89b3x8dmUoZSksYT1hfHx2ZShjKSxyPTAsaT1vLmxlbmd0aDtyPGk7cisrKU9lKG9bcl0sYVtyXSk7ZWxzZSBPZShlLGMpO3JldHVybiAwPChhPXZlKGMsXCJzY3JpcHRcIikpLmxlbmd0aCYmeWUoYSwhZiYmdmUoZSxcInNjcmlwdFwiKSksY30sY2xlYW5EYXRhOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHIsaT1TLmV2ZW50LnNwZWNpYWwsbz0wO3ZvaWQgMCE9PShuPWVbb10pO28rKylpZihWKG4pKXtpZih0PW5bWS5leHBhbmRvXSl7aWYodC5ldmVudHMpZm9yKHIgaW4gdC5ldmVudHMpaVtyXT9TLmV2ZW50LnJlbW92ZShuLHIpOlMucmVtb3ZlRXZlbnQobixyLHQuaGFuZGxlKTtuW1kuZXhwYW5kb109dm9pZCAwfW5bUS5leHBhbmRvXSYmKG5bUS5leHBhbmRvXT12b2lkIDApfX19KSxTLmZuLmV4dGVuZCh7ZGV0YWNoOmZ1bmN0aW9uKGUpe3JldHVybiBSZSh0aGlzLGUsITApfSxyZW1vdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIFJlKHRoaXMsZSl9LHRleHQ6ZnVuY3Rpb24oZSl7cmV0dXJuICQodGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZT9TLnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8KHRoaXMudGV4dENvbnRlbnQ9ZSl9KX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSxhcHBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gUGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7MSE9PXRoaXMubm9kZVR5cGUmJjExIT09dGhpcy5ub2RlVHlwZSYmOSE9PXRoaXMubm9kZVR5cGV8fHFlKHRoaXMsZSkuYXBwZW5kQ2hpbGQoZSl9KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiBQZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIHQ9cWUodGhpcyxlKTt0Lmluc2VydEJlZm9yZShlLHQuZmlyc3RDaGlsZCl9fSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiBQZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiBQZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzLm5leHRTaWJsaW5nKX0pfSxlbXB0eTpmdW5jdGlvbigpe2Zvcih2YXIgZSx0PTA7bnVsbCE9KGU9dGhpc1t0XSk7dCsrKTE9PT1lLm5vZGVUeXBlJiYoUy5jbGVhbkRhdGEodmUoZSwhMSkpLGUudGV4dENvbnRlbnQ9XCJcIik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bnVsbCE9ZSYmZSx0PW51bGw9PXQ/ZTp0LHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIFMuY2xvbmUodGhpcyxlLHQpfSl9LGh0bWw6ZnVuY3Rpb24oZSl7cmV0dXJuICQodGhpcyxmdW5jdGlvbihlKXt2YXIgdD10aGlzWzBdfHx7fSxuPTAscj10aGlzLmxlbmd0aDtpZih2b2lkIDA9PT1lJiYxPT09dC5ub2RlVHlwZSlyZXR1cm4gdC5pbm5lckhUTUw7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiFOZS50ZXN0KGUpJiYhZ2VbKGRlLmV4ZWMoZSl8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXSl7ZT1TLmh0bWxQcmVmaWx0ZXIoZSk7dHJ5e2Zvcig7bjxyO24rKykxPT09KHQ9dGhpc1tuXXx8e30pLm5vZGVUeXBlJiYoUy5jbGVhbkRhdGEodmUodCwhMSkpLHQuaW5uZXJIVE1MPWUpO3Q9MH1jYXRjaChlKXt9fXQmJnRoaXMuZW1wdHkoKS5hcHBlbmQoZSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgbj1bXTtyZXR1cm4gUGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJlbnROb2RlO1MuaW5BcnJheSh0aGlzLG4pPDAmJihTLmNsZWFuRGF0YSh2ZSh0aGlzKSksdCYmdC5yZXBsYWNlQ2hpbGQoZSx0aGlzKSl9LG4pfX0pLFMuZWFjaCh7YXBwZW5kVG86XCJhcHBlbmRcIixwcmVwZW5kVG86XCJwcmVwZW5kXCIsaW5zZXJ0QmVmb3JlOlwiYmVmb3JlXCIsaW5zZXJ0QWZ0ZXI6XCJhZnRlclwiLHJlcGxhY2VBbGw6XCJyZXBsYWNlV2l0aFwifSxmdW5jdGlvbihlLGEpe1MuZm5bZV09ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49W10scj1TKGUpLGk9ci5sZW5ndGgtMSxvPTA7bzw9aTtvKyspdD1vPT09aT90aGlzOnRoaXMuY2xvbmUoITApLFMocltvXSlbYV0odCksdS5hcHBseShuLHQuZ2V0KCkpO3JldHVybiB0aGlzLnB1c2hTdGFjayhuKX19KTt2YXIgTWU9bmV3IFJlZ0V4cChcIl4oXCIrZWUrXCIpKD8hcHgpW2EteiVdKyRcIixcImlcIiksSWU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiB0JiZ0Lm9wZW5lcnx8KHQ9QyksdC5nZXRDb21wdXRlZFN0eWxlKGUpfSxXZT1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXt9O2ZvcihpIGluIHQpb1tpXT1lLnN0eWxlW2ldLGUuc3R5bGVbaV09dFtpXTtmb3IoaSBpbiByPW4uY2FsbChlKSx0KWUuc3R5bGVbaV09b1tpXTtyZXR1cm4gcn0sRmU9bmV3IFJlZ0V4cChuZS5qb2luKFwifFwiKSxcImlcIik7ZnVuY3Rpb24gQmUoZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5zdHlsZTtyZXR1cm4obj1ufHxJZShlKSkmJihcIlwiIT09KGE9bi5nZXRQcm9wZXJ0eVZhbHVlKHQpfHxuW3RdKXx8aWUoZSl8fChhPVMuc3R5bGUoZSx0KSksIXkucGl4ZWxCb3hTdHlsZXMoKSYmTWUudGVzdChhKSYmRmUudGVzdCh0KSYmKHI9cy53aWR0aCxpPXMubWluV2lkdGgsbz1zLm1heFdpZHRoLHMubWluV2lkdGg9cy5tYXhXaWR0aD1zLndpZHRoPWEsYT1uLndpZHRoLHMud2lkdGg9cixzLm1pbldpZHRoPWkscy5tYXhXaWR0aD1vKSksdm9pZCAwIT09YT9hK1wiXCI6YX1mdW5jdGlvbiAkZShlLHQpe3JldHVybntnZXQ6ZnVuY3Rpb24oKXtpZighZSgpKXJldHVybih0aGlzLmdldD10KS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7ZGVsZXRlIHRoaXMuZ2V0fX19IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe2lmKGwpe3Uuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDttYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIixsLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7bWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo2MCU7dG9wOjElXCIscmUuYXBwZW5kQ2hpbGQodSkuYXBwZW5kQ2hpbGQobCk7dmFyIGU9Qy5nZXRDb21wdXRlZFN0eWxlKGwpO249XCIxJVwiIT09ZS50b3Ascz0xMj09PXQoZS5tYXJnaW5MZWZ0KSxsLnN0eWxlLnJpZ2h0PVwiNjAlXCIsbz0zNj09PXQoZS5yaWdodCkscj0zNj09PXQoZS53aWR0aCksbC5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIsaT0xMj09PXQobC5vZmZzZXRXaWR0aC8zKSxyZS5yZW1vdmVDaGlsZCh1KSxsPW51bGx9fWZ1bmN0aW9uIHQoZSl7cmV0dXJuIE1hdGgucm91bmQocGFyc2VGbG9hdChlKSl9dmFyIG4scixpLG8sYSxzLHU9RS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGw9RS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2wuc3R5bGUmJihsLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiY29udGVudC1ib3hcIixsLmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJcIix5LmNsZWFyQ2xvbmVTdHlsZT1cImNvbnRlbnQtYm94XCI9PT1sLnN0eWxlLmJhY2tncm91bmRDbGlwLFMuZXh0ZW5kKHkse2JveFNpemluZ1JlbGlhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxyfSxwaXhlbEJveFN0eWxlczpmdW5jdGlvbigpe3JldHVybiBlKCksb30scGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBlKCksbn0scmVsaWFibGVNYXJnaW5MZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxzfSxzY3JvbGxib3hTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxpfSxyZWxpYWJsZVRyRGltZW5zaW9uczpmdW5jdGlvbigpe3ZhciBlLHQsbixyO3JldHVybiBudWxsPT1hJiYoZT1FLmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKSx0PUUuY3JlYXRlRWxlbWVudChcInRyXCIpLG49RS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHhcIix0LnN0eWxlLmhlaWdodD1cIjFweFwiLG4uc3R5bGUuaGVpZ2h0PVwiOXB4XCIscmUuYXBwZW5kQ2hpbGQoZSkuYXBwZW5kQ2hpbGQodCkuYXBwZW5kQ2hpbGQobikscj1DLmdldENvbXB1dGVkU3R5bGUodCksYT0zPHBhcnNlSW50KHIuaGVpZ2h0KSxyZS5yZW1vdmVDaGlsZChlKSksYX19KSl9KCk7dmFyIF9lPVtcIldlYmtpdFwiLFwiTW96XCIsXCJtc1wiXSx6ZT1FLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsVWU9e307ZnVuY3Rpb24gWGUoZSl7dmFyIHQ9Uy5jc3NQcm9wc1tlXXx8VWVbZV07cmV0dXJuIHR8fChlIGluIHplP2U6VWVbZV09ZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSksbj1fZS5sZW5ndGg7d2hpbGUobi0tKWlmKChlPV9lW25dK3QpaW4gemUpcmV0dXJuIGV9KGUpfHxlKX12YXIgVmU9L14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLEdlPS9eLS0vLFllPXtwb3NpdGlvbjpcImFic29sdXRlXCIsdmlzaWJpbGl0eTpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wifSxRZT17bGV0dGVyU3BhY2luZzpcIjBcIixmb250V2VpZ2h0OlwiNDAwXCJ9O2Z1bmN0aW9uIEplKGUsdCxuKXt2YXIgcj10ZS5leGVjKHQpO3JldHVybiByP01hdGgubWF4KDAsclsyXS0obnx8MCkpKyhyWzNdfHxcInB4XCIpOnR9ZnVuY3Rpb24gS2UoZSx0LG4scixpLG8pe3ZhciBhPVwid2lkdGhcIj09PXQ/MTowLHM9MCx1PTA7aWYobj09PShyP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpKXJldHVybiAwO2Zvcig7YTw0O2ErPTIpXCJtYXJnaW5cIj09PW4mJih1Kz1TLmNzcyhlLG4rbmVbYV0sITAsaSkpLHI/KFwiY29udGVudFwiPT09biYmKHUtPVMuY3NzKGUsXCJwYWRkaW5nXCIrbmVbYV0sITAsaSkpLFwibWFyZ2luXCIhPT1uJiYodS09Uy5jc3MoZSxcImJvcmRlclwiK25lW2FdK1wiV2lkdGhcIiwhMCxpKSkpOih1Kz1TLmNzcyhlLFwicGFkZGluZ1wiK25lW2FdLCEwLGkpLFwicGFkZGluZ1wiIT09bj91Kz1TLmNzcyhlLFwiYm9yZGVyXCIrbmVbYV0rXCJXaWR0aFwiLCEwLGkpOnMrPVMuY3NzKGUsXCJib3JkZXJcIituZVthXStcIldpZHRoXCIsITAsaSkpO3JldHVybiFyJiYwPD1vJiYodSs9TWF0aC5tYXgoMCxNYXRoLmNlaWwoZVtcIm9mZnNldFwiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpXS1vLXUtcy0uNSkpfHwwKSx1fWZ1bmN0aW9uIFplKGUsdCxuKXt2YXIgcj1JZShlKSxpPSgheS5ib3hTaXppbmdSZWxpYWJsZSgpfHxuKSYmXCJib3JkZXItYm94XCI9PT1TLmNzcyhlLFwiYm94U2l6aW5nXCIsITEsciksbz1pLGE9QmUoZSx0LHIpLHM9XCJvZmZzZXRcIit0WzBdLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKTtpZihNZS50ZXN0KGEpKXtpZighbilyZXR1cm4gYTthPVwiYXV0b1wifXJldHVybigheS5ib3hTaXppbmdSZWxpYWJsZSgpJiZpfHwheS5yZWxpYWJsZVRyRGltZW5zaW9ucygpJiZBKGUsXCJ0clwiKXx8XCJhdXRvXCI9PT1hfHwhcGFyc2VGbG9hdChhKSYmXCJpbmxpbmVcIj09PVMuY3NzKGUsXCJkaXNwbGF5XCIsITEscikpJiZlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiYoaT1cImJvcmRlci1ib3hcIj09PVMuY3NzKGUsXCJib3hTaXppbmdcIiwhMSxyKSwobz1zIGluIGUpJiYoYT1lW3NdKSksKGE9cGFyc2VGbG9hdChhKXx8MCkrS2UoZSx0LG58fChpP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLG8scixhKStcInB4XCJ9ZnVuY3Rpb24gZXQoZSx0LG4scixpKXtyZXR1cm4gbmV3IGV0LnByb3RvdHlwZS5pbml0KGUsdCxuLHIsaSl9Uy5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oZSx0KXtpZih0KXt2YXIgbj1CZShlLFwib3BhY2l0eVwiKTtyZXR1cm5cIlwiPT09bj9cIjFcIjpufX19fSxjc3NOdW1iZXI6e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGNvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxncmlkQXJlYTohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3RhcnQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7fSxzdHlsZTpmdW5jdGlvbihlLHQsbixyKXtpZihlJiYzIT09ZS5ub2RlVHlwZSYmOCE9PWUubm9kZVR5cGUmJmUuc3R5bGUpe3ZhciBpLG8sYSxzPVgodCksdT1HZS50ZXN0KHQpLGw9ZS5zdHlsZTtpZih1fHwodD1YZShzKSksYT1TLmNzc0hvb2tzW3RdfHxTLmNzc0hvb2tzW3NdLHZvaWQgMD09PW4pcmV0dXJuIGEmJlwiZ2V0XCJpbiBhJiZ2b2lkIDAhPT0oaT1hLmdldChlLCExLHIpKT9pOmxbdF07XCJzdHJpbmdcIj09PShvPXR5cGVvZiBuKSYmKGk9dGUuZXhlYyhuKSkmJmlbMV0mJihuPXNlKGUsdCxpKSxvPVwibnVtYmVyXCIpLG51bGwhPW4mJm49PW4mJihcIm51bWJlclwiIT09b3x8dXx8KG4rPWkmJmlbM118fChTLmNzc051bWJlcltzXT9cIlwiOlwicHhcIikpLHkuY2xlYXJDbG9uZVN0eWxlfHxcIlwiIT09bnx8MCE9PXQuaW5kZXhPZihcImJhY2tncm91bmRcIil8fChsW3RdPVwiaW5oZXJpdFwiKSxhJiZcInNldFwiaW4gYSYmdm9pZCAwPT09KG49YS5zZXQoZSxuLHIpKXx8KHU/bC5zZXRQcm9wZXJ0eSh0LG4pOmxbdF09bikpfX0sY3NzOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzPVgodCk7cmV0dXJuIEdlLnRlc3QodCl8fCh0PVhlKHMpKSwoYT1TLmNzc0hvb2tzW3RdfHxTLmNzc0hvb2tzW3NdKSYmXCJnZXRcImluIGEmJihpPWEuZ2V0KGUsITAsbikpLHZvaWQgMD09PWkmJihpPUJlKGUsdCxyKSksXCJub3JtYWxcIj09PWkmJnQgaW4gUWUmJihpPVFlW3RdKSxcIlwiPT09bnx8bj8obz1wYXJzZUZsb2F0KGkpLCEwPT09bnx8aXNGaW5pdGUobyk/b3x8MDppKTppfX0pLFMuZWFjaChbXCJoZWlnaHRcIixcIndpZHRoXCJdLGZ1bmN0aW9uKGUsdSl7Uy5jc3NIb29rc1t1XT17Z2V0OmZ1bmN0aW9uKGUsdCxuKXtpZih0KXJldHVybiFWZS50ZXN0KFMuY3NzKGUsXCJkaXNwbGF5XCIpKXx8ZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCYmZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aD9aZShlLHUsbik6V2UoZSxZZSxmdW5jdGlvbigpe3JldHVybiBaZShlLHUsbil9KX0sc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPUllKGUpLG89IXkuc2Nyb2xsYm94U2l6ZSgpJiZcImFic29sdXRlXCI9PT1pLnBvc2l0aW9uLGE9KG98fG4pJiZcImJvcmRlci1ib3hcIj09PVMuY3NzKGUsXCJib3hTaXppbmdcIiwhMSxpKSxzPW4/S2UoZSx1LG4sYSxpKTowO3JldHVybiBhJiZvJiYocy09TWF0aC5jZWlsKGVbXCJvZmZzZXRcIit1WzBdLnRvVXBwZXJDYXNlKCkrdS5zbGljZSgxKV0tcGFyc2VGbG9hdChpW3VdKS1LZShlLHUsXCJib3JkZXJcIiwhMSxpKS0uNSkpLHMmJihyPXRlLmV4ZWModCkpJiZcInB4XCIhPT0oclszXXx8XCJweFwiKSYmKGUuc3R5bGVbdV09dCx0PVMuY3NzKGUsdSkpLEplKDAsdCxzKX19fSksUy5jc3NIb29rcy5tYXJnaW5MZWZ0PSRlKHkucmVsaWFibGVNYXJnaW5MZWZ0LGZ1bmN0aW9uKGUsdCl7aWYodClyZXR1cm4ocGFyc2VGbG9hdChCZShlLFwibWFyZ2luTGVmdFwiKSl8fGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1XZShlLHttYXJnaW5MZWZ0OjB9LGZ1bmN0aW9uKCl7cmV0dXJuIGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdH0pKStcInB4XCJ9KSxTLmVhY2goe21hcmdpbjpcIlwiLHBhZGRpbmc6XCJcIixib3JkZXI6XCJXaWR0aFwifSxmdW5jdGlvbihpLG8pe1MuY3NzSG9va3NbaStvXT17ZXhwYW5kOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49e30scj1cInN0cmluZ1wiPT10eXBlb2YgZT9lLnNwbGl0KFwiIFwiKTpbZV07dDw0O3QrKyluW2krbmVbdF0rb109clt0XXx8clt0LTJdfHxyWzBdO3JldHVybiBufX0sXCJtYXJnaW5cIiE9PWkmJihTLmNzc0hvb2tzW2krb10uc2V0PUplKX0pLFMuZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gJCh0aGlzLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89e30sYT0wO2lmKEFycmF5LmlzQXJyYXkodCkpe2ZvcihyPUllKGUpLGk9dC5sZW5ndGg7YTxpO2ErKylvW3RbYV1dPVMuY3NzKGUsdFthXSwhMSxyKTtyZXR1cm4gb31yZXR1cm4gdm9pZCAwIT09bj9TLnN0eWxlKGUsdCxuKTpTLmNzcyhlLHQpfSxlLHQsMTxhcmd1bWVudHMubGVuZ3RoKX19KSwoKFMuVHdlZW49ZXQpLnByb3RvdHlwZT17Y29uc3RydWN0b3I6ZXQsaW5pdDpmdW5jdGlvbihlLHQsbixyLGksbyl7dGhpcy5lbGVtPWUsdGhpcy5wcm9wPW4sdGhpcy5lYXNpbmc9aXx8Uy5lYXNpbmcuX2RlZmF1bHQsdGhpcy5vcHRpb25zPXQsdGhpcy5zdGFydD10aGlzLm5vdz10aGlzLmN1cigpLHRoaXMuZW5kPXIsdGhpcy51bml0PW98fChTLmNzc051bWJlcltuXT9cIlwiOlwicHhcIil9LGN1cjpmdW5jdGlvbigpe3ZhciBlPWV0LnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBlJiZlLmdldD9lLmdldCh0aGlzKTpldC5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpfSxydW46ZnVuY3Rpb24oZSl7dmFyIHQsbj1ldC5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdGhpcy5vcHRpb25zLmR1cmF0aW9uP3RoaXMucG9zPXQ9Uy5lYXNpbmdbdGhpcy5lYXNpbmddKGUsdGhpcy5vcHRpb25zLmR1cmF0aW9uKmUsMCwxLHRoaXMub3B0aW9ucy5kdXJhdGlvbik6dGhpcy5wb3M9dD1lLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSp0K3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLG4mJm4uc2V0P24uc2V0KHRoaXMpOmV0LnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksdGhpc319KS5pbml0LnByb3RvdHlwZT1ldC5wcm90b3R5cGUsKGV0LnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gMSE9PWUuZWxlbS5ub2RlVHlwZXx8bnVsbCE9ZS5lbGVtW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtlLnByb3BdP2UuZWxlbVtlLnByb3BdOih0PVMuY3NzKGUuZWxlbSxlLnByb3AsXCJcIikpJiZcImF1dG9cIiE9PXQ/dDowfSxzZXQ6ZnVuY3Rpb24oZSl7Uy5meC5zdGVwW2UucHJvcF0/Uy5meC5zdGVwW2UucHJvcF0oZSk6MSE9PWUuZWxlbS5ub2RlVHlwZXx8IVMuY3NzSG9va3NbZS5wcm9wXSYmbnVsbD09ZS5lbGVtLnN0eWxlW1hlKGUucHJvcCldP2UuZWxlbVtlLnByb3BdPWUubm93OlMuc3R5bGUoZS5lbGVtLGUucHJvcCxlLm5vdytlLnVuaXQpfX19KS5zY3JvbGxUb3A9ZXQucHJvcEhvb2tzLnNjcm9sbExlZnQ9e3NldDpmdW5jdGlvbihlKXtlLmVsZW0ubm9kZVR5cGUmJmUuZWxlbS5wYXJlbnROb2RlJiYoZS5lbGVtW2UucHJvcF09ZS5ub3cpfX0sUy5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sc3dpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuLjUtTWF0aC5jb3MoZSpNYXRoLlBJKS8yfSxfZGVmYXVsdDpcInN3aW5nXCJ9LFMuZng9ZXQucHJvdG90eXBlLmluaXQsUy5meC5zdGVwPXt9O3ZhciB0dCxudCxydCxpdCxvdD0vXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sYXQ9L3F1ZXVlSG9va3MkLztmdW5jdGlvbiBzdCgpe250JiYoITE9PT1FLmhpZGRlbiYmQy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/Qy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3QpOkMuc2V0VGltZW91dChzdCxTLmZ4LmludGVydmFsKSxTLmZ4LnRpY2soKSl9ZnVuY3Rpb24gdXQoKXtyZXR1cm4gQy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dHQ9dm9pZCAwfSksdHQ9RGF0ZS5ub3coKX1mdW5jdGlvbiBsdChlLHQpe3ZhciBuLHI9MCxpPXtoZWlnaHQ6ZX07Zm9yKHQ9dD8xOjA7cjw0O3IrPTItdClpW1wibWFyZ2luXCIrKG49bmVbcl0pXT1pW1wicGFkZGluZ1wiK25dPWU7cmV0dXJuIHQmJihpLm9wYWNpdHk9aS53aWR0aD1lKSxpfWZ1bmN0aW9uIGN0KGUsdCxuKXtmb3IodmFyIHIsaT0oZnQudHdlZW5lcnNbdF18fFtdKS5jb25jYXQoZnQudHdlZW5lcnNbXCIqXCJdKSxvPTAsYT1pLmxlbmd0aDtvPGE7bysrKWlmKHI9aVtvXS5jYWxsKG4sdCxlKSlyZXR1cm4gcn1mdW5jdGlvbiBmdChvLGUsdCl7dmFyIG4sYSxyPTAsaT1mdC5wcmVmaWx0ZXJzLmxlbmd0aCxzPVMuRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgdS5lbGVtfSksdT1mdW5jdGlvbigpe2lmKGEpcmV0dXJuITE7Zm9yKHZhciBlPXR0fHx1dCgpLHQ9TWF0aC5tYXgoMCxsLnN0YXJ0VGltZStsLmR1cmF0aW9uLWUpLG49MS0odC9sLmR1cmF0aW9ufHwwKSxyPTAsaT1sLnR3ZWVucy5sZW5ndGg7cjxpO3IrKylsLnR3ZWVuc1tyXS5ydW4obik7cmV0dXJuIHMubm90aWZ5V2l0aChvLFtsLG4sdF0pLG48MSYmaT90OihpfHxzLm5vdGlmeVdpdGgobyxbbCwxLDBdKSxzLnJlc29sdmVXaXRoKG8sW2xdKSwhMSl9LGw9cy5wcm9taXNlKHtlbGVtOm8scHJvcHM6Uy5leHRlbmQoe30sZSksb3B0czpTLmV4dGVuZCghMCx7c3BlY2lhbEVhc2luZzp7fSxlYXNpbmc6Uy5lYXNpbmcuX2RlZmF1bHR9LHQpLG9yaWdpbmFsUHJvcGVydGllczplLG9yaWdpbmFsT3B0aW9uczp0LHN0YXJ0VGltZTp0dHx8dXQoKSxkdXJhdGlvbjp0LmR1cmF0aW9uLHR3ZWVuczpbXSxjcmVhdGVUd2VlbjpmdW5jdGlvbihlLHQpe3ZhciBuPVMuVHdlZW4obyxsLm9wdHMsZSx0LGwub3B0cy5zcGVjaWFsRWFzaW5nW2VdfHxsLm9wdHMuZWFzaW5nKTtyZXR1cm4gbC50d2VlbnMucHVzaChuKSxufSxzdG9wOmZ1bmN0aW9uKGUpe3ZhciB0PTAsbj1lP2wudHdlZW5zLmxlbmd0aDowO2lmKGEpcmV0dXJuIHRoaXM7Zm9yKGE9ITA7dDxuO3QrKylsLnR3ZWVuc1t0XS5ydW4oMSk7cmV0dXJuIGU/KHMubm90aWZ5V2l0aChvLFtsLDEsMF0pLHMucmVzb2x2ZVdpdGgobyxbbCxlXSkpOnMucmVqZWN0V2l0aChvLFtsLGVdKSx0aGlzfX0pLGM9bC5wcm9wcztmb3IoIWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYTtmb3IobiBpbiBlKWlmKGk9dFtyPVgobildLG89ZVtuXSxBcnJheS5pc0FycmF5KG8pJiYoaT1vWzFdLG89ZVtuXT1vWzBdKSxuIT09ciYmKGVbcl09byxkZWxldGUgZVtuXSksKGE9Uy5jc3NIb29rc1tyXSkmJlwiZXhwYW5kXCJpbiBhKWZvcihuIGluIG89YS5leHBhbmQobyksZGVsZXRlIGVbcl0sbyluIGluIGV8fChlW25dPW9bbl0sdFtuXT1pKTtlbHNlIHRbcl09aX0oYyxsLm9wdHMuc3BlY2lhbEVhc2luZyk7cjxpO3IrKylpZihuPWZ0LnByZWZpbHRlcnNbcl0uY2FsbChsLG8sYyxsLm9wdHMpKXJldHVybiBtKG4uc3RvcCkmJihTLl9xdWV1ZUhvb2tzKGwuZWxlbSxsLm9wdHMucXVldWUpLnN0b3A9bi5zdG9wLmJpbmQobikpLG47cmV0dXJuIFMubWFwKGMsY3QsbCksbShsLm9wdHMuc3RhcnQpJiZsLm9wdHMuc3RhcnQuY2FsbChvLGwpLGwucHJvZ3Jlc3MobC5vcHRzLnByb2dyZXNzKS5kb25lKGwub3B0cy5kb25lLGwub3B0cy5jb21wbGV0ZSkuZmFpbChsLm9wdHMuZmFpbCkuYWx3YXlzKGwub3B0cy5hbHdheXMpLFMuZngudGltZXIoUy5leHRlbmQodSx7ZWxlbTpvLGFuaW06bCxxdWV1ZTpsLm9wdHMucXVldWV9KSksbH1TLkFuaW1hdGlvbj1TLmV4dGVuZChmdCx7dHdlZW5lcnM6e1wiKlwiOltmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuY3JlYXRlVHdlZW4oZSx0KTtyZXR1cm4gc2Uobi5lbGVtLGUsdGUuZXhlYyh0KSxuKSxufV19LHR3ZWVuZXI6ZnVuY3Rpb24oZSx0KXttKGUpPyh0PWUsZT1bXCIqXCJdKTplPWUubWF0Y2goUCk7Zm9yKHZhciBuLHI9MCxpPWUubGVuZ3RoO3I8aTtyKyspbj1lW3JdLGZ0LnR3ZWVuZXJzW25dPWZ0LnR3ZWVuZXJzW25dfHxbXSxmdC50d2VlbmVyc1tuXS51bnNoaWZ0KHQpfSxwcmVmaWx0ZXJzOltmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGwsYyxmPVwid2lkdGhcImluIHR8fFwiaGVpZ2h0XCJpbiB0LHA9dGhpcyxkPXt9LGg9ZS5zdHlsZSxnPWUubm9kZVR5cGUmJmFlKGUpLHY9WS5nZXQoZSxcImZ4c2hvd1wiKTtmb3IociBpbiBuLnF1ZXVlfHwobnVsbD09KGE9Uy5fcXVldWVIb29rcyhlLFwiZnhcIikpLnVucXVldWVkJiYoYS51bnF1ZXVlZD0wLHM9YS5lbXB0eS5maXJlLGEuZW1wdHkuZmlyZT1mdW5jdGlvbigpe2EudW5xdWV1ZWR8fHMoKX0pLGEudW5xdWV1ZWQrKyxwLmFsd2F5cyhmdW5jdGlvbigpe3AuYWx3YXlzKGZ1bmN0aW9uKCl7YS51bnF1ZXVlZC0tLFMucXVldWUoZSxcImZ4XCIpLmxlbmd0aHx8YS5lbXB0eS5maXJlKCl9KX0pKSx0KWlmKGk9dFtyXSxvdC50ZXN0KGkpKXtpZihkZWxldGUgdFtyXSxvPW98fFwidG9nZ2xlXCI9PT1pLGk9PT0oZz9cImhpZGVcIjpcInNob3dcIikpe2lmKFwic2hvd1wiIT09aXx8IXZ8fHZvaWQgMD09PXZbcl0pY29udGludWU7Zz0hMH1kW3JdPXYmJnZbcl18fFMuc3R5bGUoZSxyKX1pZigodT0hUy5pc0VtcHR5T2JqZWN0KHQpKXx8IVMuaXNFbXB0eU9iamVjdChkKSlmb3IociBpbiBmJiYxPT09ZS5ub2RlVHlwZSYmKG4ub3ZlcmZsb3c9W2gub3ZlcmZsb3csaC5vdmVyZmxvd1gsaC5vdmVyZmxvd1ldLG51bGw9PShsPXYmJnYuZGlzcGxheSkmJihsPVkuZ2V0KGUsXCJkaXNwbGF5XCIpKSxcIm5vbmVcIj09PShjPVMuY3NzKGUsXCJkaXNwbGF5XCIpKSYmKGw/Yz1sOihsZShbZV0sITApLGw9ZS5zdHlsZS5kaXNwbGF5fHxsLGM9Uy5jc3MoZSxcImRpc3BsYXlcIiksbGUoW2VdKSkpLChcImlubGluZVwiPT09Y3x8XCJpbmxpbmUtYmxvY2tcIj09PWMmJm51bGwhPWwpJiZcIm5vbmVcIj09PVMuY3NzKGUsXCJmbG9hdFwiKSYmKHV8fChwLmRvbmUoZnVuY3Rpb24oKXtoLmRpc3BsYXk9bH0pLG51bGw9PWwmJihjPWguZGlzcGxheSxsPVwibm9uZVwiPT09Yz9cIlwiOmMpKSxoLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIikpLG4ub3ZlcmZsb3cmJihoLm92ZXJmbG93PVwiaGlkZGVuXCIscC5hbHdheXMoZnVuY3Rpb24oKXtoLm92ZXJmbG93PW4ub3ZlcmZsb3dbMF0saC5vdmVyZmxvd1g9bi5vdmVyZmxvd1sxXSxoLm92ZXJmbG93WT1uLm92ZXJmbG93WzJdfSkpLHU9ITEsZCl1fHwodj9cImhpZGRlblwiaW4gdiYmKGc9di5oaWRkZW4pOnY9WS5hY2Nlc3MoZSxcImZ4c2hvd1wiLHtkaXNwbGF5Omx9KSxvJiYodi5oaWRkZW49IWcpLGcmJmxlKFtlXSwhMCkscC5kb25lKGZ1bmN0aW9uKCl7Zm9yKHIgaW4gZ3x8bGUoW2VdKSxZLnJlbW92ZShlLFwiZnhzaG93XCIpLGQpUy5zdHlsZShlLHIsZFtyXSl9KSksdT1jdChnP3Zbcl06MCxyLHApLHIgaW4gdnx8KHZbcl09dS5zdGFydCxnJiYodS5lbmQ9dS5zdGFydCx1LnN0YXJ0PTApKX1dLHByZWZpbHRlcjpmdW5jdGlvbihlLHQpe3Q/ZnQucHJlZmlsdGVycy51bnNoaWZ0KGUpOmZ0LnByZWZpbHRlcnMucHVzaChlKX19KSxTLnNwZWVkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lJiZcIm9iamVjdFwiPT10eXBlb2YgZT9TLmV4dGVuZCh7fSxlKTp7Y29tcGxldGU6bnx8IW4mJnR8fG0oZSkmJmUsZHVyYXRpb246ZSxlYXNpbmc6biYmdHx8dCYmIW0odCkmJnR9O3JldHVybiBTLmZ4Lm9mZj9yLmR1cmF0aW9uPTA6XCJudW1iZXJcIiE9dHlwZW9mIHIuZHVyYXRpb24mJihyLmR1cmF0aW9uIGluIFMuZnguc3BlZWRzP3IuZHVyYXRpb249Uy5meC5zcGVlZHNbci5kdXJhdGlvbl06ci5kdXJhdGlvbj1TLmZ4LnNwZWVkcy5fZGVmYXVsdCksbnVsbCE9ci5xdWV1ZSYmITAhPT1yLnF1ZXVlfHwoci5xdWV1ZT1cImZ4XCIpLHIub2xkPXIuY29tcGxldGUsci5jb21wbGV0ZT1mdW5jdGlvbigpe20oci5vbGQpJiZyLm9sZC5jYWxsKHRoaXMpLHIucXVldWUmJlMuZGVxdWV1ZSh0aGlzLHIucXVldWUpfSxyfSxTLmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLmZpbHRlcihhZSkuY3NzKFwib3BhY2l0eVwiLDApLnNob3coKS5lbmQoKS5hbmltYXRlKHtvcGFjaXR5OnR9LGUsbixyKX0sYW5pbWF0ZTpmdW5jdGlvbih0LGUsbixyKXt2YXIgaT1TLmlzRW1wdHlPYmplY3QodCksbz1TLnNwZWVkKGUsbixyKSxhPWZ1bmN0aW9uKCl7dmFyIGU9ZnQodGhpcyxTLmV4dGVuZCh7fSx0KSxvKTsoaXx8WS5nZXQodGhpcyxcImZpbmlzaFwiKSkmJmUuc3RvcCghMCl9O3JldHVybiBhLmZpbmlzaD1hLGl8fCExPT09by5xdWV1ZT90aGlzLmVhY2goYSk6dGhpcy5xdWV1ZShvLnF1ZXVlLGEpfSxzdG9wOmZ1bmN0aW9uKGksZSxvKXt2YXIgYT1mdW5jdGlvbihlKXt2YXIgdD1lLnN0b3A7ZGVsZXRlIGUuc3RvcCx0KG8pfTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgaSYmKG89ZSxlPWksaT12b2lkIDApLGUmJnRoaXMucXVldWUoaXx8XCJmeFwiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT0hMCx0PW51bGwhPWkmJmkrXCJxdWV1ZUhvb2tzXCIsbj1TLnRpbWVycyxyPVkuZ2V0KHRoaXMpO2lmKHQpclt0XSYmclt0XS5zdG9wJiZhKHJbdF0pO2Vsc2UgZm9yKHQgaW4gcilyW3RdJiZyW3RdLnN0b3AmJmF0LnRlc3QodCkmJmEoclt0XSk7Zm9yKHQ9bi5sZW5ndGg7dC0tOyluW3RdLmVsZW0hPT10aGlzfHxudWxsIT1pJiZuW3RdLnF1ZXVlIT09aXx8KG5bdF0uYW5pbS5zdG9wKG8pLGU9ITEsbi5zcGxpY2UodCwxKSk7IWUmJm98fFMuZGVxdWV1ZSh0aGlzLGkpfSl9LGZpbmlzaDpmdW5jdGlvbihhKXtyZXR1cm4hMSE9PWEmJihhPWF8fFwiZnhcIiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdD1ZLmdldCh0aGlzKSxuPXRbYStcInF1ZXVlXCJdLHI9dFthK1wicXVldWVIb29rc1wiXSxpPVMudGltZXJzLG89bj9uLmxlbmd0aDowO2Zvcih0LmZpbmlzaD0hMCxTLnF1ZXVlKHRoaXMsYSxbXSksciYmci5zdG9wJiZyLnN0b3AuY2FsbCh0aGlzLCEwKSxlPWkubGVuZ3RoO2UtLTspaVtlXS5lbGVtPT09dGhpcyYmaVtlXS5xdWV1ZT09PWEmJihpW2VdLmFuaW0uc3RvcCghMCksaS5zcGxpY2UoZSwxKSk7Zm9yKGU9MDtlPG87ZSsrKW5bZV0mJm5bZV0uZmluaXNoJiZuW2VdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSB0LmZpbmlzaH0pfX0pLFMuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oZSxyKXt2YXIgaT1TLmZuW3JdO1MuZm5bcl09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGU/aS5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGx0KHIsITApLGUsdCxuKX19KSxTLmVhY2goe3NsaWRlRG93bjpsdChcInNob3dcIiksc2xpZGVVcDpsdChcImhpZGVcIiksc2xpZGVUb2dnbGU6bHQoXCJ0b2dnbGVcIiksZmFkZUluOntvcGFjaXR5Olwic2hvd1wifSxmYWRlT3V0OntvcGFjaXR5OlwiaGlkZVwifSxmYWRlVG9nZ2xlOntvcGFjaXR5OlwidG9nZ2xlXCJ9fSxmdW5jdGlvbihlLHIpe1MuZm5bZV09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLmFuaW1hdGUocixlLHQsbil9fSksUy50aW1lcnM9W10sUy5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGUsdD0wLG49Uy50aW1lcnM7Zm9yKHR0PURhdGUubm93KCk7dDxuLmxlbmd0aDt0KyspKGU9blt0XSkoKXx8blt0XSE9PWV8fG4uc3BsaWNlKHQtLSwxKTtuLmxlbmd0aHx8Uy5meC5zdG9wKCksdHQ9dm9pZCAwfSxTLmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe1MudGltZXJzLnB1c2goZSksUy5meC5zdGFydCgpfSxTLmZ4LmludGVydmFsPTEzLFMuZnguc3RhcnQ9ZnVuY3Rpb24oKXtudHx8KG50PSEwLHN0KCkpfSxTLmZ4LnN0b3A9ZnVuY3Rpb24oKXtudD1udWxsfSxTLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxTLmZuLmRlbGF5PWZ1bmN0aW9uKHIsZSl7cmV0dXJuIHI9Uy5meCYmUy5meC5zcGVlZHNbcl18fHIsZT1lfHxcImZ4XCIsdGhpcy5xdWV1ZShlLGZ1bmN0aW9uKGUsdCl7dmFyIG49Qy5zZXRUaW1lb3V0KGUscik7dC5zdG9wPWZ1bmN0aW9uKCl7Qy5jbGVhclRpbWVvdXQobil9fSl9LHJ0PUUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGl0PUUuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKS5hcHBlbmRDaGlsZChFLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLHJ0LnR5cGU9XCJjaGVja2JveFwiLHkuY2hlY2tPbj1cIlwiIT09cnQudmFsdWUseS5vcHRTZWxlY3RlZD1pdC5zZWxlY3RlZCwocnQ9RS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpLnZhbHVlPVwidFwiLHJ0LnR5cGU9XCJyYWRpb1wiLHkucmFkaW9WYWx1ZT1cInRcIj09PXJ0LnZhbHVlO3ZhciBwdCxkdD1TLmV4cHIuYXR0ckhhbmRsZTtTLmZuLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihlLHQpe3JldHVybiAkKHRoaXMsUy5hdHRyLGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtTLnJlbW92ZUF0dHIodGhpcyxlKX0pfX0pLFMuZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89ZS5ub2RlVHlwZTtpZigzIT09byYmOCE9PW8mJjIhPT1vKXJldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLmdldEF0dHJpYnV0ZT9TLnByb3AoZSx0LG4pOigxPT09byYmUy5pc1hNTERvYyhlKXx8KGk9Uy5hdHRySG9va3NbdC50b0xvd2VyQ2FzZSgpXXx8KFMuZXhwci5tYXRjaC5ib29sLnRlc3QodCk/cHQ6dm9pZCAwKSksdm9pZCAwIT09bj9udWxsPT09bj92b2lkIFMucmVtb3ZlQXR0cihlLHQpOmkmJlwic2V0XCJpbiBpJiZ2b2lkIDAhPT0ocj1pLnNldChlLG4sdCkpP3I6KGUuc2V0QXR0cmlidXRlKHQsbitcIlwiKSxuKTppJiZcImdldFwiaW4gaSYmbnVsbCE9PShyPWkuZ2V0KGUsdCkpP3I6bnVsbD09KHI9Uy5maW5kLmF0dHIoZSx0KSk/dm9pZCAwOnIpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihlLHQpe2lmKCF5LnJhZGlvVmFsdWUmJlwicmFkaW9cIj09PXQmJkEoZSxcImlucHV0XCIpKXt2YXIgbj1lLnZhbHVlO3JldHVybiBlLnNldEF0dHJpYnV0ZShcInR5cGVcIix0KSxuJiYoZS52YWx1ZT1uKSx0fX19fSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wLGk9dCYmdC5tYXRjaChQKTtpZihpJiYxPT09ZS5ub2RlVHlwZSl3aGlsZShuPWlbcisrXSllLnJlbW92ZUF0dHJpYnV0ZShuKX19KSxwdD17c2V0OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4hMT09PXQ/Uy5yZW1vdmVBdHRyKGUsbik6ZS5zZXRBdHRyaWJ1dGUobixuKSxufX0sUy5lYWNoKFMuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSxmdW5jdGlvbihlLHQpe3ZhciBhPWR0W3RdfHxTLmZpbmQuYXR0cjtkdFt0XT1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXQudG9Mb3dlckNhc2UoKTtyZXR1cm4gbnx8KGk9ZHRbb10sZHRbb109cixyPW51bGwhPWEoZSx0LG4pP286bnVsbCxkdFtvXT1pKSxyfX0pO3ZhciBodD0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLGd0PS9eKD86YXxhcmVhKSQvaTtmdW5jdGlvbiB2dChlKXtyZXR1cm4oZS5tYXRjaChQKXx8W10pLmpvaW4oXCIgXCIpfWZ1bmN0aW9uIHl0KGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSYmZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIn1mdW5jdGlvbiBtdChlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lOlwic3RyaW5nXCI9PXR5cGVvZiBlJiZlLm1hdGNoKFApfHxbXX1TLmZuLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQpe3JldHVybiAkKHRoaXMsUy5wcm9wLGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtkZWxldGUgdGhpc1tTLnByb3BGaXhbZV18fGVdfSl9fSksUy5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz1lLm5vZGVUeXBlO2lmKDMhPT1vJiY4IT09byYmMiE9PW8pcmV0dXJuIDE9PT1vJiZTLmlzWE1MRG9jKGUpfHwodD1TLnByb3BGaXhbdF18fHQsaT1TLnByb3BIb29rc1t0XSksdm9pZCAwIT09bj9pJiZcInNldFwiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOmVbdF09bjppJiZcImdldFwiaW4gaSYmbnVsbCE9PShyPWkuZ2V0KGUsdCkpP3I6ZVt0XX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PVMuZmluZC5hdHRyKGUsXCJ0YWJpbmRleFwiKTtyZXR1cm4gdD9wYXJzZUludCh0LDEwKTpodC50ZXN0KGUubm9kZU5hbWUpfHxndC50ZXN0KGUubm9kZU5hbWUpJiZlLmhyZWY/MDotMX19fSxwcm9wRml4OntcImZvclwiOlwiaHRtbEZvclwiLFwiY2xhc3NcIjpcImNsYXNzTmFtZVwifX0pLHkub3B0U2VsZWN0ZWR8fChTLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3QmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksUy5lYWNoKFtcInRhYkluZGV4XCIsXCJyZWFkT25seVwiLFwibWF4TGVuZ3RoXCIsXCJjZWxsU3BhY2luZ1wiLFwiY2VsbFBhZGRpbmdcIixcInJvd1NwYW5cIixcImNvbFNwYW5cIixcInVzZU1hcFwiLFwiZnJhbWVCb3JkZXJcIixcImNvbnRlbnRFZGl0YWJsZVwiXSxmdW5jdGlvbigpe1MucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldPXRoaXN9KSxTLmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHMsdT0wO2lmKG0odCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtTKHRoaXMpLmFkZENsYXNzKHQuY2FsbCh0aGlzLGUseXQodGhpcykpKX0pO2lmKChlPW10KHQpKS5sZW5ndGgpd2hpbGUobj10aGlzW3UrK10paWYoaT15dChuKSxyPTE9PT1uLm5vZGVUeXBlJiZcIiBcIit2dChpKStcIiBcIil7YT0wO3doaWxlKG89ZVthKytdKXIuaW5kZXhPZihcIiBcIitvK1wiIFwiKTwwJiYocis9bytcIiBcIik7aSE9PShzPXZ0KHIpKSYmbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLHMpfXJldHVybiB0aGlzfSxyZW1vdmVDbGFzczpmdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvLGEscyx1PTA7aWYobSh0KSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe1ModGhpcykucmVtb3ZlQ2xhc3ModC5jYWxsKHRoaXMsZSx5dCh0aGlzKSkpfSk7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsXCJcIik7aWYoKGU9bXQodCkpLmxlbmd0aCl3aGlsZShuPXRoaXNbdSsrXSlpZihpPXl0KG4pLHI9MT09PW4ubm9kZVR5cGUmJlwiIFwiK3Z0KGkpK1wiIFwiKXthPTA7d2hpbGUobz1lW2ErK10pd2hpbGUoLTE8ci5pbmRleE9mKFwiIFwiK28rXCIgXCIpKXI9ci5yZXBsYWNlKFwiIFwiK28rXCIgXCIsXCIgXCIpO2khPT0ocz12dChyKSkmJm4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixzKX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oaSx0KXt2YXIgbz10eXBlb2YgaSxhPVwic3RyaW5nXCI9PT1vfHxBcnJheS5pc0FycmF5KGkpO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgdCYmYT90P3RoaXMuYWRkQ2xhc3MoaSk6dGhpcy5yZW1vdmVDbGFzcyhpKTptKGkpP3RoaXMuZWFjaChmdW5jdGlvbihlKXtTKHRoaXMpLnRvZ2dsZUNsYXNzKGkuY2FsbCh0aGlzLGUseXQodGhpcyksdCksdCl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZSx0LG4scjtpZihhKXt0PTAsbj1TKHRoaXMpLHI9bXQoaSk7d2hpbGUoZT1yW3QrK10pbi5oYXNDbGFzcyhlKT9uLnJlbW92ZUNsYXNzKGUpOm4uYWRkQ2xhc3MoZSl9ZWxzZSB2b2lkIDAhPT1pJiZcImJvb2xlYW5cIiE9PW98fCgoZT15dCh0aGlzKSkmJlkuc2V0KHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIsZSksdGhpcy5zZXRBdHRyaWJ1dGUmJnRoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixlfHwhMT09PWk/XCJcIjpZLmdldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiKXx8XCJcIikpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj0wO3Q9XCIgXCIrZStcIiBcIjt3aGlsZShuPXRoaXNbcisrXSlpZigxPT09bi5ub2RlVHlwZSYmLTE8KFwiIFwiK3Z0KHl0KG4pKStcIiBcIikuaW5kZXhPZih0KSlyZXR1cm4hMDtyZXR1cm4hMX19KTt2YXIgeHQ9L1xcci9nO1MuZm4uZXh0ZW5kKHt2YWw6ZnVuY3Rpb24obil7dmFyIHIsZSxpLHQ9dGhpc1swXTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT1tKG4pLHRoaXMuZWFjaChmdW5jdGlvbihlKXt2YXIgdDsxPT09dGhpcy5ub2RlVHlwZSYmKG51bGw9PSh0PWk/bi5jYWxsKHRoaXMsZSxTKHRoaXMpLnZhbCgpKTpuKT90PVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIHQ/dCs9XCJcIjpBcnJheS5pc0FycmF5KHQpJiYodD1TLm1hcCh0LGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP1wiXCI6ZStcIlwifSkpLChyPVMudmFsSG9va3NbdGhpcy50eXBlXXx8Uy52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSYmXCJzZXRcImluIHImJnZvaWQgMCE9PXIuc2V0KHRoaXMsdCxcInZhbHVlXCIpfHwodGhpcy52YWx1ZT10KSl9KSk6dD8ocj1TLnZhbEhvb2tzW3QudHlwZV18fFMudmFsSG9va3NbdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwiZ2V0XCJpbiByJiZ2b2lkIDAhPT0oZT1yLmdldCh0LFwidmFsdWVcIikpP2U6XCJzdHJpbmdcIj09dHlwZW9mKGU9dC52YWx1ZSk/ZS5yZXBsYWNlKHh0LFwiXCIpOm51bGw9PWU/XCJcIjplOnZvaWQgMH19KSxTLmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PVMuZmluZC5hdHRyKGUsXCJ2YWx1ZVwiKTtyZXR1cm4gbnVsbCE9dD90OnZ0KFMudGV4dChlKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaT1lLm9wdGlvbnMsbz1lLnNlbGVjdGVkSW5kZXgsYT1cInNlbGVjdC1vbmVcIj09PWUudHlwZSxzPWE/bnVsbDpbXSx1PWE/bysxOmkubGVuZ3RoO2ZvcihyPW88MD91OmE/bzowO3I8dTtyKyspaWYoKChuPWlbcl0pLnNlbGVjdGVkfHxyPT09bykmJiFuLmRpc2FibGVkJiYoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZHx8IUEobi5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZih0PVMobikudmFsKCksYSlyZXR1cm4gdDtzLnB1c2godCl9cmV0dXJuIHN9LHNldDpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT1lLm9wdGlvbnMsbz1TLm1ha2VBcnJheSh0KSxhPWkubGVuZ3RoO3doaWxlKGEtLSkoKHI9aVthXSkuc2VsZWN0ZWQ9LTE8Uy5pbkFycmF5KFMudmFsSG9va3Mub3B0aW9uLmdldChyKSxvKSkmJihuPSEwKTtyZXR1cm4gbnx8KGUuc2VsZWN0ZWRJbmRleD0tMSksb319fX0pLFMuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXtTLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBlLmNoZWNrZWQ9LTE8Uy5pbkFycmF5KFMoZSkudmFsKCksdCl9fSx5LmNoZWNrT258fChTLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmUudmFsdWV9KX0pLHkuZm9jdXNpbj1cIm9uZm9jdXNpblwiaW4gQzt2YXIgYnQ9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLHd0PWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9O1MuZXh0ZW5kKFMuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsLGMsZixwPVtufHxFXSxkPXYuY2FsbChlLFwidHlwZVwiKT9lLnR5cGU6ZSxoPXYuY2FsbChlLFwibmFtZXNwYWNlXCIpP2UubmFtZXNwYWNlLnNwbGl0KFwiLlwiKTpbXTtpZihvPWY9YT1uPW58fEUsMyE9PW4ubm9kZVR5cGUmJjghPT1uLm5vZGVUeXBlJiYhYnQudGVzdChkK1MuZXZlbnQudHJpZ2dlcmVkKSYmKC0xPGQuaW5kZXhPZihcIi5cIikmJihkPShoPWQuc3BsaXQoXCIuXCIpKS5zaGlmdCgpLGguc29ydCgpKSx1PWQuaW5kZXhPZihcIjpcIik8MCYmXCJvblwiK2QsKGU9ZVtTLmV4cGFuZG9dP2U6bmV3IFMuRXZlbnQoZCxcIm9iamVjdFwiPT10eXBlb2YgZSYmZSkpLmlzVHJpZ2dlcj1yPzI6MyxlLm5hbWVzcGFjZT1oLmpvaW4oXCIuXCIpLGUucm5hbWVzcGFjZT1lLm5hbWVzcGFjZT9uZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIraC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIik6bnVsbCxlLnJlc3VsdD12b2lkIDAsZS50YXJnZXR8fChlLnRhcmdldD1uKSx0PW51bGw9PXQ/W2VdOlMubWFrZUFycmF5KHQsW2VdKSxjPVMuZXZlbnQuc3BlY2lhbFtkXXx8e30scnx8IWMudHJpZ2dlcnx8ITEhPT1jLnRyaWdnZXIuYXBwbHkobix0KSkpe2lmKCFyJiYhYy5ub0J1YmJsZSYmIXgobikpe2ZvcihzPWMuZGVsZWdhdGVUeXBlfHxkLGJ0LnRlc3QocytkKXx8KG89by5wYXJlbnROb2RlKTtvO289by5wYXJlbnROb2RlKXAucHVzaChvKSxhPW87YT09PShuLm93bmVyRG9jdW1lbnR8fEUpJiZwLnB1c2goYS5kZWZhdWx0Vmlld3x8YS5wYXJlbnRXaW5kb3d8fEMpfWk9MDt3aGlsZSgobz1wW2krK10pJiYhZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWY9byxlLnR5cGU9MTxpP3M6Yy5iaW5kVHlwZXx8ZCwobD0oWS5nZXQobyxcImV2ZW50c1wiKXx8T2JqZWN0LmNyZWF0ZShudWxsKSlbZS50eXBlXSYmWS5nZXQobyxcImhhbmRsZVwiKSkmJmwuYXBwbHkobyx0KSwobD11JiZvW3VdKSYmbC5hcHBseSYmVihvKSYmKGUucmVzdWx0PWwuYXBwbHkobyx0KSwhMT09PWUucmVzdWx0JiZlLnByZXZlbnREZWZhdWx0KCkpO3JldHVybiBlLnR5cGU9ZCxyfHxlLmlzRGVmYXVsdFByZXZlbnRlZCgpfHxjLl9kZWZhdWx0JiYhMSE9PWMuX2RlZmF1bHQuYXBwbHkocC5wb3AoKSx0KXx8IVYobil8fHUmJm0obltkXSkmJiF4KG4pJiYoKGE9blt1XSkmJihuW3VdPW51bGwpLFMuZXZlbnQudHJpZ2dlcmVkPWQsZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpJiZmLmFkZEV2ZW50TGlzdGVuZXIoZCx3dCksbltkXSgpLGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmZi5yZW1vdmVFdmVudExpc3RlbmVyKGQsd3QpLFMuZXZlbnQudHJpZ2dlcmVkPXZvaWQgMCxhJiYoblt1XT1hKSksZS5yZXN1bHR9fSxzaW11bGF0ZTpmdW5jdGlvbihlLHQsbil7dmFyIHI9Uy5leHRlbmQobmV3IFMuRXZlbnQsbix7dHlwZTplLGlzU2ltdWxhdGVkOiEwfSk7Uy5ldmVudC50cmlnZ2VyKHIsbnVsbCx0KX19KSxTLmZuLmV4dGVuZCh7dHJpZ2dlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtTLmV2ZW50LnRyaWdnZXIoZSx0LHRoaXMpfSl9LHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpc1swXTtpZihuKXJldHVybiBTLmV2ZW50LnRyaWdnZXIoZSx0LG4sITApfX0pLHkuZm9jdXNpbnx8Uy5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24obixyKXt2YXIgaT1mdW5jdGlvbihlKXtTLmV2ZW50LnNpbXVsYXRlKHIsZS50YXJnZXQsUy5ldmVudC5maXgoZSkpfTtTLmV2ZW50LnNwZWNpYWxbcl09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLmRvY3VtZW50fHx0aGlzLHQ9WS5hY2Nlc3MoZSxyKTt0fHxlLmFkZEV2ZW50TGlzdGVuZXIobixpLCEwKSxZLmFjY2VzcyhlLHIsKHR8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcy5kb2N1bWVudHx8dGhpcyx0PVkuYWNjZXNzKGUsciktMTt0P1kuYWNjZXNzKGUscix0KTooZS5yZW1vdmVFdmVudExpc3RlbmVyKG4saSwhMCksWS5yZW1vdmUoZSxyKSl9fX0pO3ZhciBUdD1DLmxvY2F0aW9uLEN0PXtndWlkOkRhdGUubm93KCl9LEV0PS9cXD8vO1MucGFyc2VYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBudWxsO3RyeXt0PShuZXcgQy5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhlLFwidGV4dC94bWxcIil9Y2F0Y2goZSl7dD12b2lkIDB9cmV0dXJuIHQmJiF0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RofHxTLmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK2UpLHR9O3ZhciBTdD0vXFxbXFxdJC8sa3Q9L1xccj9cXG4vZyxBdD0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksTnQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIER0KG4sZSxyLGkpe3ZhciB0O2lmKEFycmF5LmlzQXJyYXkoZSkpUy5lYWNoKGUsZnVuY3Rpb24oZSx0KXtyfHxTdC50ZXN0KG4pP2kobix0KTpEdChuK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgdCYmbnVsbCE9dD9lOlwiXCIpK1wiXVwiLHQscixpKX0pO2Vsc2UgaWYocnx8XCJvYmplY3RcIiE9PXcoZSkpaShuLGUpO2Vsc2UgZm9yKHQgaW4gZSlEdChuK1wiW1wiK3QrXCJdXCIsZVt0XSxyLGkpfVMucGFyYW09ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9ZnVuY3Rpb24oZSx0KXt2YXIgbj1tKHQpP3QoKTp0O3Jbci5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChlKStcIj1cIitlbmNvZGVVUklDb21wb25lbnQobnVsbD09bj9cIlwiOm4pfTtpZihudWxsPT1lKXJldHVyblwiXCI7aWYoQXJyYXkuaXNBcnJheShlKXx8ZS5qcXVlcnkmJiFTLmlzUGxhaW5PYmplY3QoZSkpUy5lYWNoKGUsZnVuY3Rpb24oKXtpKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKG4gaW4gZSlEdChuLGVbbl0sdCxpKTtyZXR1cm4gci5qb2luKFwiJlwiKX0sUy5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiBTLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9Uy5wcm9wKHRoaXMsXCJlbGVtZW50c1wiKTtyZXR1cm4gZT9TLm1ha2VBcnJheShlKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiFTKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZOdC50ZXN0KHRoaXMubm9kZU5hbWUpJiYhQXQudGVzdChlKSYmKHRoaXMuY2hlY2tlZHx8IXBlLnRlc3QoZSkpfSkubWFwKGZ1bmN0aW9uKGUsdCl7dmFyIG49Uyh0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09bj9udWxsOkFycmF5LmlzQXJyYXkobik/Uy5tYXAobixmdW5jdGlvbihlKXtyZXR1cm57bmFtZTp0Lm5hbWUsdmFsdWU6ZS5yZXBsYWNlKGt0LFwiXFxyXFxuXCIpfX0pOntuYW1lOnQubmFtZSx2YWx1ZTpuLnJlcGxhY2Uoa3QsXCJcXHJcXG5cIil9fSkuZ2V0KCl9fSk7dmFyIGp0PS8lMjAvZyxxdD0vIy4qJC8sTHQ9LyhbPyZdKV89W14mXSovLEh0PS9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvZ20sT3Q9L14oPzpHRVR8SEVBRCkkLyxQdD0vXlxcL1xcLy8sUnQ9e30sTXQ9e30sSXQ9XCIqL1wiLmNvbmNhdChcIipcIiksV3Q9RS5jcmVhdGVFbGVtZW50KFwiYVwiKTtmdW5jdGlvbiBGdChvKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtcInN0cmluZ1wiIT10eXBlb2YgZSYmKHQ9ZSxlPVwiKlwiKTt2YXIgbixyPTAsaT1lLnRvTG93ZXJDYXNlKCkubWF0Y2goUCl8fFtdO2lmKG0odCkpd2hpbGUobj1pW3IrK10pXCIrXCI9PT1uWzBdPyhuPW4uc2xpY2UoMSl8fFwiKlwiLChvW25dPW9bbl18fFtdKS51bnNoaWZ0KHQpKToob1tuXT1vW25dfHxbXSkucHVzaCh0KX19ZnVuY3Rpb24gQnQodCxpLG8sYSl7dmFyIHM9e30sdT10PT09TXQ7ZnVuY3Rpb24gbChlKXt2YXIgcjtyZXR1cm4gc1tlXT0hMCxTLmVhY2godFtlXXx8W10sZnVuY3Rpb24oZSx0KXt2YXIgbj10KGksbyxhKTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2Ygbnx8dXx8c1tuXT91PyEocj1uKTp2b2lkIDA6KGkuZGF0YVR5cGVzLnVuc2hpZnQobiksbChuKSwhMSl9KSxyfXJldHVybiBsKGkuZGF0YVR5cGVzWzBdKXx8IXNbXCIqXCJdJiZsKFwiKlwiKX1mdW5jdGlvbiAkdChlLHQpe3ZhciBuLHIsaT1TLmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKG4gaW4gdCl2b2lkIDAhPT10W25dJiYoKGlbbl0/ZTpyfHwocj17fSkpW25dPXRbbl0pO3JldHVybiByJiZTLmV4dGVuZCghMCxlLHIpLGV9V3QuaHJlZj1UdC5ocmVmLFMuZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDpUdC5ocmVmLHR5cGU6XCJHRVRcIixpc0xvY2FsOi9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3QoVHQucHJvdG9jb2wpLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZTpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLGFjY2VwdHM6e1wiKlwiOkl0LHRleHQ6XCJ0ZXh0L3BsYWluXCIsaHRtbDpcInRleHQvaHRtbFwiLHhtbDpcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixqc29uOlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJ9LGNvbnRlbnRzOnt4bWw6L1xcYnhtbFxcYi8saHRtbDovXFxiaHRtbC8sanNvbjovXFxianNvblxcYi99LHJlc3BvbnNlRmllbGRzOnt4bWw6XCJyZXNwb25zZVhNTFwiLHRleHQ6XCJyZXNwb25zZVRleHRcIixqc29uOlwicmVzcG9uc2VKU09OXCJ9LGNvbnZlcnRlcnM6e1wiKiB0ZXh0XCI6U3RyaW5nLFwidGV4dCBodG1sXCI6ITAsXCJ0ZXh0IGpzb25cIjpKU09OLnBhcnNlLFwidGV4dCB4bWxcIjpTLnBhcnNlWE1MfSxmbGF0T3B0aW9uczp7dXJsOiEwLGNvbnRleHQ6ITB9fSxhamF4U2V0dXA6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD8kdCgkdChlLFMuYWpheFNldHRpbmdzKSx0KTokdChTLmFqYXhTZXR0aW5ncyxlKX0sYWpheFByZWZpbHRlcjpGdChSdCksYWpheFRyYW5zcG9ydDpGdChNdCksYWpheDpmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBlJiYodD1lLGU9dm9pZCAwKSx0PXR8fHt9O3ZhciBjLGYscCxuLGQscixoLGcsaSxvLHY9Uy5hamF4U2V0dXAoe30sdCkseT12LmNvbnRleHR8fHYsbT12LmNvbnRleHQmJih5Lm5vZGVUeXBlfHx5LmpxdWVyeSk/Uyh5KTpTLmV2ZW50LHg9Uy5EZWZlcnJlZCgpLGI9Uy5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSx3PXYuc3RhdHVzQ29kZXx8e30sYT17fSxzPXt9LHU9XCJjYW5jZWxlZFwiLFQ9e3JlYWR5U3RhdGU6MCxnZXRSZXNwb25zZUhlYWRlcjpmdW5jdGlvbihlKXt2YXIgdDtpZihoKXtpZighbil7bj17fTt3aGlsZSh0PUh0LmV4ZWMocCkpblt0WzFdLnRvTG93ZXJDYXNlKCkrXCIgXCJdPShuW3RbMV0udG9Mb3dlckNhc2UoKStcIiBcIl18fFtdKS5jb25jYXQodFsyXSl9dD1uW2UudG9Mb3dlckNhc2UoKStcIiBcIl19cmV0dXJuIG51bGw9PXQ/bnVsbDp0LmpvaW4oXCIsIFwiKX0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIGg/cDpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PWgmJihlPXNbZS50b0xvd2VyQ2FzZSgpXT1zW2UudG9Mb3dlckNhc2UoKV18fGUsYVtlXT10KSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1oJiYodi5taW1lVHlwZT1lKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpaWYoaClULmFsd2F5cyhlW1Quc3RhdHVzXSk7ZWxzZSBmb3IodCBpbiBlKXdbdF09W3dbdF0sZVt0XV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fHU7cmV0dXJuIGMmJmMuYWJvcnQodCksbCgwLHQpLHRoaXN9fTtpZih4LnByb21pc2UoVCksdi51cmw9KChlfHx2LnVybHx8VHQuaHJlZikrXCJcIikucmVwbGFjZShQdCxUdC5wcm90b2NvbCtcIi8vXCIpLHYudHlwZT10Lm1ldGhvZHx8dC50eXBlfHx2Lm1ldGhvZHx8di50eXBlLHYuZGF0YVR5cGVzPSh2LmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChQKXx8W1wiXCJdLG51bGw9PXYuY3Jvc3NEb21haW4pe3I9RS5jcmVhdGVFbGVtZW50KFwiYVwiKTt0cnl7ci5ocmVmPXYudXJsLHIuaHJlZj1yLmhyZWYsdi5jcm9zc0RvbWFpbj1XdC5wcm90b2NvbCtcIi8vXCIrV3QuaG9zdCE9ci5wcm90b2NvbCtcIi8vXCIrci5ob3N0fWNhdGNoKGUpe3YuY3Jvc3NEb21haW49ITB9fWlmKHYuZGF0YSYmdi5wcm9jZXNzRGF0YSYmXCJzdHJpbmdcIiE9dHlwZW9mIHYuZGF0YSYmKHYuZGF0YT1TLnBhcmFtKHYuZGF0YSx2LnRyYWRpdGlvbmFsKSksQnQoUnQsdix0LFQpLGgpcmV0dXJuIFQ7Zm9yKGkgaW4oZz1TLmV2ZW50JiZ2Lmdsb2JhbCkmJjA9PVMuYWN0aXZlKysmJlMuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSx2LnR5cGU9di50eXBlLnRvVXBwZXJDYXNlKCksdi5oYXNDb250ZW50PSFPdC50ZXN0KHYudHlwZSksZj12LnVybC5yZXBsYWNlKHF0LFwiXCIpLHYuaGFzQ29udGVudD92LmRhdGEmJnYucHJvY2Vzc0RhdGEmJjA9PT0odi5jb250ZW50VHlwZXx8XCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSYmKHYuZGF0YT12LmRhdGEucmVwbGFjZShqdCxcIitcIikpOihvPXYudXJsLnNsaWNlKGYubGVuZ3RoKSx2LmRhdGEmJih2LnByb2Nlc3NEYXRhfHxcInN0cmluZ1wiPT10eXBlb2Ygdi5kYXRhKSYmKGYrPShFdC50ZXN0KGYpP1wiJlwiOlwiP1wiKSt2LmRhdGEsZGVsZXRlIHYuZGF0YSksITE9PT12LmNhY2hlJiYoZj1mLnJlcGxhY2UoTHQsXCIkMVwiKSxvPShFdC50ZXN0KGYpP1wiJlwiOlwiP1wiKStcIl89XCIrQ3QuZ3VpZCsrK28pLHYudXJsPWYrbyksdi5pZk1vZGlmaWVkJiYoUy5sYXN0TW9kaWZpZWRbZl0mJlQuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsUy5sYXN0TW9kaWZpZWRbZl0pLFMuZXRhZ1tmXSYmVC5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLFMuZXRhZ1tmXSkpLCh2LmRhdGEmJnYuaGFzQ29udGVudCYmITEhPT12LmNvbnRlbnRUeXBlfHx0LmNvbnRlbnRUeXBlKSYmVC5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsdi5jb250ZW50VHlwZSksVC5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsdi5kYXRhVHlwZXNbMF0mJnYuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV0/di5hY2NlcHRzW3YuZGF0YVR5cGVzWzBdXSsoXCIqXCIhPT12LmRhdGFUeXBlc1swXT9cIiwgXCIrSXQrXCI7IHE9MC4wMVwiOlwiXCIpOnYuYWNjZXB0c1tcIipcIl0pLHYuaGVhZGVycylULnNldFJlcXVlc3RIZWFkZXIoaSx2LmhlYWRlcnNbaV0pO2lmKHYuYmVmb3JlU2VuZCYmKCExPT09di5iZWZvcmVTZW5kLmNhbGwoeSxULHYpfHxoKSlyZXR1cm4gVC5hYm9ydCgpO2lmKHU9XCJhYm9ydFwiLGIuYWRkKHYuY29tcGxldGUpLFQuZG9uZSh2LnN1Y2Nlc3MpLFQuZmFpbCh2LmVycm9yKSxjPUJ0KE10LHYsdCxUKSl7aWYoVC5yZWFkeVN0YXRlPTEsZyYmbS50cmlnZ2VyKFwiYWpheFNlbmRcIixbVCx2XSksaClyZXR1cm4gVDt2LmFzeW5jJiYwPHYudGltZW91dCYmKGQ9Qy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7VC5hYm9ydChcInRpbWVvdXRcIil9LHYudGltZW91dCkpO3RyeXtoPSExLGMuc2VuZChhLGwpfWNhdGNoKGUpe2lmKGgpdGhyb3cgZTtsKC0xLGUpfX1lbHNlIGwoLTEsXCJObyBUcmFuc3BvcnRcIik7ZnVuY3Rpb24gbChlLHQsbixyKXt2YXIgaSxvLGEscyx1LGw9dDtofHwoaD0hMCxkJiZDLmNsZWFyVGltZW91dChkKSxjPXZvaWQgMCxwPXJ8fFwiXCIsVC5yZWFkeVN0YXRlPTA8ZT80OjAsaT0yMDA8PWUmJmU8MzAwfHwzMDQ9PT1lLG4mJihzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYSxzPWUuY29udGVudHMsdT1lLmRhdGFUeXBlczt3aGlsZShcIipcIj09PXVbMF0pdS5zaGlmdCgpLHZvaWQgMD09PXImJihyPWUubWltZVR5cGV8fHQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO2lmKHIpZm9yKGkgaW4gcylpZihzW2ldJiZzW2ldLnRlc3Qocikpe3UudW5zaGlmdChpKTticmVha31pZih1WzBdaW4gbilvPXVbMF07ZWxzZXtmb3IoaSBpbiBuKXtpZighdVswXXx8ZS5jb252ZXJ0ZXJzW2krXCIgXCIrdVswXV0pe289aTticmVha31hfHwoYT1pKX1vPW98fGF9aWYobylyZXR1cm4gbyE9PXVbMF0mJnUudW5zaGlmdChvKSxuW29dfSh2LFQsbikpLCFpJiYtMTxTLmluQXJyYXkoXCJzY3JpcHRcIix2LmRhdGFUeXBlcykmJih2LmNvbnZlcnRlcnNbXCJ0ZXh0IHNjcmlwdFwiXT1mdW5jdGlvbigpe30pLHM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXt9LGM9ZS5kYXRhVHlwZXMuc2xpY2UoKTtpZihjWzFdKWZvcihhIGluIGUuY29udmVydGVycylsW2EudG9Mb3dlckNhc2UoKV09ZS5jb252ZXJ0ZXJzW2FdO289Yy5zaGlmdCgpO3doaWxlKG8paWYoZS5yZXNwb25zZUZpZWxkc1tvXSYmKG5bZS5yZXNwb25zZUZpZWxkc1tvXV09dCksIXUmJnImJmUuZGF0YUZpbHRlciYmKHQ9ZS5kYXRhRmlsdGVyKHQsZS5kYXRhVHlwZSkpLHU9byxvPWMuc2hpZnQoKSlpZihcIipcIj09PW8pbz11O2Vsc2UgaWYoXCIqXCIhPT11JiZ1IT09byl7aWYoIShhPWxbdStcIiBcIitvXXx8bFtcIiogXCIrb10pKWZvcihpIGluIGwpaWYoKHM9aS5zcGxpdChcIiBcIikpWzFdPT09byYmKGE9bFt1K1wiIFwiK3NbMF1dfHxsW1wiKiBcIitzWzBdXSkpeyEwPT09YT9hPWxbaV06ITAhPT1sW2ldJiYobz1zWzBdLGMudW5zaGlmdChzWzFdKSk7YnJlYWt9aWYoITAhPT1hKWlmKGEmJmVbXCJ0aHJvd3NcIl0pdD1hKHQpO2Vsc2UgdHJ5e3Q9YSh0KX1jYXRjaChlKXtyZXR1cm57c3RhdGU6XCJwYXJzZXJlcnJvclwiLGVycm9yOmE/ZTpcIk5vIGNvbnZlcnNpb24gZnJvbSBcIit1K1wiIHRvIFwiK299fX1yZXR1cm57c3RhdGU6XCJzdWNjZXNzXCIsZGF0YTp0fX0odixzLFQsaSksaT8odi5pZk1vZGlmaWVkJiYoKHU9VC5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIikpJiYoUy5sYXN0TW9kaWZpZWRbZl09dSksKHU9VC5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIikpJiYoUy5ldGFnW2ZdPXUpKSwyMDQ9PT1lfHxcIkhFQURcIj09PXYudHlwZT9sPVwibm9jb250ZW50XCI6MzA0PT09ZT9sPVwibm90bW9kaWZpZWRcIjoobD1zLnN0YXRlLG89cy5kYXRhLGk9IShhPXMuZXJyb3IpKSk6KGE9bCwhZSYmbHx8KGw9XCJlcnJvclwiLGU8MCYmKGU9MCkpKSxULnN0YXR1cz1lLFQuc3RhdHVzVGV4dD0odHx8bCkrXCJcIixpP3gucmVzb2x2ZVdpdGgoeSxbbyxsLFRdKTp4LnJlamVjdFdpdGgoeSxbVCxsLGFdKSxULnN0YXR1c0NvZGUodyksdz12b2lkIDAsZyYmbS50cmlnZ2VyKGk/XCJhamF4U3VjY2Vzc1wiOlwiYWpheEVycm9yXCIsW1QsdixpP286YV0pLGIuZmlyZVdpdGgoeSxbVCxsXSksZyYmKG0udHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLFtULHZdKSwtLVMuYWN0aXZlfHxTLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKSkpfXJldHVybiBUfSxnZXRKU09OOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUy5nZXQoZSx0LG4sXCJqc29uXCIpfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gUy5nZXQoZSx2b2lkIDAsdCxcInNjcmlwdFwiKX19KSxTLmVhY2goW1wiZ2V0XCIsXCJwb3N0XCJdLGZ1bmN0aW9uKGUsaSl7U1tpXT1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gbSh0KSYmKHI9cnx8bixuPXQsdD12b2lkIDApLFMuYWpheChTLmV4dGVuZCh7dXJsOmUsdHlwZTppLGRhdGFUeXBlOnIsZGF0YTp0LHN1Y2Nlc3M6bn0sUy5pc1BsYWluT2JqZWN0KGUpJiZlKSl9fSksUy5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpe3ZhciB0O2Zvcih0IGluIGUuaGVhZGVycylcImNvbnRlbnQtdHlwZVwiPT09dC50b0xvd2VyQ2FzZSgpJiYoZS5jb250ZW50VHlwZT1lLmhlYWRlcnNbdF18fFwiXCIpfSksUy5fZXZhbFVybD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIFMuYWpheCh7dXJsOmUsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsY2FjaGU6ITAsYXN5bmM6ITEsZ2xvYmFsOiExLGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbigpe319LGRhdGFGaWx0ZXI6ZnVuY3Rpb24oZSl7Uy5nbG9iYWxFdmFsKGUsdCxuKX19KX0sUy5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHRoaXNbMF0mJihtKGUpJiYoZT1lLmNhbGwodGhpc1swXSkpLHQ9UyhlLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApLHRoaXNbMF0ucGFyZW50Tm9kZSYmdC5pbnNlcnRCZWZvcmUodGhpc1swXSksdC5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3doaWxlKGUuZmlyc3RFbGVtZW50Q2hpbGQpZT1lLmZpcnN0RWxlbWVudENoaWxkO3JldHVybiBlfSkuYXBwZW5kKHRoaXMpKSx0aGlzfSx3cmFwSW5uZXI6ZnVuY3Rpb24obil7cmV0dXJuIG0obik/dGhpcy5lYWNoKGZ1bmN0aW9uKGUpe1ModGhpcykud3JhcElubmVyKG4uY2FsbCh0aGlzLGUpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPVModGhpcyksdD1lLmNvbnRlbnRzKCk7dC5sZW5ndGg/dC53cmFwQWxsKG4pOmUuYXBwZW5kKG4pfSl9LHdyYXA6ZnVuY3Rpb24odCl7dmFyIG49bSh0KTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe1ModGhpcykud3JhcEFsbChuP3QuY2FsbCh0aGlzLGUpOnQpfSl9LHVud3JhcDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wYXJlbnQoZSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7Uyh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSxTLmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oZSl7cmV0dXJuIVMuZXhwci5wc2V1ZG9zLnZpc2libGUoZSl9LFMuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oZSl7cmV0dXJuISEoZS5vZmZzZXRXaWR0aHx8ZS5vZmZzZXRIZWlnaHR8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxTLmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBDLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGUpe319O3ZhciBfdD17MDoyMDAsMTIyMzoyMDR9LHp0PVMuYWpheFNldHRpbmdzLnhocigpO3kuY29ycz0hIXp0JiZcIndpdGhDcmVkZW50aWFsc1wiaW4genQseS5hamF4PXp0PSEhenQsUy5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGkpe3ZhciBvLGE7aWYoeS5jb3JzfHx6dCYmIWkuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPWkueGhyKCk7aWYoci5vcGVuKGkudHlwZSxpLnVybCxpLmFzeW5jLGkudXNlcm5hbWUsaS5wYXNzd29yZCksaS54aHJGaWVsZHMpZm9yKG4gaW4gaS54aHJGaWVsZHMpcltuXT1pLnhockZpZWxkc1tuXTtmb3IobiBpbiBpLm1pbWVUeXBlJiZyLm92ZXJyaWRlTWltZVR5cGUmJnIub3ZlcnJpZGVNaW1lVHlwZShpLm1pbWVUeXBlKSxpLmNyb3NzRG9tYWlufHxlW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXXx8KGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdPVwiWE1MSHR0cFJlcXVlc3RcIiksZSlyLnNldFJlcXVlc3RIZWFkZXIobixlW25dKTtvPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe28mJihvPWE9ci5vbmxvYWQ9ci5vbmVycm9yPXIub25hYm9ydD1yLm9udGltZW91dD1yLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLFwiYWJvcnRcIj09PWU/ci5hYm9ydCgpOlwiZXJyb3JcIj09PWU/XCJudW1iZXJcIiE9dHlwZW9mIHIuc3RhdHVzP3QoMCxcImVycm9yXCIpOnQoci5zdGF0dXMsci5zdGF0dXNUZXh0KTp0KF90W3Iuc3RhdHVzXXx8ci5zdGF0dXMsci5zdGF0dXNUZXh0LFwidGV4dFwiIT09KHIucmVzcG9uc2VUeXBlfHxcInRleHRcIil8fFwic3RyaW5nXCIhPXR5cGVvZiByLnJlc3BvbnNlVGV4dD97YmluYXJ5OnIucmVzcG9uc2V9Ont0ZXh0OnIucmVzcG9uc2VUZXh0fSxyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSxyLm9ubG9hZD1vKCksYT1yLm9uZXJyb3I9ci5vbnRpbWVvdXQ9byhcImVycm9yXCIpLHZvaWQgMCE9PXIub25hYm9ydD9yLm9uYWJvcnQ9YTpyLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1yLnJlYWR5U3RhdGUmJkMuc2V0VGltZW91dChmdW5jdGlvbigpe28mJmEoKX0pfSxvPW8oXCJhYm9ydFwiKTt0cnl7ci5zZW5kKGkuaGFzQ29udGVudCYmaS5kYXRhfHxudWxsKX1jYXRjaChlKXtpZihvKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe28mJm8oKX19fSksUy5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpe2UuY3Jvc3NEb21haW4mJihlLmNvbnRlbnRzLnNjcmlwdD0hMSl9KSxTLmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OlwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIn0sY29udGVudHM6e3NjcmlwdDovXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi99LGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbihlKXtyZXR1cm4gUy5nbG9iYWxFdmFsKGUpLGV9fX0pLFMuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLGZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUuY2FjaGUmJihlLmNhY2hlPSExKSxlLmNyb3NzRG9tYWluJiYoZS50eXBlPVwiR0VUXCIpfSksUy5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24obil7dmFyIHIsaTtpZihuLmNyb3NzRG9tYWlufHxuLnNjcmlwdEF0dHJzKXJldHVybntzZW5kOmZ1bmN0aW9uKGUsdCl7cj1TKFwiPHNjcmlwdD5cIikuYXR0cihuLnNjcmlwdEF0dHJzfHx7fSkucHJvcCh7Y2hhcnNldDpuLnNjcmlwdENoYXJzZXQsc3JjOm4udXJsfSkub24oXCJsb2FkIGVycm9yXCIsaT1mdW5jdGlvbihlKXtyLnJlbW92ZSgpLGk9bnVsbCxlJiZ0KFwiZXJyb3JcIj09PWUudHlwZT80MDQ6MjAwLGUudHlwZSl9KSxFLmhlYWQuYXBwZW5kQ2hpbGQoclswXSl9LGFib3J0OmZ1bmN0aW9uKCl7aSYmaSgpfX19KTt2YXIgVXQsWHQ9W10sVnQ9Lyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztTLmFqYXhTZXR1cCh7anNvbnA6XCJjYWxsYmFja1wiLGpzb25wQ2FsbGJhY2s6ZnVuY3Rpb24oKXt2YXIgZT1YdC5wb3AoKXx8Uy5leHBhbmRvK1wiX1wiK0N0Lmd1aWQrKztyZXR1cm4gdGhpc1tlXT0hMCxlfX0pLFMuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGE9ITEhPT1lLmpzb25wJiYoVnQudGVzdChlLnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYwPT09KGUuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJlZ0LnRlc3QoZS5kYXRhKSYmXCJkYXRhXCIpO2lmKGF8fFwianNvbnBcIj09PWUuZGF0YVR5cGVzWzBdKXJldHVybiByPWUuanNvbnBDYWxsYmFjaz1tKGUuanNvbnBDYWxsYmFjayk/ZS5qc29ucENhbGxiYWNrKCk6ZS5qc29ucENhbGxiYWNrLGE/ZVthXT1lW2FdLnJlcGxhY2UoVnQsXCIkMVwiK3IpOiExIT09ZS5qc29ucCYmKGUudXJsKz0oRXQudGVzdChlLnVybCk/XCImXCI6XCI/XCIpK2UuanNvbnArXCI9XCIrciksZS5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4gb3x8Uy5lcnJvcihyK1wiIHdhcyBub3QgY2FsbGVkXCIpLG9bMF19LGUuZGF0YVR5cGVzWzBdPVwianNvblwiLGk9Q1tyXSxDW3JdPWZ1bmN0aW9uKCl7bz1hcmd1bWVudHN9LG4uYWx3YXlzKGZ1bmN0aW9uKCl7dm9pZCAwPT09aT9TKEMpLnJlbW92ZVByb3Aocik6Q1tyXT1pLGVbcl0mJihlLmpzb25wQ2FsbGJhY2s9dC5qc29ucENhbGxiYWNrLFh0LnB1c2gocikpLG8mJm0oaSkmJmkob1swXSksbz1pPXZvaWQgMH0pLFwic2NyaXB0XCJ9KSx5LmNyZWF0ZUhUTUxEb2N1bWVudD0oKFV0PUUuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHkpLmlubmVySFRNTD1cIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCIsMj09PVV0LmNoaWxkTm9kZXMubGVuZ3RoKSxTLnBhcnNlSFRNTD1mdW5jdGlvbihlLHQsbil7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGU/W106KFwiYm9vbGVhblwiPT10eXBlb2YgdCYmKG49dCx0PSExKSx0fHwoeS5jcmVhdGVIVE1MRG9jdW1lbnQ/KChyPSh0PUUuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpKS5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKSkuaHJlZj1FLmxvY2F0aW9uLmhyZWYsdC5oZWFkLmFwcGVuZENoaWxkKHIpKTp0PUUpLG89IW4mJltdLChpPU4uZXhlYyhlKSk/W3QuY3JlYXRlRWxlbWVudChpWzFdKV06KGk9eGUoW2VdLHQsbyksbyYmby5sZW5ndGgmJlMobykucmVtb3ZlKCksUy5tZXJnZShbXSxpLmNoaWxkTm9kZXMpKSk7dmFyIHIsaSxvfSxTLmZuLmxvYWQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPXRoaXMscz1lLmluZGV4T2YoXCIgXCIpO3JldHVybi0xPHMmJihyPXZ0KGUuc2xpY2UocykpLGU9ZS5zbGljZSgwLHMpKSxtKHQpPyhuPXQsdD12b2lkIDApOnQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiYoaT1cIlBPU1RcIiksMDxhLmxlbmd0aCYmUy5hamF4KHt1cmw6ZSx0eXBlOml8fFwiR0VUXCIsZGF0YVR5cGU6XCJodG1sXCIsZGF0YTp0fSkuZG9uZShmdW5jdGlvbihlKXtvPWFyZ3VtZW50cyxhLmh0bWwocj9TKFwiPGRpdj5cIikuYXBwZW5kKFMucGFyc2VIVE1MKGUpKS5maW5kKHIpOmUpfSkuYWx3YXlzKG4mJmZ1bmN0aW9uKGUsdCl7YS5lYWNoKGZ1bmN0aW9uKCl7bi5hcHBseSh0aGlzLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pfSksdGhpc30sUy5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIFMuZ3JlcChTLnRpbWVycyxmdW5jdGlvbihlKXtyZXR1cm4gdD09PWUuZWxlbX0pLmxlbmd0aH0sUy5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGw9Uy5jc3MoZSxcInBvc2l0aW9uXCIpLGM9UyhlKSxmPXt9O1wic3RhdGljXCI9PT1sJiYoZS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLHM9Yy5vZmZzZXQoKSxvPVMuY3NzKGUsXCJ0b3BcIiksdT1TLmNzcyhlLFwibGVmdFwiKSwoXCJhYnNvbHV0ZVwiPT09bHx8XCJmaXhlZFwiPT09bCkmJi0xPChvK3UpLmluZGV4T2YoXCJhdXRvXCIpPyhhPShyPWMucG9zaXRpb24oKSkudG9wLGk9ci5sZWZ0KTooYT1wYXJzZUZsb2F0KG8pfHwwLGk9cGFyc2VGbG9hdCh1KXx8MCksbSh0KSYmKHQ9dC5jYWxsKGUsbixTLmV4dGVuZCh7fSxzKSkpLG51bGwhPXQudG9wJiYoZi50b3A9dC50b3Atcy50b3ArYSksbnVsbCE9dC5sZWZ0JiYoZi5sZWZ0PXQubGVmdC1zLmxlZnQraSksXCJ1c2luZ1wiaW4gdD90LnVzaW5nLmNhbGwoZSxmKTooXCJudW1iZXJcIj09dHlwZW9mIGYudG9wJiYoZi50b3ArPVwicHhcIiksXCJudW1iZXJcIj09dHlwZW9mIGYubGVmdCYmKGYubGVmdCs9XCJweFwiKSxjLmNzcyhmKSl9fSxTLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKHQpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PXQ/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oZSl7Uy5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsdCxlKX0pO3ZhciBlLG4scj10aGlzWzBdO3JldHVybiByP3IuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg/KGU9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXIub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldyx7dG9wOmUudG9wK24ucGFnZVlPZmZzZXQsbGVmdDplLmxlZnQrbi5wYWdlWE9mZnNldH0pOnt0b3A6MCxsZWZ0OjB9OnZvaWQgMH0scG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgZSx0LG4scj10aGlzWzBdLGk9e3RvcDowLGxlZnQ6MH07aWYoXCJmaXhlZFwiPT09Uy5jc3MocixcInBvc2l0aW9uXCIpKXQ9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtlbHNle3Q9dGhpcy5vZmZzZXQoKSxuPXIub3duZXJEb2N1bWVudCxlPXIub2Zmc2V0UGFyZW50fHxuLmRvY3VtZW50RWxlbWVudDt3aGlsZShlJiYoZT09PW4uYm9keXx8ZT09PW4uZG9jdW1lbnRFbGVtZW50KSYmXCJzdGF0aWNcIj09PVMuY3NzKGUsXCJwb3NpdGlvblwiKSllPWUucGFyZW50Tm9kZTtlJiZlIT09ciYmMT09PWUubm9kZVR5cGUmJigoaT1TKGUpLm9mZnNldCgpKS50b3ArPVMuY3NzKGUsXCJib3JkZXJUb3BXaWR0aFwiLCEwKSxpLmxlZnQrPVMuY3NzKGUsXCJib3JkZXJMZWZ0V2lkdGhcIiwhMCkpfXJldHVybnt0b3A6dC50b3AtaS50b3AtUy5jc3MocixcIm1hcmdpblRvcFwiLCEwKSxsZWZ0OnQubGVmdC1pLmxlZnQtUy5jc3MocixcIm1hcmdpbkxlZnRcIiwhMCl9fX0sb2Zmc2V0UGFyZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vZmZzZXRQYXJlbnQ7d2hpbGUoZSYmXCJzdGF0aWNcIj09PVMuY3NzKGUsXCJwb3NpdGlvblwiKSllPWUub2Zmc2V0UGFyZW50O3JldHVybiBlfHxyZX0pfX0pLFMuZWFjaCh7c2Nyb2xsTGVmdDpcInBhZ2VYT2Zmc2V0XCIsc2Nyb2xsVG9wOlwicGFnZVlPZmZzZXRcIn0sZnVuY3Rpb24odCxpKXt2YXIgbz1cInBhZ2VZT2Zmc2V0XCI9PT1pO1MuZm5bdF09ZnVuY3Rpb24oZSl7cmV0dXJuICQodGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoeChlKT9yPWU6OT09PWUubm9kZVR5cGUmJihyPWUuZGVmYXVsdFZpZXcpLHZvaWQgMD09PW4pcmV0dXJuIHI/cltpXTplW3RdO3I/ci5zY3JvbGxUbyhvP3IucGFnZVhPZmZzZXQ6bixvP246ci5wYWdlWU9mZnNldCk6ZVt0XT1ufSx0LGUsYXJndW1lbnRzLmxlbmd0aCl9fSksUy5lYWNoKFtcInRvcFwiLFwibGVmdFwiXSxmdW5jdGlvbihlLG4pe1MuY3NzSG9va3Nbbl09JGUoeS5waXhlbFBvc2l0aW9uLGZ1bmN0aW9uKGUsdCl7aWYodClyZXR1cm4gdD1CZShlLG4pLE1lLnRlc3QodCk/UyhlKS5wb3NpdGlvbigpW25dK1wicHhcIjp0fSl9KSxTLmVhY2goe0hlaWdodDpcImhlaWdodFwiLFdpZHRoOlwid2lkdGhcIn0sZnVuY3Rpb24oYSxzKXtTLmVhY2goe3BhZGRpbmc6XCJpbm5lclwiK2EsY29udGVudDpzLFwiXCI6XCJvdXRlclwiK2F9LGZ1bmN0aW9uKHIsbyl7Uy5mbltvXT1mdW5jdGlvbihlLHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGgmJihyfHxcImJvb2xlYW5cIiE9dHlwZW9mIGUpLGk9cnx8KCEwPT09ZXx8ITA9PT10P1wibWFyZ2luXCI6XCJib3JkZXJcIik7cmV0dXJuICQodGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHI7cmV0dXJuIHgoZSk/MD09PW8uaW5kZXhPZihcIm91dGVyXCIpP2VbXCJpbm5lclwiK2FdOmUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W1wiY2xpZW50XCIrYV06OT09PWUubm9kZVR5cGU/KHI9ZS5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgoZS5ib2R5W1wic2Nyb2xsXCIrYV0scltcInNjcm9sbFwiK2FdLGUuYm9keVtcIm9mZnNldFwiK2FdLHJbXCJvZmZzZXRcIithXSxyW1wiY2xpZW50XCIrYV0pKTp2b2lkIDA9PT1uP1MuY3NzKGUsdCxpKTpTLnN0eWxlKGUsdCxuLGkpfSxzLG4/ZTp2b2lkIDAsbil9fSl9KSxTLmVhY2goW1wiYWpheFN0YXJ0XCIsXCJhamF4U3RvcFwiLFwiYWpheENvbXBsZXRlXCIsXCJhamF4RXJyb3JcIixcImFqYXhTdWNjZXNzXCIsXCJhamF4U2VuZFwiXSxmdW5jdGlvbihlLHQpe1MuZm5bdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMub24odCxlKX19KSxTLmZuLmV4dGVuZCh7YmluZDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMub24oZSxudWxsLHQsbil9LHVuYmluZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm9mZihlLG51bGwsdCl9LGRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLm9uKHQsZSxuLHIpfSx1bmRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vZmYoZSxcIioqXCIpOnRoaXMub2ZmKHQsZXx8XCIqKlwiLG4pfSxob3ZlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoZSkubW91c2VsZWF2ZSh0fHxlKX19KSxTLmVhY2goXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGUsbil7Uy5mbltuXT1mdW5jdGlvbihlLHQpe3JldHVybiAwPGFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vbihuLG51bGwsZSx0KTp0aGlzLnRyaWdnZXIobil9fSk7dmFyIEd0PS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztTLnByb3h5PWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYobj1lW3RdLHQ9ZSxlPW4pLG0oZSkpcmV0dXJuIHI9cy5jYWxsKGFyZ3VtZW50cywyKSwoaT1mdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHR8fHRoaXMsci5jb25jYXQocy5jYWxsKGFyZ3VtZW50cykpKX0pLmd1aWQ9ZS5ndWlkPWUuZ3VpZHx8Uy5ndWlkKyssaX0sUy5ob2xkUmVhZHk9ZnVuY3Rpb24oZSl7ZT9TLnJlYWR5V2FpdCsrOlMucmVhZHkoITApfSxTLmlzQXJyYXk9QXJyYXkuaXNBcnJheSxTLnBhcnNlSlNPTj1KU09OLnBhcnNlLFMubm9kZU5hbWU9QSxTLmlzRnVuY3Rpb249bSxTLmlzV2luZG93PXgsUy5jYW1lbENhc2U9WCxTLnR5cGU9dyxTLm5vdz1EYXRlLm5vdyxTLmlzTnVtZXJpYz1mdW5jdGlvbihlKXt2YXIgdD1TLnR5cGUoZSk7cmV0dXJuKFwibnVtYmVyXCI9PT10fHxcInN0cmluZ1wiPT09dCkmJiFpc05hTihlLXBhcnNlRmxvYXQoZSkpfSxTLnRyaW09ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/XCJcIjooZStcIlwiKS5yZXBsYWNlKEd0LFwiXCIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZShcImpxdWVyeVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIFN9KTt2YXIgWXQ9Qy5qUXVlcnksUXQ9Qy4kO3JldHVybiBTLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIEMuJD09PVMmJihDLiQ9UXQpLGUmJkMualF1ZXJ5PT09UyYmKEMualF1ZXJ5PVl0KSxTfSxcInVuZGVmaW5lZFwiPT10eXBlb2YgZSYmKEMualF1ZXJ5PUMuJD1TKSxTfSk7XG4iLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTp0LlN3ZWV0YWxlcnQyPWUoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIodCl7cmV0dXJuKHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0pKHQpfWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGkodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIG89ZVtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsby5rZXksbyl9fWZ1bmN0aW9uIGEodCxlLG4pe3JldHVybiBlJiZpKHQucHJvdG90eXBlLGUpLG4mJmkodCxuKSx0fWZ1bmN0aW9uIHMoKXtyZXR1cm4ocz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgbj1hcmd1bWVudHNbZV07Zm9yKHZhciBvIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sbykmJih0W29dPW5bb10pfXJldHVybiB0fSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIHUodCl7cmV0dXJuKHU9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0pKHQpfWZ1bmN0aW9uIGModCxlKXtyZXR1cm4oYz1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0pKHQsZSl9ZnVuY3Rpb24gbCh0LGUsbil7cmV0dXJuKGw9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpP1JlZmxlY3QuY29uc3RydWN0OmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1bbnVsbF07by5wdXNoLmFwcGx5KG8sZSk7dmFyIGk9bmV3KEZ1bmN0aW9uLmJpbmQuYXBwbHkodCxvKSk7cmV0dXJuIG4mJmMoaSxuLnByb3RvdHlwZSksaX0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX1mdW5jdGlvbiBkKHQsZSl7cmV0dXJuIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlP2Z1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KTplfWZ1bmN0aW9uIHAodCxlLG4pe3JldHVybihwPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmdldD9SZWZsZWN0LmdldDpmdW5jdGlvbih0LGUsbil7dmFyIG89ZnVuY3Rpb24odCxlKXtmb3IoOyFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKSYmbnVsbCE9PSh0PXUodCkpOyk7cmV0dXJuIHR9KHQsZSk7aWYobyl7dmFyIGk9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLGUpO3JldHVybiBpLmdldD9pLmdldC5jYWxsKG4pOmkudmFsdWV9fSkodCxlLG58fHQpfWZ1bmN0aW9uIGYoZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pfWZ1bmN0aW9uIG0odCl7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQpfWZ1bmN0aW9uIGcodCl7Y29uc29sZS5lcnJvcihcIlwiLmNvbmNhdChlLFwiIFwiKS5jb25jYXQodCkpfWZ1bmN0aW9uIGgodCxlKXshZnVuY3Rpb24odCl7LTE9PT1uLmluZGV4T2YodCkmJihuLnB1c2godCksdyh0KSl9KCdcIicuY29uY2F0KHQsJ1wiIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBQbGVhc2UgdXNlIFwiJykuY29uY2F0KGUsJ1wiIGluc3RlYWQuJykpfWZ1bmN0aW9uIHYodCl7cmV0dXJuIHQmJlByb21pc2UucmVzb2x2ZSh0KT09PXR9ZnVuY3Rpb24gdCh0KXt2YXIgZT17fTtmb3IodmFyIG4gaW4gdCllW3Rbbl1dPVwic3dhbDItXCIrdFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBiKHQsZSl7cmV0dXJuIHQuY2xhc3NMaXN0LmNvbnRhaW5zKGUpfWZ1bmN0aW9uIHkodCxlLG4pe2lmKGZ1bmN0aW9uKGUpe20oZS5jbGFzc0xpc3QpLmZvckVhY2goZnVuY3Rpb24odCl7LTE9PT1mKHgpLmluZGV4T2YodCkmJi0xPT09ZihTKS5pbmRleE9mKHQpJiZlLmNsYXNzTGlzdC5yZW1vdmUodCl9KX0odCksZSYmZVtuXSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGVbbl0mJiFlW25dLmZvckVhY2gpcmV0dXJuIHcoXCJJbnZhbGlkIHR5cGUgb2YgY3VzdG9tQ2xhc3MuXCIuY29uY2F0KG4sJyEgRXhwZWN0ZWQgc3RyaW5nIG9yIGl0ZXJhYmxlIG9iamVjdCwgZ290IFwiJykuY29uY2F0KHIoZVtuXSksJ1wiJykpO3J0KHQsZVtuXSl9fXZhciBlPVwiU3dlZXRBbGVydDI6XCIsdz1mdW5jdGlvbih0KXtjb25zb2xlLndhcm4oXCJcIi5jb25jYXQoZSxcIiBcIikuY29uY2F0KHQpKX0sbj1bXSxDPWZ1bmN0aW9uKHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dCgpOnR9LGs9T2JqZWN0LmZyZWV6ZSh7Y2FuY2VsOlwiY2FuY2VsXCIsYmFja2Ryb3A6XCJiYWNrZHJvcFwiLGNsb3NlOlwiY2xvc2VcIixlc2M6XCJlc2NcIix0aW1lcjpcInRpbWVyXCJ9KSx4PXQoW1wiY29udGFpbmVyXCIsXCJzaG93blwiLFwiaGVpZ2h0LWF1dG9cIixcImlvc2ZpeFwiLFwicG9wdXBcIixcIm1vZGFsXCIsXCJuby1iYWNrZHJvcFwiLFwidG9hc3RcIixcInRvYXN0LXNob3duXCIsXCJ0b2FzdC1jb2x1bW5cIixcInNob3dcIixcImhpZGVcIixcIm5vYW5pbWF0aW9uXCIsXCJjbG9zZVwiLFwidGl0bGVcIixcImhlYWRlclwiLFwiY29udGVudFwiLFwiYWN0aW9uc1wiLFwiY29uZmlybVwiLFwiY2FuY2VsXCIsXCJmb290ZXJcIixcImljb25cIixcImltYWdlXCIsXCJpbnB1dFwiLFwiZmlsZVwiLFwicmFuZ2VcIixcInNlbGVjdFwiLFwicmFkaW9cIixcImNoZWNrYm94XCIsXCJsYWJlbFwiLFwidGV4dGFyZWFcIixcImlucHV0ZXJyb3JcIixcInZhbGlkYXRpb24tbWVzc2FnZVwiLFwicHJvZ3Jlc3Mtc3RlcHNcIixcImFjdGl2ZS1wcm9ncmVzcy1zdGVwXCIsXCJwcm9ncmVzcy1zdGVwXCIsXCJwcm9ncmVzcy1zdGVwLWxpbmVcIixcImxvYWRpbmdcIixcInN0eWxlZFwiLFwidG9wXCIsXCJ0b3Atc3RhcnRcIixcInRvcC1lbmRcIixcInRvcC1sZWZ0XCIsXCJ0b3AtcmlnaHRcIixcImNlbnRlclwiLFwiY2VudGVyLXN0YXJ0XCIsXCJjZW50ZXItZW5kXCIsXCJjZW50ZXItbGVmdFwiLFwiY2VudGVyLXJpZ2h0XCIsXCJib3R0b21cIixcImJvdHRvbS1zdGFydFwiLFwiYm90dG9tLWVuZFwiLFwiYm90dG9tLWxlZnRcIixcImJvdHRvbS1yaWdodFwiLFwiZ3Jvdy1yb3dcIixcImdyb3ctY29sdW1uXCIsXCJncm93LWZ1bGxzY3JlZW5cIixcInJ0bFwiXSksUz10KFtcInN1Y2Nlc3NcIixcIndhcm5pbmdcIixcImluZm9cIixcInF1ZXN0aW9uXCIsXCJlcnJvclwiXSksUD17cHJldmlvdXNCb2R5UGFkZGluZzpudWxsfTtmdW5jdGlvbiBCKHQsZSl7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGUpe2Nhc2VcInNlbGVjdFwiOmNhc2VcInRleHRhcmVhXCI6Y2FzZVwiZmlsZVwiOnJldHVybiBzdCh0LHhbZV0pO2Nhc2VcImNoZWNrYm94XCI6cmV0dXJuIHQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoeC5jaGVja2JveCxcIiBpbnB1dFwiKSk7Y2FzZVwicmFkaW9cIjpyZXR1cm4gdC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdCh4LnJhZGlvLFwiIGlucHV0OmNoZWNrZWRcIikpfHx0LnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KHgucmFkaW8sXCIgaW5wdXQ6Zmlyc3QtY2hpbGRcIikpO2Nhc2VcInJhbmdlXCI6cmV0dXJuIHQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoeC5yYW5nZSxcIiBpbnB1dFwiKSk7ZGVmYXVsdDpyZXR1cm4gc3QodCx4LmlucHV0KX19ZnVuY3Rpb24gQSh0KXtpZih0LmZvY3VzKCksXCJmaWxlXCIhPT10LnR5cGUpe3ZhciBlPXQudmFsdWU7dC52YWx1ZT1cIlwiLHQudmFsdWU9ZX19ZnVuY3Rpb24gRSh0LGUsbil7dCYmZSYmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1lLnNwbGl0KC9cXHMrLykuZmlsdGVyKEJvb2xlYW4pKSxlLmZvckVhY2goZnVuY3Rpb24oZSl7dC5mb3JFYWNoP3QuZm9yRWFjaChmdW5jdGlvbih0KXtuP3QuY2xhc3NMaXN0LmFkZChlKTp0LmNsYXNzTGlzdC5yZW1vdmUoZSl9KTpuP3QuY2xhc3NMaXN0LmFkZChlKTp0LmNsYXNzTGlzdC5yZW1vdmUoZSl9KSl9ZnVuY3Rpb24gVCh0LGUsbil7bnx8MD09PXBhcnNlSW50KG4pP3Quc3R5bGVbZV09XCJudW1iZXJcIj09dHlwZW9mIG4/bitcInB4XCI6bjp0LnN0eWxlLnJlbW92ZVByb3BlcnR5KGUpfWZ1bmN0aW9uIEwodCxlKXt2YXIgbj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWU/ZTpcImZsZXhcIjt0LnN0eWxlLm9wYWNpdHk9XCJcIix0LnN0eWxlLmRpc3BsYXk9bn1mdW5jdGlvbiBPKHQpe3Quc3R5bGUub3BhY2l0eT1cIlwiLHQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn1mdW5jdGlvbiBNKHQsZSxuKXtlP0wodCxuKTpPKHQpfWZ1bmN0aW9uIFYodCl7cmV0dXJuISghdHx8ISh0Lm9mZnNldFdpZHRofHx0Lm9mZnNldEhlaWdodHx8dC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkpfWZ1bmN0aW9uIGoodCl7dmFyIGU9d2luZG93LmdldENvbXB1dGVkU3R5bGUodCksbj1wYXJzZUZsb2F0KGUuZ2V0UHJvcGVydHlWYWx1ZShcImFuaW1hdGlvbi1kdXJhdGlvblwiKXx8XCIwXCIpLG89cGFyc2VGbG9hdChlLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIpfHxcIjBcIik7cmV0dXJuIDA8bnx8MDxvfWZ1bmN0aW9uIEgoKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiLlwiK3guY29udGFpbmVyKX1mdW5jdGlvbiBJKHQpe3ZhciBlPUgoKTtyZXR1cm4gZT9lLnF1ZXJ5U2VsZWN0b3IodCk6bnVsbH1mdW5jdGlvbiBxKHQpe3JldHVybiBJKFwiLlwiK3QpfWZ1bmN0aW9uIFIoKXtyZXR1cm4gcSh4LnBvcHVwKX1mdW5jdGlvbiBEKCl7dmFyIHQ9UigpO3JldHVybiBtKHQucXVlcnlTZWxlY3RvckFsbChcIi5cIit4Lmljb24pKX1mdW5jdGlvbiBOKCl7dmFyIHQ9RCgpLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gVih0KX0pO3JldHVybiB0Lmxlbmd0aD90WzBdOm51bGx9ZnVuY3Rpb24gVSgpe3JldHVybiBxKHgudGl0bGUpfWZ1bmN0aW9uIEYoKXtyZXR1cm4gcSh4LmNvbnRlbnQpfWZ1bmN0aW9uIF8oKXtyZXR1cm4gcSh4LmltYWdlKX1mdW5jdGlvbiB6KCl7cmV0dXJuIHEoeFtcInByb2dyZXNzLXN0ZXBzXCJdKX1mdW5jdGlvbiBXKCl7cmV0dXJuIHEoeFtcInZhbGlkYXRpb24tbWVzc2FnZVwiXSl9ZnVuY3Rpb24gSygpe3JldHVybiBJKFwiLlwiK3guYWN0aW9ucytcIiAuXCIreC5jb25maXJtKX1mdW5jdGlvbiBZKCl7cmV0dXJuIEkoXCIuXCIreC5hY3Rpb25zK1wiIC5cIit4LmNhbmNlbCl9ZnVuY3Rpb24gWigpe3JldHVybiBxKHguYWN0aW9ucyl9ZnVuY3Rpb24gUSgpe3JldHVybiBxKHguaGVhZGVyKX1mdW5jdGlvbiAkKCl7cmV0dXJuIHEoeC5mb290ZXIpfWZ1bmN0aW9uIEooKXtyZXR1cm4gcSh4LmNsb3NlKX1mdW5jdGlvbiBYKCl7dmFyIHQ9bShSKCkucXVlcnlTZWxlY3RvckFsbCgnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVwiLTFcIl0pOm5vdChbdGFiaW5kZXg9XCIwXCJdKScpKS5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9cGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSksKGU9cGFyc2VJbnQoZS5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSkpPHQ/MTp0PGU/LTE6MH0pLGU9bShSKCkucXVlcnlTZWxlY3RvckFsbCgnXFxuICBhW2hyZWZdLFxcbiAgYXJlYVtocmVmXSxcXG4gIGlucHV0Om5vdChbZGlzYWJsZWRdKSxcXG4gIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksXFxuICB0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSksXFxuICBidXR0b246bm90KFtkaXNhYmxlZF0pLFxcbiAgaWZyYW1lLFxcbiAgb2JqZWN0LFxcbiAgZW1iZWQsXFxuICBbdGFiaW5kZXg9XCIwXCJdLFxcbiAgW2NvbnRlbnRlZGl0YWJsZV0sXFxuICBhdWRpb1tjb250cm9sc10sXFxuICB2aWRlb1tjb250cm9sc10sXFxuICBzdW1tYXJ5XFxuJykpLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm5cIi0xXCIhPT10LmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpfSk7cmV0dXJuIGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0Lmxlbmd0aDtuKyspLTE9PT1lLmluZGV4T2YodFtuXSkmJmUucHVzaCh0W25dKTtyZXR1cm4gZX0odC5jb25jYXQoZSkpLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gVih0KX0pfWZ1bmN0aW9uIEcoKXtyZXR1cm4hdXQoKSYmIWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKHhbXCJuby1iYWNrZHJvcFwiXSl9ZnVuY3Rpb24gdHQoKXtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT10eXBlb2YgZG9jdW1lbnR9ZnVuY3Rpb24gZXQodCl7RmUuaXNWaXNpYmxlKCkmJml0IT09dC50YXJnZXQudmFsdWUmJkZlLnJlc2V0VmFsaWRhdGlvbk1lc3NhZ2UoKSxpdD10LnRhcmdldC52YWx1ZX1mdW5jdGlvbiBudCh0LGUpe3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudD9lLmFwcGVuZENoaWxkKHQpOlwib2JqZWN0XCI9PT1yKHQpP2R0KGUsdCk6dCYmKGUuaW5uZXJIVE1MPXQpfWZ1bmN0aW9uIG90KHQsZSl7dmFyIG49WigpLG89SygpLGk9WSgpO2Uuc2hvd0NvbmZpcm1CdXR0b258fGUuc2hvd0NhbmNlbEJ1dHRvbnx8TyhuKSx5KG4sZS5jdXN0b21DbGFzcyxcImFjdGlvbnNcIiksZnQobyxcImNvbmZpcm1cIixlKSxmdChpLFwiY2FuY2VsXCIsZSksZS5idXR0b25zU3R5bGluZz9mdW5jdGlvbih0LGUsbil7cnQoW3QsZV0seC5zdHlsZWQpLG4uY29uZmlybUJ1dHRvbkNvbG9yJiYodC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9bi5jb25maXJtQnV0dG9uQ29sb3IpO24uY2FuY2VsQnV0dG9uQ29sb3ImJihlLnN0eWxlLmJhY2tncm91bmRDb2xvcj1uLmNhbmNlbEJ1dHRvbkNvbG9yKTt2YXIgbz13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KS5nZXRQcm9wZXJ0eVZhbHVlKFwiYmFja2dyb3VuZC1jb2xvclwiKTt0LnN0eWxlLmJvcmRlckxlZnRDb2xvcj1vLHQuc3R5bGUuYm9yZGVyUmlnaHRDb2xvcj1vfShvLGksZSk6KGF0KFtvLGldLHguc3R5bGVkKSxvLnN0eWxlLmJhY2tncm91bmRDb2xvcj1vLnN0eWxlLmJvcmRlckxlZnRDb2xvcj1vLnN0eWxlLmJvcmRlclJpZ2h0Q29sb3I9XCJcIixpLnN0eWxlLmJhY2tncm91bmRDb2xvcj1pLnN0eWxlLmJvcmRlckxlZnRDb2xvcj1pLnN0eWxlLmJvcmRlclJpZ2h0Q29sb3I9XCJcIiksZS5yZXZlcnNlQnV0dG9ucyYmby5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpLG8pfXZhciBpdCxydD1mdW5jdGlvbih0LGUpe0UodCxlLCEwKX0sYXQ9ZnVuY3Rpb24odCxlKXtFKHQsZSwhMSl9LHN0PWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0LmNoaWxkTm9kZXMubGVuZ3RoO24rKylpZihiKHQuY2hpbGROb2Rlc1tuXSxlKSlyZXR1cm4gdC5jaGlsZE5vZGVzW25dfSx1dD1mdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyh4W1widG9hc3Qtc2hvd25cIl0pfSxjdD0nXFxuIDxkaXYgYXJpYS1sYWJlbGxlZGJ5PVwiJy5jb25jYXQoeC50aXRsZSwnXCIgYXJpYS1kZXNjcmliZWRieT1cIicpLmNvbmNhdCh4LmNvbnRlbnQsJ1wiIGNsYXNzPVwiJykuY29uY2F0KHgucG9wdXAsJ1wiIHRhYmluZGV4PVwiLTFcIj5cXG4gICA8ZGl2IGNsYXNzPVwiJykuY29uY2F0KHguaGVhZGVyLCdcIj5cXG4gICAgIDx1bCBjbGFzcz1cIicpLmNvbmNhdCh4W1wicHJvZ3Jlc3Mtc3RlcHNcIl0sJ1wiPjwvdWw+XFxuICAgICA8ZGl2IGNsYXNzPVwiJykuY29uY2F0KHguaWNvbixcIiBcIikuY29uY2F0KFMuZXJyb3IsJ1wiPlxcbiAgICAgICA8c3BhbiBjbGFzcz1cInN3YWwyLXgtbWFya1wiPjxzcGFuIGNsYXNzPVwic3dhbDIteC1tYXJrLWxpbmUtbGVmdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cInN3YWwyLXgtbWFyay1saW5lLXJpZ2h0XCI+PC9zcGFuPjwvc3Bhbj5cXG4gICAgIDwvZGl2PlxcbiAgICAgPGRpdiBjbGFzcz1cIicpLmNvbmNhdCh4Lmljb24sXCIgXCIpLmNvbmNhdChTLnF1ZXN0aW9uLCdcIj48L2Rpdj5cXG4gICAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoeC5pY29uLFwiIFwiKS5jb25jYXQoUy53YXJuaW5nLCdcIj48L2Rpdj5cXG4gICAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoeC5pY29uLFwiIFwiKS5jb25jYXQoUy5pbmZvLCdcIj48L2Rpdj5cXG4gICAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoeC5pY29uLFwiIFwiKS5jb25jYXQoUy5zdWNjZXNzLCdcIj5cXG4gICAgICAgPGRpdiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZS1sZWZ0XCI+PC9kaXY+XFxuICAgICAgIDxzcGFuIGNsYXNzPVwic3dhbDItc3VjY2Vzcy1saW5lLXRpcFwiPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJzd2FsMi1zdWNjZXNzLWxpbmUtbG9uZ1wiPjwvc3Bhbj5cXG4gICAgICAgPGRpdiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtcmluZ1wiPjwvZGl2PiA8ZGl2IGNsYXNzPVwic3dhbDItc3VjY2Vzcy1maXhcIj48L2Rpdj5cXG4gICAgICAgPGRpdiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZS1yaWdodFwiPjwvZGl2PlxcbiAgICAgPC9kaXY+XFxuICAgICA8aW1nIGNsYXNzPVwiJykuY29uY2F0KHguaW1hZ2UsJ1wiIC8+XFxuICAgICA8aDIgY2xhc3M9XCInKS5jb25jYXQoeC50aXRsZSwnXCIgaWQ9XCInKS5jb25jYXQoeC50aXRsZSwnXCI+PC9oMj5cXG4gICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJykuY29uY2F0KHguY2xvc2UsJ1wiPjwvYnV0dG9uPlxcbiAgIDwvZGl2PlxcbiAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoeC5jb250ZW50LCdcIj5cXG4gICAgIDxkaXYgaWQ9XCInKS5jb25jYXQoeC5jb250ZW50LCdcIj48L2Rpdj5cXG4gICAgIDxpbnB1dCBjbGFzcz1cIicpLmNvbmNhdCh4LmlucHV0LCdcIiAvPlxcbiAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgY2xhc3M9XCInKS5jb25jYXQoeC5maWxlLCdcIiAvPlxcbiAgICAgPGRpdiBjbGFzcz1cIicpLmNvbmNhdCh4LnJhbmdlLCdcIj5cXG4gICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIC8+XFxuICAgICAgIDxvdXRwdXQ+PC9vdXRwdXQ+XFxuICAgICA8L2Rpdj5cXG4gICAgIDxzZWxlY3QgY2xhc3M9XCInKS5jb25jYXQoeC5zZWxlY3QsJ1wiPjwvc2VsZWN0PlxcbiAgICAgPGRpdiBjbGFzcz1cIicpLmNvbmNhdCh4LnJhZGlvLCdcIj48L2Rpdj5cXG4gICAgIDxsYWJlbCBmb3I9XCInKS5jb25jYXQoeC5jaGVja2JveCwnXCIgY2xhc3M9XCInKS5jb25jYXQoeC5jaGVja2JveCwnXCI+XFxuICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiAvPlxcbiAgICAgICA8c3BhbiBjbGFzcz1cIicpLmNvbmNhdCh4LmxhYmVsLCdcIj48L3NwYW4+XFxuICAgICA8L2xhYmVsPlxcbiAgICAgPHRleHRhcmVhIGNsYXNzPVwiJykuY29uY2F0KHgudGV4dGFyZWEsJ1wiPjwvdGV4dGFyZWE+XFxuICAgICA8ZGl2IGNsYXNzPVwiJykuY29uY2F0KHhbXCJ2YWxpZGF0aW9uLW1lc3NhZ2VcIl0sJ1wiIGlkPVwiJykuY29uY2F0KHhbXCJ2YWxpZGF0aW9uLW1lc3NhZ2VcIl0sJ1wiPjwvZGl2PlxcbiAgIDwvZGl2PlxcbiAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoeC5hY3Rpb25zLCdcIj5cXG4gICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJykuY29uY2F0KHguY29uZmlybSwnXCI+T0s8L2J1dHRvbj5cXG4gICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJykuY29uY2F0KHguY2FuY2VsLCdcIj5DYW5jZWw8L2J1dHRvbj5cXG4gICA8L2Rpdj5cXG4gICA8ZGl2IGNsYXNzPVwiJykuY29uY2F0KHguZm9vdGVyLCdcIj5cXG4gICA8L2Rpdj5cXG4gPC9kaXY+XFxuJykucmVwbGFjZSgvKF58XFxuKVxccyovZyxcIlwiKSxsdD1mdW5jdGlvbih0KXtpZihmdW5jdGlvbigpe3ZhciB0PUgoKTt0JiYodC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpLGF0KFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsZG9jdW1lbnQuYm9keV0sW3hbXCJuby1iYWNrZHJvcFwiXSx4W1widG9hc3Qtc2hvd25cIl0seFtcImhhcy1jb2x1bW5cIl1dKSl9KCksdHQoKSlnKFwiU3dlZXRBbGVydDIgcmVxdWlyZXMgZG9jdW1lbnQgdG8gaW5pdGlhbGl6ZVwiKTtlbHNle3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5jbGFzc05hbWU9eC5jb250YWluZXIsZS5pbm5lckhUTUw9Y3Q7dmFyIG49ZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTp0fSh0LnRhcmdldCk7bi5hcHBlbmRDaGlsZChlKSxmdW5jdGlvbih0KXt2YXIgZT1SKCk7ZS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsdC50b2FzdD9cImFsZXJ0XCI6XCJkaWFsb2dcIiksZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIix0LnRvYXN0P1wicG9saXRlXCI6XCJhc3NlcnRpdmVcIiksdC50b2FzdHx8ZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsXCJ0cnVlXCIpfSh0KSxmdW5jdGlvbih0KXtcInJ0bFwiPT09d2luZG93LmdldENvbXB1dGVkU3R5bGUodCkuZGlyZWN0aW9uJiZydChIKCkseC5ydGwpfShuKSxmdW5jdGlvbigpe3ZhciB0PUYoKSxlPXN0KHQseC5pbnB1dCksbj1zdCh0LHguZmlsZSksbz10LnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KHgucmFuZ2UsXCIgaW5wdXRcIikpLGk9dC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdCh4LnJhbmdlLFwiIG91dHB1dFwiKSkscj1zdCh0LHguc2VsZWN0KSxhPXQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoeC5jaGVja2JveCxcIiBpbnB1dFwiKSkscz1zdCh0LHgudGV4dGFyZWEpO2Uub25pbnB1dD1ldCxuLm9uY2hhbmdlPWV0LHIub25jaGFuZ2U9ZXQsYS5vbmNoYW5nZT1ldCxzLm9uaW5wdXQ9ZXQsby5vbmlucHV0PWZ1bmN0aW9uKHQpe2V0KHQpLGkudmFsdWU9by52YWx1ZX0sby5vbmNoYW5nZT1mdW5jdGlvbih0KXtldCh0KSxvLm5leHRTaWJsaW5nLnZhbHVlPW8udmFsdWV9fSgpfX0sZHQ9ZnVuY3Rpb24odCxlKXtpZih0LmlubmVySFRNTD1cIlwiLDAgaW4gZSlmb3IodmFyIG49MDtuIGluIGU7bisrKXQuYXBwZW5kQ2hpbGQoZVtuXS5jbG9uZU5vZGUoITApKTtlbHNlIHQuYXBwZW5kQ2hpbGQoZS5jbG9uZU5vZGUoITApKX0scHQ9ZnVuY3Rpb24oKXtpZih0dCgpKXJldHVybiExO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZT17V2Via2l0QW5pbWF0aW9uOlwid2Via2l0QW5pbWF0aW9uRW5kXCIsT0FuaW1hdGlvbjpcIm9BbmltYXRpb25FbmQgb2FuaW1hdGlvbmVuZFwiLGFuaW1hdGlvbjpcImFuaW1hdGlvbmVuZFwifTtmb3IodmFyIG4gaW4gZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmdm9pZCAwIT09dC5zdHlsZVtuXSlyZXR1cm4gZVtuXTtyZXR1cm4hMX0oKTtmdW5jdGlvbiBmdCh0LGUsbil7TSh0LG5bXCJzaG93Q1wiK2Uuc3Vic3RyaW5nKDEpK1wiQnV0dG9uXCJdLFwiaW5saW5lLWJsb2NrXCIpLHQuaW5uZXJIVE1MPW5bZStcIkJ1dHRvblRleHRcIl0sdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsbltlK1wiQnV0dG9uQXJpYUxhYmVsXCJdKSx0LmNsYXNzTmFtZT14W2VdLHkodCxuLmN1c3RvbUNsYXNzLGUrXCJCdXR0b25cIikscnQodCxuW2UrXCJCdXR0b25DbGFzc1wiXSl9ZnVuY3Rpb24gbXQodCxlKXt2YXIgbj1IKCk7biYmKGZ1bmN0aW9uKHQsZSl7XCJzdHJpbmdcIj09dHlwZW9mIGU/dC5zdHlsZS5iYWNrZ3JvdW5kPWU6ZXx8cnQoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCxkb2N1bWVudC5ib2R5XSx4W1wibm8tYmFja2Ryb3BcIl0pfShuLGUuYmFja2Ryb3ApLCFlLmJhY2tkcm9wJiZlLmFsbG93T3V0c2lkZUNsaWNrJiZ3KCdcImFsbG93T3V0c2lkZUNsaWNrXCIgcGFyYW1ldGVyIHJlcXVpcmVzIGBiYWNrZHJvcGAgcGFyYW1ldGVyIHRvIGJlIHNldCB0byBgdHJ1ZWAnKSxmdW5jdGlvbih0LGUpe2UgaW4geD9ydCh0LHhbZV0pOih3KCdUaGUgXCJwb3NpdGlvblwiIHBhcmFtZXRlciBpcyBub3QgdmFsaWQsIGRlZmF1bHRpbmcgdG8gXCJjZW50ZXJcIicpLHJ0KHQseC5jZW50ZXIpKX0obixlLnBvc2l0aW9uKSxmdW5jdGlvbih0LGUpe2lmKGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgbj1cImdyb3ctXCIrZTtuIGluIHgmJnJ0KHQseFtuXSl9fShuLGUuZ3JvdykseShuLGUuY3VzdG9tQ2xhc3MsXCJjb250YWluZXJcIiksZS5jdXN0b21Db250YWluZXJDbGFzcyYmcnQobixlLmN1c3RvbUNvbnRhaW5lckNsYXNzKSl9ZnVuY3Rpb24gZ3QodCxlKXt0LnBsYWNlaG9sZGVyJiYhZS5pbnB1dFBsYWNlaG9sZGVyfHwodC5wbGFjZWhvbGRlcj1lLmlucHV0UGxhY2Vob2xkZXIpfXZhciBodD17cHJvbWlzZTpuZXcgV2Vha01hcCxpbm5lclBhcmFtczpuZXcgV2Vha01hcCxkb21DYWNoZTpuZXcgV2Vha01hcH0sdnQ9W1wiaW5wdXRcIixcImZpbGVcIixcInJhbmdlXCIsXCJzZWxlY3RcIixcInJhZGlvXCIsXCJjaGVja2JveFwiLFwidGV4dGFyZWFcIl0sYnQ9ZnVuY3Rpb24odCl7aWYoIWt0W3QuaW5wdXRdKXJldHVybiBnKCdVbmV4cGVjdGVkIHR5cGUgb2YgaW5wdXQhIEV4cGVjdGVkIFwidGV4dFwiLCBcImVtYWlsXCIsIFwicGFzc3dvcmRcIiwgXCJudW1iZXJcIiwgXCJ0ZWxcIiwgXCJzZWxlY3RcIiwgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIsIFwidGV4dGFyZWFcIiwgXCJmaWxlXCIgb3IgXCJ1cmxcIiwgZ290IFwiJy5jb25jYXQodC5pbnB1dCwnXCInKSk7dmFyIGU9Q3QodC5pbnB1dCksbj1rdFt0LmlucHV0XShlLHQpO0wobiksc2V0VGltZW91dChmdW5jdGlvbigpe0Eobil9KX0seXQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1CKEYoKSx0KTtpZihuKWZvcih2YXIgbyBpbiBmdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQuYXR0cmlidXRlcy5sZW5ndGg7ZSsrKXt2YXIgbj10LmF0dHJpYnV0ZXNbZV0ubmFtZTstMT09PVtcInR5cGVcIixcInZhbHVlXCIsXCJzdHlsZVwiXS5pbmRleE9mKG4pJiZ0LnJlbW92ZUF0dHJpYnV0ZShuKX19KG4pLGUpXCJyYW5nZVwiPT09dCYmXCJwbGFjZWhvbGRlclwiPT09b3x8bi5zZXRBdHRyaWJ1dGUobyxlW29dKX0sd3Q9ZnVuY3Rpb24odCl7dmFyIGU9Q3QodC5pbnB1dCk7dC5pbnB1dENsYXNzJiZydChlLHQuaW5wdXRDbGFzcyksdC5jdXN0b21DbGFzcyYmcnQoZSx0LmN1c3RvbUNsYXNzLmlucHV0KX0sQ3Q9ZnVuY3Rpb24odCl7dmFyIGU9eFt0XT94W3RdOnguaW5wdXQ7cmV0dXJuIHN0KEYoKSxlKX0sa3Q9e307a3QudGV4dD1rdC5lbWFpbD1rdC5wYXNzd29yZD1rdC5udW1iZXI9a3QudGVsPWt0LnVybD1mdW5jdGlvbih0LGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLmlucHV0VmFsdWV8fFwibnVtYmVyXCI9PXR5cGVvZiBlLmlucHV0VmFsdWU/dC52YWx1ZT1lLmlucHV0VmFsdWU6dihlLmlucHV0VmFsdWUpfHx3KCdVbmV4cGVjdGVkIHR5cGUgb2YgaW5wdXRWYWx1ZSEgRXhwZWN0ZWQgXCJzdHJpbmdcIiwgXCJudW1iZXJcIiBvciBcIlByb21pc2VcIiwgZ290IFwiJy5jb25jYXQocihlLmlucHV0VmFsdWUpLCdcIicpKSxndCh0LGUpLHQudHlwZT1lLmlucHV0LHR9LGt0LmZpbGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZ3QodCxlKSx0fSxrdC5yYW5nZT1mdW5jdGlvbih0LGUpe3ZhciBuPXQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpLG89dC5xdWVyeVNlbGVjdG9yKFwib3V0cHV0XCIpO3JldHVybiBuLnZhbHVlPWUuaW5wdXRWYWx1ZSxuLnR5cGU9ZS5pbnB1dCxvLnZhbHVlPWUuaW5wdXRWYWx1ZSx0fSxrdC5zZWxlY3Q9ZnVuY3Rpb24odCxlKXtpZih0LmlubmVySFRNTD1cIlwiLGUuaW5wdXRQbGFjZWhvbGRlcil7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtuLmlubmVySFRNTD1lLmlucHV0UGxhY2Vob2xkZXIsbi52YWx1ZT1cIlwiLG4uZGlzYWJsZWQ9ITAsbi5zZWxlY3RlZD0hMCx0LmFwcGVuZENoaWxkKG4pfXJldHVybiB0fSxrdC5yYWRpbz1mdW5jdGlvbih0KXtyZXR1cm4gdC5pbm5lckhUTUw9XCJcIix0fSxrdC5jaGVja2JveD1mdW5jdGlvbih0LGUpe3ZhciBuPUIoRigpLFwiY2hlY2tib3hcIik7cmV0dXJuIG4udmFsdWU9MSxuLmlkPXguY2hlY2tib3gsbi5jaGVja2VkPUJvb2xlYW4oZS5pbnB1dFZhbHVlKSx0LnF1ZXJ5U2VsZWN0b3IoXCJzcGFuXCIpLmlubmVySFRNTD1lLmlucHV0UGxhY2Vob2xkZXIsdH0sa3QudGV4dGFyZWE9ZnVuY3Rpb24oZSx0KXtpZihlLnZhbHVlPXQuaW5wdXRWYWx1ZSxndChlLHQpLFwiTXV0YXRpb25PYnNlcnZlclwiaW4gd2luZG93KXt2YXIgbj1wYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShSKCkpLndpZHRoKSxvPXBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKFIoKSkucGFkZGluZ0xlZnQpK3BhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKFIoKSkucGFkZGluZ1JpZ2h0KTtuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbigpe3ZhciB0PWUub2Zmc2V0V2lkdGgrbztSKCkuc3R5bGUud2lkdGg9bjx0P3QrXCJweFwiOm51bGx9KS5vYnNlcnZlKGUse2F0dHJpYnV0ZXM6ITAsYXR0cmlidXRlRmlsdGVyOltcInN0eWxlXCJdfSl9cmV0dXJuIGV9O2Z1bmN0aW9uIHh0KHQsZSl7dmFyIG49RigpLnF1ZXJ5U2VsZWN0b3IoXCIjXCIreC5jb250ZW50KTtlLmh0bWw/KG50KGUuaHRtbCxuKSxMKG4sXCJibG9ja1wiKSk6ZS50ZXh0PyhuLnRleHRDb250ZW50PWUudGV4dCxMKG4sXCJibG9ja1wiKSk6TyhuKSxmdW5jdGlvbih0LG8pe3ZhciBpPUYoKSxlPWh0LmlubmVyUGFyYW1zLmdldCh0KSxyPSFlfHxvLmlucHV0IT09ZS5pbnB1dDt2dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPXhbdF0sbj1zdChpLGUpO3l0KHQsby5pbnB1dEF0dHJpYnV0ZXMpLG4uY2xhc3NOYW1lPWUsciYmTyhuKX0pLG8uaW5wdXQmJihyJiZidChvKSx3dChvKSl9KHQsZSkseShGKCksZS5jdXN0b21DbGFzcyxcImNvbnRlbnRcIil9ZnVuY3Rpb24gU3QodCxpKXt2YXIgcj16KCk7aWYoIWkucHJvZ3Jlc3NTdGVwc3x8MD09PWkucHJvZ3Jlc3NTdGVwcy5sZW5ndGgpcmV0dXJuIE8ocik7TChyKSxyLmlubmVySFRNTD1cIlwiO3ZhciBhPXBhcnNlSW50KG51bGw9PT1pLmN1cnJlbnRQcm9ncmVzc1N0ZXA/RmUuZ2V0UXVldWVTdGVwKCk6aS5jdXJyZW50UHJvZ3Jlc3NTdGVwKTthPj1pLnByb2dyZXNzU3RlcHMubGVuZ3RoJiZ3KFwiSW52YWxpZCBjdXJyZW50UHJvZ3Jlc3NTdGVwIHBhcmFtZXRlciwgaXQgc2hvdWxkIGJlIGxlc3MgdGhhbiBwcm9ncmVzc1N0ZXBzLmxlbmd0aCAoY3VycmVudFByb2dyZXNzU3RlcCBsaWtlIEpTIGFycmF5cyBzdGFydHMgZnJvbSAwKVwiKSxpLnByb2dyZXNzU3RlcHMuZm9yRWFjaChmdW5jdGlvbih0LGUpe3ZhciBuPWZ1bmN0aW9uKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtyZXR1cm4gcnQoZSx4W1wicHJvZ3Jlc3Mtc3RlcFwiXSksZS5pbm5lckhUTUw9dCxlfSh0KTtpZihyLmFwcGVuZENoaWxkKG4pLGU9PT1hJiZydChuLHhbXCJhY3RpdmUtcHJvZ3Jlc3Mtc3RlcFwiXSksZSE9PWkucHJvZ3Jlc3NTdGVwcy5sZW5ndGgtMSl7dmFyIG89ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO3JldHVybiBydChlLHhbXCJwcm9ncmVzcy1zdGVwLWxpbmVcIl0pLHQucHJvZ3Jlc3NTdGVwc0Rpc3RhbmNlJiYoZS5zdHlsZS53aWR0aD10LnByb2dyZXNzU3RlcHNEaXN0YW5jZSksZX0odCk7ci5hcHBlbmRDaGlsZChvKX19KX1mdW5jdGlvbiBQdCh0LGUpe3ZhciBuPVEoKTt5KG4sZS5jdXN0b21DbGFzcyxcImhlYWRlclwiKSxTdCgwLGUpLGZ1bmN0aW9uKHQsZSl7dmFyIG49aHQuaW5uZXJQYXJhbXMuZ2V0KHQpO2lmKG4mJmUudHlwZT09PW4udHlwZSYmTigpKXkoTigpLGUuY3VzdG9tQ2xhc3MsXCJpY29uXCIpO2Vsc2UgaWYoRXQoKSxlLnR5cGUpaWYoVHQoKSwtMSE9PU9iamVjdC5rZXlzKFMpLmluZGV4T2YoZS50eXBlKSl7dmFyIG89SShcIi5cIi5jb25jYXQoeC5pY29uLFwiLlwiKS5jb25jYXQoU1tlLnR5cGVdKSk7TChvKSx5KG8sZS5jdXN0b21DbGFzcyxcImljb25cIiksRShvLFwic3dhbDItYW5pbWF0ZS1cIi5jb25jYXQoZS50eXBlLFwiLWljb25cIiksZS5hbmltYXRpb24pfWVsc2UgZygnVW5rbm93biB0eXBlISBFeHBlY3RlZCBcInN1Y2Nlc3NcIiwgXCJlcnJvclwiLCBcIndhcm5pbmdcIiwgXCJpbmZvXCIgb3IgXCJxdWVzdGlvblwiLCBnb3QgXCInLmNvbmNhdChlLnR5cGUsJ1wiJykpfSh0LGUpLGZ1bmN0aW9uKHQsZSl7dmFyIG49XygpO2lmKCFlLmltYWdlVXJsKXJldHVybiBPKG4pO0wobiksbi5zZXRBdHRyaWJ1dGUoXCJzcmNcIixlLmltYWdlVXJsKSxuLnNldEF0dHJpYnV0ZShcImFsdFwiLGUuaW1hZ2VBbHQpLFQobixcIndpZHRoXCIsZS5pbWFnZVdpZHRoKSxUKG4sXCJoZWlnaHRcIixlLmltYWdlSGVpZ2h0KSxuLmNsYXNzTmFtZT14LmltYWdlLHkobixlLmN1c3RvbUNsYXNzLFwiaW1hZ2VcIiksZS5pbWFnZUNsYXNzJiZydChuLGUuaW1hZ2VDbGFzcyl9KDAsZSksZnVuY3Rpb24odCxlKXt2YXIgbj1VKCk7TShuLGUudGl0bGV8fGUudGl0bGVUZXh0KSxlLnRpdGxlJiZudChlLnRpdGxlLG4pLGUudGl0bGVUZXh0JiYobi5pbm5lclRleHQ9ZS50aXRsZVRleHQpLHkobixlLmN1c3RvbUNsYXNzLFwidGl0bGVcIil9KDAsZSksZnVuY3Rpb24odCxlKXt2YXIgbj1KKCk7bi5pbm5lckhUTUw9ZS5jbG9zZUJ1dHRvbkh0bWwseShuLGUuY3VzdG9tQ2xhc3MsXCJjbG9zZUJ1dHRvblwiKSxNKG4sZS5zaG93Q2xvc2VCdXR0b24pLG4uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLGUuY2xvc2VCdXR0b25BcmlhTGFiZWwpfSgwLGUpfWZ1bmN0aW9uIEJ0KHQsZSl7IWZ1bmN0aW9uKHQsZSl7dmFyIG49UigpO1QobixcIndpZHRoXCIsZS53aWR0aCksVChuLFwicGFkZGluZ1wiLGUucGFkZGluZyksZS5iYWNrZ3JvdW5kJiYobi5zdHlsZS5iYWNrZ3JvdW5kPWUuYmFja2dyb3VuZCksbi5jbGFzc05hbWU9eC5wb3B1cCxlLnRvYXN0PyhydChbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGRvY3VtZW50LmJvZHldLHhbXCJ0b2FzdC1zaG93blwiXSkscnQobix4LnRvYXN0KSk6cnQobix4Lm1vZGFsKSx5KG4sZS5jdXN0b21DbGFzcyxcInBvcHVwXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBlLmN1c3RvbUNsYXNzJiZydChuLGUuY3VzdG9tQ2xhc3MpLEUobix4Lm5vYW5pbWF0aW9uLCFlLmFuaW1hdGlvbil9KDAsZSksbXQoMCxlKSxQdCh0LGUpLHh0KHQsZSksb3QoMCxlKSxmdW5jdGlvbih0LGUpe3ZhciBuPSQoKTtNKG4sZS5mb290ZXIpLGUuZm9vdGVyJiZudChlLmZvb3RlcixuKSx5KG4sZS5jdXN0b21DbGFzcyxcImZvb3RlclwiKX0oMCxlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uUmVuZGVyJiZlLm9uUmVuZGVyKFIoKSl9ZnVuY3Rpb24gQXQoKXtyZXR1cm4gSygpJiZLKCkuY2xpY2soKX12YXIgRXQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9RCgpLGU9MDtlPHQubGVuZ3RoO2UrKylPKHRbZV0pfSxUdD1mdW5jdGlvbigpe2Zvcih2YXIgdD1SKCksZT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KS5nZXRQcm9wZXJ0eVZhbHVlKFwiYmFja2dyb3VuZC1jb2xvclwiKSxuPXQucXVlcnlTZWxlY3RvckFsbChcIltjbGFzc149c3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lXSwgLnN3YWwyLXN1Y2Nlc3MtZml4XCIpLG89MDtvPG4ubGVuZ3RoO28rKyluW29dLnN0eWxlLmJhY2tncm91bmRDb2xvcj1lfTtmdW5jdGlvbiBMdCgpe3ZhciB0PVIoKTt0fHxGZS5maXJlKFwiXCIpLHQ9UigpO3ZhciBlPVooKSxuPUsoKSxvPVkoKTtMKGUpLEwobikscnQoW3QsZV0seC5sb2FkaW5nKSxuLmRpc2FibGVkPSEwLG8uZGlzYWJsZWQ9ITAsdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWxvYWRpbmdcIiwhMCksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWJ1c3lcIiwhMCksdC5mb2N1cygpfWZ1bmN0aW9uIE90KCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQpe3ZhciBlPXdpbmRvdy5zY3JvbGxYLG49d2luZG93LnNjcm9sbFk7SHQucmVzdG9yZUZvY3VzVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7SHQucHJldmlvdXNBY3RpdmVFbGVtZW50JiZIdC5wcmV2aW91c0FjdGl2ZUVsZW1lbnQuZm9jdXM/KEh0LnByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cygpLEh0LnByZXZpb3VzQWN0aXZlRWxlbWVudD1udWxsKTpkb2N1bWVudC5ib2R5JiZkb2N1bWVudC5ib2R5LmZvY3VzKCksdCgpfSwxMDApLHZvaWQgMCE9PWUmJnZvaWQgMCE9PW4mJndpbmRvdy5zY3JvbGxUbyhlLG4pfSl9ZnVuY3Rpb24gTXQodCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChJdCx0KX1mdW5jdGlvbiBWdCh0KXtyZXR1cm4gUnRbdF19dmFyIGp0PVtdLEh0PXt9LEl0PXt0aXRsZTpcIlwiLHRpdGxlVGV4dDpcIlwiLHRleHQ6XCJcIixodG1sOlwiXCIsZm9vdGVyOlwiXCIsdHlwZTpudWxsLHRvYXN0OiExLGN1c3RvbUNsYXNzOlwiXCIsY3VzdG9tQ29udGFpbmVyQ2xhc3M6XCJcIix0YXJnZXQ6XCJib2R5XCIsYmFja2Ryb3A6ITAsYW5pbWF0aW9uOiEwLGhlaWdodEF1dG86ITAsYWxsb3dPdXRzaWRlQ2xpY2s6ITAsYWxsb3dFc2NhcGVLZXk6ITAsYWxsb3dFbnRlcktleTohMCxzdG9wS2V5ZG93blByb3BhZ2F0aW9uOiEwLGtleWRvd25MaXN0ZW5lckNhcHR1cmU6ITEsc2hvd0NvbmZpcm1CdXR0b246ITAsc2hvd0NhbmNlbEJ1dHRvbjohMSxwcmVDb25maXJtOm51bGwsY29uZmlybUJ1dHRvblRleHQ6XCJPS1wiLGNvbmZpcm1CdXR0b25BcmlhTGFiZWw6XCJcIixjb25maXJtQnV0dG9uQ29sb3I6bnVsbCxjb25maXJtQnV0dG9uQ2xhc3M6XCJcIixjYW5jZWxCdXR0b25UZXh0OlwiQ2FuY2VsXCIsY2FuY2VsQnV0dG9uQXJpYUxhYmVsOlwiXCIsY2FuY2VsQnV0dG9uQ29sb3I6bnVsbCxjYW5jZWxCdXR0b25DbGFzczpcIlwiLGJ1dHRvbnNTdHlsaW5nOiEwLHJldmVyc2VCdXR0b25zOiExLGZvY3VzQ29uZmlybTohMCxmb2N1c0NhbmNlbDohMSxzaG93Q2xvc2VCdXR0b246ITEsY2xvc2VCdXR0b25IdG1sOlwiJnRpbWVzO1wiLGNsb3NlQnV0dG9uQXJpYUxhYmVsOlwiQ2xvc2UgdGhpcyBkaWFsb2dcIixzaG93TG9hZGVyT25Db25maXJtOiExLGltYWdlVXJsOm51bGwsaW1hZ2VXaWR0aDpudWxsLGltYWdlSGVpZ2h0Om51bGwsaW1hZ2VBbHQ6XCJcIixpbWFnZUNsYXNzOlwiXCIsdGltZXI6bnVsbCx3aWR0aDpudWxsLHBhZGRpbmc6bnVsbCxiYWNrZ3JvdW5kOm51bGwsaW5wdXQ6bnVsbCxpbnB1dFBsYWNlaG9sZGVyOlwiXCIsaW5wdXRWYWx1ZTpcIlwiLGlucHV0T3B0aW9uczp7fSxpbnB1dEF1dG9UcmltOiEwLGlucHV0Q2xhc3M6XCJcIixpbnB1dEF0dHJpYnV0ZXM6e30saW5wdXRWYWxpZGF0b3I6bnVsbCx2YWxpZGF0aW9uTWVzc2FnZTpudWxsLGdyb3c6ITEscG9zaXRpb246XCJjZW50ZXJcIixwcm9ncmVzc1N0ZXBzOltdLGN1cnJlbnRQcm9ncmVzc1N0ZXA6bnVsbCxwcm9ncmVzc1N0ZXBzRGlzdGFuY2U6bnVsbCxvbkJlZm9yZU9wZW46bnVsbCxvbk9wZW46bnVsbCxvblJlbmRlcjpudWxsLG9uQ2xvc2U6bnVsbCxvbkFmdGVyQ2xvc2U6bnVsbCxzY3JvbGxiYXJQYWRkaW5nOiEwfSxxdD1bXCJ0aXRsZVwiLFwidGl0bGVUZXh0XCIsXCJ0ZXh0XCIsXCJodG1sXCIsXCJ0eXBlXCIsXCJjdXN0b21DbGFzc1wiLFwic2hvd0NvbmZpcm1CdXR0b25cIixcInNob3dDYW5jZWxCdXR0b25cIixcImNvbmZpcm1CdXR0b25UZXh0XCIsXCJjb25maXJtQnV0dG9uQXJpYUxhYmVsXCIsXCJjb25maXJtQnV0dG9uQ29sb3JcIixcImNvbmZpcm1CdXR0b25DbGFzc1wiLFwiY2FuY2VsQnV0dG9uVGV4dFwiLFwiY2FuY2VsQnV0dG9uQXJpYUxhYmVsXCIsXCJjYW5jZWxCdXR0b25Db2xvclwiLFwiY2FuY2VsQnV0dG9uQ2xhc3NcIixcImJ1dHRvbnNTdHlsaW5nXCIsXCJyZXZlcnNlQnV0dG9uc1wiLFwiaW1hZ2VVcmxcIixcImltYWdlV2lkdGhcIixcImltYWdlSGVpZ3RoXCIsXCJpbWFnZUFsdFwiLFwiaW1hZ2VDbGFzc1wiLFwicHJvZ3Jlc3NTdGVwc1wiLFwiY3VycmVudFByb2dyZXNzU3RlcFwiXSxSdD17Y3VzdG9tQ29udGFpbmVyQ2xhc3M6XCJjdXN0b21DbGFzc1wiLGNvbmZpcm1CdXR0b25DbGFzczpcImN1c3RvbUNsYXNzXCIsY2FuY2VsQnV0dG9uQ2xhc3M6XCJjdXN0b21DbGFzc1wiLGltYWdlQ2xhc3M6XCJjdXN0b21DbGFzc1wiLGlucHV0Q2xhc3M6XCJjdXN0b21DbGFzc1wifSxEdD1bXCJhbGxvd091dHNpZGVDbGlja1wiLFwiYWxsb3dFbnRlcktleVwiLFwiYmFja2Ryb3BcIixcImZvY3VzQ29uZmlybVwiLFwiZm9jdXNDYW5jZWxcIixcImhlaWdodEF1dG9cIixcImtleWRvd25MaXN0ZW5lckNhcHR1cmVcIl0sTnQ9T2JqZWN0LmZyZWV6ZSh7aXNWYWxpZFBhcmFtZXRlcjpNdCxpc1VwZGF0YWJsZVBhcmFtZXRlcjpmdW5jdGlvbih0KXtyZXR1cm4tMSE9PXF0LmluZGV4T2YodCl9LGlzRGVwcmVjYXRlZFBhcmFtZXRlcjpWdCxhcmdzVG9QYXJhbXM6ZnVuY3Rpb24obil7dmFyIG89e307c3dpdGNoKHIoblswXSkpe2Nhc2VcIm9iamVjdFwiOnMobyxuWzBdKTticmVhaztkZWZhdWx0OltcInRpdGxlXCIsXCJodG1sXCIsXCJ0eXBlXCJdLmZvckVhY2goZnVuY3Rpb24odCxlKXtzd2l0Y2gocihuW2VdKSl7Y2FzZVwic3RyaW5nXCI6b1t0XT1uW2VdO2JyZWFrO2Nhc2VcInVuZGVmaW5lZFwiOmJyZWFrO2RlZmF1bHQ6ZyhcIlVuZXhwZWN0ZWQgdHlwZSBvZiBcIi5jb25jYXQodCwnISBFeHBlY3RlZCBcInN0cmluZ1wiLCBnb3QgJykuY29uY2F0KHIobltlXSkpKX19KX1yZXR1cm4gb30saXNWaXNpYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIFYoUigpKX0sY2xpY2tDb25maXJtOkF0LGNsaWNrQ2FuY2VsOmZ1bmN0aW9uKCl7cmV0dXJuIFkoKSYmWSgpLmNsaWNrKCl9LGdldENvbnRhaW5lcjpILGdldFBvcHVwOlIsZ2V0VGl0bGU6VSxnZXRDb250ZW50OkYsZ2V0SW1hZ2U6XyxnZXRJY29uOk4sZ2V0SWNvbnM6RCxnZXRDbG9zZUJ1dHRvbjpKLGdldEFjdGlvbnM6WixnZXRDb25maXJtQnV0dG9uOkssZ2V0Q2FuY2VsQnV0dG9uOlksZ2V0SGVhZGVyOlEsZ2V0Rm9vdGVyOiQsZ2V0Rm9jdXNhYmxlRWxlbWVudHM6WCxnZXRWYWxpZGF0aW9uTWVzc2FnZTpXLGlzTG9hZGluZzpmdW5jdGlvbigpe3JldHVybiBSKCkuaGFzQXR0cmlidXRlKFwiZGF0YS1sb2FkaW5nXCIpfSxmaXJlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkodCksbj0wO248dDtuKyspZVtuXT1hcmd1bWVudHNbbl07cmV0dXJuIGwodGhpcyxlKX0sbWl4aW46ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gbyh0aGlzLGUpLGQodGhpcyx1KGUpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiZjKHQsZSl9KGUsdCksYShlLFt7a2V5OlwiX21haW5cIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gcCh1KGUucHJvdG90eXBlKSxcIl9tYWluXCIsdGhpcykuY2FsbCh0aGlzLHMoe30sbix0KSl9fV0pLGV9KHRoaXMpfSxxdWV1ZTpmdW5jdGlvbih0KXt2YXIgcj10aGlzO2p0PXQ7ZnVuY3Rpb24gYSh0LGUpe2p0PVtdLGRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zd2FsMi1xdWV1ZS1zdGVwXCIpLHQoZSl9dmFyIHM9W107cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGkpeyFmdW5jdGlvbiBlKG4sbyl7bjxqdC5sZW5ndGg/KGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKFwiZGF0YS1zd2FsMi1xdWV1ZS1zdGVwXCIsbiksci5maXJlKGp0W25dKS50aGVuKGZ1bmN0aW9uKHQpe3ZvaWQgMCE9PXQudmFsdWU/KHMucHVzaCh0LnZhbHVlKSxlKG4rMSxvKSk6YShpLHtkaXNtaXNzOnQuZGlzbWlzc30pfSkpOmEoaSx7dmFsdWU6c30pfSgwKX0pfSxnZXRRdWV1ZVN0ZXA6ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3YWwyLXF1ZXVlLXN0ZXBcIil9LGluc2VydFF1ZXVlU3RlcDpmdW5jdGlvbih0LGUpe3JldHVybiBlJiZlPGp0Lmxlbmd0aD9qdC5zcGxpY2UoZSwwLHQpOmp0LnB1c2godCl9LGRlbGV0ZVF1ZXVlU3RlcDpmdW5jdGlvbih0KXt2b2lkIDAhPT1qdFt0XSYmanQuc3BsaWNlKHQsMSl9LHNob3dMb2FkaW5nOkx0LGVuYWJsZUxvYWRpbmc6THQsZ2V0VGltZXJMZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIEh0LnRpbWVvdXQmJkh0LnRpbWVvdXQuZ2V0VGltZXJMZWZ0KCl9LHN0b3BUaW1lcjpmdW5jdGlvbigpe3JldHVybiBIdC50aW1lb3V0JiZIdC50aW1lb3V0LnN0b3AoKX0scmVzdW1lVGltZXI6ZnVuY3Rpb24oKXtyZXR1cm4gSHQudGltZW91dCYmSHQudGltZW91dC5zdGFydCgpfSx0b2dnbGVUaW1lcjpmdW5jdGlvbigpe3ZhciB0PUh0LnRpbWVvdXQ7cmV0dXJuIHQmJih0LnJ1bm5pbmc/dC5zdG9wKCk6dC5zdGFydCgpKX0saW5jcmVhc2VUaW1lcjpmdW5jdGlvbih0KXtyZXR1cm4gSHQudGltZW91dCYmSHQudGltZW91dC5pbmNyZWFzZSh0KX0saXNUaW1lclJ1bm5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSHQudGltZW91dCYmSHQudGltZW91dC5pc1J1bm5pbmcoKX19KTtmdW5jdGlvbiBVdCgpe3ZhciB0PWh0LmlubmVyUGFyYW1zLmdldCh0aGlzKSxlPWh0LmRvbUNhY2hlLmdldCh0aGlzKTt0LnNob3dDb25maXJtQnV0dG9ufHwoTyhlLmNvbmZpcm1CdXR0b24pLHQuc2hvd0NhbmNlbEJ1dHRvbnx8TyhlLmFjdGlvbnMpKSxhdChbZS5wb3B1cCxlLmFjdGlvbnNdLHgubG9hZGluZyksZS5wb3B1cC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWJ1c3lcIiksZS5wb3B1cC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWxvYWRpbmdcIiksZS5jb25maXJtQnV0dG9uLmRpc2FibGVkPSExLGUuY2FuY2VsQnV0dG9uLmRpc2FibGVkPSExfWZ1bmN0aW9uIEZ0KCl7bnVsbD09PVAucHJldmlvdXNCb2R5UGFkZGluZyYmZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ+d2luZG93LmlubmVySGVpZ2h0JiYoUC5wcmV2aW91c0JvZHlQYWRkaW5nPXBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHkpLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXJpZ2h0XCIpKSxkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1QLnByZXZpb3VzQm9keVBhZGRpbmcrZnVuY3Rpb24oKXtpZihcIm9udG91Y2hzdGFydFwiaW4gd2luZG93fHxuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cylyZXR1cm4gMDt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3Quc3R5bGUud2lkdGg9XCI1MHB4XCIsdC5zdHlsZS5oZWlnaHQ9XCI1MHB4XCIsdC5zdHlsZS5vdmVyZmxvdz1cInNjcm9sbFwiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodCk7dmFyIGU9dC5vZmZzZXRXaWR0aC10LmNsaWVudFdpZHRoO3JldHVybiBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHQpLGV9KCkrXCJweFwiKX1mdW5jdGlvbiBfdCgpe3JldHVybiEhd2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0JiYhIWRvY3VtZW50LmRvY3VtZW50TW9kZX1mdW5jdGlvbiB6dCgpe3ZhciB0PUgoKSxlPVIoKTt0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiYWxpZ24taXRlbXNcIiksZS5vZmZzZXRUb3A8MCYmKHQuc3R5bGUuYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcIil9dmFyIFd0PWZ1bmN0aW9uKCl7dmFyIGUsbj1IKCk7bi5vbnRvdWNoc3RhcnQ9ZnVuY3Rpb24odCl7ZT10LnRhcmdldD09PW58fCFmdW5jdGlvbih0KXtyZXR1cm4hISh0LnNjcm9sbEhlaWdodD50LmNsaWVudEhlaWdodCl9KG4pJiZcIklOUFVUXCIhPT10LnRhcmdldC50YWdOYW1lfSxuLm9udG91Y2htb3ZlPWZ1bmN0aW9uKHQpe2UmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSl9fSxLdD17c3dhbFByb21pc2VSZXNvbHZlOm5ldyBXZWFrTWFwfTtmdW5jdGlvbiBZdCh0LGUsbixvKXtuP0p0KHQsbyk6KE90KCkudGhlbihmdW5jdGlvbigpe3JldHVybiBKdCh0LG8pfSksSHQua2V5ZG93blRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLEh0LmtleWRvd25IYW5kbGVyLHtjYXB0dXJlOkh0LmtleWRvd25MaXN0ZW5lckNhcHR1cmV9KSxIdC5rZXlkb3duSGFuZGxlckFkZGVkPSExKSxlLnBhcmVudE5vZGUmJmUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxHKCkmJihudWxsIT09UC5wcmV2aW91c0JvZHlQYWRkaW5nJiYoZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ9UC5wcmV2aW91c0JvZHlQYWRkaW5nK1wicHhcIixQLnByZXZpb3VzQm9keVBhZGRpbmc9bnVsbCksZnVuY3Rpb24oKXtpZihiKGRvY3VtZW50LmJvZHkseC5pb3NmaXgpKXt2YXIgdD1wYXJzZUludChkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCwxMCk7YXQoZG9jdW1lbnQuYm9keSx4Lmlvc2ZpeCksZG9jdW1lbnQuYm9keS5zdHlsZS50b3A9XCJcIixkb2N1bWVudC5ib2R5LnNjcm9sbFRvcD0tMSp0fX0oKSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZfdCgpJiZ3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHp0KSxtKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24odCl7dC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuXCIpPyh0LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsdC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuXCIpKSx0LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtcHJldmlvdXMtYXJpYS1oaWRkZW5cIikpOnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIil9KSksYXQoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCxkb2N1bWVudC5ib2R5XSxbeC5zaG93bix4W1wiaGVpZ2h0LWF1dG9cIl0seFtcIm5vLWJhY2tkcm9wXCJdLHhbXCJ0b2FzdC1zaG93blwiXSx4W1widG9hc3QtY29sdW1uXCJdXSl9ZnVuY3Rpb24gWnQodCl7dmFyIGU9UigpO2lmKGUmJiFiKGUseC5oaWRlKSl7dmFyIG49aHQuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpO2lmKG4pe3ZhciBvPUt0LnN3YWxQcm9taXNlUmVzb2x2ZS5nZXQodGhpcyk7YXQoZSx4LnNob3cpLHJ0KGUseC5oaWRlKSxmdW5jdGlvbih0LGUsbil7dmFyIG89SCgpLGk9cHQmJmooZSkscj1uLm9uQ2xvc2UsYT1uLm9uQWZ0ZXJDbG9zZTtpZihyIT09bnVsbCYmdHlwZW9mIHI9PT1cImZ1bmN0aW9uXCIpe3IoZSl9aWYoaSl7JHQodCxlLG8sYSl9ZWxzZXtZdCh0LG8sdXQoKSxhKX19KHRoaXMsZSxuKSxvKHR8fHt9KX19fWZ1bmN0aW9uIFF0KHQpe2Zvcih2YXIgZSBpbiB0KXRbZV09bmV3IFdlYWtNYXB9dmFyICR0PWZ1bmN0aW9uKHQsZSxuLG8pe0h0LnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaz1ZdC5iaW5kKG51bGwsdCxuLHV0KCksbyksZS5hZGRFdmVudExpc3RlbmVyKHB0LGZ1bmN0aW9uKHQpe3QudGFyZ2V0PT09ZSYmKEh0LnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaygpLGRlbGV0ZSBIdC5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2spfSl9LEp0PWZ1bmN0aW9uKHQsZSl7c2V0VGltZW91dChmdW5jdGlvbigpe251bGwhPT1lJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlKCksUigpfHxmdW5jdGlvbih0KXtkZWxldGUgdC5wYXJhbXMsZGVsZXRlIEh0LmtleWRvd25IYW5kbGVyLGRlbGV0ZSBIdC5rZXlkb3duVGFyZ2V0LFF0KGh0KSxRdChLdCl9KHQpfSl9O2Z1bmN0aW9uIFh0KHQsZSxuKXt2YXIgbz1odC5kb21DYWNoZS5nZXQodCk7ZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe29bdF0uZGlzYWJsZWQ9bn0pfWZ1bmN0aW9uIEd0KHQsZSl7aWYoIXQpcmV0dXJuITE7aWYoXCJyYWRpb1wiPT09dC50eXBlKWZvcih2YXIgbj10LnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRcIiksbz0wO288bi5sZW5ndGg7bysrKW5bb10uZGlzYWJsZWQ9ZTtlbHNlIHQuZGlzYWJsZWQ9ZX12YXIgdGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKHQsZSl7byh0aGlzLG4pLHRoaXMuY2FsbGJhY2s9dCx0aGlzLnJlbWFpbmluZz1lLHRoaXMucnVubmluZz0hMSx0aGlzLnN0YXJ0KCl9cmV0dXJuIGEobixbe2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ydW5uaW5nfHwodGhpcy5ydW5uaW5nPSEwLHRoaXMuc3RhcnRlZD1uZXcgRGF0ZSx0aGlzLmlkPXNldFRpbWVvdXQodGhpcy5jYWxsYmFjayx0aGlzLnJlbWFpbmluZykpLHRoaXMucmVtYWluaW5nfX0se2tleTpcInN0b3BcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJ1bm5pbmcmJih0aGlzLnJ1bm5pbmc9ITEsY2xlYXJUaW1lb3V0KHRoaXMuaWQpLHRoaXMucmVtYWluaW5nLT1uZXcgRGF0ZS10aGlzLnN0YXJ0ZWQpLHRoaXMucmVtYWluaW5nfX0se2tleTpcImluY3JlYXNlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5ydW5uaW5nO3JldHVybiBlJiZ0aGlzLnN0b3AoKSx0aGlzLnJlbWFpbmluZys9dCxlJiZ0aGlzLnN0YXJ0KCksdGhpcy5yZW1haW5pbmd9fSx7a2V5OlwiZ2V0VGltZXJMZWZ0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ydW5uaW5nJiYodGhpcy5zdG9wKCksdGhpcy5zdGFydCgpKSx0aGlzLnJlbWFpbmluZ319LHtrZXk6XCJpc1J1bm5pbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJ1bm5pbmd9fV0pLG59KCksZWU9e2VtYWlsOmZ1bmN0aW9uKHQsZSl7cmV0dXJuL15bYS16QS1aMC05LitfLV0rQFthLXpBLVowLTkuLV0rXFwuW2EtekEtWjAtOS1dezIsMjR9JC8udGVzdCh0KT9Qcm9taXNlLnJlc29sdmUoKTpQcm9taXNlLnJlc29sdmUoZXx8XCJJbnZhbGlkIGVtYWlsIGFkZHJlc3NcIil9LHVybDpmdW5jdGlvbih0LGUpe3JldHVybi9eaHR0cHM/OlxcL1xcLyh3d3dcXC4pP1stYS16QS1aMC05QDolLl8rfiM9XXsyLDI1Nn1cXC5bYS16XXsyLDYzfVxcYihbLWEtekEtWjAtOUA6JV8rLn4jPyYvPV0qKSQvLnRlc3QodCk/UHJvbWlzZS5yZXNvbHZlKCk6UHJvbWlzZS5yZXNvbHZlKGV8fFwiSW52YWxpZCBVUkxcIil9fTtmdW5jdGlvbiBuZSh0KXshZnVuY3Rpb24oZSl7ZS5pbnB1dFZhbGlkYXRvcnx8T2JqZWN0LmtleXMoZWUpLmZvckVhY2goZnVuY3Rpb24odCl7ZS5pbnB1dD09PXQmJihlLmlucHV0VmFsaWRhdG9yPWVlW3RdKX0pfSh0KSx0LnNob3dMb2FkZXJPbkNvbmZpcm0mJiF0LnByZUNvbmZpcm0mJncoXCJzaG93TG9hZGVyT25Db25maXJtIGlzIHNldCB0byB0cnVlLCBidXQgcHJlQ29uZmlybSBpcyBub3QgZGVmaW5lZC5cXG5zaG93TG9hZGVyT25Db25maXJtIHNob3VsZCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggcHJlQ29uZmlybSwgc2VlIHVzYWdlIGV4YW1wbGU6XFxuaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vI2FqYXgtcmVxdWVzdFwiKSx0LmFuaW1hdGlvbj1DKHQuYW5pbWF0aW9uKSxmdW5jdGlvbih0KXt0LnRhcmdldCYmKFwic3RyaW5nXCIhPXR5cGVvZiB0LnRhcmdldHx8ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0LnRhcmdldCkpJiYoXCJzdHJpbmdcIj09dHlwZW9mIHQudGFyZ2V0fHx0LnRhcmdldC5hcHBlbmRDaGlsZCl8fCh3KCdUYXJnZXQgcGFyYW1ldGVyIGlzIG5vdCB2YWxpZCwgZGVmYXVsdGluZyB0byBcImJvZHlcIicpLHQudGFyZ2V0PVwiYm9keVwiKX0odCksXCJzdHJpbmdcIj09dHlwZW9mIHQudGl0bGUmJih0LnRpdGxlPXQudGl0bGUuc3BsaXQoXCJcXG5cIikuam9pbihcIjxiciAvPlwiKSksbHQodCl9ZnVuY3Rpb24gb2UodCxlKXt0LnJlbW92ZUV2ZW50TGlzdGVuZXIocHQsb2UpLGUuc3R5bGUub3ZlcmZsb3dZPVwiYXV0b1wifWZ1bmN0aW9uIGllKHQpe3ZhciBlPUgoKSxuPVIoKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uQmVmb3JlT3BlbiYmdC5vbkJlZm9yZU9wZW4obiksbWUoZSxuLHQpLHBlKGUsbiksRygpJiZmZShlLHQuc2Nyb2xsYmFyUGFkZGluZyksdXQoKXx8SHQucHJldmlvdXNBY3RpdmVFbGVtZW50fHwoSHQucHJldmlvdXNBY3RpdmVFbGVtZW50PWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQub25PcGVuJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIHQub25PcGVuKG4pfSl9ZnVuY3Rpb24gcmUodCxlKXtcInNlbGVjdFwiPT09ZS5pbnB1dHx8XCJyYWRpb1wiPT09ZS5pbnB1dD9iZSh0LGUpOi0xIT09W1widGV4dFwiLFwiZW1haWxcIixcIm51bWJlclwiLFwidGVsXCIsXCJ0ZXh0YXJlYVwiXS5pbmRleE9mKGUuaW5wdXQpJiZ2KGUuaW5wdXRWYWx1ZSkmJnllKHQsZSl9ZnVuY3Rpb24gYWUodCxlKXt0LmRpc2FibGVCdXR0b25zKCksZS5pbnB1dD9rZSh0LGUpOnhlKHQsZSwhMCl9ZnVuY3Rpb24gc2UodCxlKXt0LmRpc2FibGVCdXR0b25zKCksZShrLmNhbmNlbCl9ZnVuY3Rpb24gdWUodCxlKXt0LmNsb3NlUG9wdXAoe3ZhbHVlOmV9KX1mdW5jdGlvbiBjZShlLHQsbixvKXt0LmtleWRvd25UYXJnZXQmJnQua2V5ZG93bkhhbmRsZXJBZGRlZCYmKHQua2V5ZG93blRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHQua2V5ZG93bkhhbmRsZXIse2NhcHR1cmU6dC5rZXlkb3duTGlzdGVuZXJDYXB0dXJlfSksdC5rZXlkb3duSGFuZGxlckFkZGVkPSExKSxuLnRvYXN0fHwodC5rZXlkb3duSGFuZGxlcj1mdW5jdGlvbih0KXtyZXR1cm4gQmUoZSx0LG4sbyl9LHQua2V5ZG93blRhcmdldD1uLmtleWRvd25MaXN0ZW5lckNhcHR1cmU/d2luZG93OlIoKSx0LmtleWRvd25MaXN0ZW5lckNhcHR1cmU9bi5rZXlkb3duTGlzdGVuZXJDYXB0dXJlLHQua2V5ZG93blRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHQua2V5ZG93bkhhbmRsZXIse2NhcHR1cmU6dC5rZXlkb3duTGlzdGVuZXJDYXB0dXJlfSksdC5rZXlkb3duSGFuZGxlckFkZGVkPSEwKX1mdW5jdGlvbiBsZSh0LGUsbil7Zm9yKHZhciBvPVgoKSxpPTA7aTxvLmxlbmd0aDtpKyspcmV0dXJuKGUrPW4pPT09by5sZW5ndGg/ZT0wOi0xPT09ZSYmKGU9by5sZW5ndGgtMSksb1tlXS5mb2N1cygpO1IoKS5mb2N1cygpfWZ1bmN0aW9uIGRlKHQsZSxuKXtlLnRvYXN0P09lKHQsZSxuKTooVmUodCksamUodCksSGUodCxlLG4pKX12YXIgcGU9ZnVuY3Rpb24odCxlKXtwdCYmaihlKT8odC5zdHlsZS5vdmVyZmxvd1k9XCJoaWRkZW5cIixlLmFkZEV2ZW50TGlzdGVuZXIocHQsb2UuYmluZChudWxsLGUsdCkpKTp0LnN0eWxlLm92ZXJmbG93WT1cImF1dG9cIn0sZmU9ZnVuY3Rpb24odCxlKXshZnVuY3Rpb24oKXtpZigoL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJiF3aW5kb3cuTVNTdHJlYW18fFwiTWFjSW50ZWxcIj09PW5hdmlnYXRvci5wbGF0Zm9ybSYmMTxuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMpJiYhYihkb2N1bWVudC5ib2R5LHguaW9zZml4KSl7dmFyIHQ9ZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7ZG9jdW1lbnQuYm9keS5zdHlsZS50b3A9LTEqdCtcInB4XCIscnQoZG9jdW1lbnQuYm9keSx4Lmlvc2ZpeCksV3QoKX19KCksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmX3QoKSYmKHp0KCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix6dCkpLG0oZG9jdW1lbnQuYm9keS5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbih0KXt0PT09SCgpfHxmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29udGFpbnMpcmV0dXJuIHQuY29udGFpbnMoZSl9KHQsSCgpKXx8KHQuaGFzQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIikmJnQuc2V0QXR0cmlidXRlKFwiZGF0YS1wcmV2aW91cy1hcmlhLWhpZGRlblwiLHQuZ2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIikpLHQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIikpfSksZSYmRnQoKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5zY3JvbGxUb3A9MH0pfSxtZT1mdW5jdGlvbih0LGUsbil7bi5hbmltYXRpb24mJnJ0KGUseC5zaG93KSxMKGUpLHJ0KFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsZG9jdW1lbnQuYm9keSx0XSx4LnNob3duKSxuLmhlaWdodEF1dG8mJm4uYmFja2Ryb3AmJiFuLnRvYXN0JiZydChbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGRvY3VtZW50LmJvZHldLHhbXCJoZWlnaHQtYXV0b1wiXSl9LGdlPWZ1bmN0aW9uKHQpe3JldHVybiB0LmNoZWNrZWQ/MTowfSxoZT1mdW5jdGlvbih0KXtyZXR1cm4gdC5jaGVja2VkP3QudmFsdWU6bnVsbH0sdmU9ZnVuY3Rpb24odCl7cmV0dXJuIHQuZmlsZXMubGVuZ3RoP251bGwhPT10LmdldEF0dHJpYnV0ZShcIm11bHRpcGxlXCIpP3QuZmlsZXM6dC5maWxlc1swXTpudWxsfSxiZT1mdW5jdGlvbihlLG4pe2Z1bmN0aW9uIG8odCl7cmV0dXJuIHdlW24uaW5wdXRdKGksQ2UodCksbil9dmFyIGk9RigpO3Yobi5pbnB1dE9wdGlvbnMpPyhMdCgpLG4uaW5wdXRPcHRpb25zLnRoZW4oZnVuY3Rpb24odCl7ZS5oaWRlTG9hZGluZygpLG8odCl9KSk6XCJvYmplY3RcIj09PXIobi5pbnB1dE9wdGlvbnMpP28obi5pbnB1dE9wdGlvbnMpOmcoXCJVbmV4cGVjdGVkIHR5cGUgb2YgaW5wdXRPcHRpb25zISBFeHBlY3RlZCBvYmplY3QsIE1hcCBvciBQcm9taXNlLCBnb3QgXCIuY29uY2F0KHIobi5pbnB1dE9wdGlvbnMpKSl9LHllPWZ1bmN0aW9uKGUsbil7dmFyIG89ZS5nZXRJbnB1dCgpO08obyksbi5pbnB1dFZhbHVlLnRoZW4oZnVuY3Rpb24odCl7by52YWx1ZT1cIm51bWJlclwiPT09bi5pbnB1dD9wYXJzZUZsb2F0KHQpfHwwOnQrXCJcIixMKG8pLG8uZm9jdXMoKSxlLmhpZGVMb2FkaW5nKCl9KS5jYXRjaChmdW5jdGlvbih0KXtnKFwiRXJyb3IgaW4gaW5wdXRWYWx1ZSBwcm9taXNlOiBcIit0KSxvLnZhbHVlPVwiXCIsTChvKSxvLmZvY3VzKCksZS5oaWRlTG9hZGluZygpfSl9LHdlPXtzZWxlY3Q6ZnVuY3Rpb24odCxlLGkpe3ZhciByPXN0KHQseC5zZWxlY3QpO2UuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT10WzBdLG49dFsxXSxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7by52YWx1ZT1lLG8uaW5uZXJIVE1MPW4saS5pbnB1dFZhbHVlLnRvU3RyaW5nKCk9PT1lLnRvU3RyaW5nKCkmJihvLnNlbGVjdGVkPSEwKSxyLmFwcGVuZENoaWxkKG8pfSksci5mb2N1cygpfSxyYWRpbzpmdW5jdGlvbih0LGUsYSl7dmFyIHM9c3QodCx4LnJhZGlvKTtlLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9dFswXSxuPXRbMV0sbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7by50eXBlPVwicmFkaW9cIixvLm5hbWU9eC5yYWRpbyxvLnZhbHVlPWUsYS5pbnB1dFZhbHVlLnRvU3RyaW5nKCk9PT1lLnRvU3RyaW5nKCkmJihvLmNoZWNrZWQ9ITApO3ZhciByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO3IuaW5uZXJIVE1MPW4sci5jbGFzc05hbWU9eC5sYWJlbCxpLmFwcGVuZENoaWxkKG8pLGkuYXBwZW5kQ2hpbGQocikscy5hcHBlbmRDaGlsZChpKX0pO3ZhciBuPXMucXVlcnlTZWxlY3RvckFsbChcImlucHV0XCIpO24ubGVuZ3RoJiZuWzBdLmZvY3VzKCl9fSxDZT1mdW5jdGlvbihlKXt2YXIgbj1bXTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwJiZlIGluc3RhbmNlb2YgTWFwP2UuZm9yRWFjaChmdW5jdGlvbih0LGUpe24ucHVzaChbZSx0XSl9KTpPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe24ucHVzaChbdCxlW3RdXSl9KSxufSxrZT1mdW5jdGlvbihlLG4pe3ZhciBvPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5nZXRJbnB1dCgpO2lmKCFuKXJldHVybiBudWxsO3N3aXRjaChlLmlucHV0KXtjYXNlXCJjaGVja2JveFwiOnJldHVybiBnZShuKTtjYXNlXCJyYWRpb1wiOnJldHVybiBoZShuKTtjYXNlXCJmaWxlXCI6cmV0dXJuIHZlKG4pO2RlZmF1bHQ6cmV0dXJuIGUuaW5wdXRBdXRvVHJpbT9uLnZhbHVlLnRyaW0oKTpuLnZhbHVlfX0oZSxuKTtuLmlucHV0VmFsaWRhdG9yPyhlLmRpc2FibGVJbnB1dCgpLFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbi5pbnB1dFZhbGlkYXRvcihvLG4udmFsaWRhdGlvbk1lc3NhZ2UpfSkudGhlbihmdW5jdGlvbih0KXtlLmVuYWJsZUJ1dHRvbnMoKSxlLmVuYWJsZUlucHV0KCksdD9lLnNob3dWYWxpZGF0aW9uTWVzc2FnZSh0KTp4ZShlLG4sbyl9KSk6ZS5nZXRJbnB1dCgpLmNoZWNrVmFsaWRpdHkoKT94ZShlLG4sbyk6KGUuZW5hYmxlQnV0dG9ucygpLGUuc2hvd1ZhbGlkYXRpb25NZXNzYWdlKG4udmFsaWRhdGlvbk1lc3NhZ2UpKX0seGU9ZnVuY3Rpb24oZSx0LG4peyh0LnNob3dMb2FkZXJPbkNvbmZpcm0mJkx0KCksdC5wcmVDb25maXJtKT8oZS5yZXNldFZhbGlkYXRpb25NZXNzYWdlKCksUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe3JldHVybiB0LnByZUNvbmZpcm0obix0LnZhbGlkYXRpb25NZXNzYWdlKX0pLnRoZW4oZnVuY3Rpb24odCl7VihXKCkpfHwhMT09PXQ/ZS5oaWRlTG9hZGluZygpOnVlKGUsdm9pZCAwPT09dD9uOnQpfSkpOnVlKGUsbil9LFNlPVtcIkFycm93TGVmdFwiLFwiQXJyb3dSaWdodFwiLFwiQXJyb3dVcFwiLFwiQXJyb3dEb3duXCIsXCJMZWZ0XCIsXCJSaWdodFwiLFwiVXBcIixcIkRvd25cIl0sUGU9W1wiRXNjYXBlXCIsXCJFc2NcIl0sQmU9ZnVuY3Rpb24odCxlLG4sbyl7bi5zdG9wS2V5ZG93blByb3BhZ2F0aW9uJiZlLnN0b3BQcm9wYWdhdGlvbigpLFwiRW50ZXJcIj09PWUua2V5P0FlKHQsZSxuKTpcIlRhYlwiPT09ZS5rZXk/RWUoZSxuKTotMSE9PVNlLmluZGV4T2YoZS5rZXkpP1RlKCk6LTEhPT1QZS5pbmRleE9mKGUua2V5KSYmTGUoZSxuLG8pfSxBZT1mdW5jdGlvbih0LGUsbil7aWYoIWUuaXNDb21wb3NpbmcmJmUudGFyZ2V0JiZ0LmdldElucHV0KCkmJmUudGFyZ2V0Lm91dGVySFRNTD09PXQuZ2V0SW5wdXQoKS5vdXRlckhUTUwpe2lmKC0xIT09W1widGV4dGFyZWFcIixcImZpbGVcIl0uaW5kZXhPZihuLmlucHV0KSlyZXR1cm47QXQoKSxlLnByZXZlbnREZWZhdWx0KCl9fSxFZT1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LnRhcmdldCxvPVgoKSxpPS0xLHI9MDtyPG8ubGVuZ3RoO3IrKylpZihuPT09b1tyXSl7aT1yO2JyZWFrfXQuc2hpZnRLZXk/bGUoMCxpLC0xKTpsZSgwLGksMSksdC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCl9LFRlPWZ1bmN0aW9uKCl7dmFyIHQ9SygpLGU9WSgpO2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQ9PT10JiZWKGUpP2UuZm9jdXMoKTpkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09ZSYmVih0KSYmdC5mb2N1cygpfSxMZT1mdW5jdGlvbih0LGUsbil7QyhlLmFsbG93RXNjYXBlS2V5KSYmKHQucHJldmVudERlZmF1bHQoKSxuKGsuZXNjKSl9LE9lPWZ1bmN0aW9uKHQsZSxuKXt0LnBvcHVwLm9uY2xpY2s9ZnVuY3Rpb24oKXtlLnNob3dDb25maXJtQnV0dG9ufHxlLnNob3dDYW5jZWxCdXR0b258fGUuc2hvd0Nsb3NlQnV0dG9ufHxlLmlucHV0fHxuKGsuY2xvc2UpfX0sTWU9ITEsVmU9ZnVuY3Rpb24oZSl7ZS5wb3B1cC5vbm1vdXNlZG93bj1mdW5jdGlvbigpe2UuY29udGFpbmVyLm9ubW91c2V1cD1mdW5jdGlvbih0KXtlLmNvbnRhaW5lci5vbm1vdXNldXA9dm9pZCAwLHQudGFyZ2V0PT09ZS5jb250YWluZXImJihNZT0hMCl9fX0samU9ZnVuY3Rpb24oZSl7ZS5jb250YWluZXIub25tb3VzZWRvd249ZnVuY3Rpb24oKXtlLnBvcHVwLm9ubW91c2V1cD1mdW5jdGlvbih0KXtlLnBvcHVwLm9ubW91c2V1cD12b2lkIDAsdC50YXJnZXQhPT1lLnBvcHVwJiYhZS5wb3B1cC5jb250YWlucyh0LnRhcmdldCl8fChNZT0hMCl9fX0sSGU9ZnVuY3Rpb24oZSxuLG8pe2UuY29udGFpbmVyLm9uY2xpY2s9ZnVuY3Rpb24odCl7TWU/TWU9ITE6dC50YXJnZXQ9PT1lLmNvbnRhaW5lciYmQyhuLmFsbG93T3V0c2lkZUNsaWNrKSYmbyhrLmJhY2tkcm9wKX19O3ZhciBJZT1mdW5jdGlvbih0LGUsbil7ZS50aW1lciYmKHQudGltZW91dD1uZXcgdGUoZnVuY3Rpb24oKXtuKFwidGltZXJcIiksZGVsZXRlIHQudGltZW91dH0sZS50aW1lcikpfSxxZT1mdW5jdGlvbih0LGUpe2lmKCFlLnRvYXN0KXJldHVybiBDKGUuYWxsb3dFbnRlcktleSk/ZS5mb2N1c0NhbmNlbCYmVih0LmNhbmNlbEJ1dHRvbik/dC5jYW5jZWxCdXR0b24uZm9jdXMoKTplLmZvY3VzQ29uZmlybSYmVih0LmNvbmZpcm1CdXR0b24pP3QuY29uZmlybUJ1dHRvbi5mb2N1cygpOnZvaWQgbGUoMCwtMSwxKTpSZSgpfSxSZT1mdW5jdGlvbigpe2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1ciYmZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCl9O3ZhciBEZSxOZT1PYmplY3QuZnJlZXplKHtoaWRlTG9hZGluZzpVdCxkaXNhYmxlTG9hZGluZzpVdCxnZXRJbnB1dDpmdW5jdGlvbih0KXt2YXIgZT1odC5pbm5lclBhcmFtcy5nZXQodHx8dGhpcyksbj1odC5kb21DYWNoZS5nZXQodHx8dGhpcyk7cmV0dXJuIG4/QihuLmNvbnRlbnQsZS5pbnB1dCk6bnVsbH0sY2xvc2U6WnQsY2xvc2VQb3B1cDpadCxjbG9zZU1vZGFsOlp0LGNsb3NlVG9hc3Q6WnQsZW5hYmxlQnV0dG9uczpmdW5jdGlvbigpe1h0KHRoaXMsW1wiY29uZmlybUJ1dHRvblwiLFwiY2FuY2VsQnV0dG9uXCJdLCExKX0sZGlzYWJsZUJ1dHRvbnM6ZnVuY3Rpb24oKXtYdCh0aGlzLFtcImNvbmZpcm1CdXR0b25cIixcImNhbmNlbEJ1dHRvblwiXSwhMCl9LGVuYWJsZUNvbmZpcm1CdXR0b246ZnVuY3Rpb24oKXtoKFwiU3dhbC5lbmFibGVDb25maXJtQnV0dG9uKClcIixcIlN3YWwuZ2V0Q29uZmlybUJ1dHRvbigpLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKVwiKSxYdCh0aGlzLFtcImNvbmZpcm1CdXR0b25cIl0sITEpfSxkaXNhYmxlQ29uZmlybUJ1dHRvbjpmdW5jdGlvbigpe2goXCJTd2FsLmRpc2FibGVDb25maXJtQnV0dG9uKClcIixcIlN3YWwuZ2V0Q29uZmlybUJ1dHRvbigpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJylcIiksWHQodGhpcyxbXCJjb25maXJtQnV0dG9uXCJdLCEwKX0sZW5hYmxlSW5wdXQ6ZnVuY3Rpb24oKXtyZXR1cm4gR3QodGhpcy5nZXRJbnB1dCgpLCExKX0sZGlzYWJsZUlucHV0OmZ1bmN0aW9uKCl7cmV0dXJuIEd0KHRoaXMuZ2V0SW5wdXQoKSwhMCl9LHNob3dWYWxpZGF0aW9uTWVzc2FnZTpmdW5jdGlvbih0KXt2YXIgZT1odC5kb21DYWNoZS5nZXQodGhpcyk7ZS52YWxpZGF0aW9uTWVzc2FnZS5pbm5lckhUTUw9dDt2YXIgbj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlLnBvcHVwKTtlLnZhbGlkYXRpb25NZXNzYWdlLnN0eWxlLm1hcmdpbkxlZnQ9XCItXCIuY29uY2F0KG4uZ2V0UHJvcGVydHlWYWx1ZShcInBhZGRpbmctbGVmdFwiKSksZS52YWxpZGF0aW9uTWVzc2FnZS5zdHlsZS5tYXJnaW5SaWdodD1cIi1cIi5jb25jYXQobi5nZXRQcm9wZXJ0eVZhbHVlKFwicGFkZGluZy1yaWdodFwiKSksTChlLnZhbGlkYXRpb25NZXNzYWdlKTt2YXIgbz10aGlzLmdldElucHV0KCk7byYmKG8uc2V0QXR0cmlidXRlKFwiYXJpYS1pbnZhbGlkXCIsITApLG8uc2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRCeVwiLHhbXCJ2YWxpZGF0aW9uLW1lc3NhZ2VcIl0pLEEobykscnQobyx4LmlucHV0ZXJyb3IpKX0scmVzZXRWYWxpZGF0aW9uTWVzc2FnZTpmdW5jdGlvbigpe3ZhciB0PWh0LmRvbUNhY2hlLmdldCh0aGlzKTt0LnZhbGlkYXRpb25NZXNzYWdlJiZPKHQudmFsaWRhdGlvbk1lc3NhZ2UpO3ZhciBlPXRoaXMuZ2V0SW5wdXQoKTtlJiYoZS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWludmFsaWRcIiksZS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZEJ5XCIpLGF0KGUseC5pbnB1dGVycm9yKSl9LGdldFByb2dyZXNzU3RlcHM6ZnVuY3Rpb24oKXtyZXR1cm4gaChcIlN3YWwuZ2V0UHJvZ3Jlc3NTdGVwcygpXCIsXCJjb25zdCBzd2FsSW5zdGFuY2UgPSBTd2FsLmZpcmUoe3Byb2dyZXNzU3RlcHM6IFsnMScsICcyJywgJzMnXX0pOyBjb25zdCBwcm9ncmVzc1N0ZXBzID0gc3dhbEluc3RhbmNlLnBhcmFtcy5wcm9ncmVzc1N0ZXBzXCIpLGh0LmlubmVyUGFyYW1zLmdldCh0aGlzKS5wcm9ncmVzc1N0ZXBzfSxzZXRQcm9ncmVzc1N0ZXBzOmZ1bmN0aW9uKHQpe2goXCJTd2FsLnNldFByb2dyZXNzU3RlcHMoKVwiLFwiU3dhbC51cGRhdGUoKVwiKTt2YXIgZT1zKHt9LGh0LmlubmVyUGFyYW1zLmdldCh0aGlzKSx7cHJvZ3Jlc3NTdGVwczp0fSk7U3QoMCxlKSxodC5pbm5lclBhcmFtcy5zZXQodGhpcyxlKX0sc2hvd1Byb2dyZXNzU3RlcHM6ZnVuY3Rpb24oKXt2YXIgdD1odC5kb21DYWNoZS5nZXQodGhpcyk7TCh0LnByb2dyZXNzU3RlcHMpfSxoaWRlUHJvZ3Jlc3NTdGVwczpmdW5jdGlvbigpe3ZhciB0PWh0LmRvbUNhY2hlLmdldCh0aGlzKTtPKHQucHJvZ3Jlc3NTdGVwcyl9LF9tYWluOmZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0KXtmb3IodmFyIGUgaW4gdClNdChpPWUpfHx3KCdVbmtub3duIHBhcmFtZXRlciBcIicuY29uY2F0KGksJ1wiJykpLHQudG9hc3QmJihvPWUsLTEhPT1EdC5pbmRleE9mKG8pJiZ3KCdUaGUgcGFyYW1ldGVyIFwiJy5jb25jYXQobywnXCIgaXMgaW5jb21wYXRpYmxlIHdpdGggdG9hc3RzJykpKSxWdChuPXZvaWQgMCkmJmgobixWdChuKSk7dmFyIG4sbyxpfSh0KSxSKCkmJkh0LnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjayYmKEh0LnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaygpLGRlbGV0ZSBIdC5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2spLEh0LmRlZmVyRGlzcG9zYWxUaW1lciYmKGNsZWFyVGltZW91dChIdC5kZWZlckRpc3Bvc2FsVGltZXIpLGRlbGV0ZSBIdC5kZWZlckRpc3Bvc2FsVGltZXIpO3ZhciBlPXMoe30sSXQsdCk7bmUoZSksT2JqZWN0LmZyZWV6ZShlKSxIdC50aW1lb3V0JiYoSHQudGltZW91dC5zdG9wKCksZGVsZXRlIEh0LnRpbWVvdXQpLGNsZWFyVGltZW91dChIdC5yZXN0b3JlRm9jdXNUaW1lb3V0KTt2YXIgbj1mdW5jdGlvbih0KXt2YXIgZT17cG9wdXA6UigpLGNvbnRhaW5lcjpIKCksY29udGVudDpGKCksYWN0aW9uczpaKCksY29uZmlybUJ1dHRvbjpLKCksY2FuY2VsQnV0dG9uOlkoKSxjbG9zZUJ1dHRvbjpKKCksdmFsaWRhdGlvbk1lc3NhZ2U6VygpLHByb2dyZXNzU3RlcHM6eigpfTtyZXR1cm4gaHQuZG9tQ2FjaGUuc2V0KHQsZSksZX0odGhpcyk7cmV0dXJuIEJ0KHRoaXMsZSksaHQuaW5uZXJQYXJhbXMuc2V0KHRoaXMsZSksZnVuY3Rpb24obixvLGkpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbiB0KGUpe24uY2xvc2VQb3B1cCh7ZGlzbWlzczplfSl9O0t0LnN3YWxQcm9taXNlUmVzb2x2ZS5zZXQobix0KTtJZShIdCxpLGUpO28uY29uZmlybUJ1dHRvbi5vbmNsaWNrPWZ1bmN0aW9uKCl7cmV0dXJuIGFlKG4saSl9O28uY2FuY2VsQnV0dG9uLm9uY2xpY2s9ZnVuY3Rpb24oKXtyZXR1cm4gc2UobixlKX07by5jbG9zZUJ1dHRvbi5vbmNsaWNrPWZ1bmN0aW9uKCl7cmV0dXJuIGUoay5jbG9zZSl9O2RlKG8saSxlKTtjZShuLEh0LGksZSk7aWYoaS50b2FzdCYmKGkuaW5wdXR8fGkuZm9vdGVyfHxpLnNob3dDbG9zZUJ1dHRvbikpe3J0KGRvY3VtZW50LmJvZHkseFtcInRvYXN0LWNvbHVtblwiXSl9ZWxzZXthdChkb2N1bWVudC5ib2R5LHhbXCJ0b2FzdC1jb2x1bW5cIl0pfXJlKG4saSk7aWUoaSk7cWUobyxpKTtvLmNvbnRhaW5lci5zY3JvbGxUb3A9MH0pfSh0aGlzLG4sZSl9LHVwZGF0ZTpmdW5jdGlvbihlKXt2YXIgdD1SKCk7aWYoIXR8fGIodCx4LmhpZGUpKXJldHVybiB3KFwiWW91J3JlIHRyeWluZyB0byB1cGRhdGUgdGhlIGNsb3NlZCBvciBjbG9zaW5nIHBvcHVwLCB0aGF0IHdvbid0IHdvcmsuIFVzZSB0aGUgdXBkYXRlKCkgbWV0aG9kIGluIHByZUNvbmZpcm0gcGFyYW1ldGVyIG9yIHNob3cgYSBuZXcgcG9wdXAuXCIpO3ZhciBuPXt9O09iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24odCl7RmUuaXNVcGRhdGFibGVQYXJhbWV0ZXIodCk/blt0XT1lW3RdOncoJ0ludmFsaWQgcGFyYW1ldGVyIHRvIHVwZGF0ZTogXCInLmNvbmNhdCh0LCdcIi4gVXBkYXRhYmxlIHBhcmFtcyBhcmUgbGlzdGVkIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zd2VldGFsZXJ0Mi9zd2VldGFsZXJ0Mi9ibG9iL21hc3Rlci9zcmMvdXRpbHMvcGFyYW1zLmpzJykpfSk7dmFyIG89cyh7fSxodC5pbm5lclBhcmFtcy5nZXQodGhpcyksbik7QnQodGhpcyxvKSxodC5pbm5lclBhcmFtcy5zZXQodGhpcyxvKSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLHtwYXJhbXM6e3ZhbHVlOnMoe30sdGhpcy5wYXJhbXMsZSksd3JpdGFibGU6ITEsZW51bWVyYWJsZTohMH19KX19KTtmdW5jdGlvbiBVZSgpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe1widW5kZWZpbmVkXCI9PXR5cGVvZiBQcm9taXNlJiZnKFwiVGhpcyBwYWNrYWdlIHJlcXVpcmVzIGEgUHJvbWlzZSBsaWJyYXJ5LCBwbGVhc2UgaW5jbHVkZSBhIHNoaW0gdG8gZW5hYmxlIGl0IGluIHRoaXMgYnJvd3NlciAoU2VlOiBodHRwczovL2dpdGh1Yi5jb20vc3dlZXRhbGVydDIvc3dlZXRhbGVydDIvd2lraS9NaWdyYXRpb24tZnJvbS1Td2VldEFsZXJ0LXRvLVN3ZWV0QWxlcnQyIzEtaWUtc3VwcG9ydClcIiksRGU9dGhpcztmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPW5ldyBBcnJheSh0KSxuPTA7bjx0O24rKyllW25dPWFyZ3VtZW50c1tuXTt2YXIgbz1PYmplY3QuZnJlZXplKHRoaXMuY29uc3RydWN0b3IuYXJnc1RvUGFyYW1zKGUpKTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLHtwYXJhbXM6e3ZhbHVlOm8sd3JpdGFibGU6ITEsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9fSk7dmFyIGk9dGhpcy5fbWFpbih0aGlzLnBhcmFtcyk7aHQucHJvbWlzZS5zZXQodGhpcyxpKX19VWUucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24odCl7cmV0dXJuIGh0LnByb21pc2UuZ2V0KHRoaXMpLnRoZW4odCl9LFVlLnByb3RvdHlwZS5maW5hbGx5PWZ1bmN0aW9uKHQpe3JldHVybiBodC5wcm9taXNlLmdldCh0aGlzKS5maW5hbGx5KHQpfSxzKFVlLnByb3RvdHlwZSxOZSkscyhVZSxOdCksT2JqZWN0LmtleXMoTmUpLmZvckVhY2goZnVuY3Rpb24oZSl7VWVbZV09ZnVuY3Rpb24oKXt2YXIgdDtpZihEZSlyZXR1cm4odD1EZSlbZV0uYXBwbHkodCxhcmd1bWVudHMpfX0pLFVlLkRpc21pc3NSZWFzb249ayxVZS52ZXJzaW9uPVwiOC4xOS4wXCI7dmFyIEZlPVVlO3JldHVybiBGZS5kZWZhdWx0PUZlfSksdm9pZCAwIT09dGhpcyYmdGhpcy5Td2VldGFsZXJ0MiYmKHRoaXMuc3dhbD10aGlzLnN3ZWV0QWxlcnQ9dGhpcy5Td2FsPXRoaXMuU3dlZXRBbGVydD10aGlzLlN3ZWV0YWxlcnQyKTsiLCJpbXBvcnQgZm9jdXNGaXJzdElucHV0IGZyb20gJy4vaW5wdXQnO1xuXG4kKGRvY3VtZW50KS5vbignY2xpY2snLCAnW2RhdGEtYWNjb3JkaW9uLWNsaWNrXScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xpY2sgPSAkKHRoaXMpLFxuICAgICAgICBjbGlja09wZW4gPSBjbGljay5hdHRyKCdkYXRhLWFjY29yZGlvbi1jbGljaycpLFxuICAgICAgICBpdGVtID0gY2xpY2suY2xvc2VzdCgnLmpzX2FjY29yZGlvbl9pdGVtJyksXG4gICAgICAgIGNsaWNrUGFyZW50ID0gY2xpY2suY2xvc2VzdCgnLmpzX2FjY29yZGlvbl9wYXJlbnQnKSxcbiAgICAgICAgb3BlblNlbGVjdG9yID0gJ1tkYXRhLWFjY29yZGlvbj1cIicrIGNsaWNrT3BlbiArJ1wiXScsXG4gICAgICAgIG9wZW5CbG9jayA9IGNsaWNrUGFyZW50LmZpbmQob3BlblNlbGVjdG9yKSxcbiAgICAgICAganNBbmltID0gJCgnYm9keScpLmF0dHIoJ2RhdGEtanMtYW5pbScpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNsaWNrUGFyZW50Lmhhc0NsYXNzKCdqc190b2dnbGUnKSkge1xuICAgICAgICAgICAgdmFyIGFsbE9wZW5CbG9jayA9IGNsaWNrUGFyZW50LmZpbmQoJ1tkYXRhLWFjY29yZGlvbl0nKSxcbiAgICAgICAgICAgICAgICBhbGxDbGljayA9IGNsaWNrUGFyZW50LmZpbmQoJCgnW2RhdGEtYWNjb3JkaW9uLWNsaWNrXScpKSxcbiAgICAgICAgICAgICAgICBhbGxJdGVtID0gY2xpY2tQYXJlbnQuZmluZCgnLmpzX2FjY29yZGlvbl9pdGVtJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpzQW5pbS5pbmRleE9mKCdhbmltJykgIT0gLTEgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignbG9naW4nKSAhPSAtMSkge1xuICAgICAgICAgICAgdmFyIGR1ciA9IDMwMDtcbiAgICAgICAgfVxuICAgIGlmICghY2xpY2suaGFzQ2xhc3MoJ2lzX2FjdGl2ZScpKSB7XG4gICAgICAgIGlmIChjbGlja1BhcmVudC5oYXNDbGFzcygnanNfdG9nZ2xlJykpIHtcbiAgICAgICAgICAgIGFsbENsaWNrLnJlbW92ZUNsYXNzKCdpc19hY3RpdmUnKTtcbiAgICAgICAgICAgIGFsbEl0ZW0ucmVtb3ZlQ2xhc3MoJ2lzX2FjdGl2ZScpO1xuICAgICAgICAgICAgaWYgKGpzQW5pbS5pbmRleE9mKCdhbmltJykgIT0gLTEgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignbG9naW4nKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIGFsbE9wZW5CbG9jay5zbGlkZVVwKGR1ciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdpc19hY3RpdmUnKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGxPcGVuQmxvY2sucmVtb3ZlQ2xhc3MoJ2lzX2FjdGl2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNsaWNrLmFkZENsYXNzKCdpc19hY3RpdmUnKTtcbiAgICAgICAgaXRlbS5hZGRDbGFzcygnaXNfYWN0aXZlJyk7XG4gICAgICAgIGlmIChqc0FuaW0uaW5kZXhPZignYW5pbScpICE9IC0xIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJ2xvZ2luJykgIT0gLTEpIHtcbiAgICAgICAgICAgIG9wZW5CbG9jay5zbGlkZURvd24oZHVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnaXNfYWN0aXZlJykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgICAgICBmb2N1c0ZpcnN0SW5wdXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3BlbkJsb2NrLmFkZENsYXNzKCdpc19hY3RpdmUnKTtcbiAgICAgICAgICAgIGZvY3VzRmlyc3RJbnB1dCgpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2xpY2sucmVtb3ZlQ2xhc3MoJ2lzX2FjdGl2ZScpO1xuICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCdpc19hY3RpdmUnKTtcbiAgICAgICAgaWYgKGpzQW5pbS5pbmRleE9mKCdhbmltJykgIT0gLTEgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignbG9naW4nKSAhPSAtMSkge1xuICAgICAgICAgICAgb3BlbkJsb2NrLnNsaWRlVXAoZHVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnaXNfYWN0aXZlJykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3BlbkJsb2NrLnJlbW92ZUNsYXNzKCdpc19hY3RpdmUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2xpY2tQYXJlbnQuaGFzQ2xhc3MoJ2pzX2hhc2gnKSkge1xuICAgICAgICBhY2NvcmRpb25IYXNoKCk7XG4gICAgICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gY2xpY2tPcGVuO1xuICAgIH1cbn0pXG5cbmZ1bmN0aW9uIGFjY29yZGlvbkhhc2goKSB7XG4gICAgbGV0IGFjY29yZGlvbiA9ICQoJy5hY2NvcmRpb246dmlzaWJsZScpLFxuICAgICAgICBoYXNoQWNjb3JkaW9uID0gJyc7XG4gICAgJC5lYWNoKGFjY29yZGlvbiwgZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICAvLyBuZXdJbmRleCA9IChpbmRleC0kKHZhbHVlKS5sZW5ndGggPCAwKSA/IGluZGV4IDogaW5kZXgtJCh2YWx1ZSkubGVuZ3RoO1xuICAgICAgICBpZiAoJCh2YWx1ZSkuZmluZCgnW2RhdGEtYWNjb3JkaW9uLWNsaWNrXS5pc19hY3RpdmUnKS5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgaGFzaEFjY29yZGlvbiArPSAnIScgKyBpbmRleCArICctJyArICQodmFsdWUpLmZpbmQoJ1tkYXRhLWFjY29yZGlvbi1jbGlja10uaXNfYWN0aXZlJykuYXR0cignZGF0YS1hY2NvcmRpb24tY2xpY2snKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhc2hBY2NvcmRpb24gKz0gJyEnICsgaW5kZXggKyAnLScgKyAkKHZhbHVlKS5maW5kKCcuanNfYWNjb3JkaW9uX2l0ZW0nKS5lcSgwKS5maW5kKCdbZGF0YS1hY2NvcmRpb24tY2xpY2tdJykuYXR0cignZGF0YS1hY2NvcmRpb24tY2xpY2snKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoQWNjb3JkaW9uO1xufVxuXG5mdW5jdGlvbiBhY2NvcmRpb25IYXNoQWN0aXZlICgpIHtcblxuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCAhPSAnJykge1xuICAgICAgICB2YXIgc2Vjb25kTnVtID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3BsaXQoJy0nKVsxXTtcbiAgICAgICAgJCgnLmpzX2FjY29yZGlvbl9saW5rW2RhdGEtYWNjb3JkaW9uLWNsaWNrPVwiJytzZWNvbmROdW0rJ1wiXScpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgfVxufVxuXG5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgYWNjb3JkaW9uSGFzaEFjdGl2ZSAoKTtcbn0sMTAwMClcbiJdLCJzb3VyY2VSb290IjoiIn0=
!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}({"+jDx":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Aquest camp és obligatori.",remote:"Si us plau, omple aquest camp.",email:"Si us plau, escriu una adreça de correu-e vàlida",url:"Si us plau, escriu una URL vàlida.",date:"Si us plau, escriu una data vàlida.",dateISO:"Si us plau, escriu una data (ISO) vàlida.",number:"Si us plau, escriu un número enter vàlid.",digits:"Si us plau, escriu només dígits.",creditcard:"Si us plau, escriu un número de tarjeta vàlid.",equalTo:"Si us plau, escriu el mateix valor de nou.",extension:"Si us plau, escriu un valor amb una extensió acceptada.",maxlength:e.validator.format("Si us plau, no escriguis més de {0} caracters."),minlength:e.validator.format("Si us plau, no escriguis menys de {0} caracters."),rangelength:e.validator.format("Si us plau, escriu un valor entre {0} i {1} caracters."),range:e.validator.format("Si us plau, escriu un valor entre {0} i {1}."),max:e.validator.format("Si us plau, escriu un valor menor o igual a {0}."),min:e.validator.format("Si us plau, escriu un valor major o igual a {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},"+rSl":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"To polje je obvezno.",remote:"Vpis v tem polju ni v pravi obliki.",email:"Prosimo, vnesite pravi email naslov.",url:"Prosimo, vnesite pravi URL.",date:"Prosimo, vnesite pravi datum.",dateISO:"Prosimo, vnesite pravi datum (ISO).",number:"Prosimo, vnesite pravo številko.",digits:"Prosimo, vnesite samo številke.",creditcard:"Prosimo, vnesite pravo številko kreditne kartice.",equalTo:"Prosimo, ponovno vnesite enako vsebino.",extension:"Prosimo, vnesite vsebino z pravo končnico.",maxlength:e.validator.format("Prosimo, da ne vnašate več kot {0} znakov."),minlength:e.validator.format("Prosimo, vnesite vsaj {0} znakov."),rangelength:e.validator.format("Prosimo, vnesite od {0} do {1} znakov."),range:e.validator.format("Prosimo, vnesite vrednost med {0} in {1}."),max:e.validator.format("Prosimo, vnesite vrednost manjšo ali enako {0}."),min:e.validator.format("Prosimo, vnesite vrednost večjo ali enako {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},"/+fy":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Acest câmp este obligatoriu.",remote:"Te rugăm să completezi acest câmp.",email:"Te rugăm să introduci o adresă de email validă",url:"Te rugăm sa introduci o adresă URL validă.",date:"Te rugăm să introduci o dată corectă.",dateISO:"Te rugăm să introduci o dată (ISO) corectă.",number:"Te rugăm să introduci un număr întreg valid.",digits:"Te rugăm să introduci doar cifre.",creditcard:"Te rugăm să introduci un numar de carte de credit valid.",equalTo:"Te rugăm să reintroduci valoarea.",extension:"Te rugăm să introduci o valoare cu o extensie validă.",maxlength:e.validator.format("Te rugăm să nu introduci mai mult de {0} caractere."),minlength:e.validator.format("Te rugăm să introduci cel puțin {0} caractere."),rangelength:e.validator.format("Te rugăm să introduci o valoare între {0} și {1} caractere."),range:e.validator.format("Te rugăm să introduci o valoare între {0} și {1}."),max:e.validator.format("Te rugăm să introduci o valoare egal sau mai mică decât {0}."),min:e.validator.format("Te rugăm să introduci o valoare egal sau mai mare decât {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},"/EBr":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"このフィールドは必須です。",remote:"このフィールドを修正してください。",email:"有効なEメールアドレスを入力してください。",url:"有効なURLを入力してください。",date:"有効な日付を入力してください。",dateISO:"有効な日付（ISO）を入力してください。",number:"有効な数字を入力してください。",digits:"数字のみを入力してください。",creditcard:"有効なクレジットカード番号を入力してください。",equalTo:"同じ値をもう一度入力してください。",extension:"有効な拡張子を含む値を入力してください。",maxlength:e.validator.format("{0} 文字以内で入力してください。"),minlength:e.validator.format("{0} 文字以上で入力してください。"),rangelength:e.validator.format("{0} 文字から {1} 文字までの値を入力してください。"),range:e.validator.format("{0} から {1} までの値を入力してください。"),step:e.validator.format("{0} の倍数を入力してください。"),max:e.validator.format("{0} 以下の値を入力してください。"),min:e.validator.format("{0} 以上の値を入力してください。")}),e})?i.apply(t,r):i)||(e.exports=o)},"/QnD":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Šis laukas yra privalomas.",remote:"Prašau pataisyti šį lauką.",email:"Prašau įvesti teisingą elektroninio pašto adresą.",url:"Prašau įvesti teisingą URL.",date:"Prašau įvesti teisingą datą.",dateISO:"Prašau įvesti teisingą datą (ISO).",number:"Prašau įvesti teisingą skaičių.",digits:"Prašau naudoti tik skaitmenis.",creditcard:"Prašau įvesti teisingą kreditinės kortelės numerį.",equalTo:"Prašau įvestį tą pačią reikšmę dar kartą.",extension:"Prašau įvesti reikšmę su teisingu plėtiniu.",maxlength:e.validator.format("Prašau įvesti ne daugiau kaip {0} simbolių."),minlength:e.validator.format("Prašau įvesti bent {0} simbolius."),rangelength:e.validator.format("Prašau įvesti reikšmes, kurių ilgis nuo {0} iki {1} simbolių."),range:e.validator.format("Prašau įvesti reikšmę intervale nuo {0} iki {1}."),max:e.validator.format("Prašau įvesti reikšmę mažesnę arba lygią {0}."),min:e.validator.format("Prašau įvesti reikšmę didesnę arba lygią {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},0:function(e,t,n){n("bUC5"),e.exports=n("pyCd")},"0yQz":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"必須填寫",remote:"請修正此欄位",email:"請輸入有效的電子郵件",url:"請輸入有效的網址",date:"請輸入有效的日期",dateISO:"請輸入有效的日期 (YYYY-MM-DD)",number:"請輸入正確的數值",digits:"只可輸入數字",creditcard:"請輸入有效的信用卡號碼",equalTo:"請重複輸入一次",extension:"請輸入有效的後綴",maxlength:e.validator.format("最多 {0} 個字"),minlength:e.validator.format("最少 {0} 個字"),rangelength:e.validator.format("請輸入長度為 {0} 至 {1} 之間的字串"),range:e.validator.format("請輸入 {0} 至 {1} 之間的數值"),step:e.validator.format("請輸入 {0} 的整數倍值"),max:e.validator.format("請輸入不大於 {0} 的數值"),min:e.validator.format("請輸入不小於 {0} 的數值")}),e})?i.apply(t,r):i)||(e.exports=o)},"1IF6":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"هذا الحقل إلزامي",remote:"يرجى تصحيح هذا الحقل للمتابعة",email:"رجاء إدخال عنوان بريد إلكتروني صحيح",url:"رجاء إدخال عنوان موقع إلكتروني صحيح",date:"رجاء إدخال تاريخ صحيح",dateISO:"رجاء إدخال تاريخ صحيح (ISO)",number:"رجاء إدخال عدد بطريقة صحيحة",digits:"رجاء إدخال أرقام فقط",creditcard:"رجاء إدخال رقم بطاقة ائتمان صحيح",equalTo:"رجاء إدخال نفس القيمة",extension:"رجاء إدخال ملف بامتداد موافق عليه",maxlength:e.validator.format("الحد الأقصى لعدد الحروف هو {0}"),minlength:e.validator.format("الحد الأدنى لعدد الحروف هو {0}"),rangelength:e.validator.format("عدد الحروف يجب أن يكون بين {0} و {1}"),range:e.validator.format("رجاء إدخال عدد قيمته بين {0} و {1}"),max:e.validator.format("رجاء إدخال عدد أقل من أو يساوي {0}"),min:e.validator.format("رجاء إدخال عدد أكبر من أو يساوي {0}")}),e})?i.apply(t,r):i)||(e.exports=o)},"3tqK":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Detta f&auml;lt &auml;r obligatoriskt.",remote:"Var snäll och åtgärda detta fält.",maxlength:e.validator.format("Du f&aring;r ange h&ouml;gst {0} tecken."),minlength:e.validator.format("Du m&aring;ste ange minst {0} tecken."),rangelength:e.validator.format("Ange minst {0} och max {1} tecken."),email:"Ange en korrekt e-postadress.",url:"Ange en korrekt URL.",date:"Ange ett korrekt datum.",dateISO:"Ange ett korrekt datum (&Aring;&Aring;&Aring;&Aring;-MM-DD).",number:"Ange ett korrekt nummer.",digits:"Ange endast siffror.",equalTo:"Ange samma v&auml;rde igen.",range:e.validator.format("Ange ett v&auml;rde mellan {0} och {1}."),max:e.validator.format("Ange ett v&auml;rde som &auml;r mindre eller lika med {0}."),min:e.validator.format("Ange ett v&auml;rde som &auml;r st&ouml;rre eller lika med {0}."),creditcard:"Ange ett korrekt kreditkortsnummer.",pattern:"Ogiltigt format."}),e})?i.apply(t,r):i)||(e.exports=o)},"5nEI":function(e,t,n){!function(t,n){"use strict";var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var r,o=!1,a=void 0!==t;a&&t.getComputedStyle?(r=n.createElement("div"),["","-webkit-","-moz-","-ms-"].some((function(e){try{r.style.position=e+"sticky"}catch(e){}return""!=r.style.position}))&&(o=!0)):o=!0;var s=!1,l="undefined"!=typeof ShadowRoot,u={top:null,left:null},c=[];function d(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}function f(e){return parseFloat(e)||0}function p(e){for(var t=0;e;)t+=e.offsetTop,e=e.offsetParent;return t}var h=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t instanceof HTMLElement))throw new Error("First argument must be HTMLElement");if(c.some((function(e){return e._node===t})))throw new Error("Stickyfill is already applied to this node");this._node=t,this._stickyMode=null,this._active=!1,c.push(this),this.refresh()}return i(e,[{key:"refresh",value:function(){if(!o&&!this._removed){this._active&&this._deactivate();var e=this._node,i=getComputedStyle(e),r={position:i.position,top:i.top,display:i.display,marginTop:i.marginTop,marginBottom:i.marginBottom,marginLeft:i.marginLeft,marginRight:i.marginRight,cssFloat:i.cssFloat};if(!isNaN(parseFloat(r.top))&&"table-cell"!=r.display&&"none"!=r.display){this._active=!0;var a=e.style.position;"sticky"!=i.position&&"-webkit-sticky"!=i.position||(e.style.position="static");var s=e.parentNode,u=l&&s instanceof ShadowRoot?s.host:s,c=e.getBoundingClientRect(),h=u.getBoundingClientRect(),m=getComputedStyle(u);this._parent={node:u,styles:{position:u.style.position},offsetHeight:u.offsetHeight},this._offsetToWindow={left:c.left,right:n.documentElement.clientWidth-c.right},this._offsetToParent={top:c.top-h.top-f(m.borderTopWidth),left:c.left-h.left-f(m.borderLeftWidth),right:-c.right+h.right-f(m.borderRightWidth)},this._styles={position:a,top:e.style.top,bottom:e.style.bottom,left:e.style.left,right:e.style.right,width:e.style.width,marginTop:e.style.marginTop,marginLeft:e.style.marginLeft,marginRight:e.style.marginRight};var v=f(r.top);this._limits={start:c.top+t.pageYOffset-v,end:h.top+t.pageYOffset+u.offsetHeight-f(m.borderBottomWidth)-e.offsetHeight-v-f(r.marginBottom)};var g=m.position;"absolute"!=g&&"relative"!=g&&(u.style.position="relative"),this._recalcPosition();var y=this._clone={};y.node=n.createElement("div"),d(y.node.style,{width:c.right-c.left+"px",height:c.bottom-c.top+"px",marginTop:r.marginTop,marginBottom:r.marginBottom,marginLeft:r.marginLeft,marginRight:r.marginRight,cssFloat:r.cssFloat,padding:0,border:0,borderSpacing:0,fontSize:"1em",position:"static"}),s.insertBefore(y.node,e),y.docOffsetTop=p(y.node)}}}},{key:"_recalcPosition",value:function(){if(this._active&&!this._removed){var e=u.top<=this._limits.start?"start":u.top>=this._limits.end?"end":"middle";if(this._stickyMode!=e){switch(e){case"start":d(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:this._offsetToParent.top+"px",bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"middle":d(this._node.style,{position:"fixed",left:this._offsetToWindow.left+"px",right:this._offsetToWindow.right+"px",top:this._styles.top,bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"end":d(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:"auto",bottom:0,width:"auto",marginLeft:0,marginRight:0})}this._stickyMode=e}}}},{key:"_fastCheck",value:function(){this._active&&!this._removed&&(Math.abs(p(this._clone.node)-this._clone.docOffsetTop)>1||Math.abs(this._parent.node.offsetHeight-this._parent.offsetHeight)>1)&&this.refresh()}},{key:"_deactivate",value:function(){var e=this;this._active&&!this._removed&&(this._clone.node.parentNode.removeChild(this._clone.node),delete this._clone,d(this._node.style,this._styles),delete this._styles,c.some((function(t){return t!==e&&t._parent&&t._parent.node===e._parent.node}))||d(this._parent.node.style,this._parent.styles),delete this._parent,this._stickyMode=null,this._active=!1,delete this._offsetToWindow,delete this._offsetToParent,delete this._limits)}},{key:"remove",value:function(){var e=this;this._deactivate(),c.some((function(t,n){if(t._node===e._node)return c.splice(n,1),!0})),this._removed=!0}}]),e}(),m={stickies:c,Sticky:h,forceSticky:function(){o=!1,v(),this.refreshAll()},addOne:function(e){if(!(e instanceof HTMLElement)){if(!e.length||!e[0])return;e=e[0]}for(var t=0;t<c.length;t++)if(c[t]._node===e)return c[t];return new h(e)},add:function(e){if(e instanceof HTMLElement&&(e=[e]),e.length){for(var t=[],n=function(n){var i=e[n];return i instanceof HTMLElement?c.some((function(e){if(e._node===i)return t.push(e),!0}))?"continue":void t.push(new h(i)):(t.push(void 0),"continue")},i=0;i<e.length;i++)n(i);return t}},refreshAll:function(){c.forEach((function(e){return e.refresh()}))},removeOne:function(e){if(!(e instanceof HTMLElement)){if(!e.length||!e[0])return;e=e[0]}c.some((function(t){if(t._node===e)return t.remove(),!0}))},remove:function(e){if(e instanceof HTMLElement&&(e=[e]),e.length)for(var t=function(t){var n=e[t];c.some((function(e){if(e._node===n)return e.remove(),!0}))},n=0;n<e.length;n++)t(n)},removeAll:function(){for(;c.length;)c[0].remove()}};function v(){if(!s){s=!0,o(),t.addEventListener("scroll",o),t.addEventListener("resize",m.refreshAll),t.addEventListener("orientationchange",m.refreshAll);var e=void 0,i=void 0,r=void 0;"hidden"in n?(i="hidden",r="visibilitychange"):"webkitHidden"in n&&(i="webkitHidden",r="webkitvisibilitychange"),r?(n[i]||a(),n.addEventListener(r,(function(){n[i]?clearInterval(e):a()}))):a()}function o(){t.pageXOffset!=u.left?(u.top=t.pageYOffset,u.left=t.pageXOffset,m.refreshAll()):t.pageYOffset!=u.top&&(u.top=t.pageYOffset,u.left=t.pageXOffset,c.forEach((function(e){return e._recalcPosition()})))}function a(){e=setInterval((function(){c.forEach((function(e){return e._fastCheck()}))}),500)}}o||v(),e.exports?e.exports=m:a&&(t.Stickyfill=m)}(window,document)},"7GVS":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Eremu hau beharrezkoa da.",remote:"Mesedez, bete eremu hau.",email:"Mesedez, idatzi baliozko posta helbide bat.",url:"Mesedez, idatzi baliozko URL bat.",date:"Mesedez, idatzi baliozko data bat.",dateISO:"Mesedez, idatzi baliozko (ISO) data bat.",number:"Mesedez, idatzi baliozko zenbaki oso bat.",digits:"Mesedez, idatzi digituak soilik.",creditcard:"Mesedez, idatzi baliozko txartel zenbaki bat.",equalTo:"Mesedez, idatzi berdina berriro ere.",extension:"Mesedez, idatzi onartutako luzapena duen balio bat.",maxlength:e.validator.format("Mesedez, ez idatzi {0} karaktere baino gehiago."),minlength:e.validator.format("Mesedez, ez idatzi {0} karaktere baino gutxiago."),rangelength:e.validator.format("Mesedez, idatzi {0} eta {1} karaktere arteko balio bat."),range:e.validator.format("Mesedez, idatzi {0} eta {1} arteko balio bat."),max:e.validator.format("Mesedez, idatzi {0} edo txikiagoa den balio bat."),min:e.validator.format("Mesedez, idatzi {0} edo handiagoa den balio bat.")}),e})?i.apply(t,r):i)||(e.exports=o)},"7hsp":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Hãy nhập.",remote:"Hãy sửa cho đúng.",email:"Hãy nhập email.",url:"Hãy nhập URL.",date:"Hãy nhập ngày.",dateISO:"Hãy nhập ngày (ISO).",number:"Hãy nhập số.",digits:"Hãy nhập chữ số.",creditcard:"Hãy nhập số thẻ tín dụng.",equalTo:"Hãy nhập thêm lần nữa.",extension:"Phần mở rộng không đúng.",maxlength:e.validator.format("Hãy nhập từ {0} kí tự trở xuống."),minlength:e.validator.format("Hãy nhập từ {0} kí tự trở lên."),rangelength:e.validator.format("Hãy nhập từ {0} đến {1} kí tự."),range:e.validator.format("Hãy nhập từ {0} đến {1}."),max:e.validator.format("Hãy nhập từ {0} trở xuống."),min:e.validator.format("Hãy nhập từ {0} trở lên.")}),e})?i.apply(t,r):i)||(e.exports=o)},"8i8H":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Kötelező megadni.",maxlength:e.validator.format("Legfeljebb {0} karakter hosszú legyen."),minlength:e.validator.format("Legalább {0} karakter hosszú legyen."),rangelength:e.validator.format("Legalább {0} és legfeljebb {1} karakter hosszú legyen."),email:"Érvényes e-mail címnek kell lennie.",url:"Érvényes URL-nek kell lennie.",date:"Dátumnak kell lennie.",number:"Számnak kell lennie.",digits:"Csak számjegyek lehetnek.",equalTo:"Meg kell egyeznie a két értéknek.",range:e.validator.format("{0} és {1} közé kell esnie."),max:e.validator.format("Nem lehet nagyobb, mint {0}."),min:e.validator.format("Nem lehet kisebb, mint {0}."),creditcard:"Érvényes hitelkártyaszámnak kell lennie.",remote:"Kérem javítsa ki ezt a mezőt.",dateISO:"Kérem írjon be egy érvényes dátumot (ISO).",step:e.validator.format("A {0} egyik többszörösét adja meg.")}),e})?i.apply(t,r):i)||(e.exports=o)},"8yrV":function(e,t){$(document).ready((function(){if($(".popup-gallery").length&&$(".popup-gallery").each((function(){$(this).magnificPopup({delegate:"a",type:"image",mainClass:"mfp-img-mobile",gallery:{enabled:!0,navigateByImgClick:!0,preload:[0,1]}})})),$(".sticky").length){var e=$(".sticky");Stickyfill.add(e)}if($(".header-search-btn").click((function(){var e=$(this);e.hasClass("active")?(e.removeClass("active"),$(".search-dropdown").slideUp(200),$(".overlay").removeClass("active"),$(".overlay.active").unbind("click")):(e.addClass("active"),$(".search-dropdown").slideDown(200),$(".overlay").addClass("active")),setTimeout((function(){$(".search-input").focus(),$(".overlay.active").click((function(t){$(t.target).is(".overlay.active")&&(e.removeClass("active"),$(".search-dropdown").slideUp(200),$(".overlay").removeClass("active"),$(".overlay.active").unbind("click"))}))}),300),$(document).one("keydown",(function(t){27==t.keyCode&&(e.removeClass("active"),$(".search-dropdown").slideUp(200),$(".overlay").removeClass("active"),$(".overlay.active").unbind("click"))}))})),$(".object-fit-js").length){var t=$(".object-fit-js");objectFitPolyfill(t)}$(".all_price_js").length&&$(".all_price_js").click((function(e){var t=$(this).prev();t.find(".price-item:not(.visible)").slideToggle((function(){t.find("li:not(.visible)").toggleClass("hide")})),$(this).children(".visible-text").toggleClass("text-hide"),$(this).children(".hide-text").toggleClass("text-hide")})),$(".faq-question").length&&$(".faq-question").on("click",(function(e){var t=$(this).closest(".faq-item").find(".faq-answer"),n=$(this).closest(".faq-item").find(".faq-icon");$(this).toggleClass("active"),$(this).hasClass("active")?(n.addClass("active"),t.slideDown(200)):(n.removeClass("active"),t.slideUp(200))}))})),$(window).on("load resize",(function(){window.innerWidth<1025?$(".unit-block-img").length&&$(".unit-block-img-wrap .unit-block-img").insertAfter($(".unit-block-title-js")):$(".unit-block-img").length&&$(".unit-block-info .unit-block-img").appendTo($(".sticky"));if(window.innerWidth<767){if($(".main-section-title-wrap .btn-arrow").length){var e=$(".main-section-title-wrap .btn-arrow");$(e).each((function(){$(this).closest(".main-section").find(".btn-wrap").append($(this))}))}}else if($(".btn-wrap .btn-arrow").length){e=$(".btn-wrap .btn-arrow");$(e).each((function(){$(this).closest(".main-section").find(".main-section-title-wrap").append($(this))}))}}))},"9Fvf":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Este campo es obligatorio.",remote:"Por favor, rellena este campo.",email:"Por favor, escribe una dirección de correo válida.",url:"Por favor, escribe una URL válida.",date:"Por favor, escribe una fecha válida.",dateISO:"Por favor, escribe una fecha (ISO) válida.",number:"Por favor, escribe un número válido.",digits:"Por favor, escribe sólo dígitos.",creditcard:"Por favor, escribe un número de tarjeta válido.",equalTo:"Por favor, escribe el mismo valor de nuevo.",extension:"Por favor, escribe un valor con una extensión aceptada.",maxlength:e.validator.format("Por favor, no escribas más de {0} caracteres."),minlength:e.validator.format("Por favor, no escribas menos de {0} caracteres."),rangelength:e.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres."),range:e.validator.format("Por favor, escribe un valor entre {0} y {1}."),max:e.validator.format("Por favor, escribe un valor menor o igual a {0}."),min:e.validator.format("Por favor, escribe un valor mayor o igual a {0}."),nifES:"Por favor, escribe un NIF válido.",nieES:"Por favor, escribe un NIE válido.",cifES:"Por favor, escribe un CIF válido."}),e})?i.apply(t,r):i)||(e.exports=o)},"9zhc":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Angi en verdi.",remote:"Ugyldig verdi.",email:"Angi en gyldig epostadresse.",url:"Angi en gyldig URL.",date:"Angi en gyldig dato.",dateISO:"Angi en gyldig dato (&ARING;&ARING;&ARING;&ARING;-MM-DD).",number:"Angi et gyldig tall.",digits:"Skriv kun tall.",equalTo:"Skriv samme verdi igjen.",maxlength:e.validator.format("Maksimalt {0} tegn."),minlength:e.validator.format("Minimum {0} tegn."),rangelength:e.validator.format("Angi minimum {0} og maksimum {1} tegn."),range:e.validator.format("Angi en verdi mellom {0} og {1}."),max:e.validator.format("Angi en verdi som er mindre eller lik {0}."),min:e.validator.format("Angi en verdi som er st&oslash;rre eller lik {0}."),step:e.validator.format("Angi en verdi ganger {0}."),creditcard:"Angi et gyldig kredittkortnummer."}),e})?i.apply(t,r):i)||(e.exports=o)},C6E1:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"এই তথ্যটি আবশ্যক।",remote:"এই তথ্যটি ঠিক করুন।",email:"অনুগ্রহ করে একটি সঠিক মেইল ঠিকানা লিখুন।",url:"অনুগ্রহ করে একটি সঠিক লিঙ্ক দিন।",date:"তারিখ সঠিক নয়।",dateISO:"অনুগ্রহ করে একটি সঠিক (ISO) তারিখ লিখুন।",number:"অনুগ্রহ করে একটি সঠিক নম্বর লিখুন।",digits:"এখানে শুধু সংখ্যা ব্যবহার করা যাবে।",creditcard:"অনুগ্রহ করে একটি ক্রেডিট কার্ডের সঠিক নম্বর লিখুন।",equalTo:"একই মান আবার লিখুন।",extension:"সঠিক ধরনের ফাইল আপলোড করুন।",maxlength:e.validator.format("{0}টির বেশি অক্ষর লেখা যাবে না।"),minlength:e.validator.format("{0}টির কম অক্ষর লেখা যাবে না।"),rangelength:e.validator.format("{0} থেকে {1} টি অক্ষর সম্বলিত মান লিখুন।"),range:e.validator.format("{0} থেকে {1} এর মধ্যে একটি মান ব্যবহার করুন।"),max:e.validator.format("অনুগ্রহ করে {0} বা তার চাইতে কম মান ব্যবহার করুন।"),min:e.validator.format("অনুগ্রহ করে {0} বা তার চাইতে বেশি মান ব্যবহার করুন।")}),e})?i.apply(t,r):i)||(e.exports=o)},CfJw:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"ამ ველის შევსება აუცილებელია.",remote:"გთხოვთ მიუთითოთ სწორი მნიშვნელობა.",email:"გთხოვთ მიუთითოთ ელ-ფოსტის კორექტული მისამართი.",url:"გთხოვთ მიუთითოთ კორექტული URL.",date:"გთხოვთ მიუთითოთ კორექტული თარიღი.",dateISO:"გთხოვთ მიუთითოთ კორექტული თარიღი ISO ფორმატში.",number:"გთხოვთ მიუთითოთ ციფრი.",digits:"გთხოვთ მიუთითოთ მხოლოდ ციფრები.",creditcard:"გთხოვთ მიუთითოთ საკრედიტო ბარათის კორექტული ნომერი.",equalTo:"გთხოვთ მიუთითოთ ასეთივე მნიშვნელობა კიდევ ერთხელ.",extension:"გთხოვთ აირჩიოთ ფაილი კორექტული გაფართოებით.",maxlength:e.validator.format("დასაშვებია არაუმეტეს {0} სიმბოლო."),minlength:e.validator.format("აუცილებელია შეიყვანოთ მინიმუმ {0} სიმბოლო."),rangelength:e.validator.format("ტექსტში სიმბოლოების რაოდენობა უნდა იყოს {0}-დან {1}-მდე."),range:e.validator.format("გთხოვთ შეიყვანოთ ციფრი {0}-დან {1}-მდე."),max:e.validator.format("გთხოვთ შეიყვანოთ ციფრი რომელიც ნაკლებია ან უდრის {0}-ს."),min:e.validator.format("გთხოვთ შეიყვანოთ ციფრი რომელიც მეტია ან უდრის {0}-ს.")}),e})?i.apply(t,r):i)||(e.exports=o)},E6Ma:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Ce champ est obligatoire.",remote:"Veuillez corriger ce champ.",email:"Veuillez fournir une adresse électronique valide.",url:"Veuillez fournir une adresse URL valide.",date:"Veuillez fournir une date valide.",dateISO:"Veuillez fournir une date valide (ISO).",number:"Veuillez fournir un numéro valide.",digits:"Veuillez fournir seulement des chiffres.",creditcard:"Veuillez fournir un numéro de carte de crédit valide.",equalTo:"Veuillez fournir encore la même valeur.",notEqualTo:"Veuillez fournir une valeur différente, les valeurs ne doivent pas être identiques.",extension:"Veuillez fournir une valeur avec une extension valide.",maxlength:e.validator.format("Veuillez fournir au plus {0} caractères."),minlength:e.validator.format("Veuillez fournir au moins {0} caractères."),rangelength:e.validator.format("Veuillez fournir une valeur qui contient entre {0} et {1} caractères."),range:e.validator.format("Veuillez fournir une valeur entre {0} et {1}."),max:e.validator.format("Veuillez fournir une valeur inférieure ou égale à {0}."),min:e.validator.format("Veuillez fournir une valeur supérieure ou égale à {0}."),step:e.validator.format("Veuillez fournir une valeur multiple de {0}."),maxWords:e.validator.format("Veuillez fournir au plus {0} mots."),minWords:e.validator.format("Veuillez fournir au moins {0} mots."),rangeWords:e.validator.format("Veuillez fournir entre {0} et {1} mots."),letterswithbasicpunc:"Veuillez fournir seulement des lettres et des signes de ponctuation.",alphanumeric:"Veuillez fournir seulement des lettres, nombres, espaces et soulignages.",lettersonly:"Veuillez fournir seulement des lettres.",nowhitespace:"Veuillez ne pas inscrire d'espaces blancs.",ziprange:"Veuillez fournir un code postal entre 902xx-xxxx et 905-xx-xxxx.",integer:"Veuillez fournir un nombre non décimal qui est positif ou négatif.",vinUS:"Veuillez fournir un numéro d'identification du véhicule (VIN).",dateITA:"Veuillez fournir une date valide.",time:"Veuillez fournir une heure valide entre 00:00 et 23:59.",phoneUS:"Veuillez fournir un numéro de téléphone valide.",phoneUK:"Veuillez fournir un numéro de téléphone valide.",mobileUK:"Veuillez fournir un numéro de téléphone mobile valide.",strippedminlength:e.validator.format("Veuillez fournir au moins {0} caractères."),email2:"Veuillez fournir une adresse électronique valide.",url2:"Veuillez fournir une adresse URL valide.",creditcardtypes:"Veuillez fournir un numéro de carte de crédit valide.",ipv4:"Veuillez fournir une adresse IP v4 valide.",ipv6:"Veuillez fournir une adresse IP v6 valide.",require_from_group:e.validator.format("Veuillez fournir au moins {0} de ces champs."),nifES:"Veuillez fournir un numéro NIF valide.",nieES:"Veuillez fournir un numéro NIE valide.",cifES:"Veuillez fournir un numéro CIF valide.",postalCodeCA:"Veuillez fournir un code postal valide."}),e})?i.apply(t,r):i)||(e.exports=o)},EVdn:function(e,t,n){var i;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},u=o.push,c=o.indexOf,d={},f=d.toString,p=d.hasOwnProperty,h=p.toString,m=h.call(Object),v={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},b=n.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function k(e,t,n){var i,r,o=(n=n||b).createElement("script");if(o.text=e,t)for(i in x)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[f.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.5.1",constructor:T,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(T.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&a!==i&&(u&&i&&(T.isPlainObject(i)||(r=Array.isArray(i)))?(n=a[t],o=r&&!Array.isArray(n)?[]:r||T.isPlainObject(n)?n:{},r=!1,a[t]=T.extend(u,o,i)):void 0!==i&&(a[t]=i));return a},T.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e))&&(!(t=a(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&h.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){k(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(S(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?T.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,a=[];if(S(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&a.push(r);return l(a)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var C=function(e){var t,n,i,r,o,a,s,l,u,c,d,f,p,h,m,v,g,y,b,x="sizzle"+1*new Date,k=e.document,w=0,T=0,S=le(),C=le(),E=le(),P=le(),A=function(e,t){return e===t&&(d=!0),0},_={}.hasOwnProperty,j=[],O=j.pop,L=j.push,z=j.push,M=j.slice,I=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},D="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",$="\\["+N+"*("+q+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+N+"*\\]",R=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+$+")*)|.*)\\)|)",H=new RegExp(N+"+","g"),F=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),B=new RegExp("^"+N+"*,"+N+"*"),W=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),V=new RegExp(N+"|>"),U=new RegExp(R),G=new RegExp("^"+q+"$"),K={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+$),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+D+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){f()},ae=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{z.apply(j=M.call(k.childNodes),k.childNodes),j[k.childNodes.length].nodeType}catch(e){z={apply:j.length?function(e,t){L.apply(e,M.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(e,t,i,r){var o,s,u,c,d,h,g,y=t&&t.ownerDocument,k=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return i;if(!r&&(f(t),t=t||p,m)){if(11!==k&&(d=J.exec(e)))if(o=d[1]){if(9===k){if(!(u=t.getElementById(o)))return i;if(u.id===o)return i.push(u),i}else if(y&&(u=y.getElementById(o))&&b(t,u)&&u.id===o)return i.push(u),i}else{if(d[2])return z.apply(i,t.getElementsByTagName(e)),i;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return z.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!P[e+" "]&&(!v||!v.test(e))&&(1!==k||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===k&&(V.test(e)||W.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(ie,re):t.setAttribute("id",c=x)),s=(h=a(e)).length;s--;)h[s]=(c?"#"+c:":scope")+" "+be(h[s]);g=h.join(",")}try{return z.apply(i,y.querySelectorAll(g)),i}catch(t){P(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ue(e){return e[x]=!0,e}function ce(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function fe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ue((function(t){return t=+t,ue((function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},f=se.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:k;return a!=p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,m=!o(p),k!=p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",oe,!1):r.attachEvent&&r.attachEvent("onunload",oe)),n.scope=ce((function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(p.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},g=[],v=[],(n.qsa=Q.test(p.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+N+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+N+"*(?:value|"+D+")"),e.querySelectorAll("[id~="+x+"-]").length||v.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+N+"*name"+N+"*="+N+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+N+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=Q.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",R)})),v=v.length&&new RegExp(v.join("|")),g=g.length&&new RegExp(g.join("|")),t=Q.test(h.compareDocumentPosition),b=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==p||e.ownerDocument==k&&b(k,e)?-1:t==p||t.ownerDocument==k&&b(k,t)?1:c?I(c,e)-I(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e==p?-1:t==p?1:r?-1:o?1:c?I(c,e)-I(c,t):0;if(r===o)return fe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?fe(a[i],s[i]):a[i]==k?-1:s[i]==k?1:0},p):p},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&m&&!P[t+" "]&&(!g||!g.test(t))&&(!v||!v.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){P(t,!0)}return se(t,p,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=p&&f(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=p&&f(e);var r=i.attrHandle[t.toLowerCase()],o=r&&_.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(ie,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,i=[],r=0,o=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(A),d){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return c=null,e},r=se.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=se.selectors={cacheLength:50,createPseudo:ue,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&S(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=se.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,f,p,h,m=o!==a?"nextSibling":"previousSibling",v=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(v){if(o){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?v.firstChild:v.lastChild],a&&y){for(b=(p=(u=(c=(d=(f=v)[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===w&&u[1])&&u[2],f=p&&v.childNodes[p];f=++p&&f&&f[m]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){c[e]=[w,p,b];break}}else if(y&&(b=p=(u=(c=(d=(f=t)[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===w&&u[1]),!1===b)for(;(f=++p&&f&&f[m]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++b||(y&&((c=(d=f[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[w,b]),f!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=I(e,o[a])]=!(n[i]=o[a])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ue((function(e){var t=[],n=[],i=s(e.replace(F,"$1"));return i[x]?ue((function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return se(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:ue((function(e){return G.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ve((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function xe(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=T++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var u,c,d,f=[w,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(c=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=c[o])&&u[0]===w&&u[1]===s)return f[2]=u[2];if(c[o]=f,f[2]=e(t,n,l))return!0}return!1}}function ke(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),u&&t.push(s)));return a}function Te(e,t,n,i,r,o){return i&&!i[x]&&(i=Te(i)),r&&!r[x]&&(r=Te(r,o)),ue((function(o,a,s,l){var u,c,d,f=[],p=[],h=a.length,m=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)se(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),v=!e||!o&&t?m:we(m,f,e,s,l),g=n?r||(o?e:h||i)?[]:a:v;if(n&&n(v,g,s,l),i)for(u=we(g,p),i(u,[],s,l),c=u.length;c--;)(d=u[c])&&(g[p[c]]=!(v[p[c]]=d));if(o){if(r||e){if(r){for(u=[],c=g.length;c--;)(d=g[c])&&u.push(v[c]=d);r(null,g=[],u,l)}for(c=g.length;c--;)(d=g[c])&&(u=r?I(o,d):f[c])>-1&&(o[u]=!(a[u]=d))}}else g=we(g===a?g.splice(h,g.length):g),r?r(null,a,g,l):z.apply(a,g)}))}function Se(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,c=xe((function(e){return e===t}),s,!0),d=xe((function(e){return I(t,e)>-1}),s,!0),f=[function(e,n,i){var r=!a&&(i||n!==u)||((t=n).nodeType?c(e,n,i):d(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])f=[xe(ke(f),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return Te(l>1&&ke(f),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),n,l<r&&Se(e.slice(l,r)),r<o&&Se(e=e.slice(r)),r<o&&be(e))}f.push(n)}return ke(f)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,a=se.tokenize=function(e,t){var n,r,o,a,s,l,u,c=C[e+" "];if(c)return t?0:c.slice(0);for(s=e,l=[],u=i.preFilter;s;){for(a in n&&!(r=B.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=W.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(F," ")}),s=s.slice(n.length)),i.filter)!(r=K[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):C(e,l).slice(0)},s=se.compile=function(e,t){var n,r=[],o=[],s=E[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Se(t[n]))[x]?r.push(s):o.push(s);(s=E(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,l,c){var d,h,v,g=0,y="0",b=o&&[],x=[],k=u,T=o||r&&i.find.TAG("*",c),S=w+=null==k?1:Math.random()||.1,C=T.length;for(c&&(u=a==p||a||c);y!==C&&null!=(d=T[y]);y++){if(r&&d){for(h=0,a||d.ownerDocument==p||(f(d),s=!m);v=e[h++];)if(v(d,a||p,s)){l.push(d);break}c&&(w=S)}n&&((d=!v&&d)&&g--,o&&b.push(d))}if(g+=y,n&&y!==g){for(h=0;v=t[h++];)v(b,x,a,s);if(o){if(g>0)for(;y--;)b[y]||x[y]||(x[y]=O.call(l));x=we(x)}z.apply(l,x),c&&!o&&x.length>0&&g+t.length>1&&se.uniqueSort(l)}return c&&(w=S,u=k),b};return n?ue(o):o}(o,r))).selector=e}return s},l=se.select=function(e,t,n,r){var o,l,u,c,d,f="function"==typeof e&&e,p=!r&&a(e=f.selector||e);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=K.needsContext.test(e)?0:l.length;o--&&(u=l[o],!i.relative[c=u.type]);)if((d=i.find[c])&&(r=d(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&be(l)))return z.apply(n,r),n;break}}return(f||s(e,p))(r,t,!m,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=x.split("").sort(A).join("")===x,n.detectDuplicates=!!d,f(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de(D,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),se}(n);T.find=C,T.expr=C.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=C.uniqueSort,T.text=C.getText,T.isXMLDoc=C.isXML,T.contains=C.contains,T.escapeSelector=C.escape;var E=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&T(e).is(n))break;i.push(e)}return i},P=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=T.expr.match.needsContext;function _(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(e,t,n){return g(t)?T.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?T.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?T.grep(e,(function(e){return c.call(t,e)>-1!==n})):T.filter(t,e,n)}T.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?T.find.matchesSelector(i,e)?[i]:[]:T.find.matches(e,T.grep(t,(function(e){return 1===e.nodeType})))},T.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(T(e).filter((function(){for(t=0;t<i;t++)if(T.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)T.find(e,r[t],n);return i>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(O(this,e||[],!1))},not:function(e){return this.pushStack(O(this,e||[],!0))},is:function(e){return!!O(this,"string"==typeof e&&A.test(e)?T(e):e||[],!1).length}});var L,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||L,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:z.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),j.test(i[1])&&T.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=b.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,L=T(b);var M=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function D(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&T(e);if(!A.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?c.call(T(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return E(e,"parentNode")},parentsUntil:function(e,t,n){return E(e,"parentNode",n)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return E(e,"nextSibling")},prevAll:function(e){return E(e,"previousSibling")},nextUntil:function(e,t,n){return E(e,"nextSibling",n)},prevUntil:function(e,t,n){return E(e,"previousSibling",n)},siblings:function(e){return P((e.parentNode||{}).firstChild,e)},children:function(e){return P(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(_(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},(function(e,t){T.fn[e]=function(n,i){var r=T.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=T.filter(i,r)),this.length>1&&(I[e]||T.uniqueSort(r),M.test(e)&&r.reverse()),this.pushStack(r)}}));var N=/[^\x20\t\r\n\f]+/g;function q(e){return e}function $(e){throw e}function R(e,t,n,i){var r;try{e&&g(r=e.promise)?r.call(e).done(t).fail(n):e&&g(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(N)||[],(function(e,n){t[n]=!0})),t}(e):T.extend({},e);var t,n,i,r,o=[],a=[],s=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){T.each(n,(function(n,i){g(i)?e.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==w(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return T.each(arguments,(function(e,t){for(var n;(n=T.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?T.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return T.Deferred((function(n){T.each(t,(function(t,i){var r=g(e[i[4]])&&e[i[4]];o[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,r){var o=0;function a(e,t,i,r){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(e<o)){if((n=i.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(u)?r?u.call(n,a(o,t,q,r),a(o,t,$,r)):(o++,u.call(n,a(o,t,q,r),a(o,t,$,r),a(o,t,q,t.notifyWith))):(i!==q&&(s=void 0,l=[n]),(r||t.resolveWith)(s,l))}},c=r?u:function(){try{u()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),e+1>=o&&(i!==$&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred((function(n){t[0][3].add(a(0,n,g(r)?r:q,n.notifyWith)),t[1][3].add(a(0,n,g(e)?e:q)),t[2][3].add(a(0,n,g(i)?i:$))})).promise()},promise:function(e){return null!=e?T.extend(e,r):r}},o={};return T.each(t,(function(e,n){var a=n[2],s=n[5];r[n[1]]=a.add,s&&a.add((function(){i=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=s.call(arguments),o=T.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(R(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||g(r[n]&&r[n].then)))return o.then();for(;n--;)R(r[n],a(n),o.reject);return o.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&H.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout((function(){throw e}))};var F=T.Deferred();function B(){b.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),T.ready()}T.fn.ready=function(e){return F.then(e).catch((function(e){T.readyException(e)})),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||F.resolveWith(b,[T]))}}),T.ready.then=F.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(T.ready):(b.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var W=function(e,t,n,i,r,o,a){var s=0,l=e.length,u=null==n;if("object"===w(n))for(s in r=!0,n)W(e,t,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,g(i)||(a=!0),u&&(a?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(T(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:u?t.call(e):l?t(e[0],n):o},V=/^-ms-/,U=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function K(e){return e.replace(V,"ms-").replace(U,G)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=T.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[K(t)]=n;else for(i in t)r[K(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in i?[t]:t.match(N)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||T.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var Z=new X,Q=new X,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:J.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return Q.hasData(e)||Z.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return Z.access(e,t,n)},_removeData:function(e,t){Z.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=Q.get(o),1===o.nodeType&&!Z.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=K(i.slice(5)),te(o,i,r[i]));Z.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Q.set(this,e)})):W(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=Q.get(o,e))||void 0!==(n=te(o,e))?n:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),T.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Z.get(e,t),n&&(!i||Array.isArray(n)?i=Z.access(e,t,T.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),i=n.length,r=n.shift(),o=T._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,(function(){T.dequeue(e,t)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Z.get(e,n)||Z.access(e,n,{empty:T.Callbacks("once memory").add((function(){Z.remove(e,[t+"queue",n])}))})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each((function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){T.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=T.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Z.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],oe=b.documentElement,ae=function(e){return T.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(ae=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===T.css(e,"display")};function ue(e,t,n,i){var r,o,a=20,s=i?function(){return i.cur()}:function(){return T.css(e,t,"")},l=s(),u=n&&n[3]||(T.cssNumber[t]?"":"px"),c=e.nodeType&&(T.cssNumber[t]||"px"!==u&&+l)&&ie.exec(T.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)T.style(e,t,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,T.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var ce={};function de(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=T.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function fe(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=Z.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&le(i)&&(r[o]=de(i))):"none"!==n&&(r[o]="none",Z.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}T.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?T(this).show():T(this).hide()}))}});var pe,he,me=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ge=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(he=b.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),pe.appendChild(he),v.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",v.option=!!pe.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&_(e,t)?T.merge([e],n):n}function xe(e,t){for(var n=0,i=e.length;n<i;n++)Z.set(e[n],"globalEval",!t||Z.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,v.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var ke=/<|&#?\w+;/;function we(e,t,n,i,r){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===w(o))T.merge(f,o.nodeType?[o]:o);else if(ke.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ve.exec(o)||["",""])[1].toLowerCase(),l=ye[s]||ye._default,a.innerHTML=l[1]+T.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;T.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(i&&T.inArray(o,i)>-1)r&&r.push(o);else if(u=ae(o),a=be(d.appendChild(o),"script"),u&&xe(a),n)for(c=0;o=a[c++];)ge.test(o.type||"")&&n.push(o);return d}var Te=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Pe(){return!1}function Ae(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function _e(e,t,n,i,r,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)_e(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Pe;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return T().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),e.each((function(){T.event.add(this,t,r,i,n)}))}function je(e,t,n){n?(Z.set(e,t,!1),T.event.add(e,t,{namespace:!1,handler:function(e){var i,r,o=Z.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(T.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),Z.set(this,t,o),i=n(this,t),this[t](),o!==(r=Z.get(this,t))||i?Z.set(this,t,!1):r={},o!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else o.length&&(Z.set(this,t,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Z.get(e,t)&&T.event.add(e,t,Ee)}T.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,u,c,d,f,p,h,m,v=Z.get(e);if(Y(e))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&T.find.matchesSelector(oe,r),n.guid||(n.guid=T.guid++),(l=v.events)||(l=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(N)||[""]).length;u--;)p=m=(s=Ce.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),p&&(d=T.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=T.event.special[p]||{},c=T.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&T.expr.match.needsContext.test(r),namespace:h.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,c):f.push(c),T.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,u,c,d,f,p,h,m,v=Z.hasData(e)&&Z.get(e);if(v&&(l=v.events)){for(u=(t=(t||"").match(N)||[""]).length;u--;)if(p=m=(s=Ce.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),p){for(d=T.event.special[p]||{},f=l[p=(i?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!r&&m!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||T.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)T.event.remove(e,p+t[u],n,i,!0);T.isEmptyObject(l)&&Z.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=new Array(arguments.length),l=T.event.fix(e),u=(Z.get(this,"events")||Object.create(null))[l.type]||[],c=T.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=T.event.handlers.call(this,l,u),t=0;(r=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((T.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?T(r,this).index(u)>-1:T.find(r,this,null,[u]).length),a[r]&&o.push(i);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&_(t,"input")&&je(t,"click",Ee),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&_(t,"input")&&je(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&_(t,"input")&&Z.get(t,"click")||_(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Pe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Pe,isPropagationStopped:Pe,isImmediatePropagationStopped:Pe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(e,t){T.event.special[e]={setup:function(){return je(this,e,Ae),!1},trigger:function(){return je(this,e),!0},delegateType:t}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||T.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),T.fn.extend({on:function(e,t,n,i){return _e(this,e,t,n,i)},one:function(e,t,n,i){return _e(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,T(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Pe),this.each((function(){T.event.remove(this,e,n,t)}))}});var Oe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,ze=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return _(e,"table")&&_(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ne(e,t){var n,i,r,o,a,s;if(1===t.nodeType){if(Z.hasData(e)&&(s=Z.get(e).events))for(r in Z.remove(t,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)T.event.add(t,r,s[r][n]);Q.hasData(e)&&(o=Q.access(e),a=T.extend({},o),Q.set(t,a))}}function qe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function $e(e,t,n,i){t=l(t);var r,o,a,s,u,c,d=0,f=e.length,p=f-1,h=t[0],m=g(h);if(m||f>1&&"string"==typeof h&&!v.checkClone&&Le.test(h))return e.each((function(r){var o=e.eq(r);m&&(t[0]=h.call(this,r,o.html())),$e(o,t,n,i)}));if(f&&(o=(r=we(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=(a=T.map(be(r,"script"),Ie)).length;d<f;d++)u=r,d!==p&&(u=T.clone(u,!0,!0),s&&T.merge(a,be(u,"script"))),n.call(e[d],u,d);if(s)for(c=a[a.length-1].ownerDocument,T.map(a,De),d=0;d<s;d++)u=a[d],ge.test(u.type||"")&&!Z.access(u,"globalEval")&&T.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?T._evalUrl&&!u.noModule&&T._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):k(u.textContent.replace(ze,""),u,c))}return e}function Re(e,t,n){for(var i,r=t?T.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||T.cleanData(be(i)),i.parentNode&&(n&&ae(i)&&xe(be(i,"script")),i.parentNode.removeChild(i));return e}T.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=ae(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(a=be(s),i=0,r=(o=be(e)).length;i<r;i++)qe(o[i],a[i]);if(t)if(n)for(o=o||be(e),a=a||be(s),i=0,r=o.length;i<r;i++)Ne(o[i],a[i]);else Ne(e,s);return(a=be(s,"script")).length>0&&xe(a,!l&&be(e,"script")),s},cleanData:function(e){for(var t,n,i,r=T.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[Z.expando]){if(t.events)for(i in t.events)r[i]?T.event.remove(n,i):T.removeEvent(n,i,t.handle);n[Z.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),T.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return W(this,(function(e){return void 0===e?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return $e(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)}))},prepend:function(){return $e(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return $e(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return $e(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return T.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Oe.test(e)&&!ye[(ve.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return $e(this,arguments,(function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){T.fn[e]=function(e){for(var n,i=[],r=T(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),T(r[a])[t](n),u.apply(i,n.get());return this.pushStack(i)}}));var He=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=function(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i},We=new RegExp(re.join("|"),"i");function Ve(e,t,n){var i,r,o,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ae(e)||(a=T.style(e,t)),!v.pixelBoxStyles()&&He.test(a)&&We.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(u).appendChild(c);var e=n.getComputedStyle(c);i="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),r=36===t(e.width),c.style.position="absolute",o=12===t(c.offsetWidth/3),oe.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,s,l,u=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,i,r;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),i=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(i),r=n.getComputedStyle(t),s=parseInt(r.height)>3,oe.removeChild(e)),s}}))}();var Ge=["Webkit","Moz","ms"],Ke=b.createElement("div").style,Ye={};function Xe(e){var t=T.cssProps[e]||Ye[e];return t||(e in Ke?e:Ye[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Ke)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var i=ie.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function nt(e,t,n,i,r,o){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=T.css(e,n+re[a],!0,r)),i?("content"===n&&(l-=T.css(e,"padding"+re[a],!0,r)),"margin"!==n&&(l-=T.css(e,"border"+re[a]+"Width",!0,r))):(l+=T.css(e,"padding"+re[a],!0,r),"padding"!==n?l+=T.css(e,"border"+re[a]+"Width",!0,r):s+=T.css(e,"border"+re[a]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function it(e,t,n){var i=Fe(e),r=(!v.boxSizingReliable()||n)&&"border-box"===T.css(e,"boxSizing",!1,i),o=r,a=Ve(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(He.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&r||!v.reliableTrDimensions()&&_(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===T.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===T.css(e,"boxSizing",!1,i),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+nt(e,t,n||(r?"border":"content"),o,i,a)+"px"}function rt(e,t,n,i,r){return new rt.prototype.init(e,t,n,i,r)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ve(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=K(t),l=Qe.test(t),u=e.style;if(l||(t=Xe(s)),a=T.cssHooks[t]||T.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:u[t];"string"===(o=typeof n)&&(r=ie.exec(n))&&r[1]&&(n=ue(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(T.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,o,a,s=K(t);return Qe.test(t)||(t=Xe(s)),(a=T.cssHooks[t]||T.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=Ve(e,t,i)),"normal"===r&&t in et&&(r=et[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),T.each(["height","width"],(function(e,t){T.cssHooks[t]={get:function(e,n,i){if(n)return!Ze.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,i):Be(e,Je,(function(){return it(e,t,i)}))},set:function(e,n,i){var r,o=Fe(e),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||i)&&"border-box"===T.css(e,"boxSizing",!1,o),l=i?nt(e,t,i,s,o):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-nt(e,t,"border",!1,o)-.5)),l&&(r=ie.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),tt(0,n,l)}}})),T.cssHooks.marginLeft=Ue(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ve(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(e,t){T.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+re[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(T.cssHooks[e+t].set=tt)})),T.fn.extend({css:function(e,t){return W(this,(function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=Fe(e),r=t.length;a<r;a++)o[t[a]]=T.css(e,t[a],!1,i);return o}return void 0!==n?T.style(e,t,n):T.css(e,t)}),e,t,arguments.length>1)}}),T.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[Xe(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=rt.prototype.init,T.fx.step={};var ot,at,st=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ut(){at&&(!1===b.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ut):n.setTimeout(ut,T.fx.interval),T.fx.tick())}function ct(){return n.setTimeout((function(){ot=void 0})),ot=Date.now()}function dt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=re[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var i,r=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function pt(e,t,n){var i,r,o=0,a=pt.prefilters.length,s=T.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=ot||ct(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(i);return s.notifyWith(e,[u,i,n]),i<1&&a?n:(a||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var i=T.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(!function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=K(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=T.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);o<a;o++)if(i=pt.prefilters[o].call(u,e,c,u.opts))return g(i.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return T.map(c,ft,u),g(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),T.fx.timer(T.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}T.Animation=T.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(N);for(var n,i=0,r=e.length;i<r;i++)n=e[i],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,u,c,d="width"in t||"height"in t,f=this,p={},h=e.style,m=e.nodeType&&le(e),v=Z.get(e,"fxshow");for(i in n.queue||(null==(a=T._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always((function(){f.always((function(){a.unqueued--,T.queue(e,"fx").length||a.empty.fire()}))}))),t)if(r=t[i],st.test(r)){if(delete t[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;m=!0}p[i]=v&&v[i]||T.style(e,i)}if((l=!T.isEmptyObject(t))||!T.isEmptyObject(p))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=v&&v.display)&&(u=Z.get(e,"display")),"none"===(c=T.css(e,"display"))&&(u?c=u:(fe([e],!0),u=e.style.display||u,c=T.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===T.css(e,"float")&&(l||(f.done((function(){h.display=u})),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,p)l||(v?"hidden"in v&&(m=v.hidden):v=Z.access(e,"fxshow",{display:u}),o&&(v.hidden=!m),m&&fe([e],!0),f.done((function(){for(i in m||fe([e]),Z.remove(e,"fxshow"),p)T.style(e,i,p[i])}))),l=ft(m?v[i]:0,i,f),i in v||(v[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),T.speed=function(e,t,n){var i=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return T.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in T.fx.speeds?i.duration=T.fx.speeds[i.duration]:i.duration=T.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){g(i.old)&&i.old.call(this),i.queue&&T.dequeue(this,i.queue)},i},T.fn.extend({fadeTo:function(e,t,n,i){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=T.isEmptyObject(e),o=T.speed(t,n,i),a=function(){var t=pt(this,T.extend({},e),o);(r||Z.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=T.timers,a=Z.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&lt.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||T.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Z.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=T.timers,a=i?i.length:0;for(n.finish=!0,T.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(e,t){var n=T.fn[t];T.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,i,r)}})),T.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){T.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),ot=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){at||(at=!0,ut())},T.fx.stop=function(){at=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ht,mt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return W(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){T.removeAttr(this,e)}))}}),T.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?T.prop(e,t,n):(1===o&&T.isXMLDoc(e)||(r=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=T.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&_(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(N);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=mt[t]||T.find.attr;mt[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=mt[a],mt[a]=r,r=null!=n(e,t,i)?a:null,mt[a]=o),r}}));var vt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function yt(e){return(e.match(N)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}T.fn.extend({prop:function(e,t){return W(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[T.propFix[e]||e]}))}}),T.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(e)||(t=T.propFix[t]||t,r=T.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(g(e))return this.each((function(t){T(this).addClass(e.call(this,t,bt(this)))}));if((t=xt(e)).length)for(;n=this[l++];)if(r=bt(n),i=1===n.nodeType&&" "+yt(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=yt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(g(e))return this.each((function(t){T(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)for(;n=this[l++];)if(r=bt(n),i=1===n.nodeType&&" "+yt(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=yt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){T(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,r,o,a;if(i)for(r=0,o=T(this),a=xt(e);t=a[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&Z.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Z.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+yt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var kt=/\r/g;T.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=g(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,T(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=T.map(r,(function(e){return null==e?"":e+""}))),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=T.valHooks[r.type]||T.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(kt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:yt(T.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!_(n.parentNode,"optgroup"))){if(t=T(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=T.makeArray(t),a=r.length;a--;)((i=r[a]).selected=T.inArray(T.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},v.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in n;var wt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,i,r){var o,a,s,l,u,c,d,f,h=[i||b],m=p.call(e,"type")?e.type:e,v=p.call(e,"namespace")?e.namespace.split("."):[];if(a=f=s=i=i||b,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+T.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[T.expando]?e:new T.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:T.makeArray(t,[e]),d=T.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(i,t))){if(!r&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,wt.test(l+m)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(i.ownerDocument||b)&&h.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)f=a,e.type=o>1?l:d.bindType||m,(c=(Z.get(a,"events")||Object.create(null))[e.type]&&Z.get(a,"handle"))&&c.apply(a,t),(c=u&&a[u])&&c.apply&&Y(a)&&(e.result=c.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!Y(i)||u&&g(i[m])&&!y(i)&&((s=i[u])&&(i[u]=null),T.event.triggered=m,e.isPropagationStopped()&&f.addEventListener(m,Tt),i[m](),e.isPropagationStopped()&&f.removeEventListener(m,Tt),T.event.triggered=void 0,s&&(i[u]=s)),e.result}},simulate:function(e,t,n){var i=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(i,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each((function(){T.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=Z.access(i,t);r||i.addEventListener(e,n,!0),Z.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=Z.access(i,t)-1;r?Z.access(i,t,r):(i.removeEventListener(e,n,!0),Z.remove(i,t))}}}));var St=n.location,Ct={guid:Date.now()},Et=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var Pt=/\[\]$/,At=/\r?\n/g,_t=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function Ot(e,t,n,i){var r;if(Array.isArray(t))T.each(t,(function(t,r){n||Pt.test(e)?i(e,r):Ot(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==w(t))i(e,t);else for(r in t)Ot(e+"["+r+"]",t[r],n,i)}T.param=function(e,t){var n,i=[],r=function(e,t){var n=g(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,(function(){r(this.name,this.value)}));else for(n in e)Ot(n,e[n],t,r);return i.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&jt.test(this.nodeName)&&!_t.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(e){return{name:t.name,value:e.replace(At,"\r\n")}})):{name:t.name,value:n.replace(At,"\r\n")}})).get()}});var Lt=/%20/g,zt=/#.*$/,Mt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Dt=/^(?:GET|HEAD)$/,Nt=/^\/\//,qt={},$t={},Rt="*/".concat("*"),Ht=b.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(N)||[];if(g(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Bt(e,t,n,i){var r={},o=e===$t;function a(s){var l;return r[s]=!0,T.each(e[s]||[],(function(e,s){var u=s(t,n,i);return"string"!=typeof u||o||r[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)})),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Wt(e,t){var n,i,r=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&T.extend(!0,e,i),e}Ht.href=St.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,T.ajaxSettings),t):Wt(T.ajaxSettings,e)},ajaxPrefilter:Ft(qt),ajaxTransport:Ft($t),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,s,l,u,c,d,f,p=T.ajaxSetup({},t),h=p.context||p,m=p.context&&(h.nodeType||h.jquery)?T(h):T.event,v=T.Deferred(),g=T.Callbacks("once memory"),y=p.statusCode||{},x={},k={},w="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=It.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(e,t){return null==u&&(e=k[e.toLowerCase()]=k[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)S.always(e[S.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||w;return i&&i.abort(t),C(0,t),this}};if(v.promise(S),p.url=((e||p.url||St.href)+"").replace(Nt,St.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(N)||[""],null==p.crossDomain){l=b.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ht.protocol+"//"+Ht.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=T.param(p.data,p.traditional)),Bt(qt,p,t,S),u)return S;for(d in(c=T.event&&p.global)&&0==T.active++&&T.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Dt.test(p.type),r=p.url.replace(zt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Lt,"+")):(f=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(Et.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Mt,"$1"),f=(Et.test(r)?"&":"?")+"_="+Ct.guid+++f),p.url=r+f),p.ifModified&&(T.lastModified[r]&&S.setRequestHeader("If-Modified-Since",T.lastModified[r]),T.etag[r]&&S.setRequestHeader("If-None-Match",T.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&S.setRequestHeader("Content-Type",p.contentType),S.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Rt+"; q=0.01":""):p.accepts["*"]),p.headers)S.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(h,S,p)||u))return S.abort();if(w="abort",g.add(p.complete),S.done(p.success),S.fail(p.error),i=Bt($t,p,t,S)){if(S.readyState=1,c&&m.trigger("ajaxSend",[S,p]),u)return S;p.async&&p.timeout>0&&(s=n.setTimeout((function(){S.abort("timeout")}),p.timeout));try{u=!1,i.send(x,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,a,l){var d,f,b,x,k,w=t;u||(u=!0,s&&n.clearTimeout(s),i=void 0,o=l||"",S.readyState=e>0?4:0,d=e>=200&&e<300||304===e,a&&(x=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(p,S,a)),!d&&T.inArray("script",p.dataTypes)>-1&&(p.converters["text script"]=function(){}),x=function(e,t,n,i){var r,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(r in u)if((s=r.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[r]:!0!==u[r]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(p,x,S,d),d?(p.ifModified&&((k=S.getResponseHeader("Last-Modified"))&&(T.lastModified[r]=k),(k=S.getResponseHeader("etag"))&&(T.etag[r]=k)),204===e||"HEAD"===p.type?w="nocontent":304===e?w="notmodified":(w=x.state,f=x.data,d=!(b=x.error))):(b=w,!e&&w||(w="error",e<0&&(e=0))),S.status=e,S.statusText=(t||w)+"",d?v.resolveWith(h,[f,w,S]):v.rejectWith(h,[S,w,b]),S.statusCode(y),y=void 0,c&&m.trigger(d?"ajaxSuccess":"ajaxError",[S,p,d?f:b]),g.fireWith(h,[S,w]),c&&(m.trigger("ajaxComplete",[S,p]),--T.active||T.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],(function(e,t){T[t]=function(e,n,i,r){return g(n)&&(r=r||i,i=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:r,data:n,success:i},T.isPlainObject(e)&&e))}})),T.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),T._evalUrl=function(e,t,n){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t,n)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){T(this).wrapInner(e.call(this,t))})):this.each((function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){T(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Ut=T.ajaxSettings.xhr();v.cors=!!Ut&&"withCredentials"in Ut,v.ajax=Ut=!!Ut,T.ajaxTransport((function(e){var t,i;if(v.cors||Ut&&!e.crossDomain)return{send:function(r,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(a,r[a]);t=function(e){return function(){t&&(t=i=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),i=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&i()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),T.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),T.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=T("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Gt,Kt=[],Yt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Kt.pop()||T.expando+"_"+Ct.guid++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",(function(e,t,i){var r,o,a,s=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||T.error(r+" was not called"),a[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){a=arguments},i.always((function(){void 0===o?T(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Kt.push(r)),a&&g(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=((Gt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Gt.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(i)):t=b),o=!n&&[],(r=j.exec(e))?[t.createElement(r[1])]:(r=we([e],t,o),o&&o.length&&T(o).remove(),T.merge([],r.childNodes)));var i,r,o},T.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=yt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&T.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(i?T("<div>").append(T.parseHTML(e)).find(i):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},T.expr.pseudos.animated=function(e){return T.grep(T.timers,(function(t){return e===t.elem})).length},T.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,u=T.css(e,"position"),c=T(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),o=T.css(e,"top"),l=T.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(i=c.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),g(t)&&(t=t.call(e,n,T.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),c.css(d))}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){T.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===T.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),r.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-T.css(i,"marginTop",!0),left:t.left-r.left-T.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||oe}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;T.fn[e]=function(i){return W(this,(function(e,i,r){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r}),e,i,arguments.length)}})),T.each(["top","left"],(function(e,t){T.cssHooks[t]=Ue(v.pixelPosition,(function(e,n){if(n)return n=Ve(e,t),He.test(n)?T(e).position()[t]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){T.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return W(this,(function(t,n,r){var o;return y(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?T.css(t,n,s):T.style(t,n,r,s)}),t,a?r:void 0,a)}}))})),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){T.fn[t]=function(e){return this.on(t,e)}})),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Xt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return i=s.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(s.call(arguments)))}).guid=e.guid=e.guid||T.guid++,r},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=_,T.isFunction=g,T.isWindow=y,T.camelCase=K,T.type=w,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},T.trim=function(e){return null==e?"":(e+"").replace(Xt,"")},void 0===(i=function(){return T}.apply(t,[]))||(e.exports=i);var Zt=n.jQuery,Qt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Qt),e&&n.jQuery===T&&(n.jQuery=Zt),T},void 0===r&&(n.jQuery=n.$=T),T}))},HrBG:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Бұл өрісті міндетті түрде толтырыңыз.",remote:"Дұрыс мағына енгізуіңізді сұраймыз.",email:"Нақты электронды поштаңызды енгізуіңізді сұраймыз.",url:"Нақты URL-ды енгізуіңізді сұраймыз.",date:"Нақты URL-ды енгізуіңізді сұраймыз.",dateISO:"Нақты ISO форматымен сәйкес датасын енгізуіңізді сұраймыз.",number:"Күнді енгізуіңізді сұраймыз.",digits:"Тек қана сандарды енгізуіңізді сұраймыз.",creditcard:"Несие картасының нөмірін дұрыс енгізуіңізді сұраймыз.",equalTo:"Осы мәнді қайта енгізуіңізді сұраймыз.",extension:"Файлдың кеңейтуін дұрыс таңдаңыз.",maxlength:e.validator.format("Ұзындығы {0} символдан көр болмасын."),minlength:e.validator.format("Ұзындығы {0} символдан аз болмасын."),rangelength:e.validator.format("Ұзындығы {0}-{1} дейін мән енгізуіңізді сұраймыз."),range:e.validator.format("Пожалуйста, введите число от {0} до {1}. - {0} - {1} санын енгізуіңізді сұраймыз."),max:e.validator.format("{0} аз немесе тең санын енгізуіңіді сұраймыз."),min:e.validator.format("{0} көп немесе тең санын енгізуіңізді сұраймыз.")}),e})?i.apply(t,r):i)||(e.exports=o)},I9E9:function(e,t,n){e.exports=n("JSZk")},INjF:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"To pole jest wymagane.",remote:"Proszę o wypełnienie tego pola.",email:"Proszę o podanie prawidłowego adresu email.",url:"Proszę o podanie prawidłowego URL.",date:"Proszę o podanie prawidłowej daty.",dateISO:"Proszę o podanie prawidłowej daty (ISO).",number:"Proszę o podanie prawidłowej liczby.",digits:"Proszę o podanie samych cyfr.",creditcard:"Proszę o podanie prawidłowej karty kredytowej.",equalTo:"Proszę o podanie tej samej wartości ponownie.",extension:"Proszę o podanie wartości z prawidłowym rozszerzeniem.",nipPL:"Proszę o podanie prawidłowego numeru NIP.",phonePL:"Proszę o podanie prawidłowego numeru telefonu",maxlength:e.validator.format("Proszę o podanie nie więcej niż {0} znaków."),minlength:e.validator.format("Proszę o podanie przynajmniej {0} znaków."),rangelength:e.validator.format("Proszę o podanie wartości o długości od {0} do {1} znaków."),range:e.validator.format("Proszę o podanie wartości z przedziału od {0} do {1}."),max:e.validator.format("Proszę o podanie wartości mniejszej bądź równej {0}."),min:e.validator.format("Proszę o podanie wartości większej bądź równej {0}."),pattern:e.validator.format("Pole zawiera niedozwolone znaki.")}),e})?i.apply(t,r):i)||(e.exports=o)},JSZk:function(module,exports,__webpack_require__){var factory;window,factory=function(){return modules=[function(e){e.exports=JSON.parse('{"BACKSPACE":8,"BACKSPACE_SAFARI":127,"DELETE":46,"DOWN":40,"END":35,"ENTER":13,"ESCAPE":27,"HOME":36,"INSERT":45,"LEFT":37,"PAGE_DOWN":34,"PAGE_UP":33,"RIGHT":39,"SPACE":32,"TAB":9,"UP":38,"X":88,"CONTROL":17}')},function(e,t,n){"use strict";function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r=n(2),o=n(3),a=o.document,s=n(4).generateMaskSet,l=n(4).analyseMask,u=n(7);function c(e,t,n){if(!(this instanceof c))return new c(e,t,n);this.el=void 0,this.events={},this.maskset=void 0,this.refreshValue=!1,!0!==n&&(r.isPlainObject(e)?t=e:(t=t||{},e&&(t.alias=e)),this.opts=r.extend(!0,{},this.defaults,t),this.noMasksCache=t&&void 0!==t.definitions,this.userOptions=t||{},d(this.opts.alias,t,this.opts),this.isRTL=this.opts.numericInput)}function d(e,t,n){var i=c.prototype.aliases[e];return i?(i.alias&&d(i.alias,void 0,n),r.extend(!0,n,i),r.extend(!0,n,t),!0):(null===n.mask&&(n.mask=e),!1)}c.prototype={dataAttribute:"data-inputmask",defaults:{_maxTestPos:500,placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:r.noop,onincomplete:r.noop,oncleared:r.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,insertModeVisual:!0,clearIncomplete:!1,alias:null,onKeyDown:r.noop,onBeforeMask:null,onBeforePaste:function(e,t){return r.isFunction(t.onBeforeMask)?t.onBeforeMask.call(this,e,t):e},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:r.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:void 0,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"text",importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(e){var t=this;return"string"==typeof e&&(e=a.getElementById(e)||a.querySelectorAll(e)),e=e.nodeName?[e]:e,r.each(e,(function(e,n){var i=r.extend(!0,{},t.opts);if(function(e,t,n,i){function a(t,r){null!==(r=void 0!==r?r:e.getAttribute(i+"-"+t))&&("string"==typeof r&&(0===t.indexOf("on")?r=o[r]:"false"===r?r=!1:"true"===r&&(r=!0)),n[t]=r)}if(!0===t.importDataAttributes){var s,l,u,c,f=e.getAttribute(i);if(f&&""!==f&&(f=f.replace(/'/g,'"'),l=JSON.parse("{"+f+"}")),l)for(c in u=void 0,l)if("alias"===c.toLowerCase()){u=l[c];break}for(s in a("alias",u),n.alias&&d(n.alias,n,t),t){if(l)for(c in u=void 0,l)if(c.toLowerCase()===s.toLowerCase()){u=l[c];break}a(s,u)}}return r.extend(!0,t,n),"rtl"!==e.dir&&!t.rightAlign||(e.style.textAlign="right"),"rtl"!==e.dir&&!t.numericInput||(e.dir="ltr",e.removeAttribute("dir"),t.isRTL=!0),Object.keys(n).length}(n,i,r.extend(!0,{},t.userOptions),t.dataAttribute)){var a=s(i,t.noMasksCache);void 0!==a&&(void 0!==n.inputmask&&(n.inputmask.opts.autoUnmask=!0,n.inputmask.remove()),n.inputmask=new c(void 0,void 0,!0),n.inputmask.opts=i,n.inputmask.noMasksCache=t.noMasksCache,n.inputmask.userOptions=r.extend(!0,{},t.userOptions),n.inputmask.isRTL=i.isRTL||i.numericInput,n.inputmask.el=n,n.inputmask.maskset=a,r.data(n,"_inputmask_opts",i),u.call(n.inputmask,{action:"mask"}))}})),e&&e[0]&&e[0].inputmask||this},option:function(e,t){return"string"==typeof e?this.opts[e]:"object"===i(e)?(r.extend(this.userOptions,e),this.el&&!0!==t&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),u.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return u.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),u.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),u.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),u.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),u.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),u.call(this,{action:"format",value:e,metadata:t})},setValue:function(e){this.el&&r(this.el).trigger("setvalue",[e])},analyseMask:l},c.extendDefaults=function(e){r.extend(!0,c.prototype.defaults,e)},c.extendDefinitions=function(e){r.extend(!0,c.prototype.definitions,e)},c.extendAliases=function(e){r.extend(!0,c.prototype.aliases,e)},c.format=function(e,t,n){return c(t).format(e,n)},c.unmask=function(e,t){return c(t).unmaskedvalue(e)},c.isValid=function(e,t){return c(t).isValid(e)},c.remove=function(e){"string"==typeof e&&(e=a.getElementById(e)||a.querySelectorAll(e)),e=e.nodeName?[e]:e,r.each(e,(function(e,t){t.inputmask&&t.inputmask.remove()}))},c.setValue=function(e,t){"string"==typeof e&&(e=a.getElementById(e)||a.querySelectorAll(e)),e=e.nodeName?[e]:e,r.each(e,(function(e,n){n.inputmask?n.inputmask.setValue(t):r(n).trigger("setvalue",[t])}))};var f=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim");c.escapeRegex=function(e){return e.replace(f,"\\$1")},c.dependencyLib=r,o.Inputmask=c,e.exports=c},function(e,t,n){"use strict";function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r=n(3),o=r.document;function a(e){return null!=e&&e===e.window}function s(e){return e instanceof Element}function l(e){return e instanceof l?e:this instanceof l?void(null!=e&&e!==r&&(this[0]=e.nodeName?e:void 0!==e[0]&&e[0].nodeName?e[0]:o.querySelector(e),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new l(e)}l.prototype={on:function(e,t){function n(e,n){r.addEventListener?r.addEventListener(e,t,!1):r.attachEvent&&r.attachEvent("on"+e,t),i[e]=i[e]||{},i[e][n]=i[e][n]||[],i[e][n].push(t)}if(s(this[0]))for(var i=this[0].eventRegistry,r=this[0],o=e.split(" "),a=0;a<o.length;a++){var l=o[a].split(".");n(l[0],l[1]||"global")}return this},off:function(e,t){var n,i;function r(e,t,r){if(e in n==1)if(i.removeEventListener?i.removeEventListener(e,r,!1):i.detachEvent&&i.detachEvent("on"+e,r),"global"===t)for(var o in n[e])n[e][o].splice(n[e][o].indexOf(r),1);else n[e][t].splice(n[e][t].indexOf(r),1)}function o(e,i){var r,o,a=[];if(0<e.length)if(void 0===t)for(r=0,o=n[e][i].length;r<o;r++)a.push({ev:e,namespace:i&&0<i.length?i:"global",handler:n[e][i][r]});else a.push({ev:e,namespace:i&&0<i.length?i:"global",handler:t});else if(0<i.length)for(var s in n)for(var l in n[s])if(l===i)if(void 0===t)for(r=0,o=n[s][l].length;r<o;r++)a.push({ev:s,namespace:l,handler:n[s][l][r]});else a.push({ev:s,namespace:l,handler:t});return a}if(s(this[0])){n=this[0].eventRegistry,i=this[0];for(var a=e.split(" "),l=0;l<a.length;l++)for(var u=a[l].split("."),c=o(u[0],u[1]),d=0,f=c.length;d<f;d++)r(c[d].ev,c[d].namespace,c[d].handler)}return this},trigger:function(e,t){if(s(this[0]))for(var n=this[0].eventRegistry,i=this[0],r="string"==typeof e?e.split(" "):[e.type],a=0;a<r.length;a++){var u=r[a].split("."),c=u[0],d=u[1]||"global";if(void 0!==o&&"global"===d){var f,p,h={bubbles:!0,cancelable:!0,detail:t};if(o.createEvent){try{f=new CustomEvent(c,h)}catch(e){(f=o.createEvent("CustomEvent")).initCustomEvent(c,h.bubbles,h.cancelable,h.detail)}e.type&&l.extend(f,e),i.dispatchEvent(f)}else(f=o.createEventObject()).eventType=c,f.detail=t,e.type&&l.extend(f,e),i.fireEvent("on"+f.eventType,f)}else if(void 0!==n[c])if((e=e.type?e:l.Event(e)).detail=arguments.slice(1),"global"===d)for(var m in n[c])for(p=0;p<n[c][m].length;p++)n[c][m][p].apply(i,arguments);else for(p=0;p<n[c][d].length;p++)n[c][d][p].apply(i,arguments)}return this}},l.isFunction=function(e){return"function"==typeof e},l.noop=function(){},l.isArray=Array.isArray,l.inArray=function(e,t,n){return null==t?-1:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}(t,e)},l.valHooks=void 0,l.isPlainObject=function(e){return!("object"!==i(e)||e.nodeType||a(e)||e.constructor&&!Object.hasOwnProperty.call(e.constructor.prototype,"isPrototypeOf"))},l.extend=function(){var e,t,n,r,o,a,s=arguments[0]||{},u=1,c=arguments.length,d=!1;for("boolean"==typeof s&&(d=s,s=arguments[u]||{},u++),"object"===i(s)||l.isFunction(s)||(s={}),u===c&&(s=this,u--);u<c;u++)if(null!=(e=arguments[u]))for(t in e)n=s[t],s!==(r=e[t])&&(d&&r&&(l.isPlainObject(r)||(o=l.isArray(r)))?(a=o?(o=!1,n&&l.isArray(n)?n:[]):n&&l.isPlainObject(n)?n:{},s[t]=l.extend(d,a,r)):void 0!==r&&(s[t]=r));return s},l.each=function(e,t){var n=0;if(function(e){var t="length"in e&&e.length,n=i(e);return"function"!==n&&!a(e)&&(!(1!==e.nodeType||!t)||"array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}(e))for(var r=e.length;n<r&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},l.data=function(e,t,n){if(void 0===n)return e.__data?e.__data[t]:null;e.__data=e.__data||{},e.__data[t]=n},"function"==typeof r.CustomEvent?l.Event=r.CustomEvent:(l.Event=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=o.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n},l.Event.prototype=r.Event.prototype),e.exports=l},function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},function(e,t,n){"use strict";var i=n(2);e.exports={generateMaskSet:function(e,t){function n(e,n,r){var o,a,s=!1;if(null!==e&&""!==e||(e=(s=null!==r.regex)?(e=r.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(s=!0,".*")),1===e.length&&!1===r.greedy&&0!==r.repeat&&(r.placeholder=""),0<r.repeat||"*"===r.repeat||"+"===r.repeat){var l="*"===r.repeat?0:"+"===r.repeat?1:r.repeat;e=r.groupmarker[0]+e+r.groupmarker[1]+r.quantifiermarker[0]+l+","+r.repeat+r.quantifiermarker[1]}return a=s?"regex_"+r.regex:r.numericInput?e.split("").reverse().join(""):e,!1!==r.keepStatic&&(a="ks_"+a),void 0===Inputmask.prototype.masksCache[a]||!0===t?(o={mask:e,maskToken:Inputmask.prototype.analyseMask(e,s,r),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},excludes:{},metadata:n,maskLength:void 0,jitOffset:{}},!0!==t&&(Inputmask.prototype.masksCache[a]=o,o=i.extend(!0,{},Inputmask.prototype.masksCache[a]))):o=i.extend(!0,{},Inputmask.prototype.masksCache[a]),o}if(i.isFunction(e.mask)&&(e.mask=e.mask(e)),i.isArray(e.mask)){if(1<e.mask.length){null===e.keepStatic&&(e.keepStatic=!0);var r=e.groupmarker[0];return i.each(e.isRTL?e.mask.reverse():e.mask,(function(t,n){1<r.length&&(r+=e.groupmarker[1]+e.alternatormarker+e.groupmarker[0]),void 0===n.mask||i.isFunction(n.mask)?r+=n:r+=n.mask})),n(r+=e.groupmarker[1],e.mask,e)}e.mask=e.mask.pop()}return null===e.keepStatic&&(e.keepStatic=!1),e.mask&&void 0!==e.mask.mask&&!i.isFunction(e.mask.mask)?n(e.mask.mask,e.mask,e):n(e.mask,e.mask,e)},analyseMask:function(e,t,n){var r,o,a,s,l,u,c=/(?:[?*+]|\{[0-9+*]+(?:,[0-9+*]*)?(?:\|[0-9+*]*)?\})|[^.?*+^${[]()|\\]+|./g,d=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,f=!1,p=new g,h=[],m=[],v=!1;function g(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function y(e,r,o){o=void 0!==o?o:e.matches.length;var a=e.matches[o-1];if(t)0===r.indexOf("[")||f&&/\\d|\\s|\\w]/i.test(r)||"."===r?e.matches.splice(o++,0,{fn:new RegExp(r,n.casing?"i":""),static:!1,optionality:!1,newBlockMarker:void 0===a?"master":a.def!==r,casing:null,def:r,placeholder:void 0,nativeDef:r}):(f&&(r=r[r.length-1]),i.each(r.split(""),(function(t,i){a=e.matches[o-1],e.matches.splice(o++,0,{fn:/[a-z]/i.test(n.staticDefinitionSymbol||i)?new RegExp("["+(n.staticDefinitionSymbol||i)+"]",n.casing?"i":""):null,static:!0,optionality:!1,newBlockMarker:void 0===a?"master":a.def!==i&&!0!==a.static,casing:null,def:n.staticDefinitionSymbol||i,placeholder:void 0!==n.staticDefinitionSymbol?i:void 0,nativeDef:(f?"'":"")+i})}))),f=!1;else{var s=(n.definitions?n.definitions[r]:void 0)||Inputmask.prototype.definitions[r];s&&!f?e.matches.splice(o++,0,{fn:s.validator?"string"==typeof s.validator?new RegExp(s.validator,n.casing?"i":""):new function(){this.test=s.validator}:new RegExp("."),static:s.static||!1,optionality:!1,newBlockMarker:void 0===a?"master":a.def!==(s.definitionSymbol||r),casing:s.casing,def:s.definitionSymbol||r,placeholder:s.placeholder,nativeDef:r,generated:s.generated}):(e.matches.splice(o++,0,{fn:/[a-z]/i.test(n.staticDefinitionSymbol||r)?new RegExp("["+(n.staticDefinitionSymbol||r)+"]",n.casing?"i":""):null,static:!0,optionality:!1,newBlockMarker:void 0===a?"master":a.def!==r&&!0!==a.static,casing:null,def:n.staticDefinitionSymbol||r,placeholder:void 0!==n.staticDefinitionSymbol?r:void 0,nativeDef:(f?"'":"")+r}),f=!1)}}function b(){if(0<h.length){if(y(s=h[h.length-1],o),s.isAlternator){l=h.pop();for(var e=0;e<l.matches.length;e++)l.matches[e].isGroup&&(l.matches[e].isGroup=!1);0<h.length?(s=h[h.length-1]).matches.push(l):p.matches.push(l)}}else y(p,o)}function x(e){var t=new g(!0);return t.openGroup=!1,t.matches=e,t}function k(){if((a=h.pop()).openGroup=!1,void 0!==a)if(0<h.length){if((s=h[h.length-1]).matches.push(a),s.isAlternator){l=h.pop();for(var e=0;e<l.matches.length;e++)l.matches[e].isGroup=!1,l.matches[e].alternatorGroup=!1;0<h.length?(s=h[h.length-1]).matches.push(l):p.matches.push(l)}}else p.matches.push(a);else b()}function w(e){var t=e.pop();return t.isQuantifier&&(t=x([e.pop(),t])),t}for(t&&(n.optionalmarker[0]=void 0,n.optionalmarker[1]=void 0);r=t?d.exec(e):c.exec(e);){if(o=r[0],t)switch(o.charAt(0)){case"?":o="{0,1}";break;case"+":case"*":o="{"+o+"}";break;case"|":if(0===h.length){var T=x(p.matches);T.openGroup=!0,h.push(T),p.matches=[],v=!0}}if(f)b();else switch(o.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case n.escapeChar:f=!0,t&&b();break;case n.optionalmarker[1]:case n.groupmarker[1]:k();break;case n.optionalmarker[0]:h.push(new g(!1,!0));break;case n.groupmarker[0]:h.push(new g(!0));break;case n.quantifiermarker[0]:var S=new g(!1,!1,!0),C=(o=o.replace(/[{}]/g,"")).split("|"),E=C[0].split(","),P=isNaN(E[0])?E[0]:parseInt(E[0]),A=1===E.length?P:isNaN(E[1])?E[1]:parseInt(E[1]);"*"!==P&&"+"!==P||(P="*"===A?0:1),S.quantifier={min:P,max:A,jit:C[1]};var _=0<h.length?h[h.length-1].matches:p.matches;if((r=_.pop()).isAlternator){_.push(r),_=r.matches;var j=new g(!0),O=_.pop();_.push(j),_=j.matches,r=O}r.isGroup||(r=x([r])),_.push(r),_.push(S);break;case n.alternatormarker:if(0<h.length){var L=(s=h[h.length-1]).matches[s.matches.length-1];u=s.openGroup&&(void 0===L.matches||!1===L.isGroup&&!1===L.isAlternator)?h.pop():w(s.matches)}else u=w(p.matches);if(u.isAlternator)h.push(u);else if(u.alternatorGroup?(l=h.pop(),u.alternatorGroup=!1):l=new g(!1,!1,!1,!0),l.matches.push(u),h.push(l),u.openGroup){u.openGroup=!1;var z=new g(!0);z.alternatorGroup=!0,h.push(z)}break;default:b()}}for(v&&k();0<h.length;)a=h.pop(),p.matches.push(a);return 0<p.matches.length&&(function e(r){r&&r.matches&&i.each(r.matches,(function(i,o){var a=r.matches[i+1];(void 0===a||void 0===a.matches||!1===a.isQuantifier)&&o&&o.isGroup&&(o.isGroup=!1,t||(y(o,n.groupmarker[0],0),!0!==o.openGroup&&y(o,n.groupmarker[1]))),e(o)}))}(p),m.push(p)),(n.numericInput||n.isRTL)&&function e(t){for(var i in t.matches=t.matches.reverse(),t.matches)if(Object.prototype.hasOwnProperty.call(t.matches,i)){var r=parseInt(i);if(t.matches[i].isQuantifier&&t.matches[r+1]&&t.matches[r+1].isGroup){var o=t.matches[i];t.matches.splice(i,1),t.matches.splice(r+1,0,o)}void 0!==t.matches[i].matches?t.matches[i]=e(t.matches[i]):t.matches[i]=((a=t.matches[i])===n.optionalmarker[0]?a=n.optionalmarker[1]:a===n.optionalmarker[1]?a=n.optionalmarker[0]:a===n.groupmarker[0]?a=n.groupmarker[1]:a===n.groupmarker[1]&&(a=n.groupmarker[0]),a)}var a;return t}(m[0]),m}}},function(e,t,n){"use strict";n(6),n(8),n(9),n(10),e.exports=n(1)},function(e,t,n){"use strict";var i=n(1);i.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}});var r=new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]");function o(e,t,n,i,o){return e=-1<n-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,-1<n-2&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):"00"+e,r.test(e)}i.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].j[j[j]].k[k[k]].l[l[l]]",definitions:{i:{validator:o},j:{validator:o},k:{validator:o},l:{validator:o}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0},ssn:{mask:"999-99-9999",postValidation:function(e,t,n,i,r,o,a){return/^(?!219-09-9999|078-05-1120)(?!666|000|9.{2}).{3}-(?!00).{2}-(?!0{4}).{4}$/.test(e.join(""))}}}),e.exports=i},function(e,t,n){"use strict";function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r=n(2),o=n(3),a=o.document,s=o.navigator&&o.navigator.userAgent||"",l=0<s.indexOf("MSIE ")||0<s.indexOf("Trident/"),u="ontouchstart"in o,c=/iemobile/i.test(s),d=/iphone/i.test(s)&&!c,f=n(0);e.exports=function e(t,n,s){n=n||this.maskset,s=s||this.opts;var p,h,m,v=this,g=this.el,y=this.isRTL||(this.isRTL=s.numericInput),b=!1,x=!1,k=!1,w=!1,T=!1,S=void 0;function C(e,t,i,r,o){var a=s.greedy;o&&(s.greedy=!1),t=t||0;var l,u,c,d,f=[],p=0;do{if(!0===e&&n.validPositions[p])u=(c=o&&!0===n.validPositions[p].match.optionality&&void 0===n.validPositions[p+1]&&(!0===n.validPositions[p].generatedInput||n.validPositions[p].input==s.skipOptionalPartCharacter&&0<p)?j(p,M(p,l,p-1)):n.validPositions[p]).match,l=c.locator.slice(),f.push(!0===i?c.input:!1===i?u.nativeDef:K(p,u));else{u=(c=O(p,l,p-1)).match,l=c.locator.slice();var h=!0!==r&&(!1!==s.jitMasking?s.jitMasking:u.jit);(d=d&&u.static&&u.def!==s.groupSeparator&&null===u.fn||n.validPositions[p-1]&&u.static&&u.def!==s.groupSeparator&&null===u.fn)||!1===h||void 0===h||"number"==typeof h&&isFinite(h)&&p<h?f.push(!1===i?u.nativeDef:K(p,u)):d=!1}p++}while((void 0===m||p<m)&&(!0!==u.static||""!==u.def)||p<t);return""===f[f.length-1]&&f.pop(),!1===i&&void 0!==n.maskLength||(n.maskLength=p-1),s.greedy=a,f}function E(e){n.buffer=void 0,!0!==e&&(n.validPositions={},n.p=0)}function P(e,t,i){var r=-1,o=-1,a=i||n.validPositions;for(var s in void 0===e&&(e=-1),a){var l=parseInt(s);a[l]&&(t||!0!==a[l].generatedInput)&&(l<=e&&(r=l),e<=l&&(o=l))}return-1===r||r==e?o:-1==o||e-r<o-e?r:o}function A(e){var t=e.locator[e.alternation];return"string"==typeof t&&0<t.length&&(t=t.split(",")[0]),void 0!==t?t.toString():""}function _(e,t){var n=(null!=e.alternation?e.mloc[A(e)]:e.locator).join("");if(""!==n)for(;n.length<t;)n+="0";return n}function j(e,t){for(var n,i,r,o=_(L(e=0<e?e-1:0)),a=0;a<t.length;a++){var l=t[a];n=_(l,o.length);var u=Math.abs(n-o);(void 0===i||""!==n&&u<i||r&&!s.greedy&&r.match.optionality&&"master"===r.match.newBlockMarker&&(!l.match.optionality||!l.match.newBlockMarker)||r&&r.match.optionalQuantifier&&!l.match.optionalQuantifier)&&(i=u,r=l)}return r}function O(e,t,i){return n.validPositions[e]||j(e,M(e,t?t.slice():t,i))}function L(e,t){return n.validPositions[e]?n.validPositions[e]:(t||M(e))[0]}function z(e,t,i){for(var r=!1,o=M(e),a=0;a<o.length;a++){if(o[a].match&&(!(o[a].match.nativeDef!==t.match[i.shiftPositions?"def":"nativeDef"]||i.shiftPositions&&t.match.static)||o[a].match.nativeDef===t.match.nativeDef)){r=!0;break}if(o[a].match&&o[a].match.def===t.match.nativeDef){r=void 0;break}}return!1===r&&void 0!==n.jitOffset[e]&&(r=z(e+n.jitOffset[e],t,i)),r}function M(e,t,i){var o,a=n.maskToken,l=t?i:0,u=t?t.slice():[0],c=[],d=!1,f=t?t.join(""):"";function p(t,i,a,u){function h(a,u,m){function v(e,t){var n=0===r.inArray(e,t.matches);return n||r.each(t.matches,(function(i,r){if(!0===r.isQuantifier?n=v(e,t.matches[i-1]):Object.prototype.hasOwnProperty.call(r,"matches")&&(n=v(e,r)),n)return!1})),n}function y(e,t,i){var o,a;if((n.tests[e]||n.validPositions[e])&&r.each(n.tests[e]||[n.validPositions[e]],(function(e,n){if(n.mloc[t])return o=n,!1;var r=void 0!==i?i:n.alternation,s=void 0!==n.locator[r]?n.locator[r].toString().indexOf(t):-1;(void 0===a||s<a)&&-1!==s&&(o=n,a=s)})),o){var s=o.locator[o.alternation];return(o.mloc[t]||o.mloc[s]||o.locator).slice((void 0!==i?i:o.alternation)+1)}return void 0!==i?y(e,t):void 0}function b(e,t){function n(e){for(var t,n=[],i=-1,r=0,o=e.length;r<o;r++)if("-"===e.charAt(r))for(t=e.charCodeAt(r+1);++i<t;)n.push(String.fromCharCode(i));else i=e.charCodeAt(r),n.push(e.charAt(r));return n.join("")}return e.match.def===t.match.nativeDef||!(!(s.regex||e.match.fn instanceof RegExp&&t.match.fn instanceof RegExp)||!0===e.match.static||!0===t.match.static)&&-1!==n(t.match.fn.toString().replace(/[[\]/]/g,"")).indexOf(n(e.match.fn.toString().replace(/[[\]/]/g,"")))}function x(e,t){var n=e.alternation,i=void 0===t||n===t.alternation&&-1===e.locator[n].toString().indexOf(t.locator[n]);if(!i&&n>t.alternation)for(var r=t.alternation;r<n;r++)if(e.locator[r]!==t.locator[r]){n=r,i=!0;break}if(i){e.mloc=e.mloc||{};var o=e.locator[n];if(void 0!==o){if("string"==typeof o&&(o=o.split(",")[0]),void 0===e.mloc[o]&&(e.mloc[o]=e.locator.slice()),void 0!==t){for(var a in t.mloc)"string"==typeof a&&(a=a.split(",")[0]),void 0===e.mloc[a]&&(e.mloc[a]=t.mloc[a]);e.locator[n]=Object.keys(e.mloc).join(",")}return!0}e.alternation=void 0}return!1}function k(e,t){if(e.locator.length!==t.locator.length)return!1;for(var n=e.alternation+1;n<e.locator.length;n++)if(e.locator[n]!==t.locator[n])return!1;return!0}if(l>s._maxTestPos&&void 0!==m)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+n.mask;if(l===e&&void 0===a.matches)return c.push({match:a,locator:u.reverse(),cd:f,mloc:{}}),!0;if(void 0!==a.matches){if(a.isGroup&&m!==a){if(a=h(t.matches[r.inArray(a,t.matches)+1],u,m))return!0}else if(a.isOptional){var w=a,T=c.length;if(a=p(a,i,u,m)){if(r.each(c,(function(e,t){T<=e&&(t.match.optionality=!0)})),o=c[c.length-1].match,void 0!==m||!v(o,w))return!0;d=!0,l=e}}else if(a.isAlternator){var S,C=a,E=[],P=c.slice(),A=u.length,_=0<i.length?i.shift():-1;if(-1===_||"string"==typeof _){var j,O=l,L=i.slice(),z=[];if("string"==typeof _)z=_.split(",");else for(j=0;j<C.matches.length;j++)z.push(j.toString());if(void 0!==n.excludes[e]){for(var M=z.slice(),I=0,D=n.excludes[e].length;I<D;I++){var N=n.excludes[e][I].toString().split(":");u.length==N[1]&&z.splice(z.indexOf(N[0]),1)}0===z.length&&(delete n.excludes[e],z=M)}(!0===s.keepStatic||isFinite(parseInt(s.keepStatic))&&O>=s.keepStatic)&&(z=z.slice(0,1));for(var q=!1,$=0;$<z.length;$++){j=parseInt(z[$]),c=[],i="string"==typeof _&&y(l,j,A)||L.slice(),C.matches[j]&&h(C.matches[j],[j].concat(u),m)?a=!0:0===$&&(q=!0),S=c.slice(),l=O,c=[];for(var R=0;R<S.length;R++){var H=S[R],F=!1;H.match.jit=H.match.jit||q,H.alternation=H.alternation||A,x(H);for(var B=0;B<E.length;B++){var W=E[B];if("string"!=typeof _||void 0!==H.alternation&&-1!==r.inArray(H.locator[H.alternation].toString(),z)){if(H.match.nativeDef===W.match.nativeDef){F=!0,x(W,H);break}if(b(H,W)){x(H,W)&&(F=!0,E.splice(E.indexOf(W),0,H));break}if(b(W,H)){x(W,H);break}if(Y=W,!0===(K=H).match.static&&!0!==Y.match.static&&Y.match.fn.test(K.match.def,n,e,!1,s,!1)){k(H,W)||void 0!==g.inputmask.userOptions.keepStatic?x(H,W)&&(F=!0,E.splice(E.indexOf(W),0,H)):s.keepStatic=!0;break}}}F||E.push(H)}}c=P.concat(E),l=e,d=0<c.length,a=0<E.length,i=L.slice()}else a=h(C.matches[_]||t.matches[_],[_].concat(u),m);if(a)return!0}else if(a.isQuantifier&&m!==t.matches[r.inArray(a,t.matches)-1])for(var V=a,U=0<i.length?i.shift():0;U<(isNaN(V.quantifier.max)?U+1:V.quantifier.max)&&l<=e;U++){var G=t.matches[r.inArray(V,t.matches)-1];if(a=h(G,[U].concat(u),G)){if((o=c[c.length-1].match).optionalQuantifier=U>=V.quantifier.min,o.jit=(U||1)*G.matches.indexOf(o)>=V.quantifier.jit,o.optionalQuantifier&&v(o,G)){d=!0,l=e;break}return o.jit&&(n.jitOffset[e]=G.matches.length-G.matches.indexOf(o)),!0}}else if(a=p(a,i,u,m))return!0}else l++;var K,Y}for(var m=0<i.length?i.shift():0;m<t.matches.length;m++)if(!0!==t.matches[m].isQuantifier){var v=h(t.matches[m],[m].concat(a),u);if(v&&l===e)return v;if(e<l)break}}if(-1<e&&(void 0===m||e<m)){if(void 0===t){for(var h,v=e-1;void 0===(h=n.validPositions[v]||n.tests[v])&&-1<v;)v--;void 0!==h&&-1<v&&(u=function(e,t){var n=[];return r.isArray(t)||(t=[t]),0<t.length&&(void 0===t[0].alternation||!0===s.keepStatic?0===(n=j(e,t.slice()).locator.slice()).length&&(n=t[0].locator.slice()):r.each(t,(function(e,t){if(""!==t.def)if(0===n.length)n=t.locator.slice();else for(var i=0;i<n.length;i++)t.locator[i]&&-1===n[i].toString().indexOf(t.locator[i])&&(n[i]+=","+t.locator[i])}))),n}(v,h),f=u.join(""),l=v)}if(n.tests[e]&&n.tests[e][0].cd===f)return n.tests[e];for(var y=u.shift();y<a.length&&!(p(a[y],u,[y])&&l===e||e<l);y++);}return 0!==c.length&&!d||c.push({match:{fn:null,static:!0,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:f}),void 0!==t&&n.tests[e]?r.extend(!0,[],c):(n.tests[e]=r.extend(!0,[],c),n.tests[e])}function I(){return void 0===n._buffer&&(n._buffer=C(!1,1),void 0===n.buffer&&(n.buffer=n._buffer.slice())),n._buffer}function D(e){return void 0!==n.buffer&&!0!==e||(n.buffer=C(!0,P(),!0),void 0===n._buffer&&(n._buffer=n.buffer.slice())),n.buffer}function N(e,t,i){var o,a,l=s.skipOptionalPartCharacter,u=y?i.slice().reverse():i;if(s.skipOptionalPartCharacter="",!0===e)E(),n.tests={},e=0,t=i.length,a=X({begin:0,end:0},!1).begin;else{for(o=e;o<t;o++)delete n.validPositions[o];a=e}var c=new r.Event("keypress");for(o=e;o<t;o++){c.which=u[o].toString().charCodeAt(0),w=!1;var d=J.keypressEvent.call(g,c,!0,!1,!1,a);!1!==d&&(a=d.forwardPosition)}s.skipOptionalPartCharacter=l}function q(e,t,i){switch(s.casing||t.casing){case"upper":e=e.toUpperCase();break;case"lower":e=e.toLowerCase();break;case"title":var o=n.validPositions[i-1];e=0===i||o&&o.input===String.fromCharCode(f.SPACE)?e.toUpperCase():e.toLowerCase();break;default:if(r.isFunction(s.casing)){var a=Array.prototype.slice.call(arguments);a.push(n.validPositions),e=s.casing.apply(this,a)}}return e}function $(e,t,n){for(var i,o=s.greedy?t:t.slice(0,1),a=!1,l=void 0!==n?n.split(","):[],u=0;u<l.length;u++)-1!==(i=e.indexOf(l[u]))&&e.splice(i,1);for(var c=0;c<e.length;c++)if(-1!==r.inArray(e[c],o)){a=!0;break}return a}function R(e,t,i,o,a,l){var u,c,d,f,p,h,m,v,g,y=r.extend(!0,{},n.validPositions),b=r.extend(!0,{},n.tests),x=!1,k=!1,w=void 0!==a?a:P();if(l&&(v=l.begin,g=l.end,l.begin>l.end&&(v=l.end,g=l.begin)),-1===w&&void 0===a)c=(f=L(u=0)).alternation;else for(;0<=w;w--)if((d=n.validPositions[w])&&void 0!==d.alternation){if(f&&f.locator[d.alternation]!==d.locator[d.alternation])break;u=w,c=n.validPositions[u].alternation,f=d}if(void 0!==c){m=parseInt(u),n.excludes[m]=n.excludes[m]||[],!0!==e&&n.excludes[m].push(A(f)+":"+f.alternation);var T=[],S=-1;for(p=m;p<P(void 0,!0)+1;p++)-1===S&&e<=p&&void 0!==t&&(T.push(t),S=T.length-1),(h=n.validPositions[p])&&!0!==h.generatedInput&&(void 0===l||p<v||g<=p)&&T.push(h.input),delete n.validPositions[p];for(-1===S&&void 0!==t&&(T.push(t),S=T.length-1);void 0!==n.excludes[m]&&n.excludes[m].length<10;){for(n.tests={},E(!0),x=!0,p=0;p<T.length&&(x=H(x.caret||P(void 0,!0)+1,T[p],!1,o,!0));p++)p===S&&(k=x),1==e&&x&&(k={caretPos:p});if(x)break;if(E(),f=L(m),n.validPositions=r.extend(!0,{},y),n.tests=r.extend(!0,{},b),!n.excludes[m]){k=R(e,t,i,o,m-1,l);break}var C=A(f);if(-1!==n.excludes[m].indexOf(C+":"+f.alternation)){k=R(e,t,i,o,m-1,l);break}for(n.excludes[m].push(C+":"+f.alternation),p=m;p<P(void 0,!0)+1;p++)delete n.validPositions[p]}}return k&&!1===s.keepStatic||delete n.excludes[m],k}function H(e,t,i,o,a,l){function u(e){return y?1<e.begin-e.end||e.begin-e.end==1:1<e.end-e.begin||e.end-e.begin==1}i=!0===i;var c=e;function d(e){if(void 0!==e){if(void 0!==e.remove&&(r.isArray(e.remove)||(e.remove=[e.remove]),r.each(e.remove.sort((function(e,t){return t.pos-e.pos})),(function(e,t){B({begin:t,end:t+1})})),e.remove=void 0),void 0!==e.insert&&(r.isArray(e.insert)||(e.insert=[e.insert]),r.each(e.insert.sort((function(e,t){return e.pos-t.pos})),(function(e,t){""!==t.c&&H(t.pos,t.c,void 0===t.strict||t.strict,void 0!==t.fromIsValid?t.fromIsValid:o)})),e.insert=void 0),e.refreshFromBuffer&&e.buffer){var t=e.refreshFromBuffer;N(!0===t?t:t.start,t.end,e.buffer),e.refreshFromBuffer=void 0}void 0!==e.rewritePosition&&(c=e.rewritePosition,e=!0)}return e}function f(t,i,a){var l=!1;return r.each(M(t),(function(c,f){var p=f.match;if(D(!0),!1!==(l=null!=p.fn?p.fn.test(i,n,t,a,s,u(e)):(i===p.def||i===s.skipOptionalPartCharacter)&&""!==p.def&&{c:K(t,p,!0)||p.def,pos:t})){var h=void 0!==l.c?l.c:i,m=t;return h=h===s.skipOptionalPartCharacter&&!0===p.static?K(t,p,!0)||p.def:h,!0!==(l=d(l))&&void 0!==l.pos&&l.pos!==t&&(m=l.pos),!0!==l&&void 0===l.pos&&void 0===l.c||!1===B(e,r.extend({},f,{input:q(h,p,m)}),o,m)&&(l=!1),!1}})),l}void 0!==e.begin&&(c=y?e.end:e.begin);var p=!0,h=r.extend(!0,{},n.validPositions);if(!1===s.keepStatic&&void 0!==n.excludes[c]&&!0!==a&&!0!==o)for(var v=c;v<(y?e.begin:e.end);v++)void 0!==n.excludes[v]&&(n.excludes[v]=void 0,delete n.tests[v]);if(r.isFunction(s.preValidation)&&!0!==o&&!0!==l&&(p=d(p=s.preValidation.call(g,D(),c,t,u(e),s,n,e,i||a))),!0===p){if(void 0===m||c<m){if(p=f(c,t,i),(!i||!0===o)&&!1===p&&!0!==l){var b=n.validPositions[c];if(!b||!0!==b.match.static||b.match.def!==t&&t!==s.skipOptionalPartCharacter){if(s.insertMode||void 0===n.validPositions[V(c)]||e.end>c){var x=!1;if(n.jitOffset[c]&&void 0===n.validPositions[V(c)]&&!1!==(p=H(c+n.jitOffset[c],t,!0))&&(!0!==a&&(p.caret=c),x=!0),e.end>c&&(n.validPositions[c]=void 0),!x&&!W(c,s.keepStatic))for(var k=c+1,w=V(c);k<=w;k++)if(!1!==(p=f(k,t,i))){p=F(c,void 0!==p.pos?p.pos:k)||p,c=k;break}}}else p={caret:V(c)}}}else p=!1;!1!==p||!s.keepStatic||!ae(D())&&0!==c||i||!0===a?u(e)&&n.tests[c]&&1<n.tests[c].length&&s.keepStatic&&!i&&!0!==a&&(p=R(!0)):p=R(c,t,i,o,void 0,e),!0===p&&(p={pos:c})}if(r.isFunction(s.postValidation)&&!0!==o&&!0!==l){var T=s.postValidation.call(g,D(!0),void 0!==e.begin?y?e.end:e.begin:e,t,p,s,n,i);void 0!==T&&(p=!0===T?p:T)}return p&&void 0===p.pos&&(p.pos=c),!1===p||!0===l?(E(!0),n.validPositions=r.extend(!0,{},h)):F(void 0,c,!0),d(p)}function F(e,t,i){if(void 0===e)for(e=t-1;0<e&&!n.validPositions[e];e--);for(var o=e;o<t;o++)if(void 0===n.validPositions[o]&&!W(o,!0)&&(0==o?L(o):n.validPositions[o-1])){var a=M(o).slice();""===a[a.length-1].match.def&&a.pop();var s,l=j(o,a);if(l&&(!0!==l.match.jit||"master"===l.match.newBlockMarker&&(s=n.validPositions[o+1])&&!0===s.match.optionalQuantifier)&&((l=r.extend({},l,{input:K(o,l.match,!0)||l.match.def})).generatedInput=!0,B(o,l,!0),!0!==i)){var u=n.validPositions[t].input;return n.validPositions[t]=void 0,H(t,u,!0,!0)}}}function B(e,t,i,o){function a(e,t,n){var i=t[e];if(void 0===i||!0!==i.match.static||!0===i.match.optionality||void 0!==t[0]&&void 0!==t[0].alternation)return!1;var r=n.begin<=e-1?t[e-1]&&!0===t[e-1].match.static&&t[e-1]:t[e-1],o=n.end>e+1?t[e+1]&&!0===t[e+1].match.static&&t[e+1]:t[e+1];return r&&o}var l=0,u=void 0!==e.begin?e.begin:e,c=void 0!==e.end?e.end:e;if(e.begin>e.end&&(u=e.end,c=e.begin),o=void 0!==o?o:u,u!==c||s.insertMode&&void 0!==n.validPositions[o]&&void 0===i||void 0===t){var d,f=r.extend(!0,{},n.validPositions),p=P(void 0,!0);for(n.p=u,d=p;u<=d;d--)delete n.validPositions[d],void 0===t&&delete n.tests[d+1];var h,m,v=!0,g=o,y=g;for(t&&(n.validPositions[o]=r.extend(!0,{},t),y++,g++),d=t?c:c-1;d<=p;d++){if(void 0!==(h=f[d])&&!0!==h.generatedInput&&(c<=d||u<=d&&a(d,f,{begin:u,end:c}))){for(;""!==L(y).match.def;){if(!1!==(m=z(y,h,s))||"+"===h.match.def){"+"===h.match.def&&D(!0);var b=H(y,h.input,"+"!==h.match.def,"+"!==h.match.def);if(v=!1!==b,g=(b.pos||y)+1,!v&&m)break}else v=!1;if(v){void 0===t&&h.match.static&&d===e.begin&&l++;break}if(!v&&y>n.maskLength)break;y++}""==L(y).match.def&&(v=!1),y=g}if(!v)break}if(!v)return n.validPositions=r.extend(!0,{},f),E(!0),!1}else t&&L(o).match.cd===t.match.cd&&(n.validPositions[o]=r.extend(!0,{},t));return E(!0),l}function W(e,t,i){var r=O(e).match;if(""===r.def&&(r=L(e).match),!0!==r.static)return r.fn;if(!0===i&&void 0!==n.validPositions[e]&&!0!==n.validPositions[e].generatedInput)return!0;if(!0!==t&&-1<e){if(i){var o=M(e);return o.length>1+(""===o[o.length-1].match.def?1:0)}var a=j(e,M(e)),s=K(e,a.match);return a.match.def!==s}return!1}function V(e,t,n){void 0===n&&(n=!0);for(var i=e+1;""!==L(i).match.def&&(!0===t&&(!0!==L(i).match.newBlockMarker||!W(i,void 0,!0))||!0!==t&&!W(i,void 0,n));)i++;return i}function U(e,t){var n,i=e;if(i<=0)return 0;for(;0<--i&&(!0===t&&!0!==L(i).match.newBlockMarker||!0!==t&&!W(i,void 0,!0)&&((n=M(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function G(e,t,n,i,o){if(i&&r.isFunction(s.onBeforeWrite)){var a=s.onBeforeWrite.call(v,i,t,n,s);if(a){if(a.refreshFromBuffer){var l=a.refreshFromBuffer;N(!0===l?l:l.start,l.end,a.buffer||t),t=D(!0)}void 0!==n&&(n=void 0!==a.caret?a.caret:n)}}if(void 0!==e&&(e.inputmask._valueSet(t.join("")),void 0===n||void 0!==i&&"blur"===i.type||ie(e,n,void 0,void 0,void 0!==i&&"keydown"===i.type&&(i.keyCode===f.DELETE||i.keyCode===f.BACKSPACE)),!0===o)){var u=r(e),c=e.inputmask._valueGet();x=!0,u.trigger("input"),setTimeout((function(){c===I().join("")?u.trigger("cleared"):!0===ae(t)&&u.trigger("complete")}),0)}}function K(e,t,i){if(void 0!==(t=t||L(e).match).placeholder||!0===i)return r.isFunction(t.placeholder)?t.placeholder(s):t.placeholder;if(!0!==t.static)return s.placeholder.charAt(e%s.placeholder.length);if(-1<e&&void 0===n.validPositions[e]){var o,a=M(e),l=[];if(a.length>1+(""===a[a.length-1].match.def?1:0))for(var u=0;u<a.length;u++)if(""!==a[u].match.def&&!0!==a[u].match.optionality&&!0!==a[u].match.optionalQuantifier&&(!0===a[u].match.static||void 0===o||!1!==a[u].match.fn.test(o.match.def,n,e,!0,s))&&(l.push(a[u]),!0===a[u].match.static&&(o=a[u]),1<l.length&&/[0-9a-bA-Z]/.test(l[0].match.def)))return s.placeholder.charAt(e%s.placeholder.length)}return t.def}function Y(e,t){if(l){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var n=D().slice(),i=e.inputmask._valueGet();if(i!==t){var r=P();-1===r&&i===I().join("")?n=[]:-1!==r&&oe(n),G(e,n)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}function X(e,t){if(t&&(y?e.end=e.begin:e.begin=e.end),e.begin===e.end){switch(s.positionCaretOnClick){case"none":break;case"select":e={begin:0,end:D().length};break;case"ignore":e.end=e.begin=V(P());break;case"radixFocus":if(function(e){if(""!==s.radixPoint&&0!==s.digits){var t=n.validPositions;if(void 0===t[e]||t[e].input===K(e)){if(e<V(-1))return!0;var i=r.inArray(s.radixPoint,D());if(-1!==i){for(var o in t)if(t[o]&&i<o&&t[o].input!==K(o))return!1;return!0}}}return!1}(e.begin)){var i=D().join("").indexOf(s.radixPoint);e.end=e.begin=s.numericInput?V(i):i;break}default:var o=e.begin,a=P(o,!0),l=V(-1!==a||W(0)?a:0);if(o<l)e.end=e.begin=W(o,!0)||W(o-1,!0)?o:V(o);else{var u=n.validPositions[a],c=O(l,u?u.match.locator:void 0,u),d=K(l,c.match);if(""!==d&&D()[l]!==d&&!0!==c.match.optionalQuantifier&&!0!==c.match.newBlockMarker||!W(l,s.keepStatic)&&c.match.def===d){var f=V(l);(f<=o||o===l)&&(l=f)}e.end=e.begin=l}}return e}}var Z,Q={on:function(e,t,n){var i=function(t){t.originalEvent&&(t=t.originalEvent||t,arguments[0]=t);var i,o=this;if(void 0===o.inputmask&&"FORM"!==this.nodeName){var a=r.data(o,"_inputmask_opts");a?new Inputmask(a).mask(o):Q.off(o)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(o.disabled||o.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===s.tabThrough&&t.keyCode===f.TAB))){switch(t.type){case"input":if(!0===x||t.inputType&&"insertCompositionText"===t.inputType)return x=!1,t.preventDefault();break;case"keydown":b=!1,x=!1;break;case"keypress":if(!0===b)return t.preventDefault();b=!0;break;case"click":case"focus":return k?(k=!1,e.blur(),Y(e,(y?I().slice().reverse():I()).join("")),setTimeout((function(){e.focus()}),3e3)):(i=arguments,setTimeout((function(){e.inputmask&&n.apply(o,i)}),0)),!1}var l=n.apply(o,arguments);return!1===l&&(t.preventDefault(),t.stopPropagation()),l}t.preventDefault()}};e.inputmask.events[t]=e.inputmask.events[t]||[],e.inputmask.events[t].push(i),-1!==r.inArray(t,["submit","reset"])?null!==e.form&&r(e.form).on(t,i):r(e).on(t,i)},off:function(e,t){var n;e.inputmask&&e.inputmask.events&&(t?(n=[])[t]=e.inputmask.events[t]:n=e.inputmask.events,r.each(n,(function(t,n){for(;0<n.length;){var i=n.pop();-1!==r.inArray(t,["submit","reset"])?null!==e.form&&r(e.form).off(t,i):r(e).off(t,i)}delete e.inputmask.events[t]})))}},J={keydownEvent:function(e){var t=this,i=r(t),o=e.keyCode,a=ie(t),l=s.onKeyDown.call(this,e,D(),a,s);if(void 0!==l)return l;if(o===f.BACKSPACE||o===f.DELETE||d&&o===f.BACKSPACE_SAFARI||e.ctrlKey&&o===f.X&&!("oncut"in t))e.preventDefault(),se(0,o,a),G(t,D(!0),n.p,e,t.inputmask._valueGet()!==D().join(""));else if(o===f.END||o===f.PAGE_DOWN){e.preventDefault();var u=V(P());ie(t,e.shiftKey?a.begin:u,u,!0)}else o===f.HOME&&!e.shiftKey||o===f.PAGE_UP?(e.preventDefault(),ie(t,0,e.shiftKey?a.begin:0,!0)):(s.undoOnEscape&&o===f.ESCAPE||90===o&&e.ctrlKey)&&!0!==e.altKey?(ee(t,!0,!1,p.split("")),i.trigger("click")):!0===s.tabThrough&&o===f.TAB?(!0===e.shiftKey?(!0===L(a.begin).match.static&&(a.begin=V(a.begin)),a.end=U(a.begin,!0),a.begin=U(a.end,!0)):(a.begin=V(a.begin,!0),a.end=V(a.begin,!0),a.end<n.maskLength&&a.end--),a.begin<n.maskLength&&(e.preventDefault(),ie(t,a.begin,a.end))):e.shiftKey||s.insertModeVisual&&!1===s.insertMode&&(o===f.RIGHT?setTimeout((function(){var e=ie(t);ie(t,e.begin)}),0):o===f.LEFT&&setTimeout((function(){var e=ne(t.inputmask.caretPos.begin);ne(t.inputmask.caretPos.end),ie(t,y?e+(e===n.maskLength?0:1):e-(0===e?0:1))}),0));w=-1!==r.inArray(o,s.ignorables)},keypressEvent:function(e,t,i,o,a){var l=this,u=r(l),c=e.which||e.charCode||e.keyCode;if(!(!0===t||e.ctrlKey&&e.altKey)&&(e.ctrlKey||e.metaKey||w))return c===f.ENTER&&p!==D().join("")&&(p=D().join(""),setTimeout((function(){u.trigger("change")}),0)),x=!0,!0;if(c){44!==c&&46!==c||3!==e.location||""===s.radixPoint||(c=s.radixPoint.charCodeAt(0));var d,h=t?{begin:a,end:a}:ie(l),m=String.fromCharCode(c);n.writeOutBuffer=!0;var v=H(h,m,o);if(!1!==v&&(E(!0),d=void 0!==v.caret?v.caret:V(v.pos.begin?v.pos.begin:v.pos),n.p=d),d=s.numericInput&&void 0===v.caret?U(d):d,!1!==i&&(setTimeout((function(){s.onKeyValidation.call(l,c,v)}),0),n.writeOutBuffer&&!1!==v)){var g=D();G(l,g,d,e,!0!==t)}if(e.preventDefault(),t)return!1!==v&&(v.forwardPosition=d),v}},pasteEvent:function(e){var t,n=this.inputmask._valueGet(!0),i=ie(this);y&&(t=i.end,i.end=i.begin,i.begin=t);var a=n.substr(0,i.begin),l=n.substr(i.end,n.length);if(a==(y?I().slice().reverse():I()).slice(0,i.begin).join("")&&(a=""),l==(y?I().slice().reverse():I()).slice(i.end).join("")&&(l=""),o.clipboardData&&o.clipboardData.getData)n=a+o.clipboardData.getData("Text")+l;else{if(!e.clipboardData||!e.clipboardData.getData)return!0;n=a+e.clipboardData.getData("text/plain")+l}var u=n;if(r.isFunction(s.onBeforePaste)){if(!1===(u=s.onBeforePaste.call(v,n,s)))return e.preventDefault();u=u||n}return ee(this,!1,!1,u.toString().split("")),G(this,D(),V(P()),e,p!==D().join("")),e.preventDefault()},inputFallBackEvent:function(e){var t=this,n=t.inputmask._valueGet(!0),i=(y?D().slice().reverse():D()).join(""),o=ie(t,void 0,void 0,!0);if(i!==n){var l=function(e,t,n){for(var i,r,o,a=e.substr(0,n.begin).split(""),l=e.substr(n.begin).split(""),u=t.substr(0,n.begin).split(""),c=t.substr(n.begin).split(""),d=a.length>=u.length?a.length:u.length,f=l.length>=c.length?l.length:c.length,p="",h=[];a.length<d;)a.push("~");for(;u.length<d;)u.push("~");for(;l.length<f;)l.unshift("~");for(;c.length<f;)c.unshift("~");var m=a.concat(l),v=u.concat(c);for(r=0,i=m.length;r<i;r++)switch(o=K(ne(r)),p){case"insertText":v[r-1]===m[r]&&n.begin==m.length-1&&h.push(m[r]),r=i;break;case"insertReplacementText":case"deleteContentBackward":"~"===m[r]?n.end++:r=i;break;default:m[r]!==v[r]&&("~"!==m[r+1]&&m[r+1]!==o&&void 0!==m[r+1]||(v[r]!==o||"~"!==v[r+1])&&"~"!==v[r]?"~"===v[r+1]&&v[r]===m[r+1]?(p="insertText",h.push(m[r]),n.begin--,n.end--):m[r]!==o&&"~"!==m[r]&&("~"===m[r+1]||v[r]!==m[r]&&v[r+1]===m[r+1])?(p="insertReplacementText",h.push(m[r]),n.begin--):"~"===m[r]?(p="deleteContentBackward",!W(ne(r),!0)&&v[r]!==s.radixPoint||n.end++):r=i:(p="insertText",h.push(m[r]),n.begin--,n.end--))}return{action:p,data:h,caret:n}}(n=function(e,t,n){if(c){var i=t.replace(D().join(""),"");if(1===i.length){var r=t.split("");r.splice(n.begin,0,i),t=r.join("")}}return t}(0,n,o),i,o);switch((t.inputmask.shadowRoot||a).activeElement!==t&&t.focus(),G(t,D()),ie(t,o.begin,o.end,!0),l.action){case"insertText":case"insertReplacementText":r.each(l.data,(function(e,n){var i=new r.Event("keypress");i.which=n.charCodeAt(0),w=!1,J.keypressEvent.call(t,i)})),setTimeout((function(){h.trigger("keyup")}),0);break;case"deleteContentBackward":var u=new r.Event("keydown");u.keyCode=f.BACKSPACE,J.keydownEvent.call(t,u);break;default:le(t,n)}e.preventDefault()}},compositionendEvent:function(e){h.trigger("input")},setValueEvent:function(e,t,n){var i=e&&e.detail?e.detail[0]:t;void 0===i&&(i=this.inputmask._valueGet(!0)),le(this,i),(e.detail&&void 0!==e.detail[1]||void 0!==n)&&ie(this,e.detail?e.detail[1]:n)},focusEvent:function(e){var t=this.inputmask._valueGet();s.showMaskOnFocus&&t!==D().join("")&&G(this,D(),V(P())),!0!==s.positionCaretOnTab||!1!==T||ae(D())&&-1!==P()||J.clickEvent.apply(this,[e,!0]),p=D().join("")},invalidEvent:function(e){k=!0},mouseleaveEvent:function(){T=!1,s.clearMaskOnLostFocus&&(this.inputmask.shadowRoot||a).activeElement!==this&&Y(this,S)},clickEvent:function(e,t){if((this.inputmask.shadowRoot||a).activeElement===this){var n=X(ie(this),t);void 0!==n&&ie(this,n)}},cutEvent:function(e){var t=ie(this),i=o.clipboardData||e.clipboardData,r=y?D().slice(t.end,t.begin):D().slice(t.begin,t.end);i.setData("text",y?r.reverse().join(""):r.join("")),a.execCommand&&a.execCommand("copy"),se(0,f.DELETE,t),G(this,D(),n.p,e,p!==D().join(""))},blurEvent:function(e){var t=r(this);if(this.inputmask){Y(this,S);var n=this.inputmask._valueGet(),i=D().slice();""!==n&&(s.clearMaskOnLostFocus&&(-1===P()&&n===I().join("")?i=[]:oe(i)),!1===ae(i)&&(setTimeout((function(){t.trigger("incomplete")}),0),s.clearIncomplete&&(E(),i=s.clearMaskOnLostFocus?[]:I().slice())),G(this,i,void 0,e)),p!==D().join("")&&(p=D().join(""),t.trigger("change"))}},mouseenterEvent:function(){T=!0,(this.inputmask.shadowRoot||a).activeElement!==this&&(null==S&&this.placeholder!==S&&(S=this.placeholder),s.showMaskOnHover&&Y(this,(y?I().slice().reverse():I()).join("")))},submitEvent:function(){p!==D().join("")&&h.trigger("change"),s.clearMaskOnLostFocus&&-1===P()&&g.inputmask._valueGet&&g.inputmask._valueGet()===I().join("")&&g.inputmask._valueSet(""),s.clearIncomplete&&!1===ae(D())&&g.inputmask._valueSet(""),s.removeMaskOnSubmit&&(g.inputmask._valueSet(g.inputmask.unmaskedvalue(),!0),setTimeout((function(){G(g,D())}),0))},resetEvent:function(){g.inputmask.refreshValue=!0,setTimeout((function(){le(g,g.inputmask._valueGet(!0))}),0)}};function ee(e,t,i,o,a){var l=this||e.inputmask,u=o.slice(),c="",d=-1,f=void 0;E(),n.tests={},d=s.radixPoint?X({begin:0,end:0}).begin:0,n.p=d,l.caretPos={begin:d};var p=[],h=l.caretPos;if(r.each(u,(function(t,o){if(void 0!==o)if(void 0===n.validPositions[t]&&u[t]===K(t)&&W(t,!0)&&!1===H(t,u[t],!0,void 0,void 0,!0))n.p++;else{var a=new r.Event("_checkval");a.which=o.toString().charCodeAt(0),c+=o;var s=P(void 0,!0);!function(e,t){for(var n=C(!0,0).slice(e,V(e)).join("").replace(/'/g,""),i=n.indexOf(t);0<i&&" "===n[i-1];)i--;var r=0===i&&!W(e)&&(L(e).match.nativeDef===t.charAt(0)||!0===L(e).match.static&&L(e).match.nativeDef==="'"+t.charAt(0)||" "===L(e).match.nativeDef&&(L(e+1).match.nativeDef===t.charAt(0)||!0===L(e+1).match.static&&L(e+1).match.nativeDef==="'"+t.charAt(0)));if(!r&&0<i&&!W(e,!1,!0)){var o=V(e);l.caretPos.begin<o&&(l.caretPos={begin:o})}return r}(d,c)?(f=J.keypressEvent.call(e,a,!0,!1,i,l.caretPos.begin))&&(d=l.caretPos.begin+1,c=""):f=J.keypressEvent.call(e,a,!0,!1,i,s+1),f?(void 0!==f.pos&&n.validPositions[f.pos]&&!0===n.validPositions[f.pos].match.static&&void 0===n.validPositions[f.pos].alternation&&(p.push(f.pos),y||(f.forwardPosition=f.pos+1)),G(void 0,D(),f.forwardPosition,a,!1),l.caretPos={begin:f.forwardPosition,end:f.forwardPosition},h=l.caretPos):l.caretPos=h}})),0<p.length){var m,v,g=V(-1,void 0,!1);if(!ae(D())&&p.length<=g||ae(D())&&0<p.length&&p.length!==g&&0===p[0])for(var b=g;void 0!==(m=p.shift());){var x=new r.Event("_checkval");if((v=n.validPositions[m]).generatedInput=!0,x.which=v.input.charCodeAt(0),(f=J.keypressEvent.call(e,x,!0,!1,i,b))&&void 0!==f.pos&&f.pos!==m&&n.validPositions[f.pos]&&!0===n.validPositions[f.pos].match.static)p.push(f.pos);else if(!f)break;b++}else for(;m=p.pop();)(v=n.validPositions[m])&&(v.generatedInput=!0)}if(t)for(var k in G(e,D(),f?f.forwardPosition:void 0,a||new r.Event("checkval"),a&&"input"===a.type),n.validPositions)!0!==n.validPositions[k].match.generated&&delete n.validPositions[k].generatedInput}function te(e){if(e){if(void 0===e.inputmask)return e.value;e.inputmask&&e.inputmask.refreshValue&&le(e,e.inputmask._valueGet(!0))}var t=[],i=n.validPositions;for(var o in i)i[o]&&i[o].match&&(1!=i[o].match.static||!0!==i[o].generatedInput)&&t.push(i[o].input);var a=0===t.length?"":(y?t.reverse():t).join("");if(r.isFunction(s.onUnMask)){var l=(y?D().slice().reverse():D()).join("");a=s.onUnMask.call(v,l,a,s)}return a}function ne(e){return!y||"number"!=typeof e||s.greedy&&""===s.placeholder||!g||(e=g.inputmask._valueGet().length-e),e}function ie(e,t,n,i,l){var u;if(void 0===t)return"selectionStart"in e&&"selectionEnd"in e?(t=e.selectionStart,n=e.selectionEnd):o.getSelection?(u=o.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==e&&u.commonAncestorContainer!==e||(t=u.startOffset,n=u.endOffset):a.selection&&a.selection.createRange&&(n=(t=0-(u=a.selection.createRange()).duplicate().moveStart("character",-e.inputmask._valueGet().length))+u.text.length),{begin:i?t:ne(t),end:i?n:ne(n)};if(r.isArray(t)&&(n=y?t[0]:t[1],t=y?t[1]:t[0]),void 0!==t.begin&&(n=y?t.begin:t.end,t=y?t.end:t.begin),"number"==typeof t){t=i?t:ne(t),n="number"==typeof(n=i?n:ne(n))?n:t;var c=parseInt(((e.ownerDocument.defaultView||o).getComputedStyle?(e.ownerDocument.defaultView||o).getComputedStyle(e,null):e.currentStyle).fontSize)*n;if(e.scrollLeft=c>e.scrollWidth?c:0,e.inputmask.caretPos={begin:t,end:n},s.insertModeVisual&&!1===s.insertMode&&t===n&&(l||n++),e===(e.inputmask.shadowRoot||a).activeElement)if("setSelectionRange"in e)e.setSelectionRange(t,n);else if(o.getSelection){if(u=a.createRange(),void 0===e.firstChild||null===e.firstChild){var d=a.createTextNode("");e.appendChild(d)}u.setStart(e.firstChild,t<e.inputmask._valueGet().length?t:e.inputmask._valueGet().length),u.setEnd(e.firstChild,n<e.inputmask._valueGet().length?n:e.inputmask._valueGet().length),u.collapse(!0);var f=o.getSelection();f.removeAllRanges(),f.addRange(u)}else e.createTextRange&&((u=e.createTextRange()).collapse(!0),u.moveEnd("character",n),u.moveStart("character",t),u.select())}}function re(e){var t,i,o=C(!0,P(),!0,!0),a=o.length,s=P(),l={},u=n.validPositions[s],c=void 0!==u?u.locator.slice():void 0;for(t=s+1;t<o.length;t++)c=(i=O(t,c,t-1)).locator.slice(),l[t]=r.extend(!0,{},i);var d=u&&void 0!==u.alternation?u.locator[u.alternation]:void 0;for(t=a-1;s<t&&((i=l[t]).match.optionality||i.match.optionalQuantifier&&i.match.newBlockMarker||d&&(d!==l[t].locator[u.alternation]&&1!=i.match.static||!0===i.match.static&&i.locator[u.alternation]&&$(i.locator[u.alternation].toString().split(","),d.toString().split(","))&&""!==M(t)[0].def))&&o[t]===K(t,i.match);t--)a--;return e?{l:a,def:l[a]?l[a].match:void 0}:a}function oe(e){e.length=0;for(var t,n=C(!0,0,!0,void 0,!0);void 0!==(t=n.shift());)e.push(t);return e}function ae(e){if(r.isFunction(s.isComplete))return s.isComplete(e,s);if("*"!==s.repeat){var t=!1,i=re(!0),o=U(i.l);if(void 0===i.def||i.def.newBlockMarker||i.def.optionality||i.def.optionalQuantifier){t=!0;for(var a=0;a<=o;a++){var l=O(a).match;if(!0!==l.static&&void 0===n.validPositions[a]&&!0!==l.optionality&&!0!==l.optionalQuantifier||!0===l.static&&e[a]!==K(a,l)){t=!1;break}}}return t}}function se(e,t,i,r,o){if((s.numericInput||y)&&(t===f.BACKSPACE?t=f.DELETE:t===f.DELETE&&(t=f.BACKSPACE),y)){var a=i.end;i.end=i.begin,i.begin=a}var l,u=P(void 0,!0);if(i.end>=D().length&&u>=i.end&&(i.end=u+1),t===f.BACKSPACE?i.end-i.begin<1&&(i.begin=U(i.begin)):t===f.DELETE&&i.begin===i.end&&(i.end=W(i.end,!0,!0)?i.end+1:V(i.end)+1),!1!==(l=B(i))){if(!0!==r&&!1!==s.keepStatic||null!==s.regex&&-1!==L(i.begin).match.def.indexOf("|")){var c=R(!0);if(c){var d=void 0!==c.caret?c.caret:c.pos?V(c.pos.begin?c.pos.begin:c.pos):P(-1,!0);(t!==f.DELETE||i.begin>d)&&i.begin}}!0!==r&&(n.p=t===f.DELETE?i.begin+l:i.begin)}}function le(e,t){e.inputmask.refreshValue=!1,r.isFunction(s.onBeforeMask)&&(t=s.onBeforeMask.call(v,t,s)||t),ee(e,!0,!1,t=t.toString().split("")),p=D().join(""),(s.clearMaskOnLostFocus||s.clearIncomplete)&&e.inputmask._valueGet()===I().join("")&&-1===P()&&e.inputmask._valueSet("")}if(void 0!==t)switch(t.action){case"isComplete":return g=t.el,ae(D());case"unmaskedvalue":return void 0!==g&&void 0===t.value||(Z=t.value,Z=(r.isFunction(s.onBeforeMask)&&s.onBeforeMask.call(v,Z,s)||Z).split(""),ee.call(this,void 0,!1,!1,Z),r.isFunction(s.onBeforeWrite)&&s.onBeforeWrite.call(v,void 0,D(),0,s)),te(g);case"mask":!function(e){Q.off(e);var t=function(e,t){"textarea"!==e.tagName.toLowerCase()&&t.ignorables.push(f.ENTER);var n=e.getAttribute("type"),o="input"===e.tagName.toLowerCase()&&-1!==r.inArray(n,t.supportsInputType)||e.isContentEditable||"textarea"===e.tagName.toLowerCase();if(!o)if("input"===e.tagName.toLowerCase()){var s=a.createElement("input");s.setAttribute("type",n),o="text"===s.type,s=null}else o="partial";return!1!==o?function(e){var n,o;function s(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==P()||!0!==t.nullable?(this.inputmask.shadowRoot||a.activeElement)===this&&t.clearMaskOnLostFocus?(y?oe(D().slice()).reverse():oe(D().slice())).join(""):n.call(this):"":n.call(this)}function l(e){o.call(this,e),this.inputmask&&le(this,e)}if(!e.inputmask.__valueGet){if(!0!==t.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===i("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var u=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(e),"value"):void 0;u&&u.get&&u.set?(n=u.get,o=u.set,Object.defineProperty(e,"value",{get:s,set:l,configurable:!0})):"input"!==e.tagName.toLowerCase()&&(n=function(){return this.textContent},o=function(e){this.textContent=e},Object.defineProperty(e,"value",{get:s,set:l,configurable:!0}))}else a.__lookupGetter__&&e.__lookupGetter__("value")&&(n=e.__lookupGetter__("value"),o=e.__lookupSetter__("value"),e.__defineGetter__("value",s),e.__defineSetter__("value",l));e.inputmask.__valueGet=n,e.inputmask.__valueSet=o}e.inputmask._valueGet=function(e){return y&&!0!==e?n.call(this.el).split("").reverse().join(""):n.call(this.el)},e.inputmask._valueSet=function(e,t){o.call(this.el,null==e?"":!0!==t&&y?e.split("").reverse().join(""):e)},void 0===n&&(n=function(){return this.value},o=function(e){this.value=e},function(e){if(r.valHooks&&(void 0===r.valHooks[e]||!0!==r.valHooks[e].inputmaskpatch)){var n=r.valHooks[e]&&r.valHooks[e].get?r.valHooks[e].get:function(e){return e.value},i=r.valHooks[e]&&r.valHooks[e].set?r.valHooks[e].set:function(e,t){return e.value=t,e};r.valHooks[e]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var i=n(e);return-1!==P(void 0,void 0,e.inputmask.maskset.validPositions)||!0!==t.nullable?i:""}return n(e)},set:function(e,t){var n=i(e,t);return e.inputmask&&le(e,t),n},inputmaskpatch:!0}}}(e.type),function(e){Q.on(e,"mouseenter",(function(){var e=this.inputmask._valueGet(!0);e!==(y?D().reverse():D()).join("")&&le(this,e)}))}(e))}}(e):e.inputmask=void 0,o}(e,s);if(!1!==t){h=r(g=e),S=g.placeholder,-1===(m=void 0!==g?g.maxLength:void 0)&&(m=void 0),"inputMode"in g&&null===g.getAttribute("inputmode")&&(g.inputMode=s.inputmode,g.setAttribute("inputmode",s.inputmode)),!0===t&&(s.showMaskOnFocus=s.showMaskOnFocus&&-1===["cc-number","cc-exp"].indexOf(g.autocomplete),d&&(s.insertModeVisual=!1),Q.on(g,"submit",J.submitEvent),Q.on(g,"reset",J.resetEvent),Q.on(g,"blur",J.blurEvent),Q.on(g,"focus",J.focusEvent),Q.on(g,"invalid",J.invalidEvent),Q.on(g,"click",J.clickEvent),Q.on(g,"mouseleave",J.mouseleaveEvent),Q.on(g,"mouseenter",J.mouseenterEvent),Q.on(g,"paste",J.pasteEvent),Q.on(g,"cut",J.cutEvent),Q.on(g,"complete",s.oncomplete),Q.on(g,"incomplete",s.onincomplete),Q.on(g,"cleared",s.oncleared),u||!0===s.inputEventOnly?g.removeAttribute("maxLength"):(Q.on(g,"keydown",J.keydownEvent),Q.on(g,"keypress",J.keypressEvent)),Q.on(g,"input",J.inputFallBackEvent),Q.on(g,"compositionend",J.compositionendEvent)),Q.on(g,"setvalue",J.setValueEvent),p=I().join("");var n=(g.inputmask.shadowRoot||a).activeElement;if(""!==g.inputmask._valueGet(!0)||!1===s.clearMaskOnLostFocus||n===g){le(g,g.inputmask._valueGet(!0));var o=D().slice();!1===ae(o)&&s.clearIncomplete&&E(),s.clearMaskOnLostFocus&&n!==g&&(-1===P()?o=[]:oe(o)),(!1===s.clearMaskOnLostFocus||s.showMaskOnFocus&&n===g||""!==g.inputmask._valueGet(!0))&&G(g,o),n===g&&ie(g,V(P()))}}}(g);break;case"format":return Z=(r.isFunction(s.onBeforeMask)&&s.onBeforeMask.call(v,t.value,s)||t.value).split(""),ee.call(this,void 0,!0,!1,Z),t.metadata?{value:y?D().slice().reverse().join(""):D().join(""),metadata:e.call(this,{action:"getmetadata"},n,s)}:y?D().slice().reverse().join(""):D().join("");case"isValid":t.value?(Z=(r.isFunction(s.onBeforeMask)&&s.onBeforeMask.call(v,t.value,s)||t.value).split(""),ee.call(this,void 0,!0,!1,Z)):t.value=y?D().slice().reverse().join(""):D().join("");for(var ue=D(),ce=re(),de=ue.length-1;ce<de&&!W(de);de--);return ue.splice(ce,de+1-ce),ae(ue)&&t.value===(y?D().slice().reverse().join(""):D().join(""));case"getemptymask":return I().join("");case"remove":if(g&&g.inputmask){r.data(g,"_inputmask_opts",null),h=r(g);var fe=s.autoUnmask?te(g):g.inputmask._valueGet(s.autoUnmask);fe!==I().join("")?g.inputmask._valueSet(fe,s.autoUnmask):g.inputmask._valueSet(""),Q.off(g),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(g),"value")&&g.inputmask.__valueGet&&Object.defineProperty(g,"value",{get:g.inputmask.__valueGet,set:g.inputmask.__valueSet,configurable:!0}):a.__lookupGetter__&&g.__lookupGetter__("value")&&g.inputmask.__valueGet&&(g.__defineGetter__("value",g.inputmask.__valueGet),g.__defineSetter__("value",g.inputmask.__valueSet)),g.inputmask=void 0}return g;case"getmetadata":if(r.isArray(n.metadata)){var pe=C(!0,0,!1).join("");return r.each(n.metadata,(function(e,t){if(t.mask===pe)return pe=t,!1})),pe}return n.metadata}}},function(e,t,n){"use strict";function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r=n(1),o=r.dependencyLib,a=n(0),s={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return f(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return f(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return f(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return f(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return f(Date.prototype.getHours.call(this),2)}],hx:[function(e){return"[0-9]{".concat(e,"}")},Date.prototype.setHours,"hours",function(e){return Date.prototype.getHours}],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return f(Date.prototype.getHours.call(this),2)}],Hx:[function(e){return"[0-9]{".concat(e,"}")},Date.prototype.setHours,"hours",function(e){return function(){return f(Date.prototype.getHours.call(this),e)}}],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return f(Date.prototype.getMinutes.call(this),2)}],s:["[1-5]?[0-9]",Date.prototype.setSeconds,"seconds",Date.prototype.getSeconds],ss:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setSeconds,"seconds",function(){return f(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return f(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return f(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},l={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function u(e){var t=new RegExp("\\d+$").exec(e[0]);if(t&&void 0!==t[0]){var n=s[e[0][0]+"x"].slice("");return n[0]=n[0](t[0]),n[3]=n[3](t[0]),n}if(s[e[0]])return s[e[0]]}function c(e){if(!e.tokenizer){var t=[],n=[];for(var i in s)if(/\.*x$/.test(i)){var r=i[0]+"\\d+";-1===n.indexOf(r)&&n.push(r)}else-1===t.indexOf(i[0])&&t.push(i[0]);e.tokenizer="("+(0<n.length?n.join("|")+"|":"")+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function d(e,t,n,i){var o,a,s="";for(c(n).lastIndex=0;o=c(n).exec(e);)if(void 0===t)if(a=u(o))s+="("+a[0]+")";else switch(o[0]){case"[":s+="(";break;case"]":s+=")?";break;default:s+=r.escapeRegex(o[0])}else(a=u(o))?!0!==i&&a[3]?s+=a[3].call(t.date):a[2]?s+=t["raw"+a[2]]:s+=o[0]:s+=o[0];return s}function f(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}function p(e,t,n){var r,o,a,l={date:new Date(1,0,1)},u=e;function d(e,t,n){e[r]=function(e){return e.replace(/[^0-9]/g,"0")}(t),e["raw"+r]=t,void 0!==a&&a.call(e.date,"month"==r?parseInt(e[r])-1:e[r])}if("string"==typeof u){for(c(n).lastIndex=0;o=c(n).exec(t);){var f=u.slice(0,o[0].length);s.hasOwnProperty(o[0])&&(r=s[o[0]][2],a=s[o[0]][1],d(l,f)),u=u.slice(f.length)}return l}if(u&&"object"===i(u)&&u.hasOwnProperty("date"))return u}function h(e,t){var n,i="";for(c(t).lastIndex=0;n=c(t).exec(t.inputFormat);)"d"===n[0].charAt(0)?i+=f(e.getDate(),n[0].length):"m"===n[0].charAt(0)?i+=f(e.getMonth()+1,n[0].length):"yyyy"===n[0]?i+=e.getFullYear().toString():"y"===n[0].charAt(0)&&(i+=f(e.getYear(),n[0].length));return i}function m(e,t){var n,i,r=0,o=0;for(c(t).lastIndex=0;i=c(t).exec(t.inputFormat);){var a=new RegExp("\\d+$").exec(i[0]);if(e<=(r+=o=a?parseInt(a[0]):i[0].length)){n=i,i=c(t).exec(t.inputFormat);break}}return{targetMatchIndex:r-o,nextMatch:i,targetMatch:n}}r.extendAliases({datetime:{mask:function(e){return e.numericInput=!1,s.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=l[e.inputFormat]||e.inputFormat,e.displayFormat=l[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=l[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[[\]]/,""),e.regex=d(e.inputFormat,void 0,e),e.min=p(e.min,e.inputFormat,e),e.max=p(e.max,e.inputFormat,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,skipOptionalPartCharacter:"",i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},preValidation:function(e,t,n,i,r,o,a,l){if(l)return!0;if(isNaN(n)&&e[t]!==n){var u=m(t,r);if(u.nextMatch&&u.nextMatch[0]===n&&1<u.targetMatch[0].length){var c=s[u.targetMatch[0]][0];if(new RegExp(c).test("0"+e[t-1]))return e[t]=e[t-1],e[t-1]="0",{fuzzy:!0,buffer:e,refreshFromBuffer:{start:t-1,end:t+1},pos:t+1}}}return!0},postValidation:function(e,t,n,i,r,o,a){if(a)return!0;var l,u;if(!1===i)return(l=m(t+1,r)).targetMatch&&l.targetMatchIndex===t&&1<l.targetMatch[0].length&&void 0!==s[l.targetMatch[0]]&&(u=s[l.targetMatch[0]][0],new RegExp(u).test("0"+n))?{insert:[{pos:t,c:"0"},{pos:t+1,c:n}],pos:t+1}:i;if(i.fuzzy&&(e=i.buffer,t=i.pos),(l=m(t,r)).targetMatch&&l.targetMatch[0]&&void 0!==s[l.targetMatch[0]]){u=s[l.targetMatch[0]][0];var c=e.slice(l.targetMatchIndex,l.targetMatchIndex+l.targetMatch[0].length);!1===new RegExp(u).test(c.join(""))&&2===l.targetMatch[0].length&&o.validPositions[l.targetMatchIndex]&&o.validPositions[l.targetMatchIndex+1]&&(o.validPositions[l.targetMatchIndex+1].input="0")}var f=i,h=p(e.join(""),r.inputFormat,r);return f&&h.date.getTime()==h.date.getTime()&&(f=(f=function(e,t){return(!isFinite(e.rawday)||"29"==e.day&&!isFinite(e.rawyear)||new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day)&&t}(h,f))&&function(e,t){var n=!0;if(t.min){if(e.rawyear){var i=e.rawyear.replace(/[^0-9]/g,"");n=t.min.year.substr(0,i.length)<=i}e.year===e.rawyear&&t.min.date.getTime()==t.min.date.getTime()&&(n=t.min.date.getTime()<=e.date.getTime())}return n&&t.max&&t.max.date.getTime()==t.max.date.getTime()&&(n=t.max.date.getTime()>=e.date.getTime()),n}(h,r)),t&&f&&i.pos!==t?{buffer:d(r.inputFormat,h,r).split(""),refreshFromBuffer:{start:t,end:i.pos}}:f},onKeyDown:function(e,t,n,i){e.ctrlKey&&e.keyCode===a.RIGHT&&(this.inputmask._valueSet(h(new Date,i)),o(this).trigger("setvalue"))},onUnMask:function(e,t,n){return t?d(n.outputFormat,p(e,n.inputFormat,n),n,!0):t},casing:function(e,t,n,i){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},onBeforeMask:function(e,t){return"[object Date]"===Object.prototype.toString.call(e)&&(e=h(e,t)),e},insertMode:!1,shiftPositions:!1,keepStatic:!1,inputmode:"numeric"}}),e.exports=r},function(e,t,n){"use strict";var i=n(1),r=i.dependencyLib,o=n(0);function a(e,t){for(var n="",r=0;r<e.length;r++)i.prototype.definitions[e.charAt(r)]||t.definitions[e.charAt(r)]||t.optionalmarker[0]===e.charAt(r)||t.optionalmarker[1]===e.charAt(r)||t.quantifiermarker[0]===e.charAt(r)||t.quantifiermarker[1]===e.charAt(r)||t.groupmarker[0]===e.charAt(r)||t.groupmarker[1]===e.charAt(r)||t.alternatormarker===e.charAt(r)?n+="\\"+e.charAt(r):n+=e.charAt(r);return n}function s(e,t,n,i){if(0<e.length&&0<t&&(!n.digitsOptional||i)){var o=r.inArray(n.radixPoint,e);-1===o&&(e.push(n.radixPoint),o=e.length-1);for(var a=1;a<=t;a++)isFinite(e[o+a])||(e[o+a]="0")}return e}function l(e,t){var n=0;if("+"===e){for(n in t.validPositions);n=parseInt(n)}for(var i in t.tests)if(n<=(i=parseInt(i)))for(var r=0,o=t.tests[i].length;r<o;r++)if((void 0===t.validPositions[i]||"-"===e)&&t.tests[i][r].match.def===e)return i+(void 0!==t.validPositions[i]&&"-"!==e?1:0);return n}function u(e,t){var n=-1;return r.each(t.validPositions,(function(t,i){if(i&&i.match.def===e)return n=parseInt(t),!1})),n}function c(e,t,n,i,r){var o=t.buffer?t.buffer.indexOf(r.radixPoint):-1,a=-1!==o&&new RegExp("[0-9１-９]").test(e);return r._radixDance&&a&&null==t.validPositions[o]?{insert:{pos:o===n?o+1:o,c:r.radixPoint},pos:n}:a}i.extendAliases({numeric:{mask:function(e){e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),1<e.placeholder.length&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&(e.positionCaretOnClick="lvp");var t="0",n=e.radixPoint;!0===e.numericInput&&void 0===e.__financeInput?(t="1",e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e._radixDance=!1,n=","===e.radixPoint?"?":"!",""!==e.radixPoint&&void 0===e.definitions[n]&&(e.definitions[n]={},e.definitions[n].validator="["+e.radixPoint+"]",e.definitions[n].placeholder=e.radixPoint,e.definitions[n].static=!0,e.definitions[n].generated=!0)):(e.__financeInput=!1,e.numericInput=!0);var r,o="[+]";if(o+=a(e.prefix,e),""!==e.groupSeparator?(void 0===e.definitions[e.groupSeparator]&&(e.definitions[e.groupSeparator]={},e.definitions[e.groupSeparator].validator="["+e.groupSeparator+"]",e.definitions[e.groupSeparator].placeholder=e.groupSeparator,e.definitions[e.groupSeparator].static=!0,e.definitions[e.groupSeparator].generated=!0),o+=e._mask(e)):o+="9{+}",void 0!==e.digits&&0!==e.digits){var s=e.digits.toString().split(",");isFinite(s[0])&&s[1]&&isFinite(s[1])?o+=n+t+"{"+e.digits+"}":(isNaN(e.digits)||0<parseInt(e.digits))&&(e.digitsOptional?(r=o+n+t+"{0,"+e.digits+"}",e.keepStatic=!0):o+=n+t+"{"+e.digits+"}")}return o+=a(e.suffix,e),o+="[-]",r&&(o=[r+a(e.suffix,e)+"[-]",o]),e.greedy=!1,function(e){void 0===e.parseMinMaxOptions&&(null!==e.min&&(e.min=e.min.toString().replace(new RegExp(i.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.min=e.min.replace(e.radixPoint,".")),e.min=isFinite(e.min)?parseFloat(e.min):NaN,isNaN(e.min)&&(e.min=Number.MIN_VALUE)),null!==e.max&&(e.max=e.max.toString().replace(new RegExp(i.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.max=e.max.replace(e.radixPoint,".")),e.max=isFinite(e.max)?parseFloat(e.max):NaN,isNaN(e.max)&&(e.max=Number.MAX_VALUE)),e.parseMinMaxOptions="done")}(e),o},_mask:function(e){return"("+e.groupSeparator+"999){+|1}"},digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",_radixDance:!0,groupSeparator:"",allowMinus:!0,negationSymbol:{front:"-",back:""},prefix:"",suffix:"",min:null,max:null,step:1,unmaskAsNumber:!1,roundingFN:Math.round,inputmode:"numeric",shortcuts:{k:"000",m:"000000"},placeholder:"0",greedy:!1,rightAlign:!0,insertMode:!0,autoUnmask:!1,skipOptionalPartCharacter:"",definitions:{0:{validator:c},1:{validator:c,definitionSymbol:"9"},"+":{validator:function(e,t,n,i,r){return r.allowMinus&&("-"===e||e===r.negationSymbol.front)}},"-":{validator:function(e,t,n,i,r){return r.allowMinus&&e===r.negationSymbol.back}}},preValidation:function(e,t,n,i,o,a,s,c){if(!1!==o.__financeInput&&n===o.radixPoint)return!1;var d;if(d=o.shortcuts&&o.shortcuts[n]){if(1<d.length)for(var f=[],p=0;p<d.length;p++)f.push({pos:t+p,c:d[p],strict:!1});return{insert:f}}var h=r.inArray(o.radixPoint,e),m=t;if(t=function(e,t,n,i,r){return r._radixDance&&r.numericInput&&t!==r.negationSymbol.back&&e<=n&&(0<n||t==r.radixPoint)&&(void 0===i.validPositions[e-1]||i.validPositions[e-1].input!==r.negationSymbol.back)&&(e-=1),e}(t,n,h,a,o),"-"===n||n===o.negationSymbol.front){if(!0!==o.allowMinus)return!1;var v=!1,g=u("+",a),y=u("-",a);return-1!==g&&(v=[g,y]),!1!==v?{remove:v,caret:m}:{insert:[{pos:l("+",a),c:o.negationSymbol.front,fromIsValid:!0},{pos:l("-",a),c:o.negationSymbol.back,fromIsValid:void 0}],caret:m+o.negationSymbol.back.length}}if(c)return!0;if(-1!==h&&!0===o._radixDance&&!1===i&&n===o.radixPoint&&void 0!==o.digits&&(isNaN(o.digits)||0<parseInt(o.digits))&&h!==t)return{caret:o._radixDance&&t===h-1?h+1:h};if(!1===o.__financeInput)if(i){if(o.digitsOptional)return{rewritePosition:s.end};if(!o.digitsOptional){if(s.begin>h&&s.end<=h)return n===o.radixPoint?{insert:{pos:h+1,c:"0",fromIsValid:!0},rewritePosition:h}:{rewritePosition:h+1};if(s.begin<h)return{rewritePosition:s.begin-1}}}else if(!o.showMaskOnHover&&!o.showMaskOnFocus&&!o.digitsOptional&&0<o.digits&&""===this.inputmask.__valueGet.call(this))return{rewritePosition:h};return{rewritePosition:t}},postValidation:function(e,t,n,i,o,a,s){if(!1===i)return i;if(s)return!0;if(null!==o.min||null!==o.max){var l=o.onUnMask(e.slice().reverse().join(""),void 0,r.extend({},o,{unmaskAsNumber:!0}));if(null!==o.min&&l<o.min&&(l.toString().length>=o.min.toString().length||l<0))return!1;if(null!==o.max&&l>o.max)return!1}return i},onUnMask:function(e,t,n){if(""===t&&!0===n.nullable)return t;var r=e.replace(n.prefix,"");return r=(r=r.replace(n.suffix,"")).replace(new RegExp(i.escapeRegex(n.groupSeparator),"g"),""),""!==n.placeholder.charAt(0)&&(r=r.replace(new RegExp(n.placeholder.charAt(0),"g"),"0")),n.unmaskAsNumber?(""!==n.radixPoint&&-1!==r.indexOf(n.radixPoint)&&(r=r.replace(i.escapeRegex.call(this,n.radixPoint),".")),r=(r=r.replace(new RegExp("^"+i.escapeRegex(n.negationSymbol.front)),"-")).replace(new RegExp(i.escapeRegex(n.negationSymbol.back)+"$"),""),Number(r)):r},isComplete:function(e,t){var n=(t.numericInput?e.slice().reverse():e).join("");return n=(n=(n=(n=(n=n.replace(new RegExp("^"+i.escapeRegex(t.negationSymbol.front)),"-")).replace(new RegExp(i.escapeRegex(t.negationSymbol.back)+"$"),"")).replace(t.prefix,"")).replace(t.suffix,"")).replace(new RegExp(i.escapeRegex(t.groupSeparator)+"([0-9]{3})","g"),"$1"),","===t.radixPoint&&(n=n.replace(i.escapeRegex(t.radixPoint),".")),isFinite(n)},onBeforeMask:function(e,t){var n=t.radixPoint||",";isFinite(t.digits)&&(t.digits=parseInt(t.digits)),"number"!=typeof e&&"number"!==t.inputType||""===n||(e=e.toString().replace(".",n));var r=e.split(n),o=r[0].replace(/[^\-0-9]/g,""),a=1<r.length?r[1].replace(/[^0-9]/g,""):"",l=1<r.length;e=o+(""!==a?n+a:a);var u=0;if(""!==n&&(u=t.digitsOptional?t.digits<a.length?t.digits:a.length:t.digits,""!==a||!t.digitsOptional)){var c=Math.pow(10,u||1);e=e.replace(i.escapeRegex(n),"."),isNaN(parseFloat(e))||(e=(t.roundingFN(parseFloat(e)*c)/c).toFixed(u)),e=e.toString().replace(".",n)}if(0===t.digits&&-1!==e.indexOf(n)&&(e=e.substring(0,e.indexOf(n))),null!==t.min||null!==t.max){var d=e.toString().replace(n,".");null!==t.min&&d<t.min?e=t.min.toString().replace(".",n):null!==t.max&&d>t.max&&(e=t.max.toString().replace(".",n))}return s(e.toString().split(""),u,t,l).join("")},onBeforeWrite:function(e,t,n,o){function a(e,t){if(!1!==o.__financeInput||t){var n=r.inArray(o.radixPoint,e);-1!==n&&e.splice(n,1)}if(""!==o.groupSeparator)for(;-1!==(n=e.indexOf(o.groupSeparator));)e.splice(n,1);return e}var l,u=function(e,t){var n=new RegExp("(^"+(""!==t.negationSymbol.front?i.escapeRegex(t.negationSymbol.front)+"?":"")+i.escapeRegex(t.prefix)+")(.*)("+i.escapeRegex(t.suffix)+(""!=t.negationSymbol.back?i.escapeRegex(t.negationSymbol.back)+"?":"")+"$)").exec(e.slice().reverse().join("")),r=n?n[2]:"",o=!1;return r&&(r=r.split(t.radixPoint.charAt(0))[0],o=new RegExp("^[0"+t.groupSeparator+"]*").exec(r)),!(!o||!(1<o[0].length||0<o[0].length&&o[0].length<r.length))&&o}(t,o);if(u){var c=t.slice().reverse(),d=c.join("").indexOf(u[0]);c.splice(d,u[0].length);var f=c.length-d;a(c),l={refreshFromBuffer:!0,buffer:c.reverse(),caret:n<f?n:f}}if(e)switch(e.type){case"blur":case"checkval":if(null!==o.min){var p=o.onUnMask(t.slice().reverse().join(""),void 0,r.extend({},o,{unmaskAsNumber:!0}));if(null!==o.min&&p<o.min)return{refreshFromBuffer:!0,buffer:s(o.min.toString().replace(".",o.radixPoint).split(""),o.digits,o).reverse()}}if(t[t.length-1]===o.negationSymbol.front){var h=new RegExp("(^"+(""!=o.negationSymbol.front?i.escapeRegex(o.negationSymbol.front)+"?":"")+i.escapeRegex(o.prefix)+")(.*)("+i.escapeRegex(o.suffix)+(""!=o.negationSymbol.back?i.escapeRegex(o.negationSymbol.back)+"?":"")+"$)").exec(a(t.slice(),!0).reverse().join(""));0==(h?h[2]:"")&&(l={refreshFromBuffer:!0,buffer:[0]})}else""!==o.radixPoint&&t[0]===o.radixPoint&&(l&&l.buffer?l.buffer.shift():(t.shift(),l={refreshFromBuffer:!0,buffer:a(t)}));if(o.enforceDigitsOnBlur){var m=(l=l||{})&&l.buffer||t.slice().reverse();l.refreshFromBuffer=!0,l.buffer=s(m,o.digits,o,!0).reverse()}}return l},onKeyDown:function(e,t,n,i){var a,l=r(this);if(e.ctrlKey)switch(e.keyCode){case o.UP:return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())+parseInt(i.step)),l.trigger("setvalue"),!1;case o.DOWN:return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())-parseInt(i.step)),l.trigger("setvalue"),!1}if(!e.shiftKey&&(e.keyCode===o.DELETE||e.keyCode===o.BACKSPACE||e.keyCode===o.BACKSPACE_SAFARI)&&n.begin!==t.length){if(t[e.keyCode===o.DELETE?n.begin-1:n.end]===i.negationSymbol.front)return a=t.slice().reverse(),""!==i.negationSymbol.front&&a.shift(),""!==i.negationSymbol.back&&a.pop(),l.trigger("setvalue",[a.join(""),n.begin]),!1;if(!0===i._radixDance){var u=r.inArray(i.radixPoint,t);if(i.digitsOptional){if(0===u)return(a=t.slice().reverse()).pop(),l.trigger("setvalue",[a.join(""),n.begin>=a.length?a.length:n.begin]),!1}else if(-1!==u&&(n.begin<u||n.end<u||e.keyCode===o.DELETE&&n.begin===u))return n.begin!==n.end||e.keyCode!==o.BACKSPACE&&e.keyCode!==o.BACKSPACE_SAFARI||n.begin++,(a=t.slice().reverse()).splice(a.length-n.begin,n.begin-n.end+1),a=s(a,i.digits,i).join(""),l.trigger("setvalue",[a,n.begin>=a.length?u+1:n.begin]),!1}}}},currency:{prefix:"",groupSeparator:",",alias:"numeric",digits:2,digitsOptional:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0},percentage:{alias:"numeric",min:0,max:100,suffix:" %",digits:0,allowMinus:!1},indianns:{alias:"numeric",_mask:function(e){return"("+e.groupSeparator+"99){*|1}("+e.groupSeparator+"999){1|1}"},groupSeparator:",",radixPoint:".",placeholder:"0",digits:2,digitsOptional:!1}}),e.exports=i},function(e,t,n){"use strict";var i,r=(i=n(1))&&i.__esModule?i:{default:i};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){var t="function"==typeof Map?new Map:void 0;return(s=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return u(e,arguments,d(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),c(i,e)})(e)}function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,n){return(u=l()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var r=new(Function.bind.apply(e,i));return n&&c(r,n.prototype),r}).apply(null,arguments)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}if(document.head.createShadowRoot||document.head.attachShadow){var f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=(e=a(this,d(t).call(this))).getAttributeNames(),i=e.attachShadow({mode:"closed"}),o=document.createElement("input");for(var s in o.type="text",i.appendChild(o),n)Object.prototype.hasOwnProperty.call(n,s)&&o.setAttribute("data-inputmask-"+n[s],e.getAttribute(n[s]));return(new r.default).mask(o),o.inputmask.shadowRoot=i,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),t}(s(HTMLElement));customElements.define("input-mask",f)}}],installedModules={},__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(e,t,n){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.t=function(e,t){if(1&t&&(e=__webpack_require__(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(__webpack_require__.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)__webpack_require__.d(n,i,function(t){return e[t]}.bind(null,i));return n},__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=5);function __webpack_require__(e){if(installedModules[e])return installedModules[e].exports;var t=installedModules[e]={i:e,l:!1,exports:{}};return modules[e].call(t.exports,t,t.exports,__webpack_require__),t.l=!0,t.exports}var modules,installedModules},module.exports=factory()},Kssn:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"ეს ველი სავალდებულოა",remote:"გთხოვთ შეასწოროთ.",email:"გთხოვთ შეიყვანოთ სწორი ფორმატით.",url:"გთხოვთ შეიყვანოთ სწორი ფორმატით.",date:"გთხოვთ შეიყვანოთ სწორი თარიღი.",dateISO:"გთხოვთ შეიყვანოთ სწორი ფორმატით (ISO).",number:"გთხოვთ შეიყვანოთ რიცხვი.",digits:"დაშვებულია მხოლოდ ციფრები.",creditcard:"გთხოვთ შეიყვანოთ სწორი ფორმატის ბარათის კოდი.",equalTo:"გთხოვთ შეიყვანოთ იგივე მნიშვნელობა.",maxlength:e.validator.format("გთხოვთ შეიყვანოთ არა უმეტეს {0} სიმბოლოსი."),minlength:e.validator.format("შეიყვანეთ მინიმუმ {0} სიმბოლო."),rangelength:e.validator.format("გთხოვთ შეიყვანოთ {0} -დან {1} -მდე რაოდენობის სიმბოლოები."),range:e.validator.format("შეიყვანეთ {0} -სა {1} -ს შორის."),max:e.validator.format("გთხოვთ შეიყვანოთ მნიშვნელობა ნაკლები ან ტოლი {0} -ს."),min:e.validator.format("გთხოვთ შეიყვანოთ მნიშვნელობა მეტი ან ტოლი {0} -ს.")}),e})?i.apply(t,r):i)||(e.exports=o)},LmWb:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Dieses Feld ist ein Pflichtfeld.",maxlength:e.validator.format("Geben Sie bitte maximal {0} Zeichen ein."),minlength:e.validator.format("Geben Sie bitte mindestens {0} Zeichen ein."),rangelength:e.validator.format("Geben Sie bitte mindestens {0} und maximal {1} Zeichen ein."),email:"Geben Sie bitte eine gültige E-Mail-Adresse ein.",url:"Geben Sie bitte eine gültige URL ein.",date:"Geben Sie bitte ein gültiges Datum ein.",number:"Geben Sie bitte eine Nummer ein.",digits:"Geben Sie bitte nur Ziffern ein.",equalTo:"Wiederholen Sie bitte denselben Wert.",range:e.validator.format("Geben Sie bitte einen Wert zwischen {0} und {1} ein."),max:e.validator.format("Geben Sie bitte einen Wert kleiner oder gleich {0} ein."),min:e.validator.format("Geben Sie bitte einen Wert größer oder gleich {0} ein."),creditcard:"Geben Sie bitte eine gültige Kreditkarten-Nummer ein.",remote:"Korrigieren Sie bitte dieses Feld.",dateISO:"Geben Sie bitte ein gültiges Datum ein (ISO-Format).",step:e.validator.format("Geben Sie bitte ein Vielfaches von {0} ein."),maxWords:e.validator.format("Geben Sie bitte {0} Wörter oder weniger ein."),minWords:e.validator.format("Geben Sie bitte mindestens {0} Wörter ein."),rangeWords:e.validator.format("Geben Sie bitte zwischen {0} und {1} Wörtern ein."),accept:"Geben Sie bitte einen Wert mit einem gültigen MIME-Typ ein.",alphanumeric:"Geben Sie bitte nur Buchstaben (keine Umlaute), Zahlen oder Unterstriche ein.",bankaccountNL:"Geben Sie bitte eine gültige Kontonummer ein.",bankorgiroaccountNL:"Geben Sie bitte eine gültige Bank- oder Girokontonummer ein.",bic:"Geben Sie bitte einen gültigen BIC-Code ein.",cifES:"Geben Sie bitte eine gültige CIF-Nummer ein.",cpfBR:"Geben Sie bitte eine gültige CPF-Nummer ein.",creditcardtypes:"Geben Sie bitte eine gültige Kreditkarten-Nummer ein.",currency:"Geben Sie bitte eine gültige Währung ein.",extension:"Geben Sie bitte einen Wert mit einer gültigen Erweiterung ein.",giroaccountNL:"Geben Sie bitte eine gültige Girokontonummer ein.",iban:"Geben Sie bitte eine gültige IBAN ein.",integer:"Geben Sie bitte eine positive oder negative Nicht-Dezimalzahl ein.",ipv4:"Geben Sie bitte eine gültige IPv4-Adresse ein.",ipv6:"Geben Sie bitte eine gültige IPv6-Adresse ein.",lettersonly:"Geben Sie bitte nur Buchstaben ein.",letterswithbasicpunc:"Geben Sie bitte nur Buchstaben oder Interpunktion ein.",mobileNL:"Geben Sie bitte eine gültige Handynummer ein.",mobileUK:"Geben Sie bitte eine gültige Handynummer ein.",netmask:"Geben Sie bitte eine gültige Netzmaske ein.",nieES:"Geben Sie bitte eine gültige NIE-Nummer ein.",nifES:"Geben Sie bitte eine gültige NIF-Nummer ein.",nipPL:"Geben Sie bitte eine gültige NIP-Nummer ein.",notEqualTo:"Geben Sie bitte einen anderen Wert ein. Die Werte dürfen nicht gleich sein.",nowhitespace:"Kein Leerzeichen bitte.",pattern:"Ungültiges Format.",phoneNL:"Geben Sie bitte eine gültige Telefonnummer ein.",phonesUK:"Geben Sie bitte eine gültige britische Telefonnummer ein.",phoneUK:"Geben Sie bitte eine gültige Telefonnummer ein.",phoneUS:"Geben Sie bitte eine gültige Telefonnummer ein.",postalcodeBR:"Geben Sie bitte eine gültige brasilianische Postleitzahl ein.",postalCodeCA:"Geben Sie bitte eine gültige kanadische Postleitzahl ein.",postalcodeIT:"Geben Sie bitte eine gültige italienische Postleitzahl ein.",postalcodeNL:"Geben Sie bitte eine gültige niederländische Postleitzahl ein.",postcodeUK:"Geben Sie bitte eine gültige britische Postleitzahl ein.",require_from_group:e.validator.format("Füllen Sie bitte mindestens {0} dieser Felder aus."),skip_or_fill_minimum:e.validator.format("Überspringen Sie bitte diese Felder oder füllen Sie mindestens {0} von ihnen aus."),stateUS:"Geben Sie bitte einen gültigen US-Bundesstaat ein.",strippedminlength:e.validator.format("Geben Sie bitte mindestens {0} Zeichen ein."),time:"Geben Sie bitte eine gültige Uhrzeit zwischen 00:00 und 23:59 ein.",time12h:"Geben Sie bitte eine gültige Uhrzeit im 12-Stunden-Format ein.",vinUS:"Die angegebene Fahrzeugidentifikationsnummer (VIN) ist ungültig.",zipcodeUS:"Die angegebene US-Postleitzahl ist ungültig.",ziprange:"Ihre Postleitzahl muss im Bereich 902xx-xxxx bis 905xx-xxxx liegen."}),e})?i.apply(t,r):i)||(e.exports=o)},"Lu+q":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Tento údaj je povinný.",remote:"Prosím, opravte tento údaj.",email:"Prosím, zadejte platný e-mail.",url:"Prosím, zadejte platné URL.",date:"Prosím, zadejte platné datum.",dateISO:"Prosím, zadejte platné datum (ISO).",number:"Prosím, zadejte číslo.",digits:"Prosím, zadávejte pouze číslice.",creditcard:"Prosím, zadejte číslo kreditní karty.",equalTo:"Prosím, zadejte znovu stejnou hodnotu.",extension:"Prosím, zadejte soubor se správnou příponou.",maxlength:e.validator.format("Prosím, zadejte nejvíce {0} znaků."),minlength:e.validator.format("Prosím, zadejte nejméně {0} znaků."),rangelength:e.validator.format("Prosím, zadejte od {0} do {1} znaků."),range:e.validator.format("Prosím, zadejte hodnotu od {0} do {1}."),max:e.validator.format("Prosím, zadejte hodnotu menší nebo rovnu {0}."),min:e.validator.format("Prosím, zadejte hodnotu větší nebo rovnu {0}."),step:e.validator.format("Musí být násobkem čísla {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},MFfu:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Šis lauks ir obligāts.",remote:"Lūdzu, pārbaudiet šo lauku.",email:"Lūdzu, ievadiet derīgu e-pasta adresi.",url:"Lūdzu, ievadiet derīgu URL adresi.",date:"Lūdzu, ievadiet derīgu datumu.",dateISO:"Lūdzu, ievadiet derīgu datumu (ISO).",number:"Lūdzu, ievadiet derīgu numuru.",digits:"Lūdzu, ievadiet tikai ciparus.",creditcard:"Lūdzu, ievadiet derīgu kredītkartes numuru.",equalTo:"Lūdzu, ievadiet to pašu vēlreiz.",extension:"Lūdzu, ievadiet vērtību ar derīgu paplašinājumu.",maxlength:e.validator.format("Lūdzu, ievadiet ne vairāk kā {0} rakstzīmes."),minlength:e.validator.format("Lūdzu, ievadiet vismaz {0} rakstzīmes."),rangelength:e.validator.format("Lūdzu ievadiet {0} līdz {1} rakstzīmes."),range:e.validator.format("Lūdzu, ievadiet skaitli no {0} līdz {1}."),max:e.validator.format("Lūdzu, ievadiet skaitli, kurš ir mazāks vai vienāds ar {0}."),min:e.validator.format("Lūdzu, ievadiet skaitli, kurš ir lielāks vai vienāds ar {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},Nv4c:function(e,t){$(document).ready((function(){Inputmask({mask:"+38 (999) 999-99-99",clearMaskOnLostFocus:!0,clearIncomplete:!0,showMaskOnHover:!1}).mask("input[type=tel]")}))},QZb2:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Պարտադիր լրացման դաշտ",remote:"Ներմուծեք ճիշտ արժեքը",email:"Ներմուծեք վավեր էլեկտրոնային փոստի հասցե",url:"Ներմուծեք վավեր URL",date:"Ներմուծեք վավեր ամսաթիվ",dateISO:"Ներմուծեք ISO ֆորմատով վավեր ամսաթիվ։",number:"Ներմուծեք թիվ",digits:"Ներմուծեք միայն թվեր",creditcard:"Ներմուծեք ճիշտ բանկային քարտի համար",equalTo:"Ներմուծեք միևնուն արժեքը ևս մեկ անգամ",extension:"Ընտրեք ճիշտ ընդլանումով ֆայլ",maxlength:e.validator.format("Ներմուծեք ոչ ավել քան {0} նիշ"),minlength:e.validator.format("Ներմուծեք ոչ պակաս քան {0} նիշ"),rangelength:e.validator.format("Ներմուծեք {0}֊ից {1} երկարությամբ արժեք"),range:e.validator.format("Ներմուծեք թիվ {0}֊ից {1} միջակայքում"),max:e.validator.format("Ներմուծեք թիվ, որը փոքր կամ հավասար է {0}֊ին"),min:e.validator.format("Ներմուծեք թիվ, որը մեծ կամ հավասար է {0}֊ին")}),e})?i.apply(t,r):i)||(e.exports=o)},S61x:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Þessi reitur er nauðsynlegur.",remote:"Lagaðu þennan reit.",maxlength:e.validator.format("Sláðu inn mest {0} stafi."),minlength:e.validator.format("Sláðu inn minnst {0} stafi."),rangelength:e.validator.format("Sláðu inn minnst {0} og mest {1} stafi."),email:"Sláðu inn gilt netfang.",url:"Sláðu inn gilda vefslóð.",date:"Sláðu inn gilda dagsetningu.",number:"Sláðu inn tölu.",digits:"Sláðu inn tölustafi eingöngu.",equalTo:"Sláðu sama gildi inn aftur.",range:e.validator.format("Sláðu inn gildi milli {0} og {1}."),max:e.validator.format("Sláðu inn gildi sem er minna en eða jafnt og {0}."),min:e.validator.format("Sláðu inn gildi sem er stærra en eða jafnt og {0}."),creditcard:"Sláðu inn gilt greiðslukortanúmer."}),e})?i.apply(t,r):i)||(e.exports=o)},"TDU+":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"تکمیل این فیلد اجباری است.",remote:"لطفا این فیلد را تصحیح کنید.",email:"لطفا یک ایمیل صحیح وارد کنید.",url:"لطفا آدرس صحیح وارد کنید.",date:"لطفا تاریخ صحیح وارد کنید.",dateFA:"لطفا یک تاریخ صحیح وارد کنید.",dateISO:"لطفا تاریخ صحیح وارد کنید (ISO).",number:"لطفا عدد صحیح وارد کنید.",digits:"لطفا تنها رقم وارد کنید.",creditcard:"لطفا کریدیت کارت صحیح وارد کنید.",equalTo:"لطفا مقدار برابری وارد کنید.",extension:"لطفا مقداری وارد کنید که",alphanumeric:"لطفا مقدار را عدد (انگلیسی) وارد کنید.",maxlength:e.validator.format("لطفا بیشتر از {0} حرف وارد نکنید."),minlength:e.validator.format("لطفا کمتر از {0} حرف وارد نکنید."),rangelength:e.validator.format("لطفا مقداری بین {0} تا {1} حرف وارد کنید."),range:e.validator.format("لطفا مقداری بین {0} تا {1} حرف وارد کنید."),max:e.validator.format("لطفا مقداری کمتر از {0} وارد کنید."),min:e.validator.format("لطفا مقداری بیشتر از {0} وارد کنید."),minWords:e.validator.format("لطفا حداقل {0} کلمه وارد کنید."),maxWords:e.validator.format("لطفا حداکثر {0} کلمه وارد کنید.")}),e})?i.apply(t,r):i)||(e.exports=o)},U35R:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Este campo es obligatorio.",remote:"Por favor, completá este campo.",email:"Por favor, escribí una dirección de correo válida.",url:"Por favor, escribí una URL válida.",date:"Por favor, escribí una fecha válida.",dateISO:"Por favor, escribí una fecha (ISO) válida.",number:"Por favor, escribí un número entero válido.",digits:"Por favor, escribí sólo dígitos.",creditcard:"Por favor, escribí un número de tarjeta válido.",equalTo:"Por favor, escribí el mismo valor de nuevo.",extension:"Por favor, escribí un valor con una extensión aceptada.",maxlength:e.validator.format("Por favor, no escribas más de {0} caracteres."),minlength:e.validator.format("Por favor, no escribas menos de {0} caracteres."),rangelength:e.validator.format("Por favor, escribí un valor entre {0} y {1} caracteres."),range:e.validator.format("Por favor, escribí un valor entre {0} y {1}."),max:e.validator.format("Por favor, escribí un valor menor o igual a {0}."),min:e.validator.format("Por favor, escribí un valor mayor o igual a {0}."),nifES:"Por favor, escribí un NIF válido.",nieES:"Por favor, escribí un NIE válido.",cifES:"Por favor, escribí un CIF válido."}),e})?i.apply(t,r):i)||(e.exports=o)},UCcm:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"See väli peab olema täidetud.",maxlength:e.validator.format("Palun sisestage vähem kui {0} tähemärki."),minlength:e.validator.format("Palun sisestage vähemalt {0} tähemärki."),rangelength:e.validator.format("Palun sisestage väärtus vahemikus {0} kuni {1} tähemärki."),email:"Palun sisestage korrektne e-maili aadress.",url:"Palun sisestage korrektne URL.",date:"Palun sisestage korrektne kuupäev.",dateISO:"Palun sisestage korrektne kuupäev (YYYY-MM-DD).",number:"Palun sisestage korrektne number.",digits:"Palun sisestage ainult numbreid.",equalTo:"Palun sisestage sama väärtus uuesti.",range:e.validator.format("Palun sisestage väärtus vahemikus {0} kuni {1}."),max:e.validator.format("Palun sisestage väärtus, mis on väiksem või võrdne arvuga {0}."),min:e.validator.format("Palun sisestage väärtus, mis on suurem või võrdne arvuga {0}."),creditcard:"Palun sisestage korrektne krediitkaardi number."}),e})?i.apply(t,r):i)||(e.exports=o)},UIjN:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Полето е задължително.",remote:"Моля, въведете правилната стойност.",email:"Моля, въведете валиден email.",url:"Моля, въведете валидно URL.",date:"Моля, въведете валидна дата.",dateISO:"Моля, въведете валидна дата (ISO).",number:"Моля, въведете валиден номер.",digits:"Моля, въведете само цифри.",creditcard:"Моля, въведете валиден номер на кредитна карта.",equalTo:"Моля, въведете същата стойност отново.",extension:"Моля, въведете стойност с валидно разширение.",maxlength:e.validator.format("Моля, въведете не повече от {0} символа."),minlength:e.validator.format("Моля, въведете поне {0} символа."),rangelength:e.validator.format("Моля, въведете стойност с дължина между {0} и {1} символа."),range:e.validator.format("Моля, въведете стойност между {0} и {1}."),max:e.validator.format("Моля, въведете стойност по-малка или равна на {0}."),min:e.validator.format("Моля, въведете стойност по-голяма или равна на {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},VSOj:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Dette felt er påkrævet.",remote:"Ret venligst dette felt",email:"Indtast en gyldig email-adresse.",url:"Indtast en gyldig URL.",date:"Indtast en gyldig dato.",number:"Indtast et tal.",digits:"Indtast kun cifre.",creditcard:"Indtast et gyldigt kreditkortnummer.",equalTo:"Indtast den samme værdi igen.",time:"Angiv en gyldig tid mellem kl. 00:00 og 23:59.",ipv4:"Angiv venligst en gyldig IPv4-adresse.",ipv6:"Angiv venligst en gyldig IPv6-adresse.",require_from_group:e.validator.format("Angiv mindst {0} af disse felter."),extension:"Indtast venligst en værdi med en gyldig endelse",pattern:"Ugyldigt format",lettersonly:"Angiv venligst kun bogstaver.",nowhitespace:"Må ikke indholde mellemrum",maxlength:e.validator.format("Indtast højst {0} tegn."),minlength:e.validator.format("Indtast mindst {0} tegn."),rangelength:e.validator.format("Indtast mindst {0} og højst {1} tegn."),range:e.validator.format("Angiv en værdi mellem {0} og {1}."),max:e.validator.format("Angiv en værdi der højst er {0}."),min:e.validator.format("Angiv en værdi der mindst er {0}."),minWords:e.validator.format("Indtast venligst mindst {0} ord"),maxWords:e.validator.format("Indtast venligst højst {0} ord"),step:e.validator.format("Angiv en værdi gange {0}."),notEqualTo:"Angiv en anden værdi, værdierne må ikke være det samme.",integer:"Angiv et ikke-decimaltal, der er positivt eller negativt."}),e})?i.apply(t,r):i)||(e.exports=o)},"Vr+g":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"To polje je obvezno.",remote:"Prosimo popravite to polje.",email:"Prosimo vnesite veljaven email naslov.",url:"Prosimo vnesite veljaven URL naslov.",date:"Prosimo vnesite veljaven datum.",dateISO:"Prosimo vnesite veljaven ISO datum.",number:"Prosimo vnesite veljavno število.",digits:"Prosimo vnesite samo števila.",creditcard:"Prosimo vnesite veljavno številko kreditne kartice.",equalTo:"Prosimo ponovno vnesite vrednost.",extension:"Prosimo vnesite vrednost z veljavno končnico.",maxlength:e.validator.format("Prosimo vnesite največ {0} znakov."),minlength:e.validator.format("Prosimo vnesite najmanj {0} znakov."),rangelength:e.validator.format("Prosimo vnesite najmanj {0} in največ {1} znakov."),range:e.validator.format("Prosimo vnesite vrednost med {0} in {1}."),max:e.validator.format("Prosimo vnesite vrednost manjše ali enako {0}."),min:e.validator.format("Prosimo vnesite vrednost večje ali enako {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},Vrlm:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Это поле необходимо заполнить.",remote:"Пожалуйста, введите правильное значение.",email:"Пожалуйста, введите корректный адрес электронной почты.",url:"Пожалуйста, введите корректный URL.",date:"Пожалуйста, введите корректную дату.",dateISO:"Пожалуйста, введите корректную дату в формате ISO.",number:"Пожалуйста, введите число.",digits:"Пожалуйста, вводите только цифры.",creditcard:"Пожалуйста, введите правильный номер кредитной карты.",equalTo:"Пожалуйста, введите такое же значение ещё раз.",extension:"Пожалуйста, выберите файл с правильным расширением.",maxlength:e.validator.format("Пожалуйста, введите не больше {0} символов."),minlength:e.validator.format("Пожалуйста, введите не меньше {0} символов."),rangelength:e.validator.format("Пожалуйста, введите значение длиной от {0} до {1} символов."),range:e.validator.format("Пожалуйста, введите число от {0} до {1}."),max:e.validator.format("Пожалуйста, введите число, меньшее или равное {0}."),min:e.validator.format("Пожалуйста, введите число, большее или равное {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},WYJi:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Bu xana mütləq doldurulmalıdır.",remote:"Zəhmət olmasa, düzgün məna daxil edin.",email:"Zəhmət olmasa, düzgün elektron poçt daxil edin.",url:"Zəhmət olmasa, düzgün URL daxil edin.",date:"Zəhmət olmasa, düzgün tarix daxil edin.",dateISO:"Zəhmət olmasa, düzgün ISO formatlı tarix daxil edin.",number:"Zəhmət olmasa, düzgün rəqəm daxil edin.",digits:"Zəhmət olmasa, yalnız rəqəm daxil edin.",creditcard:"Zəhmət olmasa, düzgün kredit kart nömrəsini daxil edin.",equalTo:"Zəhmət olmasa, eyni mənanı bir daha daxil edin.",extension:"Zəhmət olmasa, düzgün genişlənməyə malik faylı seçin.",maxlength:e.validator.format("Zəhmət olmasa, {0} simvoldan çox olmayaraq daxil edin."),minlength:e.validator.format("Zəhmət olmasa, {0} simvoldan az olmayaraq daxil edin."),rangelength:e.validator.format("Zəhmət olmasa, {0} - {1} aralığında uzunluğa malik simvol daxil edin."),range:e.validator.format("Zəhmət olmasa, {0} - {1} aralığında rəqəm daxil edin."),max:e.validator.format("Zəhmət olmasa, {0} və ondan kiçik rəqəm daxil edin."),min:e.validator.format("Zəhmət olmasa, {0} və ondan böyük rəqəm daxil edin")}),e})?i.apply(t,r):i)||(e.exports=o)},XMe9:function(e,t,n){var i,r,o;!function(a){"use strict";r=[n("EVdn")],void 0===(o="function"==typeof(i=function(e){var t=window.Slick||{};(t=function(){var t=0;return function(n,i){var r,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(n),appendDots:e(n),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,n){return e('<button type="button" />').text(n+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=e(n),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,r=e(n).data("slick")||{},o.options=e.extend({},o.defaults,i,r),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=e.proxy(o.autoPlay,o),o.autoPlayClear=e.proxy(o.autoPlayClear,o),o.autoPlayIterator=e.proxy(o.autoPlayIterator,o),o.changeSlide=e.proxy(o.changeSlide,o),o.clickHandler=e.proxy(o.clickHandler,o),o.selectHandler=e.proxy(o.selectHandler,o),o.setPosition=e.proxy(o.setPosition,o),o.swipeHandler=e.proxy(o.swipeHandler,o),o.dragHandler=e.proxy(o.dragHandler,o),o.keyHandler=e.proxy(o.keyHandler,o),o.instanceUid=t++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}}()).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.addSlide=t.prototype.slickAdd=function(t,n,i){var r=this;if("boolean"==typeof n)i=n,n=null;else if(n<0||n>=r.slideCount)return!1;r.unload(),"number"==typeof n?0===n&&0===r.$slides.length?e(t).appendTo(r.$slideTrack):i?e(t).insertBefore(r.$slides.eq(n)):e(t).insertAfter(r.$slides.eq(n)):!0===i?e(t).prependTo(r.$slideTrack):e(t).appendTo(r.$slideTrack),r.$slides=r.$slideTrack.children(this.options.slide),r.$slideTrack.children(this.options.slide).detach(),r.$slideTrack.append(r.$slides),r.$slides.each((function(t,n){e(n).attr("data-slick-index",t)})),r.$slidesCache=r.$slides,r.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,n){var i={},r=this;r.animateHeight(),!0===r.options.rtl&&!1===r.options.vertical&&(t=-t),!1===r.transformsEnabled?!1===r.options.vertical?r.$slideTrack.animate({left:t},r.options.speed,r.options.easing,n):r.$slideTrack.animate({top:t},r.options.speed,r.options.easing,n):!1===r.cssTransitions?(!0===r.options.rtl&&(r.currentLeft=-r.currentLeft),e({animStart:r.currentLeft}).animate({animStart:t},{duration:r.options.speed,easing:r.options.easing,step:function(e){e=Math.ceil(e),!1===r.options.vertical?(i[r.animType]="translate("+e+"px, 0px)",r.$slideTrack.css(i)):(i[r.animType]="translate(0px,"+e+"px)",r.$slideTrack.css(i))},complete:function(){n&&n.call()}})):(r.applyTransition(),t=Math.ceil(t),!1===r.options.vertical?i[r.animType]="translate3d("+t+"px, 0px, 0px)":i[r.animType]="translate3d(0px,"+t+"px, 0px)",r.$slideTrack.css(i),n&&setTimeout((function(){r.disableTransition(),n.call()}),r.options.speed))},t.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=e(t).not(this.$slider)),t},t.prototype.asNavFor=function(t){var n=this.getNavTarget();null!==n&&"object"==typeof n&&n.each((function(){var n=e(this).slick("getSlick");n.unslicked||n.slideHandler(t,!0)}))},t.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},t.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,n,i=this;if(!0===i.options.dots){for(i.$slider.addClass("slick-dotted"),n=e("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)n.append(e("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=n.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each((function(t,n){e(n).attr("data-slick-index",t).data("originalStyling",e(n).attr("style")||"")})),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,n,i,r,o,a,s=this;if(i=document.createDocumentFragment(),o=s.$slider.children(),s.options.rows>1){for(a=s.options.slidesPerRow*s.options.rows,r=Math.ceil(o.length/a),e=0;e<r;e++){var l=document.createElement("div");for(t=0;t<s.options.rows;t++){var u=document.createElement("div");for(n=0;n<s.options.slidesPerRow;n++){var c=e*a+(t*s.options.slidesPerRow+n);o.get(c)&&u.appendChild(o.get(c))}l.appendChild(u)}i.appendChild(l)}s.$slider.empty().append(i),s.$slider.children().children().children().css({width:100/s.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,n){var i,r,o,a=this,s=!1,l=a.$slider.width(),u=window.innerWidth||e(window).width();if("window"===a.respondTo?o=u:"slider"===a.respondTo?o=l:"min"===a.respondTo&&(o=Math.min(u,l)),a.options.responsive&&a.options.responsive.length&&null!==a.options.responsive){for(i in r=null,a.breakpoints)a.breakpoints.hasOwnProperty(i)&&(!1===a.originalSettings.mobileFirst?o<a.breakpoints[i]&&(r=a.breakpoints[i]):o>a.breakpoints[i]&&(r=a.breakpoints[i]));null!==r?null!==a.activeBreakpoint?(r!==a.activeBreakpoint||n)&&(a.activeBreakpoint=r,"unslick"===a.breakpointSettings[r]?a.unslick(r):(a.options=e.extend({},a.originalSettings,a.breakpointSettings[r]),!0===t&&(a.currentSlide=a.options.initialSlide),a.refresh(t)),s=r):(a.activeBreakpoint=r,"unslick"===a.breakpointSettings[r]?a.unslick(r):(a.options=e.extend({},a.originalSettings,a.breakpointSettings[r]),!0===t&&(a.currentSlide=a.options.initialSlide),a.refresh(t)),s=r):null!==a.activeBreakpoint&&(a.activeBreakpoint=null,a.options=a.originalSettings,!0===t&&(a.currentSlide=a.options.initialSlide),a.refresh(t),s=r),t||!1===s||a.$slider.trigger("breakpoint",[a,s])}},t.prototype.changeSlide=function(t,n){var i,r,o=this,a=e(t.currentTarget);switch(a.is("a")&&t.preventDefault(),a.is("li")||(a=a.closest("li")),i=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,t.data.message){case"previous":r=0===i?o.options.slidesToScroll:o.options.slidesToShow-i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-r,!1,n);break;case"next":r=0===i?o.options.slidesToScroll:i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+r,!1,n);break;case"index":var s=0===t.data.index?0:t.data.index||a.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(s),!1,n),a.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,n;if(n=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var i in t){if(e<t[i]){e=n;break}n=t[i]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>1&&((e=t.$slides.children().children()).removeAttr("style"),t.$slider.empty().append(e))},t.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var n=this;n.autoPlayClear(),n.touchObject={},n.cleanUpEvents(),e(".slick-cloned",n.$slider).detach(),n.$dots&&n.$dots.remove(),n.$prevArrow&&n.$prevArrow.length&&(n.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.prevArrow)&&n.$prevArrow.remove()),n.$nextArrow&&n.$nextArrow.length&&(n.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.nextArrow)&&n.$nextArrow.remove()),n.$slides&&(n.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){e(this).attr("style",e(this).data("originalStyling"))})),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.detach(),n.$list.detach(),n.$slider.append(n.$slides)),n.cleanUpRows(),n.$slider.removeClass("slick-slider"),n.$slider.removeClass("slick-initialized"),n.$slider.removeClass("slick-dotted"),n.unslicked=!0,t||n.$slider.trigger("destroy",[n])},t.prototype.disableTransition=function(e){var t=this,n={};n[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout((function(){n.disableTransition(e),t.call()}),n.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(n){n.stopImmediatePropagation();var i=e(this);setTimeout((function(){t.options.pauseOnFocus&&(t.focussed=i.is(":focus"),t.autoPlay())}),0)}))},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){return this.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},t.prototype.getLeft=function(e){var t,n,i,r,o=this,a=0;return o.slideOffset=0,n=o.$slides.first().outerHeight(!0),!0===o.options.infinite?(o.slideCount>o.options.slidesToShow&&(o.slideOffset=o.slideWidth*o.options.slidesToShow*-1,r=-1,!0===o.options.vertical&&!0===o.options.centerMode&&(2===o.options.slidesToShow?r=-1.5:1===o.options.slidesToShow&&(r=-2)),a=n*o.options.slidesToShow*r),o.slideCount%o.options.slidesToScroll!=0&&e+o.options.slidesToScroll>o.slideCount&&o.slideCount>o.options.slidesToShow&&(e>o.slideCount?(o.slideOffset=(o.options.slidesToShow-(e-o.slideCount))*o.slideWidth*-1,a=(o.options.slidesToShow-(e-o.slideCount))*n*-1):(o.slideOffset=o.slideCount%o.options.slidesToScroll*o.slideWidth*-1,a=o.slideCount%o.options.slidesToScroll*n*-1))):e+o.options.slidesToShow>o.slideCount&&(o.slideOffset=(e+o.options.slidesToShow-o.slideCount)*o.slideWidth,a=(e+o.options.slidesToShow-o.slideCount)*n),o.slideCount<=o.options.slidesToShow&&(o.slideOffset=0,a=0),!0===o.options.centerMode&&o.slideCount<=o.options.slidesToShow?o.slideOffset=o.slideWidth*Math.floor(o.options.slidesToShow)/2-o.slideWidth*o.slideCount/2:!0===o.options.centerMode&&!0===o.options.infinite?o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)-o.slideWidth:!0===o.options.centerMode&&(o.slideOffset=0,o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)),t=!1===o.options.vertical?e*o.slideWidth*-1+o.slideOffset:e*n*-1+a,!0===o.options.variableWidth&&(i=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow),t=!0===o.options.rtl?i[0]?-1*(o.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===o.options.centerMode&&(i=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow+1),t=!0===o.options.rtl?i[0]?-1*(o.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(o.$list.width()-i.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){return this.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,r=[];for(!1===t.options.infinite?e=t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,e=2*t.slideCount);n<e;)r.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return r},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,n,i=this;return n=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0,!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each((function(r,o){if(o.offsetLeft-n+e(o).outerWidth()/2>-1*i.swipeLeft)return t=o,!1})),Math.abs(e(t).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var n=this;e(n.$slider).hasClass("slick-initialized")||(e(n.$slider).addClass("slick-initialized"),n.buildRows(),n.buildOut(),n.setProps(),n.startLoad(),n.loadSlider(),n.initializeEvents(),n.updateArrows(),n.updateDots(),n.checkResponsive(!0),n.focusHandler()),t&&n.$slider.trigger("init",[n]),!0===n.options.accessibility&&n.initADA(),n.options.autoplay&&(n.paused=!1,n.autoPlay())},t.prototype.initADA=function(){var t=this,n=Math.ceil(t.slideCount/t.options.slidesToShow),i=t.getNavigableIndexes().filter((function(e){return e>=0&&e<t.slideCount}));t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each((function(n){var r=i.indexOf(n);e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+n,tabindex:-1}),-1!==r&&e(this).attr({"aria-describedby":"slick-slide-control"+t.instanceUid+r})})),t.$dots.attr("role","tablist").find("li").each((function(r){var o=i[r];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+r,"aria-controls":"slick-slide"+t.instanceUid+o,"aria-label":r+1+" of "+n,"aria-selected":null,tabindex:"-1"})})).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var r=t.currentSlide,o=r+t.options.slidesToShow;r<o;r++)t.$slides.eq(r).attr("tabindex",0);t.activateADA()},t.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},t.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},t.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},t.prototype.lazyLoad=function(){function t(t){e("img[data-lazy]",t).each((function(){var t=e(this),n=e(this).attr("data-lazy"),i=e(this).attr("data-srcset"),r=e(this).attr("data-sizes")||o.$slider.attr("data-sizes"),a=document.createElement("img");a.onload=function(){t.animate({opacity:0},100,(function(){i&&(t.attr("srcset",i),r&&t.attr("sizes",r)),t.attr("src",n).animate({opacity:1},200,(function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),o.$slider.trigger("lazyLoaded",[o,t,n])}))},a.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,t,n])},a.src=n}))}var n,i,r,o=this;if(!0===o.options.centerMode?!0===o.options.infinite?r=(i=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(i=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),r=o.options.slidesToShow/2+1+2+o.currentSlide):(i=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,r=Math.ceil(i+o.options.slidesToShow),!0===o.options.fade&&(i>0&&i--,r<=o.slideCount&&r++)),n=o.$slider.find(".slick-slide").slice(i,r),"anticipated"===o.options.lazyLoad)for(var a=i-1,s=r,l=o.$slider.find(".slick-slide"),u=0;u<o.options.slidesToScroll;u++)a<0&&(a=o.slideCount-1),n=(n=n.add(l.eq(a))).add(l.eq(s)),a--,s++;t(n),o.slideCount<=o.options.slidesToShow?t(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?t(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&t(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},t.prototype.postSlide=function(t){var n=this;n.unslicked||(n.$slider.trigger("afterChange",[n,t]),n.animating=!1,n.slideCount>n.options.slidesToShow&&n.setPosition(),n.swipeLeft=null,n.options.autoplay&&n.autoPlay(),!0===n.options.accessibility&&(n.initADA(),n.options.focusOnChange&&e(n.$slides.get(n.currentSlide)).attr("tabindex",0).focus()))},t.prototype.prev=t.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(t){t=t||1;var n,i,r,o,a,s=this,l=e("img[data-lazy]",s.$slider);l.length?(n=l.first(),i=n.attr("data-lazy"),r=n.attr("data-srcset"),o=n.attr("data-sizes")||s.$slider.attr("data-sizes"),(a=document.createElement("img")).onload=function(){r&&(n.attr("srcset",r),o&&n.attr("sizes",o)),n.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,n,i]),s.progressiveLazyLoad()},a.onerror=function(){t<3?setTimeout((function(){s.progressiveLazyLoad(t+1)}),500):(n.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,n,i]),s.progressiveLazyLoad())},a.src=i):s.$slider.trigger("allImagesLoaded",[s])},t.prototype.refresh=function(t){var n,i,r=this;i=r.slideCount-r.options.slidesToShow,!r.options.infinite&&r.currentSlide>i&&(r.currentSlide=i),r.slideCount<=r.options.slidesToShow&&(r.currentSlide=0),n=r.currentSlide,r.destroy(!0),e.extend(r,r.initials,{currentSlide:n}),r.init(),t||r.changeSlide({data:{message:"index",index:n}},!1)},t.prototype.registerBreakpoints=function(){var t,n,i,r=this,o=r.options.responsive||null;if("array"===e.type(o)&&o.length){for(t in r.respondTo=r.options.respondTo||"window",o)if(i=r.breakpoints.length-1,o.hasOwnProperty(t)){for(n=o[t].breakpoint;i>=0;)r.breakpoints[i]&&r.breakpoints[i]===n&&r.breakpoints.splice(i,1),i--;r.breakpoints.push(n),r.breakpointSettings[n]=o[t].settings}r.breakpoints.sort((function(e,t){return r.options.mobileFirst?e-t:t-e}))}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout((function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()}),50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,n){var i=this;if(e="boolean"==typeof e?!0===(t=e)?0:i.slideCount-1:!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},t.prototype.setCSS=function(e){var t,n,i=this,r={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",r[i.positionProp]=e,!1===i.transformsEnabled?i.$slideTrack.css(r):(r={},!1===i.cssTransitions?(r[i.animType]="translate("+t+", "+n+")",i.$slideTrack.css(r)):(r[i.animType]="translate3d("+t+", "+n+", 0px)",i.$slideTrack.css(r)))},t.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,n=this;n.$slides.each((function(i,r){t=n.slideWidth*i*-1,!0===n.options.rtl?e(r).css({position:"relative",right:t,top:0,zIndex:n.options.zIndex-2,opacity:0}):e(r).css({position:"relative",left:t,top:0,zIndex:n.options.zIndex-2,opacity:0})})),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(){var t,n,i,r,o,a=this,s=!1;if("object"===e.type(arguments[0])?(i=arguments[0],s=arguments[1],o="multiple"):"string"===e.type(arguments[0])&&(i=arguments[0],r=arguments[1],s=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)a.options[i]=r;else if("multiple"===o)e.each(i,(function(e,t){a.options[e]=t}));else if("responsive"===o)for(n in r)if("array"!==e.type(a.options.responsive))a.options.responsive=[r[n]];else{for(t=a.options.responsive.length-1;t>=0;)a.options.responsive[t].breakpoint===r[n].breakpoint&&a.options.responsive.splice(t,1),t--;a.options.responsive.push(r[n])}s&&(a.unload(),a.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},t.prototype.setSlideClasses=function(e){var t,n,i,r,o=this;if(n=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),o.$slides.eq(e).addClass("slick-current"),!0===o.options.centerMode){var a=o.options.slidesToShow%2==0?1:0;t=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&(e>=t&&e<=o.slideCount-1-t?o.$slides.slice(e-t+a,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=o.options.slidesToShow+e,n.slice(i-t+1+a,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-o.options.slidesToShow).addClass("slick-center"):e===o.slideCount-1&&n.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=o.slideCount-o.options.slidesToShow?o.$slides.slice(e,e+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=o.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(r=o.slideCount%o.options.slidesToShow,i=!0===o.options.infinite?o.options.slidesToShow+e:e,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-e<o.options.slidesToShow?n.slice(i-(o.options.slidesToShow-r),i+r).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},t.prototype.setupInfinite=function(){var t,n,i,r=this;if(!0===r.options.fade&&(r.options.centerMode=!1),!0===r.options.infinite&&!1===r.options.fade&&(n=null,r.slideCount>r.options.slidesToShow)){for(i=!0===r.options.centerMode?r.options.slidesToShow+1:r.options.slidesToShow,t=r.slideCount;t>r.slideCount-i;t-=1)n=t-1,e(r.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n-r.slideCount).prependTo(r.$slideTrack).addClass("slick-cloned");for(t=0;t<i+r.slideCount;t+=1)n=t,e(r.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n+r.slideCount).appendTo(r.$slideTrack).addClass("slick-cloned");r.$slideTrack.find(".slick-cloned").find("[id]").each((function(){e(this).attr("id","")}))}},t.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},t.prototype.selectHandler=function(t){var n=this,i=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),r=parseInt(i.attr("data-slick-index"));r||(r=0),n.slideCount<=n.options.slidesToShow?n.slideHandler(r,!1,!0):n.slideHandler(r)},t.prototype.slideHandler=function(e,t,n){var i,r,o,a,s,l=null,u=this;if(t=t||!1,!(!0===u.animating&&!0===u.options.waitForAnimate||!0===u.options.fade&&u.currentSlide===e))if(!1===t&&u.asNavFor(e),i=e,l=u.getLeft(i),a=u.getLeft(u.currentSlide),u.currentLeft=null===u.swipeLeft?a:u.swipeLeft,!1===u.options.infinite&&!1===u.options.centerMode&&(e<0||e>u.getDotCount()*u.options.slidesToScroll))!1===u.options.fade&&(i=u.currentSlide,!0!==n?u.animateSlide(a,(function(){u.postSlide(i)})):u.postSlide(i));else if(!1===u.options.infinite&&!0===u.options.centerMode&&(e<0||e>u.slideCount-u.options.slidesToScroll))!1===u.options.fade&&(i=u.currentSlide,!0!==n?u.animateSlide(a,(function(){u.postSlide(i)})):u.postSlide(i));else{if(u.options.autoplay&&clearInterval(u.autoPlayTimer),r=i<0?u.slideCount%u.options.slidesToScroll!=0?u.slideCount-u.slideCount%u.options.slidesToScroll:u.slideCount+i:i>=u.slideCount?u.slideCount%u.options.slidesToScroll!=0?0:i-u.slideCount:i,u.animating=!0,u.$slider.trigger("beforeChange",[u,u.currentSlide,r]),o=u.currentSlide,u.currentSlide=r,u.setSlideClasses(u.currentSlide),u.options.asNavFor&&(s=(s=u.getNavTarget()).slick("getSlick")).slideCount<=s.options.slidesToShow&&s.setSlideClasses(u.currentSlide),u.updateDots(),u.updateArrows(),!0===u.options.fade)return!0!==n?(u.fadeSlideOut(o),u.fadeSlide(r,(function(){u.postSlide(r)}))):u.postSlide(r),void u.animateHeight();!0!==n?u.animateSlide(l,(function(){u.postSlide(r)})):u.postSlide(r)}},t.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,n,i,r=this;return e=r.touchObject.startX-r.touchObject.curX,t=r.touchObject.startY-r.touchObject.curY,n=Math.atan2(t,e),(i=Math.round(180*n/Math.PI))<0&&(i=360-Math.abs(i)),i<=45&&i>=0||i<=360&&i>=315?!1===r.options.rtl?"left":"right":i>=135&&i<=225?!1===r.options.rtl?"right":"left":!0===r.options.verticalSwiping?i>=35&&i<=135?"down":"up":"vertical"},t.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1,!1;if(i.interrupted=!1,i.shouldClick=!(i.touchObject.swipeLength>10),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,n,i,r,o,a,s=this;return o=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!s.dragging||s.scrolling||o&&1!==o.length)&&(t=s.getLeft(s.currentSlide),s.touchObject.curX=void 0!==o?o[0].pageX:e.clientX,s.touchObject.curY=void 0!==o?o[0].pageY:e.clientY,s.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(s.touchObject.curX-s.touchObject.startX,2))),a=Math.round(Math.sqrt(Math.pow(s.touchObject.curY-s.touchObject.startY,2))),!s.options.verticalSwiping&&!s.swiping&&a>4?(s.scrolling=!0,!1):(!0===s.options.verticalSwiping&&(s.touchObject.swipeLength=a),n=s.swipeDirection(),void 0!==e.originalEvent&&s.touchObject.swipeLength>4&&(s.swiping=!0,e.preventDefault()),r=(!1===s.options.rtl?1:-1)*(s.touchObject.curX>s.touchObject.startX?1:-1),!0===s.options.verticalSwiping&&(r=s.touchObject.curY>s.touchObject.startY?1:-1),i=s.touchObject.swipeLength,s.touchObject.edgeHit=!1,!1===s.options.infinite&&(0===s.currentSlide&&"right"===n||s.currentSlide>=s.getDotCount()&&"left"===n)&&(i=s.touchObject.swipeLength*s.options.edgeFriction,s.touchObject.edgeHit=!0),!1===s.options.vertical?s.swipeLeft=t+i*r:s.swipeLeft=t+i*(s.$list.height()/s.listWidth)*r,!0===s.options.verticalSwiping&&(s.swipeLeft=t+i*r),!0!==s.options.fade&&!1!==s.options.touchMove&&(!0===s.animating?(s.swipeLeft=null,!1):void s.setCSS(s.swipeLeft))))},t.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return n.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},t.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,n,i=this,r=arguments[0],o=Array.prototype.slice.call(arguments,1),a=i.length;for(e=0;e<a;e++)if("object"==typeof r||void 0===r?i[e].slick=new t(i[e],r):n=i[e].slick[r].apply(i[e].slick,o),void 0!==n)return n;return i}})?i.apply(t,r):i)||(e.exports=o)}()},Za3L:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Полето е задолжително.",remote:"Поправете го ова поле",email:"Внесете правилна e-mail адреса",url:"Внесете правилен URL.",date:"Внесете правилен датум",dateISO:"Внесете правилен датум (ISO).",number:"Внесете правилен број.",digits:"Внесете само бројки.",creditcard:"Внесете правилен број на кредитната картичка.",equalTo:"Внесете ја истата вредност повторно.",extension:"Внесете вредност со соодветна екстензија.",maxlength:e.validator.format("Внесете максимално {0} знаци."),minlength:e.validator.format("Внесете барем {0} знаци."),rangelength:e.validator.format("Внесете вредност со должина помеѓу {0} и {1} знаци."),range:e.validator.format("Внесете вредност помеѓу {0} и {1}."),max:e.validator.format("Внесете вредност помала или еднаква на {0}."),min:e.validator.format("Внесете вредност поголема или еднаква на {0}")}),e})?i.apply(t,r):i)||(e.exports=o)},aBcY:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"השדה הזה הינו שדה חובה",remote:"נא לתקן שדה זה",email:'נא למלא כתובת דוא"ל חוקית',url:"נא למלא כתובת אינטרנט חוקית",date:"נא למלא תאריך חוקי",dateISO:"נא למלא תאריך חוקי (ISO)",number:"נא למלא מספר",digits:"נא למלא רק מספרים",creditcard:"נא למלא מספר כרטיס אשראי חוקי",equalTo:"נא למלא את אותו ערך שוב",extension:"נא למלא ערך עם סיומת חוקית",maxlength:e.validator.format(".נא לא למלא יותר מ- {0} תווים"),minlength:e.validator.format("נא למלא לפחות {0} תווים"),rangelength:e.validator.format("נא למלא ערך בין {0} ל- {1} תווים"),range:e.validator.format("נא למלא ערך בין {0} ל- {1}"),max:e.validator.format("נא למלא ערך קטן או שווה ל- {0}"),min:e.validator.format("נא למלא ערך גדול או שווה ל- {0}")}),e})?i.apply(t,r):i)||(e.exports=o)},bUC5:function(e,t,n){"use strict";n.r(t);n("pU5O"),n("eCb9"),n("XMe9"),n("I9E9"),n("s+lh"),n("omkw");n("xexB"),window.$=window.jQuery=n("EVdn"),window.Stickyfill=n("5nEI");var i=$("html").attr("lang");"en"!==i&&n("sngE")("./messages_"+i+".min.js"),n("rIKr"),n("gYfQ")($),n("i2Oj"),n("hTGC"),n("Nv4c"),n("8yrV")},d2oF:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Ovo polje je obavezno.",remote:"Ovo polje treba popraviti.",email:"Unesite ispravnu e-mail adresu.",url:"Unesite ispravan URL.",date:"Unesite ispravan datum.",dateISO:"Unesite ispravan datum (ISO).",number:"Unesite ispravan broj.",digits:"Unesite samo brojeve.",creditcard:"Unesite ispravan broj kreditne kartice.",equalTo:"Unesite ponovo istu vrijednost.",extension:"Unesite vrijednost sa ispravnom ekstenzijom.",maxlength:e.validator.format("Maksimalni broj znakova je {0} ."),minlength:e.validator.format("Minimalni broj znakova je {0} ."),rangelength:e.validator.format("Unesite vrijednost između {0} i {1} znakova."),range:e.validator.format("Unesite vrijednost između {0} i {1}."),max:e.validator.format("Unesite vrijednost manju ili jednaku {0}."),min:e.validator.format("Unesite vrijednost veću ili jednaku {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},d3Tz:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Kolom ini diperlukan.",remote:"Harap benarkan kolom ini.",email:"Silakan masukkan format email yang benar.",url:"Silakan masukkan format URL yang benar.",date:"Silakan masukkan format tanggal yang benar.",dateISO:"Silakan masukkan format tanggal(ISO) yang benar.",number:"Silakan masukkan angka yang benar.",digits:"Harap masukan angka saja.",creditcard:"Harap masukkan format kartu kredit yang benar.",equalTo:"Harap masukkan nilai yg sama dengan sebelumnya.",maxlength:e.validator.format("Input dibatasi hanya {0} karakter."),minlength:e.validator.format("Input tidak kurang dari {0} karakter."),rangelength:e.validator.format("Panjang karakter yg diizinkan antara {0} dan {1} karakter."),range:e.validator.format("Harap masukkan nilai antara {0} dan {1}."),max:e.validator.format("Harap masukkan nilai lebih kecil atau sama dengan {0}."),min:e.validator.format("Harap masukkan nilai lebih besar atau sama dengan {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},dpNq:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Campo de preenchimento obrigat&oacute;rio.",remote:"Por favor, corrija este campo.",email:"Por favor, introduza um endere&ccedil;o eletr&oacute;nico v&aacute;lido.",url:"Por favor, introduza um URL v&aacute;lido.",date:"Por favor, introduza uma data v&aacute;lida.",dateISO:"Por favor, introduza uma data v&aacute;lida (ISO).",number:"Por favor, introduza um n&uacute;mero v&aacute;lido.",digits:"Por favor, introduza apenas d&iacute;gitos.",creditcard:"Por favor, introduza um n&uacute;mero de cart&atilde;o de cr&eacute;dito v&aacute;lido.",equalTo:"Por favor, introduza de novo o mesmo valor.",extension:"Por favor, introduza um ficheiro com uma extens&atilde;o v&aacute;lida.",maxlength:e.validator.format("Por favor, n&atilde;o introduza mais do que {0} caracteres."),minlength:e.validator.format("Por favor, introduza pelo menos {0} caracteres."),rangelength:e.validator.format("Por favor, introduza entre {0} e {1} caracteres."),range:e.validator.format("Por favor, introduza um valor entre {0} e {1}."),max:e.validator.format("Por favor, introduza um valor menor ou igual a {0}."),min:e.validator.format("Por favor, introduza um valor maior ou igual a {0}."),nifES:"Por favor, introduza um NIF v&aacute;lido.",nieES:"Por favor, introduza um NIE v&aacute;lido.",cifES:"Por favor, introduza um CIF v&aacute;lido."}),e})?i.apply(t,r):i)||(e.exports=o)},dwOm:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"T&auml;m&auml; kentt&auml; on pakollinen.",email:"Sy&ouml;t&auml; oikea s&auml;hk&ouml;postiosoite.",url:"Sy&ouml;t&auml; oikea URL-osoite.",date:"Sy&ouml;t&auml; oikea p&auml;iv&auml;m&auml;&auml;r&auml;.",dateISO:"Sy&ouml;t&auml; oikea p&auml;iv&auml;m&auml;&auml;r&auml; muodossa VVVV-KK-PP.",number:"Sy&ouml;t&auml; luku.",creditcard:"Sy&ouml;t&auml; voimassa oleva luottokorttinumero.",digits:"Sy&ouml;t&auml; pelk&auml;st&auml;&auml;n numeroita.",equalTo:"Sy&ouml;t&auml; sama arvo uudestaan.",maxlength:e.validator.format("Voit sy&ouml;tt&auml;&auml; enint&auml;&auml;n {0} merkki&auml;."),minlength:e.validator.format("V&auml;hint&auml;&auml;n {0} merkki&auml;."),rangelength:e.validator.format("Sy&ouml;t&auml; v&auml;hint&auml;&auml;n {0} ja enint&auml;&auml;n {1} merkki&auml;."),range:e.validator.format("Sy&ouml;t&auml; arvo v&auml;lilt&auml; {0}&ndash;{1}."),max:e.validator.format("Sy&ouml;t&auml; arvo, joka on enint&auml;&auml;n {0}."),min:e.validator.format("Sy&ouml;t&auml; arvo, joka on v&auml;hint&auml;&auml;n {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},eCb9:function(e,t){!function(){"use strict";if("undefined"!=typeof window){var e=window.navigator.userAgent.match(/Edge\/(\d{2})\./),t=!!e&&16<=parseInt(e[1],10);if("objectFit"in document.documentElement.style==0||t){var n=function(e,t,n){var i,r,o,a,s;if((n=n.split(" ")).length<2&&(n[1]=n[0]),"x"===e)i=n[0],r=n[1],o="left",a="right",s=t.clientWidth;else{if("y"!==e)return;i=n[1],r=n[0],o="top",a="bottom",s=t.clientHeight}if(i!==o&&r!==o){if(i!==a&&r!==a)return"center"===i||"50%"===i?(t.style[o]="50%",void(t.style["margin-"+o]=s/-2+"px")):void(0<=i.indexOf("%")?(i=parseInt(i))<50?(t.style[o]=i+"%",t.style["margin-"+o]=s*(i/-100)+"px"):(i=100-i,t.style[a]=i+"%",t.style["margin-"+a]=s*(i/-100)+"px"):t.style[o]=i);t.style[a]="0"}else t.style[o]="0"},i=function(e){var t=e.dataset?e.dataset.objectFit:e.getAttribute("data-object-fit"),i=e.dataset?e.dataset.objectPosition:e.getAttribute("data-object-position");t=t||"cover",i=i||"50% 50%";var r=e.parentNode;return function(e){var t=window.getComputedStyle(e,null),n=t.getPropertyValue("position"),i=t.getPropertyValue("overflow"),r=t.getPropertyValue("display");n&&"static"!==n||(e.style.position="relative"),"hidden"!==i&&(e.style.overflow="hidden"),r&&"inline"!==r||(e.style.display="block"),0===e.clientHeight&&(e.style.height="100%"),-1===e.className.indexOf("object-fit-polyfill")&&(e.className=e.className+" object-fit-polyfill")}(r),function(e){var t=window.getComputedStyle(e,null),n={"max-width":"none","max-height":"none","min-width":"0px","min-height":"0px",top:"auto",right:"auto",bottom:"auto",left:"auto","margin-top":"0px","margin-right":"0px","margin-bottom":"0px","margin-left":"0px"};for(var i in n)t.getPropertyValue(i)!==n[i]&&(e.style[i]=n[i])}(e),e.style.position="absolute",e.style.width="auto",e.style.height="auto","scale-down"===t&&(t=e.clientWidth<r.clientWidth&&e.clientHeight<r.clientHeight?"none":"contain"),"none"===t?(n("x",e,i),void n("y",e,i)):"fill"===t?(e.style.width="100%",e.style.height="100%",n("x",e,i),void n("y",e,i)):(e.style.height="100%",void("cover"===t&&e.clientWidth>r.clientWidth||"contain"===t&&e.clientWidth<r.clientWidth?(e.style.top="0",e.style.marginTop="0",n("x",e,i)):(e.style.width="100%",e.style.height="auto",e.style.left="0",e.style.marginLeft="0",n("y",e,i))))},r=function(e){if(void 0===e||e instanceof Event)e=document.querySelectorAll("[data-object-fit]");else if(e&&e.nodeName)e=[e];else{if("object"!=typeof e||!e.length||!e[0].nodeName)return!1;e=e}for(var n=0;n<e.length;n++)if(e[n].nodeName){var r=e[n].nodeName.toLowerCase();if("img"===r){if(t)continue;e[n].complete?i(e[n]):e[n].addEventListener("load",(function(){i(this)}))}else"video"===r?0<e[n].readyState?i(e[n]):e[n].addEventListener("loadedmetadata",(function(){i(this)})):i(e[n])}return!0};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",r):r(),window.addEventListener("resize",r),window.objectFitPolyfill=r}else window.objectFitPolyfill=function(){return!1}}}()},etGo:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Це поле необхідно заповнити.",remote:"Будь ласка, введіть правильне значення.",email:"Будь ласка, введіть коректну адресу електронної пошти.",url:"Будь ласка, введіть коректний URL.",date:"Будь ласка, введіть коректну дату.",dateISO:"Будь ласка, введіть коректну дату у форматі ISO.",number:"Будь ласка, введіть число.",digits:"Вводите потрібно лише цифри.",creditcard:"Будь ласка, введіть правильний номер кредитної карти.",equalTo:"Будь ласка, введіть таке ж значення ще раз.",extension:"Будь ласка, виберіть файл з правильним розширенням.",maxlength:e.validator.format("Будь ласка, введіть не більше {0} символів."),minlength:e.validator.format("Будь ласка, введіть не менше {0} символів."),rangelength:e.validator.format("Будь ласка, введіть значення довжиною від {0} до {1} символів."),range:e.validator.format("Будь ласка, введіть число від {0} до {1}."),max:e.validator.format("Будь ласка, введіть число, менше або рівно {0}."),min:e.validator.format("Будь ласка, введіть число, більше або рівно {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},gYfQ:function(e,t,n){(function(t){e.exports=function(e){var i=t.$||window.$||e||n("EVdn");i.attrFn=i.attrFn||{};var r=navigator.userAgent.toLowerCase(),o=r.indexOf("chrome")>-1&&(r.indexOf("windows")>-1||r.indexOf("macintosh")>-1||r.indexOf("linux")>-1)&&r.indexOf("mobile")<0&&r.indexOf("android")<0,a={tap_pixel_range:5,swipe_h_threshold:50,swipe_v_threshold:50,taphold_threshold:750,doubletap_int:500,touch_capable:"ontouchstart"in window&&!o,orientation_support:"orientation"in window&&"onorientationchange"in window,startevent:"ontouchstart"in window&&!o?"touchstart":"mousedown",endevent:"ontouchstart"in window&&!o?"touchend":"mouseup",moveevent:"ontouchstart"in window&&!o?"touchmove":"mousemove",tapevent:"ontouchstart"in window&&!o?"tap":"click",scrollevent:"ontouchstart"in window&&!o?"touchmove":"scroll",hold_timer:null,tap_timer:null};i.isTouchCapable=function(){return a.touch_capable},i.getStartEvent=function(){return a.startevent},i.getEndEvent=function(){return a.endevent},i.getMoveEvent=function(){return a.moveevent},i.getTapEvent=function(){return a.tapevent},i.getScrollEvent=function(){return a.scrollevent},i.each(["tapstart","tapend","tapmove","tap","tap2","tap3","tap4","singletap","doubletap","taphold","swipe","swipeup","swiperight","swipedown","swipeleft","swipeend","scrollstart","scrollend","orientationchange"],(function(e,t){i.fn[t]=function(e){return e?this.on(t,e):this.trigger(t)},i.attrFn[t]=!0})),i.event.special.tapstart={setup:function(){var e=this,t=i(e);t.on(a.startevent,(function n(i){if(t.data("callee",n),i.which&&1!==i.which)return!1;var r=i.originalEvent,o={position:{x:a.touch_capable?r.touches[0].screenX:i.screenX,y:a.touch_capable?r.touches[0].screenY:i.screenY},offset:{x:a.touch_capable?Math.round(r.changedTouches[0].pageX-(t.offset()?t.offset().left:0)):Math.round(i.pageX-(t.offset()?t.offset().left:0)),y:a.touch_capable?Math.round(r.changedTouches[0].pageY-(t.offset()?t.offset().top:0)):Math.round(i.pageY-(t.offset()?t.offset().top:0))},time:Date.now(),target:i.target};return k(e,"tapstart",i,o),!0}))},remove:function(){i(this).off(a.startevent,i(this).data.callee)}},i.event.special.tapmove={setup:function(){var e=this,t=i(e);t.on(a.moveevent,(function n(i){t.data("callee",n);var r=i.originalEvent,o={position:{x:a.touch_capable?r.touches[0].screenX:i.screenX,y:a.touch_capable?r.touches[0].screenY:i.screenY},offset:{x:a.touch_capable?Math.round(r.changedTouches[0].pageX-(t.offset()?t.offset().left:0)):Math.round(i.pageX-(t.offset()?t.offset().left:0)),y:a.touch_capable?Math.round(r.changedTouches[0].pageY-(t.offset()?t.offset().top:0)):Math.round(i.pageY-(t.offset()?t.offset().top:0))},time:Date.now(),target:i.target};return k(e,"tapmove",i,o),!0}))},remove:function(){i(this).off(a.moveevent,i(this).data.callee)}},i.event.special.tapend={setup:function(){var e=this,t=i(e);t.on(a.endevent,(function n(i){t.data("callee",n);var r=i.originalEvent,o={position:{x:a.touch_capable?r.changedTouches[0].screenX:i.screenX,y:a.touch_capable?r.changedTouches[0].screenY:i.screenY},offset:{x:a.touch_capable?Math.round(r.changedTouches[0].pageX-(t.offset()?t.offset().left:0)):Math.round(i.pageX-(t.offset()?t.offset().left:0)),y:a.touch_capable?Math.round(r.changedTouches[0].pageY-(t.offset()?t.offset().top:0)):Math.round(i.pageY-(t.offset()?t.offset().top:0))},time:Date.now(),target:i.target};return k(e,"tapend",i,o),!0}))},remove:function(){i(this).off(a.endevent,i(this).data.callee)}},i.event.special.taphold={setup:function(){var e,t=this,n=i(t),r={x:0,y:0},o=0,s=0;n.on(a.startevent,(function i(l){if(l.which&&1!==l.which)return!1;n.data("tapheld",!1),e=l.target;var u=l.originalEvent,c=Date.now(),d={x:a.touch_capable?u.touches[0].screenX:l.screenX,y:a.touch_capable?u.touches[0].screenY:l.screenY},f={x:a.touch_capable?u.touches[0].pageX-u.touches[0].target.offsetLeft:l.offsetX,y:a.touch_capable?u.touches[0].pageY-u.touches[0].target.offsetTop:l.offsetY};return r.x=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageX:l.pageX,r.y=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageY:l.pageY,o=r.x,s=r.y,a.hold_timer=window.setTimeout((function(){var p=r.x-o,h=r.y-s;if(l.target==e&&(r.x==o&&r.y==s||p>=-a.tap_pixel_range&&p<=a.tap_pixel_range&&h>=-a.tap_pixel_range&&h<=a.tap_pixel_range)){n.data("tapheld",!0);var m=Date.now(),v={x:a.touch_capable?u.touches[0].screenX:l.screenX,y:a.touch_capable?u.touches[0].screenY:l.screenY},g={x:a.touch_capable?Math.round(u.changedTouches[0].pageX-(n.offset()?n.offset().left:0)):Math.round(l.pageX-(n.offset()?n.offset().left:0)),y:a.touch_capable?Math.round(u.changedTouches[0].pageY-(n.offset()?n.offset().top:0)):Math.round(l.pageY-(n.offset()?n.offset().top:0))},y={startTime:c,endTime:m,startPosition:d,startOffset:f,endPosition:v,endOffset:g,duration:m-c,target:l.target};n.data("callee1",i),k(t,"taphold",l,y)}}),a.taphold_threshold),!0})).on(a.endevent,(function e(){n.data("callee2",e),n.data("tapheld",!1),window.clearTimeout(a.hold_timer)})).on(a.moveevent,(function e(t){n.data("callee3",e),o=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,s=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY}))},remove:function(){i(this).off(a.startevent,i(this).data.callee1).off(a.endevent,i(this).data.callee2).off(a.moveevent,i(this).data.callee3)}},i.event.special.doubletap={setup:function(){var e,t,n,r=this,o=i(r),s=null,l=!1;o.on(a.startevent,(function t(i){return(!i.which||1===i.which)&&(o.data("doubletapped",!1),e=i.target,o.data("callee1",t),n=i.originalEvent,s||(s={position:{x:a.touch_capable?n.touches[0].screenX:i.screenX,y:a.touch_capable?n.touches[0].screenY:i.screenY},offset:{x:a.touch_capable?Math.round(n.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(i.pageX-(o.offset()?o.offset().left:0)),y:a.touch_capable?Math.round(n.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(i.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:i.target}),!0)})).on(a.endevent,(function i(u){var c=Date.now(),d=c-(o.data("lastTouch")||c+1);if(window.clearTimeout(t),o.data("callee2",i),d<a.doubletap_int&&u.target==e&&d>100){o.data("doubletapped",!0),window.clearTimeout(a.tap_timer);var f={position:{x:a.touch_capable?u.originalEvent.changedTouches[0].screenX:u.screenX,y:a.touch_capable?u.originalEvent.changedTouches[0].screenY:u.screenY},offset:{x:a.touch_capable?Math.round(n.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(u.pageX-(o.offset()?o.offset().left:0)),y:a.touch_capable?Math.round(n.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(u.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:u.target},p={firstTap:s,secondTap:f,interval:f.time-s.time};l||(k(r,"doubletap",u,p),s=null),l=!0,window.setTimeout((function(){l=!1}),a.doubletap_int)}else o.data("lastTouch",c),t=window.setTimeout((function(){s=null,window.clearTimeout(t)}),a.doubletap_int,[u]);o.data("lastTouch",c)}))},remove:function(){i(this).off(a.startevent,i(this).data.callee1).off(a.endevent,i(this).data.callee2)}},i.event.special.singletap={setup:function(){var e=this,t=i(e),n=null,r=null,o={x:0,y:0};t.on(a.startevent,(function e(i){return(!i.which||1===i.which)&&(r=Date.now(),n=i.target,t.data("callee1",e),o.x=i.originalEvent.targetTouches?i.originalEvent.targetTouches[0].pageX:i.pageX,o.y=i.originalEvent.targetTouches?i.originalEvent.targetTouches[0].pageY:i.pageY,!0)})).on(a.endevent,(function i(s){if(t.data("callee2",i),s.target==n){var l=s.originalEvent.changedTouches?s.originalEvent.changedTouches[0].pageX:s.pageX,u=s.originalEvent.changedTouches?s.originalEvent.changedTouches[0].pageY:s.pageY;a.tap_timer=window.setTimeout((function(){var n=o.x-l,i=o.y-u;if(!t.data("doubletapped")&&!t.data("tapheld")&&(o.x==l&&o.y==u||n>=-a.tap_pixel_range&&n<=a.tap_pixel_range&&i>=-a.tap_pixel_range&&i<=a.tap_pixel_range)){var c=s.originalEvent,d={position:{x:a.touch_capable?c.changedTouches[0].screenX:s.screenX,y:a.touch_capable?c.changedTouches[0].screenY:s.screenY},offset:{x:a.touch_capable?Math.round(c.changedTouches[0].pageX-(t.offset()?t.offset().left:0)):Math.round(s.pageX-(t.offset()?t.offset().left:0)),y:a.touch_capable?Math.round(c.changedTouches[0].pageY-(t.offset()?t.offset().top:0)):Math.round(s.pageY-(t.offset()?t.offset().top:0))},time:Date.now(),target:s.target};d.time-r<a.taphold_threshold&&k(e,"singletap",s,d)}}),a.doubletap_int)}}))},remove:function(){i(this).off(a.startevent,i(this).data.callee1).off(a.endevent,i(this).data.callee2)}},i.event.special.tap={setup:function(){var e,t,n=this,r=i(n),o=!1,s=null,l={x:0,y:0};r.on(a.startevent,(function n(i){return r.data("callee1",n),(!i.which||1===i.which)&&(o=!0,l.x=i.originalEvent.targetTouches?i.originalEvent.targetTouches[0].pageX:i.pageX,l.y=i.originalEvent.targetTouches?i.originalEvent.targetTouches[0].pageY:i.pageY,e=Date.now(),s=i.target,t=i.originalEvent.targetTouches?i.originalEvent.targetTouches:[i],!0)})).on(a.endevent,(function i(u){r.data("callee2",i);var c=u.originalEvent.targetTouches?u.originalEvent.changedTouches[0].pageX:u.pageX,d=u.originalEvent.targetTouches?u.originalEvent.changedTouches[0].pageY:u.pageY,f=l.x-c,p=l.y-d;if(s==u.target&&o&&Date.now()-e<a.taphold_threshold&&(l.x==c&&l.y==d||f>=-a.tap_pixel_range&&f<=a.tap_pixel_range&&p>=-a.tap_pixel_range&&p<=a.tap_pixel_range)){for(var h=u.originalEvent,m=[],v=0;v<t.length;v++){var g={position:{x:a.touch_capable?h.changedTouches[v].screenX:u.screenX,y:a.touch_capable?h.changedTouches[v].screenY:u.screenY},offset:{x:a.touch_capable?Math.round(h.changedTouches[v].pageX-(r.offset()?r.offset().left:0)):Math.round(u.pageX-(r.offset()?r.offset().left:0)),y:a.touch_capable?Math.round(h.changedTouches[v].pageY-(r.offset()?r.offset().top:0)):Math.round(u.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:u.target};m.push(g)}k(n,"tap",u,m)}}))},remove:function(){i(this).off(a.startevent,i(this).data.callee1).off(a.endevent,i(this).data.callee2)}},i.event.special.swipe={setup:function(){var e,t=i(this),n=!1,r=!1,o={x:0,y:0},s={x:0,y:0};t.on(a.startevent,(function r(l){(t=i(l.currentTarget)).data("callee1",r),o.x=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageX:l.pageX,o.y=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageY:l.pageY,s.x=o.x,s.y=o.y,n=!0;var u=l.originalEvent;e={position:{x:a.touch_capable?u.touches[0].screenX:l.screenX,y:a.touch_capable?u.touches[0].screenY:l.screenY},offset:{x:a.touch_capable?Math.round(u.changedTouches[0].pageX-(t.offset()?t.offset().left:0)):Math.round(l.pageX-(t.offset()?t.offset().left:0)),y:a.touch_capable?Math.round(u.changedTouches[0].pageY-(t.offset()?t.offset().top:0)):Math.round(l.pageY-(t.offset()?t.offset().top:0))},time:Date.now(),target:l.target}})),t.on(a.moveevent,(function l(u){var c;(t=i(u.currentTarget)).data("callee2",l),s.x=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageX:u.pageX,s.y=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageY:u.pageY;var d=t.parent().data("xthreshold")?t.parent().data("xthreshold"):t.data("xthreshold"),f=t.parent().data("ythreshold")?t.parent().data("ythreshold"):t.data("ythreshold"),p=void 0!==d&&!1!==d&&parseInt(d)?parseInt(d):a.swipe_h_threshold,h=void 0!==f&&!1!==f&&parseInt(f)?parseInt(f):a.swipe_v_threshold;if(o.y>s.y&&o.y-s.y>h&&(c="swipeup"),o.x<s.x&&s.x-o.x>p&&(c="swiperight"),o.y<s.y&&s.y-o.y>h&&(c="swipedown"),o.x>s.x&&o.x-s.x>p&&(c="swipeleft"),null!=c&&n){o.x=0,o.y=0,s.x=0,s.y=0,n=!1;var m=u.originalEvent,v={position:{x:a.touch_capable?m.touches[0].screenX:u.screenX,y:a.touch_capable?m.touches[0].screenY:u.screenY},offset:{x:a.touch_capable?Math.round(m.changedTouches[0].pageX-(t.offset()?t.offset().left:0)):Math.round(u.pageX-(t.offset()?t.offset().left:0)),y:a.touch_capable?Math.round(m.changedTouches[0].pageY-(t.offset()?t.offset().top:0)):Math.round(u.pageY-(t.offset()?t.offset().top:0))},time:Date.now(),target:u.target},g=Math.abs(e.position.x-v.position.x),y=Math.abs(e.position.y-v.position.y),b={startEvnt:e,endEvnt:v,direction:c.replace("swipe",""),xAmount:g,yAmount:y,duration:v.time-e.time};r=!0,t.trigger("swipe",b).trigger(c,b)}})),t.on(a.endevent,(function o(s){var l="";if((t=i(s.currentTarget)).data("callee3",o),r){var u=t.data("xthreshold"),c=t.data("ythreshold"),d=void 0!==u&&!1!==u&&parseInt(u)?parseInt(u):a.swipe_h_threshold,f=void 0!==c&&!1!==c&&parseInt(c)?parseInt(c):a.swipe_v_threshold,p=s.originalEvent,h={position:{x:a.touch_capable?p.changedTouches[0].screenX:s.screenX,y:a.touch_capable?p.changedTouches[0].screenY:s.screenY},offset:{x:a.touch_capable?Math.round(p.changedTouches[0].pageX-(t.offset()?t.offset().left:0)):Math.round(s.pageX-(t.offset()?t.offset().left:0)),y:a.touch_capable?Math.round(p.changedTouches[0].pageY-(t.offset()?t.offset().top:0)):Math.round(s.pageY-(t.offset()?t.offset().top:0))},time:Date.now(),target:s.target};e.position.y>h.position.y&&e.position.y-h.position.y>f&&(l="swipeup"),e.position.x<h.position.x&&h.position.x-e.position.x>d&&(l="swiperight"),e.position.y<h.position.y&&h.position.y-e.position.y>f&&(l="swipedown"),e.position.x>h.position.x&&e.position.x-h.position.x>d&&(l="swipeleft");var m=Math.abs(e.position.x-h.position.x),v=Math.abs(e.position.y-h.position.y),g={startEvnt:e,endEvnt:h,direction:l.replace("swipe",""),xAmount:m,yAmount:v,duration:h.time-e.time};t.trigger("swipeend",g)}n=!1,r=!1}))},remove:function(){i(this).off(a.startevent,i(this).data.callee1).off(a.moveevent,i(this).data.callee2).off(a.endevent,i(this).data.callee3)}},i.event.special.scrollstart={setup:function(){var e,t,n=this,r=i(n);function o(t,i){k(n,(e=i)?"scrollstart":"scrollend",t)}r.on(a.scrollevent,(function n(i){r.data("callee",n),e||o(i,!0),clearTimeout(t),t=setTimeout((function(){o(i,!1)}),50)}))},remove:function(){i(this).off(a.scrollevent,i(this).data.callee)}};var s,l,u,c,d=i(window),f={0:!0,180:!0};if(a.orientation_support){var p=window.innerWidth||d.width(),h=window.innerHeight||d.height();u=p>h&&p-h>50,c=f[window.orientation],(u&&c||!u&&!c)&&(f={"-90":!0,90:!0})}function m(){var e=s();e!==l&&(l=e,d.trigger("orientationchange"))}i.event.special.orientationchange={setup:function(){return!a.orientation_support&&(l=s(),d.on("throttledresize",m),!0)},teardown:function(){return!a.orientation_support&&(d.off("throttledresize",m),!0)},add:function(e){var t=e.handler;e.handler=function(e){return e.orientation=s(),t.apply(this,arguments)}}},i.event.special.orientationchange.orientation=s=function(){var e=document.documentElement;return(a.orientation_support?f[window.orientation]:e&&e.clientWidth/e.clientHeight<1.1)?"portrait":"landscape"},i.event.special.throttledresize={setup:function(){i(this).on("resize",b)},teardown:function(){i(this).off("resize",b)}};var v,g,y,b=function(){g=Date.now(),(y=g-x)>=250?(x=g,i(this).trigger("throttledresize")):(v&&window.clearTimeout(v),v=window.setTimeout(m,250-y))},x=0;function k(e,t,n,r){var o=n.type;n.type=t,i.event.dispatch.call(e,n,r),n.type=o}i.each({scrollend:"scrollstart",swipeup:"swipe",swiperight:"swipe",swipedown:"swipe",swipeleft:"swipe",swipeend:"swipe",tap2:"tap"},(function(e,t){i.event.special[e]={setup:function(){i(this).on(t,i.noop)}}}))}}).call(this,n("yLpj"))},hTGC:function(e,t){$(document).ready((function(){$((function(){$(".popup-js").magnificPopup({fixedContentPos:!0}),$(document).on("click",".popup-close-js",(function(e){e.preventDefault(),$.magnificPopup.close()}))}))}))},i2Oj:function(e,t){$(document).ready((function(){$(".reviews-slider").slick({arrows:!1,fade:!0,asNavFor:$(".counter-slider"),responsive:[{breakpoint:1025,settings:{adaptiveHeight:!0}}]}),$(".counter-slider").slick({arrows:!1,dots:!0,fade:!0,asNavFor:$(".reviews-slider")})}))},i7Yy:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return function(e){e.extend(e.validator.messages,{required:"Este campo é obrigatorio.",remote:"Por favor, cubre este campo.",email:"Por favor, escribe unha dirección de correo válida.",url:"Por favor, escribe unha URL válida.",date:"Por favor, escribe unha data válida.",dateISO:"Por favor, escribe unha data (ISO) válida.",number:"Por favor, escribe un número válido.",digits:"Por favor, escribe só díxitos.",creditcard:"Por favor, escribe un número de tarxeta válido.",equalTo:"Por favor, escribe o mesmo valor de novo.",extension:"Por favor, escribe un valor cunha extensión aceptada.",maxlength:e.validator.format("Por favor, non escribas máis de {0} caracteres."),minlength:e.validator.format("Por favor, non escribas menos de {0} caracteres."),rangelength:e.validator.format("Por favor, escribe un valor entre {0} e {1} caracteres."),range:e.validator.format("Por favor, escribe un valor entre {0} e {1}."),max:e.validator.format("Por favor, escribe un valor menor ou igual a {0}."),min:e.validator.format("Por favor, escribe un valor maior ou igual a {0}."),nifES:"Por favor, escribe un NIF válido.",nieES:"Por favor, escribe un NIE válido.",cifES:"Por favor, escribe un CIF válido."})}(jQuery),e})?i.apply(t,r):i)||(e.exports=o)},jwnp:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Поље је обавезно.",remote:"Средите ово поље.",email:"Унесите исправну и-мејл адресу.",url:"Унесите исправан URL.",date:"Унесите исправан датум.",dateISO:"Унесите исправан датум (ISO).",number:"Унесите исправан број.",digits:"Унесите само цифе.",creditcard:"Унесите исправан број кредитне картице.",equalTo:"Унесите исту вредност поново.",extension:"Унесите вредност са одговарајућом екстензијом.",maxlength:e.validator.format("Унесите мање од {0} карактера."),minlength:e.validator.format("Унесите барем {0} карактера."),rangelength:e.validator.format("Унесите вредност дугачку између {0} и {1} карактера."),range:e.validator.format("Унесите вредност између {0} и {1}."),max:e.validator.format("Унесите вредност мању или једнаку {0}."),min:e.validator.format("Унесите вредност већу или једнаку {0}."),step:e.validator.format("Унесите вредност која је умножак броја {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},kaLh:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Dit is een verplicht veld.",remote:"Controleer dit veld.",email:"Vul hier een geldig e-mailadres in.",url:"Vul hier een geldige URL in.",date:"Vul hier een geldige datum in.",dateISO:"Vul hier een geldige datum in (ISO-formaat).",number:"Vul hier een geldig getal in.",digits:"Vul hier alleen getallen in.",creditcard:"Vul hier een geldig creditcardnummer in.",equalTo:"Vul hier dezelfde waarde in.",extension:"Vul hier een waarde in met een geldige extensie.",maxlength:e.validator.format("Vul hier maximaal {0} tekens in."),minlength:e.validator.format("Vul hier minimaal {0} tekens in."),rangelength:e.validator.format("Vul hier een waarde in van minimaal {0} en maximaal {1} tekens."),range:e.validator.format("Vul hier een waarde in van minimaal {0} en maximaal {1}."),max:e.validator.format("Vul hier een waarde in kleiner dan of gelijk aan {0}."),min:e.validator.format("Vul hier een waarde in groter dan of gelijk aan {0}."),step:e.validator.format("Vul hier een veelvoud van {0} in."),iban:"Vul hier een geldig IBAN in.",dateNL:"Vul hier een geldige datum in.",phoneNL:"Vul hier een geldig Nederlands telefoonnummer in.",mobileNL:"Vul hier een geldig Nederlands mobiel telefoonnummer in.",postalcodeNL:"Vul hier een geldige postcode in.",bankaccountNL:"Vul hier een geldig bankrekeningnummer in.",giroaccountNL:"Vul hier een geldig gironummer in.",bankorgiroaccountNL:"Vul hier een geldig bank- of gironummer in."}),e})?i.apply(t,r):i)||(e.exports=o)},"kz+C":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Campo obbligatorio",remote:"Controlla questo campo",email:"Inserisci un indirizzo email valido",url:"Inserisci un indirizzo web valido",date:"Inserisci una data valida",dateISO:"Inserisci una data valida (ISO)",number:"Inserisci un numero valido",digits:"Inserisci solo numeri",creditcard:"Inserisci un numero di carta di credito valido",equalTo:"Il valore non corrisponde",extension:"Inserisci un valore con un&apos;estensione valida",maxlength:e.validator.format("Non inserire pi&ugrave; di {0} caratteri"),minlength:e.validator.format("Inserisci almeno {0} caratteri"),rangelength:e.validator.format("Inserisci un valore compreso tra {0} e {1} caratteri"),range:e.validator.format("Inserisci un valore compreso tra {0} e {1}"),max:e.validator.format("Inserisci un valore minore o uguale a {0}"),min:e.validator.format("Inserisci un valore maggiore o uguale a {0}"),nifES:"Inserisci un NIF valido",nieES:"Inserisci un NIE valido",cifES:"Inserisci un CIF valido",currency:"Inserisci una valuta valida"}),e})?i.apply(t,r):i)||(e.exports=o)},oO8a:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"ان معلومات کا اندراج ضروری ہے",remote:"ان معلومات کا اندراج ضروری ہے",email:"درج کی ہوئی ای میل درست نہیں ہے",url:"درج کیا گیا پتہ درست نہیں ہے",date:"درج کی گئی تاریخ درست نہیں ہے",dateISO:"معیار کے مطابق نہیں ہے (ISO) درج کی گئی تاریخ",number:"درج کیےگئے ہندسے درست نہیں ہیں",digits:"صرف ہندسے اندراج کئے جاسکتے ہیں",creditcard:"درج کیا گیا کارڈ نمبر درست نہیں ہے",equalTo:"اندراج کا موازنہ درست نہیں ہے",extension:"اندراج درست نہیں ہے",maxlength:e.validator.format("زیادہ سے زیادہ {0} کا اندراج کر سکتے ہیں"),minlength:e.validator.format("کم سے کم {0} کا اندراج کرنا ضروری ہے"),rangelength:e.validator.format("اندراج کا {0} اور {1}کے درمیان ہونا ضروری ہے"),range:e.validator.format("اندراج کا {0} اور {1} کے درمیان ہونا ضروری ہے"),max:e.validator.format("زیادہ سے زیادہ {0} کا اندراج کر سکتے ہیں"),min:e.validator.format("کم سے کم {0} کا اندراج کرنا ضروری ہے")}),e})?i.apply(t,r):i)||(e.exports=o)},oTcK:function(e,t,n){var i,r,o;r=[n("EVdn")],void 0===(o="function"==typeof(i=function(e){e.extend(e.fn,{validate:function(t){if(this.length){var n=e.data(this[0],"validator");return n||(this.attr("novalidate","novalidate"),n=new e.validator(t,this[0]),e.data(this[0],"validator",n),n.settings.onsubmit&&(this.on("click.validate",":submit",(function(t){n.submitButton=t.currentTarget,e(this).hasClass("cancel")&&(n.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(n.cancelSubmit=!0)})),this.on("submit.validate",(function(t){function i(){var i,r;return n.submitButton&&(n.settings.submitHandler||n.formSubmitted)&&(i=e("<input type='hidden'/>").attr("name",n.submitButton.name).val(e(n.submitButton).val()).appendTo(n.currentForm)),!(n.settings.submitHandler&&!n.settings.debug)||(r=n.settings.submitHandler.call(n,n.currentForm,t),i&&i.remove(),void 0!==r&&r)}return n.settings.debug&&t.preventDefault(),n.cancelSubmit?(n.cancelSubmit=!1,i()):n.form()?n.pendingRequest?(n.formSubmitted=!0,!1):i():(n.focusInvalid(),!1)}))),n)}t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var t,n,i;return e(this[0]).is("form")?t=this.validate().form():(i=[],t=!0,n=e(this[0].form).validate(),this.each((function(){(t=n.element(this)&&t)||(i=i.concat(n.errorList))})),n.errorList=i),t},rules:function(t,n){var i,r,o,a,s,l,u=this[0],c=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=u&&(!u.form&&c&&(u.form=this.closest("form")[0],u.name=this.attr("name")),null!=u.form)){if(t)switch(i=e.data(u.form,"validator").settings,r=i.rules,o=e.validator.staticRules(u),t){case"add":e.extend(o,e.validator.normalizeRule(n)),delete o.messages,r[u.name]=o,n.messages&&(i.messages[u.name]=e.extend(i.messages[u.name],n.messages));break;case"remove":return n?(l={},e.each(n.split(/\s/),(function(e,t){l[t]=o[t],delete o[t]})),l):(delete r[u.name],o)}return(a=e.validator.normalizeRules(e.extend({},e.validator.classRules(u),e.validator.attributeRules(u),e.validator.dataRules(u),e.validator.staticRules(u)),u)).required&&(s=a.required,delete a.required,a=e.extend({required:s},a)),a.remote&&(s=a.remote,delete a.remote,a=e.extend(a,{remote:s})),a}}});var t=function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")};e.extend(e.expr.pseudos||e.expr[":"],{blank:function(n){return!t(""+e(n).val())},filled:function(n){var i=e(n).val();return null!==i&&!!t(""+i)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,n){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=n,this.init()},e.validator.format=function(t,n){return 1===arguments.length?function(){var n=e.makeArray(arguments);return n.unshift(t),e.validator.format.apply(this,n)}:(void 0===n||(arguments.length>2&&n.constructor!==Array&&(n=e.makeArray(arguments).slice(1)),n.constructor!==Array&&(n=[n]),e.each(n,(function(e,n){t=t.replace(new RegExp("\\{"+e+"\\}","g"),(function(){return n}))}))),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,n){9===n.which&&""===this.elementValue(t)||-1!==e.inArray(n.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).addClass(n).removeClass(i):e(t).addClass(n).removeClass(i)},unhighlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).removeClass(n).addClass(i):e(t).removeClass(n).addClass(i)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){var n=void 0!==e(this).attr("contenteditable")&&"false"!==e(this).attr("contenteditable");if(!this.form&&n&&(this.form=e(this).closest("form")[0],this.name=e(this).attr("name")),i===this.form){var r=e.data(this.form,"validator"),o="on"+t.type.replace(/^validate/,""),a=r.settings;a[o]&&!e(this).is(a.ignore)&&a[o].call(r,this,t)}}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var n,i=this.currentForm,r=this.groups={};e.each(this.settings.groups,(function(t,n){"string"==typeof n&&(n=n.split(/\s/)),e.each(n,(function(e,n){r[n]=t}))})),n=this.settings.rules,e.each(n,(function(t,i){n[t]=e.validator.normalizeRule(i)})),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var n,i,r=this.clean(t),o=this.validationTargetFor(r),a=this,s=!0;return void 0===o?delete this.invalid[r.name]:(this.prepareElement(o),this.currentElements=e(o),(i=this.groups[o.name])&&e.each(this.groups,(function(e,t){t===i&&e!==o.name&&(r=a.validationTargetFor(a.clean(a.findByName(e))))&&r.name in a.invalid&&(a.currentElements.push(r),s=a.check(r)&&s)})),n=!1!==this.check(o),s=s&&n,this.invalid[o.name]=!n,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!n)),s},showErrors:function(t){if(t){var n=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,(function(e,t){return{message:e,element:n.findByName(t)[0]}})),this.successList=e.grep(this.successList,(function(e){return!(e.name in t)}))}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,n=0;for(t in e)void 0!==e[t]&&null!==e[t]&&!1!==e[t]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,(function(e){return e.element.name===t.name})).length&&t},elements:function(){var t=this,n={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter((function(){var i=this.name||e(this).attr("name"),r=void 0!==e(this).attr("contenteditable")&&"false"!==e(this).attr("contenteditable");return!i&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),r&&(this.form=e(this).closest("form")[0],this.name=i),!(this.form!==t.currentForm||i in n||!t.objectLength(e(this).rules())||(n[i]=!0,0))}))},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var n,i,r=e(t),o=t.type,a=void 0!==r.attr("contenteditable")&&"false"!==r.attr("contenteditable");return"radio"===o||"checkbox"===o?this.findByName(t.name).filter(":checked").val():"number"===o&&void 0!==t.validity?t.validity.badInput?"NaN":r.val():(n=a?r.text():r.val(),"file"===o?"C:\\fakepath\\"===n.substr(0,12)?n.substr(12):(i=n.lastIndexOf("/"))>=0||(i=n.lastIndexOf("\\"))>=0?n.substr(i+1):n:"string"==typeof n?n.replace(/\r/g,""):n)},check:function(t){t=this.validationTargetFor(this.clean(t));var n,i,r,o,a=e(t).rules(),s=e.map(a,(function(e,t){return t})).length,l=!1,u=this.elementValue(t);for(i in"function"==typeof a.normalizer?o=a.normalizer:"function"==typeof this.settings.normalizer&&(o=this.settings.normalizer),o&&(u=o.call(t,u),delete a.normalizer),a){r={method:i,parameters:a[i]};try{if("dependency-mismatch"===(n=e.validator.methods[i].call(this,u,t,r.parameters))&&1===s){l=!0;continue}if(l=!1,"pending"===n)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!n)return this.formatAndAdd(t,r),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+r.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+r.method+"' method."),e}}if(!l)return this.objectLength(a)&&this.successList.push(t),!0},customDataMessage:function(t,n){return e(t).data("msg"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var n=this.settings.messages[e];return n&&(n.constructor===String?n:n[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,n){"string"==typeof n&&(n={method:n});var i=this.findDefined(this.customMessage(t.name,n.method),this.customDataMessage(t,n.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[n.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),r=/\$?\{(\d+)\}/g;return"function"==typeof i?i=i.call(this,n.parameters,t):r.test(i)&&(i=e.validator.format(i.replace(r,"{$1}"),n.parameters)),i},formatAndAdd:function(e,t){var n=this.defaultMessage(e,t);this.errorList.push({message:n,element:e,method:t.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,n;for(e=0;this.errorList[e];e++)n=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,n.element,this.settings.errorClass,this.settings.validClass),this.showLabel(n.element,n.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map((function(){return this.element}))},showLabel:function(t,n){var i,r,o,a,s=this.errorsFor(t),l=this.idOrName(t),u=e(t).attr("aria-describedby");s.length?(s.removeClass(this.settings.validClass).addClass(this.settings.errorClass),s.html(n)):(i=s=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(n||""),this.settings.wrapper&&(i=s.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement.call(this,i,e(t)):i.insertAfter(t),s.is("label")?s.attr("for",l):0===s.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(o=s.attr("id"),u?u.match(new RegExp("\\b"+this.escapeCssMeta(o)+"\\b"))||(u+=" "+o):u=o,e(t).attr("aria-describedby",u),(r=this.groups[t.name])&&(a=this,e.each(a.groups,(function(t,n){n===r&&e("[name='"+a.escapeCssMeta(t)+"']",a.currentForm).attr("aria-describedby",s.attr("id"))}))))),!n&&this.settings.success&&(s.text(""),"string"==typeof this.settings.success?s.addClass(this.settings.success):this.settings.success(s,t)),this.toShow=this.toShow.add(s)},errorsFor:function(t){var n=this.escapeCssMeta(this.idOrName(t)),i=e(t).attr("aria-describedby"),r="label[for='"+n+"'], label[for='"+n+"'] *";return i&&(r=r+", #"+this.escapeCssMeta(i).replace(/\s+/g,", #")),this.errors().filter(r)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,.\/:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,n){switch(n.nodeName.toLowerCase()){case"select":return e("option:selected",n).length;case"input":if(this.checkable(n))return this.findByName(n.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,n){return!!e(t,n.form).length},function:function(e,t){return e(t)}},optional:function(t){var n=this.elementValue(t);return!e.validator.methods.required.call(this,n,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,n){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),n&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.submitButton&&e("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!n&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,n){return n="string"==typeof n&&n||"remote",e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:n})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,n){t.constructor===String?this.classRuleSettings[t]=n:e.extend(this.classRuleSettings,t)},classRules:function(t){var n={},i=e(t).attr("class");return i&&e.each(i.split(" "),(function(){this in e.validator.classRuleSettings&&e.extend(n,e.validator.classRuleSettings[this])})),n},normalizeAttributeRule:function(e,t,n,i){/min|max|step/.test(n)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[n]=i:t===n&&"range"!==t&&(e[n]=!0)},attributeRules:function(t){var n,i,r={},o=e(t),a=t.getAttribute("type");for(n in e.validator.methods)"required"===n?(""===(i=t.getAttribute(n))&&(i=!0),i=!!i):i=o.attr(n),this.normalizeAttributeRule(r,a,n,i);return r.maxlength&&/-1|2147483647|524288/.test(r.maxlength)&&delete r.maxlength,r},dataRules:function(t){var n,i,r={},o=e(t),a=t.getAttribute("type");for(n in e.validator.methods)""===(i=o.data("rule"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase()))&&(i=!0),this.normalizeAttributeRule(r,a,n,i);return r},staticRules:function(t){var n={},i=e.data(t.form,"validator");return i.settings.rules&&(n=e.validator.normalizeRule(i.settings.rules[t.name])||{}),n},normalizeRules:function(t,n){return e.each(t,(function(i,r){if(!1!==r){if(r.param||r.depends){var o=!0;switch(typeof r.depends){case"string":o=!!e(r.depends,n.form).length;break;case"function":o=r.depends.call(n,n)}o?t[i]=void 0===r.param||r.param:(e.data(n.form,"validator").resetElements(e(n)),delete t[i])}}else delete t[i]})),e.each(t,(function(i,r){t[i]=e.isFunction(r)&&"normalizer"!==i?r(n):r})),e.each(["minlength","maxlength"],(function(){t[this]&&(t[this]=Number(t[this]))})),e.each(["rangelength","range"],(function(){var n;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(n=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(n[0]),Number(n[1])]))})),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var n={};e.each(t.split(/\s/),(function(){n[this]=!0})),t=n}return t},addMethod:function(t,n,i){e.validator.methods[t]=n,e.validator.messages[t]=void 0!==i?i:e.validator.messages[t],n.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,n,i){if(!this.depend(i,n))return"dependency-mismatch";if("select"===n.nodeName.toLowerCase()){var r=e(n).val();return r&&r.length>0}return this.checkable(n)?this.getLength(t,n)>0:null!=t&&t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i.test(e)},date:function(){var e=!1;return function(t,n){return e||(e=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(n)||!/Invalid|NaN/.test(new Date(t).toString())}}(),dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r>=i},maxlength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r<=i},rangelength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r>=i[0]&&r<=i[1]},min:function(e,t,n){return this.optional(t)||e>=n},max:function(e,t,n){return this.optional(t)||e<=n},range:function(e,t,n){return this.optional(t)||e>=n[0]&&e<=n[1]},step:function(t,n,i){var r,o=e(n).attr("type"),a="Step attribute on input type "+o+" is not supported.",s=new RegExp("\\b"+o+"\\b"),l=function(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0},u=function(e){return Math.round(e*Math.pow(10,r))},c=!0;if(o&&!s.test(["text","number","range"].join()))throw new Error(a);return r=l(i),(l(t)>r||u(t)%u(i)!=0)&&(c=!1),this.optional(n)||c},equalTo:function(t,n,i){var r=e(i);return this.settings.onfocusout&&r.not(".validate-equalTo-blur").length&&r.addClass("validate-equalTo-blur").on("blur.validate-equalTo",(function(){e(n).valid()})),t===r.val()},remote:function(t,n,i,r){if(this.optional(n))return"dependency-mismatch";r="string"==typeof r&&r||"remote";var o,a,s,l=this.previousValue(n,r);return this.settings.messages[n.name]||(this.settings.messages[n.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[n.name][r],this.settings.messages[n.name][r]=l.message,i="string"==typeof i&&{url:i}||i,s=e.param(e.extend({data:t},i.data)),l.old===s?l.valid:(l.old=s,o=this,this.startRequest(n),(a={})[n.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+n.name,dataType:"json",data:a,context:o.currentForm,success:function(e){var i,a,s,u=!0===e||"true"===e;o.settings.messages[n.name][r]=l.originalMessage,u?(s=o.formSubmitted,o.resetInternals(),o.toHide=o.errorsFor(n),o.formSubmitted=s,o.successList.push(n),o.invalid[n.name]=!1,o.showErrors()):(i={},a=e||o.defaultMessage(n,{method:r,parameters:t}),i[n.name]=l.message=a,o.invalid[n.name]=!0,o.showErrors(i)),l.valid=u,o.stopRequest(n,u)}},i)),"pending")}}});var n,i={};return e.ajaxPrefilter?e.ajaxPrefilter((function(e,t,n){var r=e.port;"abort"===e.mode&&(i[r]&&i[r].abort(),i[r]=n)})):(n=e.ajax,e.ajax=function(t){var r=("mode"in t?t:e.ajaxSettings).mode,o=("port"in t?t:e.ajaxSettings).port;return"abort"===r?(i[o]&&i[o].abort(),i[o]=n.apply(this,arguments),i[o]):n.apply(this,arguments)}),e})?i.apply(t,r):i)||(e.exports=o)},omkw:function(e,t,n){var i,r,o;r=[n("EVdn")],void 0===(o="function"==typeof(i=function(e){var t,n,i,r,o,a,s="Close",l="BeforeClose",u="MarkupParse",c="Open",d="Change",f="mfp",p=".mfp",h="mfp-ready",m="mfp-removing",v="mfp-prevent-close",g=function(){},y=!!window.jQuery,b=e(window),x=function(e,n){t.ev.on(f+e+p,n)},k=function(t,n,i,r){var o=document.createElement("div");return o.className="mfp-"+t,i&&(o.innerHTML=i),r?n&&n.appendChild(o):(o=e(o),n&&o.appendTo(n)),o},w=function(n,i){t.ev.triggerHandler(f+n,i),t.st.callbacks&&(n=n.charAt(0).toLowerCase()+n.slice(1),t.st.callbacks[n]&&t.st.callbacks[n].apply(t,e.isArray(i)?i:[i]))},T=function(n){return n===a&&t.currTemplate.closeBtn||(t.currTemplate.closeBtn=e(t.st.closeMarkup.replace("%title%",t.st.tClose)),a=n),t.currTemplate.closeBtn},S=function(){e.magnificPopup.instance||((t=new g).init(),e.magnificPopup.instance=t)};g.prototype={constructor:g,init:function(){var n=navigator.appVersion;t.isLowIE=t.isIE8=document.all&&!document.addEventListener,t.isAndroid=/android/gi.test(n),t.isIOS=/iphone|ipad|ipod/gi.test(n),t.supportsTransition=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1}(),t.probablyMobile=t.isAndroid||t.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),i=e(document),t.popupsCache={}},open:function(n){var r;if(!1===n.isObj){t.items=n.items.toArray(),t.index=0;var a,s=n.items;for(r=0;r<s.length;r++)if((a=s[r]).parsed&&(a=a.el[0]),a===n.el[0]){t.index=r;break}}else t.items=e.isArray(n.items)?n.items:[n.items],t.index=n.index||0;if(!t.isOpen){t.types=[],o="",n.mainEl&&n.mainEl.length?t.ev=n.mainEl.eq(0):t.ev=i,n.key?(t.popupsCache[n.key]||(t.popupsCache[n.key]={}),t.currTemplate=t.popupsCache[n.key]):t.currTemplate={},t.st=e.extend(!0,{},e.magnificPopup.defaults,n),t.fixedContentPos="auto"===t.st.fixedContentPos?!t.probablyMobile:t.st.fixedContentPos,t.st.modal&&(t.st.closeOnContentClick=!1,t.st.closeOnBgClick=!1,t.st.showCloseBtn=!1,t.st.enableEscapeKey=!1),t.bgOverlay||(t.bgOverlay=k("bg").on("click"+p,(function(){t.close()})),t.wrap=k("wrap").attr("tabindex",-1).on("click"+p,(function(e){t._checkIfClose(e.target)&&t.close()})),t.container=k("container",t.wrap)),t.contentContainer=k("content"),t.st.preloader&&(t.preloader=k("preloader",t.container,t.st.tLoading));var l=e.magnificPopup.modules;for(r=0;r<l.length;r++){var d=l[r];d=d.charAt(0).toUpperCase()+d.slice(1),t["init"+d].call(t)}w("BeforeOpen"),t.st.showCloseBtn&&(t.st.closeBtnInside?(x(u,(function(e,t,n,i){n.close_replaceWith=T(i.type)})),o+=" mfp-close-btn-in"):t.wrap.append(T())),t.st.alignTop&&(o+=" mfp-align-top"),t.fixedContentPos?t.wrap.css({overflow:t.st.overflowY,overflowX:"hidden",overflowY:t.st.overflowY}):t.wrap.css({top:b.scrollTop(),position:"absolute"}),(!1===t.st.fixedBgPos||"auto"===t.st.fixedBgPos&&!t.fixedContentPos)&&t.bgOverlay.css({height:i.height(),position:"absolute"}),t.st.enableEscapeKey&&i.on("keyup"+p,(function(e){27===e.keyCode&&t.close()})),b.on("resize"+p,(function(){t.updateSize()})),t.st.closeOnContentClick||(o+=" mfp-auto-cursor"),o&&t.wrap.addClass(o);var f=t.wH=b.height(),m={};if(t.fixedContentPos&&t._hasScrollBar(f)){var v=t._getScrollbarSize();v&&(m.marginRight=v)}t.fixedContentPos&&(t.isIE7?e("body, html").css("overflow","hidden"):m.overflow="hidden");var g=t.st.mainClass;return t.isIE7&&(g+=" mfp-ie7"),g&&t._addClassToMFP(g),t.updateItemHTML(),w("BuildControls"),e("html").css(m),t.bgOverlay.add(t.wrap).prependTo(t.st.prependTo||e(document.body)),t._lastFocusedEl=document.activeElement,setTimeout((function(){t.content?(t._addClassToMFP(h),t._setFocus()):t.bgOverlay.addClass(h),i.on("focusin"+p,t._onFocusIn)}),16),t.isOpen=!0,t.updateSize(f),w(c),n}t.updateItemHTML()},close:function(){t.isOpen&&(w(l),t.isOpen=!1,t.st.removalDelay&&!t.isLowIE&&t.supportsTransition?(t._addClassToMFP(m),setTimeout((function(){t._close()}),t.st.removalDelay)):t._close())},_close:function(){w(s);var n=m+" "+h+" ";if(t.bgOverlay.detach(),t.wrap.detach(),t.container.empty(),t.st.mainClass&&(n+=t.st.mainClass+" "),t._removeClassFromMFP(n),t.fixedContentPos){var r={marginRight:""};t.isIE7?e("body, html").css("overflow",""):r.overflow="",e("html").css(r)}i.off("keyup.mfp focusin"+p),t.ev.off(p),t.wrap.attr("class","mfp-wrap").removeAttr("style"),t.bgOverlay.attr("class","mfp-bg"),t.container.attr("class","mfp-container"),!t.st.showCloseBtn||t.st.closeBtnInside&&!0!==t.currTemplate[t.currItem.type]||t.currTemplate.closeBtn&&t.currTemplate.closeBtn.detach(),t.st.autoFocusLast&&t._lastFocusedEl&&e(t._lastFocusedEl).focus(),t.currItem=null,t.content=null,t.currTemplate=null,t.prevHeight=0,w("AfterClose")},updateSize:function(e){if(t.isIOS){var n=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*n;t.wrap.css("height",i),t.wH=i}else t.wH=e||b.height();t.fixedContentPos||t.wrap.css("height",t.wH),w("Resize")},updateItemHTML:function(){var n=t.items[t.index];t.contentContainer.detach(),t.content&&t.content.detach(),n.parsed||(n=t.parseEl(t.index));var i=n.type;if(w("BeforeChange",[t.currItem?t.currItem.type:"",i]),t.currItem=n,!t.currTemplate[i]){var o=!!t.st[i]&&t.st[i].markup;w("FirstMarkupParse",o),t.currTemplate[i]=!o||e(o)}r&&r!==n.type&&t.container.removeClass("mfp-"+r+"-holder");var a=t["get"+i.charAt(0).toUpperCase()+i.slice(1)](n,t.currTemplate[i]);t.appendContent(a,i),n.preloaded=!0,w(d,n),r=n.type,t.container.prepend(t.contentContainer),w("AfterChange")},appendContent:function(e,n){t.content=e,e?t.st.showCloseBtn&&t.st.closeBtnInside&&!0===t.currTemplate[n]?t.content.find(".mfp-close").length||t.content.append(T()):t.content=e:t.content="",w("BeforeAppend"),t.container.addClass("mfp-"+n+"-holder"),t.contentContainer.append(t.content)},parseEl:function(n){var i,r=t.items[n];if(r.tagName?r={el:e(r)}:(i=r.type,r={data:r,src:r.src}),r.el){for(var o=t.types,a=0;a<o.length;a++)if(r.el.hasClass("mfp-"+o[a])){i=o[a];break}r.src=r.el.attr("data-mfp-src"),r.src||(r.src=r.el.attr("href"))}return r.type=i||t.st.type||"inline",r.index=n,r.parsed=!0,t.items[n]=r,w("ElementParse",r),t.items[n]},addGroup:function(e,n){var i=function(i){i.mfpEl=this,t._openClick(i,e,n)};n||(n={});var r="click.magnificPopup";n.mainEl=e,n.items?(n.isObj=!0,e.off(r).on(r,i)):(n.isObj=!1,n.delegate?e.off(r).on(r,n.delegate,i):(n.items=e,e.off(r).on(r,i)))},_openClick:function(n,i,r){if((void 0!==r.midClick?r.midClick:e.magnificPopup.defaults.midClick)||!(2===n.which||n.ctrlKey||n.metaKey||n.altKey||n.shiftKey)){var o=void 0!==r.disableOn?r.disableOn:e.magnificPopup.defaults.disableOn;if(o)if(e.isFunction(o)){if(!o.call(t))return!0}else if(b.width()<o)return!0;n.type&&(n.preventDefault(),t.isOpen&&n.stopPropagation()),r.el=e(n.mfpEl),r.delegate&&(r.items=i.find(r.delegate)),t.open(r)}},updateStatus:function(e,i){if(t.preloader){n!==e&&t.container.removeClass("mfp-s-"+n),i||"loading"!==e||(i=t.st.tLoading);var r={status:e,text:i};w("UpdateStatus",r),e=r.status,i=r.text,t.preloader.html(i),t.preloader.find("a").on("click",(function(e){e.stopImmediatePropagation()})),t.container.addClass("mfp-s-"+e),n=e}},_checkIfClose:function(n){if(!e(n).hasClass(v)){var i=t.st.closeOnContentClick,r=t.st.closeOnBgClick;if(i&&r)return!0;if(!t.content||e(n).hasClass("mfp-close")||t.preloader&&n===t.preloader[0])return!0;if(n===t.content[0]||e.contains(t.content[0],n)){if(i)return!0}else if(r&&e.contains(document,n))return!0;return!1}},_addClassToMFP:function(e){t.bgOverlay.addClass(e),t.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),t.wrap.removeClass(e)},_hasScrollBar:function(e){return(t.isIE7?i.height():document.body.scrollHeight)>(e||b.height())},_setFocus:function(){(t.st.focus?t.content.find(t.st.focus).eq(0):t.wrap).focus()},_onFocusIn:function(n){return n.target===t.wrap[0]||e.contains(t.wrap[0],n.target)?void 0:(t._setFocus(),!1)},_parseMarkup:function(t,n,i){var r;i.data&&(n=e.extend(i.data,n)),w(u,[t,n,i]),e.each(n,(function(n,i){if(void 0===i||!1===i)return!0;if((r=n.split("_")).length>1){var o=t.find(p+"-"+r[0]);if(o.length>0){var a=r[1];"replaceWith"===a?o[0]!==i[0]&&o.replaceWith(i):"img"===a?o.is("img")?o.attr("src",i):o.replaceWith(e("<img>").attr("src",i).attr("class",o.attr("class"))):o.attr(r[1],i)}}else t.find(p+"-"+n).html(i)}))},_getScrollbarSize:function(){if(void 0===t.scrollbarSize){var e=document.createElement("div");e.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),t.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return t.scrollbarSize}},e.magnificPopup={instance:null,proto:g.prototype,modules:[],open:function(t,n){return S(),(t=t?e.extend(!0,{},t):{}).isObj=!0,t.index=n||0,this.instance.open(t)},close:function(){return e.magnificPopup.instance&&e.magnificPopup.instance.close()},registerModule:function(t,n){n.options&&(e.magnificPopup.defaults[t]=n.options),e.extend(this.proto,n.proto),this.modules.push(t)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},e.fn.magnificPopup=function(n){S();var i=e(this);if("string"==typeof n)if("open"===n){var r,o=y?i.data("magnificPopup"):i[0].magnificPopup,a=parseInt(arguments[1],10)||0;o.items?r=o.items[a]:(r=i,o.delegate&&(r=r.find(o.delegate)),r=r.eq(a)),t._openClick({mfpEl:r},i,o)}else t.isOpen&&t[n].apply(t,Array.prototype.slice.call(arguments,1));else n=e.extend(!0,{},n),y?i.data("magnificPopup",n):i[0].magnificPopup=n,t.addGroup(i,n);return i};var C,E,P,A="inline",_=function(){P&&(E.after(P.addClass(C)).detach(),P=null)};e.magnificPopup.registerModule(A,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){t.types.push(A),x(s+"."+A,(function(){_()}))},getInline:function(n,i){if(_(),n.src){var r=t.st.inline,o=e(n.src);if(o.length){var a=o[0].parentNode;a&&a.tagName&&(E||(C=r.hiddenClass,E=k(C),C="mfp-"+C),P=o.after(E).detach().removeClass(C)),t.updateStatus("ready")}else t.updateStatus("error",r.tNotFound),o=e("<div>");return n.inlineElement=o,o}return t.updateStatus("ready"),t._parseMarkup(i,{},n),i}}});var j,O="ajax",L=function(){j&&e(document.body).removeClass(j)},z=function(){L(),t.req&&t.req.abort()};e.magnificPopup.registerModule(O,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){t.types.push(O),j=t.st.ajax.cursor,x(s+"."+O,z),x("BeforeChange."+O,z)},getAjax:function(n){j&&e(document.body).addClass(j),t.updateStatus("loading");var i=e.extend({url:n.src,success:function(i,r,o){var a={data:i,xhr:o};w("ParseAjax",a),t.appendContent(e(a.data),O),n.finished=!0,L(),t._setFocus(),setTimeout((function(){t.wrap.addClass(h)}),16),t.updateStatus("ready"),w("AjaxContentAdded")},error:function(){L(),n.finished=n.loadError=!0,t.updateStatus("error",t.st.ajax.tError.replace("%url%",n.src))}},t.st.ajax.settings);return t.req=e.ajax(i),""}}});var M,I,D=function(n){if(n.data&&void 0!==n.data.title)return n.data.title;var i=t.st.image.titleSrc;if(i){if(e.isFunction(i))return i.call(t,n);if(n.el)return n.el.attr(i)||""}return""};e.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var n=t.st.image,i=".image";t.types.push("image"),x(c+i,(function(){"image"===t.currItem.type&&n.cursor&&e(document.body).addClass(n.cursor)})),x(s+i,(function(){n.cursor&&e(document.body).removeClass(n.cursor),b.off("resize"+p)})),x("Resize"+i,t.resizeImage),t.isLowIE&&x("AfterChange",t.resizeImage)},resizeImage:function(){var e=t.currItem;if(e&&e.img&&t.st.image.verticalFit){var n=0;t.isLowIE&&(n=parseInt(e.img.css("padding-top"),10)+parseInt(e.img.css("padding-bottom"),10)),e.img.css("max-height",t.wH-n)}},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,M&&clearInterval(M),e.isCheckingImgSize=!1,w("ImageHasSize",e),e.imgHidden&&(t.content&&t.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(e){var n=0,i=e.img[0],r=function(o){M&&clearInterval(M),M=setInterval((function(){return i.naturalWidth>0?void t._onImageHasSize(e):(n>200&&clearInterval(M),void(3==++n?r(10):40===n?r(50):100===n&&r(500)))}),o)};r(1)},getImage:function(n,i){var r=0,o=function(){n&&(n.img[0].complete?(n.img.off(".mfploader"),n===t.currItem&&(t._onImageHasSize(n),t.updateStatus("ready")),n.hasSize=!0,n.loaded=!0,w("ImageLoadComplete")):200>++r?setTimeout(o,100):a())},a=function(){n&&(n.img.off(".mfploader"),n===t.currItem&&(t._onImageHasSize(n),t.updateStatus("error",s.tError.replace("%url%",n.src))),n.hasSize=!0,n.loaded=!0,n.loadError=!0)},s=t.st.image,l=i.find(".mfp-img");if(l.length){var u=document.createElement("img");u.className="mfp-img",n.el&&n.el.find("img").length&&(u.alt=n.el.find("img").attr("alt")),n.img=e(u).on("load.mfploader",o).on("error.mfploader",a),u.src=n.src,l.is("img")&&(n.img=n.img.clone()),(u=n.img[0]).naturalWidth>0?n.hasSize=!0:u.width||(n.hasSize=!1)}return t._parseMarkup(i,{title:D(n),img_replaceWith:n.img},n),t.resizeImage(),n.hasSize?(M&&clearInterval(M),n.loadError?(i.addClass("mfp-loading"),t.updateStatus("error",s.tError.replace("%url%",n.src))):(i.removeClass("mfp-loading"),t.updateStatus("ready")),i):(t.updateStatus("loading"),n.loading=!0,n.hasSize||(n.imgHidden=!0,i.addClass("mfp-loading"),t.findImageSize(n)),i)}}}),e.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,n=t.st.zoom,i=".zoom";if(n.enabled&&t.supportsTransition){var r,o,a=n.duration,u=function(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+n.duration/1e3+"s "+n.easing,r={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return r["-webkit-"+o]=r["-moz-"+o]=r["-o-"+o]=r[o]=i,t.css(r),t},c=function(){t.content.css("visibility","visible")};x("BuildControls"+i,(function(){if(t._allowZoom()){if(clearTimeout(r),t.content.css("visibility","hidden"),!(e=t._getItemToZoom()))return void c();(o=u(e)).css(t._getOffset()),t.wrap.append(o),r=setTimeout((function(){o.css(t._getOffset(!0)),r=setTimeout((function(){c(),setTimeout((function(){o.remove(),e=o=null,w("ZoomAnimationEnded")}),16)}),a)}),16)}})),x(l+i,(function(){if(t._allowZoom()){if(clearTimeout(r),t.st.removalDelay=a,!e){if(!(e=t._getItemToZoom()))return;o=u(e)}o.css(t._getOffset(!0)),t.wrap.append(o),t.content.css("visibility","hidden"),setTimeout((function(){o.css(t._getOffset())}),16)}})),x(s+i,(function(){t._allowZoom()&&(c(),o&&o.remove(),e=null)}))}},_allowZoom:function(){return"image"===t.currItem.type},_getItemToZoom:function(){return!!t.currItem.hasSize&&t.currItem.img},_getOffset:function(n){var i,r=(i=n?t.currItem.img:t.st.zoom.opener(t.currItem.el||t.currItem)).offset(),o=parseInt(i.css("padding-top"),10),a=parseInt(i.css("padding-bottom"),10);r.top-=e(window).scrollTop()-o;var s={width:i.width(),height:(y?i.innerHeight():i[0].offsetHeight)-a-o};return void 0===I&&(I=void 0!==document.createElement("p").style.MozTransform),I?s["-moz-transform"]=s.transform="translate("+r.left+"px,"+r.top+"px)":(s.left=r.left,s.top=r.top),s}}});var N="iframe",q=function(e){if(t.currTemplate[N]){var n=t.currTemplate[N].find("iframe");n.length&&(e||(n[0].src="//about:blank"),t.isIE8&&n.css("display",e?"block":"none"))}};e.magnificPopup.registerModule(N,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){t.types.push(N),x("BeforeChange",(function(e,t,n){t!==n&&(t===N?q():n===N&&q(!0))})),x(s+"."+N,(function(){q()}))},getIframe:function(n,i){var r=n.src,o=t.st.iframe;e.each(o.patterns,(function(){return r.indexOf(this.index)>-1?(this.id&&(r="string"==typeof this.id?r.substr(r.lastIndexOf(this.id)+this.id.length,r.length):this.id.call(this,r)),r=this.src.replace("%id%",r),!1):void 0}));var a={};return o.srcAction&&(a[o.srcAction]=r),t._parseMarkup(i,a,n),t.updateStatus("ready"),i}}});var $=function(e){var n=t.items.length;return e>n-1?e-n:0>e?n+e:e},R=function(e,t,n){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,n)};e.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var n=t.st.gallery,r=".mfp-gallery";return t.direction=!0,!(!n||!n.enabled)&&(o+=" mfp-gallery",x(c+r,(function(){n.navigateByImgClick&&t.wrap.on("click"+r,".mfp-img",(function(){return t.items.length>1?(t.next(),!1):void 0})),i.on("keydown"+r,(function(e){37===e.keyCode?t.prev():39===e.keyCode&&t.next()}))})),x("UpdateStatus"+r,(function(e,n){n.text&&(n.text=R(n.text,t.currItem.index,t.items.length))})),x(u+r,(function(e,i,r,o){var a=t.items.length;r.counter=a>1?R(n.tCounter,o.index,a):""})),x("BuildControls"+r,(function(){if(t.items.length>1&&n.arrows&&!t.arrowLeft){var i=n.arrowMarkup,r=t.arrowLeft=e(i.replace(/%title%/gi,n.tPrev).replace(/%dir%/gi,"left")).addClass(v),o=t.arrowRight=e(i.replace(/%title%/gi,n.tNext).replace(/%dir%/gi,"right")).addClass(v);r.click((function(){t.prev()})),o.click((function(){t.next()})),t.container.append(r.add(o))}})),x(d+r,(function(){t._preloadTimeout&&clearTimeout(t._preloadTimeout),t._preloadTimeout=setTimeout((function(){t.preloadNearbyImages(),t._preloadTimeout=null}),16)})),void x(s+r,(function(){i.off(r),t.wrap.off("click"+r),t.arrowRight=t.arrowLeft=null})))},next:function(){t.direction=!0,t.index=$(t.index+1),t.updateItemHTML()},prev:function(){t.direction=!1,t.index=$(t.index-1),t.updateItemHTML()},goTo:function(e){t.direction=e>=t.index,t.index=e,t.updateItemHTML()},preloadNearbyImages:function(){var e,n=t.st.gallery.preload,i=Math.min(n[0],t.items.length),r=Math.min(n[1],t.items.length);for(e=1;e<=(t.direction?r:i);e++)t._preloadItem(t.index+e);for(e=1;e<=(t.direction?i:r);e++)t._preloadItem(t.index-e)},_preloadItem:function(n){if(n=$(n),!t.items[n].preloaded){var i=t.items[n];i.parsed||(i=t.parseEl(n)),w("LazyLoad",i),"image"===i.type&&(i.img=e('<img class="mfp-img" />').on("load.mfploader",(function(){i.hasSize=!0})).on("error.mfploader",(function(){i.hasSize=!0,i.loadError=!0,w("LazyLoadError",i)})).attr("src",i.src)),i.preloaded=!0}}}});var H="retina";e.magnificPopup.registerModule(H,{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,(function(e){return"@2x"+e}))},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var e=t.st.retina,n=e.ratio;(n=isNaN(n)?n():n)>1&&(x("ImageHasSize."+H,(function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/n,width:"100%"})})),x("ElementParse."+H,(function(t,i){i.src=e.replaceSrc(i,n)})))}}}}),S()})?i.apply(t,r):i)||(e.exports=o)},pU5O:function(e,t,n){!function(t,n){"use strict";function i(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}function r(e){return parseFloat(e)||0}function o(e){for(var t=0;e;)t+=e.offsetTop,e=e.offsetParent;return t}function a(){function e(){t.pageXOffset!=f.left?(f.top=t.pageYOffset,f.left=t.pageXOffset,m.refreshAll()):t.pageYOffset!=f.top&&(f.top=t.pageYOffset,f.left=t.pageXOffset,p.forEach((function(e){return e._recalcPosition()})))}function i(){r=setInterval((function(){p.forEach((function(e){return e._fastCheck()}))}),500)}if(!c){c=!0,e(),t.addEventListener("scroll",e),t.addEventListener("resize",m.refreshAll),t.addEventListener("orientationchange",m.refreshAll);var r=void 0,o=void 0,a=void 0;"hidden"in n?(o="hidden",a="visibilitychange"):"webkitHidden"in n&&(o="webkitHidden",a="webkitvisibilitychange"),a?(n[o]||i(),n.addEventListener(a,(function(){n[o]?clearInterval(r):i()}))):i()}}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=!1,u=void 0!==t;u&&t.getComputedStyle?function(){var e=n.createElement("div");["","-webkit-","-moz-","-ms-"].some((function(t){try{e.style.position=t+"sticky"}catch(e){}return""!=e.style.position}))&&(l=!0)}():l=!0;var c=!1,d="undefined"!=typeof ShadowRoot,f={top:null,left:null},p=[],h=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t instanceof HTMLElement))throw new Error("First argument must be HTMLElement");if(p.some((function(e){return e._node===t})))throw new Error("Stickyfill is already applied to this node");this._node=t,this._stickyMode=null,this._active=!1,p.push(this),this.refresh()}return s(e,[{key:"refresh",value:function(){if(!l&&!this._removed){this._active&&this._deactivate();var e=this._node,a=getComputedStyle(e),s={position:a.position,top:a.top,display:a.display,marginTop:a.marginTop,marginBottom:a.marginBottom,marginLeft:a.marginLeft,marginRight:a.marginRight,cssFloat:a.cssFloat};if(!isNaN(parseFloat(s.top))&&"table-cell"!=s.display&&"none"!=s.display){this._active=!0;var u=e.style.position;"sticky"!=a.position&&"-webkit-sticky"!=a.position||(e.style.position="static");var c=e.parentNode,f=d&&c instanceof ShadowRoot?c.host:c,p=e.getBoundingClientRect(),h=f.getBoundingClientRect(),m=getComputedStyle(f);this._parent={node:f,styles:{position:f.style.position},offsetHeight:f.offsetHeight},this._offsetToWindow={left:p.left,right:n.documentElement.clientWidth-p.right},this._offsetToParent={top:p.top-h.top-r(m.borderTopWidth),left:p.left-h.left-r(m.borderLeftWidth),right:-p.right+h.right-r(m.borderRightWidth)},this._styles={position:u,top:e.style.top,bottom:e.style.bottom,left:e.style.left,right:e.style.right,width:e.style.width,marginTop:e.style.marginTop,marginLeft:e.style.marginLeft,marginRight:e.style.marginRight};var v=r(s.top);this._limits={start:p.top+t.pageYOffset-v,end:h.top+t.pageYOffset+f.offsetHeight-r(m.borderBottomWidth)-e.offsetHeight-v-r(s.marginBottom)};var g=m.position;"absolute"!=g&&"relative"!=g&&(f.style.position="relative"),this._recalcPosition();var y=this._clone={};y.node=n.createElement("div"),i(y.node.style,{width:p.right-p.left+"px",height:p.bottom-p.top+"px",marginTop:s.marginTop,marginBottom:s.marginBottom,marginLeft:s.marginLeft,marginRight:s.marginRight,cssFloat:s.cssFloat,padding:0,border:0,borderSpacing:0,fontSize:"1em",position:"static"}),c.insertBefore(y.node,e),y.docOffsetTop=o(y.node)}}}},{key:"_recalcPosition",value:function(){if(this._active&&!this._removed){var e=f.top<=this._limits.start?"start":f.top>=this._limits.end?"end":"middle";if(this._stickyMode!=e){switch(e){case"start":i(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:this._offsetToParent.top+"px",bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"middle":i(this._node.style,{position:"fixed",left:this._offsetToWindow.left+"px",right:this._offsetToWindow.right+"px",top:this._styles.top,bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"end":i(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:"auto",bottom:0,width:"auto",marginLeft:0,marginRight:0})}this._stickyMode=e}}}},{key:"_fastCheck",value:function(){this._active&&!this._removed&&(Math.abs(o(this._clone.node)-this._clone.docOffsetTop)>1||Math.abs(this._parent.node.offsetHeight-this._parent.offsetHeight)>1)&&this.refresh()}},{key:"_deactivate",value:function(){var e=this;this._active&&!this._removed&&(this._clone.node.parentNode.removeChild(this._clone.node),delete this._clone,i(this._node.style,this._styles),delete this._styles,p.some((function(t){return t!==e&&t._parent&&t._parent.node===e._parent.node}))||i(this._parent.node.style,this._parent.styles),delete this._parent,this._stickyMode=null,this._active=!1,delete this._offsetToWindow,delete this._offsetToParent,delete this._limits)}},{key:"remove",value:function(){var e=this;this._deactivate(),p.some((function(t,n){if(t._node===e._node)return p.splice(n,1),!0})),this._removed=!0}}]),e}(),m={stickies:p,Sticky:h,forceSticky:function(){l=!1,a(),this.refreshAll()},addOne:function(e){if(!(e instanceof HTMLElement)){if(!e.length||!e[0])return;e=e[0]}for(var t=0;t<p.length;t++)if(p[t]._node===e)return p[t];return new h(e)},add:function(e){if(e instanceof HTMLElement&&(e=[e]),e.length){for(var t=[],n=function(n){var i=e[n];return i instanceof HTMLElement?p.some((function(e){if(e._node===i)return t.push(e),!0}))?"continue":void t.push(new h(i)):(t.push(void 0),"continue")},i=0;i<e.length;i++)n(i);return t}},refreshAll:function(){p.forEach((function(e){return e.refresh()}))},removeOne:function(e){if(!(e instanceof HTMLElement)){if(!e.length||!e[0])return;e=e[0]}p.some((function(t){if(t._node===e)return t.remove(),!0}))},remove:function(e){if(e instanceof HTMLElement&&(e=[e]),e.length)for(var t=function(t){var n=e[t];p.some((function(e){if(e._node===n)return e.remove(),!0}))},n=0;n<e.length;n++)t(n)},removeAll:function(){for(;p.length;)p[0].remove()}};l||a(),e.exports?e.exports=m:u&&(t.Stickyfill=m)}(window,document)},pVyz:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Αυτό το πεδίο είναι υποχρεωτικό.",remote:"Παρακαλώ διορθώστε αυτό το πεδίο.",email:"Παρακαλώ εισάγετε μια έγκυρη διεύθυνση email.",url:"Παρακαλώ εισάγετε ένα έγκυρο URL.",date:"Παρακαλώ εισάγετε μια έγκυρη ημερομηνία.",dateISO:"Παρακαλώ εισάγετε μια έγκυρη ημερομηνία (ISO).",number:"Παρακαλώ εισάγετε έναν έγκυρο αριθμό.",digits:"Παρακαλώ εισάγετε μόνο αριθμητικά ψηφία.",creditcard:"Παρακαλώ εισάγετε έναν έγκυρο αριθμό πιστωτικής κάρτας.",equalTo:"Παρακαλώ εισάγετε την ίδια τιμή ξανά.",extension:"Παρακαλώ εισάγετε μια τιμή με έγκυρη επέκταση αρχείου.",maxlength:e.validator.format("Παρακαλώ εισάγετε μέχρι και {0} χαρακτήρες."),minlength:e.validator.format("Παρακαλώ εισάγετε τουλάχιστον {0} χαρακτήρες."),rangelength:e.validator.format("Παρακαλώ εισάγετε μια τιμή με μήκος μεταξύ {0} και {1} χαρακτήρων."),range:e.validator.format("Παρακαλώ εισάγετε μια τιμή μεταξύ {0} και {1}."),max:e.validator.format("Παρακαλώ εισάγετε μια τιμή μικρότερη ή ίση του {0}."),min:e.validator.format("Παρακαλώ εισάγετε μια τιμή μεγαλύτερη ή ίση του {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},pjNj:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"필수 항목입니다.",remote:"항목을 수정하세요.",email:"유효하지 않은 E-Mail주소입니다.",url:"유효하지 않은 URL입니다.",date:"올바른 날짜를 입력하세요.",dateISO:"올바른 날짜(ISO)를 입력하세요.",number:"유효한 숫자가 아닙니다.",digits:"숫자만 입력 가능합니다.",creditcard:"신용카드 번호가 바르지 않습니다.",equalTo:"같은 값을 다시 입력하세요.",extension:"올바른 확장자가 아닙니다.",maxlength:e.validator.format("{0}자를 넘을 수 없습니다. "),minlength:e.validator.format("{0}자 이상 입력하세요."),rangelength:e.validator.format("문자 길이가 {0} 에서 {1} 사이의 값을 입력하세요."),range:e.validator.format("{0} 에서 {1} 사이의 값을 입력하세요."),max:e.validator.format("{0} 이하의 값을 입력하세요."),min:e.validator.format("{0} 이상의 값을 입력하세요.")}),e})?i.apply(t,r):i)||(e.exports=o)},pv0J:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"โปรดระบุ",remote:"โปรดแก้ไขให้ถูกต้อง",email:"โปรดระบุที่อยู่อีเมล์ที่ถูกต้อง",url:"โปรดระบุ URL ที่ถูกต้อง",date:"โปรดระบุวันที่ ที่ถูกต้อง",dateISO:"โปรดระบุวันที่ ที่ถูกต้อง (ระบบ ISO).",number:"โปรดระบุทศนิยมที่ถูกต้อง",digits:"โปรดระบุจำนวนเต็มที่ถูกต้อง",creditcard:"โปรดระบุรหัสบัตรเครดิตที่ถูกต้อง",equalTo:"โปรดระบุค่าเดิมอีกครั้ง",extension:"โปรดระบุค่าที่มีส่วนขยายที่ถูกต้อง",maxlength:e.validator.format("โปรดอย่าระบุค่าที่ยาวกว่า {0} อักขระ"),minlength:e.validator.format("โปรดอย่าระบุค่าที่สั้นกว่า {0} อักขระ"),rangelength:e.validator.format("โปรดอย่าระบุค่าความยาวระหว่าง {0} ถึง {1} อักขระ"),range:e.validator.format("โปรดระบุค่าระหว่าง {0} และ {1}"),max:e.validator.format("โปรดระบุค่าน้อยกว่าหรือเท่ากับ {0}"),min:e.validator.format("โปรดระบุค่ามากกว่าหรือเท่ากับ {0}")}),e})?i.apply(t,r):i)||(e.exports=o)},pyCd:function(e,t){},"qb+E":function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Polje je obavezno.",remote:"Sredite ovo polje.",email:"Unesite ispravnu e-mail adresu",url:"Unesite ispravan URL.",date:"Unesite ispravan datum.",dateISO:"Unesite ispravan datum (ISO).",number:"Unesite ispravan broj.",digits:"Unesite samo cifre.",creditcard:"Unesite ispravan broj kreditne kartice.",equalTo:"Unesite istu vrednost ponovo.",extension:"Unesite vrednost sa odgovarajućom ekstenzijom.",maxlength:e.validator.format("Unesite manje od {0} karaktera."),minlength:e.validator.format("Unesite barem {0} karaktera."),rangelength:e.validator.format("Unesite vrednost dugačku između {0} i {1} karaktera."),range:e.validator.format("Unesite vrednost između {0} i {1}."),max:e.validator.format("Unesite vrednost manju ili jednaku {0}."),min:e.validator.format("Unesite vrednost veću ili jednaku {0}."),step:e.validator.format("Unesite vrednost koja je umnožak broja {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},qxlH:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Este campo &eacute; requerido.",remote:"Por favor, corrija este campo.",email:"Por favor, forne&ccedil;a um endere&ccedil;o de email v&aacute;lido.",url:"Por favor, forne&ccedil;a uma URL v&aacute;lida.",date:"Por favor, forne&ccedil;a uma data v&aacute;lida.",dateISO:"Por favor, forne&ccedil;a uma data v&aacute;lida (ISO).",number:"Por favor, forne&ccedil;a um n&uacute;mero v&aacute;lido.",digits:"Por favor, forne&ccedil;a somente d&iacute;gitos.",creditcard:"Por favor, forne&ccedil;a um cart&atilde;o de cr&eacute;dito v&aacute;lido.",equalTo:"Por favor, forne&ccedil;a o mesmo valor novamente.",maxlength:e.validator.format("Por favor, forne&ccedil;a n&atilde;o mais que {0} caracteres."),minlength:e.validator.format("Por favor, forne&ccedil;a ao menos {0} caracteres."),rangelength:e.validator.format("Por favor, forne&ccedil;a um valor entre {0} e {1} caracteres de comprimento."),range:e.validator.format("Por favor, forne&ccedil;a um valor entre {0} e {1}."),max:e.validator.format("Por favor, forne&ccedil;a um valor menor ou igual a {0}."),min:e.validator.format("Por favor, forne&ccedil;a um valor maior ou igual a {0}."),step:e.validator.format("Por favor, forne&ccedil;a um valor m&uacute;ltiplo de {0}."),maxWords:e.validator.format("Por favor, forne&ccedil;a com {0} palavras ou menos."),minWords:e.validator.format("Por favor, forne&ccedil;a pelo menos {0} palavras."),rangeWords:e.validator.format("Por favor, forne&ccedil;a entre {0} e {1} palavras."),accept:"Por favor, forne&ccedil;a um tipo v&aacute;lido.",alphanumeric:"Por favor, forne&ccedil;a somente com letras, n&uacute;meros e sublinhados.",bankaccountNL:"Por favor, forne&ccedil;a com um n&uacute;mero de conta banc&aacute;ria v&aacute;lida.",bankorgiroaccountNL:"Por favor, forne&ccedil;a um banco v&aacute;lido ou n&uacute;mero de conta.",bic:"Por favor, forne&ccedil;a um c&oacute;digo BIC v&aacute;lido.",cifES:"Por favor, forne&ccedil;a um c&oacute;digo CIF v&aacute;lido.",creditcardtypes:"Por favor, forne&ccedil;a um n&uacute;mero de cart&atilde;o de cr&eacute;dito v&aacute;lido.",currency:"Por favor, forne&ccedil;a uma moeda v&aacute;lida.",dateFA:"Por favor, forne&ccedil;a uma data correta.",dateITA:"Por favor, forne&ccedil;a uma data correta.",dateNL:"Por favor, forne&ccedil;a uma data correta.",extension:"Por favor, forne&ccedil;a um valor com uma extens&atilde;o v&aacute;lida.",giroaccountNL:"Por favor, forne&ccedil;a um n&uacute;mero de conta corrente v&aacute;lido.",iban:"Por favor, forne&ccedil;a um c&oacute;digo IBAN v&aacute;lido.",integer:"Por favor, forne&ccedil;a um n&uacute;mero n&atilde;o decimal.",ipv4:"Por favor, forne&ccedil;a um IPv4 v&aacute;lido.",ipv6:"Por favor, forne&ccedil;a um IPv6 v&aacute;lido.",lettersonly:"Por favor, forne&ccedil;a apenas com letras.",letterswithbasicpunc:"Por favor, forne&ccedil;a apenas letras ou pontua&ccedil;ões.",mobileNL:"Por favor, fornece&ccedil;a um n&uacute;mero v&aacute;lido de telefone.",mobileUK:"Por favor, fornece&ccedil;a um n&uacute;mero v&aacute;lido de telefone.",nieES:"Por favor, forne&ccedil;a um NIE v&aacute;lido.",nifES:"Por favor, forne&ccedil;a um NIF v&aacute;lido.",nowhitespace:"Por favor, n&atilde;o utilize espa&ccedil;os em branco.",pattern:"O formato fornecido &eacute; inv&aacute;lido.",phoneNL:"Por favor, forne&ccedil;a um n&uacute;mero de telefone v&aacute;lido.",phoneUK:"Por favor, forne&ccedil;a um n&uacute;mero de telefone v&aacute;lido.",phoneUS:"Por favor, forne&ccedil;a um n&uacute;mero de telefone v&aacute;lido.",phonesUK:"Por favor, forne&ccedil;a um n&uacute;mero de telefone v&aacute;lido.",postalCodeCA:"Por favor, forne&ccedil;a um n&uacute;mero de c&oacute;digo postal v&aacute;lido.",postalcodeIT:"Por favor, forne&ccedil;a um n&uacute;mero de c&oacute;digo postal v&aacute;lido.",postalcodeNL:"Por favor, forne&ccedil;a um n&uacute;mero de c&oacute;digo postal v&aacute;lido.",postcodeUK:"Por favor, forne&ccedil;a um n&uacute;mero de c&oacute;digo postal v&aacute;lido.",postalcodeBR:"Por favor, forne&ccedil;a um CEP v&aacute;lido.",require_from_group:e.validator.format("Por favor, forne&ccedil;a pelo menos {0} destes campos."),skip_or_fill_minimum:e.validator.format("Por favor, optar entre ignorar esses campos ou preencher pelo menos {0} deles."),stateUS:"Por favor, forne&ccedil;a um estado v&aacute;lido.",strippedminlength:e.validator.format("Por favor, forne&ccedil;a pelo menos {0} caracteres."),time:"Por favor, forne&ccedil;a um hor&aacute;rio v&aacute;lido, no intervado de 00:00 a 23:59.",time12h:"Por favor, forne&ccedil;a um hor&aacute;rio v&aacute;lido, no intervado de 01:00 a 12:59 am/pm.",url2:"Por favor, forne&ccedil;a uma URL v&aacute;lida.",vinUS:"O n&uacute;mero de identifica&ccedil;&atilde;o de ve&iacute;culo informado (VIN) &eacute; inv&aacute;lido.",zipcodeUS:"Por favor, forne&ccedil;a um c&oacute;digo postal americano v&aacute;lido.",ziprange:"O c&oacute;digo postal deve estar entre 902xx-xxxx e 905xx-xxxx",cpfBR:"Por favor, forne&ccedil;a um CPF v&aacute;lido.",nisBR:"Por favor, forne&ccedil;a um NIS/PIS v&aacute;lido",cnhBR:"Por favor, forne&ccedil;a um CNH v&aacute;lido.",cnpjBR:"Por favor, forne&ccedil;a um CNPJ v&aacute;lido."}),e})?i.apply(t,r):i)||(e.exports=o)},rIKr:function(e,t,n){var i,r,o;r=[n("EVdn")],void 0===(o="function"==typeof(i=function(e){e.extend(e.fn,{validate:function(t){if(this.length){var n=e.data(this[0],"validator");return n||(this.attr("novalidate","novalidate"),n=new e.validator(t,this[0]),e.data(this[0],"validator",n),n.settings.onsubmit&&(this.on("click.validate",":submit",(function(t){n.submitButton=t.currentTarget,e(this).hasClass("cancel")&&(n.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(n.cancelSubmit=!0)})),this.on("submit.validate",(function(t){function i(){var i,r;return n.submitButton&&(n.settings.submitHandler||n.formSubmitted)&&(i=e("<input type='hidden'/>").attr("name",n.submitButton.name).val(e(n.submitButton).val()).appendTo(n.currentForm)),!(n.settings.submitHandler&&!n.settings.debug)||(r=n.settings.submitHandler.call(n,n.currentForm,t),i&&i.remove(),void 0!==r&&r)}return n.settings.debug&&t.preventDefault(),n.cancelSubmit?(n.cancelSubmit=!1,i()):n.form()?n.pendingRequest?(n.formSubmitted=!0,!1):i():(n.focusInvalid(),!1)}))),n)}t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var t,n,i;return e(this[0]).is("form")?t=this.validate().form():(i=[],t=!0,n=e(this[0].form).validate(),this.each((function(){(t=n.element(this)&&t)||(i=i.concat(n.errorList))})),n.errorList=i),t},rules:function(t,n){var i,r,o,a,s,l,u=this[0],c=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=u&&(!u.form&&c&&(u.form=this.closest("form")[0],u.name=this.attr("name")),null!=u.form)){if(t)switch(r=(i=e.data(u.form,"validator").settings).rules,o=e.validator.staticRules(u),t){case"add":e.extend(o,e.validator.normalizeRule(n)),delete o.messages,r[u.name]=o,n.messages&&(i.messages[u.name]=e.extend(i.messages[u.name],n.messages));break;case"remove":return n?(l={},e.each(n.split(/\s/),(function(e,t){l[t]=o[t],delete o[t]})),l):(delete r[u.name],o)}return(a=e.validator.normalizeRules(e.extend({},e.validator.classRules(u),e.validator.attributeRules(u),e.validator.dataRules(u),e.validator.staticRules(u)),u)).required&&(s=a.required,delete a.required,a=e.extend({required:s},a)),a.remote&&(s=a.remote,delete a.remote,a=e.extend(a,{remote:s})),a}}});var t,n=function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")};e.extend(e.expr.pseudos||e.expr[":"],{blank:function(t){return!n(""+e(t).val())},filled:function(t){var i=e(t).val();return null!==i&&!!n(""+i)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,n){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=n,this.init()},e.validator.format=function(t,n){return 1===arguments.length?function(){var n=e.makeArray(arguments);return n.unshift(t),e.validator.format.apply(this,n)}:(void 0===n||(arguments.length>2&&n.constructor!==Array&&(n=e.makeArray(arguments).slice(1)),n.constructor!==Array&&(n=[n]),e.each(n,(function(e,n){t=t.replace(new RegExp("\\{"+e+"\\}","g"),(function(){return n}))}))),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,n){9===n.which&&""===this.elementValue(t)||-1!==e.inArray(n.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).addClass(n).removeClass(i):e(t).addClass(n).removeClass(i)},unhighlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).removeClass(n).addClass(i):e(t).removeClass(n).addClass(i)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var t,n=this.currentForm,i=this.groups={};function r(t){var i=void 0!==e(this).attr("contenteditable")&&"false"!==e(this).attr("contenteditable");if(!this.form&&i&&(this.form=e(this).closest("form")[0],this.name=e(this).attr("name")),n===this.form){var r=e.data(this.form,"validator"),o="on"+t.type.replace(/^validate/,""),a=r.settings;a[o]&&!e(this).is(a.ignore)&&a[o].call(r,this,t)}}e.each(this.settings.groups,(function(t,n){"string"==typeof n&&(n=n.split(/\s/)),e.each(n,(function(e,n){i[n]=t}))})),t=this.settings.rules,e.each(t,(function(n,i){t[n]=e.validator.normalizeRule(i)})),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",r).on("click.validate","select, option, [type='radio'], [type='checkbox']",r),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var n,i,r=this.clean(t),o=this.validationTargetFor(r),a=this,s=!0;return void 0===o?delete this.invalid[r.name]:(this.prepareElement(o),this.currentElements=e(o),(i=this.groups[o.name])&&e.each(this.groups,(function(e,t){t===i&&e!==o.name&&(r=a.validationTargetFor(a.clean(a.findByName(e))))&&r.name in a.invalid&&(a.currentElements.push(r),s=a.check(r)&&s)})),n=!1!==this.check(o),s=s&&n,this.invalid[o.name]=!n,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!n)),s},showErrors:function(t){if(t){var n=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,(function(e,t){return{message:e,element:n.findByName(t)[0]}})),this.successList=e.grep(this.successList,(function(e){return!(e.name in t)}))}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,n=0;for(t in e)void 0!==e[t]&&null!==e[t]&&!1!==e[t]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,(function(e){return e.element.name===t.name})).length&&t},elements:function(){var t=this,n={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter((function(){var i=this.name||e(this).attr("name"),r=void 0!==e(this).attr("contenteditable")&&"false"!==e(this).attr("contenteditable");return!i&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),r&&(this.form=e(this).closest("form")[0],this.name=i),!(this.form!==t.currentForm||i in n||!t.objectLength(e(this).rules())||(n[i]=!0,0))}))},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var n,i,r=e(t),o=t.type,a=void 0!==r.attr("contenteditable")&&"false"!==r.attr("contenteditable");return"radio"===o||"checkbox"===o?this.findByName(t.name).filter(":checked").val():"number"===o&&void 0!==t.validity?t.validity.badInput?"NaN":r.val():(n=a?r.text():r.val(),"file"===o?"C:\\fakepath\\"===n.substr(0,12)?n.substr(12):(i=n.lastIndexOf("/"))>=0||(i=n.lastIndexOf("\\"))>=0?n.substr(i+1):n:"string"==typeof n?n.replace(/\r/g,""):n)},check:function(t){t=this.validationTargetFor(this.clean(t));var n,i,r,o,a=e(t).rules(),s=e.map(a,(function(e,t){return t})).length,l=!1,u=this.elementValue(t);for(i in"function"==typeof a.normalizer?o=a.normalizer:"function"==typeof this.settings.normalizer&&(o=this.settings.normalizer),o&&(u=o.call(t,u),delete a.normalizer),a){r={method:i,parameters:a[i]};try{if("dependency-mismatch"===(n=e.validator.methods[i].call(this,u,t,r.parameters))&&1===s){l=!0;continue}if(l=!1,"pending"===n)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!n)return this.formatAndAdd(t,r),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+r.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+r.method+"' method."),e}}if(!l)return this.objectLength(a)&&this.successList.push(t),!0},customDataMessage:function(t,n){return e(t).data("msg"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var n=this.settings.messages[e];return n&&(n.constructor===String?n:n[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,n){"string"==typeof n&&(n={method:n});var i=this.findDefined(this.customMessage(t.name,n.method),this.customDataMessage(t,n.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[n.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),r=/\$?\{(\d+)\}/g;return"function"==typeof i?i=i.call(this,n.parameters,t):r.test(i)&&(i=e.validator.format(i.replace(r,"{$1}"),n.parameters)),i},formatAndAdd:function(e,t){var n=this.defaultMessage(e,t);this.errorList.push({message:n,element:e,method:t.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,n;for(e=0;this.errorList[e];e++)n=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,n.element,this.settings.errorClass,this.settings.validClass),this.showLabel(n.element,n.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map((function(){return this.element}))},showLabel:function(t,n){var i,r,o,a,s=this.errorsFor(t),l=this.idOrName(t),u=e(t).attr("aria-describedby");s.length?(s.removeClass(this.settings.validClass).addClass(this.settings.errorClass),s.html(n)):(i=s=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(n||""),this.settings.wrapper&&(i=s.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement.call(this,i,e(t)):i.insertAfter(t),s.is("label")?s.attr("for",l):0===s.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(o=s.attr("id"),u?u.match(new RegExp("\\b"+this.escapeCssMeta(o)+"\\b"))||(u+=" "+o):u=o,e(t).attr("aria-describedby",u),(r=this.groups[t.name])&&(a=this,e.each(a.groups,(function(t,n){n===r&&e("[name='"+a.escapeCssMeta(t)+"']",a.currentForm).attr("aria-describedby",s.attr("id"))}))))),!n&&this.settings.success&&(s.text(""),"string"==typeof this.settings.success?s.addClass(this.settings.success):this.settings.success(s,t)),this.toShow=this.toShow.add(s)},errorsFor:function(t){var n=this.escapeCssMeta(this.idOrName(t)),i=e(t).attr("aria-describedby"),r="label[for='"+n+"'], label[for='"+n+"'] *";return i&&(r=r+", #"+this.escapeCssMeta(i).replace(/\s+/g,", #")),this.errors().filter(r)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,n){switch(n.nodeName.toLowerCase()){case"select":return e("option:selected",n).length;case"input":if(this.checkable(n))return this.findByName(n.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,n){return!!e(t,n.form).length},function:function(e,t){return e(t)}},optional:function(t){var n=this.elementValue(t);return!e.validator.methods.required.call(this,n,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,n){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),n&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.submitButton&&e("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!n&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,n){return n="string"==typeof n&&n||"remote",e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:n})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,n){t.constructor===String?this.classRuleSettings[t]=n:e.extend(this.classRuleSettings,t)},classRules:function(t){var n={},i=e(t).attr("class");return i&&e.each(i.split(" "),(function(){this in e.validator.classRuleSettings&&e.extend(n,e.validator.classRuleSettings[this])})),n},normalizeAttributeRule:function(e,t,n,i){/min|max|step/.test(n)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[n]=i:t===n&&"range"!==t&&(e[n]=!0)},attributeRules:function(t){var n,i,r={},o=e(t),a=t.getAttribute("type");for(n in e.validator.methods)"required"===n?(""===(i=t.getAttribute(n))&&(i=!0),i=!!i):i=o.attr(n),this.normalizeAttributeRule(r,a,n,i);return r.maxlength&&/-1|2147483647|524288/.test(r.maxlength)&&delete r.maxlength,r},dataRules:function(t){var n,i,r={},o=e(t),a=t.getAttribute("type");for(n in e.validator.methods)""===(i=o.data("rule"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase()))&&(i=!0),this.normalizeAttributeRule(r,a,n,i);return r},staticRules:function(t){var n={},i=e.data(t.form,"validator");return i.settings.rules&&(n=e.validator.normalizeRule(i.settings.rules[t.name])||{}),n},normalizeRules:function(t,n){return e.each(t,(function(i,r){if(!1!==r){if(r.param||r.depends){var o=!0;switch(typeof r.depends){case"string":o=!!e(r.depends,n.form).length;break;case"function":o=r.depends.call(n,n)}o?t[i]=void 0===r.param||r.param:(e.data(n.form,"validator").resetElements(e(n)),delete t[i])}}else delete t[i]})),e.each(t,(function(i,r){t[i]=e.isFunction(r)&&"normalizer"!==i?r(n):r})),e.each(["minlength","maxlength"],(function(){t[this]&&(t[this]=Number(t[this]))})),e.each(["rangelength","range"],(function(){var n;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(n=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(n[0]),Number(n[1])]))})),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var n={};e.each(t.split(/\s/),(function(){n[this]=!0})),t=n}return t},addMethod:function(t,n,i){e.validator.methods[t]=n,e.validator.messages[t]=void 0!==i?i:e.validator.messages[t],n.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,n,i){if(!this.depend(i,n))return"dependency-mismatch";if("select"===n.nodeName.toLowerCase()){var r=e(n).val();return r&&r.length>0}return this.checkable(n)?this.getLength(t,n)>0:null!=t&&t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(e)},date:(t=!1,function(e,n){return t||(t=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(n)||!/Invalid|NaN/.test(new Date(e).toString())}),dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r>=i},maxlength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r<=i},rangelength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r>=i[0]&&r<=i[1]},min:function(e,t,n){return this.optional(t)||e>=n},max:function(e,t,n){return this.optional(t)||e<=n},range:function(e,t,n){return this.optional(t)||e>=n[0]&&e<=n[1]},step:function(t,n,i){var r,o=e(n).attr("type"),a="Step attribute on input type "+o+" is not supported.",s=new RegExp("\\b"+o+"\\b"),l=function(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0},u=function(e){return Math.round(e*Math.pow(10,r))},c=!0;if(o&&!s.test(["text","number","range"].join()))throw new Error(a);return r=l(i),(l(t)>r||u(t)%u(i)!=0)&&(c=!1),this.optional(n)||c},equalTo:function(t,n,i){var r=e(i);return this.settings.onfocusout&&r.not(".validate-equalTo-blur").length&&r.addClass("validate-equalTo-blur").on("blur.validate-equalTo",(function(){e(n).valid()})),t===r.val()},remote:function(t,n,i,r){if(this.optional(n))return"dependency-mismatch";r="string"==typeof r&&r||"remote";var o,a,s,l=this.previousValue(n,r);return this.settings.messages[n.name]||(this.settings.messages[n.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[n.name][r],this.settings.messages[n.name][r]=l.message,i="string"==typeof i&&{url:i}||i,s=e.param(e.extend({data:t},i.data)),l.old===s?l.valid:(l.old=s,o=this,this.startRequest(n),(a={})[n.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+n.name,dataType:"json",data:a,context:o.currentForm,success:function(e){var i,a,s,u=!0===e||"true"===e;o.settings.messages[n.name][r]=l.originalMessage,u?(s=o.formSubmitted,o.resetInternals(),o.toHide=o.errorsFor(n),o.formSubmitted=s,o.successList.push(n),o.invalid[n.name]=!1,o.showErrors()):(i={},a=e||o.defaultMessage(n,{method:r,parameters:t}),i[n.name]=l.message=a,o.invalid[n.name]=!0,o.showErrors(i)),l.valid=u,o.stopRequest(n,u)}},i)),"pending")}}});var i,r={};return e.ajaxPrefilter?e.ajaxPrefilter((function(e,t,n){var i=e.port;"abort"===e.mode&&(r[i]&&r[i].abort(),r[i]=n)})):(i=e.ajax,e.ajax=function(t){var n=("mode"in t?t:e.ajaxSettings).mode,o=("port"in t?t:e.ajaxSettings).port;return"abort"===n?(r[o]&&r[o].abort(),r[o]=i.apply(this,arguments),r[o]):i.apply(this,arguments)}),e})?i.apply(t,r):i)||(e.exports=o)},"s+lh":function(e,t,n){!function(t,n){var i=function(e,t,n){"use strict";var i,r;if(function(){var t,n={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(t in r=e.lazySizesConfig||e.lazysizesConfig||{},n)t in r||(r[t]=n[t])}(),!t||!t.getElementsByClassName)return{init:function(){},cfg:r,noSupport:!0};var o=t.documentElement,a=e.HTMLPictureElement,s=e.addEventListener.bind(e),l=e.setTimeout,u=e.requestAnimationFrame||l,c=e.requestIdleCallback,d=/^picture$/i,f=["load","error","lazyincluded","_lazyloaded"],p={},h=Array.prototype.forEach,m=function(e,t){return p[t]||(p[t]=new RegExp("(\\s|^)"+t+"(\\s|$)")),p[t].test(e.getAttribute("class")||"")&&p[t]},v=function(e,t){m(e,t)||e.setAttribute("class",(e.getAttribute("class")||"").trim()+" "+t)},g=function(e,t){var n;(n=m(e,t))&&e.setAttribute("class",(e.getAttribute("class")||"").replace(n," "))},y=function(e,t,n){var i=n?"addEventListener":"removeEventListener";n&&y(e,t),f.forEach((function(n){e[i](n,t)}))},b=function(e,n,r,o,a){var s=t.createEvent("Event");return r||(r={}),r.instance=i,s.initEvent(n,!o,!a),s.detail=r,e.dispatchEvent(s),s},x=function(t,n){var i;!a&&(i=e.picturefill||r.pf)?(n&&n.src&&!t.getAttribute("srcset")&&t.setAttribute("srcset",n.src),i({reevaluate:!0,elements:[t]})):n&&n.src&&(t.src=n.src)},k=function(e,t){return(getComputedStyle(e,null)||{})[t]},w=function(e,t,n){for(n=n||e.offsetWidth;n<r.minSize&&t&&!e._lazysizesWidth;)n=t.offsetWidth,t=t.parentNode;return n},T=(pe=[],he=[],me=pe,ve=function(){var e=me;for(me=pe.length?he:pe,de=!0,fe=!1;e.length;)e.shift()();de=!1},ge=function(e,n){de&&!n?e.apply(this,arguments):(me.push(e),fe||(fe=!0,(t.hidden?l:u)(ve)))},ge._lsFlush=ve,ge),S=function(e,t){return t?function(){T(e)}:function(){var t=this,n=arguments;T((function(){e.apply(t,n)}))}},C=function(e){var t,i,r=function(){t=null,e()},o=function(){var e=n.now()-i;e<99?l(o,99-e):(c||r)(r)};return function(){i=n.now(),t||(t=l(o,99))}},E=(V=/^img$/i,U=/^iframe$/i,G="onscroll"in e&&!/(gle|ing)bot/.test(navigator.userAgent),K=0,Y=0,X=-1,Z=function(e){Y--,(!e||Y<0||!e.target)&&(Y=0)},Q=function(e){return null==W&&(W="hidden"==k(t.body,"visibility")),W||!("hidden"==k(e.parentNode,"visibility")&&"hidden"==k(e,"visibility"))},J=function(e,n){var i,r=e,a=Q(e);for(R-=n,B+=n,H-=n,F+=n;a&&(r=r.offsetParent)&&r!=t.body&&r!=o;)(a=(k(r,"opacity")||1)>0)&&"visible"!=k(r,"overflow")&&(i=r.getBoundingClientRect(),a=F>i.left&&H<i.right&&B>i.top-1&&R<i.bottom+1);return a},ee=function(){var e,n,a,s,l,u,c,d,f,p,h,m,v=i.elements;if((D=r.loadMode)&&Y<8&&(e=v.length)){for(n=0,X++;n<e;n++)if(v[n]&&!v[n]._lazyRace)if(!G||i.prematureUnveil&&i.prematureUnveil(v[n]))se(v[n]);else if((d=v[n].getAttribute("data-expand"))&&(u=1*d)||(u=K),p||(p=!r.expand||r.expand<1?o.clientHeight>500&&o.clientWidth>500?500:370:r.expand,i._defEx=p,h=p*r.expFactor,m=r.hFac,W=null,K<h&&Y<1&&X>2&&D>2&&!t.hidden?(K=h,X=0):K=D>1&&X>1&&Y<6?p:0),f!==u&&(q=innerWidth+u*m,$=innerHeight+u,c=-1*u,f=u),a=v[n].getBoundingClientRect(),(B=a.bottom)>=c&&(R=a.top)<=$&&(F=a.right)>=c*m&&(H=a.left)<=q&&(B||F||H||R)&&(r.loadHidden||Q(v[n]))&&(M&&Y<3&&!d&&(D<3||X<4)||J(v[n],u))){if(se(v[n]),l=!0,Y>9)break}else!l&&M&&!s&&Y<4&&X<4&&D>2&&(z[0]||r.preloadAfterLoad)&&(z[0]||!d&&(B||F||H||R||"auto"!=v[n].getAttribute(r.sizesAttr)))&&(s=z[0]||v[n]);s&&!l&&se(s)}},te=function(e){var t,i=0,o=r.throttleDelay,a=r.ricTimeout,s=function(){t=!1,i=n.now(),e()},u=c&&a>49?function(){c(s,{timeout:a}),a!==r.ricTimeout&&(a=r.ricTimeout)}:S((function(){l(s)}),!0);return function(e){var r;(e=!0===e)&&(a=33),t||(t=!0,(r=o-(n.now()-i))<0&&(r=0),e||r<9?u():l(u,r))}}(ee),ne=function(e){var t=e.target;t._lazyCache?delete t._lazyCache:(Z(e),v(t,r.loadedClass),g(t,r.loadingClass),y(t,re),b(t,"lazyloaded"))},ie=S(ne),re=function(e){ie({target:e.target})},oe=function(e){var t,n=e.getAttribute(r.srcsetAttr);(t=r.customMedia[e.getAttribute("data-media")||e.getAttribute("media")])&&e.setAttribute("media",t),n&&e.setAttribute("srcset",n)},ae=S((function(e,t,n,i,o){var a,s,u,c,f,p;(f=b(e,"lazybeforeunveil",t)).defaultPrevented||(i&&(n?v(e,r.autosizesClass):e.setAttribute("sizes",i)),s=e.getAttribute(r.srcsetAttr),a=e.getAttribute(r.srcAttr),o&&(c=(u=e.parentNode)&&d.test(u.nodeName||"")),p=t.firesLoad||"src"in e&&(s||a||c),f={target:e},v(e,r.loadingClass),p&&(clearTimeout(I),I=l(Z,2500),y(e,re,!0)),c&&h.call(u.getElementsByTagName("source"),oe),s?e.setAttribute("srcset",s):a&&!c&&(U.test(e.nodeName)?function(e,t){try{e.contentWindow.location.replace(t)}catch(n){e.src=t}}(e,a):e.src=a),o&&(s||c)&&x(e,{src:a})),e._lazyRace&&delete e._lazyRace,g(e,r.lazyClass),T((function(){var t=e.complete&&e.naturalWidth>1;p&&!t||(t&&v(e,"ls-is-cached"),ne(f),e._lazyCache=!0,l((function(){"_lazyCache"in e&&delete e._lazyCache}),9)),"lazy"==e.loading&&Y--}),!0)})),se=function(e){if(!e._lazyRace){var t,n=V.test(e.nodeName),i=n&&(e.getAttribute(r.sizesAttr)||e.getAttribute("sizes")),o="auto"==i;(!o&&M||!n||!e.getAttribute("src")&&!e.srcset||e.complete||m(e,r.errorClass)||!m(e,r.lazyClass))&&(t=b(e,"lazyunveilread").detail,o&&P.updateElem(e,!0,e.offsetWidth),e._lazyRace=!0,Y++,ae(e,t,o,i,n))}},le=C((function(){r.loadMode=3,te()})),ue=function(){3==r.loadMode&&(r.loadMode=2),le()},ce=function(){M||(n.now()-N<999?l(ce,999):(M=!0,r.loadMode=3,te(),s("scroll",ue,!0)))},{_:function(){N=n.now(),i.elements=t.getElementsByClassName(r.lazyClass),z=t.getElementsByClassName(r.lazyClass+" "+r.preloadClass),s("scroll",te,!0),s("resize",te,!0),s("pageshow",(function(e){if(e.persisted){var n=t.querySelectorAll("."+r.loadingClass);n.length&&n.forEach&&u((function(){n.forEach((function(e){e.complete&&se(e)}))}))}})),e.MutationObserver?new MutationObserver(te).observe(o,{childList:!0,subtree:!0,attributes:!0}):(o.addEventListener("DOMNodeInserted",te,!0),o.addEventListener("DOMAttrModified",te,!0),setInterval(te,999)),s("hashchange",te,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach((function(e){t.addEventListener(e,te,!0)})),/d$|^c/.test(t.readyState)?ce():(s("load",ce),t.addEventListener("DOMContentLoaded",te),l(ce,2e4)),i.elements.length?(ee(),T._lsFlush()):te()},checkElems:te,unveil:se,_aLSL:ue}),P=(j=S((function(e,t,n,i){var r,o,a;if(e._lazysizesWidth=i,i+="px",e.setAttribute("sizes",i),d.test(t.nodeName||""))for(o=0,a=(r=t.getElementsByTagName("source")).length;o<a;o++)r[o].setAttribute("sizes",i);n.detail.dataAttr||x(e,n.detail)})),O=function(e,t,n){var i,r=e.parentNode;r&&(n=w(e,r,n),(i=b(e,"lazybeforesizes",{width:n,dataAttr:!!t})).defaultPrevented||(n=i.detail.width)&&n!==e._lazysizesWidth&&j(e,r,i,n))},L=C((function(){var e,t=_.length;if(t)for(e=0;e<t;e++)O(_[e])})),{_:function(){_=t.getElementsByClassName(r.autosizesClass),s("resize",L)},checkElems:L,updateElem:O}),A=function(){!A.i&&t.getElementsByClassName&&(A.i=!0,P._(),E._())};var _,j,O,L;var z,M,I,D,N,q,$,R,H,F,B,W,V,U,G,K,Y,X,Z,Q,J,ee,te,ne,ie,re,oe,ae,se,le,ue,ce;var de,fe,pe,he,me,ve,ge;return l((function(){r.init&&A()})),i={cfg:r,autoSizer:P,loader:E,init:A,uP:x,aC:v,rC:g,hC:m,fire:b,gW:w,rAF:T}}(t,t.document,Date);t.lazySizes=i,e.exports&&(e.exports=i)}("undefined"!=typeof window?window:{})},sngE:function(e,t,n){var i={"./messages_ar.min.js":"1IF6","./messages_az.min.js":"WYJi","./messages_bg.min.js":"UIjN","./messages_bn_BD.min.js":"C6E1","./messages_ca.min.js":"+jDx","./messages_cs.min.js":"Lu+q","./messages_da.min.js":"VSOj","./messages_de.min.js":"LmWb","./messages_el.min.js":"pVyz","./messages_es.min.js":"9Fvf","./messages_es_AR.min.js":"U35R","./messages_es_PE.min.js":"uIBY","./messages_et.min.js":"UCcm","./messages_eu.min.js":"7GVS","./messages_fa.min.js":"TDU+","./messages_fi.min.js":"dwOm","./messages_fr.min.js":"E6Ma","./messages_ge.min.js":"Kssn","./messages_gl.min.js":"i7Yy","./messages_he.min.js":"aBcY","./messages_hr.min.js":"d2oF","./messages_hu.min.js":"8i8H","./messages_hy_AM.min.js":"QZb2","./messages_id.min.js":"d3Tz","./messages_is.min.js":"S61x","./messages_it.min.js":"kz+C","./messages_ja.min.js":"/EBr","./messages_ka.min.js":"CfJw","./messages_kk.min.js":"HrBG","./messages_ko.min.js":"pjNj","./messages_lt.min.js":"/QnD","./messages_lv.min.js":"MFfu","./messages_mk.min.js":"Za3L","./messages_my.min.js":"x5WV","./messages_nl.min.js":"kaLh","./messages_no.min.js":"9zhc","./messages_pl.min.js":"INjF","./messages_pt_BR.min.js":"qxlH","./messages_pt_PT.min.js":"dpNq","./messages_ro.min.js":"/+fy","./messages_ru.min.js":"Vrlm","./messages_sd.min.js":"x93C","./messages_si.min.js":"+rSl","./messages_sk.min.js":"xJ1K","./messages_sl.min.js":"Vr+g","./messages_sr.min.js":"jwnp","./messages_sr_lat.min.js":"qb+E","./messages_sv.min.js":"3tqK","./messages_th.min.js":"pv0J","./messages_tj.min.js":"xofk","./messages_tr.min.js":"zfzk","./messages_uk.min.js":"etGo","./messages_ur.min.js":"oO8a","./messages_vi.min.js":"7hsp","./messages_zh.min.js":"uAsr","./messages_zh_TW.min.js":"0yQz"};function r(e){var t=o(e);return n(t)}function o(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=o,e.exports=r,r.id="sngE"},uAsr:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"这是必填字段",remote:"请修正此字段",email:"请输入有效的电子邮件地址",url:"请输入有效的网址",date:"请输入有效的日期",dateISO:"请输入有效的日期 (YYYY-MM-DD)",number:"请输入有效的数字",digits:"只能输入数字",creditcard:"请输入有效的信用卡号码",equalTo:"你的输入不相同",extension:"请输入有效的后缀",maxlength:e.validator.format("最多可以输入 {0} 个字符"),minlength:e.validator.format("最少要输入 {0} 个字符"),rangelength:e.validator.format("请输入长度在 {0} 到 {1} 之间的字符串"),range:e.validator.format("请输入范围在 {0} 到 {1} 之间的数值"),step:e.validator.format("请输入 {0} 的整数倍值"),max:e.validator.format("请输入不大于 {0} 的数值"),min:e.validator.format("请输入不小于 {0} 的数值")}),e})?i.apply(t,r):i)||(e.exports=o)},uIBY:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Este campo es obligatorio.",remote:"Por favor, llene este campo.",email:"Por favor, escriba un correo electrónico válido.",url:"Por favor, escriba una URL válida.",date:"Por favor, escriba una fecha válida.",dateISO:"Por favor, escriba una fecha (ISO) válida.",number:"Por favor, escriba un número válido.",digits:"Por favor, escriba sólo dígitos.",creditcard:"Por favor, escriba un número de tarjeta válido.",equalTo:"Por favor, escriba el mismo valor de nuevo.",extension:"Por favor, escriba un valor con una extensión permitida.",maxlength:e.validator.format("Por favor, no escriba más de {0} caracteres."),minlength:e.validator.format("Por favor, no escriba menos de {0} caracteres."),rangelength:e.validator.format("Por favor, escriba un valor entre {0} y {1} caracteres."),range:e.validator.format("Por favor, escriba un valor entre {0} y {1}."),max:e.validator.format("Por favor, escriba un valor menor o igual a {0}."),min:e.validator.format("Por favor, escriba un valor mayor o igual a {0}."),nifES:"Por favor, escriba un NIF válido.",nieES:"Por favor, escriba un NIE válido.",cifES:"Por favor, escriba un CIF válido."}),e})?i.apply(t,r):i)||(e.exports=o)},x5WV:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Medan ini diperlukan.",remote:"Sila betulkan medan ini.",email:"Sila masukkan alamat emel yang betul.",url:"Sila masukkan URL yang betul.",date:"Sila masukkan tarikh yang betul.",dateISO:"Sila masukkan tarikh(ISO) yang betul.",number:"Sila masukkan nombor yang betul.",digits:"Sila masukkan nilai digit sahaja.",creditcard:"Sila masukkan nombor kredit kad yang betul.",equalTo:"Sila masukkan nilai yang sama semula.",extension:"Sila masukkan nilai yang telah diterima.",maxlength:e.validator.format("Sila masukkan tidak lebih dari {0} aksara."),minlength:e.validator.format("Sila masukkan sekurang-kurangnya {0} aksara."),rangelength:e.validator.format("Sila masukkan antara {0} dan {1} panjang aksara."),range:e.validator.format("Sila masukkan nilai antara {0} dan {1} aksara."),max:e.validator.format("Sila masukkan nilai yang kurang atau sama dengan {0}."),min:e.validator.format("Sila masukkan nilai yang lebih atau sama dengan {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},x93C:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"هنن جاين جي ضرورت آهي",remote:"هنن جاين جي ضرورت آهي",email:"لکيل اي ميل غلط آهي",url:"لکيل ايڊريس غلط آهي",date:"لکيل تاريخ غلط آهي",dateISO:"جي معيار جي مطابق نه آهي (ISO) لکيل تاريخ",number:"لکيل انگ صحيح ناهي",digits:"رڳو انگ داخل ڪري سگهجي ٿو",creditcard:"لکيل ڪارڊ نمبر صحيح نه آهي",equalTo:"داخل ٿيل ڀيٽ صحيح نه آهي",extension:"لکيل غلط آهي",maxlength:e.validator.format("وڌ کان وڌ {0} جي داخلا ڪري سگهجي ٿي"),minlength:e.validator.format("گهٽ ۾ گهٽ {0} جي داخلا ڪرڻ ضروري آهي"),rangelength:e.validator.format("داخلا جو {0} ۽ {1}جي وچ ۾ هجڻ ضروري آهي"),range:e.validator.format("داخلا جو {0} ۽ {1}جي وچ ۾ هجڻ ضروري آهي"),max:e.validator.format("وڌ کان وڌ {0} جي داخلا ڪري سگهجي ٿي"),min:e.validator.format("گهٽ ۾ گهٽ {0} جي داخلا ڪرڻ ضروري آهي")}),e})?i.apply(t,r):i)||(e.exports=o)},xJ1K:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Povinné zadať.",maxlength:e.validator.format("Maximálne {0} znakov."),minlength:e.validator.format("Minimálne {0} znakov."),rangelength:e.validator.format("Minimálne {0} a maximálne {1} znakov."),email:"E-mailová adresa musí byť platná.",url:"URL musí byť platná.",date:"Musí byť dátum.",number:"Musí byť číslo.",digits:"Môže obsahovať iba číslice.",equalTo:"Dve hodnoty sa musia rovnať.",range:e.validator.format("Musí byť medzi {0} a {1}."),max:e.validator.format("Nemôže byť viac ako {0}."),min:e.validator.format("Nemôže byť menej ako {0}."),creditcard:"Číslo platobnej karty musí byť platné.",step:e.validator.format("Musí byť násobkom čísla {0}.")}),e})?i.apply(t,r):i)||(e.exports=o)},xexB:function(e,t,n){var i;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},u=o.push,c=o.indexOf,d={},f=d.toString,p=d.hasOwnProperty,h=p.toString,m=h.call(Object),v={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},b=n.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function k(e,t,n){var i,r,o=(n=n||b).createElement("script");if(o.text=e,t)for(i in x)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[f.call(e)]||"object":typeof e}var T="3.5.1",S=function(e,t){return new S.fn.init(e,t)};function C(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:T,constructor:S,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(e){return this.pushStack(S.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(S.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},S.extend=S.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&a!==i&&(u&&i&&(S.isPlainObject(i)||(r=Array.isArray(i)))?(n=a[t],o=r&&!Array.isArray(n)?[]:r||S.isPlainObject(n)?n:{},r=!1,a[t]=S.extend(u,o,i)):void 0!==i&&(a[t]=i));return a},S.extend({expando:"jQuery"+(T+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e)||(t=a(e))&&("function"!=typeof(n=p.call(t,"constructor")&&t.constructor)||h.call(n)!==m))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){k(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(C(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?S.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,a=[];if(C(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&a.push(r);return l(a)},guid:1,support:v}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=o[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var E=function(e){var t,n,i,r,o,a,s,l,u,c,d,f,p,h,m,v,g,y,b,x="sizzle"+1*new Date,k=e.document,w=0,T=0,S=le(),C=le(),E=le(),P=le(),A=function(e,t){return e===t&&(d=!0),0},_={}.hasOwnProperty,j=[],O=j.pop,L=j.push,z=j.push,M=j.slice,I=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},D="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",$="\\["+N+"*("+q+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+N+"*\\]",R=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+$+")*)|.*)\\)|)",H=new RegExp(N+"+","g"),F=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),B=new RegExp("^"+N+"*,"+N+"*"),W=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),V=new RegExp(N+"|>"),U=new RegExp(R),G=new RegExp("^"+q+"$"),K={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+$),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+D+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){f()},ae=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{z.apply(j=M.call(k.childNodes),k.childNodes),j[k.childNodes.length].nodeType}catch(t){z={apply:j.length?function(e,t){L.apply(e,M.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(e,t,i,r){var o,s,u,c,d,h,g,y=t&&t.ownerDocument,k=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return i;if(!r&&(f(t),t=t||p,m)){if(11!==k&&(d=J.exec(e)))if(o=d[1]){if(9===k){if(!(u=t.getElementById(o)))return i;if(u.id===o)return i.push(u),i}else if(y&&(u=y.getElementById(o))&&b(t,u)&&u.id===o)return i.push(u),i}else{if(d[2])return z.apply(i,t.getElementsByTagName(e)),i;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return z.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!P[e+" "]&&(!v||!v.test(e))&&(1!==k||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===k&&(V.test(e)||W.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(ie,re):t.setAttribute("id",c=x)),s=(h=a(e)).length;s--;)h[s]=(c?"#"+c:":scope")+" "+be(h[s]);g=h.join(",")}try{return z.apply(i,y.querySelectorAll(g)),i}catch(t){P(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ue(e){return e[x]=!0,e}function ce(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function fe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ue((function(t){return t=+t,ue((function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},f=se.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:k;return a!=p&&9===a.nodeType&&a.documentElement&&(h=(p=a).documentElement,m=!o(p),k!=p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",oe,!1):r.attachEvent&&r.attachEvent("onunload",oe)),n.scope=ce((function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(p.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},g=[],v=[],(n.qsa=Q.test(p.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+N+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+N+"*(?:value|"+D+")"),e.querySelectorAll("[id~="+x+"-]").length||v.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+N+"*name"+N+"*="+N+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+N+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=Q.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",R)})),v=v.length&&new RegExp(v.join("|")),g=g.length&&new RegExp(g.join("|")),t=Q.test(h.compareDocumentPosition),b=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==p||e.ownerDocument==k&&b(k,e)?-1:t==p||t.ownerDocument==k&&b(k,t)?1:c?I(c,e)-I(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e==p?-1:t==p?1:r?-1:o?1:c?I(c,e)-I(c,t):0;if(r===o)return fe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?fe(a[i],s[i]):a[i]==k?-1:s[i]==k?1:0}),p},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&m&&!P[t+" "]&&(!g||!g.test(t))&&(!v||!v.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){P(t,!0)}return 0<se(t,p,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=p&&f(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=p&&f(e);var r=i.attrHandle[t.toLowerCase()],o=r&&_.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(ie,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,i=[],r=0,o=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(A),d){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return c=null,e},r=se.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=se.selectors={cacheLength:50,createPseudo:ue,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&S(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=se.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&-1<r.indexOf(n):"$="===t?n&&r.slice(-n.length)===n:"~="===t?-1<(" "+r.replace(H," ")+" ").indexOf(n):"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,f,p,h,m=o!==a?"nextSibling":"previousSibling",v=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(v){if(o){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?v.firstChild:v.lastChild],a&&y){for(b=(p=(u=(c=(d=(f=v)[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===w&&u[1])&&u[2],f=p&&v.childNodes[p];f=++p&&f&&f[m]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){c[e]=[w,p,b];break}}else if(y&&(b=p=(u=(c=(d=(f=t)[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===w&&u[1]),!1===b)for(;(f=++p&&f&&f[m]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++b||(y&&((c=(d=f[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[w,b]),f!==t)););return(b-=r)===i||b%i==0&&0<=b/i}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[x]?r(t):1<r.length?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=I(e,o[a])]=!(n[i]=o[a])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ue((function(e){var t=[],n=[],i=s(e.replace(F,"$1"));return i[x]?ue((function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return 0<se(e,t).length}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return-1<(t.textContent||r(t)).indexOf(e)}})),lang:ue((function(e){return G.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e})),gt:ve((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function xe(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=T++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var u,c,d,f=[w,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(c=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=c[o])&&u[0]===w&&u[1]===s)return f[2]=u[2];if((c[o]=f)[2]=e(t,n,l))return!0}return!1}}function ke(e){return 1<e.length?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),u&&t.push(s)));return a}function Te(e,t,n,i,r,o){return i&&!i[x]&&(i=Te(i)),r&&!r[x]&&(r=Te(r,o)),ue((function(o,a,s,l){var u,c,d,f=[],p=[],h=a.length,m=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)se(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),v=!e||!o&&t?m:we(m,f,e,s,l),g=n?r||(o?e:h||i)?[]:a:v;if(n&&n(v,g,s,l),i)for(u=we(g,p),i(u,[],s,l),c=u.length;c--;)(d=u[c])&&(g[p[c]]=!(v[p[c]]=d));if(o){if(r||e){if(r){for(u=[],c=g.length;c--;)(d=g[c])&&u.push(v[c]=d);r(null,g=[],u,l)}for(c=g.length;c--;)(d=g[c])&&-1<(u=r?I(o,d):f[c])&&(o[u]=!(a[u]=d))}}else g=we(g===a?g.splice(h,g.length):g),r?r(null,a,g,l):z.apply(a,g)}))}function Se(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,c=xe((function(e){return e===t}),s,!0),d=xe((function(e){return-1<I(t,e)}),s,!0),f=[function(e,n,i){var r=!a&&(i||n!==u)||((t=n).nodeType?c(e,n,i):d(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])f=[xe(ke(f),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return Te(1<l&&ke(f),1<l&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),n,l<r&&Se(e.slice(l,r)),r<o&&Se(e=e.slice(r)),r<o&&be(e))}f.push(n)}return ke(f)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,a=se.tokenize=function(e,t){var n,r,o,a,s,l,u,c=C[e+" "];if(c)return t?0:c.slice(0);for(s=e,l=[],u=i.preFilter;s;){for(a in n&&!(r=B.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=W.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(F," ")}),s=s.slice(n.length)),i.filter)!(r=K[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):C(e,l).slice(0)},s=se.compile=function(e,t){var n,r,o,s,l,c,d=[],h=[],v=E[e+" "];if(!v){for(t||(t=a(e)),n=t.length;n--;)(v=Se(t[n]))[x]?d.push(v):h.push(v);(v=E(e,(r=h,s=0<(o=d).length,l=0<r.length,c=function(e,t,n,a,c){var d,h,v,g=0,y="0",b=e&&[],x=[],k=u,T=e||l&&i.find.TAG("*",c),S=w+=null==k?1:Math.random()||.1,C=T.length;for(c&&(u=t==p||t||c);y!==C&&null!=(d=T[y]);y++){if(l&&d){for(h=0,t||d.ownerDocument==p||(f(d),n=!m);v=r[h++];)if(v(d,t||p,n)){a.push(d);break}c&&(w=S)}s&&((d=!v&&d)&&g--,e&&b.push(d))}if(g+=y,s&&y!==g){for(h=0;v=o[h++];)v(b,x,t,n);if(e){if(0<g)for(;y--;)b[y]||x[y]||(x[y]=O.call(a));x=we(x)}z.apply(a,x),c&&!e&&0<x.length&&1<g+o.length&&se.uniqueSort(a)}return c&&(w=S,u=k),b},s?ue(c):c))).selector=e}return v},l=se.select=function(e,t,n,r){var o,l,u,c,d,f="function"==typeof e&&e,p=!r&&a(e=f.selector||e);if(n=n||[],1===p.length){if(2<(l=p[0]=p[0].slice(0)).length&&"ID"===(u=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=K.needsContext.test(e)?0:l.length;o--&&(u=l[o],!i.relative[c=u.type]);)if((d=i.find[c])&&(r=d(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&be(l)))return z.apply(n,r),n;break}}return(f||s(e,p))(r,t,!m,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=x.split("").sort(A).join("")===x,n.detectDuplicates=!!d,f(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de(D,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),se}(n);S.find=E,S.expr=E.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=E.uniqueSort,S.text=E.getText,S.isXMLDoc=E.isXML,S.contains=E.contains,S.escapeSelector=E.escape;var P=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&S(e).is(n))break;i.push(e)}return i},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},_=S.expr.match.needsContext;function j(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,t,n){return g(t)?S.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?S.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?S.grep(e,(function(e){return-1<c.call(t,e)!==n})):S.filter(t,e,n)}S.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?S.find.matchesSelector(i,e)?[i]:[]:S.find.matches(e,S.grep(t,(function(e){return 1===e.nodeType})))},S.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(S(e).filter((function(){for(t=0;t<i;t++)if(S.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)S.find(e,r[t],n);return 1<i?S.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&_.test(e)?S(e):e||[],!1).length}});var z,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||z,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:M.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),O.test(i[1])&&S.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=b.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,z=S(b);var I=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&S(e);if(!_.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&S.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?S.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?c.call(S(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return P(e,"parentNode")},parentsUntil:function(e,t,n){return P(e,"parentNode",n)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return P(e,"nextSibling")},prevAll:function(e){return P(e,"previousSibling")},nextUntil:function(e,t,n){return P(e,"nextSibling",n)},prevUntil:function(e,t,n){return P(e,"previousSibling",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(j(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},(function(e,t){S.fn[e]=function(n,i){var r=S.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=S.filter(i,r)),1<this.length&&(D[e]||S.uniqueSort(r),I.test(e)&&r.reverse()),this.pushStack(r)}}));var q=/[^\x20\t\r\n\f]+/g;function $(e){return e}function R(e){throw e}function H(e,t,n,i){var r;try{e&&g(r=e.promise)?r.call(e).done(t).fail(n):e&&g(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(e){var t,n;e="string"==typeof e?(t=e,n={},S.each(t.match(q)||[],(function(e,t){n[t]=!0})),n):S.extend({},e);var i,r,o,a,s=[],l=[],u=-1,c=function(){for(a=a||e.once,o=i=!0;l.length;u=-1)for(r=l.shift();++u<s.length;)!1===s[u].apply(r[0],r[1])&&e.stopOnFalse&&(u=s.length,r=!1);e.memory||(r=!1),i=!1,a&&(s=r?[]:"")},d={add:function(){return s&&(r&&!i&&(u=s.length-1,l.push(r)),function t(n){S.each(n,(function(n,i){g(i)?e.unique&&d.has(i)||s.push(i):i&&i.length&&"string"!==w(i)&&t(i)}))}(arguments),r&&!i&&c()),this},remove:function(){return S.each(arguments,(function(e,t){for(var n;-1<(n=S.inArray(t,s,n));)s.splice(n,1),n<=u&&u--})),this},has:function(e){return e?-1<S.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=l=[],s=r="",this},disabled:function(){return!s},lock:function(){return a=l=[],r||i||(s=r=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),i||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!o}};return d},S.extend({Deferred:function(e){var t=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return S.Deferred((function(n){S.each(t,(function(t,i){var r=g(e[i[4]])&&e[i[4]];o[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,r){var o=0;function a(e,t,i,r){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(e<o)){if((n=i.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(u)?r?u.call(n,a(o,t,$,r),a(o,t,R,r)):(o++,u.call(n,a(o,t,$,r),a(o,t,R,r),a(o,t,$,t.notifyWith))):(i!==$&&(s=void 0,l=[n]),(r||t.resolveWith)(s,l))}},c=r?u:function(){try{u()}catch(n){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(n,c.stackTrace),o<=e+1&&(i!==R&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?c():(S.Deferred.getStackHook&&(c.stackTrace=S.Deferred.getStackHook()),n.setTimeout(c))}}return S.Deferred((function(n){t[0][3].add(a(0,n,g(r)?r:$,n.notifyWith)),t[1][3].add(a(0,n,g(e)?e:$)),t[2][3].add(a(0,n,g(i)?i:R))})).promise()},promise:function(e){return null!=e?S.extend(e,r):r}},o={};return S.each(t,(function(e,n){var a=n[2],s=n[5];r[n[1]]=a.add,s&&a.add((function(){i=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=s.call(arguments),o=S.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=1<arguments.length?s.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(H(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||g(r[n]&&r[n].then)))return o.then();for(;n--;)H(r[n],a(n),o.reject);return o.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&F.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){n.setTimeout((function(){throw e}))};var B=S.Deferred();function W(){b.removeEventListener("DOMContentLoaded",W),n.removeEventListener("load",W),S.ready()}S.fn.ready=function(e){return B.then(e).catch((function(e){S.readyException(e)})),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||B.resolveWith(b,[S])}}),S.ready.then=B.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(S.ready):(b.addEventListener("DOMContentLoaded",W),n.addEventListener("load",W));var V=function(e,t,n,i,r,o,a){var s=0,l=e.length,u=null==n;if("object"===w(n))for(s in r=!0,n)V(e,t,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,g(i)||(a=!0),u&&(a?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(S(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:u?t.call(e):l?t(e[0],n):o},U=/^-ms-/,G=/-([a-z])/g;function K(e,t){return t.toUpperCase()}function Y(e){return e.replace(U,"ms-").replace(G,K)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Z(){this.expando=S.expando+Z.uid++}Z.uid=1,Z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[Y(t)]=n;else for(i in t)r[Y(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in i?[t]:t.match(q)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||S.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var Q=new Z,J=new Z,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i,r;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:ee.test(r)?JSON.parse(r):r)}catch(e){}J.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),S.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=Y(i.slice(5)),ne(o,i,r[i]));Q.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){J.set(this,e)})):V(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=J.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){J.set(this,e,t)}))}),null,t,1<arguments.length,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),S.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Q.get(e,t),n&&(!i||Array.isArray(n)?i=Q.access(e,t,S.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),i=n.length,r=n.shift(),o=S._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,(function(){S.dequeue(e,t)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:S.Callbacks("once memory").add((function(){Q.remove(e,[t+"queue",n])}))})}}),S.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?S.queue(this[0],e):void 0===t?this:this.each((function(){var n=S.queue(this,e,t);S._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&S.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){S.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=S.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=b.documentElement,se=function(e){return S.contains(e.ownerDocument,e)},le={composed:!0};ae.getRootNode&&(se=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===S.css(e,"display")};function ce(e,t,n,i){var r,o,a=20,s=i?function(){return i.cur()}:function(){return S.css(e,t,"")},l=s(),u=n&&n[3]||(S.cssNumber[t]?"":"px"),c=e.nodeType&&(S.cssNumber[t]||"px"!==u&&+l)&&re.exec(S.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)S.style(e,t,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,S.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var de={};function fe(e,t){for(var n,i,r,o,a,s,l,u=[],c=0,d=e.length;c<d;c++)(i=e[c]).style&&(n=i.style.display,t?("none"===n&&(u[c]=Q.get(i,"display")||null,u[c]||(i.style.display="")),""===i.style.display&&ue(i)&&(u[c]=(l=a=o=void 0,a=(r=i).ownerDocument,s=r.nodeName,(l=de[s])||(o=a.body.appendChild(a.createElement(s)),l=S.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),de[s]=l)))):"none"!==n&&(u[c]="none",Q.set(i,"display",n)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}S.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?S(this).show():S(this).hide()}))}});var pe,he,me=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ge=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(he=b.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),pe.appendChild(he),v.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",v.option=!!pe.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&j(e,t)?S.merge([e],n):n}function xe(e,t){for(var n=0,i=e.length;n<i;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,v.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var ke=/<|&#?\w+;/;function we(e,t,n,i,r){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===w(o))S.merge(f,o.nodeType?[o]:o);else if(ke.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ve.exec(o)||["",""])[1].toLowerCase(),l=ye[s]||ye._default,a.innerHTML=l[1]+S.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;S.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(i&&-1<S.inArray(o,i))r&&r.push(o);else if(u=se(o),a=be(d.appendChild(o),"script"),u&&xe(a),n)for(c=0;o=a[c++];)ge.test(o.type||"")&&n.push(o);return d}var Te=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Pe(){return!1}function Ae(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function _e(e,t,n,i,r,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)_e(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Pe;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return S().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=S.guid++)),e.each((function(){S.event.add(this,t,r,i,n)}))}function je(e,t,n){n?(Q.set(e,t,!1),S.event.add(e,t,{namespace:!1,handler:function(e){var i,r,o=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(S.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),Q.set(this,t,o),i=n(this,t),this[t](),o!==(r=Q.get(this,t))||i?Q.set(this,t,!1):r={},o!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else o.length&&(Q.set(this,t,{value:S.event.trigger(S.extend(o[0],S.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&S.event.add(e,t,Ee)}S.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,u,c,d,f,p,h,m,v=Q.get(e);if(X(e))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&S.find.matchesSelector(ae,r),n.guid||(n.guid=S.guid++),(l=v.events)||(l=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(q)||[""]).length;u--;)p=m=(s=Ce.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),p&&(d=S.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=S.event.special[p]||{},c=S.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&S.expr.match.needsContext.test(r),namespace:h.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,c):f.push(c),S.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,u,c,d,f,p,h,m,v=Q.hasData(e)&&Q.get(e);if(v&&(l=v.events)){for(u=(t=(t||"").match(q)||[""]).length;u--;)if(p=m=(s=Ce.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),p){for(d=S.event.special[p]||{},f=l[p=(i?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!r&&m!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||S.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)S.event.remove(e,p+t[u],n,i,!0);S.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=new Array(arguments.length),l=S.event.fix(e),u=(Q.get(this,"events")||Object.create(null))[l.type]||[],c=S.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=S.event.handlers.call(this,l,u),t=0;(r=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((S.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?-1<S(r,this).index(u):S.find(r,this,null,[u]).length),a[r]&&o.push(i);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&j(t,"input")&&je(t,"click",Ee),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&j(t,"input")&&je(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&j(t,"input")&&Q.get(t,"click")||j(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Pe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Pe,isPropagationStopped:Pe,isImmediatePropagationStopped:Pe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},(function(e,t){S.event.special[e]={setup:function(){return je(this,e,Ae),!1},trigger:function(){return je(this,e),!0},delegateType:t}})),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){S.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||S.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),S.fn.extend({on:function(e,t,n,i){return _e(this,e,t,n,i)},one:function(e,t,n,i){return _e(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,S(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Pe),this.each((function(){S.event.remove(this,e,n,t)}))}});var Oe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,ze=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return j(e,"table")&&j(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ne(e,t){var n,i,r,o,a,s;if(1===t.nodeType){if(Q.hasData(e)&&(s=Q.get(e).events))for(r in Q.remove(t,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)S.event.add(t,r,s[r][n]);J.hasData(e)&&(o=J.access(e),a=S.extend({},o),J.set(t,a))}}function qe(e,t,n,i){t=l(t);var r,o,a,s,u,c,d=0,f=e.length,p=f-1,h=t[0],m=g(h);if(m||1<f&&"string"==typeof h&&!v.checkClone&&Le.test(h))return e.each((function(r){var o=e.eq(r);m&&(t[0]=h.call(this,r,o.html())),qe(o,t,n,i)}));if(f&&(o=(r=we(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=(a=S.map(be(r,"script"),Ie)).length;d<f;d++)u=r,d!==p&&(u=S.clone(u,!0,!0),s&&S.merge(a,be(u,"script"))),n.call(e[d],u,d);if(s)for(c=a[a.length-1].ownerDocument,S.map(a,De),d=0;d<s;d++)u=a[d],ge.test(u.type||"")&&!Q.access(u,"globalEval")&&S.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?S._evalUrl&&!u.noModule&&S._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):k(u.textContent.replace(ze,""),u,c))}return e}function $e(e,t,n){for(var i,r=t?S.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||S.cleanData(be(i)),i.parentNode&&(n&&se(i)&&xe(be(i,"script")),i.parentNode.removeChild(i));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,a,s,l,u,c=e.cloneNode(!0),d=se(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(a=be(c),i=0,r=(o=be(e)).length;i<r;i++)s=o[i],"input"===(u=(l=a[i]).nodeName.toLowerCase())&&me.test(s.type)?l.checked=s.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=s.defaultValue);if(t)if(n)for(o=o||be(e),a=a||be(c),i=0,r=o.length;i<r;i++)Ne(o[i],a[i]);else Ne(e,c);return 0<(a=be(c,"script")).length&&xe(a,!d&&be(e,"script")),c},cleanData:function(e){for(var t,n,i,r=S.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Q.expando]){if(t.events)for(i in t.events)r[i]?S.event.remove(n,i):S.removeEvent(n,i,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),S.fn.extend({detach:function(e){return $e(this,e,!0)},remove:function(e){return $e(this,e)},text:function(e){return V(this,(function(e){return void 0===e?S.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return qe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)}))},prepend:function(){return qe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return qe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return qe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return S.clone(this,e,t)}))},html:function(e){return V(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Oe.test(e)&&!ye[(ve.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return qe(this,arguments,(function(t){var n=this.parentNode;S.inArray(this,e)<0&&(S.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){S.fn[e]=function(e){for(var n,i=[],r=S(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),S(r[a])[t](n),u.apply(i,n.get());return this.pushStack(i)}}));var Re=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Fe=function(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i},Be=new RegExp(oe.join("|"),"i");function We(e,t,n){var i,r,o,a,s=e.style;return(n=n||He(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||se(e)||(a=S.style(e,t)),!v.pixelBoxStyles()&&Re.test(a)&&Be.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function Ve(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(u).appendChild(c);var e=n.getComputedStyle(c);i="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),r=36===t(e.width),c.style.position="absolute",o=12===t(c.offsetWidth/3),ae.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,s,l,u=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,S.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,i,r;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),i=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",ae.appendChild(e).appendChild(t).appendChild(i),r=n.getComputedStyle(t),s=3<parseInt(r.height),ae.removeChild(e)),s}}))}();var Ue=["Webkit","Moz","ms"],Ge=b.createElement("div").style,Ke={};function Ye(e){return S.cssProps[e]||Ke[e]||(e in Ge?e:Ke[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in Ge)return e}(e)||e)}var Xe=/^(none|table(?!-c[ea]).+)/,Ze=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function tt(e,t,n,i,r,o){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=S.css(e,n+oe[a],!0,r)),i?("content"===n&&(l-=S.css(e,"padding"+oe[a],!0,r)),"margin"!==n&&(l-=S.css(e,"border"+oe[a]+"Width",!0,r))):(l+=S.css(e,"padding"+oe[a],!0,r),"padding"!==n?l+=S.css(e,"border"+oe[a]+"Width",!0,r):s+=S.css(e,"border"+oe[a]+"Width",!0,r));return!i&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function nt(e,t,n){var i=He(e),r=(!v.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,i),o=r,a=We(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(Re.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&r||!v.reliableTrDimensions()&&j(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===S.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===S.css(e,"boxSizing",!1,i),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+tt(e,t,n||(r?"border":"content"),o,i,a)+"px"}function it(e,t,n,i,r){return new it.prototype.init(e,t,n,i,r)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=Y(t),l=Ze.test(t),u=e.style;if(l||(t=Ye(s)),a=S.cssHooks[t]||S.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:u[t];"string"==(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ce(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(S.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,o,a,s=Y(t);return Ze.test(t)||(t=Ye(s)),(a=S.cssHooks[t]||S.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=We(e,t,i)),"normal"===r&&t in Je&&(r=Je[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),S.each(["height","width"],(function(e,t){S.cssHooks[t]={get:function(e,n,i){if(n)return!Xe.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,i):Fe(e,Qe,(function(){return nt(e,t,i)}))},set:function(e,n,i){var r,o=He(e),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||i)&&"border-box"===S.css(e,"boxSizing",!1,o),l=i?tt(e,t,i,s,o):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-tt(e,t,"border",!1,o)-.5)),l&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=S.css(e,t)),et(0,n,l)}}})),S.cssHooks.marginLeft=Ve(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),S.each({margin:"",padding:"",border:"Width"},(function(e,t){S.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(S.cssHooks[e+t].set=et)})),S.fn.extend({css:function(e,t){return V(this,(function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=He(e),r=t.length;a<r;a++)o[t[a]]=S.css(e,t[a],!1,i);return o}return void 0!==n?S.style(e,t,n):S.css(e,t)}),e,t,1<arguments.length)}}),((S.Tween=it).prototype={constructor:it,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}}).init.prototype=it.prototype,(it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=it.prototype.init,S.fx.step={};var rt,ot,at,st,lt=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function ct(){ot&&(!1===b.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,S.fx.interval),S.fx.tick())}function dt(){return n.setTimeout((function(){rt=void 0})),rt=Date.now()}function ft(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function pt(e,t,n){for(var i,r=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function ht(e,t,n){var i,r,o=0,a=ht.prefilters.length,s=S.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=rt||dt(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(i);return s.notifyWith(e,[u,i,n]),i<1&&a?n:(a||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||dt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=S.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=Y(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=S.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);o<a;o++)if(i=ht.prefilters[o].call(u,e,c,u.opts))return g(i.stop)&&(S._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return S.map(c,pt,u),g(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),S.fx.timer(S.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}S.Animation=S.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(q);for(var n,i=0,r=e.length;i<r;i++)n=e[i],ht.tweeners[n]=ht.tweeners[n]||[],ht.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,u,c,d="width"in t||"height"in t,f=this,p={},h=e.style,m=e.nodeType&&ue(e),v=Q.get(e,"fxshow");for(i in n.queue||(null==(a=S._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always((function(){f.always((function(){a.unqueued--,S.queue(e,"fx").length||a.empty.fire()}))}))),t)if(r=t[i],lt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;m=!0}p[i]=v&&v[i]||S.style(e,i)}if((l=!S.isEmptyObject(t))||!S.isEmptyObject(p))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=v&&v.display)&&(u=Q.get(e,"display")),"none"===(c=S.css(e,"display"))&&(u?c=u:(fe([e],!0),u=e.style.display||u,c=S.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===S.css(e,"float")&&(l||(f.done((function(){h.display=u})),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,p)l||(v?"hidden"in v&&(m=v.hidden):v=Q.access(e,"fxshow",{display:u}),o&&(v.hidden=!m),m&&fe([e],!0),f.done((function(){for(i in m||fe([e]),Q.remove(e,"fxshow"),p)S.style(e,i,p[i])}))),l=pt(m?v[i]:0,i,f),i in v||(v[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),S.speed=function(e,t,n){var i=e&&"object"==typeof e?S.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return S.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in S.fx.speeds?i.duration=S.fx.speeds[i.duration]:i.duration=S.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){g(i.old)&&i.old.call(this),i.queue&&S.dequeue(this,i.queue)},i},S.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=S.isEmptyObject(e),o=S.speed(t,n,i),a=function(){var t=ht(this,S.extend({},e),o);(r||Q.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=S.timers,a=Q.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&ut.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||S.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Q.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=S.timers,a=i?i.length:0;for(n.finish=!0,S.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),S.each(["toggle","show","hide"],(function(e,t){var n=S.fn[t];S.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ft(t,!0),e,i,r)}})),S.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){S.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),rt=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){ot||(ot=!0,ct())},S.fx.stop=function(){ot=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(e,t){return e=S.fx&&S.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}}))},at=b.createElement("input"),st=b.createElement("select").appendChild(b.createElement("option")),at.type="checkbox",v.checkOn=""!==at.value,v.optSelected=st.selected,(at=b.createElement("input")).value="t",at.type="radio",v.radioValue="t"===at.value;var mt,vt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return V(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each((function(){S.removeAttr(this,e)}))}}),S.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?S.prop(e,t,n):(1===o&&S.isXMLDoc(e)||(r=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=S.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&j(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(q);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=vt[t]||S.find.attr;vt[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=vt[a],vt[a]=r,r=null!=n(e,t,i)?a:null,vt[a]=o),r}}));var gt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function bt(e){return(e.match(q)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(q)||[]}S.fn.extend({prop:function(e,t){return V(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each((function(){delete this[S.propFix[e]||e]}))}}),S.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(e)||(t=S.propFix[t]||t,r=S.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){S.propFix[this.toLowerCase()]=this})),S.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(g(e))return this.each((function(t){S(this).addClass(e.call(this,t,xt(this)))}));if((t=kt(e)).length)for(;n=this[l++];)if(r=xt(n),i=1===n.nodeType&&" "+bt(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=bt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(g(e))return this.each((function(t){S(this).removeClass(e.call(this,t,xt(this)))}));if(!arguments.length)return this.attr("class","");if((t=kt(e)).length)for(;n=this[l++];)if(r=xt(n),i=1===n.nodeType&&" "+bt(r)+" "){for(a=0;o=t[a++];)for(;-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");r!==(s=bt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){S(this).toggleClass(e.call(this,n,xt(this),t),t)})):this.each((function(){var t,r,o,a;if(i)for(r=0,o=S(this),a=kt(e);t=a[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=xt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+bt(xt(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;S.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=g(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,S(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=S.map(r,(function(e){return null==e?"":e+""}))),(t=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=S.valHooks[r.type]||S.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(wt,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:bt(S.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!j(n.parentNode,"optgroup"))){if(t=S(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=S.makeArray(t),a=r.length;a--;)((i=r[a]).selected=-1<S.inArray(S.valHooks.option.get(i),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],(function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},v.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in n;var Tt=/^(?:focusinfocus|focusoutblur)$/,St=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,i,r){var o,a,s,l,u,c,d,f,h=[i||b],m=p.call(e,"type")?e.type:e,v=p.call(e,"namespace")?e.namespace.split("."):[];if(a=f=s=i=i||b,3!==i.nodeType&&8!==i.nodeType&&!Tt.test(m+S.event.triggered)&&(-1<m.indexOf(".")&&(m=(v=m.split(".")).shift(),v.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[S.expando]?e:new S.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:S.makeArray(t,[e]),d=S.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(i,t))){if(!r&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,Tt.test(l+m)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(i.ownerDocument||b)&&h.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)f=a,e.type=1<o?l:d.bindType||m,(c=(Q.get(a,"events")||Object.create(null))[e.type]&&Q.get(a,"handle"))&&c.apply(a,t),(c=u&&a[u])&&c.apply&&X(a)&&(e.result=c.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!X(i)||u&&g(i[m])&&!y(i)&&((s=i[u])&&(i[u]=null),S.event.triggered=m,e.isPropagationStopped()&&f.addEventListener(m,St),i[m](),e.isPropagationStopped()&&f.removeEventListener(m,St),S.event.triggered=void 0,s&&(i[u]=s)),e.result}},simulate:function(e,t,n){var i=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(i,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each((function(){S.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),v.focusin||S.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){S.event.simulate(t,e.target,S.event.fix(e))};S.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=Q.access(i,t);r||i.addEventListener(e,n,!0),Q.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=Q.access(i,t)-1;r?Q.access(i,t,r):(i.removeEventListener(e,n,!0),Q.remove(i,t))}}}));var Ct=n.location,Et={guid:Date.now()},Pt=/\?/;S.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+e),t};var At=/\[\]$/,_t=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function Lt(e,t,n,i){var r;if(Array.isArray(t))S.each(t,(function(t,r){n||At.test(e)?i(e,r):Lt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==w(t))i(e,t);else for(r in t)Lt(e+"["+r+"]",t[r],n,i)}S.param=function(e,t){var n,i=[],r=function(e,t){var n=g(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,(function(){r(this.name,this.value)}));else for(n in e)Lt(n,e[n],t,r);return i.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Ot.test(this.nodeName)&&!jt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,(function(e){return{name:t.name,value:e.replace(_t,"\r\n")}})):{name:t.name,value:n.replace(_t,"\r\n")}})).get()}});var zt=/%20/g,Mt=/#.*$/,It=/([?&])_=[^&]*/,Dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:GET|HEAD)$/,qt=/^\/\//,$t={},Rt={},Ht="*/".concat("*"),Ft=b.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(q)||[];if(g(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Wt(e,t,n,i){var r={},o=e===Rt;function a(s){var l;return r[s]=!0,S.each(e[s]||[],(function(e,s){var u=s(t,n,i);return"string"!=typeof u||o||r[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)})),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Vt(e,t){var n,i,r=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&S.extend(!0,e,i),e}Ft.href=Ct.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Vt(Vt(e,S.ajaxSettings),t):Vt(S.ajaxSettings,e)},ajaxPrefilter:Bt($t),ajaxTransport:Bt(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,s,l,u,c,d,f,p=S.ajaxSetup({},t),h=p.context||p,m=p.context&&(h.nodeType||h.jquery)?S(h):S.event,v=S.Deferred(),g=S.Callbacks("once memory"),y=p.statusCode||{},x={},k={},w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=Dt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(e,t){return null==u&&(e=k[e.toLowerCase()]=k[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)T.always(e[T.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||w;return i&&i.abort(t),C(0,t),this}};if(v.promise(T),p.url=((e||p.url||Ct.href)+"").replace(qt,Ct.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(q)||[""],null==p.crossDomain){l=b.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ft.protocol+"//"+Ft.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=S.param(p.data,p.traditional)),Wt($t,p,t,T),u)return T;for(d in(c=S.event&&p.global)&&0==S.active++&&S.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Nt.test(p.type),r=p.url.replace(Mt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(zt,"+")):(f=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(Pt.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(It,"$1"),f=(Pt.test(r)?"&":"?")+"_="+Et.guid+++f),p.url=r+f),p.ifModified&&(S.lastModified[r]&&T.setRequestHeader("If-Modified-Since",S.lastModified[r]),S.etag[r]&&T.setRequestHeader("If-None-Match",S.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ht+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(h,T,p)||u))return T.abort();if(w="abort",g.add(p.complete),T.done(p.success),T.fail(p.error),i=Wt(Rt,p,t,T)){if(T.readyState=1,c&&m.trigger("ajaxSend",[T,p]),u)return T;p.async&&0<p.timeout&&(s=n.setTimeout((function(){T.abort("timeout")}),p.timeout));try{u=!1,i.send(x,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,a,l){var d,f,b,x,k,w=t;u||(u=!0,s&&n.clearTimeout(s),i=void 0,o=l||"",T.readyState=0<e?4:0,d=200<=e&&e<300||304===e,a&&(x=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(p,T,a)),!d&&-1<S.inArray("script",p.dataTypes)&&(p.converters["text script"]=function(){}),x=function(e,t,n,i){var r,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(r in u)if((s=r.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[r]:!0!==u[r]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(p,x,T,d),d?(p.ifModified&&((k=T.getResponseHeader("Last-Modified"))&&(S.lastModified[r]=k),(k=T.getResponseHeader("etag"))&&(S.etag[r]=k)),204===e||"HEAD"===p.type?w="nocontent":304===e?w="notmodified":(w=x.state,f=x.data,d=!(b=x.error))):(b=w,!e&&w||(w="error",e<0&&(e=0))),T.status=e,T.statusText=(t||w)+"",d?v.resolveWith(h,[f,w,T]):v.rejectWith(h,[T,w,b]),T.statusCode(y),y=void 0,c&&m.trigger(d?"ajaxSuccess":"ajaxError",[T,p,d?f:b]),g.fireWith(h,[T,w]),c&&(m.trigger("ajaxComplete",[T,p]),--S.active||S.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],(function(e,t){S[t]=function(e,n,i,r){return g(n)&&(r=r||i,i=n,n=void 0),S.ajax(S.extend({url:e,type:t,dataType:r,data:n,success:i},S.isPlainObject(e)&&e))}})),S.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){S(this).wrapInner(e.call(this,t))})):this.each((function(){var t=S(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){S(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){S(this).replaceWith(this.childNodes)})),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Gt=S.ajaxSettings.xhr();v.cors=!!Gt&&"withCredentials"in Gt,v.ajax=Gt=!!Gt,S.ajaxTransport((function(e){var t,i;if(v.cors||Gt&&!e.crossDomain)return{send:function(r,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(a,r[a]);t=function(e){return function(){t&&(t=i=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ut[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),i=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&i()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(r){if(t)throw r}},abort:function(){t&&t()}}})),S.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),S.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=S("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Kt,Yt=[],Xt=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||S.expando+"_"+Et.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",(function(e,t,i){var r,o,a,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+r):!1!==e.jsonp&&(e.url+=(Pt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||S.error(r+" was not called"),a[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){a=arguments},i.always((function(){void 0===o?S(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(r)),a&&g(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=((Kt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Kt.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(i)):t=b),o=!n&&[],(r=O.exec(e))?[t.createElement(r[1])]:(r=we([e],t,o),o&&o.length&&S(o).remove(),S.merge([],r.childNodes)));var i,r,o},S.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return-1<s&&(i=bt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),0<a.length&&S.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(i?S("<div>").append(S.parseHTML(e)).find(i):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},S.expr.pseudos.animated=function(e){return S.grep(S.timers,(function(t){return e===t.elem})).length},S.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,u=S.css(e,"position"),c=S(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),o=S.css(e,"top"),l=S.css(e,"left"),("absolute"===u||"fixed"===u)&&-1<(o+l).indexOf("auto")?(a=(i=c.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),g(t)&&(t=t.call(e,n,S.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),c.css(d))}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){S.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===S.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),r.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-S.css(i,"marginTop",!0),left:t.left-r.left-S.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||ae}))}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;S.fn[e]=function(i){return V(this,(function(e,i,r){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r}),e,i,arguments.length)}})),S.each(["top","left"],(function(e,t){S.cssHooks[t]=Ve(v.pixelPosition,(function(e,n){if(n)return n=We(e,t),Re.test(n)?S(e).position()[t]+"px":n}))})),S.each({Height:"height",Width:"width"},(function(e,t){S.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){S.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return V(this,(function(t,n,r){var o;return y(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?S.css(t,n,s):S.style(t,n,r,s)}),t,a?r:void 0,a)}}))})),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){S.fn[t]=function(e){return this.on(t,e)}})),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){S.fn[t]=function(e,n){return 0<arguments.length?this.on(t,null,e,n):this.trigger(t)}}));var Zt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return i=s.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(s.call(arguments)))}).guid=e.guid=e.guid||S.guid++,r},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=j,S.isFunction=g,S.isWindow=y,S.camelCase=Y,S.type=w,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(Zt,"")},void 0===(i=function(){return S}.apply(t,[]))||(e.exports=i);var Qt=n.jQuery,Jt=n.$;return S.noConflict=function(e){return n.$===S&&(n.$=Jt),e&&n.jQuery===S&&(n.jQuery=Qt),S},void 0===r&&(n.jQuery=n.$=S),S}))},xofk:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Ворид кардани ин филд маҷбури аст.",remote:"Илтимос, маълумоти саҳеҳ ворид кунед.",email:"Илтимос, почтаи электронии саҳеҳ ворид кунед.",url:"Илтимос, URL адреси саҳеҳ ворид кунед.",date:"Илтимос, таърихи саҳеҳ ворид кунед.",dateISO:"Илтимос, таърихи саҳеҳи (ISO)ӣ ворид кунед.",number:"Илтимос, рақамҳои саҳеҳ ворид кунед.",digits:"Илтимос, танҳо рақам ворид кунед.",creditcard:"Илтимос, кредит карди саҳеҳ ворид кунед.",equalTo:"Илтимос, миқдори баробар ворид кунед.",extension:"Илтимос, қофияи файлро дуруст интихоб кунед",maxlength:e.validator.format("Илтимос, бештар аз {0} рамз ворид накунед."),minlength:e.validator.format("Илтимос, камтар аз {0} рамз ворид накунед."),rangelength:e.validator.format("Илтимос, камтар аз {0} ва зиёда аз {1} рамз ворид кунед."),range:e.validator.format("Илтимос, аз {0} то {1} рақам зиёд ворид кунед."),max:e.validator.format("Илтимос, бештар аз {0} рақам ворид накунед."),min:e.validator.format("Илтимос, камтар аз {0} рақам ворид накунед.")}),e})?i.apply(t,r):i)||(e.exports=o)},yLpj:function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},zfzk:function(e,t,n){var i,r,o;r=[n("EVdn"),n("oTcK")],void 0===(o="function"==typeof(i=function(e){return e.extend(e.validator.messages,{required:"Bu alanın doldurulması zorunludur.",remote:"Lütfen bu alanı düzeltin.",email:"Lütfen geçerli bir e-posta adresi giriniz.",url:"Lütfen geçerli bir web adresi (URL) giriniz.",date:"Lütfen geçerli bir tarih giriniz.",dateISO:"Lütfen geçerli bir tarih giriniz(ISO formatında)",number:"Lütfen geçerli bir sayı giriniz.",digits:"Lütfen sadece sayısal karakterler giriniz.",creditcard:"Lütfen geçerli bir kredi kartı giriniz.",equalTo:"Lütfen aynı değeri tekrar giriniz.",extension:"Lütfen geçerli uzantıya sahip bir değer giriniz.",maxlength:e.validator.format("Lütfen en fazla {0} karakter uzunluğunda bir değer giriniz."),minlength:e.validator.format("Lütfen en az {0} karakter uzunluğunda bir değer giriniz."),rangelength:e.validator.format("Lütfen en az {0} ve en fazla {1} uzunluğunda bir değer giriniz."),range:e.validator.format("Lütfen {0} ile {1} arasında bir değer giriniz."),max:e.validator.format("Lütfen {0} değerine eşit ya da daha küçük bir değer giriniz."),min:e.validator.format("Lütfen {0} değerine eşit ya da daha büyük bir değer giriniz."),require_from_group:e.validator.format("Lütfen bu alanların en az {0} tanesini doldurunuz.")}),e})?i.apply(t,r):i)||(e.exports=o)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=0)}({"/4UK":function(t,e){var i,n,s,o,r,a,l,c,u,d,p;i=window,n=jQuery,l="datepicker",c=!1,u={classes:"",inline:!1,language:"ru",startDate:new Date,firstDay:"",weekends:[6,0],dateFormat:"",altField:"",altFieldDateFormat:"@",toggleSelected:!0,keyboardNav:!0,position:"bottom left",offset:12,view:"days",minView:"days",showOtherMonths:!0,selectOtherMonths:!0,moveToOtherMonthsOnSelect:!0,showOtherYears:!0,selectOtherYears:!0,moveToOtherYearsOnSelect:!0,minDate:"",maxDate:"",disableNavWhenOutOfRange:!0,multipleDates:!1,multipleDatesSeparator:",",range:!1,todayButton:!1,clearButton:!1,showEvent:"focus",autoClose:!1,monthsField:"monthsShort",prevHtml:'<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',nextHtml:'<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',navTitles:{days:"MM, <i>yyyy</i>",months:"yyyy",years:"yyyy1 - yyyy2"},timepicker:!1,onlyTimepicker:!1,dateTimeSeparator:" ",timeFormat:"",minHours:0,maxHours:24,minMinutes:0,maxMinutes:59,hoursStep:1,minutesStep:1,onSelect:"",onShow:"",onHide:"",onChangeMonth:"",onChangeYear:"",onChangeDecade:"",onChangeView:"",onRenderCell:""},d={ctrlRight:[17,39],ctrlUp:[17,38],ctrlLeft:[17,37],ctrlDown:[17,40],shiftRight:[16,39],shiftUp:[16,38],shiftLeft:[16,37],shiftDown:[16,40],altUp:[18,38],altRight:[18,39],altLeft:[18,37],altDown:[18,40],ctrlShiftUp:[16,17,38]},(a=p=function(t,e){this.el=t,this.$el=n(t),this.opts=n.extend(!0,{},u,e,this.$el.data()),o==s&&(o=n("body")),this.opts.startDate||(this.opts.startDate=new Date),"INPUT"==this.el.nodeName&&(this.elIsInput=!0),this.opts.altField&&(this.$altField="string"==typeof this.opts.altField?n(this.opts.altField):this.opts.altField),this.inited=!1,this.visible=!1,this.silent=!1,this.currentDate=this.opts.startDate,this.currentView=this.opts.view,this._createShortCuts(),this.selectedDates=[],this.views={},this.keys=[],this.minRange="",this.maxRange="",this._prevOnSelectValue="",this.init()}).prototype={VERSION:"2.2.3",viewIndexes:["days","months","years"],init:function(){c||this.opts.inline||!this.elIsInput||this._buildDatepickersContainer(),this._buildBaseHtml(),this._defineLocale(this.opts.language),this._syncWithMinMaxDates(),this.elIsInput&&(this.opts.inline||(this._setPositionClasses(this.opts.position),this._bindEvents()),this.opts.keyboardNav&&!this.opts.onlyTimepicker&&this._bindKeyboardEvents(),this.$datepicker.on("mousedown",this._onMouseDownDatepicker.bind(this)),this.$datepicker.on("mouseup",this._onMouseUpDatepicker.bind(this))),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.timepicker&&(this.timepicker=new n.fn.datepicker.Timepicker(this,this.opts),this._bindTimepickerEvents()),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.views[this.currentView]=new n.fn.datepicker.Body(this,this.currentView,this.opts),this.views[this.currentView].show(),this.nav=new n.fn.datepicker.Navigation(this,this.opts),this.view=this.currentView,this.$el.on("clickCell.adp",this._onClickCell.bind(this)),this.$datepicker.on("mouseenter",".datepicker--cell",this._onMouseEnterCell.bind(this)),this.$datepicker.on("mouseleave",".datepicker--cell",this._onMouseLeaveCell.bind(this)),this.inited=!0},_createShortCuts:function(){this.minDate=this.opts.minDate?this.opts.minDate:new Date(-86399999136e5),this.maxDate=this.opts.maxDate?this.opts.maxDate:new Date(86399999136e5)},_bindEvents:function(){this.$el.on(this.opts.showEvent+".adp",this._onShowEvent.bind(this)),this.$el.on("mouseup.adp",this._onMouseUpEl.bind(this)),this.$el.on("blur.adp",this._onBlur.bind(this)),this.$el.on("keyup.adp",this._onKeyUpGeneral.bind(this)),n(i).on("resize.adp",this._onResize.bind(this)),n("body").on("mouseup.adp",this._onMouseUpBody.bind(this))},_bindKeyboardEvents:function(){this.$el.on("keydown.adp",this._onKeyDown.bind(this)),this.$el.on("keyup.adp",this._onKeyUp.bind(this)),this.$el.on("hotKey.adp",this._onHotKey.bind(this))},_bindTimepickerEvents:function(){this.$el.on("timeChange.adp",this._onTimeChange.bind(this))},isWeekend:function(t){return-1!==this.opts.weekends.indexOf(t)},_defineLocale:function(t){"string"==typeof t?(this.loc=n.fn.datepicker.language[t],this.loc||(console.warn("Can't find language \""+t+'" in Datepicker.language, will use "ru" instead'),this.loc=n.extend(!0,{},n.fn.datepicker.language.ru)),this.loc=n.extend(!0,{},n.fn.datepicker.language.ru,n.fn.datepicker.language[t])):this.loc=n.extend(!0,{},n.fn.datepicker.language.ru,t),this.opts.dateFormat&&(this.loc.dateFormat=this.opts.dateFormat),this.opts.timeFormat&&(this.loc.timeFormat=this.opts.timeFormat),""!==this.opts.firstDay&&(this.loc.firstDay=this.opts.firstDay),this.opts.timepicker&&(this.loc.dateFormat=[this.loc.dateFormat,this.loc.timeFormat].join(this.opts.dateTimeSeparator)),this.opts.onlyTimepicker&&(this.loc.dateFormat=this.loc.timeFormat);var e=this._getWordBoundaryRegExp;(this.loc.timeFormat.match(e("aa"))||this.loc.timeFormat.match(e("AA")))&&(this.ampm=!0)},_buildDatepickersContainer:function(){c=!0,o.append('<div class="datepickers-container" id="datepickers-container"></div>'),r=n("#datepickers-container")},_buildBaseHtml:function(){var t,e=n('<div class="datepicker-inline">');t="INPUT"==this.el.nodeName?this.opts.inline?e.insertAfter(this.$el):r:e.appendTo(this.$el),this.$datepicker=n('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo(t),this.$content=n(".datepicker--content",this.$datepicker),this.$nav=n(".datepicker--nav",this.$datepicker)},_triggerOnChange:function(){if(!this.selectedDates.length){if(""===this._prevOnSelectValue)return;return this._prevOnSelectValue="",this.opts.onSelect("","",this)}var t,e=this.selectedDates,i=a.getParsedDate(e[0]),n=this,s=new Date(i.year,i.month,i.date,i.hours,i.minutes);t=e.map((function(t){return n.formatDate(n.loc.dateFormat,t)})).join(this.opts.multipleDatesSeparator),(this.opts.multipleDates||this.opts.range)&&(s=e.map((function(t){var e=a.getParsedDate(t);return new Date(e.year,e.month,e.date,e.hours,e.minutes)}))),this._prevOnSelectValue=t,this.opts.onSelect(t,s,this)},next:function(){var t=this.parsedDate,e=this.opts;switch(this.view){case"days":this.date=new Date(t.year,t.month+1,1),e.onChangeMonth&&e.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(t.year+1,t.month,1),e.onChangeYear&&e.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(t.year+10,0,1),e.onChangeDecade&&e.onChangeDecade(this.curDecade)}},prev:function(){var t=this.parsedDate,e=this.opts;switch(this.view){case"days":this.date=new Date(t.year,t.month-1,1),e.onChangeMonth&&e.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(t.year-1,t.month,1),e.onChangeYear&&e.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(t.year-10,0,1),e.onChangeDecade&&e.onChangeDecade(this.curDecade)}},formatDate:function(t,e){e=e||this.date;var i,n=t,s=this._getWordBoundaryRegExp,o=this.loc,r=a.getLeadingZeroNum,l=a.getDecade(e),c=a.getParsedDate(e),u=c.fullHours,d=c.hours,p=t.match(s("aa"))||t.match(s("AA")),h="am",f=this._replacer;switch(this.opts.timepicker&&this.timepicker&&p&&(u=r((i=this.timepicker._getValidHoursFromDate(e,p)).hours),d=i.hours,h=i.dayPeriod),!0){case/@/.test(n):n=n.replace(/@/,e.getTime());case/aa/.test(n):n=f(n,s("aa"),h);case/AA/.test(n):n=f(n,s("AA"),h.toUpperCase());case/dd/.test(n):n=f(n,s("dd"),c.fullDate);case/d/.test(n):n=f(n,s("d"),c.date);case/DD/.test(n):n=f(n,s("DD"),o.days[c.day]);case/D/.test(n):n=f(n,s("D"),o.daysShort[c.day]);case/mm/.test(n):n=f(n,s("mm"),c.fullMonth);case/m/.test(n):n=f(n,s("m"),c.month+1);case/MM/.test(n):n=f(n,s("MM"),this.loc.months[c.month]);case/M/.test(n):n=f(n,s("M"),o.monthsShort[c.month]);case/ii/.test(n):n=f(n,s("ii"),c.fullMinutes);case/i/.test(n):n=f(n,s("i"),c.minutes);case/hh/.test(n):n=f(n,s("hh"),u);case/h/.test(n):n=f(n,s("h"),d);case/yyyy/.test(n):n=f(n,s("yyyy"),c.year);case/yyyy1/.test(n):n=f(n,s("yyyy1"),l[0]);case/yyyy2/.test(n):n=f(n,s("yyyy2"),l[1]);case/yy/.test(n):n=f(n,s("yy"),c.year.toString().slice(-2))}return n},_replacer:function(t,e,i){return t.replace(e,(function(t,e,n,s){return e+i+s}))},_getWordBoundaryRegExp:function(t){var e="\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";return new RegExp("(^|>|"+e+")("+t+")($|<|"+e+")","g")},selectDate:function(t){var e=this,i=e.opts,n=e.parsedDate,s=e.selectedDates.length,o="";if(Array.isArray(t))t.forEach((function(t){e.selectDate(t)}));else if(t instanceof Date){if(this.lastSelectedDate=t,this.timepicker&&this.timepicker._setTime(t),e._trigger("selectDate",t),this.timepicker&&(t.setHours(this.timepicker.hours),t.setMinutes(this.timepicker.minutes)),"days"==e.view&&t.getMonth()!=n.month&&i.moveToOtherMonthsOnSelect&&(o=new Date(t.getFullYear(),t.getMonth(),1)),"years"==e.view&&t.getFullYear()!=n.year&&i.moveToOtherYearsOnSelect&&(o=new Date(t.getFullYear(),0,1)),o&&(e.silent=!0,e.date=o,e.silent=!1,e.nav._render()),i.multipleDates&&!i.range){if(s===i.multipleDates)return;e._isSelected(t)||e.selectedDates.push(t)}else i.range?2==s?(e.selectedDates=[t],e.minRange=t,e.maxRange=""):1==s?(e.selectedDates.push(t),e.maxRange?e.minRange=t:e.maxRange=t,a.bigger(e.maxRange,e.minRange)&&(e.maxRange=e.minRange,e.minRange=t),e.selectedDates=[e.minRange,e.maxRange]):(e.selectedDates=[t],e.minRange=t):e.selectedDates=[t];e._setInputValue(),i.onSelect&&e._triggerOnChange(),i.autoClose&&!this.timepickerIsActive&&(i.multipleDates||i.range?i.range&&2==e.selectedDates.length&&e.hide():e.hide()),e.views[this.currentView]._render()}},removeDate:function(t){var e=this.selectedDates,i=this;if(t instanceof Date)return e.some((function(n,s){return a.isSame(n,t)?(e.splice(s,1),i.selectedDates.length?i.lastSelectedDate=i.selectedDates[i.selectedDates.length-1]:(i.minRange="",i.maxRange="",i.lastSelectedDate=""),i.views[i.currentView]._render(),i._setInputValue(),i.opts.onSelect&&i._triggerOnChange(),!0):void 0}))},today:function(){this.silent=!0,this.view=this.opts.minView,this.silent=!1,this.date=new Date,this.opts.todayButton instanceof Date&&this.selectDate(this.opts.todayButton)},clear:function(){this.selectedDates=[],this.minRange="",this.maxRange="",this.views[this.currentView]._render(),this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()},update:function(t,e){var i=arguments.length,s=this.lastSelectedDate;return 2==i?this.opts[t]=e:1==i&&"object"==typeof t&&(this.opts=n.extend(!0,this.opts,t)),this._createShortCuts(),this._syncWithMinMaxDates(),this._defineLocale(this.opts.language),this.nav._addButtonsIfNeed(),this.opts.onlyTimepicker||this.nav._render(),this.views[this.currentView]._render(),this.elIsInput&&!this.opts.inline&&(this._setPositionClasses(this.opts.position),this.visible&&this.setPosition(this.opts.position)),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.opts.timepicker&&(s&&this.timepicker._handleDate(s),this.timepicker._updateRanges(),this.timepicker._updateCurrentTime(),s&&(s.setHours(this.timepicker.hours),s.setMinutes(this.timepicker.minutes))),this._setInputValue(),this},_syncWithMinMaxDates:function(){var t=this.date.getTime();this.silent=!0,this.minTime>t&&(this.date=this.minDate),this.maxTime<t&&(this.date=this.maxDate),this.silent=!1},_isSelected:function(t,e){var i=!1;return this.selectedDates.some((function(n){return a.isSame(n,t,e)?(i=n,!0):void 0})),i},_setInputValue:function(){var t,e=this,i=e.opts,n=e.loc.dateFormat,s=i.altFieldDateFormat,o=e.selectedDates.map((function(t){return e.formatDate(n,t)}));i.altField&&e.$altField.length&&(t=(t=this.selectedDates.map((function(t){return e.formatDate(s,t)}))).join(this.opts.multipleDatesSeparator),this.$altField.val(t)),o=o.join(this.opts.multipleDatesSeparator),this.$el.val(o)},_isInRange:function(t,e){var i=t.getTime(),n=a.getParsedDate(t),s=a.getParsedDate(this.minDate),o=a.getParsedDate(this.maxDate),r=new Date(n.year,n.month,s.date).getTime(),l=new Date(n.year,n.month,o.date).getTime(),c={day:i>=this.minTime&&i<=this.maxTime,month:r>=this.minTime&&l<=this.maxTime,year:n.year>=s.year&&n.year<=o.year};return e?c[e]:c.day},_getDimensions:function(t){var e=t.offset();return{width:t.outerWidth(),height:t.outerHeight(),left:e.left,top:e.top}},_getDateFromCell:function(t){var e=this.parsedDate,i=t.data("year")||e.year,n=t.data("month")==s?e.month:t.data("month"),o=t.data("date")||1;return new Date(i,n,o)},_setPositionClasses:function(t){var e=(t=t.split(" "))[0],i="datepicker -"+e+"-"+t[1]+"- -from-"+e+"-";this.visible&&(i+=" active"),this.$datepicker.removeAttr("class").addClass(i)},setPosition:function(t){t=t||this.opts.position;var e,i,n=this._getDimensions(this.$el),s=this._getDimensions(this.$datepicker),o=t.split(" "),r=this.opts.offset,a=o[0],l=o[1];switch(a){case"top":e=n.top-s.height-r;break;case"right":i=n.left+n.width+r;break;case"bottom":e=n.top+n.height+r;break;case"left":i=n.left-s.width-r}switch(l){case"top":e=n.top;break;case"right":i=n.left+n.width-s.width;break;case"bottom":e=n.top+n.height-s.height;break;case"left":i=n.left;break;case"center":/left|right/.test(a)?e=n.top+n.height/2-s.height/2:i=n.left+n.width/2-s.width/2}this.$datepicker.css({left:i,top:e})},show:function(){var t=this.opts.onShow;this.setPosition(this.opts.position),this.$datepicker.addClass("active"),this.visible=!0,t&&this._bindVisionEvents(t)},hide:function(){var t=this.opts.onHide;this.$datepicker.removeClass("active").css({left:"-100000px"}),this.focused="",this.keys=[],this.inFocus=!1,this.visible=!1,this.$el.blur(),t&&this._bindVisionEvents(t)},down:function(t){this._changeView(t,"down")},up:function(t){this._changeView(t,"up")},_bindVisionEvents:function(t){this.$datepicker.off("transitionend.dp"),t(this,!1),this.$datepicker.one("transitionend.dp",t.bind(this,this,!0))},_changeView:function(t,e){t=t||this.focused||this.date;var i="up"==e?this.viewIndex+1:this.viewIndex-1;i>2&&(i=2),0>i&&(i=0),this.silent=!0,this.date=new Date(t.getFullYear(),t.getMonth(),1),this.silent=!1,this.view=this.viewIndexes[i]},_handleHotKey:function(t){var e,i,n,s=a.getParsedDate(this._getFocusedDate()),o=this.opts,r=!1,l=!1,c=!1,u=s.year,d=s.month,p=s.date;switch(t){case"ctrlRight":case"ctrlUp":d+=1,r=!0;break;case"ctrlLeft":case"ctrlDown":d-=1,r=!0;break;case"shiftRight":case"shiftUp":l=!0,u+=1;break;case"shiftLeft":case"shiftDown":l=!0,u-=1;break;case"altRight":case"altUp":c=!0,u+=10;break;case"altLeft":case"altDown":c=!0,u-=10;break;case"ctrlShiftUp":this.up()}n=a.getDaysCount(new Date(u,d)),i=new Date(u,d,p),p>n&&(p=n),i.getTime()<this.minTime?i=this.minDate:i.getTime()>this.maxTime&&(i=this.maxDate),this.focused=i,e=a.getParsedDate(i),r&&o.onChangeMonth&&o.onChangeMonth(e.month,e.year),l&&o.onChangeYear&&o.onChangeYear(e.year),c&&o.onChangeDecade&&o.onChangeDecade(this.curDecade)},_registerKey:function(t){this.keys.some((function(e){return e==t}))||this.keys.push(t)},_unRegisterKey:function(t){var e=this.keys.indexOf(t);this.keys.splice(e,1)},_isHotKeyPressed:function(){var t,e=!1,i=this.keys.sort();for(var n in d)t=d[n],i.length==t.length&&t.every((function(t,e){return t==i[e]}))&&(this._trigger("hotKey",n),e=!0);return e},_trigger:function(t,e){this.$el.trigger(t,e)},_focusNextCell:function(t,e){e=e||this.cellType;var i=a.getParsedDate(this._getFocusedDate()),n=i.year,s=i.month,o=i.date;if(!this._isHotKeyPressed()){switch(t){case 37:"day"==e&&(o-=1),"month"==e&&(s-=1),"year"==e&&(n-=1);break;case 38:"day"==e&&(o-=7),"month"==e&&(s-=3),"year"==e&&(n-=4);break;case 39:"day"==e&&(o+=1),"month"==e&&(s+=1),"year"==e&&(n+=1);break;case 40:"day"==e&&(o+=7),"month"==e&&(s+=3),"year"==e&&(n+=4)}var r=new Date(n,s,o);r.getTime()<this.minTime?r=this.minDate:r.getTime()>this.maxTime&&(r=this.maxDate),this.focused=r}},_getFocusedDate:function(){var t=this.focused||this.selectedDates[this.selectedDates.length-1],e=this.parsedDate;if(!t)switch(this.view){case"days":t=new Date(e.year,e.month,(new Date).getDate());break;case"months":t=new Date(e.year,e.month,1);break;case"years":t=new Date(e.year,0,1)}return t},_getCell:function(t,e){e=e||this.cellType;var i,s=a.getParsedDate(t),o='.datepicker--cell[data-year="'+s.year+'"]';switch(e){case"month":o='[data-month="'+s.month+'"]';break;case"day":o+='[data-month="'+s.month+'"][data-date="'+s.date+'"]'}return(i=this.views[this.currentView].$el.find(o)).length?i:n("")},destroy:function(){var t=this;t.$el.off(".adp").data("datepicker",""),t.selectedDates=[],t.focused="",t.views={},t.keys=[],t.minRange="",t.maxRange="",t.opts.inline||!t.elIsInput?t.$datepicker.closest(".datepicker-inline").remove():t.$datepicker.remove()},_handleAlreadySelectedDates:function(t,e){this.opts.range?this.opts.toggleSelected?this.removeDate(e):2!=this.selectedDates.length&&this._trigger("clickCell",e):this.opts.toggleSelected&&this.removeDate(e),this.opts.toggleSelected||(this.lastSelectedDate=t,this.opts.timepicker&&(this.timepicker._setTime(t),this.timepicker.update()))},_onShowEvent:function(t){this.visible||this.show()},_onBlur:function(){!this.inFocus&&this.visible&&this.hide()},_onMouseDownDatepicker:function(t){this.inFocus=!0},_onMouseUpDatepicker:function(t){this.inFocus=!1,t.originalEvent.inFocus=!0,t.originalEvent.timepickerFocus||this.$el.focus()},_onKeyUpGeneral:function(t){this.$el.val()||this.clear()},_onResize:function(){this.visible&&this.setPosition()},_onMouseUpBody:function(t){t.originalEvent.inFocus||this.visible&&!this.inFocus&&this.hide()},_onMouseUpEl:function(t){t.originalEvent.inFocus=!0,setTimeout(this._onKeyUpGeneral.bind(this),4)},_onKeyDown:function(t){var e=t.which;if(this._registerKey(e),e>=37&&40>=e&&(t.preventDefault(),this._focusNextCell(e)),13==e&&this.focused){if(this._getCell(this.focused).hasClass("-disabled-"))return;if(this.view!=this.opts.minView)this.down();else{var i=this._isSelected(this.focused,this.cellType);if(!i)return this.timepicker&&(this.focused.setHours(this.timepicker.hours),this.focused.setMinutes(this.timepicker.minutes)),void this.selectDate(this.focused);this._handleAlreadySelectedDates(i,this.focused)}}27==e&&this.hide()},_onKeyUp:function(t){var e=t.which;this._unRegisterKey(e)},_onHotKey:function(t,e){this._handleHotKey(e)},_onMouseEnterCell:function(t){var e=n(t.target).closest(".datepicker--cell"),i=this._getDateFromCell(e);this.silent=!0,this.focused&&(this.focused=""),e.addClass("-focus-"),this.focused=i,this.silent=!1,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",a.less(this.minRange,this.focused)&&(this.maxRange=this.minRange,this.minRange=""),this.views[this.currentView]._update())},_onMouseLeaveCell:function(t){n(t.target).closest(".datepicker--cell").removeClass("-focus-"),this.silent=!0,this.focused="",this.silent=!1},_onTimeChange:function(t,e,i){var n=new Date,s=!1;this.selectedDates.length&&(s=!0,n=this.lastSelectedDate),n.setHours(e),n.setMinutes(i),s||this._getCell(n).hasClass("-disabled-")?(this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()):this.selectDate(n)},_onClickCell:function(t,e){this.timepicker&&(e.setHours(this.timepicker.hours),e.setMinutes(this.timepicker.minutes)),this.selectDate(e)},set focused(t){if(!t&&this.focused){var e=this._getCell(this.focused);e.length&&e.removeClass("-focus-")}this._focused=t,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",a.less(this.minRange,this._focused)&&(this.maxRange=this.minRange,this.minRange="")),this.silent||(this.date=t)},get focused(){return this._focused},get parsedDate(){return a.getParsedDate(this.date)},set date(t){return t instanceof Date?(this.currentDate=t,this.inited&&!this.silent&&(this.views[this.view]._render(),this.nav._render(),this.visible&&this.elIsInput&&this.setPosition()),t):void 0},get date(){return this.currentDate},set view(t){return this.viewIndex=this.viewIndexes.indexOf(t),this.viewIndex<0?void 0:(this.prevView=this.currentView,this.currentView=t,this.inited&&(this.views[t]?this.views[t]._render():this.views[t]=new n.fn.datepicker.Body(this,t,this.opts),this.views[this.prevView].hide(),this.views[t].show(),this.nav._render(),this.opts.onChangeView&&this.opts.onChangeView(t),this.elIsInput&&this.visible&&this.setPosition()),t)},get view(){return this.currentView},get cellType(){return this.view.substring(0,this.view.length-1)},get minTime(){var t=a.getParsedDate(this.minDate);return new Date(t.year,t.month,t.date).getTime()},get maxTime(){var t=a.getParsedDate(this.maxDate);return new Date(t.year,t.month,t.date).getTime()},get curDecade(){return a.getDecade(this.date)}},a.getDaysCount=function(t){return new Date(t.getFullYear(),t.getMonth()+1,0).getDate()},a.getParsedDate=function(t){return{year:t.getFullYear(),month:t.getMonth(),fullMonth:t.getMonth()+1<10?"0"+(t.getMonth()+1):t.getMonth()+1,date:t.getDate(),fullDate:t.getDate()<10?"0"+t.getDate():t.getDate(),day:t.getDay(),hours:t.getHours(),fullHours:t.getHours()<10?"0"+t.getHours():t.getHours(),minutes:t.getMinutes(),fullMinutes:t.getMinutes()<10?"0"+t.getMinutes():t.getMinutes()}},a.getDecade=function(t){var e=10*Math.floor(t.getFullYear()/10);return[e,e+9]},a.template=function(t,e){return t.replace(/#\{([\w]+)\}/g,(function(t,i){return e[i]||0===e[i]?e[i]:void 0}))},a.isSame=function(t,e,i){if(!t||!e)return!1;var n=a.getParsedDate(t),s=a.getParsedDate(e),o=i||"day";return{day:n.date==s.date&&n.month==s.month&&n.year==s.year,month:n.month==s.month&&n.year==s.year,year:n.year==s.year}[o]},a.less=function(t,e,i){return!(!t||!e)&&e.getTime()<t.getTime()},a.bigger=function(t,e,i){return!(!t||!e)&&e.getTime()>t.getTime()},a.getLeadingZeroNum=function(t){return parseInt(t)<10?"0"+t:t},a.resetTime=function(t){return"object"==typeof t?(t=a.getParsedDate(t),new Date(t.year,t.month,t.date)):void 0},n.fn.datepicker=function(t){return this.each((function(){if(n.data(this,l)){var e=n.data(this,l);e.opts=n.extend(!0,e.opts,t),e.update()}else n.data(this,l,new p(this,t))}))},n.fn.datepicker.Constructor=p,n.fn.datepicker.language={ru:{days:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],daysShort:["Вос","Пон","Вто","Сре","Чет","Пят","Суб"],daysMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthsShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],today:"Сегодня",clear:"Очистить",dateFormat:"dd.mm.yyyy",timeFormat:"hh:ii",firstDay:1}},n((function(){n(".datepicker-here").datepicker()})),function(){var t={days:'<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>',months:'<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>',years:'<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>'},e=n.fn.datepicker,i=e.Constructor;e.Body=function(t,e,i){this.d=t,this.type=e,this.opts=i,this.$el=n(""),this.opts.onlyTimepicker||this.init()},e.Body.prototype={init:function(){this._buildBaseHtml(),this._render(),this._bindEvents()},_bindEvents:function(){this.$el.on("click",".datepicker--cell",n.proxy(this._onClickCell,this))},_buildBaseHtml:function(){this.$el=n(t[this.type]).appendTo(this.d.$content),this.$names=n(".datepicker--days-names",this.$el),this.$cells=n(".datepicker--cells",this.$el)},_getDayNamesHtml:function(t,e,i,n){return e=e!=s?e:t,i=i||"",(n=n!=s?n:0)>7?i:7==e?this._getDayNamesHtml(t,0,i,++n):(i+='<div class="datepicker--day-name'+(this.d.isWeekend(e)?" -weekend-":"")+'">'+this.d.loc.daysMin[e]+"</div>",this._getDayNamesHtml(t,++e,i,++n))},_getCellContents:function(t,e){var n="datepicker--cell datepicker--cell-"+e,s=new Date,o=this.d,r=i.resetTime(o.minRange),a=i.resetTime(o.maxRange),l=o.opts,c=i.getParsedDate(t),u={},d=c.date;switch(e){case"day":o.isWeekend(c.day)&&(n+=" -weekend-"),c.month!=this.d.parsedDate.month&&(n+=" -other-month-",l.selectOtherMonths||(n+=" -disabled-"),l.showOtherMonths||(d=""));break;case"month":d=o.loc[o.opts.monthsField][c.month];break;case"year":var p=o.curDecade;d=c.year,(c.year<p[0]||c.year>p[1])&&(n+=" -other-decade-",l.selectOtherYears||(n+=" -disabled-"),l.showOtherYears||(d=""))}return l.onRenderCell&&(d=(u=l.onRenderCell(t,e)||{}).html?u.html:d,n+=u.classes?" "+u.classes:""),l.range&&(i.isSame(r,t,e)&&(n+=" -range-from-"),i.isSame(a,t,e)&&(n+=" -range-to-"),1==o.selectedDates.length&&o.focused?((i.bigger(r,t)&&i.less(o.focused,t)||i.less(a,t)&&i.bigger(o.focused,t))&&(n+=" -in-range-"),i.less(a,t)&&i.isSame(o.focused,t)&&(n+=" -range-from-"),i.bigger(r,t)&&i.isSame(o.focused,t)&&(n+=" -range-to-")):2==o.selectedDates.length&&i.bigger(r,t)&&i.less(a,t)&&(n+=" -in-range-")),i.isSame(s,t,e)&&(n+=" -current-"),o.focused&&i.isSame(t,o.focused,e)&&(n+=" -focus-"),o._isSelected(t,e)&&(n+=" -selected-"),(!o._isInRange(t,e)||u.disabled)&&(n+=" -disabled-"),{html:d,classes:n}},_getDaysHtml:function(t){for(var e,n,s=i.getDaysCount(t),o=new Date(t.getFullYear(),t.getMonth(),1).getDay(),r=new Date(t.getFullYear(),t.getMonth(),s).getDay(),a=o-this.d.loc.firstDay,l=6-r+this.d.loc.firstDay,c="",u=1-(a=0>a?a+7:a),d=s+(l=l>6?l-7:l);d>=u;u++)n=t.getFullYear(),e=t.getMonth(),c+=this._getDayHtml(new Date(n,e,u));return c},_getDayHtml:function(t){var e=this._getCellContents(t,"day");return'<div class="'+e.classes+'" data-date="'+t.getDate()+'" data-month="'+t.getMonth()+'" data-year="'+t.getFullYear()+'">'+e.html+"</div>"},_getMonthsHtml:function(t){for(var e="",n=i.getParsedDate(t),s=0;12>s;)e+=this._getMonthHtml(new Date(n.year,s)),s++;return e},_getMonthHtml:function(t){var e=this._getCellContents(t,"month");return'<div class="'+e.classes+'" data-month="'+t.getMonth()+'">'+e.html+"</div>"},_getYearsHtml:function(t){for(var e=(i.getParsedDate(t),i.getDecade(t)),n="",s=e[0]-1;s<=e[1]+1;s++)n+=this._getYearHtml(new Date(s,0));return n},_getYearHtml:function(t){var e=this._getCellContents(t,"year");return'<div class="'+e.classes+'" data-year="'+t.getFullYear()+'">'+e.html+"</div>"},_renderTypes:{days:function(){var t=this._getDayNamesHtml(this.d.loc.firstDay),e=this._getDaysHtml(this.d.currentDate);this.$cells.html(e),this.$names.html(t)},months:function(){var t=this._getMonthsHtml(this.d.currentDate);this.$cells.html(t)},years:function(){var t=this._getYearsHtml(this.d.currentDate);this.$cells.html(t)}},_render:function(){this.opts.onlyTimepicker||this._renderTypes[this.type].bind(this)()},_update:function(){var t,e,i,s=n(".datepicker--cell",this.$cells),o=this;s.each((function(s,r){e=n(this),i=o.d._getDateFromCell(n(this)),t=o._getCellContents(i,o.d.cellType),e.attr("class",t.classes)}))},show:function(){this.opts.onlyTimepicker||(this.$el.addClass("active"),this.acitve=!0)},hide:function(){this.$el.removeClass("active"),this.active=!1},_handleClick:function(t){var e=t.data("date")||1,i=t.data("month")||0,n=t.data("year")||this.d.parsedDate.year,s=this.d;if(s.view==this.opts.minView){var o=new Date(n,i,e),r=this.d._isSelected(o,this.d.cellType);return r?void s._handleAlreadySelectedDates.bind(s,r,o)():void s._trigger("clickCell",o)}s.down(new Date(n,i,e))},_onClickCell:function(t){var e=n(t.target).closest(".datepicker--cell");e.hasClass("-disabled-")||this._handleClick.bind(this)(e)}}}(),function(){var t=n.fn.datepicker,e=t.Constructor;t.Navigation=function(t,e){this.d=t,this.opts=e,this.$buttonsContainer="",this.init()},t.Navigation.prototype={init:function(){this._buildBaseHtml(),this._bindEvents()},_bindEvents:function(){this.d.$nav.on("click",".datepicker--nav-action",n.proxy(this._onClickNavButton,this)),this.d.$nav.on("click",".datepicker--nav-title",n.proxy(this._onClickNavTitle,this)),this.d.$datepicker.on("click",".datepicker--button",n.proxy(this._onClickNavButton,this))},_buildBaseHtml:function(){this.opts.onlyTimepicker||this._render(),this._addButtonsIfNeed()},_addButtonsIfNeed:function(){this.opts.todayButton&&this._addButton("today"),this.opts.clearButton&&this._addButton("clear")},_render:function(){var t=this._getTitle(this.d.currentDate),i=e.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',n.extend({title:t},this.opts));this.d.$nav.html(i),"years"==this.d.view&&n(".datepicker--nav-title",this.d.$nav).addClass("-disabled-"),this.setNavStatus()},_getTitle:function(t){return this.d.formatDate(this.opts.navTitles[this.d.view],t)},_addButton:function(t){this.$buttonsContainer.length||this._addButtonsContainer();var i={action:t,label:this.d.loc[t]},s=e.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>',i);n("[data-action="+t+"]",this.$buttonsContainer).length||this.$buttonsContainer.append(s)},_addButtonsContainer:function(){this.d.$datepicker.append('<div class="datepicker--buttons"></div>'),this.$buttonsContainer=n(".datepicker--buttons",this.d.$datepicker)},setNavStatus:function(){if((this.opts.minDate||this.opts.maxDate)&&this.opts.disableNavWhenOutOfRange){var t=this.d.parsedDate,i=t.month,n=t.year,s=t.date;switch(this.d.view){case"days":this.d._isInRange(new Date(n,i-1,1),"month")||this._disableNav("prev"),this.d._isInRange(new Date(n,i+1,1),"month")||this._disableNav("next");break;case"months":this.d._isInRange(new Date(n-1,i,s),"year")||this._disableNav("prev"),this.d._isInRange(new Date(n+1,i,s),"year")||this._disableNav("next");break;case"years":var o=e.getDecade(this.d.date);this.d._isInRange(new Date(o[0]-1,0,1),"year")||this._disableNav("prev"),this.d._isInRange(new Date(o[1]+1,0,1),"year")||this._disableNav("next")}}},_disableNav:function(t){n('[data-action="'+t+'"]',this.d.$nav).addClass("-disabled-")},_activateNav:function(t){n('[data-action="'+t+'"]',this.d.$nav).removeClass("-disabled-")},_onClickNavButton:function(t){var e=n(t.target).closest("[data-action]").data("action");this.d[e]()},_onClickNavTitle:function(t){return n(t.target).hasClass("-disabled-")?void 0:"days"==this.d.view?this.d.view="months":void(this.d.view="years")}}}(),function(){var t=n.fn.datepicker,e=t.Constructor;t.Timepicker=function(t,e){this.d=t,this.opts=e,this.init()},t.Timepicker.prototype={init:function(){var t="input";this._setTime(this.d.date),this._buildHTML(),navigator.userAgent.match(/trident/gi)&&(t="change"),this.d.$el.on("selectDate",this._onSelectDate.bind(this)),this.$ranges.on(t,this._onChangeRange.bind(this)),this.$ranges.on("mouseup",this._onMouseUpRange.bind(this)),this.$ranges.on("mousemove focus ",this._onMouseEnterRange.bind(this)),this.$ranges.on("mouseout blur",this._onMouseOutRange.bind(this))},_setTime:function(t){var i=e.getParsedDate(t);this._handleDate(t),this.hours=i.hours<this.minHours?this.minHours:i.hours,this.minutes=i.minutes<this.minMinutes?this.minMinutes:i.minutes},_setMinTimeFromDate:function(t){this.minHours=t.getHours(),this.minMinutes=t.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()>t.getHours()&&(this.minMinutes=this.opts.minMinutes)},_setMaxTimeFromDate:function(t){this.maxHours=t.getHours(),this.maxMinutes=t.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()<t.getHours()&&(this.maxMinutes=this.opts.maxMinutes)},_setDefaultMinMaxTime:function(){var t=this.opts;this.minHours=t.minHours<0||t.minHours>23?0:t.minHours,this.minMinutes=t.minMinutes<0||t.minMinutes>59?0:t.minMinutes,this.maxHours=t.maxHours<0||t.maxHours>23?23:t.maxHours,this.maxMinutes=t.maxMinutes<0||t.maxMinutes>59?59:t.maxMinutes},_validateHoursMinutes:function(t){this.hours<this.minHours?this.hours=this.minHours:this.hours>this.maxHours&&(this.hours=this.maxHours),this.minutes<this.minMinutes?this.minutes=this.minMinutes:this.minutes>this.maxMinutes&&(this.minutes=this.maxMinutes)},_buildHTML:function(){var t=e.getLeadingZeroNum,i={hourMin:this.minHours,hourMax:t(this.maxHours),hourStep:this.opts.hoursStep,hourValue:this.hours,hourVisible:t(this.displayHours),minMin:this.minMinutes,minMax:t(this.maxMinutes),minStep:this.opts.minutesStep,minValue:t(this.minutes)},s=e.template('<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>',i);this.$timepicker=n(s).appendTo(this.d.$datepicker),this.$ranges=n('[type="range"]',this.$timepicker),this.$hours=n('[name="hours"]',this.$timepicker),this.$minutes=n('[name="minutes"]',this.$timepicker),this.$hoursText=n(".datepicker--time-current-hours",this.$timepicker),this.$minutesText=n(".datepicker--time-current-minutes",this.$timepicker),this.d.ampm&&(this.$ampm=n('<span class="datepicker--time-current-ampm">').appendTo(n(".datepicker--time-current",this.$timepicker)).html(this.dayPeriod),this.$timepicker.addClass("-am-pm-"))},_updateCurrentTime:function(){var t=e.getLeadingZeroNum(this.displayHours),i=e.getLeadingZeroNum(this.minutes);this.$hoursText.html(t),this.$minutesText.html(i),this.d.ampm&&this.$ampm.html(this.dayPeriod)},_updateRanges:function(){this.$hours.attr({min:this.minHours,max:this.maxHours}).val(this.hours),this.$minutes.attr({min:this.minMinutes,max:this.maxMinutes}).val(this.minutes)},_handleDate:function(t){this._setDefaultMinMaxTime(),t&&(e.isSame(t,this.d.opts.minDate)?this._setMinTimeFromDate(this.d.opts.minDate):e.isSame(t,this.d.opts.maxDate)&&this._setMaxTimeFromDate(this.d.opts.maxDate)),this._validateHoursMinutes(t)},update:function(){this._updateRanges(),this._updateCurrentTime()},_getValidHoursFromDate:function(t,i){var n=t;t instanceof Date&&(n=e.getParsedDate(t).hours);var s="am";if(i||this.d.ampm)switch(!0){case 0==n:n=12;break;case 12==n:s="pm";break;case n>11:n-=12,s="pm"}return{hours:n,dayPeriod:s}},set hours(t){this._hours=t;var e=this._getValidHoursFromDate(t);this.displayHours=e.hours,this.dayPeriod=e.dayPeriod},get hours(){return this._hours},_onChangeRange:function(t){var e=n(t.target),i=e.attr("name");this.d.timepickerIsActive=!0,this[i]=e.val(),this._updateCurrentTime(),this.d._trigger("timeChange",[this.hours,this.minutes]),this._handleDate(this.d.lastSelectedDate),this.update()},_onSelectDate:function(t,e){this._handleDate(e),this.update()},_onMouseEnterRange:function(t){var e=n(t.target).attr("name");n(".datepicker--time-current-"+e,this.$timepicker).addClass("-focus-")},_onMouseOutRange:function(t){var e=n(t.target).attr("name");this.d.inFocus||n(".datepicker--time-current-"+e,this.$timepicker).removeClass("-focus-")},_onMouseUpRange:function(t){this.d.timepickerIsActive=!1}}}()},"/GqU":function(t,e,i){var n=i("RK3t"),s=i("HYAF");t.exports=function(t){return n(s(t))}},"/b8u":function(t,e,i){var n=i("STAE");t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},"/byt":function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},0:function(t,e,i){i("bUC5"),t.exports=i("pyCd")},"0BK2":function(t,e){t.exports={}},"0Dky":function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},"0GbY":function(t,e,i){var n=i("Qo9l"),s=i("2oRo"),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(n[t])||o(s[t]):n[t]&&n[t][e]||s[t]&&s[t][e]}},"0eef":function(t,e,i){"use strict";var n={}.propertyIsEnumerable,s=Object.getOwnPropertyDescriptor,o=s&&!n.call({1:2},1);e.f=o?function(t){var e=s(this,t);return!!e&&e.enumerable}:n},"14Sl":function(t,e,i){"use strict";i("rB9j");var n=i("busE"),s=i("0Dky"),o=i("tiKp"),r=i("kmMV"),a=i("kRJp"),l=o("species"),c=!s((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),u="$0"==="a".replace(/./,"$0"),d=o("replace"),p=!!/./[d]&&""===/./[d]("a","$0"),h=!s((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var i="ab".split(t);return 2!==i.length||"a"!==i[0]||"b"!==i[1]}));t.exports=function(t,e,i,d){var f=o(t),m=!s((function(){var e={};return e[f]=function(){return 7},7!=""[t](e)})),g=m&&!s((function(){var e=!1,i=/a/;return"split"===t&&((i={}).constructor={},i.constructor[l]=function(){return i},i.flags="",i[f]=/./[f]),i.exec=function(){return e=!0,null},i[f](""),!e}));if(!m||!g||"replace"===t&&(!c||!u||p)||"split"===t&&!h){var v=/./[f],y=i(f,""[t],(function(t,e,i,n,s){return e.exec===r?m&&!s?{done:!0,value:v.call(e,i,n)}:{done:!0,value:t.call(i,e,n)}:{done:!1}}),{REPLACE_KEEPS_$0:u,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),b=y[0],w=y[1];n(String.prototype,t,b),n(RegExp.prototype,f,2==e?function(t,e){return w.call(t,this,e)}:function(t){return w.call(t,this)})}d&&a(RegExp.prototype[f],"sham",!0)}},"1Y/n":function(t,e,i){var n=i("HAuM"),s=i("ewvW"),o=i("RK3t"),r=i("UMSQ"),a=function(t){return function(e,i,a,l){n(i);var c=s(e),u=o(c),d=r(c.length),p=t?d-1:0,h=t?-1:1;if(a<2)for(;;){if(p in u){l=u[p],p+=h;break}if(p+=h,t?p<0:d<=p)throw TypeError("Reduce of empty array with no initial value")}for(;t?p>=0:d>p;p+=h)p in u&&(l=i(l,u[p],p,c));return l}};t.exports={left:a(!1),right:a(!0)}},"2oRo":function(t,e,i){(function(e){var i=function(t){return t&&t.Math==Math&&t};t.exports=i("object"==typeof globalThis&&globalThis)||i("object"==typeof window&&window)||i("object"==typeof self&&self)||i("object"==typeof e&&e)||Function("return this")()}).call(this,i("yLpj"))},"5nEI":function(t,e,i){!function(e,i){"use strict";var n=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}();var s,o=!1,r=void 0!==e;r&&e.getComputedStyle?(s=i.createElement("div"),["","-webkit-","-moz-","-ms-"].some((function(t){try{s.style.position=t+"sticky"}catch(t){}return""!=s.style.position}))&&(o=!0)):o=!0;var a=!1,l="undefined"!=typeof ShadowRoot,c={top:null,left:null},u=[];function d(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])}function p(t){return parseFloat(t)||0}function h(t){for(var e=0;t;)e+=t.offsetTop,t=t.offsetParent;return e}var f=function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!(e instanceof HTMLElement))throw new Error("First argument must be HTMLElement");if(u.some((function(t){return t._node===e})))throw new Error("Stickyfill is already applied to this node");this._node=e,this._stickyMode=null,this._active=!1,u.push(this),this.refresh()}return n(t,[{key:"refresh",value:function(){if(!o&&!this._removed){this._active&&this._deactivate();var t=this._node,n=getComputedStyle(t),s={position:n.position,top:n.top,display:n.display,marginTop:n.marginTop,marginBottom:n.marginBottom,marginLeft:n.marginLeft,marginRight:n.marginRight,cssFloat:n.cssFloat};if(!isNaN(parseFloat(s.top))&&"table-cell"!=s.display&&"none"!=s.display){this._active=!0;var r=t.style.position;"sticky"!=n.position&&"-webkit-sticky"!=n.position||(t.style.position="static");var a=t.parentNode,c=l&&a instanceof ShadowRoot?a.host:a,u=t.getBoundingClientRect(),f=c.getBoundingClientRect(),m=getComputedStyle(c);this._parent={node:c,styles:{position:c.style.position},offsetHeight:c.offsetHeight},this._offsetToWindow={left:u.left,right:i.documentElement.clientWidth-u.right},this._offsetToParent={top:u.top-f.top-p(m.borderTopWidth),left:u.left-f.left-p(m.borderLeftWidth),right:-u.right+f.right-p(m.borderRightWidth)},this._styles={position:r,top:t.style.top,bottom:t.style.bottom,left:t.style.left,right:t.style.right,width:t.style.width,marginTop:t.style.marginTop,marginLeft:t.style.marginLeft,marginRight:t.style.marginRight};var g=p(s.top);this._limits={start:u.top+e.pageYOffset-g,end:f.top+e.pageYOffset+c.offsetHeight-p(m.borderBottomWidth)-t.offsetHeight-g-p(s.marginBottom)};var v=m.position;"absolute"!=v&&"relative"!=v&&(c.style.position="relative"),this._recalcPosition();var y=this._clone={};y.node=i.createElement("div"),d(y.node.style,{width:u.right-u.left+"px",height:u.bottom-u.top+"px",marginTop:s.marginTop,marginBottom:s.marginBottom,marginLeft:s.marginLeft,marginRight:s.marginRight,cssFloat:s.cssFloat,padding:0,border:0,borderSpacing:0,fontSize:"1em",position:"static"}),a.insertBefore(y.node,t),y.docOffsetTop=h(y.node)}}}},{key:"_recalcPosition",value:function(){if(this._active&&!this._removed){var t=c.top<=this._limits.start?"start":c.top>=this._limits.end?"end":"middle";if(this._stickyMode!=t){switch(t){case"start":d(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:this._offsetToParent.top+"px",bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"middle":d(this._node.style,{position:"fixed",left:this._offsetToWindow.left+"px",right:this._offsetToWindow.right+"px",top:this._styles.top,bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"end":d(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:"auto",bottom:0,width:"auto",marginLeft:0,marginRight:0})}this._stickyMode=t}}}},{key:"_fastCheck",value:function(){this._active&&!this._removed&&(Math.abs(h(this._clone.node)-this._clone.docOffsetTop)>1||Math.abs(this._parent.node.offsetHeight-this._parent.offsetHeight)>1)&&this.refresh()}},{key:"_deactivate",value:function(){var t=this;this._active&&!this._removed&&(this._clone.node.parentNode.removeChild(this._clone.node),delete this._clone,d(this._node.style,this._styles),delete this._styles,u.some((function(e){return e!==t&&e._parent&&e._parent.node===t._parent.node}))||d(this._parent.node.style,this._parent.styles),delete this._parent,this._stickyMode=null,this._active=!1,delete this._offsetToWindow,delete this._offsetToParent,delete this._limits)}},{key:"remove",value:function(){var t=this;this._deactivate(),u.some((function(e,i){if(e._node===t._node)return u.splice(i,1),!0})),this._removed=!0}}]),t}(),m={stickies:u,Sticky:f,forceSticky:function(){o=!1,g(),this.refreshAll()},addOne:function(t){if(!(t instanceof HTMLElement)){if(!t.length||!t[0])return;t=t[0]}for(var e=0;e<u.length;e++)if(u[e]._node===t)return u[e];return new f(t)},add:function(t){if(t instanceof HTMLElement&&(t=[t]),t.length){for(var e=[],i=function(i){var n=t[i];return n instanceof HTMLElement?u.some((function(t){if(t._node===n)return e.push(t),!0}))?"continue":void e.push(new f(n)):(e.push(void 0),"continue")},n=0;n<t.length;n++)i(n);return e}},refreshAll:function(){u.forEach((function(t){return t.refresh()}))},removeOne:function(t){if(!(t instanceof HTMLElement)){if(!t.length||!t[0])return;t=t[0]}u.some((function(e){if(e._node===t)return e.remove(),!0}))},remove:function(t){if(t instanceof HTMLElement&&(t=[t]),t.length)for(var e=function(e){var i=t[e];u.some((function(t){if(t._node===i)return t.remove(),!0}))},i=0;i<t.length;i++)e(i)},removeAll:function(){for(;u.length;)u[0].remove()}};function g(){if(!a){a=!0,o(),e.addEventListener("scroll",o),e.addEventListener("resize",m.refreshAll),e.addEventListener("orientationchange",m.refreshAll);var t=void 0,n=void 0,s=void 0;"hidden"in i?(n="hidden",s="visibilitychange"):"webkitHidden"in i&&(n="webkitHidden",s="webkitvisibilitychange"),s?(i[n]||r(),i.addEventListener(s,(function(){i[n]?clearInterval(t):r()}))):r()}function o(){e.pageXOffset!=c.left?(c.top=e.pageYOffset,c.left=e.pageXOffset,m.refreshAll()):e.pageYOffset!=c.top&&(c.top=e.pageYOffset,c.left=e.pageXOffset,u.forEach((function(t){return t._recalcPosition()})))}function r(){t=setInterval((function(){u.forEach((function(t){return t._fastCheck()}))}),500)}}o||g(),t.exports?t.exports=m:r&&(e.Stickyfill=m)}(window,document)},"6JNq":function(t,e,i){var n=i("UTVS"),s=i("Vu81"),o=i("Bs8V"),r=i("m/L8");t.exports=function(t,e){for(var i=s(e),a=r.f,l=o.f,c=0;c<i.length;c++){var u=i[c];n(t,u)||a(t,u,l(e,u))}}},"6LWA":function(t,e,i){var n=i("xrYK");t.exports=Array.isArray||function(t){return"Array"==n(t)}},"8yrV":function(t,e){function i(){$(".scroll-js").mCustomScrollbar({axis:"y",updateOnContentResize:!0,documentTouchScroll:!0})}$(document).ready((function(){$(".hirurgiya-page").length&&setTimeout((function(){$.magnificPopup.open({items:{src:"#popup-info"},type:"inline"},0)}),2e3),$(".popup-gallery").length&&$("body").swipe({swipeLeft:function(t,e,i,n,s){$(".mfp-arrow-right").magnificPopup("next")},swipeRight:function(){$(".mfp-arrow-left").magnificPopup("prev")},threshold:50}),$(".specialists-experience").length&&$(".specialists-experience").matchHeight({byRow:!1}),$(".up_button").click((function(){return $("html, body").animate({scrollTop:0},1e3),!1})),$(".burger-menu").on("click",(function(){$(".menu__icon").toggleClass("open"),$(".header-menu").toggleClass("open"),$("body").toggleClass("overflow"),$("html").toggleClass("not-overflow")})),$(document).on("click",".header-menu.open",(function(){$(".menu__icon").removeClass("open"),$(".header-menu").removeClass("open"),$("body").removeClass("overflow"),$("html").removeClass("not-overflow")})),$(".header-menu-wrap").on("click",(function(t){t.stopPropagation()}));var t=document.querySelectorAll(".description");if(t&&Array.prototype.forEach.call(t,(function(t,e){var i=t.querySelectorAll("img");i&&Array.prototype.forEach.call(i,(function(t,e){var i=t.style.float;"left"==i?t.classList.add("margin-left-none"):"right"==i&&t.classList.add("margin-right-none")}))})),$(".price-page").length&&($(document).on("click",".tab-link",(function(t){var e=$(".main-section-title").offset().top,i=$(this).attr("data-tab"),n=$(this).closest(".tabs-container");"all"==i?(n.find(".tab-link").removeClass("active"),$(this).addClass("active"),$(".tab-content").fadeIn(),$(window).scrollTop()>e&&$("html, body").animate({scrollTop:$(".main-section-title").offset().top-40},500)):(n.find(".tab-link").removeClass("active"),$(this).addClass("active"),n.find(".tab-content").hide(),$("#"+i).fadeIn(),0!=$("#"+i).length&&$(window).scrollTop()>e&&$("html, body").animate({scrollTop:$(".main-section-title").offset().top-40},500))})),$(document).on("click",".tab-mobile-link",(function(t){var e=$(this).attr("data-tab"),i=$(this).closest(".tabs-container");"all"==e?(i.find(".tab-mobile-link").removeClass("active"),$(this).addClass("active"),i.find(".tab-content").fadeIn(),$(".active-tab-mobile-text").html($(".tab-mobile-link.active").text()),$(".active-tab-mobile").toggleClass("active"),$(".tabs").slideToggle()):(i.find(".tab-mobile-link").removeClass("active"),$(this).addClass("active"),i.find(".tab-content").hide(),$("#"+e).fadeIn(),$(".active-tab-mobile-text").html($(".tab-mobile-link.active").text()),$(".active-tab-mobile").toggleClass("active"),$(".tabs").slideToggle())}))),($(".search_page").length||$(".offers-tab").length)&&function(){var t=$(".tabs li").first(),e=$(this).closest(".tabs-container"),i=t.attr("data-tab");t.addClass("active"),e.find(".tab-content").hide(),$("#"+i).fadeIn(),1==$("#"+i).find(".mobile-slider-js").is(".slick-slider")&&($(".mobile-slider-js").slick("destroy"),$(".mobile-slider-js").slick("refresh")),$(document).on("click",".tab-link",(function(t){var e=$(this).attr("data-tab"),i=$(this).closest(".tabs-container");i.find(".tab-link").removeClass("active"),$(this).addClass("active"),i.find(".tab-content").hide(),$("#"+e).fadeIn()})),$(document).on("click",".tab-mobile-link",(function(t){var e=$(this).attr("data-tab"),i=$(this).closest(".tabs-container");i.find(".tab-mobile-link").removeClass("active"),$(this).addClass("active"),i.find(".tab-content").hide(),$("#"+e).fadeIn(),1==$("#"+e).find(".mobile-slider-js").is(".slick-slider")&&($(".mobile-slider-js").slick("destroy"),$(".mobile-slider-js").slick("refresh")),$(".active-tab-mobile-text").html($(".tab-mobile-link.active").text()),$(".active-tab-mobile").toggleClass("active"),$(".tabs").slideToggle()}))}(),$(".active-tab-mobile").click((function(t){$(this).toggleClass("active"),$(".tabs").slideToggle()})),$(".selectric").length&&$(".selectric").selectric({disableOnMobile:!1,nativeOnMobile:!1}),$(".scroll-js").length&&i(),$(".scroll-bnt-js").length&&$(".scroll-bnt-js").click((function(){var t=$(this).attr("data-id");$("html, body").animate({scrollTop:$("."+t).offset().top-30},500)})),$(".popup-gallery").length&&$(".popup-gallery").each((function(){$(this).magnificPopup({delegate:"a",type:"image",mainClass:"mfp-img-mobile",gallery:{enabled:!0,navigateByImgClick:!0,preload:[0,1]}})})),$(".sticky").length){var e=$(".sticky");Stickyfill.add(e)}if($(".header-search-btn").click((function(){var t=$(this);t.hasClass("active")?(t.removeClass("active"),$(".search-dropdown").slideUp(200),$(".overlay").removeClass("active"),$(".overlay.active").unbind("click")):(t.addClass("active"),$(".search-dropdown").slideDown(200),$(".overlay").addClass("active")),setTimeout((function(){$(".search-input").focus(),$(".overlay.active").click((function(e){$(e.target).is(".overlay.active")&&(t.removeClass("active"),$(".search-dropdown").slideUp(200),$(".overlay").removeClass("active"),$(".overlay.active").unbind("click"))}))}),300),$(document).one("keydown",(function(e){27==e.keyCode&&(t.removeClass("active"),$(".search-dropdown").slideUp(200),$(".overlay").removeClass("active"),$(".overlay.active").unbind("click"))}))})),$(".object-fit-js").length){var n=$(".object-fit-js");objectFitPolyfill(n)}$(".all_price_js").length&&$(".all_price_js").click((function(t){var e=$(this).prev();e.find(".price-item:not(.visible)").slideToggle((function(){e.find("li:not(.visible)").toggleClass("hide")})),$(this).children(".visible-text").toggleClass("text-hide"),$(this).children(".hide-text").toggleClass("text-hide")})),$(".all_diploms_js").length&&$(".all_diploms_js").click((function(t){var e=$(this).prev();e.find(".gallery-item:not(.visible)").slideToggle((function(){e.find("a:not(.visible)").toggleClass("hide")})),$(this).children(".visible-text").toggleClass("text-hide"),$(this).children(".hide-text").toggleClass("text-hide")})),$(".faq-question").length&&$(".faq-question").on("click",(function(t){var e=$(this).closest(".faq-item").find(".faq-answer"),i=$(this).closest(".faq-item").find(".faq-icon");$(this).toggleClass("active"),$(this).hasClass("active")?(i.addClass("active"),e.slideDown(200)):(i.removeClass("active"),e.slideUp(200))})),$(".spoiler").length&&$(".spoiler").on("click",(function(t){var e=$(this).find(".spoiler-content"),i=$(this).find(".spoiler-toggle");$(this).toggleClass("active"),$(this).hasClass("active")?(i.addClass("active"),e.slideDown(200)):(i.removeClass("active"),e.slideUp(200))}))})),$(window).on("load resize",(function(){if(window.innerWidth<1025){if($(".has-submenu-services .header-menu-link").hasClass("header-menu-link-js")||($(".has-submenu-services .header-menu-link").addClass("header-menu-link-js"),$(".header-menu-link-js").on("click",(function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".has-submenu-services").find(".header-submenu-services-wrap");$(this).hasClass("active")?($(this).removeClass("active"),e.slideUp(200)):($(this).addClass("active"),e.slideDown(200))}))),$(".header-submenu-services-title").hasClass("submenu-services-js")||($(".header-submenu-services-title").addClass("submenu-services-js"),$(".submenu-services-js").on("click",(function(t){var e=$(this).closest(".header-submenu-services-item").find(".header-submenu-services-list");$(this).toggleClass("active"),$(this).hasClass("active")?e.slideDown(200):e.slideUp(200)}))),$(".sticky-with-hiden").length){var t=$(".sticky-with-hiden");Stickyfill.remove(t)}if($(".unit-block-img").length)$(".unit-block-img-wrap .unit-block-img").insertAfter($(".unit-block-title-js"));$(".scroll-js").length&&$(".scroll-js").hasClass("mCustomScrollbar")&&$(".scroll-js").mCustomScrollbar("destroy"),$(".tabs").length&&($(".tabs").each((function(){if($(this).find("li").removeClass("tab-link").addClass("tab-mobile-link").hasClass("active"));else{var t=$(this).find(".tab-mobile-link").first();$(this).closest(".tabs-container"),t.attr("data-tab");t.addClass("active")}})),$(".active-tab-mobile-text").html($(".tab-mobile-link.active").text()))}else{if($(".has-submenu-services .header-menu-link").hasClass("header-menu-link-js")&&($(".header-menu-link-js").unbind("click"),$(".has-submenu-services .header-menu-link").removeClass("header-menu-link-js active"),$(".header-submenu-services-wrap").css("display","")),$(".header-submenu-services-title").hasClass("submenu-services-js")&&($(".submenu-services-js").unbind("click"),$(".header-submenu-services-title").removeClass("submenu-services-js"),$(".header-submenu-services-list").css("display","")),$(".header-submenu-services-title").unbind("click"),$(".sticky-with-hiden").length){Stickyfill.forceSticky();t=$(".sticky-with-hiden");Stickyfill.add(t)}if($(".unit-block-img").length)$(".unit-block-info .unit-block-img").appendTo($(".sticky"));$(".scroll-js").length&&$(".scroll-js").hasClass("mCS_destroyed")&&i(),$(".tabs").length&&($(".tabs").css("display",""),$(".tabs").each((function(){if($(this).find("li").removeClass("tab-mobile-link").addClass("tab-link").hasClass("active"));else{var t=$(this).find(".tab-link").first();$(this).closest(".tabs-container"),t.attr("data-tab");t.addClass("active")}})))}if(window.innerWidth<767){if($(".main-section-title-wrap .btn-arrow").length){var e=$(".main-section-title-wrap .btn-arrow");$(e).each((function(){$(this).closest(".main-section").find(".btn-wrap").append($(this))}))}}else if($(".btn-wrap .btn-arrow").length){e=$(".btn-wrap .btn-arrow");$(e).each((function(){$(this).closest(".main-section").find(".main-section-title-wrap").append($(this))}))}window.innerWidth<401?$(".special-action-info").length&&$(".special-action-info").matchHeight({remove:!0}):$(".special-action-info").length&&!$(".special-action-info").attr("style")&&$(".special-action-info").matchHeight()})),$(window).on("load scroll",(function(){$(this).scrollTop()>100?$(".up_button").addClass("visible").fadeIn():$(".up_button").removeClass("visible").fadeOut()}))},"93I0":function(t,e,i){var n=i("VpIT"),s=i("kOOl"),o=n("keys");t.exports=function(t){return o[t]||(o[t]=s(t))}},A2ZE:function(t,e,i){var n=i("HAuM");t.exports=function(t,e,i){if(n(t),void 0===e)return t;switch(i){case 0:return function(){return t.call(e)};case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,s){return t.call(e,i,n,s)}}return function(){return t.apply(e,arguments)}}},AxL3:function(t,e){var i=!("undefined"==typeof window||!window.document||!window.document.createElement);t.exports=i},BFHv:function(t,e,i){var n,s,o;!function(r){"use strict";s=[i("EVdn")],void 0===(o="function"==typeof(n=function(t){var e=-1,i=-1,n=function(t){return parseFloat(t)||0},s=function(e){var i=t(e),s=null,o=[];return i.each((function(){var e=t(this),i=e.offset().top-n(e.css("margin-top")),r=o.length>0?o[o.length-1]:null;null===r?o.push(e):Math.floor(Math.abs(s-i))<=1?o[o.length-1]=r.add(e):o.push(e),s=i})),o},o=function(e){var i={byRow:!0,property:"height",target:null,remove:!1};return"object"==typeof e?t.extend(i,e):("boolean"==typeof e?i.byRow=e:"remove"===e&&(i.remove=!0),i)},r=t.fn.matchHeight=function(e){var i=o(e);if(i.remove){var n=this;return this.css(i.property,""),t.each(r._groups,(function(t,e){e.elements=e.elements.not(n)})),this}return this.length<=1&&!i.target||(r._groups.push({elements:this,options:i}),r._apply(this,i)),this};r.version="0.7.2",r._groups=[],r._throttle=80,r._maintainScroll=!1,r._beforeUpdate=null,r._afterUpdate=null,r._rows=s,r._parse=n,r._parseOptions=o,r._apply=function(e,i){var a=o(i),l=t(e),c=[l],u=t(window).scrollTop(),d=t("html").outerHeight(!0),p=l.parents().filter(":hidden");return p.each((function(){var e=t(this);e.data("style-cache",e.attr("style"))})),p.css("display","block"),a.byRow&&!a.target&&(l.each((function(){var e=t(this),i=e.css("display");"inline-block"!==i&&"flex"!==i&&"inline-flex"!==i&&(i="block"),e.data("style-cache",e.attr("style")),e.css({display:i,"padding-top":"0","padding-bottom":"0","margin-top":"0","margin-bottom":"0","border-top-width":"0","border-bottom-width":"0",height:"100px",overflow:"hidden"})})),c=s(l),l.each((function(){var e=t(this);e.attr("style",e.data("style-cache")||"")}))),t.each(c,(function(e,i){var s=t(i),o=0;if(a.target)o=a.target.outerHeight(!1);else{if(a.byRow&&s.length<=1)return void s.css(a.property,"");s.each((function(){var e=t(this),i=e.attr("style"),n=e.css("display");"inline-block"!==n&&"flex"!==n&&"inline-flex"!==n&&(n="block");var s={display:n};s[a.property]="",e.css(s),e.outerHeight(!1)>o&&(o=e.outerHeight(!1)),i?e.attr("style",i):e.css("display","")}))}s.each((function(){var e=t(this),i=0;a.target&&e.is(a.target)||("border-box"!==e.css("box-sizing")&&(i+=n(e.css("border-top-width"))+n(e.css("border-bottom-width")),i+=n(e.css("padding-top"))+n(e.css("padding-bottom"))),e.css(a.property,o-i+"px"))}))})),p.each((function(){var e=t(this);e.attr("style",e.data("style-cache")||null)})),r._maintainScroll&&t(window).scrollTop(u/d*t("html").outerHeight(!0)),this},r._applyDataApi=function(){var e={};t("[data-match-height], [data-mh]").each((function(){var i=t(this),n=i.attr("data-mh")||i.attr("data-match-height");e[n]=n in e?e[n].add(i):i})),t.each(e,(function(){this.matchHeight(!0)}))};var a=function(e){r._beforeUpdate&&r._beforeUpdate(e,r._groups),t.each(r._groups,(function(){r._apply(this.elements,this.options)})),r._afterUpdate&&r._afterUpdate(e,r._groups)};r._update=function(n,s){if(s&&"resize"===s.type){var o=t(window).width();if(o===e)return;e=o}n?-1===i&&(i=setTimeout((function(){a(s),i=-1}),r._throttle)):a(s)},t(r._applyDataApi);var l=t.fn.on?"on":"bind";t(window)[l]("load",(function(t){r._update(!1,t)})),t(window)[l]("resize orientationchange",(function(t){r._update(!0,t)}))})?n.apply(e,s):n)||(t.exports=o)}()},Bs8V:function(t,e,i){var n=i("g6v/"),s=i("0eef"),o=i("XGwC"),r=i("/GqU"),a=i("wE6v"),l=i("UTVS"),c=i("DPsx"),u=Object.getOwnPropertyDescriptor;e.f=n?u:function(t,e){if(t=r(t),e=a(e,!0),c)try{return u(t,e)}catch(t){}if(l(t,e))return o(!s.f.call(t,e),t[e])}},DPsx:function(t,e,i){var n=i("g6v/"),s=i("0Dky"),o=i("zBJ4");t.exports=!n&&!s((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},E9XD:function(t,e,i){"use strict";var n=i("I+eb"),s=i("1Y/n").left,o=i("pkCn"),r=i("rkAj"),a=o("reduce"),l=r("reduce",{1:0});n({target:"Array",proto:!0,forced:!a||!l},{reduce:function(t){return s(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},EVdn:function(t,e,i){var n;!function(e,i){"use strict";"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,(function(i,s){"use strict";var o=[],r=Object.getPrototypeOf,a=o.slice,l=o.flat?function(t){return o.flat.call(t)}:function(t){return o.concat.apply([],t)},c=o.push,u=o.indexOf,d={},p=d.toString,h=d.hasOwnProperty,f=h.toString,m=f.call(Object),g={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function(t){return null!=t&&t===t.window},b=i.document,w={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,i){var n,s,o=(i=i||b).createElement("script");if(o.text=t,e)for(n in w)(s=e[n]||e.getAttribute&&e.getAttribute(n))&&o.setAttribute(n,s);i.head.appendChild(o).parentNode.removeChild(o)}function k(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?d[p.call(t)]||"object":typeof t}var C=function(t,e){return new C.fn.init(t,e)};function T(t){var e=!!t&&"length"in t&&t.length,i=k(t);return!v(t)&&!y(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}C.fn=C.prototype={jquery:"3.5.1",constructor:C,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=C.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return C.each(this,t)},map:function(t){return this.pushStack(C.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(C.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},C.extend=C.fn.extend=function(){var t,e,i,n,s,o,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||v(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(c&&n&&(C.isPlainObject(n)||(s=Array.isArray(n)))?(i=r[e],o=s&&!Array.isArray(i)?[]:s||C.isPlainObject(i)?i:{},s=!1,r[e]=C.extend(c,o,n)):void 0!==n&&(r[e]=n));return r},C.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==p.call(t))&&(!(e=r(t))||"function"==typeof(i=h.call(e,"constructor")&&e.constructor)&&f.call(i)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){x(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(T(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(T(Object(t))?C.merge(i,"string"==typeof t?[t]:t):c.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:u.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;n<i;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n=[],s=0,o=t.length,r=!i;s<o;s++)!e(t[s],s)!==r&&n.push(t[s]);return n},map:function(t,e,i){var n,s,o=0,r=[];if(T(t))for(n=t.length;o<n;o++)null!=(s=e(t[o],o,i))&&r.push(s);else for(o in t)null!=(s=e(t[o],o,i))&&r.push(s);return l(r)},guid:1,support:g}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=o[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){d["[object "+e+"]"]=e.toLowerCase()}));var S=function(t){var e,i,n,s,o,r,a,l,c,u,d,p,h,f,m,g,v,y,b,w="sizzle"+1*new Date,x=t.document,k=0,C=0,T=lt(),S=lt(),$=lt(),E=lt(),D=function(t,e){return t===e&&(d=!0),0},_={}.hasOwnProperty,A=[],M=A.pop,O=A.push,P=A.push,j=A.slice,L=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+N+"*("+R+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+N+"*\\]",F=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",z=new RegExp(N+"+","g"),W=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),q=new RegExp("^"+N+"*,"+N+"*"),B=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),U=new RegExp(N+"|>"),V=new RegExp(F),Y=new RegExp("^"+R+"$"),X={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\([^\\r\\n\\f])","g"),it=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){p()},rt=wt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{P.apply(A=j.call(x.childNodes),x.childNodes),A[x.childNodes.length].nodeType}catch(t){P={apply:A.length?function(t,e){O.apply(t,j.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function at(t,e,n,s){var o,a,c,u,d,f,v,y=e&&e.ownerDocument,x=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==x&&9!==x&&11!==x)return n;if(!s&&(p(e),e=e||h,m)){if(11!==x&&(d=Z.exec(t)))if(o=d[1]){if(9===x){if(!(c=e.getElementById(o)))return n;if(c.id===o)return n.push(c),n}else if(y&&(c=y.getElementById(o))&&b(e,c)&&c.id===o)return n.push(c),n}else{if(d[2])return P.apply(n,e.getElementsByTagName(t)),n;if((o=d[3])&&i.getElementsByClassName&&e.getElementsByClassName)return P.apply(n,e.getElementsByClassName(o)),n}if(i.qsa&&!E[t+" "]&&(!g||!g.test(t))&&(1!==x||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===x&&(U.test(t)||B.test(t))){for((y=tt.test(t)&&vt(e.parentNode)||e)===e&&i.scope||((u=e.getAttribute("id"))?u=u.replace(nt,st):e.setAttribute("id",u=w)),a=(f=r(t)).length;a--;)f[a]=(u?"#"+u:":scope")+" "+bt(f[a]);v=f.join(",")}try{return P.apply(n,y.querySelectorAll(v)),n}catch(e){E(t,!0)}finally{u===w&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,n,s)}function lt(){var t=[];return function e(i,s){return t.push(i+" ")>n.cacheLength&&delete e[t.shift()],e[i+" "]=s}}function ct(t){return t[w]=!0,t}function ut(t){var e=h.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function dt(t,e){for(var i=t.split("|"),s=i.length;s--;)n.attrHandle[i[s]]=e}function pt(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function ht(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function mt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function gt(t){return ct((function(e){return e=+e,ct((function(i,n){for(var s,o=t([],i.length,e),r=o.length;r--;)i[s=o[r]]&&(i[s]=!(n[s]=i[s]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in i=at.support={},o=at.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!G.test(e||i&&i.nodeName||"HTML")},p=at.setDocument=function(t){var e,s,r=t?t.ownerDocument||t:x;return r!=h&&9===r.nodeType&&r.documentElement?(f=(h=r).documentElement,m=!o(h),x!=h&&(s=h.defaultView)&&s.top!==s&&(s.addEventListener?s.addEventListener("unload",ot,!1):s.attachEvent&&s.attachEvent("onunload",ot)),i.scope=ut((function(t){return f.appendChild(t).appendChild(h.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),i.attributes=ut((function(t){return t.className="i",!t.getAttribute("className")})),i.getElementsByTagName=ut((function(t){return t.appendChild(h.createComment("")),!t.getElementsByTagName("*").length})),i.getElementsByClassName=J.test(h.getElementsByClassName),i.getById=ut((function(t){return f.appendChild(t).id=w,!h.getElementsByName||!h.getElementsByName(w).length})),i.getById?(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var i=e.getElementById(t);return i?[i]:[]}}):(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var i,n,s,o=e.getElementById(t);if(o){if((i=o.getAttributeNode("id"))&&i.value===t)return[o];for(s=e.getElementsByName(t),n=0;o=s[n++];)if((i=o.getAttributeNode("id"))&&i.value===t)return[o]}return[]}}),n.find.TAG=i.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):i.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],s=0,o=e.getElementsByTagName(t);if("*"===t){for(;i=o[s++];)1===i.nodeType&&n.push(i);return n}return o},n.find.CLASS=i.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&m)return e.getElementsByClassName(t)},v=[],g=[],(i.qsa=J.test(h.querySelectorAll))&&(ut((function(t){var e;f.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+N+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+N+"*(?:value|"+I+")"),t.querySelectorAll("[id~="+w+"-]").length||g.push("~="),(e=h.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\["+N+"*name"+N+"*="+N+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ut((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=h.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+N+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")}))),(i.matchesSelector=J.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut((function(t){i.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",F)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(f.compareDocumentPosition),b=e||J.test(f.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},D=e?function(t,e){if(t===e)return d=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!i.sortDetached&&e.compareDocumentPosition(t)===n?t==h||t.ownerDocument==x&&b(x,t)?-1:e==h||e.ownerDocument==x&&b(x,e)?1:u?L(u,t)-L(u,e):0:4&n?-1:1)}:function(t,e){if(t===e)return d=!0,0;var i,n=0,s=t.parentNode,o=e.parentNode,r=[t],a=[e];if(!s||!o)return t==h?-1:e==h?1:s?-1:o?1:u?L(u,t)-L(u,e):0;if(s===o)return pt(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?pt(r[n],a[n]):r[n]==x?-1:a[n]==x?1:0},h):h},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(p(t),i.matchesSelector&&m&&!E[e+" "]&&(!v||!v.test(e))&&(!g||!g.test(e)))try{var n=y.call(t,e);if(n||i.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){E(e,!0)}return at(e,h,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!=h&&p(t),b(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=h&&p(t);var s=n.attrHandle[e.toLowerCase()],o=s&&_.call(n.attrHandle,e.toLowerCase())?s(t,e,!m):void 0;return void 0!==o?o:i.attributes||!m?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(nt,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,n=[],s=0,o=0;if(d=!i.detectDuplicates,u=!i.sortStable&&t.slice(0),t.sort(D),d){for(;e=t[o++];)e===t[o]&&(s=n.push(o));for(;s--;)t.splice(n[s],1)}return u=null,t},s=at.getText=function(t){var e,i="",n=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[n++];)i+=s(e);return i},(n=at.selectors={cacheLength:50,createPseudo:ct,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,it),t[3]=(t[3]||t[4]||t[5]||"").replace(et,it),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&V.test(i)&&(e=r(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,it).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=T[t+" "];return e||(e=new RegExp("(^|"+N+")"+t+"("+N+"|$)"))&&T(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var s=at.attr(n,t);return null==s?"!="===e:!e||(s+="","="===e?s===i:"!="===e?s!==i:"^="===e?i&&0===s.indexOf(i):"*="===e?i&&s.indexOf(i)>-1:"$="===e?i&&s.slice(-i.length)===i:"~="===e?(" "+s.replace(z," ")+" ").indexOf(i)>-1:"|="===e&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var c,u,d,p,h,f,m=o!==r?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(o){for(;m;){for(p=e;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(b=(h=(c=(u=(d=(p=g)[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[t]||[])[0]===k&&c[1])&&c[2],p=h&&g.childNodes[h];p=++h&&p&&p[m]||(b=h=0)||f.pop();)if(1===p.nodeType&&++b&&p===e){u[t]=[k,h,b];break}}else if(y&&(b=h=(c=(u=(d=(p=e)[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[t]||[])[0]===k&&c[1]),!1===b)for(;(p=++h&&p&&p[m]||(b=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((u=(d=p[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[t]=[k,b]),p!==e)););return(b-=s)===n||b%n==0&&b/n>=0}}},PSEUDO:function(t,e){var i,s=n.pseudos[t]||n.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return s[w]?s(e):s.length>1?(i=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,i){for(var n,o=s(t,e),r=o.length;r--;)t[n=L(t,o[r])]=!(i[n]=o[r])})):function(t){return s(t,0,i)}):s}},pseudos:{not:ct((function(t){var e=[],i=[],n=a(t.replace(W,"$1"));return n[w]?ct((function(t,e,i,s){for(var o,r=n(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))})):function(t,s,o){return e[0]=t,n(e,null,o,i),e[0]=null,!i.pop()}})),has:ct((function(t){return function(e){return at(t,e).length>0}})),contains:ct((function(t){return t=t.replace(et,it),function(e){return(e.textContent||s(e)).indexOf(t)>-1}})),lang:ct((function(t){return Y.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,it).toLowerCase(),function(e){var i;do{if(i=m?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:mt(!1),disabled:mt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt((function(){return[0]})),last:gt((function(t,e){return[e-1]})),eq:gt((function(t,e,i){return[i<0?i+e:i]})),even:gt((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:gt((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:gt((function(t,e,i){for(var n=i<0?i+e:i>e?e:i;--n>=0;)t.push(n);return t})),gt:gt((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=ht(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=ft(e);function yt(){}function bt(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function wt(t,e,i){var n=e.dir,s=e.next,o=s||n,r=i&&"parentNode"===o,a=C++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||r)return t(e,i,s);return!1}:function(e,i,l){var c,u,d,p=[k,a];if(l){for(;e=e[n];)if((1===e.nodeType||r)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||r)if(u=(d=e[w]||(e[w]={}))[e.uniqueID]||(d[e.uniqueID]={}),s&&s===e.nodeName.toLowerCase())e=e[n]||e;else{if((c=u[o])&&c[0]===k&&c[1]===a)return p[2]=c[2];if(u[o]=p,p[2]=t(e,i,l))return!0}return!1}}function xt(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function kt(t,e,i,n,s){for(var o,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,n,s)||(r.push(o),c&&e.push(a)));return r}function Ct(t,e,i,n,s,o){return n&&!n[w]&&(n=Ct(n)),s&&!s[w]&&(s=Ct(s,o)),ct((function(o,r,a,l){var c,u,d,p=[],h=[],f=r.length,m=o||function(t,e,i){for(var n=0,s=e.length;n<s;n++)at(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),g=!t||!o&&e?m:kt(m,p,t,a,l),v=i?s||(o?t:f||n)?[]:r:g;if(i&&i(g,v,a,l),n)for(c=kt(v,h),n(c,[],a,l),u=c.length;u--;)(d=c[u])&&(v[h[u]]=!(g[h[u]]=d));if(o){if(s||t){if(s){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(g[u]=d);s(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&(c=s?L(o,d):p[u])>-1&&(o[c]=!(r[c]=d))}}else v=kt(v===r?v.splice(f,v.length):v),s?s(null,r,v,l):P.apply(r,v)}))}function Tt(t){for(var e,i,s,o=t.length,r=n.relative[t[0].type],a=r||n.relative[" "],l=r?1:0,u=wt((function(t){return t===e}),a,!0),d=wt((function(t){return L(e,t)>-1}),a,!0),p=[function(t,i,n){var s=!r&&(n||i!==c)||((e=i).nodeType?u(t,i,n):d(t,i,n));return e=null,s}];l<o;l++)if(i=n.relative[t[l].type])p=[wt(xt(p),i)];else{if((i=n.filter[t[l].type].apply(null,t[l].matches))[w]){for(s=++l;s<o&&!n.relative[t[s].type];s++);return Ct(l>1&&xt(p),l>1&&bt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),i,l<s&&Tt(t.slice(l,s)),s<o&&Tt(t=t.slice(s)),s<o&&bt(t))}p.push(i)}return xt(p)}return yt.prototype=n.filters=n.pseudos,n.setFilters=new yt,r=at.tokenize=function(t,e){var i,s,o,r,a,l,c,u=S[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],c=n.preFilter;a;){for(r in i&&!(s=q.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),i=!1,(s=B.exec(a))&&(i=s.shift(),o.push({value:i,type:s[0].replace(W," ")}),a=a.slice(i.length)),n.filter)!(s=X[r].exec(a))||c[r]&&!(s=c[r](s))||(i=s.shift(),o.push({value:i,type:r,matches:s}),a=a.slice(i.length));if(!i)break}return e?a.length:a?at.error(t):S(t,l).slice(0)},a=at.compile=function(t,e){var i,s=[],o=[],a=$[t+" "];if(!a){for(e||(e=r(t)),i=e.length;i--;)(a=Tt(e[i]))[w]?s.push(a):o.push(a);(a=$(t,function(t,e){var i=e.length>0,s=t.length>0,o=function(o,r,a,l,u){var d,f,g,v=0,y="0",b=o&&[],w=[],x=c,C=o||s&&n.find.TAG("*",u),T=k+=null==x?1:Math.random()||.1,S=C.length;for(u&&(c=r==h||r||u);y!==S&&null!=(d=C[y]);y++){if(s&&d){for(f=0,r||d.ownerDocument==h||(p(d),a=!m);g=t[f++];)if(g(d,r||h,a)){l.push(d);break}u&&(k=T)}i&&((d=!g&&d)&&v--,o&&b.push(d))}if(v+=y,i&&y!==v){for(f=0;g=e[f++];)g(b,w,r,a);if(o){if(v>0)for(;y--;)b[y]||w[y]||(w[y]=M.call(l));w=kt(w)}P.apply(l,w),u&&!o&&w.length>0&&v+e.length>1&&at.uniqueSort(l)}return u&&(k=T,c=x),b};return i?ct(o):o}(o,s))).selector=t}return a},l=at.select=function(t,e,i,s){var o,l,c,u,d,p="function"==typeof t&&t,h=!s&&r(t=p.selector||t);if(i=i||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&m&&n.relative[l[1].type]){if(!(e=(n.find.ID(c.matches[0].replace(et,it),e)||[])[0]))return i;p&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(o=X.needsContext.test(t)?0:l.length;o--&&(c=l[o],!n.relative[u=c.type]);)if((d=n.find[u])&&(s=d(c.matches[0].replace(et,it),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(o,1),!(t=s.length&&bt(l)))return P.apply(i,s),i;break}}return(p||a(t,h))(s,e,!m,i,!e||tt.test(t)&&vt(e.parentNode)||e),i},i.sortStable=w.split("").sort(D).join("")===w,i.detectDuplicates=!!d,p(),i.sortDetached=ut((function(t){return 1&t.compareDocumentPosition(h.createElement("fieldset"))})),ut((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||dt("type|href|height|width",(function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),i.attributes&&ut((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||dt("value",(function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ut((function(t){return null==t.getAttribute("disabled")}))||dt(I,(function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null})),at}(i);C.find=S,C.expr=S.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=S.uniqueSort,C.text=S.getText,C.isXMLDoc=S.isXML,C.contains=S.contains,C.escapeSelector=S.escape;var $=function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&C(t).is(i))break;n.push(t)}return n},E=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},D=C.expr.match.needsContext;function _(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function M(t,e,i){return v(e)?C.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?C.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?C.grep(t,(function(t){return u.call(e,t)>-1!==i})):C.filter(e,t,i)}C.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?C.find.matchesSelector(n,t)?[n]:[]:C.find.matches(t,C.grep(e,(function(t){return 1===t.nodeType})))},C.fn.extend({find:function(t){var e,i,n=this.length,s=this;if("string"!=typeof t)return this.pushStack(C(t).filter((function(){for(e=0;e<n;e++)if(C.contains(s[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)C.find(t,s[e],i);return n>1?C.uniqueSort(i):i},filter:function(t){return this.pushStack(M(this,t||[],!1))},not:function(t){return this.pushStack(M(this,t||[],!0))},is:function(t){return!!M(this,"string"==typeof t&&D.test(t)?C(t):t||[],!1).length}});var O,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(t,e,i){var n,s;if(!t)return this;if(i=i||O,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:P.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof C?e[0]:e,C.merge(this,C.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:b,!0)),A.test(n[1])&&C.isPlainObject(e))for(n in e)v(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(s=b.getElementById(n[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==i.ready?i.ready(t):t(C):C.makeArray(t,this)}).prototype=C.fn,O=C(b);var j=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function I(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}C.fn.extend({has:function(t){var e=C(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(C.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,s=this.length,o=[],r="string"!=typeof t&&C(t);if(!D.test(t))for(;n<s;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&C.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?C.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?u.call(C(t),this[0]):u.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),C.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return $(t,"parentNode")},parentsUntil:function(t,e,i){return $(t,"parentNode",i)},next:function(t){return I(t,"nextSibling")},prev:function(t){return I(t,"previousSibling")},nextAll:function(t){return $(t,"nextSibling")},prevAll:function(t){return $(t,"previousSibling")},nextUntil:function(t,e,i){return $(t,"nextSibling",i)},prevUntil:function(t,e,i){return $(t,"previousSibling",i)},siblings:function(t){return E((t.parentNode||{}).firstChild,t)},children:function(t){return E(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(_(t,"template")&&(t=t.content||t),C.merge([],t.childNodes))}},(function(t,e){C.fn[t]=function(i,n){var s=C.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=C.filter(n,s)),this.length>1&&(L[t]||C.uniqueSort(s),j.test(t)&&s.reverse()),this.pushStack(s)}}));var N=/[^\x20\t\r\n\f]+/g;function R(t){return t}function H(t){throw t}function F(t,e,i,n){var s;try{t&&v(s=t.promise)?s.call(t).done(e).fail(i):t&&v(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}C.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return C.each(t.match(N)||[],(function(t,i){e[i]=!0})),e}(t):C.extend({},t);var e,i,n,s,o=[],r=[],a=-1,l=function(){for(s=s||t.once,n=e=!0;r.length;a=-1)for(i=r.shift();++a<o.length;)!1===o[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=o.length,i=!1);t.memory||(i=!1),e=!1,s&&(o=i?[]:"")},c={add:function(){return o&&(i&&!e&&(a=o.length-1,r.push(i)),function e(i){C.each(i,(function(i,n){v(n)?t.unique&&c.has(n)||o.push(n):n&&n.length&&"string"!==k(n)&&e(n)}))}(arguments),i&&!e&&l()),this},remove:function(){return C.each(arguments,(function(t,e){for(var i;(i=C.inArray(e,o,i))>-1;)o.splice(i,1),i<=a&&a--})),this},has:function(t){return t?C.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return s=r=[],o=i="",this},disabled:function(){return!o},lock:function(){return s=r=[],i||e||(o=i=""),this},locked:function(){return!!s},fireWith:function(t,i){return s||(i=[t,(i=i||[]).slice?i.slice():i],r.push(i),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},C.extend({Deferred:function(t){var e=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],n="pending",s={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return C.Deferred((function(i){C.each(e,(function(e,n){var s=v(t[n[4]])&&t[n[4]];o[n[1]]((function(){var t=s&&s.apply(this,arguments);t&&v(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,s?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,s){var o=0;function r(t,e,n,s){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(t<o)){if((i=n.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?s?c.call(i,r(o,e,R,s),r(o,e,H,s)):(o++,c.call(i,r(o,e,R,s),r(o,e,H,s),r(o,e,R,e.notifyWith))):(n!==R&&(a=void 0,l=[i]),(s||e.resolveWith)(a,l))}},u=s?c:function(){try{c()}catch(i){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(i,u.stackTrace),t+1>=o&&(n!==H&&(a=void 0,l=[i]),e.rejectWith(a,l))}};t?u():(C.Deferred.getStackHook&&(u.stackTrace=C.Deferred.getStackHook()),i.setTimeout(u))}}return C.Deferred((function(i){e[0][3].add(r(0,i,v(s)?s:R,i.notifyWith)),e[1][3].add(r(0,i,v(t)?t:R)),e[2][3].add(r(0,i,v(n)?n:H))})).promise()},promise:function(t){return null!=t?C.extend(t,s):s}},o={};return C.each(e,(function(t,i){var r=i[2],a=i[5];s[i[1]]=r.add,a&&r.add((function(){n=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),r.add(i[3].fire),o[i[0]]=function(){return o[i[0]+"With"](this===o?void 0:this,arguments),this},o[i[0]+"With"]=r.fireWith})),s.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,i=e,n=Array(i),s=a.call(arguments),o=C.Deferred(),r=function(t){return function(i){n[t]=this,s[t]=arguments.length>1?a.call(arguments):i,--e||o.resolveWith(n,s)}};if(e<=1&&(F(t,o.done(r(i)).resolve,o.reject,!e),"pending"===o.state()||v(s[i]&&s[i].then)))return o.then();for(;i--;)F(s[i],r(i),o.reject);return o.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(t,e){i.console&&i.console.warn&&t&&z.test(t.name)&&i.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},C.readyException=function(t){i.setTimeout((function(){throw t}))};var W=C.Deferred();function q(){b.removeEventListener("DOMContentLoaded",q),i.removeEventListener("load",q),C.ready()}C.fn.ready=function(t){return W.then(t).catch((function(t){C.readyException(t)})),this},C.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==t&&--C.readyWait>0||W.resolveWith(b,[C]))}}),C.ready.then=W.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(C.ready):(b.addEventListener("DOMContentLoaded",q),i.addEventListener("load",q));var B=function(t,e,i,n,s,o,r){var a=0,l=t.length,c=null==i;if("object"===k(i))for(a in s=!0,i)B(t,e,a,i[a],!0,o,r);else if(void 0!==n&&(s=!0,v(n)||(r=!0),c&&(r?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(C(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return s?t:c?e.call(t):l?e(t[0],i):o},U=/^-ms-/,V=/-([a-z])/g;function Y(t,e){return e.toUpperCase()}function X(t){return t.replace(U,"ms-").replace(V,Y)}var G=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function K(){this.expando=C.expando+K.uid++}K.uid=1,K.prototype={cache:function(t){var e=t[this.expando];return e||(e={},G(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,s=this.cache(t);if("string"==typeof e)s[X(e)]=i;else for(n in e)s[X(n)]=e[n];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(X):(e=X(e))in n?[e]:e.match(N)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||C.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!C.isEmptyObject(e)}};var Q=new K,J=new K,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,tt=/[A-Z]/g;function et(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(tt,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Z.test(t)?JSON.parse(t):t)}(i)}catch(t){}J.set(t,e,i)}else i=void 0;return i}C.extend({hasData:function(t){return J.hasData(t)||Q.hasData(t)},data:function(t,e,i){return J.access(t,e,i)},removeData:function(t,e){J.remove(t,e)},_data:function(t,e,i){return Q.access(t,e,i)},_removeData:function(t,e){Q.remove(t,e)}}),C.fn.extend({data:function(t,e){var i,n,s,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(s=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=X(n.slice(5)),et(o,n,s[n]));Q.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each((function(){J.set(this,t)})):B(this,(function(e){var i;if(o&&void 0===e)return void 0!==(i=J.get(o,t))||void 0!==(i=et(o,t))?i:void 0;this.each((function(){J.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){J.remove(this,t)}))}}),C.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=Q.get(t,e),i&&(!n||Array.isArray(i)?n=Q.access(t,e,C.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=C.queue(t,e),n=i.length,s=i.shift(),o=C._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete o.stop,s.call(t,(function(){C.dequeue(t,e)}),o)),!n&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Q.get(t,i)||Q.access(t,i,{empty:C.Callbacks("once memory").add((function(){Q.remove(t,[e+"queue",i])}))})}}),C.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?C.queue(this[0],t):void 0===e?this:this.each((function(){var i=C.queue(this,t,e);C._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&C.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){C.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=C.Deferred(),o=this,r=this.length,a=function(){--n||s.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=Q.get(o[r],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,nt=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),st=["Top","Right","Bottom","Left"],ot=b.documentElement,rt=function(t){return C.contains(t.ownerDocument,t)},at={composed:!0};ot.getRootNode&&(rt=function(t){return C.contains(t.ownerDocument,t)||t.getRootNode(at)===t.ownerDocument});var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&rt(t)&&"none"===C.css(t,"display")};function ct(t,e,i,n){var s,o,r=20,a=n?function(){return n.cur()}:function(){return C.css(t,e,"")},l=a(),c=i&&i[3]||(C.cssNumber[e]?"":"px"),u=t.nodeType&&(C.cssNumber[e]||"px"!==c&&+l)&&nt.exec(C.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;r--;)C.style(t,e,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(r=0),u/=o;u*=2,C.style(t,e,u+c),i=i||[]}return i&&(u=+u||+l||0,s=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=u,n.end=s)),s}var ut={};function dt(t){var e,i=t.ownerDocument,n=t.nodeName,s=ut[n];return s||(e=i.body.appendChild(i.createElement(n)),s=C.css(e,"display"),e.parentNode.removeChild(e),"none"===s&&(s="block"),ut[n]=s,s)}function pt(t,e){for(var i,n,s=[],o=0,r=t.length;o<r;o++)(n=t[o]).style&&(i=n.style.display,e?("none"===i&&(s[o]=Q.get(n,"display")||null,s[o]||(n.style.display="")),""===n.style.display&&lt(n)&&(s[o]=dt(n))):"none"!==i&&(s[o]="none",Q.set(n,"display",i)));for(o=0;o<r;o++)null!=s[o]&&(t[o].style.display=s[o]);return t}C.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){lt(this)?C(this).show():C(this).hide()}))}});var ht,ft,mt=/^(?:checkbox|radio)$/i,gt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,vt=/^$|^module$|\/(?:java|ecma)script/i;ht=b.createDocumentFragment().appendChild(b.createElement("div")),(ft=b.createElement("input")).setAttribute("type","radio"),ft.setAttribute("checked","checked"),ft.setAttribute("name","t"),ht.appendChild(ft),g.checkClone=ht.cloneNode(!0).cloneNode(!0).lastChild.checked,ht.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!ht.cloneNode(!0).lastChild.defaultValue,ht.innerHTML="<option></option>",g.option=!!ht.lastChild;var yt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function bt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&_(t,e)?C.merge([t],i):i}function wt(t,e){for(var i=0,n=t.length;i<n;i++)Q.set(t[i],"globalEval",!e||Q.get(e[i],"globalEval"))}yt.tbody=yt.tfoot=yt.colgroup=yt.caption=yt.thead,yt.th=yt.td,g.option||(yt.optgroup=yt.option=[1,"<select multiple='multiple'>","</select>"]);var xt=/<|&#?\w+;/;function kt(t,e,i,n,s){for(var o,r,a,l,c,u,d=e.createDocumentFragment(),p=[],h=0,f=t.length;h<f;h++)if((o=t[h])||0===o)if("object"===k(o))C.merge(p,o.nodeType?[o]:o);else if(xt.test(o)){for(r=r||d.appendChild(e.createElement("div")),a=(gt.exec(o)||["",""])[1].toLowerCase(),l=yt[a]||yt._default,r.innerHTML=l[1]+C.htmlPrefilter(o)+l[2],u=l[0];u--;)r=r.lastChild;C.merge(p,r.childNodes),(r=d.firstChild).textContent=""}else p.push(e.createTextNode(o));for(d.textContent="",h=0;o=p[h++];)if(n&&C.inArray(o,n)>-1)s&&s.push(o);else if(c=rt(o),r=bt(d.appendChild(o),"script"),c&&wt(r),i)for(u=0;o=r[u++];)vt.test(o.type||"")&&i.push(o);return d}var Ct=/^key/,Tt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,St=/^([^.]*)(?:\.(.+)|)/;function $t(){return!0}function Et(){return!1}function Dt(t,e){return t===function(){try{return b.activeElement}catch(t){}}()==("focus"===e)}function _t(t,e,i,n,s,o){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)_t(t,a,i,n,e[a],o);return t}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Et;else if(!s)return t;return 1===o&&(r=s,(s=function(t){return C().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=C.guid++)),t.each((function(){C.event.add(this,e,s,n,i)}))}function At(t,e,i){i?(Q.set(t,e,!1),C.event.add(t,e,{namespace:!1,handler:function(t){var n,s,o=Q.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(C.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=a.call(arguments),Q.set(this,e,o),n=i(this,e),this[e](),o!==(s=Q.get(this,e))||n?Q.set(this,e,!1):s={},o!==s)return t.stopImmediatePropagation(),t.preventDefault(),s.value}else o.length&&(Q.set(this,e,{value:C.event.trigger(C.extend(o[0],C.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Q.get(t,e)&&C.event.add(t,e,$t)}C.event={global:{},add:function(t,e,i,n,s){var o,r,a,l,c,u,d,p,h,f,m,g=Q.get(t);if(G(t))for(i.handler&&(i=(o=i).handler,s=o.selector),s&&C.find.matchesSelector(ot,s),i.guid||(i.guid=C.guid++),(l=g.events)||(l=g.events=Object.create(null)),(r=g.handle)||(r=g.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(N)||[""]).length;c--;)h=m=(a=St.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),h&&(d=C.event.special[h]||{},h=(s?d.delegateType:d.bindType)||h,d=C.event.special[h]||{},u=C.extend({type:h,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&C.expr.match.needsContext.test(s),namespace:f.join(".")},o),(p=l[h])||((p=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(h,r)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),s?p.splice(p.delegateCount++,0,u):p.push(u),C.event.global[h]=!0)},remove:function(t,e,i,n,s){var o,r,a,l,c,u,d,p,h,f,m,g=Q.hasData(t)&&Q.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(N)||[""]).length;c--;)if(h=m=(a=St.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),h){for(d=C.event.special[h]||{},p=l[h=(n?d.delegateType:d.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=p.length;o--;)u=p[o],!s&&m!==u.origType||i&&i.guid!==u.guid||a&&!a.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(t,u));r&&!p.length&&(d.teardown&&!1!==d.teardown.call(t,f,g.handle)||C.removeEvent(t,h,g.handle),delete l[h])}else for(h in l)C.event.remove(t,h+e[c],i,n,!0);C.isEmptyObject(l)&&Q.remove(t,"handle events")}},dispatch:function(t){var e,i,n,s,o,r,a=new Array(arguments.length),l=C.event.fix(t),c=(Q.get(this,"events")||Object.create(null))[l.type]||[],u=C.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(r=C.event.handlers.call(this,l,c),e=0;(s=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(o=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(n=((C.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,s,o,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],r={},i=0;i<l;i++)void 0===r[s=(n=e[i]).selector+" "]&&(r[s]=n.needsContext?C(s,this).index(c)>-1:C.find(s,this,null,[c]).length),r[s]&&o.push(n);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[C.expando]?t:new C.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return mt.test(e.type)&&e.click&&_(e,"input")&&At(e,"click",$t),!1},trigger:function(t){var e=this||t;return mt.test(e.type)&&e.click&&_(e,"input")&&At(e,"click"),!0},_default:function(t){var e=t.target;return mt.test(e.type)&&e.click&&_(e,"input")&&Q.get(e,"click")||_(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},C.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},C.Event=function(t,e){if(!(this instanceof C.Event))return new C.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?$t:Et,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&C.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Et,isPropagationStopped:Et,isImmediatePropagationStopped:Et,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=$t,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=$t,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=$t,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Tt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},(function(t,e){C.event.special[t]={setup:function(){return At(this,t,Dt),!1},trigger:function(){return At(this,t),!0},delegateType:e}})),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){C.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,s=t.relatedTarget,o=t.handleObj;return s&&(s===n||C.contains(n,s))||(t.type=o.origType,i=o.handler.apply(this,arguments),t.type=e),i}}})),C.fn.extend({on:function(t,e,i,n){return _t(this,t,e,i,n)},one:function(t,e,i,n){return _t(this,t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,C(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Et),this.each((function(){C.event.remove(this,t,i,e)}))}});var Mt=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,Pt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function jt(t,e){return _(t,"table")&&_(11!==e.nodeType?e:e.firstChild,"tr")&&C(t).children("tbody")[0]||t}function Lt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function It(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Nt(t,e){var i,n,s,o,r,a;if(1===e.nodeType){if(Q.hasData(t)&&(a=Q.get(t).events))for(s in Q.remove(e,"handle events"),a)for(i=0,n=a[s].length;i<n;i++)C.event.add(e,s,a[s][i]);J.hasData(t)&&(o=J.access(t),r=C.extend({},o),J.set(e,r))}}function Rt(t,e){var i=e.nodeName.toLowerCase();"input"===i&&mt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function Ht(t,e,i,n){e=l(e);var s,o,r,a,c,u,d=0,p=t.length,h=p-1,f=e[0],m=v(f);if(m||p>1&&"string"==typeof f&&!g.checkClone&&Ot.test(f))return t.each((function(s){var o=t.eq(s);m&&(e[0]=f.call(this,s,o.html())),Ht(o,e,i,n)}));if(p&&(o=(s=kt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===s.childNodes.length&&(s=o),o||n)){for(a=(r=C.map(bt(s,"script"),Lt)).length;d<p;d++)c=s,d!==h&&(c=C.clone(c,!0,!0),a&&C.merge(r,bt(c,"script"))),i.call(t[d],c,d);if(a)for(u=r[r.length-1].ownerDocument,C.map(r,It),d=0;d<a;d++)c=r[d],vt.test(c.type||"")&&!Q.access(c,"globalEval")&&C.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?C._evalUrl&&!c.noModule&&C._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):x(c.textContent.replace(Pt,""),c,u))}return t}function Ft(t,e,i){for(var n,s=e?C.filter(e,t):t,o=0;null!=(n=s[o]);o++)i||1!==n.nodeType||C.cleanData(bt(n)),n.parentNode&&(i&&rt(n)&&wt(bt(n,"script")),n.parentNode.removeChild(n));return t}C.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,s,o,r,a=t.cloneNode(!0),l=rt(t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||C.isXMLDoc(t)))for(r=bt(a),n=0,s=(o=bt(t)).length;n<s;n++)Rt(o[n],r[n]);if(e)if(i)for(o=o||bt(t),r=r||bt(a),n=0,s=o.length;n<s;n++)Nt(o[n],r[n]);else Nt(t,a);return(r=bt(a,"script")).length>0&&wt(r,!l&&bt(t,"script")),a},cleanData:function(t){for(var e,i,n,s=C.event.special,o=0;void 0!==(i=t[o]);o++)if(G(i)){if(e=i[Q.expando]){if(e.events)for(n in e.events)s[n]?C.event.remove(i,n):C.removeEvent(i,n,e.handle);i[Q.expando]=void 0}i[J.expando]&&(i[J.expando]=void 0)}}}),C.fn.extend({detach:function(t){return Ft(this,t,!0)},remove:function(t){return Ft(this,t)},text:function(t){return B(this,(function(t){return void 0===t?C.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Ht(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||jt(this,t).appendChild(t)}))},prepend:function(){return Ht(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=jt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Ht(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Ht(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(C.cleanData(bt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return C.clone(this,t,e)}))},html:function(t){return B(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Mt.test(t)&&!yt[(gt.exec(t)||["",""])[1].toLowerCase()]){t=C.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(C.cleanData(bt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Ht(this,arguments,(function(e){var i=this.parentNode;C.inArray(this,t)<0&&(C.cleanData(bt(this)),i&&i.replaceChild(e,this))}),t)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){C.fn[t]=function(t){for(var i,n=[],s=C(t),o=s.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),C(s[r])[e](i),c.apply(n,i.get());return this.pushStack(n)}}));var zt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Wt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=i),e.getComputedStyle(t)},qt=function(t,e,i){var n,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in n=i.call(t),e)t.style[s]=o[s];return n},Bt=new RegExp(st.join("|"),"i");function Ut(t,e,i){var n,s,o,r,a=t.style;return(i=i||Wt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||rt(t)||(r=C.style(t,e)),!g.pixelBoxStyles()&&zt.test(r)&&Bt.test(e)&&(n=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=s,a.maxWidth=o)),void 0!==r?r+"":r}function Vt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ot.appendChild(c).appendChild(u);var t=i.getComputedStyle(u);n="1%"!==t.top,l=12===e(t.marginLeft),u.style.right="60%",r=36===e(t.right),s=36===e(t.width),u.style.position="absolute",o=12===e(u.offsetWidth/3),ot.removeChild(c),u=null}}function e(t){return Math.round(parseFloat(t))}var n,s,o,r,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,C.extend(g,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),r},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o},reliableTrDimensions:function(){var t,e,n,s;return null==a&&(t=b.createElement("table"),e=b.createElement("tr"),n=b.createElement("div"),t.style.cssText="position:absolute;left:-11111px",e.style.height="1px",n.style.height="9px",ot.appendChild(t).appendChild(e).appendChild(n),s=i.getComputedStyle(e),a=parseInt(s.height)>3,ot.removeChild(t)),a}}))}();var Yt=["Webkit","Moz","ms"],Xt=b.createElement("div").style,Gt={};function Kt(t){var e=C.cssProps[t]||Gt[t];return e||(t in Xt?t:Gt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=Yt.length;i--;)if((t=Yt[i]+e)in Xt)return t}(t)||t)}var Qt=/^(none|table(?!-c[ea]).+)/,Jt=/^--/,Zt={position:"absolute",visibility:"hidden",display:"block"},te={letterSpacing:"0",fontWeight:"400"};function ee(t,e,i){var n=nt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function ie(t,e,i,n,s,o){var r="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=C.css(t,i+st[r],!0,s)),n?("content"===i&&(l-=C.css(t,"padding"+st[r],!0,s)),"margin"!==i&&(l-=C.css(t,"border"+st[r]+"Width",!0,s))):(l+=C.css(t,"padding"+st[r],!0,s),"padding"!==i?l+=C.css(t,"border"+st[r]+"Width",!0,s):a+=C.css(t,"border"+st[r]+"Width",!0,s));return!n&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-a-.5))||0),l}function ne(t,e,i){var n=Wt(t),s=(!g.boxSizingReliable()||i)&&"border-box"===C.css(t,"boxSizing",!1,n),o=s,r=Ut(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(zt.test(r)){if(!i)return r;r="auto"}return(!g.boxSizingReliable()&&s||!g.reliableTrDimensions()&&_(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===C.css(t,"display",!1,n))&&t.getClientRects().length&&(s="border-box"===C.css(t,"boxSizing",!1,n),(o=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+ie(t,e,i||(s?"border":"content"),o,n,r)+"px"}function se(t,e,i,n,s){return new se.prototype.init(t,e,i,n,s)}C.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Ut(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,o,r,a=X(e),l=Jt.test(e),c=t.style;if(l||(e=Kt(a)),r=C.cssHooks[e]||C.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(t,!1,n))?s:c[e];"string"===(o=typeof i)&&(s=nt.exec(i))&&s[1]&&(i=ct(t,e,s),o="number"),null!=i&&i==i&&("number"!==o||l||(i+=s&&s[3]||(C.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var s,o,r,a=X(e);return Jt.test(e)||(e=Kt(a)),(r=C.cssHooks[e]||C.cssHooks[a])&&"get"in r&&(s=r.get(t,!0,i)),void 0===s&&(s=Ut(t,e,n)),"normal"===s&&e in te&&(s=te[e]),""===i||i?(o=parseFloat(s),!0===i||isFinite(o)?o||0:s):s}}),C.each(["height","width"],(function(t,e){C.cssHooks[e]={get:function(t,i,n){if(i)return!Qt.test(C.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ne(t,e,n):qt(t,Zt,(function(){return ne(t,e,n)}))},set:function(t,i,n){var s,o=Wt(t),r=!g.scrollboxSize()&&"absolute"===o.position,a=(r||n)&&"border-box"===C.css(t,"boxSizing",!1,o),l=n?ie(t,e,n,a,o):0;return a&&r&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ie(t,e,"border",!1,o)-.5)),l&&(s=nt.exec(i))&&"px"!==(s[3]||"px")&&(t.style[e]=i,i=C.css(t,e)),ee(0,i,l)}}})),C.cssHooks.marginLeft=Vt(g.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Ut(t,"marginLeft"))||t.getBoundingClientRect().left-qt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),C.each({margin:"",padding:"",border:"Width"},(function(t,e){C.cssHooks[t+e]={expand:function(i){for(var n=0,s={},o="string"==typeof i?i.split(" "):[i];n<4;n++)s[t+st[n]+e]=o[n]||o[n-2]||o[0];return s}},"margin"!==t&&(C.cssHooks[t+e].set=ee)})),C.fn.extend({css:function(t,e){return B(this,(function(t,e,i){var n,s,o={},r=0;if(Array.isArray(e)){for(n=Wt(t),s=e.length;r<s;r++)o[e[r]]=C.css(t,e[r],!1,n);return o}return void 0!==i?C.style(t,e,i):C.css(t,e)}),t,e,arguments.length>1)}}),C.Tween=se,se.prototype={constructor:se,init:function(t,e,i,n,s,o){this.elem=t,this.prop=i,this.easing=s||C.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=o||(C.cssNumber[i]?"":"px")},cur:function(){var t=se.propHooks[this.prop];return t&&t.get?t.get(this):se.propHooks._default.get(this)},run:function(t){var e,i=se.propHooks[this.prop];return this.options.duration?this.pos=e=C.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):se.propHooks._default.set(this),this}},se.prototype.init.prototype=se.prototype,se.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=C.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){C.fx.step[t.prop]?C.fx.step[t.prop](t):1!==t.elem.nodeType||!C.cssHooks[t.prop]&&null==t.elem.style[Kt(t.prop)]?t.elem[t.prop]=t.now:C.style(t.elem,t.prop,t.now+t.unit)}}},se.propHooks.scrollTop=se.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},C.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},C.fx=se.prototype.init,C.fx.step={};var oe,re,ae=/^(?:toggle|show|hide)$/,le=/queueHooks$/;function ce(){re&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(ce):i.setTimeout(ce,C.fx.interval),C.fx.tick())}function ue(){return i.setTimeout((function(){oe=void 0})),oe=Date.now()}function de(t,e){var i,n=0,s={height:t};for(e=e?1:0;n<4;n+=2-e)s["margin"+(i=st[n])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function pe(t,e,i){for(var n,s=(he.tweeners[e]||[]).concat(he.tweeners["*"]),o=0,r=s.length;o<r;o++)if(n=s[o].call(i,e,t))return n}function he(t,e,i){var n,s,o=0,r=he.prefilters.length,a=C.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var e=oe||ue(),i=Math.max(0,c.startTime+c.duration-e),n=1-(i/c.duration||0),o=0,r=c.tweens.length;o<r;o++)c.tweens[o].run(n);return a.notifyWith(t,[c,n,i]),n<1&&r?i:(r||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},i),originalProperties:e,originalOptions:i,startTime:oe||ue(),duration:i.duration,tweens:[],createTween:function(e,i){var n=C.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(!function(t,e){var i,n,s,o,r;for(i in t)if(s=e[n=X(i)],o=t[i],Array.isArray(o)&&(s=o[1],o=t[i]=o[0]),i!==n&&(t[n]=o,delete t[i]),(r=C.cssHooks[n])&&"expand"in r)for(i in o=r.expand(o),delete t[n],o)i in t||(t[i]=o[i],e[i]=s);else e[n]=s}(u,c.opts.specialEasing);o<r;o++)if(n=he.prefilters[o].call(c,t,u,c.opts))return v(n.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return C.map(u,pe,c),v(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(he,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ct(i.elem,t,nt.exec(e),i),i}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(N);for(var i,n=0,s=t.length;n<s;n++)i=t[n],he.tweeners[i]=he.tweeners[i]||[],he.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,s,o,r,a,l,c,u,d="width"in e||"height"in e,p=this,h={},f=t.style,m=t.nodeType&&lt(t),g=Q.get(t,"fxshow");for(n in i.queue||(null==(r=C._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,p.always((function(){p.always((function(){r.unqueued--,C.queue(t,"fx").length||r.empty.fire()}))}))),e)if(s=e[n],ae.test(s)){if(delete e[n],o=o||"toggle"===s,s===(m?"hide":"show")){if("show"!==s||!g||void 0===g[n])continue;m=!0}h[n]=g&&g[n]||C.style(t,n)}if((l=!C.isEmptyObject(e))||!C.isEmptyObject(h))for(n in d&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=Q.get(t,"display")),"none"===(u=C.css(t,"display"))&&(c?u=c:(pt([t],!0),c=t.style.display||c,u=C.css(t,"display"),pt([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===C.css(t,"float")&&(l||(p.done((function(){f.display=c})),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,h)l||(g?"hidden"in g&&(m=g.hidden):g=Q.access(t,"fxshow",{display:c}),o&&(g.hidden=!m),m&&pt([t],!0),p.done((function(){for(n in m||pt([t]),Q.remove(t,"fxshow"),h)C.style(t,n,h[n])}))),l=pe(m?g[n]:0,n,p),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?he.prefilters.unshift(t):he.prefilters.push(t)}}),C.speed=function(t,e,i){var n=t&&"object"==typeof t?C.extend({},t):{complete:i||!i&&e||v(t)&&t,duration:t,easing:i&&e||e&&!v(e)&&e};return C.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in C.fx.speeds?n.duration=C.fx.speeds[n.duration]:n.duration=C.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){v(n.old)&&n.old.call(this),n.queue&&C.dequeue(this,n.queue)},n},C.fn.extend({fadeTo:function(t,e,i,n){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=C.isEmptyObject(t),o=C.speed(e,i,n),r=function(){var e=he(this,C.extend({},t),o);(s||Q.get(this,"finish"))&&e.stop(!0)};return r.finish=r,s||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,s=null!=t&&t+"queueHooks",o=C.timers,r=Q.get(this);if(s)r[s]&&r[s].stop&&n(r[s]);else for(s in r)r[s]&&r[s].stop&&le.test(s)&&n(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=t&&o[s].queue!==t||(o[s].anim.stop(i),e=!1,o.splice(s,1));!e&&i||C.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=Q.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],o=C.timers,r=n?n.length:0;for(i.finish=!0,C.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),C.each(["toggle","show","hide"],(function(t,e){var i=C.fn[e];C.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(de(e,!0),t,n,s)}})),C.each({slideDown:de("show"),slideUp:de("hide"),slideToggle:de("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){C.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),C.timers=[],C.fx.tick=function(){var t,e=0,i=C.timers;for(oe=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||C.fx.stop(),oe=void 0},C.fx.timer=function(t){C.timers.push(t),C.fx.start()},C.fx.interval=13,C.fx.start=function(){re||(re=!0,ce())},C.fx.stop=function(){re=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(t,e){return t=C.fx&&C.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var s=i.setTimeout(e,t);n.stop=function(){i.clearTimeout(s)}}))},function(){var t=b.createElement("input"),e=b.createElement("select").appendChild(b.createElement("option"));t.type="checkbox",g.checkOn=""!==t.value,g.optSelected=e.selected,(t=b.createElement("input")).value="t",t.type="radio",g.radioValue="t"===t.value}();var fe,me=C.expr.attrHandle;C.fn.extend({attr:function(t,e){return B(this,C.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){C.removeAttr(this,t)}))}}),C.extend({attr:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?C.prop(t,e,i):(1===o&&C.isXMLDoc(t)||(s=C.attrHooks[e.toLowerCase()]||(C.expr.match.bool.test(e)?fe:void 0)),void 0!==i?null===i?void C.removeAttr(t,e):s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:(t.setAttribute(e,i+""),i):s&&"get"in s&&null!==(n=s.get(t,e))?n:null==(n=C.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&_(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,s=e&&e.match(N);if(s&&1===t.nodeType)for(;i=s[n++];)t.removeAttribute(i)}}),fe={set:function(t,e,i){return!1===e?C.removeAttr(t,i):t.setAttribute(i,i),i}},C.each(C.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=me[e]||C.find.attr;me[e]=function(t,e,n){var s,o,r=e.toLowerCase();return n||(o=me[r],me[r]=s,s=null!=i(t,e,n)?r:null,me[r]=o),s}}));var ge=/^(?:input|select|textarea|button)$/i,ve=/^(?:a|area)$/i;function ye(t){return(t.match(N)||[]).join(" ")}function be(t){return t.getAttribute&&t.getAttribute("class")||""}function we(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(N)||[]}C.fn.extend({prop:function(t,e){return B(this,C.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[C.propFix[t]||t]}))}}),C.extend({prop:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&C.isXMLDoc(t)||(e=C.propFix[e]||e,s=C.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=C.find.attr(t,"tabindex");return e?parseInt(e,10):ge.test(t.nodeName)||ve.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(C.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){C.propFix[this.toLowerCase()]=this})),C.fn.extend({addClass:function(t){var e,i,n,s,o,r,a,l=0;if(v(t))return this.each((function(e){C(this).addClass(t.call(this,e,be(this)))}));if((e=we(t)).length)for(;i=this[l++];)if(s=be(i),n=1===i.nodeType&&" "+ye(s)+" "){for(r=0;o=e[r++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");s!==(a=ye(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,s,o,r,a,l=0;if(v(t))return this.each((function(e){C(this).removeClass(t.call(this,e,be(this)))}));if(!arguments.length)return this.attr("class","");if((e=we(t)).length)for(;i=this[l++];)if(s=be(i),n=1===i.nodeType&&" "+ye(s)+" "){for(r=0;o=e[r++];)for(;n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");s!==(a=ye(n))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t,n="string"===i||Array.isArray(t);return"boolean"==typeof e&&n?e?this.addClass(t):this.removeClass(t):v(t)?this.each((function(i){C(this).toggleClass(t.call(this,i,be(this),e),e)})):this.each((function(){var e,s,o,r;if(n)for(s=0,o=C(this),r=we(t);e=r[s++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==i||((e=be(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Q.get(this,"__className__")||""))}))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+ye(be(i))+" ").indexOf(e)>-1)return!0;return!1}});var xe=/\r/g;C.fn.extend({val:function(t){var e,i,n,s=this[0];return arguments.length?(n=v(t),this.each((function(i){var s;1===this.nodeType&&(null==(s=n?t.call(this,i,C(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=C.map(s,(function(t){return null==t?"":t+""}))),(e=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))}))):s?(e=C.valHooks[s.type]||C.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:"string"==typeof(i=s.value)?i.replace(xe,""):null==i?"":i:void 0}}),C.extend({valHooks:{option:{get:function(t){var e=C.find.attr(t,"value");return null!=e?e:ye(C.text(t))}},select:{get:function(t){var e,i,n,s=t.options,o=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?o+1:s.length;for(n=o<0?l:r?o:0;n<l;n++)if(((i=s[n]).selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!_(i.parentNode,"optgroup"))){if(e=C(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,n,s=t.options,o=C.makeArray(e),r=s.length;r--;)((n=s[r]).selected=C.inArray(C.valHooks.option.get(n),o)>-1)&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),C.each(["radio","checkbox"],(function(){C.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=C.inArray(C(t).val(),e)>-1}},g.checkOn||(C.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),g.focusin="onfocusin"in i;var ke=/^(?:focusinfocus|focusoutblur)$/,Ce=function(t){t.stopPropagation()};C.extend(C.event,{trigger:function(t,e,n,s){var o,r,a,l,c,u,d,p,f=[n||b],m=h.call(t,"type")?t.type:t,g=h.call(t,"namespace")?t.namespace.split("."):[];if(r=p=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!ke.test(m+C.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[C.expando]?t:new C.Event(m,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:C.makeArray(e,[t]),d=C.event.special[m]||{},s||!d.trigger||!1!==d.trigger.apply(n,e))){if(!s&&!d.noBubble&&!y(n)){for(l=d.delegateType||m,ke.test(l+m)||(r=r.parentNode);r;r=r.parentNode)f.push(r),a=r;a===(n.ownerDocument||b)&&f.push(a.defaultView||a.parentWindow||i)}for(o=0;(r=f[o++])&&!t.isPropagationStopped();)p=r,t.type=o>1?l:d.bindType||m,(u=(Q.get(r,"events")||Object.create(null))[t.type]&&Q.get(r,"handle"))&&u.apply(r,e),(u=c&&r[c])&&u.apply&&G(r)&&(t.result=u.apply(r,e),!1===t.result&&t.preventDefault());return t.type=m,s||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),e)||!G(n)||c&&v(n[m])&&!y(n)&&((a=n[c])&&(n[c]=null),C.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,Ce),n[m](),t.isPropagationStopped()&&p.removeEventListener(m,Ce),C.event.triggered=void 0,a&&(n[c]=a)),t.result}},simulate:function(t,e,i){var n=C.extend(new C.Event,i,{type:t,isSimulated:!0});C.event.trigger(n,null,e)}}),C.fn.extend({trigger:function(t,e){return this.each((function(){C.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return C.event.trigger(t,e,i,!0)}}),g.focusin||C.each({focus:"focusin",blur:"focusout"},(function(t,e){var i=function(t){C.event.simulate(e,t.target,C.event.fix(t))};C.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,s=Q.access(n,e);s||n.addEventListener(t,i,!0),Q.access(n,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,s=Q.access(n,e)-1;s?Q.access(n,e,s):(n.removeEventListener(t,i,!0),Q.remove(n,e))}}}));var Te=i.location,Se={guid:Date.now()},$e=/\?/;C.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new i.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+t),e};var Ee=/\[\]$/,De=/\r?\n/g,_e=/^(?:submit|button|image|reset|file)$/i,Ae=/^(?:input|select|textarea|keygen)/i;function Me(t,e,i,n){var s;if(Array.isArray(e))C.each(e,(function(e,s){i||Ee.test(t)?n(t,s):Me(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,i,n)}));else if(i||"object"!==k(e))n(t,e);else for(s in e)Me(t+"["+s+"]",e[s],i,n)}C.param=function(t,e){var i,n=[],s=function(t,e){var i=v(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!C.isPlainObject(t))C.each(t,(function(){s(this.name,this.value)}));else for(i in t)Me(i,t[i],e,s);return n.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=C.prop(this,"elements");return t?C.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!C(this).is(":disabled")&&Ae.test(this.nodeName)&&!_e.test(t)&&(this.checked||!mt.test(t))})).map((function(t,e){var i=C(this).val();return null==i?null:Array.isArray(i)?C.map(i,(function(t){return{name:e.name,value:t.replace(De,"\r\n")}})):{name:e.name,value:i.replace(De,"\r\n")}})).get()}});var Oe=/%20/g,Pe=/#.*$/,je=/([?&])_=[^&]*/,Le=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ie=/^(?:GET|HEAD)$/,Ne=/^\/\//,Re={},He={},Fe="*/".concat("*"),ze=b.createElement("a");function We(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,o=e.toLowerCase().match(N)||[];if(v(i))for(;n=o[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function qe(t,e,i,n){var s={},o=t===He;function r(a){var l;return s[a]=!0,C.each(t[a]||[],(function(t,a){var c=a(e,i,n);return"string"!=typeof c||o||s[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)})),l}return r(e.dataTypes[0])||!s["*"]&&r("*")}function Be(t,e){var i,n,s=C.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&C.extend(!0,t,n),t}ze.href=Te.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Te.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Te.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Fe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Be(Be(t,C.ajaxSettings),e):Be(C.ajaxSettings,t)},ajaxPrefilter:We(Re),ajaxTransport:We(He),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,s,o,r,a,l,c,u,d,p,h=C.ajaxSetup({},e),f=h.context||h,m=h.context&&(f.nodeType||f.jquery)?C(f):C.event,g=C.Deferred(),v=C.Callbacks("once memory"),y=h.statusCode||{},w={},x={},k="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(c){if(!r)for(r={};e=Le.exec(o);)r[e[1].toLowerCase()+" "]=(r[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=r[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==c&&(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)T.always(t[T.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||k;return n&&n.abort(e),S(0,e),this}};if(g.promise(T),h.url=((t||h.url||Te.href)+"").replace(Ne,Te.protocol+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(N)||[""],null==h.crossDomain){l=b.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=ze.protocol+"//"+ze.host!=l.protocol+"//"+l.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=C.param(h.data,h.traditional)),qe(Re,h,e,T),c)return T;for(d in(u=C.event&&h.global)&&0==C.active++&&C.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ie.test(h.type),s=h.url.replace(Pe,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Oe,"+")):(p=h.url.slice(s.length),h.data&&(h.processData||"string"==typeof h.data)&&(s+=($e.test(s)?"&":"?")+h.data,delete h.data),!1===h.cache&&(s=s.replace(je,"$1"),p=($e.test(s)?"&":"?")+"_="+Se.guid+++p),h.url=s+p),h.ifModified&&(C.lastModified[s]&&T.setRequestHeader("If-Modified-Since",C.lastModified[s]),C.etag[s]&&T.setRequestHeader("If-None-Match",C.etag[s])),(h.data&&h.hasContent&&!1!==h.contentType||e.contentType)&&T.setRequestHeader("Content-Type",h.contentType),T.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Fe+"; q=0.01":""):h.accepts["*"]),h.headers)T.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(f,T,h)||c))return T.abort();if(k="abort",v.add(h.complete),T.done(h.success),T.fail(h.error),n=qe(He,h,e,T)){if(T.readyState=1,u&&m.trigger("ajaxSend",[T,h]),c)return T;h.async&&h.timeout>0&&(a=i.setTimeout((function(){T.abort("timeout")}),h.timeout));try{c=!1,n.send(w,S)}catch(t){if(c)throw t;S(-1,t)}}else S(-1,"No Transport");function S(t,e,r,l){var d,p,b,w,x,k=e;c||(c=!0,a&&i.clearTimeout(a),n=void 0,o=l||"",T.readyState=t>0?4:0,d=t>=200&&t<300||304===t,r&&(w=function(t,e,i){for(var n,s,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(h,T,r)),!d&&C.inArray("script",h.dataTypes)>-1&&(h.converters["text script"]=function(){}),w=function(t,e,i,n){var s,o,r,a,l,c={},u=t.dataTypes.slice();if(u[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(o=u.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=c[l+" "+o]||c["* "+o]))for(s in c)if((a=s.split(" "))[1]===o&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[s]:!0!==c[s]&&(o=a[0],u.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(h,w,T,d),d?(h.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(C.lastModified[s]=x),(x=T.getResponseHeader("etag"))&&(C.etag[s]=x)),204===t||"HEAD"===h.type?k="nocontent":304===t?k="notmodified":(k=w.state,p=w.data,d=!(b=w.error))):(b=k,!t&&k||(k="error",t<0&&(t=0))),T.status=t,T.statusText=(e||k)+"",d?g.resolveWith(f,[p,k,T]):g.rejectWith(f,[T,k,b]),T.statusCode(y),y=void 0,u&&m.trigger(d?"ajaxSuccess":"ajaxError",[T,h,d?p:b]),v.fireWith(f,[T,k]),u&&(m.trigger("ajaxComplete",[T,h]),--C.active||C.event.trigger("ajaxStop")))}return T},getJSON:function(t,e,i){return C.get(t,e,i,"json")},getScript:function(t,e){return C.get(t,void 0,e,"script")}}),C.each(["get","post"],(function(t,e){C[e]=function(t,i,n,s){return v(i)&&(s=s||n,n=i,i=void 0),C.ajax(C.extend({url:t,type:e,dataType:s,data:i,success:n},C.isPlainObject(t)&&t))}})),C.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),C._evalUrl=function(t,e,i){return C.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){C.globalEval(t,e,i)}})},C.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=C(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){C(this).wrapInner(t.call(this,e))})):this.each((function(){var e=C(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(i){C(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){C(this).replaceWith(this.childNodes)})),this}}),C.expr.pseudos.hidden=function(t){return!C.expr.pseudos.visible(t)},C.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(t){}};var Ue={0:200,1223:204},Ve=C.ajaxSettings.xhr();g.cors=!!Ve&&"withCredentials"in Ve,g.ajax=Ve=!!Ve,C.ajaxTransport((function(t){var e,n;if(g.cors||Ve&&!t.crossDomain)return{send:function(s,o){var r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];for(r in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)a.setRequestHeader(r,s[r]);e=function(t){return function(){e&&(e=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ue[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),n=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){e&&n()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),C.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return C.globalEval(t),t}}}),C.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),C.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,s){e=C("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),b.head.appendChild(e[0])},abort:function(){i&&i()}}}));var Ye,Xe=[],Ge=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Xe.pop()||C.expando+"_"+Se.guid++;return this[t]=!0,t}}),C.ajaxPrefilter("json jsonp",(function(t,e,n){var s,o,r,a=!1!==t.jsonp&&(Ge.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ge.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ge,"$1"+s):!1!==t.jsonp&&(t.url+=($e.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return r||C.error(s+" was not called"),r[0]},t.dataTypes[0]="json",o=i[s],i[s]=function(){r=arguments},n.always((function(){void 0===o?C(i).removeProp(s):i[s]=o,t[s]&&(t.jsonpCallback=e.jsonpCallback,Xe.push(s)),r&&v(o)&&o(r[0]),r=o=void 0})),"script"})),g.createHTMLDocument=((Ye=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ye.childNodes.length),C.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(g.createHTMLDocument?((n=(e=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,e.head.appendChild(n)):e=b),o=!i&&[],(s=A.exec(t))?[e.createElement(s[1])]:(s=kt([t],e,o),o&&o.length&&C(o).remove(),C.merge([],s.childNodes)));var n,s,o},C.fn.load=function(t,e,i){var n,s,o,r=this,a=t.indexOf(" ");return a>-1&&(n=ye(t.slice(a)),t=t.slice(0,a)),v(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),r.length>0&&C.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done((function(t){o=arguments,r.html(n?C("<div>").append(C.parseHTML(t)).find(n):t)})).always(i&&function(t,e){r.each((function(){i.apply(this,o||[t.responseText,e,t])}))}),this},C.expr.pseudos.animated=function(t){return C.grep(C.timers,(function(e){return t===e.elem})).length},C.offset={setOffset:function(t,e,i){var n,s,o,r,a,l,c=C.css(t,"position"),u=C(t),d={};"static"===c&&(t.style.position="relative"),a=u.offset(),o=C.css(t,"top"),l=C.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(r=(n=u.position()).top,s=n.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),v(e)&&(e=e.call(t,i,C.extend({},a))),null!=e.top&&(d.top=e.top-a.top+r),null!=e.left&&(d.left=e.left-a.left+s),"using"in e?e.using.call(t,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){C.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],s={top:0,left:0};if("fixed"===C.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===C.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((s=C(t).offset()).top+=C.css(t,"borderTopWidth",!0),s.left+=C.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-C.css(n,"marginTop",!0),left:e.left-s.left-C.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===C.css(t,"position");)t=t.offsetParent;return t||ot}))}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;C.fn[t]=function(n){return B(this,(function(t,n,s){var o;if(y(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===s)return o?o[e]:t[n];o?o.scrollTo(i?o.pageXOffset:s,i?s:o.pageYOffset):t[n]=s}),t,n,arguments.length)}})),C.each(["top","left"],(function(t,e){C.cssHooks[e]=Vt(g.pixelPosition,(function(t,i){if(i)return i=Ut(t,e),zt.test(i)?C(t).position()[e]+"px":i}))})),C.each({Height:"height",Width:"width"},(function(t,e){C.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){C.fn[n]=function(s,o){var r=arguments.length&&(i||"boolean"!=typeof s),a=i||(!0===s||!0===o?"margin":"border");return B(this,(function(e,i,s){var o;return y(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===s?C.css(e,i,a):C.style(e,i,s,a)}),e,r?s:void 0,r)}}))})),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){C.fn[e]=function(t){return this.on(e,t)}})),C.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){C.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}));var Ke=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),v(t))return n=a.call(arguments,2),(s=function(){return t.apply(e||this,n.concat(a.call(arguments)))}).guid=t.guid=t.guid||C.guid++,s},C.holdReady=function(t){t?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=_,C.isFunction=v,C.isWindow=y,C.camelCase=X,C.type=k,C.now=Date.now,C.isNumeric=function(t){var e=C.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},C.trim=function(t){return null==t?"":(t+"").replace(Ke,"")},void 0===(n=function(){return C}.apply(e,[]))||(t.exports=n);var Qe=i.jQuery,Je=i.$;return C.noConflict=function(t){return i.$===C&&(i.$=Je),t&&i.jQuery===C&&(i.jQuery=Qe),C},void 0===s&&(i.jQuery=i.$=C),C}))},EkI6:function(t,e){!function(t){"use strict";var e=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.fixedContent=".navbar-fixed-top, .navbar-fixed-bottom",this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy((function(){this.$element.trigger("loaded.bs.modal")}),this))};function i(i,n){return this.each((function(){var s=t(this),o=s.data("bs.modal"),r=t.extend({},e.DEFAULTS,s.data(),"object"==typeof i&&i);o||s.data("bs.modal",o=new e(this,r)),"string"==typeof i?o[i](n):r.show&&o.show(n)}))}e.VERSION="3.4.1",e.TRANSITION_DURATION=300,e.BACKDROP_TRANSITION_DURATION=150,e.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},e.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},e.prototype.show=function(i){var n=this,s=t.Event("show.bs.modal",{relatedTarget:i});this.$element.trigger(s),this.isShown||s.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",(function(){n.$element.one("mouseup.dismiss.bs.modal",(function(e){t(e.target).is(n.$element)&&(n.ignoreBackdropClick=!0)}))})),this.backdrop((function(){var s=t.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(n.$body),n.$element.show().scrollTop(0),n.adjustDialog(),s&&n.$element[0].offsetWidth,n.$element.addClass("in"),n.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:i});s?n.$dialog.one("bsTransitionEnd",(function(){n.$element.trigger("focus").trigger(o)})).emulateTransitionEnd(e.TRANSITION_DURATION):n.$element.trigger("focus").trigger(o)})))},e.prototype.hide=function(i){i&&i.preventDefault(),i=t.Event("hide.bs.modal"),this.$element.trigger(i),this.isShown&&!i.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(e.TRANSITION_DURATION):this.hideModal())},e.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy((function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")}),this))},e.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy((function(t){27==t.which&&this.hide()}),this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},e.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},e.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop((function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")}))},e.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},e.prototype.backdrop=function(i){var n=this,s=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&s;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+s).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy((function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())}),this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!i)return;o?this.$backdrop.one("bsTransitionEnd",i).emulateTransitionEnd(e.BACKDROP_TRANSITION_DURATION):i()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var r=function(){n.removeBackdrop(),i&&i()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",r).emulateTransitionEnd(e.BACKDROP_TRANSITION_DURATION):r()}else i&&i()},e.prototype.handleUpdate=function(){this.adjustDialog()},e.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},e.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},e.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},e.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";var i=this.scrollbarWidth;this.bodyIsOverflowing&&(this.$body.css("padding-right",e+i),t(this.fixedContent).each((function(e,n){var s=n.style.paddingRight,o=t(n).css("padding-right");t(n).data("padding-right",s).css("padding-right",parseFloat(o)+i+"px")})))},e.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad),t(this.fixedContent).each((function(e,i){var n=t(i).data("padding-right");t(i).removeData("padding-right"),i.style.paddingRight=n||""}))},e.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var n=t.fn.modal;t.fn.modal=i,t.fn.modal.Constructor=e,t.fn.modal.noConflict=function(){return t.fn.modal=n,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',(function(e){var n=t(this),s=n.attr("href"),o=n.attr("data-target")||s&&s.replace(/.*(?=#[^\s]+$)/,""),r=t(document).find(o),a=r.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(s)&&s},r.data(),n.data());n.is("a")&&e.preventDefault(),r.one("show.bs.modal",(function(t){t.isDefaultPrevented()||r.one("hidden.bs.modal",(function(){n.is(":visible")&&n.trigger("focus")}))})),i.call(r,a,this)}))}(jQuery)},F8JR:function(t,e,i){"use strict";var n=i("tycR").forEach,s=i("pkCn"),o=i("rkAj"),r=s("forEach"),a=o("forEach");t.exports=r&&a?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},FMNM:function(t,e,i){var n=i("xrYK"),s=i("kmMV");t.exports=function(t,e){var i=t.exec;if("function"==typeof i){var o=i.call(t,e);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(t))throw TypeError("RegExp#exec called on incompatible receiver");return s.call(t,e)}},FZtP:function(t,e,i){var n=i("2oRo"),s=i("/byt"),o=i("F8JR"),r=i("kRJp");for(var a in s){var l=n[a],c=l&&l.prototype;if(c&&c.forEach!==o)try{r(c,"forEach",o)}catch(t){c.forEach=o}}},G1gL:function(t,e,i){i("MTiW"),i("w1tE"),i("ctkp"),i("hTDY"),i("XQ3s"),i("QMJn"),i("EkI6"),i("HIsd"),i("Ol/X"),i("d63a"),i("MsVs"),i("eXwB")},HAuM:function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},HIsd:function(t,e){!function(t){"use strict";var e=["sanitize","whiteList","sanitizeFn"],i=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],n={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},s=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,o=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function r(e,n){var r=e.nodeName.toLowerCase();if(-1!==t.inArray(r,n))return-1===t.inArray(r,i)||Boolean(e.nodeValue.match(s)||e.nodeValue.match(o));for(var a=t(n).filter((function(t,e){return e instanceof RegExp})),l=0,c=a.length;l<c;l++)if(r.match(a[l]))return!0;return!1}function a(e,i,n){if(0===e.length)return e;if(n&&"function"==typeof n)return n(e);if(!document.implementation||!document.implementation.createHTMLDocument)return e;var s=document.implementation.createHTMLDocument("sanitization");s.body.innerHTML=e;for(var o=t.map(i,(function(t,e){return e})),a=t(s.body).find("*"),l=0,c=a.length;l<c;l++){var u=a[l],d=u.nodeName.toLowerCase();if(-1!==t.inArray(d,o))for(var p=t.map(u.attributes,(function(t){return t})),h=[].concat(i["*"]||[],i[d]||[]),f=0,m=p.length;f<m;f++)r(p[f],h)||u.removeAttribute(p[f].nodeName);else u.parentNode.removeChild(u)}return s.body.innerHTML}var l=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};l.VERSION="3.4.1",l.TRANSITION_DURATION=150,l.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0},sanitize:!0,sanitizeFn:null,whiteList:n},l.prototype.init=function(e,i,n){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(n),this.$viewport=this.options.viewport&&t(document).find(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var s=this.options.trigger.split(" "),o=s.length;o--;){var r=s[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=r){var a="hover"==r?"mouseenter":"focusin",l="hover"==r?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},l.prototype.getDefaults=function(){return l.DEFAULTS},l.prototype.getOptions=function(i){var n=this.$element.data();for(var s in n)n.hasOwnProperty(s)&&-1!==t.inArray(s,e)&&delete n[s];return(i=t.extend({},this.getDefaults(),n,i)).delay&&"number"==typeof i.delay&&(i.delay={show:i.delay,hide:i.delay}),i.sanitize&&(i.template=a(i.template,i.whiteList,i.sanitizeFn)),i},l.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,(function(t,n){i[t]!=n&&(e[t]=n)})),e},l.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState)i.hoverState="in";else{if(clearTimeout(i.timeout),i.hoverState="in",!i.options.delay||!i.options.delay.show)return i.show();i.timeout=setTimeout((function(){"in"==i.hoverState&&i.show()}),i.options.delay.show)}},l.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},l.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),!i.isInStateTrue()){if(clearTimeout(i.timeout),i.hoverState="out",!i.options.delay||!i.options.delay.hide)return i.hide();i.timeout=setTimeout((function(){"out"==i.hoverState&&i.hide()}),i.options.delay.hide)}},l.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var i=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!i)return;var n=this,s=this.tip(),o=this.getUID(this.type);this.setContent(),s.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,a=/\s?auto?\s?/i,c=a.test(r);c&&(r=r.replace(a,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(t(document).find(this.options.container)):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var u=this.getPosition(),d=s[0].offsetWidth,p=s[0].offsetHeight;if(c){var h=r,f=this.getPosition(this.$viewport);r="bottom"==r&&u.bottom+p>f.bottom?"top":"top"==r&&u.top-p<f.top?"bottom":"right"==r&&u.right+d>f.width?"left":"left"==r&&u.left-d<f.left?"right":r,s.removeClass(h).addClass(r)}var m=this.getCalculatedOffset(r,u,d,p);this.applyPlacement(m,r);var g=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",g).emulateTransitionEnd(l.TRANSITION_DURATION):g()}},l.prototype.applyPlacement=function(e,i){var n=this.tip(),s=n[0].offsetWidth,o=n[0].offsetHeight,r=parseInt(n.css("margin-top"),10),a=parseInt(n.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(a)&&(a=0),e.top+=r,e.left+=a,t.offset.setOffset(n[0],t.extend({using:function(t){n.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),n.addClass("in");var l=n[0].offsetWidth,c=n[0].offsetHeight;"top"==i&&c!=o&&(e.top=e.top+o-c);var u=this.getViewportAdjustedDelta(i,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var d=/top|bottom/.test(i),p=d?2*u.left-s+l:2*u.top-o+c,h=d?"offsetWidth":"offsetHeight";n.offset(e),this.replaceArrow(p,n[0][h],d)},l.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},l.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();this.options.html?(this.options.sanitize&&(e=a(e,this.options.whiteList,this.options.sanitizeFn)),t.find(".tooltip-inner").html(e)):t.find(".tooltip-inner").text(e),t.removeClass("fade in top bottom left right")},l.prototype.hide=function(e){var i=this,n=t(this.$tip),s=t.Event("hide.bs."+this.type);function o(){"in"!=i.hoverState&&n.detach(),i.$element&&i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type),e&&e()}if(this.$element.trigger(s),!s.isDefaultPrevented())return n.removeClass("in"),t.support.transition&&n.hasClass("fade")?n.one("bsTransitionEnd",o).emulateTransitionEnd(l.TRANSITION_DURATION):o(),this.hoverState=null,this},l.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},l.prototype.hasContent=function(){return this.getTitle()},l.prototype.getPosition=function(e){var i=(e=e||this.$element)[0],n="BODY"==i.tagName,s=i.getBoundingClientRect();null==s.width&&(s=t.extend({},s,{width:s.right-s.left,height:s.bottom-s.top}));var o=window.SVGElement&&i instanceof window.SVGElement,r=n?{top:0,left:0}:o?null:e.offset(),a={scroll:n?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=n?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},s,a,l,r)},l.prototype.getCalculatedOffset=function(t,e,i,n){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-n,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-n/2,left:e.left-i}:{top:e.top+e.height/2-n/2,left:e.left+e.width}},l.prototype.getViewportAdjustedDelta=function(t,e,i,n){var s={top:0,left:0};if(!this.$viewport)return s;var o=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-o-r.scroll,l=e.top+o-r.scroll+n;a<r.top?s.top=r.top-a:l>r.top+r.height&&(s.top=r.top+r.height-l)}else{var c=e.left-o,u=e.left+o+i;c<r.left?s.left=r.left-c:u>r.right&&(s.left=r.left+r.width-u)}return s},l.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},l.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},l.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},l.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},l.prototype.enable=function(){this.enabled=!0},l.prototype.disable=function(){this.enabled=!1},l.prototype.toggleEnabled=function(){this.enabled=!this.enabled},l.prototype.toggle=function(e){var i=this;e&&((i=t(e.currentTarget).data("bs."+this.type))||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},l.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide((function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null}))},l.prototype.sanitizeHtml=function(t){return a(t,this.options.whiteList,this.options.sanitizeFn)};var c=t.fn.tooltip;t.fn.tooltip=function(e){return this.each((function(){var i=t(this),n=i.data("bs.tooltip"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||i.data("bs.tooltip",n=new l(this,s)),"string"==typeof e&&n[e]())}))},t.fn.tooltip.Constructor=l,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=c,this}}(jQuery)},HYAF:function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},"I+eb":function(t,e,i){var n=i("2oRo"),s=i("Bs8V").f,o=i("kRJp"),r=i("busE"),a=i("zk60"),l=i("6JNq"),c=i("lMq5");t.exports=function(t,e){var i,u,d,p,h,f=t.target,m=t.global,g=t.stat;if(i=m?n:g?n[f]||a(f,{}):(n[f]||{}).prototype)for(u in e){if(p=e[u],d=t.noTargetGet?(h=s(i,u))&&h.value:i[u],!c(m?u:f+(g?".":"#")+u,t.forced)&&void 0!==d){if(typeof p==typeof d)continue;l(p,d)}(t.sham||d&&d.sham)&&o(p,"sham",!0),r(i,u,p,t)}}},I8vh:function(t,e,i){var n=i("ppGB"),s=Math.max,o=Math.min;t.exports=function(t,e){var i=n(t);return i<0?s(i+e,0):o(i,e)}},I9E9:function(t,e,i){t.exports=i("JSZk")},JBy8:function(t,e,i){var n=i("yoRg"),s=i("eDl+").concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,s)}},JSZk:function(module,exports,__webpack_require__){var factory;window,factory=function(){return modules=[function(t){t.exports=JSON.parse('{"BACKSPACE":8,"BACKSPACE_SAFARI":127,"DELETE":46,"DOWN":40,"END":35,"ENTER":13,"ESCAPE":27,"HOME":36,"INSERT":45,"LEFT":37,"PAGE_DOWN":34,"PAGE_UP":33,"RIGHT":39,"SPACE":32,"TAB":9,"UP":38,"X":88,"CONTROL":17}')},function(t,e,i){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var s=i(2),o=i(3),r=o.document,a=i(4).generateMaskSet,l=i(4).analyseMask,c=i(7);function u(t,e,i){if(!(this instanceof u))return new u(t,e,i);this.el=void 0,this.events={},this.maskset=void 0,this.refreshValue=!1,!0!==i&&(s.isPlainObject(t)?e=t:(e=e||{},t&&(e.alias=t)),this.opts=s.extend(!0,{},this.defaults,e),this.noMasksCache=e&&void 0!==e.definitions,this.userOptions=e||{},d(this.opts.alias,e,this.opts),this.isRTL=this.opts.numericInput)}function d(t,e,i){var n=u.prototype.aliases[t];return n?(n.alias&&d(n.alias,void 0,i),s.extend(!0,i,n),s.extend(!0,i,e),!0):(null===i.mask&&(i.mask=t),!1)}u.prototype={dataAttribute:"data-inputmask",defaults:{_maxTestPos:500,placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:s.noop,onincomplete:s.noop,oncleared:s.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,insertModeVisual:!0,clearIncomplete:!1,alias:null,onKeyDown:s.noop,onBeforeMask:null,onBeforePaste:function(t,e){return s.isFunction(e.onBeforeMask)?e.onBeforeMask.call(this,t,e):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:s.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:void 0,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"text",importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(t){var e=this;return"string"==typeof t&&(t=r.getElementById(t)||r.querySelectorAll(t)),t=t.nodeName?[t]:t,s.each(t,(function(t,i){var n=s.extend(!0,{},e.opts);if(function(t,e,i,n){function r(e,s){null!==(s=void 0!==s?s:t.getAttribute(n+"-"+e))&&("string"==typeof s&&(0===e.indexOf("on")?s=o[s]:"false"===s?s=!1:"true"===s&&(s=!0)),i[e]=s)}if(!0===e.importDataAttributes){var a,l,c,u,p=t.getAttribute(n);if(p&&""!==p&&(p=p.replace(/'/g,'"'),l=JSON.parse("{"+p+"}")),l)for(u in c=void 0,l)if("alias"===u.toLowerCase()){c=l[u];break}for(a in r("alias",c),i.alias&&d(i.alias,i,e),e){if(l)for(u in c=void 0,l)if(u.toLowerCase()===a.toLowerCase()){c=l[u];break}r(a,c)}}return s.extend(!0,e,i),"rtl"!==t.dir&&!e.rightAlign||(t.style.textAlign="right"),"rtl"!==t.dir&&!e.numericInput||(t.dir="ltr",t.removeAttribute("dir"),e.isRTL=!0),Object.keys(i).length}(i,n,s.extend(!0,{},e.userOptions),e.dataAttribute)){var r=a(n,e.noMasksCache);void 0!==r&&(void 0!==i.inputmask&&(i.inputmask.opts.autoUnmask=!0,i.inputmask.remove()),i.inputmask=new u(void 0,void 0,!0),i.inputmask.opts=n,i.inputmask.noMasksCache=e.noMasksCache,i.inputmask.userOptions=s.extend(!0,{},e.userOptions),i.inputmask.isRTL=n.isRTL||n.numericInput,i.inputmask.el=i,i.inputmask.maskset=r,s.data(i,"_inputmask_opts",n),c.call(i.inputmask,{action:"mask"}))}})),t&&t[0]&&t[0].inputmask||this},option:function(t,e){return"string"==typeof t?this.opts[t]:"object"===n(t)?(s.extend(this.userOptions,t),this.el&&!0!==e&&this.mask(this.el),this):void 0},unmaskedvalue:function(t){return this.maskset=this.maskset||a(this.opts,this.noMasksCache),c.call(this,{action:"unmaskedvalue",value:t})},remove:function(){return c.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||a(this.opts,this.noMasksCache),c.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||a(this.opts,this.noMasksCache),c.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||a(this.opts,this.noMasksCache),c.call(this,{action:"getmetadata"})},isValid:function(t){return this.maskset=this.maskset||a(this.opts,this.noMasksCache),c.call(this,{action:"isValid",value:t})},format:function(t,e){return this.maskset=this.maskset||a(this.opts,this.noMasksCache),c.call(this,{action:"format",value:t,metadata:e})},setValue:function(t){this.el&&s(this.el).trigger("setvalue",[t])},analyseMask:l},u.extendDefaults=function(t){s.extend(!0,u.prototype.defaults,t)},u.extendDefinitions=function(t){s.extend(!0,u.prototype.definitions,t)},u.extendAliases=function(t){s.extend(!0,u.prototype.aliases,t)},u.format=function(t,e,i){return u(e).format(t,i)},u.unmask=function(t,e){return u(e).unmaskedvalue(t)},u.isValid=function(t,e){return u(e).isValid(t)},u.remove=function(t){"string"==typeof t&&(t=r.getElementById(t)||r.querySelectorAll(t)),t=t.nodeName?[t]:t,s.each(t,(function(t,e){e.inputmask&&e.inputmask.remove()}))},u.setValue=function(t,e){"string"==typeof t&&(t=r.getElementById(t)||r.querySelectorAll(t)),t=t.nodeName?[t]:t,s.each(t,(function(t,i){i.inputmask?i.inputmask.setValue(e):s(i).trigger("setvalue",[e])}))};var p=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim");u.escapeRegex=function(t){return t.replace(p,"\\$1")},u.dependencyLib=s,o.Inputmask=u,t.exports=u},function(t,e,i){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var s=i(3),o=s.document;function r(t){return null!=t&&t===t.window}function a(t){return t instanceof Element}function l(t){return t instanceof l?t:this instanceof l?void(null!=t&&t!==s&&(this[0]=t.nodeName?t:void 0!==t[0]&&t[0].nodeName?t[0]:o.querySelector(t),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new l(t)}l.prototype={on:function(t,e){function i(t,i){s.addEventListener?s.addEventListener(t,e,!1):s.attachEvent&&s.attachEvent("on"+t,e),n[t]=n[t]||{},n[t][i]=n[t][i]||[],n[t][i].push(e)}if(a(this[0]))for(var n=this[0].eventRegistry,s=this[0],o=t.split(" "),r=0;r<o.length;r++){var l=o[r].split(".");i(l[0],l[1]||"global")}return this},off:function(t,e){var i,n;function s(t,e,s){if(t in i==1)if(n.removeEventListener?n.removeEventListener(t,s,!1):n.detachEvent&&n.detachEvent("on"+t,s),"global"===e)for(var o in i[t])i[t][o].splice(i[t][o].indexOf(s),1);else i[t][e].splice(i[t][e].indexOf(s),1)}function o(t,n){var s,o,r=[];if(0<t.length)if(void 0===e)for(s=0,o=i[t][n].length;s<o;s++)r.push({ev:t,namespace:n&&0<n.length?n:"global",handler:i[t][n][s]});else r.push({ev:t,namespace:n&&0<n.length?n:"global",handler:e});else if(0<n.length)for(var a in i)for(var l in i[a])if(l===n)if(void 0===e)for(s=0,o=i[a][l].length;s<o;s++)r.push({ev:a,namespace:l,handler:i[a][l][s]});else r.push({ev:a,namespace:l,handler:e});return r}if(a(this[0])){i=this[0].eventRegistry,n=this[0];for(var r=t.split(" "),l=0;l<r.length;l++)for(var c=r[l].split("."),u=o(c[0],c[1]),d=0,p=u.length;d<p;d++)s(u[d].ev,u[d].namespace,u[d].handler)}return this},trigger:function(t,e){if(a(this[0]))for(var i=this[0].eventRegistry,n=this[0],s="string"==typeof t?t.split(" "):[t.type],r=0;r<s.length;r++){var c=s[r].split("."),u=c[0],d=c[1]||"global";if(void 0!==o&&"global"===d){var p,h,f={bubbles:!0,cancelable:!0,detail:e};if(o.createEvent){try{p=new CustomEvent(u,f)}catch(t){(p=o.createEvent("CustomEvent")).initCustomEvent(u,f.bubbles,f.cancelable,f.detail)}t.type&&l.extend(p,t),n.dispatchEvent(p)}else(p=o.createEventObject()).eventType=u,p.detail=e,t.type&&l.extend(p,t),n.fireEvent("on"+p.eventType,p)}else if(void 0!==i[u])if((t=t.type?t:l.Event(t)).detail=arguments.slice(1),"global"===d)for(var m in i[u])for(h=0;h<i[u][m].length;h++)i[u][m][h].apply(n,arguments);else for(h=0;h<i[u][d].length;h++)i[u][d][h].apply(n,arguments)}return this}},l.isFunction=function(t){return"function"==typeof t},l.noop=function(){},l.isArray=Array.isArray,l.inArray=function(t,e,i){return null==e?-1:function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1}(e,t)},l.valHooks=void 0,l.isPlainObject=function(t){return!("object"!==n(t)||t.nodeType||r(t)||t.constructor&&!Object.hasOwnProperty.call(t.constructor.prototype,"isPrototypeOf"))},l.extend=function(){var t,e,i,s,o,r,a=arguments[0]||{},c=1,u=arguments.length,d=!1;for("boolean"==typeof a&&(d=a,a=arguments[c]||{},c++),"object"===n(a)||l.isFunction(a)||(a={}),c===u&&(a=this,c--);c<u;c++)if(null!=(t=arguments[c]))for(e in t)i=a[e],a!==(s=t[e])&&(d&&s&&(l.isPlainObject(s)||(o=l.isArray(s)))?(r=o?(o=!1,i&&l.isArray(i)?i:[]):i&&l.isPlainObject(i)?i:{},a[e]=l.extend(d,r,s)):void 0!==s&&(a[e]=s));return a},l.each=function(t,e){var i=0;if(function(t){var e="length"in t&&t.length,i=n(t);return"function"!==i&&!r(t)&&(!(1!==t.nodeType||!e)||"array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}(t))for(var s=t.length;i<s&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},l.data=function(t,e,i){if(void 0===i)return t.__data?t.__data[e]:null;t.__data=t.__data||{},t.__data[e]=i},"function"==typeof s.CustomEvent?l.Event=s.CustomEvent:(l.Event=function(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var i=o.createEvent("CustomEvent");return i.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),i},l.Event.prototype=s.Event.prototype),t.exports=l},function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},function(t,e,i){"use strict";var n=i(2);t.exports={generateMaskSet:function(t,e){function i(t,i,s){var o,r,a=!1;if(null!==t&&""!==t||(t=(a=null!==s.regex)?(t=s.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(a=!0,".*")),1===t.length&&!1===s.greedy&&0!==s.repeat&&(s.placeholder=""),0<s.repeat||"*"===s.repeat||"+"===s.repeat){var l="*"===s.repeat?0:"+"===s.repeat?1:s.repeat;t=s.groupmarker[0]+t+s.groupmarker[1]+s.quantifiermarker[0]+l+","+s.repeat+s.quantifiermarker[1]}return r=a?"regex_"+s.regex:s.numericInput?t.split("").reverse().join(""):t,!1!==s.keepStatic&&(r="ks_"+r),void 0===Inputmask.prototype.masksCache[r]||!0===e?(o={mask:t,maskToken:Inputmask.prototype.analyseMask(t,a,s),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},excludes:{},metadata:i,maskLength:void 0,jitOffset:{}},!0!==e&&(Inputmask.prototype.masksCache[r]=o,o=n.extend(!0,{},Inputmask.prototype.masksCache[r]))):o=n.extend(!0,{},Inputmask.prototype.masksCache[r]),o}if(n.isFunction(t.mask)&&(t.mask=t.mask(t)),n.isArray(t.mask)){if(1<t.mask.length){null===t.keepStatic&&(t.keepStatic=!0);var s=t.groupmarker[0];return n.each(t.isRTL?t.mask.reverse():t.mask,(function(e,i){1<s.length&&(s+=t.groupmarker[1]+t.alternatormarker+t.groupmarker[0]),void 0===i.mask||n.isFunction(i.mask)?s+=i:s+=i.mask})),i(s+=t.groupmarker[1],t.mask,t)}t.mask=t.mask.pop()}return null===t.keepStatic&&(t.keepStatic=!1),t.mask&&void 0!==t.mask.mask&&!n.isFunction(t.mask.mask)?i(t.mask.mask,t.mask,t):i(t.mask,t.mask,t)},analyseMask:function(t,e,i){var s,o,r,a,l,c,u=/(?:[?*+]|\{[0-9+*]+(?:,[0-9+*]*)?(?:\|[0-9+*]*)?\})|[^.?*+^${[]()|\\]+|./g,d=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,p=!1,h=new v,f=[],m=[],g=!1;function v(t,e,i,n){this.matches=[],this.openGroup=t||!1,this.alternatorGroup=!1,this.isGroup=t||!1,this.isOptional=e||!1,this.isQuantifier=i||!1,this.isAlternator=n||!1,this.quantifier={min:1,max:1}}function y(t,s,o){o=void 0!==o?o:t.matches.length;var r=t.matches[o-1];if(e)0===s.indexOf("[")||p&&/\\d|\\s|\\w]/i.test(s)||"."===s?t.matches.splice(o++,0,{fn:new RegExp(s,i.casing?"i":""),static:!1,optionality:!1,newBlockMarker:void 0===r?"master":r.def!==s,casing:null,def:s,placeholder:void 0,nativeDef:s}):(p&&(s=s[s.length-1]),n.each(s.split(""),(function(e,n){r=t.matches[o-1],t.matches.splice(o++,0,{fn:/[a-z]/i.test(i.staticDefinitionSymbol||n)?new RegExp("["+(i.staticDefinitionSymbol||n)+"]",i.casing?"i":""):null,static:!0,optionality:!1,newBlockMarker:void 0===r?"master":r.def!==n&&!0!==r.static,casing:null,def:i.staticDefinitionSymbol||n,placeholder:void 0!==i.staticDefinitionSymbol?n:void 0,nativeDef:(p?"'":"")+n})}))),p=!1;else{var a=(i.definitions?i.definitions[s]:void 0)||Inputmask.prototype.definitions[s];a&&!p?t.matches.splice(o++,0,{fn:a.validator?"string"==typeof a.validator?new RegExp(a.validator,i.casing?"i":""):new function(){this.test=a.validator}:new RegExp("."),static:a.static||!1,optionality:!1,newBlockMarker:void 0===r?"master":r.def!==(a.definitionSymbol||s),casing:a.casing,def:a.definitionSymbol||s,placeholder:a.placeholder,nativeDef:s,generated:a.generated}):(t.matches.splice(o++,0,{fn:/[a-z]/i.test(i.staticDefinitionSymbol||s)?new RegExp("["+(i.staticDefinitionSymbol||s)+"]",i.casing?"i":""):null,static:!0,optionality:!1,newBlockMarker:void 0===r?"master":r.def!==s&&!0!==r.static,casing:null,def:i.staticDefinitionSymbol||s,placeholder:void 0!==i.staticDefinitionSymbol?s:void 0,nativeDef:(p?"'":"")+s}),p=!1)}}function b(){if(0<f.length){if(y(a=f[f.length-1],o),a.isAlternator){l=f.pop();for(var t=0;t<l.matches.length;t++)l.matches[t].isGroup&&(l.matches[t].isGroup=!1);0<f.length?(a=f[f.length-1]).matches.push(l):h.matches.push(l)}}else y(h,o)}function w(t){var e=new v(!0);return e.openGroup=!1,e.matches=t,e}function x(){if((r=f.pop()).openGroup=!1,void 0!==r)if(0<f.length){if((a=f[f.length-1]).matches.push(r),a.isAlternator){l=f.pop();for(var t=0;t<l.matches.length;t++)l.matches[t].isGroup=!1,l.matches[t].alternatorGroup=!1;0<f.length?(a=f[f.length-1]).matches.push(l):h.matches.push(l)}}else h.matches.push(r);else b()}function k(t){var e=t.pop();return e.isQuantifier&&(e=w([t.pop(),e])),e}for(e&&(i.optionalmarker[0]=void 0,i.optionalmarker[1]=void 0);s=e?d.exec(t):u.exec(t);){if(o=s[0],e)switch(o.charAt(0)){case"?":o="{0,1}";break;case"+":case"*":o="{"+o+"}";break;case"|":if(0===f.length){var C=w(h.matches);C.openGroup=!0,f.push(C),h.matches=[],g=!0}}if(p)b();else switch(o.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case i.escapeChar:p=!0,e&&b();break;case i.optionalmarker[1]:case i.groupmarker[1]:x();break;case i.optionalmarker[0]:f.push(new v(!1,!0));break;case i.groupmarker[0]:f.push(new v(!0));break;case i.quantifiermarker[0]:var T=new v(!1,!1,!0),S=(o=o.replace(/[{}]/g,"")).split("|"),$=S[0].split(","),E=isNaN($[0])?$[0]:parseInt($[0]),D=1===$.length?E:isNaN($[1])?$[1]:parseInt($[1]);"*"!==E&&"+"!==E||(E="*"===D?0:1),T.quantifier={min:E,max:D,jit:S[1]};var _=0<f.length?f[f.length-1].matches:h.matches;if((s=_.pop()).isAlternator){_.push(s),_=s.matches;var A=new v(!0),M=_.pop();_.push(A),_=A.matches,s=M}s.isGroup||(s=w([s])),_.push(s),_.push(T);break;case i.alternatormarker:if(0<f.length){var O=(a=f[f.length-1]).matches[a.matches.length-1];c=a.openGroup&&(void 0===O.matches||!1===O.isGroup&&!1===O.isAlternator)?f.pop():k(a.matches)}else c=k(h.matches);if(c.isAlternator)f.push(c);else if(c.alternatorGroup?(l=f.pop(),c.alternatorGroup=!1):l=new v(!1,!1,!1,!0),l.matches.push(c),f.push(l),c.openGroup){c.openGroup=!1;var P=new v(!0);P.alternatorGroup=!0,f.push(P)}break;default:b()}}for(g&&x();0<f.length;)r=f.pop(),h.matches.push(r);return 0<h.matches.length&&(function t(s){s&&s.matches&&n.each(s.matches,(function(n,o){var r=s.matches[n+1];(void 0===r||void 0===r.matches||!1===r.isQuantifier)&&o&&o.isGroup&&(o.isGroup=!1,e||(y(o,i.groupmarker[0],0),!0!==o.openGroup&&y(o,i.groupmarker[1]))),t(o)}))}(h),m.push(h)),(i.numericInput||i.isRTL)&&function t(e){for(var n in e.matches=e.matches.reverse(),e.matches)if(Object.prototype.hasOwnProperty.call(e.matches,n)){var s=parseInt(n);if(e.matches[n].isQuantifier&&e.matches[s+1]&&e.matches[s+1].isGroup){var o=e.matches[n];e.matches.splice(n,1),e.matches.splice(s+1,0,o)}void 0!==e.matches[n].matches?e.matches[n]=t(e.matches[n]):e.matches[n]=((r=e.matches[n])===i.optionalmarker[0]?r=i.optionalmarker[1]:r===i.optionalmarker[1]?r=i.optionalmarker[0]:r===i.groupmarker[0]?r=i.groupmarker[1]:r===i.groupmarker[1]&&(r=i.groupmarker[0]),r)}var r;return e}(m[0]),m}}},function(t,e,i){"use strict";i(6),i(8),i(9),i(10),t.exports=i(1)},function(t,e,i){"use strict";var n=i(1);n.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}});var s=new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]");function o(t,e,i,n,o){return t=-1<i-1&&"."!==e.buffer[i-1]?(t=e.buffer[i-1]+t,-1<i-2&&"."!==e.buffer[i-2]?e.buffer[i-2]+t:"0"+t):"00"+t,s.test(t)}n.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].j[j[j]].k[k[k]].l[l[l]]",definitions:{i:{validator:o},j:{validator:o},k:{validator:o},l:{validator:o}},onUnMask:function(t,e,i){return t},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(t,e){return(t=t.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(t,e,i){return t},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0},ssn:{mask:"999-99-9999",postValidation:function(t,e,i,n,s,o,r){return/^(?!219-09-9999|078-05-1120)(?!666|000|9.{2}).{3}-(?!00).{2}-(?!0{4}).{4}$/.test(t.join(""))}}}),t.exports=n},function(t,e,i){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var s=i(2),o=i(3),r=o.document,a=o.navigator&&o.navigator.userAgent||"",l=0<a.indexOf("MSIE ")||0<a.indexOf("Trident/"),c="ontouchstart"in o,u=/iemobile/i.test(a),d=/iphone/i.test(a)&&!u,p=i(0);t.exports=function t(e,i,a){i=i||this.maskset,a=a||this.opts;var h,f,m,g=this,v=this.el,y=this.isRTL||(this.isRTL=a.numericInput),b=!1,w=!1,x=!1,k=!1,C=!1,T=void 0;function S(t,e,n,s,o){var r=a.greedy;o&&(a.greedy=!1),e=e||0;var l,c,u,d,p=[],h=0;do{if(!0===t&&i.validPositions[h])c=(u=o&&!0===i.validPositions[h].match.optionality&&void 0===i.validPositions[h+1]&&(!0===i.validPositions[h].generatedInput||i.validPositions[h].input==a.skipOptionalPartCharacter&&0<h)?A(h,j(h,l,h-1)):i.validPositions[h]).match,l=u.locator.slice(),p.push(!0===n?u.input:!1===n?c.nativeDef:X(h,c));else{c=(u=M(h,l,h-1)).match,l=u.locator.slice();var f=!0!==s&&(!1!==a.jitMasking?a.jitMasking:c.jit);(d=d&&c.static&&c.def!==a.groupSeparator&&null===c.fn||i.validPositions[h-1]&&c.static&&c.def!==a.groupSeparator&&null===c.fn)||!1===f||void 0===f||"number"==typeof f&&isFinite(f)&&h<f?p.push(!1===n?c.nativeDef:X(h,c)):d=!1}h++}while((void 0===m||h<m)&&(!0!==c.static||""!==c.def)||h<e);return""===p[p.length-1]&&p.pop(),!1===n&&void 0!==i.maskLength||(i.maskLength=h-1),a.greedy=r,p}function $(t){i.buffer=void 0,!0!==t&&(i.validPositions={},i.p=0)}function E(t,e,n){var s=-1,o=-1,r=n||i.validPositions;for(var a in void 0===t&&(t=-1),r){var l=parseInt(a);r[l]&&(e||!0!==r[l].generatedInput)&&(l<=t&&(s=l),t<=l&&(o=l))}return-1===s||s==t?o:-1==o||t-s<o-t?s:o}function D(t){var e=t.locator[t.alternation];return"string"==typeof e&&0<e.length&&(e=e.split(",")[0]),void 0!==e?e.toString():""}function _(t,e){var i=(null!=t.alternation?t.mloc[D(t)]:t.locator).join("");if(""!==i)for(;i.length<e;)i+="0";return i}function A(t,e){for(var i,n,s,o=_(O(t=0<t?t-1:0)),r=0;r<e.length;r++){var l=e[r];i=_(l,o.length);var c=Math.abs(i-o);(void 0===n||""!==i&&c<n||s&&!a.greedy&&s.match.optionality&&"master"===s.match.newBlockMarker&&(!l.match.optionality||!l.match.newBlockMarker)||s&&s.match.optionalQuantifier&&!l.match.optionalQuantifier)&&(n=c,s=l)}return s}function M(t,e,n){return i.validPositions[t]||A(t,j(t,e?e.slice():e,n))}function O(t,e){return i.validPositions[t]?i.validPositions[t]:(e||j(t))[0]}function P(t,e,n){for(var s=!1,o=j(t),r=0;r<o.length;r++){if(o[r].match&&(!(o[r].match.nativeDef!==e.match[n.shiftPositions?"def":"nativeDef"]||n.shiftPositions&&e.match.static)||o[r].match.nativeDef===e.match.nativeDef)){s=!0;break}if(o[r].match&&o[r].match.def===e.match.nativeDef){s=void 0;break}}return!1===s&&void 0!==i.jitOffset[t]&&(s=P(t+i.jitOffset[t],e,n)),s}function j(t,e,n){var o,r=i.maskToken,l=e?n:0,c=e?e.slice():[0],u=[],d=!1,p=e?e.join(""):"";function h(e,n,r,c){function f(r,c,m){function g(t,e){var i=0===s.inArray(t,e.matches);return i||s.each(e.matches,(function(n,s){if(!0===s.isQuantifier?i=g(t,e.matches[n-1]):Object.prototype.hasOwnProperty.call(s,"matches")&&(i=g(t,s)),i)return!1})),i}function y(t,e,n){var o,r;if((i.tests[t]||i.validPositions[t])&&s.each(i.tests[t]||[i.validPositions[t]],(function(t,i){if(i.mloc[e])return o=i,!1;var s=void 0!==n?n:i.alternation,a=void 0!==i.locator[s]?i.locator[s].toString().indexOf(e):-1;(void 0===r||a<r)&&-1!==a&&(o=i,r=a)})),o){var a=o.locator[o.alternation];return(o.mloc[e]||o.mloc[a]||o.locator).slice((void 0!==n?n:o.alternation)+1)}return void 0!==n?y(t,e):void 0}function b(t,e){function i(t){for(var e,i=[],n=-1,s=0,o=t.length;s<o;s++)if("-"===t.charAt(s))for(e=t.charCodeAt(s+1);++n<e;)i.push(String.fromCharCode(n));else n=t.charCodeAt(s),i.push(t.charAt(s));return i.join("")}return t.match.def===e.match.nativeDef||!(!(a.regex||t.match.fn instanceof RegExp&&e.match.fn instanceof RegExp)||!0===t.match.static||!0===e.match.static)&&-1!==i(e.match.fn.toString().replace(/[[\]/]/g,"")).indexOf(i(t.match.fn.toString().replace(/[[\]/]/g,"")))}function w(t,e){var i=t.alternation,n=void 0===e||i===e.alternation&&-1===t.locator[i].toString().indexOf(e.locator[i]);if(!n&&i>e.alternation)for(var s=e.alternation;s<i;s++)if(t.locator[s]!==e.locator[s]){i=s,n=!0;break}if(n){t.mloc=t.mloc||{};var o=t.locator[i];if(void 0!==o){if("string"==typeof o&&(o=o.split(",")[0]),void 0===t.mloc[o]&&(t.mloc[o]=t.locator.slice()),void 0!==e){for(var r in e.mloc)"string"==typeof r&&(r=r.split(",")[0]),void 0===t.mloc[r]&&(t.mloc[r]=e.mloc[r]);t.locator[i]=Object.keys(t.mloc).join(",")}return!0}t.alternation=void 0}return!1}function x(t,e){if(t.locator.length!==e.locator.length)return!1;for(var i=t.alternation+1;i<t.locator.length;i++)if(t.locator[i]!==e.locator[i])return!1;return!0}if(l>a._maxTestPos&&void 0!==m)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+i.mask;if(l===t&&void 0===r.matches)return u.push({match:r,locator:c.reverse(),cd:p,mloc:{}}),!0;if(void 0!==r.matches){if(r.isGroup&&m!==r){if(r=f(e.matches[s.inArray(r,e.matches)+1],c,m))return!0}else if(r.isOptional){var k=r,C=u.length;if(r=h(r,n,c,m)){if(s.each(u,(function(t,e){C<=t&&(e.match.optionality=!0)})),o=u[u.length-1].match,void 0!==m||!g(o,k))return!0;d=!0,l=t}}else if(r.isAlternator){var T,S=r,$=[],E=u.slice(),D=c.length,_=0<n.length?n.shift():-1;if(-1===_||"string"==typeof _){var A,M=l,O=n.slice(),P=[];if("string"==typeof _)P=_.split(",");else for(A=0;A<S.matches.length;A++)P.push(A.toString());if(void 0!==i.excludes[t]){for(var j=P.slice(),L=0,I=i.excludes[t].length;L<I;L++){var N=i.excludes[t][L].toString().split(":");c.length==N[1]&&P.splice(P.indexOf(N[0]),1)}0===P.length&&(delete i.excludes[t],P=j)}(!0===a.keepStatic||isFinite(parseInt(a.keepStatic))&&M>=a.keepStatic)&&(P=P.slice(0,1));for(var R=!1,H=0;H<P.length;H++){A=parseInt(P[H]),u=[],n="string"==typeof _&&y(l,A,D)||O.slice(),S.matches[A]&&f(S.matches[A],[A].concat(c),m)?r=!0:0===H&&(R=!0),T=u.slice(),l=M,u=[];for(var F=0;F<T.length;F++){var z=T[F],W=!1;z.match.jit=z.match.jit||R,z.alternation=z.alternation||D,w(z);for(var q=0;q<$.length;q++){var B=$[q];if("string"!=typeof _||void 0!==z.alternation&&-1!==s.inArray(z.locator[z.alternation].toString(),P)){if(z.match.nativeDef===B.match.nativeDef){W=!0,w(B,z);break}if(b(z,B)){w(z,B)&&(W=!0,$.splice($.indexOf(B),0,z));break}if(b(B,z)){w(B,z);break}if(G=B,!0===(X=z).match.static&&!0!==G.match.static&&G.match.fn.test(X.match.def,i,t,!1,a,!1)){x(z,B)||void 0!==v.inputmask.userOptions.keepStatic?w(z,B)&&(W=!0,$.splice($.indexOf(B),0,z)):a.keepStatic=!0;break}}}W||$.push(z)}}u=E.concat($),l=t,d=0<u.length,r=0<$.length,n=O.slice()}else r=f(S.matches[_]||e.matches[_],[_].concat(c),m);if(r)return!0}else if(r.isQuantifier&&m!==e.matches[s.inArray(r,e.matches)-1])for(var U=r,V=0<n.length?n.shift():0;V<(isNaN(U.quantifier.max)?V+1:U.quantifier.max)&&l<=t;V++){var Y=e.matches[s.inArray(U,e.matches)-1];if(r=f(Y,[V].concat(c),Y)){if((o=u[u.length-1].match).optionalQuantifier=V>=U.quantifier.min,o.jit=(V||1)*Y.matches.indexOf(o)>=U.quantifier.jit,o.optionalQuantifier&&g(o,Y)){d=!0,l=t;break}return o.jit&&(i.jitOffset[t]=Y.matches.length-Y.matches.indexOf(o)),!0}}else if(r=h(r,n,c,m))return!0}else l++;var X,G}for(var m=0<n.length?n.shift():0;m<e.matches.length;m++)if(!0!==e.matches[m].isQuantifier){var g=f(e.matches[m],[m].concat(r),c);if(g&&l===t)return g;if(t<l)break}}if(-1<t&&(void 0===m||t<m)){if(void 0===e){for(var f,g=t-1;void 0===(f=i.validPositions[g]||i.tests[g])&&-1<g;)g--;void 0!==f&&-1<g&&(c=function(t,e){var i=[];return s.isArray(e)||(e=[e]),0<e.length&&(void 0===e[0].alternation||!0===a.keepStatic?0===(i=A(t,e.slice()).locator.slice()).length&&(i=e[0].locator.slice()):s.each(e,(function(t,e){if(""!==e.def)if(0===i.length)i=e.locator.slice();else for(var n=0;n<i.length;n++)e.locator[n]&&-1===i[n].toString().indexOf(e.locator[n])&&(i[n]+=","+e.locator[n])}))),i}(g,f),p=c.join(""),l=g)}if(i.tests[t]&&i.tests[t][0].cd===p)return i.tests[t];for(var y=c.shift();y<r.length&&!(h(r[y],c,[y])&&l===t||t<l);y++);}return 0!==u.length&&!d||u.push({match:{fn:null,static:!0,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:p}),void 0!==e&&i.tests[t]?s.extend(!0,[],u):(i.tests[t]=s.extend(!0,[],u),i.tests[t])}function L(){return void 0===i._buffer&&(i._buffer=S(!1,1),void 0===i.buffer&&(i.buffer=i._buffer.slice())),i._buffer}function I(t){return void 0!==i.buffer&&!0!==t||(i.buffer=S(!0,E(),!0),void 0===i._buffer&&(i._buffer=i.buffer.slice())),i.buffer}function N(t,e,n){var o,r,l=a.skipOptionalPartCharacter,c=y?n.slice().reverse():n;if(a.skipOptionalPartCharacter="",!0===t)$(),i.tests={},t=0,e=n.length,r=K({begin:0,end:0},!1).begin;else{for(o=t;o<e;o++)delete i.validPositions[o];r=t}var u=new s.Event("keypress");for(o=t;o<e;o++){u.which=c[o].toString().charCodeAt(0),k=!1;var d=Z.keypressEvent.call(v,u,!0,!1,!1,r);!1!==d&&(r=d.forwardPosition)}a.skipOptionalPartCharacter=l}function R(t,e,n){switch(a.casing||e.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var o=i.validPositions[n-1];t=0===n||o&&o.input===String.fromCharCode(p.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(s.isFunction(a.casing)){var r=Array.prototype.slice.call(arguments);r.push(i.validPositions),t=a.casing.apply(this,r)}}return t}function H(t,e,i){for(var n,o=a.greedy?e:e.slice(0,1),r=!1,l=void 0!==i?i.split(","):[],c=0;c<l.length;c++)-1!==(n=t.indexOf(l[c]))&&t.splice(n,1);for(var u=0;u<t.length;u++)if(-1!==s.inArray(t[u],o)){r=!0;break}return r}function F(t,e,n,o,r,l){var c,u,d,p,h,f,m,g,v,y=s.extend(!0,{},i.validPositions),b=s.extend(!0,{},i.tests),w=!1,x=!1,k=void 0!==r?r:E();if(l&&(g=l.begin,v=l.end,l.begin>l.end&&(g=l.end,v=l.begin)),-1===k&&void 0===r)u=(p=O(c=0)).alternation;else for(;0<=k;k--)if((d=i.validPositions[k])&&void 0!==d.alternation){if(p&&p.locator[d.alternation]!==d.locator[d.alternation])break;c=k,u=i.validPositions[c].alternation,p=d}if(void 0!==u){m=parseInt(c),i.excludes[m]=i.excludes[m]||[],!0!==t&&i.excludes[m].push(D(p)+":"+p.alternation);var C=[],T=-1;for(h=m;h<E(void 0,!0)+1;h++)-1===T&&t<=h&&void 0!==e&&(C.push(e),T=C.length-1),(f=i.validPositions[h])&&!0!==f.generatedInput&&(void 0===l||h<g||v<=h)&&C.push(f.input),delete i.validPositions[h];for(-1===T&&void 0!==e&&(C.push(e),T=C.length-1);void 0!==i.excludes[m]&&i.excludes[m].length<10;){for(i.tests={},$(!0),w=!0,h=0;h<C.length&&(w=z(w.caret||E(void 0,!0)+1,C[h],!1,o,!0));h++)h===T&&(x=w),1==t&&w&&(x={caretPos:h});if(w)break;if($(),p=O(m),i.validPositions=s.extend(!0,{},y),i.tests=s.extend(!0,{},b),!i.excludes[m]){x=F(t,e,n,o,m-1,l);break}var S=D(p);if(-1!==i.excludes[m].indexOf(S+":"+p.alternation)){x=F(t,e,n,o,m-1,l);break}for(i.excludes[m].push(S+":"+p.alternation),h=m;h<E(void 0,!0)+1;h++)delete i.validPositions[h]}}return x&&!1===a.keepStatic||delete i.excludes[m],x}function z(t,e,n,o,r,l){function c(t){return y?1<t.begin-t.end||t.begin-t.end==1:1<t.end-t.begin||t.end-t.begin==1}n=!0===n;var u=t;function d(t){if(void 0!==t){if(void 0!==t.remove&&(s.isArray(t.remove)||(t.remove=[t.remove]),s.each(t.remove.sort((function(t,e){return e.pos-t.pos})),(function(t,e){q({begin:e,end:e+1})})),t.remove=void 0),void 0!==t.insert&&(s.isArray(t.insert)||(t.insert=[t.insert]),s.each(t.insert.sort((function(t,e){return t.pos-e.pos})),(function(t,e){""!==e.c&&z(e.pos,e.c,void 0===e.strict||e.strict,void 0!==e.fromIsValid?e.fromIsValid:o)})),t.insert=void 0),t.refreshFromBuffer&&t.buffer){var e=t.refreshFromBuffer;N(!0===e?e:e.start,e.end,t.buffer),t.refreshFromBuffer=void 0}void 0!==t.rewritePosition&&(u=t.rewritePosition,t=!0)}return t}function p(e,n,r){var l=!1;return s.each(j(e),(function(u,p){var h=p.match;if(I(!0),!1!==(l=null!=h.fn?h.fn.test(n,i,e,r,a,c(t)):(n===h.def||n===a.skipOptionalPartCharacter)&&""!==h.def&&{c:X(e,h,!0)||h.def,pos:e})){var f=void 0!==l.c?l.c:n,m=e;return f=f===a.skipOptionalPartCharacter&&!0===h.static?X(e,h,!0)||h.def:f,!0!==(l=d(l))&&void 0!==l.pos&&l.pos!==e&&(m=l.pos),!0!==l&&void 0===l.pos&&void 0===l.c||!1===q(t,s.extend({},p,{input:R(f,h,m)}),o,m)&&(l=!1),!1}})),l}void 0!==t.begin&&(u=y?t.end:t.begin);var h=!0,f=s.extend(!0,{},i.validPositions);if(!1===a.keepStatic&&void 0!==i.excludes[u]&&!0!==r&&!0!==o)for(var g=u;g<(y?t.begin:t.end);g++)void 0!==i.excludes[g]&&(i.excludes[g]=void 0,delete i.tests[g]);if(s.isFunction(a.preValidation)&&!0!==o&&!0!==l&&(h=d(h=a.preValidation.call(v,I(),u,e,c(t),a,i,t,n||r))),!0===h){if(void 0===m||u<m){if(h=p(u,e,n),(!n||!0===o)&&!1===h&&!0!==l){var b=i.validPositions[u];if(!b||!0!==b.match.static||b.match.def!==e&&e!==a.skipOptionalPartCharacter){if(a.insertMode||void 0===i.validPositions[U(u)]||t.end>u){var w=!1;if(i.jitOffset[u]&&void 0===i.validPositions[U(u)]&&!1!==(h=z(u+i.jitOffset[u],e,!0))&&(!0!==r&&(h.caret=u),w=!0),t.end>u&&(i.validPositions[u]=void 0),!w&&!B(u,a.keepStatic))for(var x=u+1,k=U(u);x<=k;x++)if(!1!==(h=p(x,e,n))){h=W(u,void 0!==h.pos?h.pos:x)||h,u=x;break}}}else h={caret:U(u)}}}else h=!1;!1!==h||!a.keepStatic||!rt(I())&&0!==u||n||!0===r?c(t)&&i.tests[u]&&1<i.tests[u].length&&a.keepStatic&&!n&&!0!==r&&(h=F(!0)):h=F(u,e,n,o,void 0,t),!0===h&&(h={pos:u})}if(s.isFunction(a.postValidation)&&!0!==o&&!0!==l){var C=a.postValidation.call(v,I(!0),void 0!==t.begin?y?t.end:t.begin:t,e,h,a,i,n);void 0!==C&&(h=!0===C?h:C)}return h&&void 0===h.pos&&(h.pos=u),!1===h||!0===l?($(!0),i.validPositions=s.extend(!0,{},f)):W(void 0,u,!0),d(h)}function W(t,e,n){if(void 0===t)for(t=e-1;0<t&&!i.validPositions[t];t--);for(var o=t;o<e;o++)if(void 0===i.validPositions[o]&&!B(o,!0)&&(0==o?O(o):i.validPositions[o-1])){var r=j(o).slice();""===r[r.length-1].match.def&&r.pop();var a,l=A(o,r);if(l&&(!0!==l.match.jit||"master"===l.match.newBlockMarker&&(a=i.validPositions[o+1])&&!0===a.match.optionalQuantifier)&&((l=s.extend({},l,{input:X(o,l.match,!0)||l.match.def})).generatedInput=!0,q(o,l,!0),!0!==n)){var c=i.validPositions[e].input;return i.validPositions[e]=void 0,z(e,c,!0,!0)}}}function q(t,e,n,o){function r(t,e,i){var n=e[t];if(void 0===n||!0!==n.match.static||!0===n.match.optionality||void 0!==e[0]&&void 0!==e[0].alternation)return!1;var s=i.begin<=t-1?e[t-1]&&!0===e[t-1].match.static&&e[t-1]:e[t-1],o=i.end>t+1?e[t+1]&&!0===e[t+1].match.static&&e[t+1]:e[t+1];return s&&o}var l=0,c=void 0!==t.begin?t.begin:t,u=void 0!==t.end?t.end:t;if(t.begin>t.end&&(c=t.end,u=t.begin),o=void 0!==o?o:c,c!==u||a.insertMode&&void 0!==i.validPositions[o]&&void 0===n||void 0===e){var d,p=s.extend(!0,{},i.validPositions),h=E(void 0,!0);for(i.p=c,d=h;c<=d;d--)delete i.validPositions[d],void 0===e&&delete i.tests[d+1];var f,m,g=!0,v=o,y=v;for(e&&(i.validPositions[o]=s.extend(!0,{},e),y++,v++),d=e?u:u-1;d<=h;d++){if(void 0!==(f=p[d])&&!0!==f.generatedInput&&(u<=d||c<=d&&r(d,p,{begin:c,end:u}))){for(;""!==O(y).match.def;){if(!1!==(m=P(y,f,a))||"+"===f.match.def){"+"===f.match.def&&I(!0);var b=z(y,f.input,"+"!==f.match.def,"+"!==f.match.def);if(g=!1!==b,v=(b.pos||y)+1,!g&&m)break}else g=!1;if(g){void 0===e&&f.match.static&&d===t.begin&&l++;break}if(!g&&y>i.maskLength)break;y++}""==O(y).match.def&&(g=!1),y=v}if(!g)break}if(!g)return i.validPositions=s.extend(!0,{},p),$(!0),!1}else e&&O(o).match.cd===e.match.cd&&(i.validPositions[o]=s.extend(!0,{},e));return $(!0),l}function B(t,e,n){var s=M(t).match;if(""===s.def&&(s=O(t).match),!0!==s.static)return s.fn;if(!0===n&&void 0!==i.validPositions[t]&&!0!==i.validPositions[t].generatedInput)return!0;if(!0!==e&&-1<t){if(n){var o=j(t);return o.length>1+(""===o[o.length-1].match.def?1:0)}var r=A(t,j(t)),a=X(t,r.match);return r.match.def!==a}return!1}function U(t,e,i){void 0===i&&(i=!0);for(var n=t+1;""!==O(n).match.def&&(!0===e&&(!0!==O(n).match.newBlockMarker||!B(n,void 0,!0))||!0!==e&&!B(n,void 0,i));)n++;return n}function V(t,e){var i,n=t;if(n<=0)return 0;for(;0<--n&&(!0===e&&!0!==O(n).match.newBlockMarker||!0!==e&&!B(n,void 0,!0)&&((i=j(n)).length<2||2===i.length&&""===i[1].match.def)););return n}function Y(t,e,i,n,o){if(n&&s.isFunction(a.onBeforeWrite)){var r=a.onBeforeWrite.call(g,n,e,i,a);if(r){if(r.refreshFromBuffer){var l=r.refreshFromBuffer;N(!0===l?l:l.start,l.end,r.buffer||e),e=I(!0)}void 0!==i&&(i=void 0!==r.caret?r.caret:i)}}if(void 0!==t&&(t.inputmask._valueSet(e.join("")),void 0===i||void 0!==n&&"blur"===n.type||nt(t,i,void 0,void 0,void 0!==n&&"keydown"===n.type&&(n.keyCode===p.DELETE||n.keyCode===p.BACKSPACE)),!0===o)){var c=s(t),u=t.inputmask._valueGet();w=!0,c.trigger("input"),setTimeout((function(){u===L().join("")?c.trigger("cleared"):!0===rt(e)&&c.trigger("complete")}),0)}}function X(t,e,n){if(void 0!==(e=e||O(t).match).placeholder||!0===n)return s.isFunction(e.placeholder)?e.placeholder(a):e.placeholder;if(!0!==e.static)return a.placeholder.charAt(t%a.placeholder.length);if(-1<t&&void 0===i.validPositions[t]){var o,r=j(t),l=[];if(r.length>1+(""===r[r.length-1].match.def?1:0))for(var c=0;c<r.length;c++)if(""!==r[c].match.def&&!0!==r[c].match.optionality&&!0!==r[c].match.optionalQuantifier&&(!0===r[c].match.static||void 0===o||!1!==r[c].match.fn.test(o.match.def,i,t,!0,a))&&(l.push(r[c]),!0===r[c].match.static&&(o=r[c]),1<l.length&&/[0-9a-bA-Z]/.test(l[0].match.def)))return a.placeholder.charAt(t%a.placeholder.length)}return e.def}function G(t,e){if(l){if(t.inputmask._valueGet()!==e&&(t.placeholder!==e||""===t.placeholder)){var i=I().slice(),n=t.inputmask._valueGet();if(n!==e){var s=E();-1===s&&n===L().join("")?i=[]:-1!==s&&ot(i),Y(t,i)}}}else t.placeholder!==e&&(t.placeholder=e,""===t.placeholder&&t.removeAttribute("placeholder"))}function K(t,e){if(e&&(y?t.end=t.begin:t.begin=t.end),t.begin===t.end){switch(a.positionCaretOnClick){case"none":break;case"select":t={begin:0,end:I().length};break;case"ignore":t.end=t.begin=U(E());break;case"radixFocus":if(function(t){if(""!==a.radixPoint&&0!==a.digits){var e=i.validPositions;if(void 0===e[t]||e[t].input===X(t)){if(t<U(-1))return!0;var n=s.inArray(a.radixPoint,I());if(-1!==n){for(var o in e)if(e[o]&&n<o&&e[o].input!==X(o))return!1;return!0}}}return!1}(t.begin)){var n=I().join("").indexOf(a.radixPoint);t.end=t.begin=a.numericInput?U(n):n;break}default:var o=t.begin,r=E(o,!0),l=U(-1!==r||B(0)?r:0);if(o<l)t.end=t.begin=B(o,!0)||B(o-1,!0)?o:U(o);else{var c=i.validPositions[r],u=M(l,c?c.match.locator:void 0,c),d=X(l,u.match);if(""!==d&&I()[l]!==d&&!0!==u.match.optionalQuantifier&&!0!==u.match.newBlockMarker||!B(l,a.keepStatic)&&u.match.def===d){var p=U(l);(p<=o||o===l)&&(l=p)}t.end=t.begin=l}}return t}}var Q,J={on:function(t,e,i){var n=function(e){e.originalEvent&&(e=e.originalEvent||e,arguments[0]=e);var n,o=this;if(void 0===o.inputmask&&"FORM"!==this.nodeName){var r=s.data(o,"_inputmask_opts");r?new Inputmask(r).mask(o):J.off(o)}else{if("setvalue"===e.type||"FORM"===this.nodeName||!(o.disabled||o.readOnly&&!("keydown"===e.type&&e.ctrlKey&&67===e.keyCode||!1===a.tabThrough&&e.keyCode===p.TAB))){switch(e.type){case"input":if(!0===w||e.inputType&&"insertCompositionText"===e.inputType)return w=!1,e.preventDefault();break;case"keydown":b=!1,w=!1;break;case"keypress":if(!0===b)return e.preventDefault();b=!0;break;case"click":case"focus":return x?(x=!1,t.blur(),G(t,(y?L().slice().reverse():L()).join("")),setTimeout((function(){t.focus()}),3e3)):(n=arguments,setTimeout((function(){t.inputmask&&i.apply(o,n)}),0)),!1}var l=i.apply(o,arguments);return!1===l&&(e.preventDefault(),e.stopPropagation()),l}e.preventDefault()}};t.inputmask.events[e]=t.inputmask.events[e]||[],t.inputmask.events[e].push(n),-1!==s.inArray(e,["submit","reset"])?null!==t.form&&s(t.form).on(e,n):s(t).on(e,n)},off:function(t,e){var i;t.inputmask&&t.inputmask.events&&(e?(i=[])[e]=t.inputmask.events[e]:i=t.inputmask.events,s.each(i,(function(e,i){for(;0<i.length;){var n=i.pop();-1!==s.inArray(e,["submit","reset"])?null!==t.form&&s(t.form).off(e,n):s(t).off(e,n)}delete t.inputmask.events[e]})))}},Z={keydownEvent:function(t){var e=this,n=s(e),o=t.keyCode,r=nt(e),l=a.onKeyDown.call(this,t,I(),r,a);if(void 0!==l)return l;if(o===p.BACKSPACE||o===p.DELETE||d&&o===p.BACKSPACE_SAFARI||t.ctrlKey&&o===p.X&&!("oncut"in e))t.preventDefault(),at(0,o,r),Y(e,I(!0),i.p,t,e.inputmask._valueGet()!==I().join(""));else if(o===p.END||o===p.PAGE_DOWN){t.preventDefault();var c=U(E());nt(e,t.shiftKey?r.begin:c,c,!0)}else o===p.HOME&&!t.shiftKey||o===p.PAGE_UP?(t.preventDefault(),nt(e,0,t.shiftKey?r.begin:0,!0)):(a.undoOnEscape&&o===p.ESCAPE||90===o&&t.ctrlKey)&&!0!==t.altKey?(tt(e,!0,!1,h.split("")),n.trigger("click")):!0===a.tabThrough&&o===p.TAB?(!0===t.shiftKey?(!0===O(r.begin).match.static&&(r.begin=U(r.begin)),r.end=V(r.begin,!0),r.begin=V(r.end,!0)):(r.begin=U(r.begin,!0),r.end=U(r.begin,!0),r.end<i.maskLength&&r.end--),r.begin<i.maskLength&&(t.preventDefault(),nt(e,r.begin,r.end))):t.shiftKey||a.insertModeVisual&&!1===a.insertMode&&(o===p.RIGHT?setTimeout((function(){var t=nt(e);nt(e,t.begin)}),0):o===p.LEFT&&setTimeout((function(){var t=it(e.inputmask.caretPos.begin);it(e.inputmask.caretPos.end),nt(e,y?t+(t===i.maskLength?0:1):t-(0===t?0:1))}),0));k=-1!==s.inArray(o,a.ignorables)},keypressEvent:function(t,e,n,o,r){var l=this,c=s(l),u=t.which||t.charCode||t.keyCode;if(!(!0===e||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||k))return u===p.ENTER&&h!==I().join("")&&(h=I().join(""),setTimeout((function(){c.trigger("change")}),0)),w=!0,!0;if(u){44!==u&&46!==u||3!==t.location||""===a.radixPoint||(u=a.radixPoint.charCodeAt(0));var d,f=e?{begin:r,end:r}:nt(l),m=String.fromCharCode(u);i.writeOutBuffer=!0;var g=z(f,m,o);if(!1!==g&&($(!0),d=void 0!==g.caret?g.caret:U(g.pos.begin?g.pos.begin:g.pos),i.p=d),d=a.numericInput&&void 0===g.caret?V(d):d,!1!==n&&(setTimeout((function(){a.onKeyValidation.call(l,u,g)}),0),i.writeOutBuffer&&!1!==g)){var v=I();Y(l,v,d,t,!0!==e)}if(t.preventDefault(),e)return!1!==g&&(g.forwardPosition=d),g}},pasteEvent:function(t){var e,i=this.inputmask._valueGet(!0),n=nt(this);y&&(e=n.end,n.end=n.begin,n.begin=e);var r=i.substr(0,n.begin),l=i.substr(n.end,i.length);if(r==(y?L().slice().reverse():L()).slice(0,n.begin).join("")&&(r=""),l==(y?L().slice().reverse():L()).slice(n.end).join("")&&(l=""),o.clipboardData&&o.clipboardData.getData)i=r+o.clipboardData.getData("Text")+l;else{if(!t.clipboardData||!t.clipboardData.getData)return!0;i=r+t.clipboardData.getData("text/plain")+l}var c=i;if(s.isFunction(a.onBeforePaste)){if(!1===(c=a.onBeforePaste.call(g,i,a)))return t.preventDefault();c=c||i}return tt(this,!1,!1,c.toString().split("")),Y(this,I(),U(E()),t,h!==I().join("")),t.preventDefault()},inputFallBackEvent:function(t){var e=this,i=e.inputmask._valueGet(!0),n=(y?I().slice().reverse():I()).join(""),o=nt(e,void 0,void 0,!0);if(n!==i){var l=function(t,e,i){for(var n,s,o,r=t.substr(0,i.begin).split(""),l=t.substr(i.begin).split(""),c=e.substr(0,i.begin).split(""),u=e.substr(i.begin).split(""),d=r.length>=c.length?r.length:c.length,p=l.length>=u.length?l.length:u.length,h="",f=[];r.length<d;)r.push("~");for(;c.length<d;)c.push("~");for(;l.length<p;)l.unshift("~");for(;u.length<p;)u.unshift("~");var m=r.concat(l),g=c.concat(u);for(s=0,n=m.length;s<n;s++)switch(o=X(it(s)),h){case"insertText":g[s-1]===m[s]&&i.begin==m.length-1&&f.push(m[s]),s=n;break;case"insertReplacementText":case"deleteContentBackward":"~"===m[s]?i.end++:s=n;break;default:m[s]!==g[s]&&("~"!==m[s+1]&&m[s+1]!==o&&void 0!==m[s+1]||(g[s]!==o||"~"!==g[s+1])&&"~"!==g[s]?"~"===g[s+1]&&g[s]===m[s+1]?(h="insertText",f.push(m[s]),i.begin--,i.end--):m[s]!==o&&"~"!==m[s]&&("~"===m[s+1]||g[s]!==m[s]&&g[s+1]===m[s+1])?(h="insertReplacementText",f.push(m[s]),i.begin--):"~"===m[s]?(h="deleteContentBackward",!B(it(s),!0)&&g[s]!==a.radixPoint||i.end++):s=n:(h="insertText",f.push(m[s]),i.begin--,i.end--))}return{action:h,data:f,caret:i}}(i=function(t,e,i){if(u){var n=e.replace(I().join(""),"");if(1===n.length){var s=e.split("");s.splice(i.begin,0,n),e=s.join("")}}return e}(0,i,o),n,o);switch((e.inputmask.shadowRoot||r).activeElement!==e&&e.focus(),Y(e,I()),nt(e,o.begin,o.end,!0),l.action){case"insertText":case"insertReplacementText":s.each(l.data,(function(t,i){var n=new s.Event("keypress");n.which=i.charCodeAt(0),k=!1,Z.keypressEvent.call(e,n)})),setTimeout((function(){f.trigger("keyup")}),0);break;case"deleteContentBackward":var c=new s.Event("keydown");c.keyCode=p.BACKSPACE,Z.keydownEvent.call(e,c);break;default:lt(e,i)}t.preventDefault()}},compositionendEvent:function(t){f.trigger("input")},setValueEvent:function(t,e,i){var n=t&&t.detail?t.detail[0]:e;void 0===n&&(n=this.inputmask._valueGet(!0)),lt(this,n),(t.detail&&void 0!==t.detail[1]||void 0!==i)&&nt(this,t.detail?t.detail[1]:i)},focusEvent:function(t){var e=this.inputmask._valueGet();a.showMaskOnFocus&&e!==I().join("")&&Y(this,I(),U(E())),!0!==a.positionCaretOnTab||!1!==C||rt(I())&&-1!==E()||Z.clickEvent.apply(this,[t,!0]),h=I().join("")},invalidEvent:function(t){x=!0},mouseleaveEvent:function(){C=!1,a.clearMaskOnLostFocus&&(this.inputmask.shadowRoot||r).activeElement!==this&&G(this,T)},clickEvent:function(t,e){if((this.inputmask.shadowRoot||r).activeElement===this){var i=K(nt(this),e);void 0!==i&&nt(this,i)}},cutEvent:function(t){var e=nt(this),n=o.clipboardData||t.clipboardData,s=y?I().slice(e.end,e.begin):I().slice(e.begin,e.end);n.setData("text",y?s.reverse().join(""):s.join("")),r.execCommand&&r.execCommand("copy"),at(0,p.DELETE,e),Y(this,I(),i.p,t,h!==I().join(""))},blurEvent:function(t){var e=s(this);if(this.inputmask){G(this,T);var i=this.inputmask._valueGet(),n=I().slice();""!==i&&(a.clearMaskOnLostFocus&&(-1===E()&&i===L().join("")?n=[]:ot(n)),!1===rt(n)&&(setTimeout((function(){e.trigger("incomplete")}),0),a.clearIncomplete&&($(),n=a.clearMaskOnLostFocus?[]:L().slice())),Y(this,n,void 0,t)),h!==I().join("")&&(h=I().join(""),e.trigger("change"))}},mouseenterEvent:function(){C=!0,(this.inputmask.shadowRoot||r).activeElement!==this&&(null==T&&this.placeholder!==T&&(T=this.placeholder),a.showMaskOnHover&&G(this,(y?L().slice().reverse():L()).join("")))},submitEvent:function(){h!==I().join("")&&f.trigger("change"),a.clearMaskOnLostFocus&&-1===E()&&v.inputmask._valueGet&&v.inputmask._valueGet()===L().join("")&&v.inputmask._valueSet(""),a.clearIncomplete&&!1===rt(I())&&v.inputmask._valueSet(""),a.removeMaskOnSubmit&&(v.inputmask._valueSet(v.inputmask.unmaskedvalue(),!0),setTimeout((function(){Y(v,I())}),0))},resetEvent:function(){v.inputmask.refreshValue=!0,setTimeout((function(){lt(v,v.inputmask._valueGet(!0))}),0)}};function tt(t,e,n,o,r){var l=this||t.inputmask,c=o.slice(),u="",d=-1,p=void 0;$(),i.tests={},d=a.radixPoint?K({begin:0,end:0}).begin:0,i.p=d,l.caretPos={begin:d};var h=[],f=l.caretPos;if(s.each(c,(function(e,o){if(void 0!==o)if(void 0===i.validPositions[e]&&c[e]===X(e)&&B(e,!0)&&!1===z(e,c[e],!0,void 0,void 0,!0))i.p++;else{var r=new s.Event("_checkval");r.which=o.toString().charCodeAt(0),u+=o;var a=E(void 0,!0);!function(t,e){for(var i=S(!0,0).slice(t,U(t)).join("").replace(/'/g,""),n=i.indexOf(e);0<n&&" "===i[n-1];)n--;var s=0===n&&!B(t)&&(O(t).match.nativeDef===e.charAt(0)||!0===O(t).match.static&&O(t).match.nativeDef==="'"+e.charAt(0)||" "===O(t).match.nativeDef&&(O(t+1).match.nativeDef===e.charAt(0)||!0===O(t+1).match.static&&O(t+1).match.nativeDef==="'"+e.charAt(0)));if(!s&&0<n&&!B(t,!1,!0)){var o=U(t);l.caretPos.begin<o&&(l.caretPos={begin:o})}return s}(d,u)?(p=Z.keypressEvent.call(t,r,!0,!1,n,l.caretPos.begin))&&(d=l.caretPos.begin+1,u=""):p=Z.keypressEvent.call(t,r,!0,!1,n,a+1),p?(void 0!==p.pos&&i.validPositions[p.pos]&&!0===i.validPositions[p.pos].match.static&&void 0===i.validPositions[p.pos].alternation&&(h.push(p.pos),y||(p.forwardPosition=p.pos+1)),Y(void 0,I(),p.forwardPosition,r,!1),l.caretPos={begin:p.forwardPosition,end:p.forwardPosition},f=l.caretPos):l.caretPos=f}})),0<h.length){var m,g,v=U(-1,void 0,!1);if(!rt(I())&&h.length<=v||rt(I())&&0<h.length&&h.length!==v&&0===h[0])for(var b=v;void 0!==(m=h.shift());){var w=new s.Event("_checkval");if((g=i.validPositions[m]).generatedInput=!0,w.which=g.input.charCodeAt(0),(p=Z.keypressEvent.call(t,w,!0,!1,n,b))&&void 0!==p.pos&&p.pos!==m&&i.validPositions[p.pos]&&!0===i.validPositions[p.pos].match.static)h.push(p.pos);else if(!p)break;b++}else for(;m=h.pop();)(g=i.validPositions[m])&&(g.generatedInput=!0)}if(e)for(var x in Y(t,I(),p?p.forwardPosition:void 0,r||new s.Event("checkval"),r&&"input"===r.type),i.validPositions)!0!==i.validPositions[x].match.generated&&delete i.validPositions[x].generatedInput}function et(t){if(t){if(void 0===t.inputmask)return t.value;t.inputmask&&t.inputmask.refreshValue&&lt(t,t.inputmask._valueGet(!0))}var e=[],n=i.validPositions;for(var o in n)n[o]&&n[o].match&&(1!=n[o].match.static||!0!==n[o].generatedInput)&&e.push(n[o].input);var r=0===e.length?"":(y?e.reverse():e).join("");if(s.isFunction(a.onUnMask)){var l=(y?I().slice().reverse():I()).join("");r=a.onUnMask.call(g,l,r,a)}return r}function it(t){return!y||"number"!=typeof t||a.greedy&&""===a.placeholder||!v||(t=v.inputmask._valueGet().length-t),t}function nt(t,e,i,n,l){var c;if(void 0===e)return"selectionStart"in t&&"selectionEnd"in t?(e=t.selectionStart,i=t.selectionEnd):o.getSelection?(c=o.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==t&&c.commonAncestorContainer!==t||(e=c.startOffset,i=c.endOffset):r.selection&&r.selection.createRange&&(i=(e=0-(c=r.selection.createRange()).duplicate().moveStart("character",-t.inputmask._valueGet().length))+c.text.length),{begin:n?e:it(e),end:n?i:it(i)};if(s.isArray(e)&&(i=y?e[0]:e[1],e=y?e[1]:e[0]),void 0!==e.begin&&(i=y?e.begin:e.end,e=y?e.end:e.begin),"number"==typeof e){e=n?e:it(e),i="number"==typeof(i=n?i:it(i))?i:e;var u=parseInt(((t.ownerDocument.defaultView||o).getComputedStyle?(t.ownerDocument.defaultView||o).getComputedStyle(t,null):t.currentStyle).fontSize)*i;if(t.scrollLeft=u>t.scrollWidth?u:0,t.inputmask.caretPos={begin:e,end:i},a.insertModeVisual&&!1===a.insertMode&&e===i&&(l||i++),t===(t.inputmask.shadowRoot||r).activeElement)if("setSelectionRange"in t)t.setSelectionRange(e,i);else if(o.getSelection){if(c=r.createRange(),void 0===t.firstChild||null===t.firstChild){var d=r.createTextNode("");t.appendChild(d)}c.setStart(t.firstChild,e<t.inputmask._valueGet().length?e:t.inputmask._valueGet().length),c.setEnd(t.firstChild,i<t.inputmask._valueGet().length?i:t.inputmask._valueGet().length),c.collapse(!0);var p=o.getSelection();p.removeAllRanges(),p.addRange(c)}else t.createTextRange&&((c=t.createTextRange()).collapse(!0),c.moveEnd("character",i),c.moveStart("character",e),c.select())}}function st(t){var e,n,o=S(!0,E(),!0,!0),r=o.length,a=E(),l={},c=i.validPositions[a],u=void 0!==c?c.locator.slice():void 0;for(e=a+1;e<o.length;e++)u=(n=M(e,u,e-1)).locator.slice(),l[e]=s.extend(!0,{},n);var d=c&&void 0!==c.alternation?c.locator[c.alternation]:void 0;for(e=r-1;a<e&&((n=l[e]).match.optionality||n.match.optionalQuantifier&&n.match.newBlockMarker||d&&(d!==l[e].locator[c.alternation]&&1!=n.match.static||!0===n.match.static&&n.locator[c.alternation]&&H(n.locator[c.alternation].toString().split(","),d.toString().split(","))&&""!==j(e)[0].def))&&o[e]===X(e,n.match);e--)r--;return t?{l:r,def:l[r]?l[r].match:void 0}:r}function ot(t){t.length=0;for(var e,i=S(!0,0,!0,void 0,!0);void 0!==(e=i.shift());)t.push(e);return t}function rt(t){if(s.isFunction(a.isComplete))return a.isComplete(t,a);if("*"!==a.repeat){var e=!1,n=st(!0),o=V(n.l);if(void 0===n.def||n.def.newBlockMarker||n.def.optionality||n.def.optionalQuantifier){e=!0;for(var r=0;r<=o;r++){var l=M(r).match;if(!0!==l.static&&void 0===i.validPositions[r]&&!0!==l.optionality&&!0!==l.optionalQuantifier||!0===l.static&&t[r]!==X(r,l)){e=!1;break}}}return e}}function at(t,e,n,s,o){if((a.numericInput||y)&&(e===p.BACKSPACE?e=p.DELETE:e===p.DELETE&&(e=p.BACKSPACE),y)){var r=n.end;n.end=n.begin,n.begin=r}var l,c=E(void 0,!0);if(n.end>=I().length&&c>=n.end&&(n.end=c+1),e===p.BACKSPACE?n.end-n.begin<1&&(n.begin=V(n.begin)):e===p.DELETE&&n.begin===n.end&&(n.end=B(n.end,!0,!0)?n.end+1:U(n.end)+1),!1!==(l=q(n))){if(!0!==s&&!1!==a.keepStatic||null!==a.regex&&-1!==O(n.begin).match.def.indexOf("|")){var u=F(!0);if(u){var d=void 0!==u.caret?u.caret:u.pos?U(u.pos.begin?u.pos.begin:u.pos):E(-1,!0);(e!==p.DELETE||n.begin>d)&&n.begin}}!0!==s&&(i.p=e===p.DELETE?n.begin+l:n.begin)}}function lt(t,e){t.inputmask.refreshValue=!1,s.isFunction(a.onBeforeMask)&&(e=a.onBeforeMask.call(g,e,a)||e),tt(t,!0,!1,e=e.toString().split("")),h=I().join(""),(a.clearMaskOnLostFocus||a.clearIncomplete)&&t.inputmask._valueGet()===L().join("")&&-1===E()&&t.inputmask._valueSet("")}if(void 0!==e)switch(e.action){case"isComplete":return v=e.el,rt(I());case"unmaskedvalue":return void 0!==v&&void 0===e.value||(Q=e.value,Q=(s.isFunction(a.onBeforeMask)&&a.onBeforeMask.call(g,Q,a)||Q).split(""),tt.call(this,void 0,!1,!1,Q),s.isFunction(a.onBeforeWrite)&&a.onBeforeWrite.call(g,void 0,I(),0,a)),et(v);case"mask":!function(t){J.off(t);var e=function(t,e){"textarea"!==t.tagName.toLowerCase()&&e.ignorables.push(p.ENTER);var i=t.getAttribute("type"),o="input"===t.tagName.toLowerCase()&&-1!==s.inArray(i,e.supportsInputType)||t.isContentEditable||"textarea"===t.tagName.toLowerCase();if(!o)if("input"===t.tagName.toLowerCase()){var a=r.createElement("input");a.setAttribute("type",i),o="text"===a.type,a=null}else o="partial";return!1!==o?function(t){var i,o;function a(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==E()||!0!==e.nullable?(this.inputmask.shadowRoot||r.activeElement)===this&&e.clearMaskOnLostFocus?(y?ot(I().slice()).reverse():ot(I().slice())).join(""):i.call(this):"":i.call(this)}function l(t){o.call(this,t),this.inputmask&&lt(this,t)}if(!t.inputmask.__valueGet){if(!0!==e.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===n("test".__proto__)?function(t){return t.__proto__}:function(t){return t.constructor.prototype});var c=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):void 0;c&&c.get&&c.set?(i=c.get,o=c.set,Object.defineProperty(t,"value",{get:a,set:l,configurable:!0})):"input"!==t.tagName.toLowerCase()&&(i=function(){return this.textContent},o=function(t){this.textContent=t},Object.defineProperty(t,"value",{get:a,set:l,configurable:!0}))}else r.__lookupGetter__&&t.__lookupGetter__("value")&&(i=t.__lookupGetter__("value"),o=t.__lookupSetter__("value"),t.__defineGetter__("value",a),t.__defineSetter__("value",l));t.inputmask.__valueGet=i,t.inputmask.__valueSet=o}t.inputmask._valueGet=function(t){return y&&!0!==t?i.call(this.el).split("").reverse().join(""):i.call(this.el)},t.inputmask._valueSet=function(t,e){o.call(this.el,null==t?"":!0!==e&&y?t.split("").reverse().join(""):t)},void 0===i&&(i=function(){return this.value},o=function(t){this.value=t},function(t){if(s.valHooks&&(void 0===s.valHooks[t]||!0!==s.valHooks[t].inputmaskpatch)){var i=s.valHooks[t]&&s.valHooks[t].get?s.valHooks[t].get:function(t){return t.value},n=s.valHooks[t]&&s.valHooks[t].set?s.valHooks[t].set:function(t,e){return t.value=e,t};s.valHooks[t]={get:function(t){if(t.inputmask){if(t.inputmask.opts.autoUnmask)return t.inputmask.unmaskedvalue();var n=i(t);return-1!==E(void 0,void 0,t.inputmask.maskset.validPositions)||!0!==e.nullable?n:""}return i(t)},set:function(t,e){var i=n(t,e);return t.inputmask&&lt(t,e),i},inputmaskpatch:!0}}}(t.type),function(t){J.on(t,"mouseenter",(function(){var t=this.inputmask._valueGet(!0);t!==(y?I().reverse():I()).join("")&&lt(this,t)}))}(t))}}(t):t.inputmask=void 0,o}(t,a);if(!1!==e){f=s(v=t),T=v.placeholder,-1===(m=void 0!==v?v.maxLength:void 0)&&(m=void 0),"inputMode"in v&&null===v.getAttribute("inputmode")&&(v.inputMode=a.inputmode,v.setAttribute("inputmode",a.inputmode)),!0===e&&(a.showMaskOnFocus=a.showMaskOnFocus&&-1===["cc-number","cc-exp"].indexOf(v.autocomplete),d&&(a.insertModeVisual=!1),J.on(v,"submit",Z.submitEvent),J.on(v,"reset",Z.resetEvent),J.on(v,"blur",Z.blurEvent),J.on(v,"focus",Z.focusEvent),J.on(v,"invalid",Z.invalidEvent),J.on(v,"click",Z.clickEvent),J.on(v,"mouseleave",Z.mouseleaveEvent),J.on(v,"mouseenter",Z.mouseenterEvent),J.on(v,"paste",Z.pasteEvent),J.on(v,"cut",Z.cutEvent),J.on(v,"complete",a.oncomplete),J.on(v,"incomplete",a.onincomplete),J.on(v,"cleared",a.oncleared),c||!0===a.inputEventOnly?v.removeAttribute("maxLength"):(J.on(v,"keydown",Z.keydownEvent),J.on(v,"keypress",Z.keypressEvent)),J.on(v,"input",Z.inputFallBackEvent),J.on(v,"compositionend",Z.compositionendEvent)),J.on(v,"setvalue",Z.setValueEvent),h=L().join("");var i=(v.inputmask.shadowRoot||r).activeElement;if(""!==v.inputmask._valueGet(!0)||!1===a.clearMaskOnLostFocus||i===v){lt(v,v.inputmask._valueGet(!0));var o=I().slice();!1===rt(o)&&a.clearIncomplete&&$(),a.clearMaskOnLostFocus&&i!==v&&(-1===E()?o=[]:ot(o)),(!1===a.clearMaskOnLostFocus||a.showMaskOnFocus&&i===v||""!==v.inputmask._valueGet(!0))&&Y(v,o),i===v&&nt(v,U(E()))}}}(v);break;case"format":return Q=(s.isFunction(a.onBeforeMask)&&a.onBeforeMask.call(g,e.value,a)||e.value).split(""),tt.call(this,void 0,!0,!1,Q),e.metadata?{value:y?I().slice().reverse().join(""):I().join(""),metadata:t.call(this,{action:"getmetadata"},i,a)}:y?I().slice().reverse().join(""):I().join("");case"isValid":e.value?(Q=(s.isFunction(a.onBeforeMask)&&a.onBeforeMask.call(g,e.value,a)||e.value).split(""),tt.call(this,void 0,!0,!1,Q)):e.value=y?I().slice().reverse().join(""):I().join("");for(var ct=I(),ut=st(),dt=ct.length-1;ut<dt&&!B(dt);dt--);return ct.splice(ut,dt+1-ut),rt(ct)&&e.value===(y?I().slice().reverse().join(""):I().join(""));case"getemptymask":return L().join("");case"remove":if(v&&v.inputmask){s.data(v,"_inputmask_opts",null),f=s(v);var pt=a.autoUnmask?et(v):v.inputmask._valueGet(a.autoUnmask);pt!==L().join("")?v.inputmask._valueSet(pt,a.autoUnmask):v.inputmask._valueSet(""),J.off(v),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(v),"value")&&v.inputmask.__valueGet&&Object.defineProperty(v,"value",{get:v.inputmask.__valueGet,set:v.inputmask.__valueSet,configurable:!0}):r.__lookupGetter__&&v.__lookupGetter__("value")&&v.inputmask.__valueGet&&(v.__defineGetter__("value",v.inputmask.__valueGet),v.__defineSetter__("value",v.inputmask.__valueSet)),v.inputmask=void 0}return v;case"getmetadata":if(s.isArray(i.metadata)){var ht=S(!0,0,!1).join("");return s.each(i.metadata,(function(t,e){if(e.mask===ht)return ht=e,!1})),ht}return i.metadata}}},function(t,e,i){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var s=i(1),o=s.dependencyLib,r=i(0),a={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return p(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return p(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return p(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return p(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return p(Date.prototype.getHours.call(this),2)}],hx:[function(t){return"[0-9]{".concat(t,"}")},Date.prototype.setHours,"hours",function(t){return Date.prototype.getHours}],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return p(Date.prototype.getHours.call(this),2)}],Hx:[function(t){return"[0-9]{".concat(t,"}")},Date.prototype.setHours,"hours",function(t){return function(){return p(Date.prototype.getHours.call(this),t)}}],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return p(Date.prototype.getMinutes.call(this),2)}],s:["[1-5]?[0-9]",Date.prototype.setSeconds,"seconds",Date.prototype.getSeconds],ss:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setSeconds,"seconds",function(){return p(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return p(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return p(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},l={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function c(t){var e=new RegExp("\\d+$").exec(t[0]);if(e&&void 0!==e[0]){var i=a[t[0][0]+"x"].slice("");return i[0]=i[0](e[0]),i[3]=i[3](e[0]),i}if(a[t[0]])return a[t[0]]}function u(t){if(!t.tokenizer){var e=[],i=[];for(var n in a)if(/\.*x$/.test(n)){var s=n[0]+"\\d+";-1===i.indexOf(s)&&i.push(s)}else-1===e.indexOf(n[0])&&e.push(n[0]);t.tokenizer="("+(0<i.length?i.join("|")+"|":"")+e.join("+|")+")+?|.",t.tokenizer=new RegExp(t.tokenizer,"g")}return t.tokenizer}function d(t,e,i,n){var o,r,a="";for(u(i).lastIndex=0;o=u(i).exec(t);)if(void 0===e)if(r=c(o))a+="("+r[0]+")";else switch(o[0]){case"[":a+="(";break;case"]":a+=")?";break;default:a+=s.escapeRegex(o[0])}else(r=c(o))?!0!==n&&r[3]?a+=r[3].call(e.date):r[2]?a+=e["raw"+r[2]]:a+=o[0]:a+=o[0];return a}function p(t,e){for(t=String(t),e=e||2;t.length<e;)t="0"+t;return t}function h(t,e,i){var s,o,r,l={date:new Date(1,0,1)},c=t;function d(t,e,i){t[s]=function(t){return t.replace(/[^0-9]/g,"0")}(e),t["raw"+s]=e,void 0!==r&&r.call(t.date,"month"==s?parseInt(t[s])-1:t[s])}if("string"==typeof c){for(u(i).lastIndex=0;o=u(i).exec(e);){var p=c.slice(0,o[0].length);a.hasOwnProperty(o[0])&&(s=a[o[0]][2],r=a[o[0]][1],d(l,p)),c=c.slice(p.length)}return l}if(c&&"object"===n(c)&&c.hasOwnProperty("date"))return c}function f(t,e){var i,n="";for(u(e).lastIndex=0;i=u(e).exec(e.inputFormat);)"d"===i[0].charAt(0)?n+=p(t.getDate(),i[0].length):"m"===i[0].charAt(0)?n+=p(t.getMonth()+1,i[0].length):"yyyy"===i[0]?n+=t.getFullYear().toString():"y"===i[0].charAt(0)&&(n+=p(t.getYear(),i[0].length));return n}function m(t,e){var i,n,s=0,o=0;for(u(e).lastIndex=0;n=u(e).exec(e.inputFormat);){var r=new RegExp("\\d+$").exec(n[0]);if(t<=(s+=o=r?parseInt(r[0]):n[0].length)){i=n,n=u(e).exec(e.inputFormat);break}}return{targetMatchIndex:s-o,nextMatch:n,targetMatch:i}}s.extendAliases({datetime:{mask:function(t){return t.numericInput=!1,a.S=t.i18n.ordinalSuffix.join("|"),t.inputFormat=l[t.inputFormat]||t.inputFormat,t.displayFormat=l[t.displayFormat]||t.displayFormat||t.inputFormat,t.outputFormat=l[t.outputFormat]||t.outputFormat||t.inputFormat,t.placeholder=""!==t.placeholder?t.placeholder:t.inputFormat.replace(/[[\]]/,""),t.regex=d(t.inputFormat,void 0,t),t.min=h(t.min,t.inputFormat,t),t.max=h(t.max,t.inputFormat,t),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,skipOptionalPartCharacter:"",i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},preValidation:function(t,e,i,n,s,o,r,l){if(l)return!0;if(isNaN(i)&&t[e]!==i){var c=m(e,s);if(c.nextMatch&&c.nextMatch[0]===i&&1<c.targetMatch[0].length){var u=a[c.targetMatch[0]][0];if(new RegExp(u).test("0"+t[e-1]))return t[e]=t[e-1],t[e-1]="0",{fuzzy:!0,buffer:t,refreshFromBuffer:{start:e-1,end:e+1},pos:e+1}}}return!0},postValidation:function(t,e,i,n,s,o,r){if(r)return!0;var l,c;if(!1===n)return(l=m(e+1,s)).targetMatch&&l.targetMatchIndex===e&&1<l.targetMatch[0].length&&void 0!==a[l.targetMatch[0]]&&(c=a[l.targetMatch[0]][0],new RegExp(c).test("0"+i))?{insert:[{pos:e,c:"0"},{pos:e+1,c:i}],pos:e+1}:n;if(n.fuzzy&&(t=n.buffer,e=n.pos),(l=m(e,s)).targetMatch&&l.targetMatch[0]&&void 0!==a[l.targetMatch[0]]){c=a[l.targetMatch[0]][0];var u=t.slice(l.targetMatchIndex,l.targetMatchIndex+l.targetMatch[0].length);!1===new RegExp(c).test(u.join(""))&&2===l.targetMatch[0].length&&o.validPositions[l.targetMatchIndex]&&o.validPositions[l.targetMatchIndex+1]&&(o.validPositions[l.targetMatchIndex+1].input="0")}var p=n,f=h(t.join(""),s.inputFormat,s);return p&&f.date.getTime()==f.date.getTime()&&(p=(p=function(t,e){return(!isFinite(t.rawday)||"29"==t.day&&!isFinite(t.rawyear)||new Date(t.date.getFullYear(),isFinite(t.rawmonth)?t.month:t.date.getMonth()+1,0).getDate()>=t.day)&&e}(f,p))&&function(t,e){var i=!0;if(e.min){if(t.rawyear){var n=t.rawyear.replace(/[^0-9]/g,"");i=e.min.year.substr(0,n.length)<=n}t.year===t.rawyear&&e.min.date.getTime()==e.min.date.getTime()&&(i=e.min.date.getTime()<=t.date.getTime())}return i&&e.max&&e.max.date.getTime()==e.max.date.getTime()&&(i=e.max.date.getTime()>=t.date.getTime()),i}(f,s)),e&&p&&n.pos!==e?{buffer:d(s.inputFormat,f,s).split(""),refreshFromBuffer:{start:e,end:n.pos}}:p},onKeyDown:function(t,e,i,n){t.ctrlKey&&t.keyCode===r.RIGHT&&(this.inputmask._valueSet(f(new Date,n)),o(this).trigger("setvalue"))},onUnMask:function(t,e,i){return e?d(i.outputFormat,h(t,i.inputFormat,i),i,!0):e},casing:function(t,e,i,n){return 0==e.nativeDef.indexOf("[ap]")?t.toLowerCase():0==e.nativeDef.indexOf("[AP]")?t.toUpperCase():t},onBeforeMask:function(t,e){return"[object Date]"===Object.prototype.toString.call(t)&&(t=f(t,e)),t},insertMode:!1,shiftPositions:!1,keepStatic:!1,inputmode:"numeric"}}),t.exports=s},function(t,e,i){"use strict";var n=i(1),s=n.dependencyLib,o=i(0);function r(t,e){for(var i="",s=0;s<t.length;s++)n.prototype.definitions[t.charAt(s)]||e.definitions[t.charAt(s)]||e.optionalmarker[0]===t.charAt(s)||e.optionalmarker[1]===t.charAt(s)||e.quantifiermarker[0]===t.charAt(s)||e.quantifiermarker[1]===t.charAt(s)||e.groupmarker[0]===t.charAt(s)||e.groupmarker[1]===t.charAt(s)||e.alternatormarker===t.charAt(s)?i+="\\"+t.charAt(s):i+=t.charAt(s);return i}function a(t,e,i,n){if(0<t.length&&0<e&&(!i.digitsOptional||n)){var o=s.inArray(i.radixPoint,t);-1===o&&(t.push(i.radixPoint),o=t.length-1);for(var r=1;r<=e;r++)isFinite(t[o+r])||(t[o+r]="0")}return t}function l(t,e){var i=0;if("+"===t){for(i in e.validPositions);i=parseInt(i)}for(var n in e.tests)if(i<=(n=parseInt(n)))for(var s=0,o=e.tests[n].length;s<o;s++)if((void 0===e.validPositions[n]||"-"===t)&&e.tests[n][s].match.def===t)return n+(void 0!==e.validPositions[n]&&"-"!==t?1:0);return i}function c(t,e){var i=-1;return s.each(e.validPositions,(function(e,n){if(n&&n.match.def===t)return i=parseInt(e),!1})),i}function u(t,e,i,n,s){var o=e.buffer?e.buffer.indexOf(s.radixPoint):-1,r=-1!==o&&new RegExp("[0-9１-９]").test(t);return s._radixDance&&r&&null==e.validPositions[o]?{insert:{pos:o===i?o+1:o,c:s.radixPoint},pos:i}:r}n.extendAliases({numeric:{mask:function(t){t.repeat=0,t.groupSeparator===t.radixPoint&&t.digits&&"0"!==t.digits&&("."===t.radixPoint?t.groupSeparator=",":","===t.radixPoint?t.groupSeparator=".":t.groupSeparator="")," "===t.groupSeparator&&(t.skipOptionalPartCharacter=void 0),1<t.placeholder.length&&(t.placeholder=t.placeholder.charAt(0)),"radixFocus"===t.positionCaretOnClick&&""===t.placeholder&&(t.positionCaretOnClick="lvp");var e="0",i=t.radixPoint;!0===t.numericInput&&void 0===t.__financeInput?(e="1",t.positionCaretOnClick="radixFocus"===t.positionCaretOnClick?"lvp":t.positionCaretOnClick,t.digitsOptional=!1,isNaN(t.digits)&&(t.digits=2),t._radixDance=!1,i=","===t.radixPoint?"?":"!",""!==t.radixPoint&&void 0===t.definitions[i]&&(t.definitions[i]={},t.definitions[i].validator="["+t.radixPoint+"]",t.definitions[i].placeholder=t.radixPoint,t.definitions[i].static=!0,t.definitions[i].generated=!0)):(t.__financeInput=!1,t.numericInput=!0);var s,o="[+]";if(o+=r(t.prefix,t),""!==t.groupSeparator?(void 0===t.definitions[t.groupSeparator]&&(t.definitions[t.groupSeparator]={},t.definitions[t.groupSeparator].validator="["+t.groupSeparator+"]",t.definitions[t.groupSeparator].placeholder=t.groupSeparator,t.definitions[t.groupSeparator].static=!0,t.definitions[t.groupSeparator].generated=!0),o+=t._mask(t)):o+="9{+}",void 0!==t.digits&&0!==t.digits){var a=t.digits.toString().split(",");isFinite(a[0])&&a[1]&&isFinite(a[1])?o+=i+e+"{"+t.digits+"}":(isNaN(t.digits)||0<parseInt(t.digits))&&(t.digitsOptional?(s=o+i+e+"{0,"+t.digits+"}",t.keepStatic=!0):o+=i+e+"{"+t.digits+"}")}return o+=r(t.suffix,t),o+="[-]",s&&(o=[s+r(t.suffix,t)+"[-]",o]),t.greedy=!1,function(t){void 0===t.parseMinMaxOptions&&(null!==t.min&&(t.min=t.min.toString().replace(new RegExp(n.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.min=t.min.replace(t.radixPoint,".")),t.min=isFinite(t.min)?parseFloat(t.min):NaN,isNaN(t.min)&&(t.min=Number.MIN_VALUE)),null!==t.max&&(t.max=t.max.toString().replace(new RegExp(n.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.max=t.max.replace(t.radixPoint,".")),t.max=isFinite(t.max)?parseFloat(t.max):NaN,isNaN(t.max)&&(t.max=Number.MAX_VALUE)),t.parseMinMaxOptions="done")}(t),o},_mask:function(t){return"("+t.groupSeparator+"999){+|1}"},digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",_radixDance:!0,groupSeparator:"",allowMinus:!0,negationSymbol:{front:"-",back:""},prefix:"",suffix:"",min:null,max:null,step:1,unmaskAsNumber:!1,roundingFN:Math.round,inputmode:"numeric",shortcuts:{k:"000",m:"000000"},placeholder:"0",greedy:!1,rightAlign:!0,insertMode:!0,autoUnmask:!1,skipOptionalPartCharacter:"",definitions:{0:{validator:u},1:{validator:u,definitionSymbol:"9"},"+":{validator:function(t,e,i,n,s){return s.allowMinus&&("-"===t||t===s.negationSymbol.front)}},"-":{validator:function(t,e,i,n,s){return s.allowMinus&&t===s.negationSymbol.back}}},preValidation:function(t,e,i,n,o,r,a,u){if(!1!==o.__financeInput&&i===o.radixPoint)return!1;var d;if(d=o.shortcuts&&o.shortcuts[i]){if(1<d.length)for(var p=[],h=0;h<d.length;h++)p.push({pos:e+h,c:d[h],strict:!1});return{insert:p}}var f=s.inArray(o.radixPoint,t),m=e;if(e=function(t,e,i,n,s){return s._radixDance&&s.numericInput&&e!==s.negationSymbol.back&&t<=i&&(0<i||e==s.radixPoint)&&(void 0===n.validPositions[t-1]||n.validPositions[t-1].input!==s.negationSymbol.back)&&(t-=1),t}(e,i,f,r,o),"-"===i||i===o.negationSymbol.front){if(!0!==o.allowMinus)return!1;var g=!1,v=c("+",r),y=c("-",r);return-1!==v&&(g=[v,y]),!1!==g?{remove:g,caret:m}:{insert:[{pos:l("+",r),c:o.negationSymbol.front,fromIsValid:!0},{pos:l("-",r),c:o.negationSymbol.back,fromIsValid:void 0}],caret:m+o.negationSymbol.back.length}}if(u)return!0;if(-1!==f&&!0===o._radixDance&&!1===n&&i===o.radixPoint&&void 0!==o.digits&&(isNaN(o.digits)||0<parseInt(o.digits))&&f!==e)return{caret:o._radixDance&&e===f-1?f+1:f};if(!1===o.__financeInput)if(n){if(o.digitsOptional)return{rewritePosition:a.end};if(!o.digitsOptional){if(a.begin>f&&a.end<=f)return i===o.radixPoint?{insert:{pos:f+1,c:"0",fromIsValid:!0},rewritePosition:f}:{rewritePosition:f+1};if(a.begin<f)return{rewritePosition:a.begin-1}}}else if(!o.showMaskOnHover&&!o.showMaskOnFocus&&!o.digitsOptional&&0<o.digits&&""===this.inputmask.__valueGet.call(this))return{rewritePosition:f};return{rewritePosition:e}},postValidation:function(t,e,i,n,o,r,a){if(!1===n)return n;if(a)return!0;if(null!==o.min||null!==o.max){var l=o.onUnMask(t.slice().reverse().join(""),void 0,s.extend({},o,{unmaskAsNumber:!0}));if(null!==o.min&&l<o.min&&(l.toString().length>=o.min.toString().length||l<0))return!1;if(null!==o.max&&l>o.max)return!1}return n},onUnMask:function(t,e,i){if(""===e&&!0===i.nullable)return e;var s=t.replace(i.prefix,"");return s=(s=s.replace(i.suffix,"")).replace(new RegExp(n.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(s=s.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==s.indexOf(i.radixPoint)&&(s=s.replace(n.escapeRegex.call(this,i.radixPoint),".")),s=(s=s.replace(new RegExp("^"+n.escapeRegex(i.negationSymbol.front)),"-")).replace(new RegExp(n.escapeRegex(i.negationSymbol.back)+"$"),""),Number(s)):s},isComplete:function(t,e){var i=(e.numericInput?t.slice().reverse():t).join("");return i=(i=(i=(i=(i=i.replace(new RegExp("^"+n.escapeRegex(e.negationSymbol.front)),"-")).replace(new RegExp(n.escapeRegex(e.negationSymbol.back)+"$"),"")).replace(e.prefix,"")).replace(e.suffix,"")).replace(new RegExp(n.escapeRegex(e.groupSeparator)+"([0-9]{3})","g"),"$1"),","===e.radixPoint&&(i=i.replace(n.escapeRegex(e.radixPoint),".")),isFinite(i)},onBeforeMask:function(t,e){var i=e.radixPoint||",";isFinite(e.digits)&&(e.digits=parseInt(e.digits)),"number"!=typeof t&&"number"!==e.inputType||""===i||(t=t.toString().replace(".",i));var s=t.split(i),o=s[0].replace(/[^\-0-9]/g,""),r=1<s.length?s[1].replace(/[^0-9]/g,""):"",l=1<s.length;t=o+(""!==r?i+r:r);var c=0;if(""!==i&&(c=e.digitsOptional?e.digits<r.length?e.digits:r.length:e.digits,""!==r||!e.digitsOptional)){var u=Math.pow(10,c||1);t=t.replace(n.escapeRegex(i),"."),isNaN(parseFloat(t))||(t=(e.roundingFN(parseFloat(t)*u)/u).toFixed(c)),t=t.toString().replace(".",i)}if(0===e.digits&&-1!==t.indexOf(i)&&(t=t.substring(0,t.indexOf(i))),null!==e.min||null!==e.max){var d=t.toString().replace(i,".");null!==e.min&&d<e.min?t=e.min.toString().replace(".",i):null!==e.max&&d>e.max&&(t=e.max.toString().replace(".",i))}return a(t.toString().split(""),c,e,l).join("")},onBeforeWrite:function(t,e,i,o){function r(t,e){if(!1!==o.__financeInput||e){var i=s.inArray(o.radixPoint,t);-1!==i&&t.splice(i,1)}if(""!==o.groupSeparator)for(;-1!==(i=t.indexOf(o.groupSeparator));)t.splice(i,1);return t}var l,c=function(t,e){var i=new RegExp("(^"+(""!==e.negationSymbol.front?n.escapeRegex(e.negationSymbol.front)+"?":"")+n.escapeRegex(e.prefix)+")(.*)("+n.escapeRegex(e.suffix)+(""!=e.negationSymbol.back?n.escapeRegex(e.negationSymbol.back)+"?":"")+"$)").exec(t.slice().reverse().join("")),s=i?i[2]:"",o=!1;return s&&(s=s.split(e.radixPoint.charAt(0))[0],o=new RegExp("^[0"+e.groupSeparator+"]*").exec(s)),!(!o||!(1<o[0].length||0<o[0].length&&o[0].length<s.length))&&o}(e,o);if(c){var u=e.slice().reverse(),d=u.join("").indexOf(c[0]);u.splice(d,c[0].length);var p=u.length-d;r(u),l={refreshFromBuffer:!0,buffer:u.reverse(),caret:i<p?i:p}}if(t)switch(t.type){case"blur":case"checkval":if(null!==o.min){var h=o.onUnMask(e.slice().reverse().join(""),void 0,s.extend({},o,{unmaskAsNumber:!0}));if(null!==o.min&&h<o.min)return{refreshFromBuffer:!0,buffer:a(o.min.toString().replace(".",o.radixPoint).split(""),o.digits,o).reverse()}}if(e[e.length-1]===o.negationSymbol.front){var f=new RegExp("(^"+(""!=o.negationSymbol.front?n.escapeRegex(o.negationSymbol.front)+"?":"")+n.escapeRegex(o.prefix)+")(.*)("+n.escapeRegex(o.suffix)+(""!=o.negationSymbol.back?n.escapeRegex(o.negationSymbol.back)+"?":"")+"$)").exec(r(e.slice(),!0).reverse().join(""));0==(f?f[2]:"")&&(l={refreshFromBuffer:!0,buffer:[0]})}else""!==o.radixPoint&&e[0]===o.radixPoint&&(l&&l.buffer?l.buffer.shift():(e.shift(),l={refreshFromBuffer:!0,buffer:r(e)}));if(o.enforceDigitsOnBlur){var m=(l=l||{})&&l.buffer||e.slice().reverse();l.refreshFromBuffer=!0,l.buffer=a(m,o.digits,o,!0).reverse()}}return l},onKeyDown:function(t,e,i,n){var r,l=s(this);if(t.ctrlKey)switch(t.keyCode){case o.UP:return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())+parseInt(n.step)),l.trigger("setvalue"),!1;case o.DOWN:return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())-parseInt(n.step)),l.trigger("setvalue"),!1}if(!t.shiftKey&&(t.keyCode===o.DELETE||t.keyCode===o.BACKSPACE||t.keyCode===o.BACKSPACE_SAFARI)&&i.begin!==e.length){if(e[t.keyCode===o.DELETE?i.begin-1:i.end]===n.negationSymbol.front)return r=e.slice().reverse(),""!==n.negationSymbol.front&&r.shift(),""!==n.negationSymbol.back&&r.pop(),l.trigger("setvalue",[r.join(""),i.begin]),!1;if(!0===n._radixDance){var c=s.inArray(n.radixPoint,e);if(n.digitsOptional){if(0===c)return(r=e.slice().reverse()).pop(),l.trigger("setvalue",[r.join(""),i.begin>=r.length?r.length:i.begin]),!1}else if(-1!==c&&(i.begin<c||i.end<c||t.keyCode===o.DELETE&&i.begin===c))return i.begin!==i.end||t.keyCode!==o.BACKSPACE&&t.keyCode!==o.BACKSPACE_SAFARI||i.begin++,(r=e.slice().reverse()).splice(r.length-i.begin,i.begin-i.end+1),r=a(r,n.digits,n).join(""),l.trigger("setvalue",[r,i.begin>=r.length?c+1:i.begin]),!1}}}},currency:{prefix:"",groupSeparator:",",alias:"numeric",digits:2,digitsOptional:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0},percentage:{alias:"numeric",min:0,max:100,suffix:" %",digits:0,allowMinus:!1},indianns:{alias:"numeric",_mask:function(t){return"("+t.groupSeparator+"99){*|1}("+t.groupSeparator+"999){1|1}"},groupSeparator:",",radixPoint:".",placeholder:"0",digits:2,digitsOptional:!1}}),t.exports=n},function(t,e,i){"use strict";var n,s=(n=i(1))&&n.__esModule?n:{default:n};function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){var e="function"==typeof Map?new Map:void 0;return(a=function(t){if(null===t||(i=t,-1===Function.toString.call(i).indexOf("[native code]")))return t;var i;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return c(t,arguments,d(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),u(n,t)})(t)}function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function c(t,e,i){return(c=l()?Reflect.construct:function(t,e,i){var n=[null];n.push.apply(n,e);var s=new(Function.bind.apply(t,n));return i&&u(s,i.prototype),s}).apply(null,arguments)}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function d(t){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}if(document.head.createShadowRoot||document.head.attachShadow){var p=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=(t=r(this,d(e).call(this))).getAttributeNames(),n=t.attachShadow({mode:"closed"}),o=document.createElement("input");for(var a in o.type="text",n.appendChild(o),i)Object.prototype.hasOwnProperty.call(i,a)&&o.setAttribute("data-inputmask-"+i[a],t.getAttribute(i[a]));return(new s.default).mask(o),o.inputmask.shadowRoot=n,t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}(e,t),e}(a(HTMLElement));customElements.define("input-mask",p)}}],installedModules={},__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(t,e,i){__webpack_require__.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},__webpack_require__.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.t=function(t,e){if(1&e&&(t=__webpack_require__(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(__webpack_require__.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)__webpack_require__.d(i,n,function(e){return t[e]}.bind(null,n));return i},__webpack_require__.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return __webpack_require__.d(e,"a",e),e},__webpack_require__.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=5);function __webpack_require__(t){if(installedModules[t])return installedModules[t].exports;var e=installedModules[t]={i:t,l:!1,exports:{}};return modules[t].call(e.exports,e,e.exports,__webpack_require__),e.l=!0,e.exports}var modules,installedModules},module.exports=factory()},MTiW:function(t,e){!function(t){"use strict";t.fn.emulateTransitionEnd=function(e){var i=!1,n=this;t(this).one("bsTransitionEnd",(function(){i=!0}));return setTimeout((function(){i||t(n).trigger(t.support.transition.end)}),e),this},t((function(){t.support.transition=function(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})}))}(jQuery)},MsVs:function(t,e){!function(t){"use strict";var e=function(e){this.element=t(e)};function i(i){return this.each((function(){var n=t(this),s=n.data("bs.tab");s||n.data("bs.tab",s=new e(this)),"string"==typeof i&&s[i]()}))}e.VERSION="3.4.1",e.TRANSITION_DURATION=150,e.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),n=e.data("target");if(n||(n=(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var s=i.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),r=t.Event("show.bs.tab",{relatedTarget:s[0]});if(s.trigger(o),e.trigger(r),!r.isDefaultPrevented()&&!o.isDefaultPrevented()){var a=t(document).find(n);this.activate(e.closest("li"),i),this.activate(a,a.parent(),(function(){s.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:s[0]})}))}}},e.prototype.activate=function(i,n,s){var o=n.find("> .active"),r=s&&t.support.transition&&(o.length&&o.hasClass("fade")||!!n.find("> .fade").length);function a(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),i.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(i[0].offsetWidth,i.addClass("in")):i.removeClass("fade"),i.parent(".dropdown-menu").length&&i.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),s&&s()}o.length&&r?o.one("bsTransitionEnd",a).emulateTransitionEnd(e.TRANSITION_DURATION):a(),o.removeClass("in")};var n=t.fn.tab;t.fn.tab=i,t.fn.tab.Constructor=e,t.fn.tab.noConflict=function(){return t.fn.tab=n,this};var s=function(e){e.preventDefault(),i.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',s).on("click.bs.tab.data-api",'[data-toggle="pill"]',s)}(jQuery)},Nv4c:function(t,e){$(document).ready((function(){Inputmask({mask:"+38 (999) 999-99-99",clearMaskOnLostFocus:!0,clearIncomplete:!0,showMaskOnHover:!1}).mask("input[type=tel]"),$(".input-file").change((function(t){$(".error-file-info").hide(),$(".max-size").hide();var e=t.target.files[0].size,i=$(this).closest(".input-file-inner-wrap").find(".input-file"),n=$(this).closest(".input-file-inner-wrap").find(".label-text"),s=$(this).closest(".input-file-inner-wrap").find(".label-remove"),o=$(this).closest(".input-file-inner-wrap");if(""!=$(this).val())if(e>5242880)$(".error-file-info").show(),$(".max-size").show(),i.val("");else{var r=t.target.files[0].name;n.text(r),s.show(),o.next(".input-file-inner-wrap").css("display","flex")}else"ru"==$("html").attr("lang")?(n.text("Загрузить фото"),s.hide()):"uk"==$("html").attr("lang")?(n.text("Завантажити фото"),s.hide()):(n.text("Upload a photo"),s.hide())})),$(".label-remove").click((function(t){var e=$(this).closest(".input-file-inner-wrap").find(".label-text"),i=$(this).closest(".input-file-inner-wrap").find(".label-remove"),n=$(this).closest(".input-file-inner-wrap").find(".input-file");"ru"==$("html").attr("lang")?e.text("Загрузить фото"):"uk"==$("html").attr("lang")?e.text("Завантажити фото"):e.text("Upload a photo"),i.hide(),n.val(""),$(this).parent().next(".input-file-inner-wrap").find(".input-file").val()||$(this).parent().next(".input-file-inner-wrap").css("display","none")}));var t=$(".review_form");function e(t,e){var i,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",s=$('meta[name="csrf-token"]').attr("content");i=""!=n?{data:e,file:n,_token:s,subj:"review"}:{data:e,_token:s,subj:"review"},$.ajax({url:routes.postSend,type:"POST",data:i,success:function(e){$(t)[0].reset(),"ru"==$("html").attr("lang")?$(".label-text").text("Загрузить фото"):"uk"==$("html").attr("lang")?$(".label-text").text("Завантажити фото"):$(".label-text").text("Upload a photo"),$(".input-file-inner-wrap").not(":eq(0)").css("display","none"),$(".label-remove").hide(),$(".form-thanks").show(),setTimeout((function(){$(".form-thanks").hide()}),5e3)}})}function i(t){t.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"subscription"},success:function(e){$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}})}function n(t){t.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"chekup"},success:function(e){$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$.magnificPopup.close()}),5e3),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}})}function n(t){t.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"consultation"},success:function(e){$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$.magnificPopup.close()}),5e3),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}})}$(".do_review_form").click((function(i){i.stopPropagation(),i.preventDefault();var n=$(this).closest(".review_form");n.validate({submitHandler:function(i){var n,s=$('meta[name="csrf-token"]').attr("content"),o=$(i).serialize();document.getElementById("input-file-1").files.length||document.getElementById("input-file-2").files.length?function(){n=$(".input-file");for(var i={},r=function(r){var a=n[r],l=n[r+1]?n[r+1]:null;if(null!=a&&a.files.length){var c=new FileReader;c.onload=function(){var n="file_"+r,a=c.result;i[n]=a,null!=l&&l.files.length||setTimeout((function(){$.ajax({type:"POST",url:routes.postLoadFile,data:{_token:s,data:i},success:function(i){var n=i.file_name;e(t,o,n)},error:function(t){}})}),100)},c.readAsDataURL(n[r].files[0])}},a=0;a<n.length;a++)r(a)}():e(t,o)}}),n.submit()})),$(".do_callback_form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".callback_form");e.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"callback"},success:function(e){$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$.magnificPopup.close()}),5e3),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}}),e.submit()})),$(".do_feedback_form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".feedback_form");e.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"feedback"},success:function(e){$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}}),e.submit()})),$(".do-new-post-form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".new-post-form");i(e),e.submit()})),$(".do_appointment_form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".appointment_form");e.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"appointment"},success:function(e){$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$.magnificPopup.close()}),5e3),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}}),e.submit()})),$(".do_registration_form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".registration_form");e.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"appointment"},success:function(e){$("#appointment").find(".popup-sub-name").text(),$("#appointment").find("input[name=appointment]").val(""),$("#appointment").find("input[name=specialist]").val(""),$(".select-appointment-specialist").prop("selectedIndex",0).selectric("refresh"),$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$.magnificPopup.close()}),5e3),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}}),e.submit()})),$(".do_specialist_form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".specialist_form");e.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"specialist"},success:function(e){$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$.magnificPopup.close()}),5e3),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}}),e.submit()})),$(".do_question_form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".question_form");e.validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(t).serialize();$(t)[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"question"},success:function(e){$("#question").find(".popup-sub-name").text(),$("#question").find("input[name=appointment]").val(""),$(".select-question").prop("selectedIndex",0).selectric("refresh"),$(t).hide(),$(t).next(".form-thanks").show(),setTimeout((function(){$.magnificPopup.close()}),5e3),setTimeout((function(){$(t).next(".form-thanks").hide(),$(t).show()}),5e3)}})}}),e.submit()})),$(".do_chekup_form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".chekup_form");n(e),e.submit()})),$(".do_consultation_form").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".consultation_form");n(e),e.submit()})),$(".online-consultation-form").validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(".online-consultation-form").serialize();$(".online-consultation-form")[0].reset(),$.ajax({url:routes.postSend,type:"POST",data:{_token:e,data:i,subj:"onlinereview"},success:function(t){$(".online-consultation-form").hide(),$(".online-consultation-form").next(".form-thanks").show(),setTimeout((function(){$(".online-consultation-form").next(".form-thanks").hide(),$(".online-consultation-form").show()}),5e3)}})}}),$(".do-online-consultation").click((function(t){t.stopPropagation(),t.preventDefault();var e=$(this).closest(".online-consultation-form");i(e),e.submit()})),$(".registration-form").validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(".registration-form").serialize();$.ajax({url:routes.postRegister,type:"POST",data:{_token:e,data:i},success:function(t){switch(t){case"email":$(".registration-form .auth-error").slideDown(200);break;case"deleted":$(".registration-form .auth-del").slideDown(200);break;case"success":window.location.href=window.location.origin+"/cabinet/"}}})}}),$(".do_registration-form").click((function(t){t.preventDefault(),$(".registration-form").submit()})),$(".reset-form").validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(".reset-form").serialize();$.ajax({url:routes.postPassword,type:"POST",data:{_token:e,data:i},success:function(t){switch(t){case"no_email":$(".reset-form .auth-error").slideDown(200),$(".reset-form .auth-restored").slideUp(200);break;case"success":$(".reset-form .auth-restored").slideDown(200),$(".reset-form.auth-error").slideUp(200)}}})}}),$(".do_reset-form").click((function(t){t.preventDefault(),$(".reset-form").submit()})),$(".login-form").validate({submitHandler:function(t){var e=$('meta[name="csrf-token"]').attr("content"),i=$(".login-form").serialize();$.ajax({url:routes.postLogin,type:"POST",data:{_token:e,data:i},success:function(t){switch(t){case"wrong_pass":$(".login-form .auth-error").slideDown(200);break;case"success":window.location.reload(!0)}}})}}),$(".do_login-form").click((function(t){t.preventDefault(),t.stopPropagation(),$(".login-form").submit()})),$(".a-logout").click((function(t){t.stopPropagation(),t.preventDefault();var e=$('meta[name="csrf-token"]').attr("content");$.ajax({url:routes.postLogout,type:"POST",data:{_token:e},success:function(t){switch(t){case"success":var e=window.location.href.split("#")[0];window.location.href=e}}})}))}))},"Ol/X":function(t,e){!function(t){"use strict";var e=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");e.VERSION="3.4.1",e.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),(e.prototype=t.extend({},t.fn.tooltip.Constructor.prototype)).constructor=e,e.prototype.getDefaults=function(){return e.DEFAULTS},e.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();if(this.options.html){var n=typeof i;this.options.sanitize&&(e=this.sanitizeHtml(e),"string"===n&&(i=this.sanitizeHtml(i))),t.find(".popover-title").html(e),t.find(".popover-content").children().detach().end()["string"===n?"html":"append"](i)}else t.find(".popover-title").text(e),t.find(".popover-content").children().detach().end().text(i);t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},e.prototype.hasContent=function(){return this.getTitle()||this.getContent()},e.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},e.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var i=t.fn.popover;t.fn.popover=function(i){return this.each((function(){var n=t(this),s=n.data("bs.popover"),o="object"==typeof i&&i;!s&&/destroy|hide/.test(i)||(s||n.data("bs.popover",s=new e(this,o)),"string"==typeof i&&s[i]())}))},t.fn.popover.Constructor=e,t.fn.popover.noConflict=function(){return t.fn.popover=i,this}}(jQuery)},PDX0:function(t,e){(function(e){t.exports=e}).call(this,{})},QMJn:function(t,e){!function(t){"use strict";var e='[data-toggle="dropdown"]',i=function(e){t(e).on("click.bs.dropdown",this.toggle)};function n(e){var i=e.attr("data-target");i||(i=(i=e.attr("href"))&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var n="#"!==i?t(document).find(i):null;return n&&n.length?n:e.parent()}function s(i){i&&3===i.which||(t(".dropdown-backdrop").remove(),t(e).each((function(){var e=t(this),s=n(e),o={relatedTarget:this};s.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(s[0],i.target)||(s.trigger(i=t.Event("hide.bs.dropdown",o)),i.isDefaultPrevented()||(e.attr("aria-expanded","false"),s.removeClass("open").trigger(t.Event("hidden.bs.dropdown",o)))))})))}i.VERSION="3.4.1",i.prototype.toggle=function(e){var i=t(this);if(!i.is(".disabled, :disabled")){var o=n(i),r=o.hasClass("open");if(s(),!r){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",s);var a={relatedTarget:this};if(o.trigger(e=t.Event("show.bs.dropdown",a)),e.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},i.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var s=t(this);if(i.preventDefault(),i.stopPropagation(),!s.is(".disabled, :disabled")){var o=n(s),r=o.hasClass("open");if(!r&&27!=i.which||r&&27==i.which)return 27==i.which&&o.find(e).trigger("focus"),s.trigger("click");var a=o.find(".dropdown-menu li:not(.disabled):visible a");if(a.length){var l=a.index(i.target);38==i.which&&l>0&&l--,40==i.which&&l<a.length-1&&l++,~l||(l=0),a.eq(l).trigger("focus")}}}};var o=t.fn.dropdown;t.fn.dropdown=function(e){return this.each((function(){var n=t(this),s=n.data("bs.dropdown");s||n.data("bs.dropdown",s=new i(this)),"string"==typeof e&&s[e].call(n)}))},t.fn.dropdown.Constructor=i,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=o,this},t(document).on("click.bs.dropdown.data-api",s).on("click.bs.dropdown.data-api",".dropdown form",(function(t){t.stopPropagation()})).on("click.bs.dropdown.data-api",e,i.prototype.toggle).on("keydown.bs.dropdown.data-api",e,i.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",i.prototype.keydown)}(jQuery)},QWBl:function(t,e,i){"use strict";var n=i("I+eb"),s=i("F8JR");n({target:"Array",proto:!0,forced:[].forEach!=s},{forEach:s})},Qo9l:function(t,e,i){var n=i("2oRo");t.exports=n},RK3t:function(t,e,i){var n=i("0Dky"),s=i("xrYK"),o="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==s(t)?o.call(t,""):Object(t)}:Object},Rm1S:function(t,e,i){"use strict";var n=i("14Sl"),s=i("glrk"),o=i("UMSQ"),r=i("HYAF"),a=i("iqWW"),l=i("FMNM");n("match",1,(function(t,e,i){return[function(e){var i=r(this),n=null==e?void 0:e[t];return void 0!==n?n.call(e,i):new RegExp(e)[t](String(i))},function(t){var n=i(e,t,this);if(n.done)return n.value;var r=s(t),c=String(this);if(!r.global)return l(r,c);var u=r.unicode;r.lastIndex=0;for(var d,p=[],h=0;null!==(d=l(r,c));){var f=String(d[0]);p[h]=f,""===f&&(r.lastIndex=a(c,o(r.lastIndex),u)),h++}return 0===h?null:p}]}))},STAE:function(t,e,i){var n=i("0Dky");t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},TWQb:function(t,e,i){var n=i("/GqU"),s=i("UMSQ"),o=i("I8vh"),r=function(t){return function(e,i,r){var a,l=n(e),c=s(l.length),u=o(r,c);if(t&&i!=i){for(;c>u;)if((a=l[u++])!=a)return!0}else for(;c>u;u++)if((t||u in l)&&l[u]===i)return t||u||0;return!t&&-1}};t.exports={includes:r(!0),indexOf:r(!1)}},UMSQ:function(t,e,i){var n=i("ppGB"),s=Math.min;t.exports=function(t){return t>0?s(n(t),9007199254740991):0}},UTVS:function(t,e){var i={}.hasOwnProperty;t.exports=function(t,e){return i.call(t,e)}},UxlC:function(t,e,i){"use strict";var n=i("14Sl"),s=i("glrk"),o=i("ewvW"),r=i("UMSQ"),a=i("ppGB"),l=i("HYAF"),c=i("iqWW"),u=i("FMNM"),d=Math.max,p=Math.min,h=Math.floor,f=/\$([$&'`]|\d\d?|<[^>]*>)/g,m=/\$([$&'`]|\d\d?)/g;n("replace",2,(function(t,e,i,n){var g=n.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,v=n.REPLACE_KEEPS_$0,y=g?"$":"$0";return[function(i,n){var s=l(this),o=null==i?void 0:i[t];return void 0!==o?o.call(i,s,n):e.call(String(s),i,n)},function(t,n){if(!g&&v||"string"==typeof n&&-1===n.indexOf(y)){var o=i(e,t,this,n);if(o.done)return o.value}var l=s(t),h=String(this),f="function"==typeof n;f||(n=String(n));var m=l.global;if(m){var w=l.unicode;l.lastIndex=0}for(var x=[];;){var k=u(l,h);if(null===k)break;if(x.push(k),!m)break;""===String(k[0])&&(l.lastIndex=c(h,r(l.lastIndex),w))}for(var C,T="",S=0,$=0;$<x.length;$++){k=x[$];for(var E=String(k[0]),D=d(p(a(k.index),h.length),0),_=[],A=1;A<k.length;A++)_.push(void 0===(C=k[A])?C:String(C));var M=k.groups;if(f){var O=[E].concat(_,D,h);void 0!==M&&O.push(M);var P=String(n.apply(void 0,O))}else P=b(E,h,D,_,M,n);D>=S&&(T+=h.slice(S,D)+P,S=D+E.length)}return T+h.slice(S)}];function b(t,i,n,s,r,a){var l=n+t.length,c=s.length,u=m;return void 0!==r&&(r=o(r),u=f),e.call(a,u,(function(e,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return i.slice(0,n);case"'":return i.slice(l);case"<":a=r[o.slice(1,-1)];break;default:var u=+o;if(0===u)return e;if(u>c){var d=h(u/10);return 0===d?e:d<=c?void 0===s[d-1]?o.charAt(1):s[d-1]+o.charAt(1):e}a=s[u-1]}return void 0===a?"":a}))}}))},VpIT:function(t,e,i){var n=i("xDBR"),s=i("xs3f");(t.exports=function(t,e){return s[t]||(s[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:n?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},Vu81:function(t,e,i){var n=i("0GbY"),s=i("JBy8"),o=i("dBg+"),r=i("glrk");t.exports=n("Reflect","ownKeys")||function(t){var e=s.f(r(t)),i=o.f;return i?e.concat(i(t)):e}},XGwC:function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},XMe9:function(t,e,i){var n,s,o;!function(r){"use strict";s=[i("EVdn")],void 0===(o="function"==typeof(n=function(t){var e=window.Slick||{};(e=function(){var e=0;return function(i,n){var s,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:t(i),appendDots:t(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,i){return t('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},t.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=t(i),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,s=t(i).data("slick")||{},o.options=t.extend({},o.defaults,n,s),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=t.proxy(o.autoPlay,o),o.autoPlayClear=t.proxy(o.autoPlayClear,o),o.autoPlayIterator=t.proxy(o.autoPlayIterator,o),o.changeSlide=t.proxy(o.changeSlide,o),o.clickHandler=t.proxy(o.clickHandler,o),o.selectHandler=t.proxy(o.selectHandler,o),o.setPosition=t.proxy(o.setPosition,o),o.swipeHandler=t.proxy(o.swipeHandler,o),o.dragHandler=t.proxy(o.dragHandler,o),o.keyHandler=t.proxy(o.keyHandler,o),o.instanceUid=e++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}}()).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},e.prototype.addSlide=e.prototype.slickAdd=function(e,i,n){var s=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=s.slideCount)return!1;s.unload(),"number"==typeof i?0===i&&0===s.$slides.length?t(e).appendTo(s.$slideTrack):n?t(e).insertBefore(s.$slides.eq(i)):t(e).insertAfter(s.$slides.eq(i)):!0===n?t(e).prependTo(s.$slideTrack):t(e).appendTo(s.$slideTrack),s.$slides=s.$slideTrack.children(this.options.slide),s.$slideTrack.children(this.options.slide).detach(),s.$slideTrack.append(s.$slides),s.$slides.each((function(e,i){t(i).attr("data-slick-index",e)})),s.$slidesCache=s.$slides,s.reinit()},e.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},e.prototype.animateSlide=function(e,i){var n={},s=this;s.animateHeight(),!0===s.options.rtl&&!1===s.options.vertical&&(e=-e),!1===s.transformsEnabled?!1===s.options.vertical?s.$slideTrack.animate({left:e},s.options.speed,s.options.easing,i):s.$slideTrack.animate({top:e},s.options.speed,s.options.easing,i):!1===s.cssTransitions?(!0===s.options.rtl&&(s.currentLeft=-s.currentLeft),t({animStart:s.currentLeft}).animate({animStart:e},{duration:s.options.speed,easing:s.options.easing,step:function(t){t=Math.ceil(t),!1===s.options.vertical?(n[s.animType]="translate("+t+"px, 0px)",s.$slideTrack.css(n)):(n[s.animType]="translate(0px,"+t+"px)",s.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(s.applyTransition(),e=Math.ceil(e),!1===s.options.vertical?n[s.animType]="translate3d("+e+"px, 0px, 0px)":n[s.animType]="translate3d(0px,"+e+"px, 0px)",s.$slideTrack.css(n),i&&setTimeout((function(){s.disableTransition(),i.call()}),s.options.speed))},e.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=t(e).not(this.$slider)),e},e.prototype.asNavFor=function(e){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each((function(){var i=t(this).slick("getSlick");i.unslicked||i.slideHandler(e,!0)}))},e.prototype.applyTransition=function(t){var e=this,i={};!1===e.options.fade?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},e.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},e.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},e.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},e.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=t(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=t(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},e.prototype.buildDots=function(){var e,i,n=this;if(!0===n.options.dots){for(n.$slider.addClass("slick-dotted"),i=t("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)i.append(t("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},e.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each((function(e,i){t(i).attr("data-slick-index",e).data("originalStyling",t(i).attr("style")||"")})),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?t('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),t("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},e.prototype.buildRows=function(){var t,e,i,n,s,o,r,a=this;if(n=document.createDocumentFragment(),o=a.$slider.children(),a.options.rows>1){for(r=a.options.slidesPerRow*a.options.rows,s=Math.ceil(o.length/r),t=0;t<s;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var u=t*r+(e*a.options.slidesPerRow+i);o.get(u)&&c.appendChild(o.get(u))}l.appendChild(c)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},e.prototype.checkResponsive=function(e,i){var n,s,o,r=this,a=!1,l=r.$slider.width(),c=window.innerWidth||t(window).width();if("window"===r.respondTo?o=c:"slider"===r.respondTo?o=l:"min"===r.respondTo&&(o=Math.min(c,l)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in s=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[n]&&(s=r.breakpoints[n]):o>r.breakpoints[n]&&(s=r.breakpoints[n]));null!==s?null!==r.activeBreakpoint?(s!==r.activeBreakpoint||i)&&(r.activeBreakpoint=s,"unslick"===r.breakpointSettings[s]?r.unslick(s):(r.options=t.extend({},r.originalSettings,r.breakpointSettings[s]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),a=s):(r.activeBreakpoint=s,"unslick"===r.breakpointSettings[s]?r.unslick(s):(r.options=t.extend({},r.originalSettings,r.breakpointSettings[s]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),a=s):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),a=s),e||!1===a||r.$slider.trigger("breakpoint",[r,a])}},e.prototype.changeSlide=function(e,i){var n,s,o=this,r=t(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),n=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":s=0===n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-s,!1,i);break;case"next":s=0===n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+s,!1,i);break;case"index":var a=0===e.data.index?0:e.data.index||r.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(a),!1,i),r.children().trigger("focus");break;default:return}},e.prototype.checkNavigable=function(t){var e,i;if(i=0,t>(e=this.getNavigableIndexes())[e.length-1])t=e[e.length-1];else for(var n in e){if(t<e[n]){t=i;break}i=e[n]}return t},e.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(t("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",t.proxy(e.interrupt,e,!0)).off("mouseleave.slick",t.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),t(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().off("click.slick",e.selectHandler),t(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),t(window).off("resize.slick.slick-"+e.instanceUid,e.resize),t("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),t(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},e.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",t.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",t.proxy(e.interrupt,e,!1))},e.prototype.cleanUpRows=function(){var t,e=this;e.options.rows>1&&((t=e.$slides.children().children()).removeAttr("style"),e.$slider.empty().append(t))},e.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},e.prototype.destroy=function(e){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),t(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){t(this).attr("style",t(this).data("originalStyling"))})),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,e||i.$slider.trigger("destroy",[i])},e.prototype.disableTransition=function(t){var e=this,i={};i[e.transitionType]="",!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},e.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout((function(){i.disableTransition(t),e.call()}),i.options.speed))},e.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},e.prototype.filterSlides=e.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},e.prototype.focusHandler=function(){var e=this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(i){i.stopImmediatePropagation();var n=t(this);setTimeout((function(){e.options.pauseOnFocus&&(e.focussed=n.is(":focus"),e.autoPlay())}),0)}))},e.prototype.getCurrent=e.prototype.slickCurrentSlide=function(){return this.currentSlide},e.prototype.getDotCount=function(){var t=this,e=0,i=0,n=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++n;else for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)n=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else n=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return n-1},e.prototype.getLeft=function(t){var e,i,n,s,o=this,r=0;return o.slideOffset=0,i=o.$slides.first().outerHeight(!0),!0===o.options.infinite?(o.slideCount>o.options.slidesToShow&&(o.slideOffset=o.slideWidth*o.options.slidesToShow*-1,s=-1,!0===o.options.vertical&&!0===o.options.centerMode&&(2===o.options.slidesToShow?s=-1.5:1===o.options.slidesToShow&&(s=-2)),r=i*o.options.slidesToShow*s),o.slideCount%o.options.slidesToScroll!=0&&t+o.options.slidesToScroll>o.slideCount&&o.slideCount>o.options.slidesToShow&&(t>o.slideCount?(o.slideOffset=(o.options.slidesToShow-(t-o.slideCount))*o.slideWidth*-1,r=(o.options.slidesToShow-(t-o.slideCount))*i*-1):(o.slideOffset=o.slideCount%o.options.slidesToScroll*o.slideWidth*-1,r=o.slideCount%o.options.slidesToScroll*i*-1))):t+o.options.slidesToShow>o.slideCount&&(o.slideOffset=(t+o.options.slidesToShow-o.slideCount)*o.slideWidth,r=(t+o.options.slidesToShow-o.slideCount)*i),o.slideCount<=o.options.slidesToShow&&(o.slideOffset=0,r=0),!0===o.options.centerMode&&o.slideCount<=o.options.slidesToShow?o.slideOffset=o.slideWidth*Math.floor(o.options.slidesToShow)/2-o.slideWidth*o.slideCount/2:!0===o.options.centerMode&&!0===o.options.infinite?o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)-o.slideWidth:!0===o.options.centerMode&&(o.slideOffset=0,o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)),e=!1===o.options.vertical?t*o.slideWidth*-1+o.slideOffset:t*i*-1+r,!0===o.options.variableWidth&&(n=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(t):o.$slideTrack.children(".slick-slide").eq(t+o.options.slidesToShow),e=!0===o.options.rtl?n[0]?-1*(o.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===o.options.centerMode&&(n=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(t):o.$slideTrack.children(".slick-slide").eq(t+o.options.slidesToShow+1),e=!0===o.options.rtl?n[0]?-1*(o.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,e+=(o.$list.width()-n.outerWidth())/2)),e},e.prototype.getOption=e.prototype.slickGetOption=function(t){return this.options[t]},e.prototype.getNavigableIndexes=function(){var t,e=this,i=0,n=0,s=[];for(!1===e.options.infinite?t=e.slideCount:(i=-1*e.options.slidesToScroll,n=-1*e.options.slidesToScroll,t=2*e.slideCount);i<t;)s.push(i),i=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return s},e.prototype.getSlick=function(){return this},e.prototype.getSlideCount=function(){var e,i,n=this;return i=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each((function(s,o){if(o.offsetLeft-i+t(o).outerWidth()/2>-1*n.swipeLeft)return e=o,!1})),Math.abs(t(e).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},e.prototype.goTo=e.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},e.prototype.init=function(e){var i=this;t(i.$slider).hasClass("slick-initialized")||(t(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),e&&i.$slider.trigger("init",[i]),!0===i.options.accessibility&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},e.prototype.initADA=function(){var e=this,i=Math.ceil(e.slideCount/e.options.slidesToShow),n=e.getNavigableIndexes().filter((function(t){return t>=0&&t<e.slideCount}));e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==e.$dots&&(e.$slides.not(e.$slideTrack.find(".slick-cloned")).each((function(i){var s=n.indexOf(i);t(this).attr({role:"tabpanel",id:"slick-slide"+e.instanceUid+i,tabindex:-1}),-1!==s&&t(this).attr({"aria-describedby":"slick-slide-control"+e.instanceUid+s})})),e.$dots.attr("role","tablist").find("li").each((function(s){var o=n[s];t(this).attr({role:"presentation"}),t(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+e.instanceUid+s,"aria-controls":"slick-slide"+e.instanceUid+o,"aria-label":s+1+" of "+i,"aria-selected":null,tabindex:"-1"})})).eq(e.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var s=e.currentSlide,o=s+e.options.slidesToShow;s<o;s++)e.$slides.eq(s).attr("tabindex",0);e.activateADA()},e.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},e.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&(t("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&t("li",e.$dots).on("mouseenter.slick",t.proxy(e.interrupt,e,!0)).on("mouseleave.slick",t.proxy(e.interrupt,e,!1))},e.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",t.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",t.proxy(e.interrupt,e,!1)))},e.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),t(document).on(e.visibilityChange,t.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),t(window).on("orientationchange.slick.slick-"+e.instanceUid,t.proxy(e.orientationChange,e)),t(window).on("resize.slick.slick-"+e.instanceUid,t.proxy(e.resize,e)),t("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),t(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),t(e.setPosition)},e.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},e.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},e.prototype.lazyLoad=function(){function e(e){t("img[data-lazy]",e).each((function(){var e=t(this),i=t(this).attr("data-lazy"),n=t(this).attr("data-srcset"),s=t(this).attr("data-sizes")||o.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){e.animate({opacity:0},100,(function(){n&&(e.attr("srcset",n),s&&e.attr("sizes",s)),e.attr("src",i).animate({opacity:1},200,(function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),o.$slider.trigger("lazyLoaded",[o,e,i])}))},r.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,e,i])},r.src=i}))}var i,n,s,o=this;if(!0===o.options.centerMode?!0===o.options.infinite?s=(n=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(n=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),s=o.options.slidesToShow/2+1+2+o.currentSlide):(n=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,s=Math.ceil(n+o.options.slidesToShow),!0===o.options.fade&&(n>0&&n--,s<=o.slideCount&&s++)),i=o.$slider.find(".slick-slide").slice(n,s),"anticipated"===o.options.lazyLoad)for(var r=n-1,a=s,l=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)r<0&&(r=o.slideCount-1),i=(i=i.add(l.eq(r))).add(l.eq(a)),r--,a++;e(i),o.slideCount<=o.options.slidesToShow?e(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?e(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&e(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},e.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},e.prototype.next=e.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},e.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},e.prototype.pause=e.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},e.prototype.play=e.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},e.prototype.postSlide=function(e){var i=this;i.unslicked||(i.$slider.trigger("afterChange",[i,e]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),!0===i.options.accessibility&&(i.initADA(),i.options.focusOnChange&&t(i.$slides.get(i.currentSlide)).attr("tabindex",0).focus()))},e.prototype.prev=e.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},e.prototype.preventDefault=function(t){t.preventDefault()},e.prototype.progressiveLazyLoad=function(e){e=e||1;var i,n,s,o,r,a=this,l=t("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),s=i.attr("data-srcset"),o=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){s&&(i.attr("srcset",s),o&&i.attr("sizes",o)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout((function(){a.progressiveLazyLoad(e+1)}),500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},r.src=n):a.$slider.trigger("allImagesLoaded",[a])},e.prototype.refresh=function(e){var i,n,s=this;n=s.slideCount-s.options.slidesToShow,!s.options.infinite&&s.currentSlide>n&&(s.currentSlide=n),s.slideCount<=s.options.slidesToShow&&(s.currentSlide=0),i=s.currentSlide,s.destroy(!0),t.extend(s,s.initials,{currentSlide:i}),s.init(),e||s.changeSlide({data:{message:"index",index:i}},!1)},e.prototype.registerBreakpoints=function(){var e,i,n,s=this,o=s.options.responsive||null;if("array"===t.type(o)&&o.length){for(e in s.respondTo=s.options.respondTo||"window",o)if(n=s.breakpoints.length-1,o.hasOwnProperty(e)){for(i=o[e].breakpoint;n>=0;)s.breakpoints[n]&&s.breakpoints[n]===i&&s.breakpoints.splice(n,1),n--;s.breakpoints.push(i),s.breakpointSettings[i]=o[e].settings}s.breakpoints.sort((function(t,e){return s.options.mobileFirst?t-e:e-t}))}},e.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},e.prototype.resize=function(){var e=this;t(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout((function(){e.windowWidth=t(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()}),50))},e.prototype.removeSlide=e.prototype.slickRemove=function(t,e,i){var n=this;if(t="boolean"==typeof t?!0===(e=t)?0:n.slideCount-1:!0===e?--t:t,n.slideCount<1||t<0||t>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(t).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},e.prototype.setCSS=function(t){var e,i,n=this,s={};!0===n.options.rtl&&(t=-t),e="left"==n.positionProp?Math.ceil(t)+"px":"0px",i="top"==n.positionProp?Math.ceil(t)+"px":"0px",s[n.positionProp]=t,!1===n.transformsEnabled?n.$slideTrack.css(s):(s={},!1===n.cssTransitions?(s[n.animType]="translate("+e+", "+i+")",n.$slideTrack.css(s)):(s[n.animType]="translate3d("+e+", "+i+", 0px)",n.$slideTrack.css(s)))},e.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},e.prototype.setFade=function(){var e,i=this;i.$slides.each((function(n,s){e=i.slideWidth*n*-1,!0===i.options.rtl?t(s).css({position:"relative",right:e,top:0,zIndex:i.options.zIndex-2,opacity:0}):t(s).css({position:"relative",left:e,top:0,zIndex:i.options.zIndex-2,opacity:0})})),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},e.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},e.prototype.setOption=e.prototype.slickSetOption=function(){var e,i,n,s,o,r=this,a=!1;if("object"===t.type(arguments[0])?(n=arguments[0],a=arguments[1],o="multiple"):"string"===t.type(arguments[0])&&(n=arguments[0],s=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===t.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[n]=s;else if("multiple"===o)t.each(n,(function(t,e){r.options[t]=e}));else if("responsive"===o)for(i in s)if("array"!==t.type(r.options.responsive))r.options.responsive=[s[i]];else{for(e=r.options.responsive.length-1;e>=0;)r.options.responsive[e].breakpoint===s[i].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(s[i])}a&&(r.unload(),r.reinit())},e.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},e.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},e.prototype.setSlideClasses=function(t){var e,i,n,s,o=this;if(i=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),o.$slides.eq(t).addClass("slick-current"),!0===o.options.centerMode){var r=o.options.slidesToShow%2==0?1:0;e=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&(t>=e&&t<=o.slideCount-1-e?o.$slides.slice(t-e+r,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(n=o.options.slidesToShow+t,i.slice(n-e+1+r,n+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-o.options.slidesToShow).addClass("slick-center"):t===o.slideCount-1&&i.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(t).addClass("slick-center")}else t>=0&&t<=o.slideCount-o.options.slidesToShow?o.$slides.slice(t,t+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=o.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(s=o.slideCount%o.options.slidesToShow,n=!0===o.options.infinite?o.options.slidesToShow+t:t,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-t<o.options.slidesToShow?i.slice(n-(o.options.slidesToShow-s),n+s).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},e.prototype.setupInfinite=function(){var e,i,n,s=this;if(!0===s.options.fade&&(s.options.centerMode=!1),!0===s.options.infinite&&!1===s.options.fade&&(i=null,s.slideCount>s.options.slidesToShow)){for(n=!0===s.options.centerMode?s.options.slidesToShow+1:s.options.slidesToShow,e=s.slideCount;e>s.slideCount-n;e-=1)i=e-1,t(s.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");for(e=0;e<n+s.slideCount;e+=1)i=e,t(s.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");s.$slideTrack.find(".slick-cloned").find("[id]").each((function(){t(this).attr("id","")}))}},e.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},e.prototype.selectHandler=function(e){var i=this,n=t(e.target).is(".slick-slide")?t(e.target):t(e.target).parents(".slick-slide"),s=parseInt(n.attr("data-slick-index"));s||(s=0),i.slideCount<=i.options.slidesToShow?i.slideHandler(s,!1,!0):i.slideHandler(s)},e.prototype.slideHandler=function(t,e,i){var n,s,o,r,a,l=null,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),n=t,l=c.getLeft(n),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i?c.animateSlide(r,(function(){c.postSlide(n)})):c.postSlide(n));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i?c.animateSlide(r,(function(){c.postSlide(n)})):c.postSlide(n));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),s=n<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,s]),o=c.currentSlide,c.currentSlide=s,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=(a=c.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(o),c.fadeSlide(s,(function(){c.postSlide(s)}))):c.postSlide(s),void c.animateHeight();!0!==i?c.animateSlide(l,(function(){c.postSlide(s)})):c.postSlide(s)}},e.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},e.prototype.swipeDirection=function(){var t,e,i,n,s=this;return t=s.touchObject.startX-s.touchObject.curX,e=s.touchObject.startY-s.touchObject.curY,i=Math.atan2(e,t),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&n>=0||n<=360&&n>=315?!1===s.options.rtl?"left":"right":n>=135&&n<=225?!1===s.options.rtl?"right":"left":!0===s.options.verticalSwiping?n>=35&&n<=135?"down":"up":"vertical"},e.prototype.swipeEnd=function(t){var e,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(e),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},e.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},e.prototype.swipeMove=function(t){var e,i,n,s,o,r,a=this;return o=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!a.dragging||a.scrolling||o&&1!==o.length)&&(e=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,a.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&r>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==t.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,t.preventDefault()),s=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(s=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=e+n*s:a.swipeLeft=e+n*(a.$list.height()/a.listWidth)*s,!0===a.options.verticalSwiping&&(a.swipeLeft=e+n*s),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},e.prototype.swipeStart=function(t){var e,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return i.touchObject={},!1;void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,i.dragging=!0},e.prototype.unfilterSlides=e.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},e.prototype.unload=function(){var e=this;t(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},e.prototype.unslick=function(t){var e=this;e.$slider.trigger("unslick",[e,t]),e.destroy()},e.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},e.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},e.prototype.visibility=function(){var t=this;t.options.autoplay&&(document[t.hidden]?t.interrupted=!0:t.interrupted=!1)},t.fn.slick=function(){var t,i,n=this,s=arguments[0],o=Array.prototype.slice.call(arguments,1),r=n.length;for(t=0;t<r;t++)if("object"==typeof s||void 0===s?n[t].slick=new e(n[t],s):i=n[t].slick[s].apply(n[t].slick,o),void 0!==i)return i;return n}})?n.apply(e,s):n)||(t.exports=o)}()},XQ3s:function(t,e){!function(t){"use strict";var e=function(i,n){this.$element=t(i),this.options=t.extend({},e.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+i.id+'"],[data-toggle="collapse"][data-target="#'+i.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function i(e){var i,n=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(document).find(n)}function n(i){return this.each((function(){var n=t(this),s=n.data("bs.collapse"),o=t.extend({},e.DEFAULTS,n.data(),"object"==typeof i&&i);!s&&o.toggle&&/show|hide/.test(i)&&(o.toggle=!1),s||n.data("bs.collapse",s=new e(this,o)),"string"==typeof i&&s[i]()}))}e.VERSION="3.4.1",e.TRANSITION_DURATION=350,e.DEFAULTS={toggle:!0},e.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},e.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var i,s=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(s&&s.length&&(i=s.data("bs.collapse"))&&i.transitioning)){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){s&&s.length&&(n.call(s,"hide"),i||s.data("bs.collapse",null));var r=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[r](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[r](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",r].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(e.TRANSITION_DURATION)[r](this.$element[0][l])}}}},e.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var i=t.Event("hide.bs.collapse");if(this.$element.trigger(i),!i.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var s=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return s.call(this);this.$element[n](0).one("bsTransitionEnd",t.proxy(s,this)).emulateTransitionEnd(e.TRANSITION_DURATION)}}},e.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},e.prototype.getParent=function(){return t(document).find(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy((function(e,n){var s=t(n);this.addAriaAndCollapsedClass(i(s),s)}),this)).end()},e.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var s=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=e,t.fn.collapse.noConflict=function(){return t.fn.collapse=s,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',(function(e){var s=t(this);s.attr("data-target")||e.preventDefault();var o=i(s),r=o.data("bs.collapse")?"toggle":s.data();n.call(o,r)}))}(jQuery)},XqMk:function(t,e,i){"use strict";(function(t){var i="object"==typeof t&&t&&t.Object===Object&&t;e.a=i}).call(this,i("yLpj"))},ZUd8:function(t,e,i){var n=i("ppGB"),s=i("HYAF"),o=function(t){return function(e,i){var o,r,a=String(s(e)),l=n(i),c=a.length;return l<0||l>=c?t?"":void 0:(o=a.charCodeAt(l))<55296||o>56319||l+1===c||(r=a.charCodeAt(l+1))<56320||r>57343?t?a.charAt(l):o:t?a.slice(l,l+2):r-56320+(o-55296<<10)+65536}};t.exports={codeAt:o(!1),charAt:o(!0)}},ZfDv:function(t,e,i){var n=i("hh1v"),s=i("6LWA"),o=i("tiKp")("species");t.exports=function(t,e){var i;return s(t)&&("function"!=typeof(i=t.constructor)||i!==Array&&!s(i.prototype)?n(i)&&null===(i=i[o])&&(i=void 0):i=void 0),new(void 0===i?Array:i)(0===e?0:e)}},afO8:function(t,e,i){var n,s,o,r=i("f5p1"),a=i("2oRo"),l=i("hh1v"),c=i("kRJp"),u=i("UTVS"),d=i("93I0"),p=i("0BK2"),h=a.WeakMap;if(r){var f=new h,m=f.get,g=f.has,v=f.set;n=function(t,e){return v.call(f,t,e),e},s=function(t){return m.call(f,t)||{}},o=function(t){return g.call(f,t)}}else{var y=d("state");p[y]=!0,n=function(t,e){return c(t,y,e),e},s=function(t){return u(t,y)?t[y]:{}},o=function(t){return u(t,y)}}t.exports={set:n,get:s,has:o,enforce:function(t){return o(t)?s(t):n(t,{})},getterFor:function(t){return function(e){var i;if(!l(e)||(i=s(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return i}}}},bUC5:function(t,e,i){"use strict";i.r(e);i("pU5O"),i("eCb9"),i("XMe9"),i("I9E9"),i("QWBl"),i("FZtP");var n=i("AxL3"),s=i.n(n);var o=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)},r=i("XqMk"),a="object"==typeof self&&self&&self.Object===Object&&self,l=r.a||a||Function("return this")(),c=function(){return l.Date.now()},u=l.Symbol,d=Object.prototype,p=d.hasOwnProperty,h=d.toString,f=u?u.toStringTag:void 0;var m=function(t){var e=p.call(t,f),i=t[f];try{t[f]=void 0;var n=!0}catch(t){}var s=h.call(t);return n&&(e?t[f]=i:delete t[f]),s},g=Object.prototype.toString;var v=function(t){return g.call(t)},y=u?u.toStringTag:void 0;var b=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":y&&y in Object(t)?m(t):v(t)};var w=function(t){return null!=t&&"object"==typeof t};var x=function(t){return"symbol"==typeof t||w(t)&&"[object Symbol]"==b(t)},k=/^\s+|\s+$/g,C=/^[-+]0x[0-9a-f]+$/i,T=/^0b[01]+$/i,S=/^0o[0-7]+$/i,E=parseInt;var D=function(t){if("number"==typeof t)return t;if(x(t))return NaN;if(o(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=o(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(k,"");var i=T.test(t);return i||S.test(t)?E(t.slice(2),i?2:8):C.test(t)?NaN:+t},_=Math.max,A=Math.min;var M=function(t,e,i){var n,s,r,a,l,u,d=0,p=!1,h=!1,f=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function m(e){var i=n,o=s;return n=s=void 0,d=e,a=t.apply(o,i)}function g(t){return d=t,l=setTimeout(y,e),p?m(t):a}function v(t){var i=t-u;return void 0===u||i>=e||i<0||h&&t-d>=r}function y(){var t=c();if(v(t))return b(t);l=setTimeout(y,function(t){var i=e-(t-u);return h?A(i,r-(t-d)):i}(t))}function b(t){return l=void 0,f&&n?m(t):(n=s=void 0,a)}function w(){var t=c(),i=v(t);if(n=arguments,s=this,u=t,i){if(void 0===l)return g(u);if(h)return clearTimeout(l),l=setTimeout(y,e),m(u)}return void 0===l&&(l=setTimeout(y,e)),a}return e=D(e)||0,o(i)&&(p=!!i.leading,r=(h="maxWait"in i)?_(D(i.maxWait)||0,e):r,f="trailing"in i?!!i.trailing:f),w.cancel=function(){void 0!==l&&clearTimeout(l),d=0,n=u=s=l=void 0},w.flush=function(){return void 0===l?a:b(c())},w};var O=function(t,e,i){var n=!0,s=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return o(i)&&(n="leading"in i?!!i.leading:n,s="trailing"in i?!!i.trailing:s),M(t,e,{leading:n,maxWait:e,trailing:s})};var P,j=function(t){if(!o(t))return!1;var e=b(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e},L=l["__core-js_shared__"],I=(P=/[^.]+$/.exec(L&&L.keys&&L.keys.IE_PROTO||""))?"Symbol(src)_1."+P:"";var N=function(t){return!!I&&I in t},R=Function.prototype.toString;var H=function(t){if(null!=t){try{return R.call(t)}catch(t){}try{return t+""}catch(t){}}return""},F=/^\[object .+?Constructor\]$/,z=Function.prototype,W=Object.prototype,q=z.toString,B=W.hasOwnProperty,U=RegExp("^"+q.call(B).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var V=function(t){return!(!o(t)||N(t))&&(j(t)?U:F).test(H(t))};var Y=function(t,e){return null==t?void 0:t[e]};var X=function(t,e){var i=Y(t,e);return V(i)?i:void 0},G=X(Object,"create");var K=function(){this.__data__=G?G(null):{},this.size=0};var Q=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},J=Object.prototype.hasOwnProperty;var Z=function(t){var e=this.__data__;if(G){var i=e[t];return"__lodash_hash_undefined__"===i?void 0:i}return J.call(e,t)?e[t]:void 0},tt=Object.prototype.hasOwnProperty;var et=function(t){var e=this.__data__;return G?void 0!==e[t]:tt.call(e,t)};var it=function(t,e){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=G&&void 0===e?"__lodash_hash_undefined__":e,this};function nt(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}nt.prototype.clear=K,nt.prototype.delete=Q,nt.prototype.get=Z,nt.prototype.has=et,nt.prototype.set=it;var st=nt;var ot=function(){this.__data__=[],this.size=0};var rt=function(t,e){return t===e||t!=t&&e!=e};var at=function(t,e){for(var i=t.length;i--;)if(rt(t[i][0],e))return i;return-1},lt=Array.prototype.splice;var ct=function(t){var e=this.__data__,i=at(e,t);return!(i<0)&&(i==e.length-1?e.pop():lt.call(e,i,1),--this.size,!0)};var ut=function(t){var e=this.__data__,i=at(e,t);return i<0?void 0:e[i][1]};var dt=function(t){return at(this.__data__,t)>-1};var pt=function(t,e){var i=this.__data__,n=at(i,t);return n<0?(++this.size,i.push([t,e])):i[n][1]=e,this};function ht(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}ht.prototype.clear=ot,ht.prototype.delete=ct,ht.prototype.get=ut,ht.prototype.has=dt,ht.prototype.set=pt;var ft=ht,mt=X(l,"Map");var gt=function(){this.size=0,this.__data__={hash:new st,map:new(mt||ft),string:new st}};var vt=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t};var yt=function(t,e){var i=t.__data__;return vt(e)?i["string"==typeof e?"string":"hash"]:i.map};var bt=function(t){var e=yt(this,t).delete(t);return this.size-=e?1:0,e};var wt=function(t){return yt(this,t).get(t)};var xt=function(t){return yt(this,t).has(t)};var kt=function(t,e){var i=yt(this,t),n=i.size;return i.set(t,e),this.size+=i.size==n?0:1,this};function Ct(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}Ct.prototype.clear=gt,Ct.prototype.delete=bt,Ct.prototype.get=wt,Ct.prototype.has=xt,Ct.prototype.set=kt;var Tt=Ct;function St(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var i=function(){var n=arguments,s=e?e.apply(this,n):n[0],o=i.cache;if(o.has(s))return o.get(s);var r=t.apply(this,n);return i.cache=o.set(s,r)||o,r};return i.cache=new(St.Cache||Tt),i}St.Cache=Tt;var $t=St;let Et=null,Dt=null;function _t(){if(null===Et){if("undefined"==typeof document)return Et=0,Et;const t=document.body,e=document.createElement("div");e.classList.add("simplebar-hide-scrollbar"),t.appendChild(e);const i=e.getBoundingClientRect().right;t.removeChild(e),Et=i}return Et}function At(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView?t.ownerDocument.defaultView:window}function Mt(t){return t&&t.ownerDocument?t.ownerDocument:document}s.a&&window.addEventListener("resize",()=>{Dt!==window.devicePixelRatio&&(Dt=window.devicePixelRatio,Et=null)});class Ot{constructor(t,e={}){this.onScroll=()=>{const t=At(this.el);this.scrollXTicking||(t.requestAnimationFrame(this.scrollX),this.scrollXTicking=!0),this.scrollYTicking||(t.requestAnimationFrame(this.scrollY),this.scrollYTicking=!0),this.isScrolling||(this.isScrolling=!0,this.el.classList.add(this.classNames.scrolling)),this.onStopScrolling()},this.scrollX=()=>{this.axis.x.isOverflowing&&this.positionScrollbar("x"),this.scrollXTicking=!1},this.scrollY=()=>{this.axis.y.isOverflowing&&this.positionScrollbar("y"),this.scrollYTicking=!1},this.onStopScrolling=()=>{this.el.classList.remove(this.classNames.scrolling),this.isScrolling=!1},this.onMouseEnter=()=>{this.isMouseEntering||(this.el.classList.add(this.classNames.mouseEntered),this.isMouseEntering=!0),this.onMouseEntered()},this.onMouseEntered=()=>{this.el.classList.remove(this.classNames.mouseEntered),this.isMouseEntering=!1},this.onMouseMove=t=>{this.mouseX=t.clientX,this.mouseY=t.clientY,(this.axis.x.isOverflowing||this.axis.x.forceVisible)&&this.onMouseMoveForAxis("x"),(this.axis.y.isOverflowing||this.axis.y.forceVisible)&&this.onMouseMoveForAxis("y")},this.onMouseLeave=()=>{this.onMouseMove.cancel(),(this.axis.x.isOverflowing||this.axis.x.forceVisible)&&this.onMouseLeaveForAxis("x"),(this.axis.y.isOverflowing||this.axis.y.forceVisible)&&this.onMouseLeaveForAxis("y"),this.mouseX=-1,this.mouseY=-1},this.onWindowResize=()=>{this.scrollbarWidth=this.getScrollbarWidth(),this.hideNativeScrollbar()},this.onPointerEvent=t=>{let e,i;this.axis.x.track.rect=this.axis.x.track.el.getBoundingClientRect(),this.axis.y.track.rect=this.axis.y.track.el.getBoundingClientRect(),(this.axis.x.isOverflowing||this.axis.x.forceVisible)&&(e=this.isWithinBounds(this.axis.x.track.rect)),(this.axis.y.isOverflowing||this.axis.y.forceVisible)&&(i=this.isWithinBounds(this.axis.y.track.rect)),(e||i)&&(t.preventDefault(),t.stopPropagation(),"mousedown"===t.type&&(e&&(this.axis.x.scrollbar.rect=this.axis.x.scrollbar.el.getBoundingClientRect(),this.isWithinBounds(this.axis.x.scrollbar.rect)?this.onDragStart(t,"x"):this.onTrackClick(t,"x")),i&&(this.axis.y.scrollbar.rect=this.axis.y.scrollbar.el.getBoundingClientRect(),this.isWithinBounds(this.axis.y.scrollbar.rect)?this.onDragStart(t,"y"):this.onTrackClick(t,"y"))))},this.drag=t=>{let e;const i=this.axis[this.draggedAxis].track,n=i.rect[this.axis[this.draggedAxis].sizeAttr],s=this.axis[this.draggedAxis].scrollbar,o=this.contentWrapperEl[this.axis[this.draggedAxis].scrollSizeAttr],r=parseInt(this.elStyles[this.axis[this.draggedAxis].sizeAttr],10);t.preventDefault(),t.stopPropagation(),e="y"===this.draggedAxis?t.pageY:t.pageX;let a=(e-i.rect[this.axis[this.draggedAxis].offsetAttr]-this.axis[this.draggedAxis].dragOffset)/(n-s.size)*(o-r);"x"===this.draggedAxis&&(a=this.isRtl&&Ot.getRtlHelpers().isScrollOriginAtZero?a-(n+s.size):a),this.contentWrapperEl[this.axis[this.draggedAxis].scrollOffsetAttr]=a},this.onEndDrag=t=>{const e=Mt(this.el),i=At(this.el);t.preventDefault(),t.stopPropagation(),this.el.classList.remove(this.classNames.dragging),e.removeEventListener("mousemove",this.drag,!0),e.removeEventListener("mouseup",this.onEndDrag,!0),this.removePreventClickId=i.setTimeout(()=>{e.removeEventListener("click",this.preventClick,!0),e.removeEventListener("dblclick",this.preventClick,!0),this.removePreventClickId=null})},this.preventClick=t=>{t.preventDefault(),t.stopPropagation()},this.el=t,this.minScrollbarWidth=20,this.stopScrollDelay=175,this.options={...Ot.defaultOptions,...e},this.classNames={...Ot.defaultOptions.classNames,...this.options.classNames},this.axis={x:{scrollOffsetAttr:"scrollLeft",sizeAttr:"width",scrollSizeAttr:"scrollWidth",offsetSizeAttr:"offsetWidth",offsetAttr:"left",overflowAttr:"overflowX",dragOffset:0,isOverflowing:!0,isVisible:!1,forceVisible:!1,track:{},scrollbar:{}},y:{scrollOffsetAttr:"scrollTop",sizeAttr:"height",scrollSizeAttr:"scrollHeight",offsetSizeAttr:"offsetHeight",offsetAttr:"top",overflowAttr:"overflowY",dragOffset:0,isOverflowing:!0,isVisible:!1,forceVisible:!1,track:{},scrollbar:{}}},this.removePreventClickId=null,this.isScrolling=!1,this.isMouseEntering=!1,Ot.instances.has(this.el)||(e.classNames&&console.warn("simplebar: classNames option is deprecated. Please override the styles with CSS instead."),e.autoHide&&console.warn("simplebar: autoHide option is deprecated. Please use CSS instead: '.simplebar-scrollbar::before { opacity: 0.5 };' for autoHide: false"),this.recalculate=O(this.recalculate,64),this.onMouseMove=O(this.onMouseMove,64),this.onWindowResize=M(this.onWindowResize,64,{leading:!0}),this.onStopScrolling=M(this.onStopScrolling,this.stopScrollDelay),this.onMouseEntered=M(this.onMouseEntered,this.stopScrollDelay),Ot.getRtlHelpers=$t(Ot.getRtlHelpers),this.init())}static getRtlHelpers(){const t=document.createElement("div");t.innerHTML='<div class="simplebar-dummy-scrollbar-size"><div></div></div>';const e=t.firstElementChild,i=e.firstElementChild;document.body.appendChild(e),e.scrollLeft=0;const n=Ot.getOffset(e),s=Ot.getOffset(i);e.scrollLeft=-999;const o=Ot.getOffset(i);return{isScrollOriginAtZero:n.left!==s.left,isScrollingToNegative:s.left!==o.left}}static getOffset(t){const e=t.getBoundingClientRect(),i=Mt(t),n=At(t);return{top:e.top+(n.pageYOffset||i.documentElement.scrollTop),left:e.left+(n.pageXOffset||i.documentElement.scrollLeft)}}init(){Ot.instances.set(this.el,this),s.a&&(this.initDOM(),this.scrollbarWidth=this.getScrollbarWidth(),this.recalculate(),this.initListeners())}initDOM(){if(Array.prototype.filter.call(this.el.children,t=>t.classList.contains(this.classNames.wrapper)).length)this.wrapperEl=this.el.querySelector("."+this.classNames.wrapper),this.contentWrapperEl=this.options.scrollableNode||this.el.querySelector("."+this.classNames.contentWrapper),this.contentEl=this.options.contentNode||this.el.querySelector("."+this.classNames.contentEl),this.offsetEl=this.el.querySelector("."+this.classNames.offset),this.maskEl=this.el.querySelector("."+this.classNames.mask),this.placeholderEl=this.findChild(this.wrapperEl,"."+this.classNames.placeholder),this.heightAutoObserverWrapperEl=this.el.querySelector("."+this.classNames.heightAutoObserverWrapperEl),this.heightAutoObserverEl=this.el.querySelector("."+this.classNames.heightAutoObserverEl),this.axis.x.track.el=this.findChild(this.el,`.${this.classNames.track}.${this.classNames.horizontal}`),this.axis.y.track.el=this.findChild(this.el,`.${this.classNames.track}.${this.classNames.vertical}`);else{for(this.wrapperEl=document.createElement("div"),this.contentWrapperEl=document.createElement("div"),this.offsetEl=document.createElement("div"),this.maskEl=document.createElement("div"),this.contentEl=document.createElement("div"),this.placeholderEl=document.createElement("div"),this.heightAutoObserverWrapperEl=document.createElement("div"),this.heightAutoObserverEl=document.createElement("div"),this.wrapperEl.classList.add(this.classNames.wrapper),this.contentWrapperEl.classList.add(this.classNames.contentWrapper),this.offsetEl.classList.add(this.classNames.offset),this.maskEl.classList.add(this.classNames.mask),this.contentEl.classList.add(this.classNames.contentEl),this.placeholderEl.classList.add(this.classNames.placeholder),this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl),this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);this.el.firstChild;)this.contentEl.appendChild(this.el.firstChild);this.contentWrapperEl.appendChild(this.contentEl),this.offsetEl.appendChild(this.contentWrapperEl),this.maskEl.appendChild(this.offsetEl),this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl),this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl),this.wrapperEl.appendChild(this.maskEl),this.wrapperEl.appendChild(this.placeholderEl),this.el.appendChild(this.wrapperEl)}if(!this.axis.x.track.el||!this.axis.y.track.el){const t=document.createElement("div"),e=document.createElement("div");t.classList.add(this.classNames.track),e.classList.add(this.classNames.scrollbar),t.appendChild(e),this.axis.x.track.el=t.cloneNode(!0),this.axis.x.track.el.classList.add(this.classNames.horizontal),this.axis.y.track.el=t.cloneNode(!0),this.axis.y.track.el.classList.add(this.classNames.vertical),this.el.appendChild(this.axis.x.track.el),this.el.appendChild(this.axis.y.track.el)}this.axis.x.scrollbar.el=this.axis.x.track.el.querySelector("."+this.classNames.scrollbar),this.axis.y.scrollbar.el=this.axis.y.track.el.querySelector("."+this.classNames.scrollbar),this.options.autoHide||(this.axis.x.scrollbar.el.classList.add(this.classNames.visible),this.axis.y.scrollbar.el.classList.add(this.classNames.visible)),this.el.setAttribute("data-simplebar","init")}initListeners(){const t=At(this.el);if(this.el.addEventListener("mouseenter",this.onMouseEnter),["mousedown","click","dblclick"].forEach(t=>{this.el.addEventListener(t,this.onPointerEvent,!0)}),["touchstart","touchend","touchmove"].forEach(t=>{this.el.addEventListener(t,this.onPointerEvent,{capture:!0,passive:!0})}),this.el.addEventListener("mousemove",this.onMouseMove),this.el.addEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl.addEventListener("scroll",this.onScroll),t.addEventListener("resize",this.onWindowResize),window.ResizeObserver){let e=!1;const i=t.ResizeObserver||ResizeObserver;this.resizeObserver=new i(()=>{e&&this.recalculate()}),this.resizeObserver.observe(this.el),this.resizeObserver.observe(this.contentEl),t.requestAnimationFrame(()=>{e=!0})}this.mutationObserver=new t.MutationObserver(this.recalculate.bind(this)),this.mutationObserver.observe(this.contentEl,{childList:!0,subtree:!0,characterData:!0})}recalculate(){const t=At(this.el);this.elStyles=t.getComputedStyle(this.el),this.isRtl="rtl"===this.elStyles.direction;const e=this.contentEl.offsetWidth,i=this.heightAutoObserverEl.offsetHeight<=1,n=this.heightAutoObserverEl.offsetWidth<=1||e>0,s=this.contentWrapperEl.offsetWidth,o=this.elStyles.overflowX,r=this.elStyles.overflowY;this.contentEl.style.padding=`${this.elStyles.paddingTop} ${this.elStyles.paddingRight} ${this.elStyles.paddingBottom} ${this.elStyles.paddingLeft}`,this.wrapperEl.style.margin=`-${this.elStyles.paddingTop} -${this.elStyles.paddingRight} -${this.elStyles.paddingBottom} -${this.elStyles.paddingLeft}`;const a=this.contentEl.scrollHeight,l=this.contentEl.scrollWidth;this.contentWrapperEl.style.height=i?"auto":"100%",this.placeholderEl.style.width=n?(e||l)+"px":"auto",this.placeholderEl.style.height=a+"px";const c=this.contentWrapperEl.offsetHeight;this.axis.x.isOverflowing=0!==e&&l>e,this.axis.y.isOverflowing=a>c,this.axis.x.isOverflowing="hidden"!==o&&this.axis.x.isOverflowing,this.axis.y.isOverflowing="hidden"!==r&&this.axis.y.isOverflowing,this.axis.x.forceVisible="x"===this.options.forceVisible||!0===this.options.forceVisible,this.axis.y.forceVisible="y"===this.options.forceVisible||!0===this.options.forceVisible,this.hideNativeScrollbar();let u=this.axis.x.isOverflowing?this.scrollbarWidth:0,d=this.axis.y.isOverflowing?this.scrollbarWidth:0;this.axis.x.isOverflowing=this.axis.x.isOverflowing&&l>s-d,this.axis.y.isOverflowing=this.axis.y.isOverflowing&&a>c-u,this.axis.x.scrollbar.size=this.getScrollbarSize("x"),this.axis.y.scrollbar.size=this.getScrollbarSize("y"),this.axis.x.scrollbar.el.style.width=this.axis.x.scrollbar.size+"px",this.axis.y.scrollbar.el.style.height=this.axis.y.scrollbar.size+"px",this.positionScrollbar("x"),this.positionScrollbar("y"),this.toggleTrackVisibility("x"),this.toggleTrackVisibility("y")}getScrollbarSize(t="y"){if(!this.axis[t].isOverflowing)return 0;const e=this.contentEl[this.axis[t].scrollSizeAttr],i=this.axis[t].track.el[this.axis[t].offsetSizeAttr];let n,s=i/e;return n=Math.max(~~(s*i),this.options.scrollbarMinSize),this.options.scrollbarMaxSize&&(n=Math.min(n,this.options.scrollbarMaxSize)),n}positionScrollbar(t="y"){if(!this.axis[t].isOverflowing)return;const e=this.contentWrapperEl[this.axis[t].scrollSizeAttr],i=this.axis[t].track.el[this.axis[t].offsetSizeAttr],n=parseInt(this.elStyles[this.axis[t].sizeAttr],10),s=this.axis[t].scrollbar;let o=this.contentWrapperEl[this.axis[t].scrollOffsetAttr];o="x"===t&&this.isRtl&&Ot.getRtlHelpers().isScrollOriginAtZero?-o:o;let r=o/(e-n),a=~~((i-s.size)*r);a="x"===t&&this.isRtl&&Ot.getRtlHelpers().isScrollingToNegative?-a+(i-s.size):a,s.el.style.transform="x"===t?`translate3d(${a}px, 0, 0)`:`translate3d(0, ${a}px, 0)`}toggleTrackVisibility(t="y"){const e=this.axis[t].track.el,i=this.axis[t].scrollbar.el;this.axis[t].isOverflowing||this.axis[t].forceVisible?(e.style.visibility="visible",this.contentWrapperEl.style[this.axis[t].overflowAttr]="scroll",this.el.classList.add(`${this.classNames.scrollable}-${t}`)):(e.style.visibility="hidden",this.contentWrapperEl.style[this.axis[t].overflowAttr]="hidden",this.el.classList.remove(`${this.classNames.scrollable}-${t}`)),this.axis[t].isOverflowing?i.style.display="block":i.style.display="none"}hideNativeScrollbar(){this.offsetEl.style[this.isRtl?"left":"right"]=this.axis.y.isOverflowing||this.axis.y.forceVisible?`-${this.scrollbarWidth}px`:0,this.offsetEl.style.bottom=this.axis.x.isOverflowing||this.axis.x.forceVisible?`-${this.scrollbarWidth}px`:0}onMouseMoveForAxis(t="y"){this.axis[t].track.rect=this.axis[t].track.el.getBoundingClientRect(),this.axis[t].scrollbar.rect=this.axis[t].scrollbar.el.getBoundingClientRect();this.isWithinBounds(this.axis[t].scrollbar.rect)?this.axis[t].scrollbar.el.classList.add(this.classNames.hover):this.axis[t].scrollbar.el.classList.remove(this.classNames.hover),this.isWithinBounds(this.axis[t].track.rect)?this.axis[t].track.el.classList.add(this.classNames.hover):this.axis[t].track.el.classList.remove(this.classNames.hover)}onMouseLeaveForAxis(t="y"){this.axis[t].track.el.classList.remove(this.classNames.hover),this.axis[t].scrollbar.el.classList.remove(this.classNames.hover)}onDragStart(t,e="y"){const i=Mt(this.el),n=At(this.el),s=this.axis[e].scrollbar,o="y"===e?t.pageY:t.pageX;this.axis[e].dragOffset=o-s.rect[this.axis[e].offsetAttr],this.draggedAxis=e,this.el.classList.add(this.classNames.dragging),i.addEventListener("mousemove",this.drag,!0),i.addEventListener("mouseup",this.onEndDrag,!0),null===this.removePreventClickId?(i.addEventListener("click",this.preventClick,!0),i.addEventListener("dblclick",this.preventClick,!0)):(n.clearTimeout(this.removePreventClickId),this.removePreventClickId=null)}onTrackClick(t,e="y"){if(!this.options.clickOnTrack)return;const i=At(this.el);this.axis[e].scrollbar.rect=this.axis[e].scrollbar.el.getBoundingClientRect();const n=this.axis[e].scrollbar.rect[this.axis[e].offsetAttr],s=parseInt(this.elStyles[this.axis[e].sizeAttr],10);let o=this.contentWrapperEl[this.axis[e].scrollOffsetAttr];const r=("y"===e?this.mouseY-n:this.mouseX-n)<0?-1:1,a=-1===r?o-s:o+s,l=()=>{-1===r?o>a&&(o-=40,this.contentWrapperEl.scrollTo({[this.axis[e].offsetAttr]:o}),i.requestAnimationFrame(l)):o<a&&(o+=40,this.contentWrapperEl.scrollTo({[this.axis[e].offsetAttr]:o}),i.requestAnimationFrame(l))};l()}getContentElement(){return this.contentEl}getScrollElement(){return this.contentWrapperEl}getScrollbarWidth(){try{return"none"===getComputedStyle(this.contentWrapperEl,"::-webkit-scrollbar").display||"scrollbarWidth"in document.documentElement.style||"-ms-overflow-style"in document.documentElement.style?0:_t()}catch(t){return _t()}}removeListeners(){const t=At(this.el);this.el.removeEventListener("mouseenter",this.onMouseEnter),["mousedown","click","dblclick"].forEach(t=>{this.el.removeEventListener(t,this.onPointerEvent,!0)}),["touchstart","touchend","touchmove"].forEach(t=>{this.el.removeEventListener(t,this.onPointerEvent,{capture:!0,passive:!0})}),this.el.removeEventListener("mousemove",this.onMouseMove),this.el.removeEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl.removeEventListener("scroll",this.onScroll),t.removeEventListener("resize",this.onWindowResize),this.mutationObserver.disconnect(),this.resizeObserver&&this.resizeObserver.disconnect(),this.recalculate.cancel(),this.onMouseMove.cancel(),this.onWindowResize.cancel(),this.onStopScrolling.cancel(),this.onMouseEntered.cancel()}unMount(){this.removeListeners(),Ot.instances.delete(this.el)}isWithinBounds(t){return this.mouseX>=t.left&&this.mouseX<=t.left+t.width&&this.mouseY>=t.top&&this.mouseY<=t.top+t.height}findChild(t,e){const i=t.matches||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector;return Array.prototype.filter.call(t.children,t=>i.call(t,e))[0]}}Ot.defaultOptions={autoHide:!0,forceVisible:!1,clickOnTrack:!0,classNames:{contentEl:"simplebar-content",contentWrapper:"simplebar-content-wrapper",offset:"simplebar-offset",mask:"simplebar-mask",wrapper:"simplebar-wrapper",placeholder:"simplebar-placeholder",scrollbar:"simplebar-scrollbar",track:"simplebar-track",heightAutoObserverWrapperEl:"simplebar-height-auto-observer-wrapper",heightAutoObserverEl:"simplebar-height-auto-observer",visible:"simplebar-visible",horizontal:"simplebar-horizontal",vertical:"simplebar-vertical",hover:"simplebar-hover",dragging:"simplebar-dragging",scrolling:"simplebar-scrolling",scrollable:"simplebar-scrollable",mouseEntered:"simplebar-mouse-entered"},scrollbarMinSize:25,scrollbarMaxSize:0},Ot.instances=new WeakMap;var Pt=Ot,jt=(i("E9XD"),i("sMBO"),i("rB9j"),i("Rm1S"),i("UxlC"),function(t){return Array.prototype.reduce.call(t,(function(t,e){var i=e.name.match(/data-simplebar-(.+)/);if(i){var n=i[1].replace(/\W+(.)/g,(function(t,e){return e.toUpperCase()}));switch(e.value){case"true":t[n]=!0;break;case"false":t[n]=!1;break;case void 0:t[n]=!0;break;default:t[n]=e.value}}return t}),{})});Pt.initDOMLoadedElements=function(){document.removeEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.removeEventListener("load",this.initDOMLoadedElements),Array.prototype.forEach.call(document.querySelectorAll("[data-simplebar]"),(function(t){"init"===t.getAttribute("data-simplebar")||Pt.instances.has(t)||new Pt(t,jt(t.attributes))}))},Pt.removeObserver=function(){this.globalObserver.disconnect()},Pt.initHtmlApi=function(){this.initDOMLoadedElements=this.initDOMLoadedElements.bind(this),"undefined"!=typeof MutationObserver&&(this.globalObserver=new MutationObserver(Pt.handleMutations),this.globalObserver.observe(document,{childList:!0,subtree:!0})),"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll?window.setTimeout(this.initDOMLoadedElements):(document.addEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.addEventListener("load",this.initDOMLoadedElements))},Pt.handleMutations=function(t){t.forEach((function(t){Array.prototype.forEach.call(t.addedNodes,(function(t){1===t.nodeType&&(t.hasAttribute("data-simplebar")?!Pt.instances.has(t)&&new Pt(t,jt(t.attributes)):Array.prototype.forEach.call(t.querySelectorAll("[data-simplebar]"),(function(t){"init"===t.getAttribute("data-simplebar")||Pt.instances.has(t)||new Pt(t,jt(t.attributes))})))})),Array.prototype.forEach.call(t.removedNodes,(function(t){1===t.nodeType&&(t.hasAttribute("data-simplebar")?Pt.instances.has(t)&&Pt.instances.get(t).unMount():Array.prototype.forEach.call(t.querySelectorAll('[data-simplebar="init"]'),(function(t){Pt.instances.has(t)&&Pt.instances.get(t).unMount()})))}))}))},Pt.getOptions=jt,s.a&&Pt.initHtmlApi();i("s+lh"),i("omkw"),i("fLsC"),i("BFHv");i("xexB"),window.$=window.jQuery=i("EVdn"),window.Stickyfill=i("5nEI"),i("gYfQ")($),i("wlMK"),i("rIKr"),i("i2Oj"),i("hTGC"),i("Nv4c"),i("zANn"),i("8yrV"),i("G1gL"),i("xHl5"),i("dABf"),i("fz2t")},busE:function(t,e,i){var n=i("2oRo"),s=i("kRJp"),o=i("UTVS"),r=i("zk60"),a=i("iSVu"),l=i("afO8"),c=l.get,u=l.enforce,d=String(String).split("String");(t.exports=function(t,e,i,a){var l=!!a&&!!a.unsafe,c=!!a&&!!a.enumerable,p=!!a&&!!a.noTargetGet;"function"==typeof i&&("string"!=typeof e||o(i,"name")||s(i,"name",e),u(i).source=d.join("string"==typeof e?e:"")),t!==n?(l?!p&&t[e]&&(c=!0):delete t[e],c?t[e]=i:s(t,e,i)):c?t[e]=i:r(e,i)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||a(this)}))},ctkp:function(t,e){!function(t){"use strict";var e=function(i,n){this.$element=t(i),this.options=t.extend({},e.DEFAULTS,n),this.isLoading=!1};function i(i){return this.each((function(){var n=t(this),s=n.data("bs.button"),o="object"==typeof i&&i;s||n.data("bs.button",s=new e(this,o)),"toggle"==i?s.toggle():i&&s.setState(i)}))}e.VERSION="3.4.1",e.DEFAULTS={loadingText:"loading..."},e.prototype.setState=function(e){var i="disabled",n=this.$element,s=n.is("input")?"val":"html",o=n.data();e+="Text",null==o.resetText&&n.data("resetText",n[s]()),setTimeout(t.proxy((function(){n[s](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,n.addClass(i).attr(i,i).prop(i,!0)):this.isLoading&&(this.isLoading=!1,n.removeClass(i).removeAttr(i).prop(i,!1))}),this),0)},e.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var n=t.fn.button;t.fn.button=i,t.fn.button.Constructor=e,t.fn.button.noConflict=function(){return t.fn.button=n,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',(function(e){var n=t(e.target).closest(".btn");i.call(n,"toggle"),t(e.target).is('input[type="radio"], input[type="checkbox"]')||(e.preventDefault(),n.is("input,button")?n.trigger("focus"):n.find("input:visible,button:visible").first().trigger("focus"))})).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',(function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))}))}(jQuery)},d63a:function(t,e){!function(t){"use strict";function e(i,n){this.$body=t(document.body),this.$scrollElement=t(i).is(document.body)?t(window):t(i),this.options=t.extend({},e.DEFAULTS,n),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each((function(){var n=t(this),s=n.data("bs.scrollspy"),o="object"==typeof i&&i;s||n.data("bs.scrollspy",s=new e(this,o)),"string"==typeof i&&s[i]()}))}e.VERSION="3.4.1",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",n=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",n=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map((function(){var e=t(this),s=e.data("target")||e.attr("href"),o=/^#./.test(s)&&t(s);return o&&o.length&&o.is(":visible")&&[[o[i]().top+n,s]]||null})).sort((function(t,e){return t[0]-e[0]})).each((function(){e.offsets.push(this[0]),e.targets.push(this[1])}))},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),n=this.options.offset+i-this.$scrollElement.height(),s=this.offsets,o=this.targets,r=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=n)return r!=(t=o[o.length-1])&&this.activate(t);if(r&&e<s[0])return this.activeTarget=null,this.clear();for(t=s.length;t--;)r!=o[t]&&e>=s[t]&&(void 0===s[t+1]||e<s[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',n=t(i).parents("li").addClass("active");n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var n=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=n,this},t(window).on("load.bs.scrollspy.data-api",(function(){t('[data-spy="scroll"]').each((function(){var e=t(this);i.call(e,e.data())}))}))}(jQuery)},dABf:function(t,e,i){var n,s,o;s=[i("EVdn")],void 0===(o="function"==typeof(n=function(t){"use strict";var e,i=(e=t)&&e.__esModule?e:{default:e},n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t};function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),r=i.default||window.jQuery||window.$;function a(t,e){return[t.state?"on":"off",t.size,t.disabled?"disabled":void 0,t.readonly?"readonly":void 0,t.indeterminate?"indeterminate":void 0,t.inverse?"inverse":void 0,e?"id-"+e:void 0].filter((function(t){return null==t}))}function l(){return{state:this.$element.is(":checked"),size:this.$element.data("size"),animate:this.$element.data("animate"),disabled:this.$element.is(":disabled"),readonly:this.$element.is("[readonly]"),indeterminate:this.$element.data("indeterminate"),inverse:this.$element.data("inverse"),radioAllOff:this.$element.data("radio-all-off"),onColor:this.$element.data("on-color"),offColor:this.$element.data("off-color"),onText:this.$element.data("on-text"),offText:this.$element.data("off-text"),labelText:this.$element.data("label-text"),handleWidth:this.$element.data("handle-width"),labelWidth:this.$element.data("label-width"),baseClass:this.$element.data("base-class"),wrapperClass:this.$element.data("wrapper-class")}}function c(){var t=this,e=this.$on.add(this.$off).add(this.$label).css("width",""),i="auto"===this.options.handleWidth?Math.round(Math.max(this.$on.width(),this.$off.width())):this.options.handleWidth;return e.width(i),this.$label.width((function(e,n){return"auto"!==t.options.labelWidth?t.options.labelWidth:n<i?i:n})),this.privateHandleWidth=this.$on.outerWidth(),this.privateLabelWidth=this.$label.outerWidth(),this.$container.width(2*this.privateHandleWidth+this.privateLabelWidth),this.$wrapper.width(this.privateHandleWidth+this.privateLabelWidth)}function u(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.ope;this.$container.css("margin-left",(function(){var i=[0,"-"+t.privateHandleWidth+"px"];return t.options.indeterminate?"-"+t.privateHandleWidth/2+"px":e?t.options.inverse?i[1]:i[0]:t.options.inverse?i[0]:i[1]}))}function d(t){return this.options.baseClass+"-"+t}function p(){var t=this,e=function(){t.setPrevOptions(),c.call(t),u.call(t),setTimeout((function(){return t.options.animate&&t.$wrapper.addClass(d.call(t,"animate"))}),50)};if(this.$wrapper.is(":visible"))e();else var i=window.setInterval((function(){return t.$wrapper.is(":visible")&&(e()||!0)&&window.clearInterval(i)}),50)}function h(){var t=this;return this.$element.on({"setPreviousOptions.bootstrapSwitch":function(){return t.setPrevOptions()},"previousState.bootstrapSwitch":function(){t.options=t.prevOptions,t.options.indeterminate&&t.$wrapper.addClass(d.call(t,"indeterminate")),t.$element.prop("checked",t.options.state).trigger("change.bootstrapSwitch",!0)},"change.bootstrapSwitch":function(e,i){e.preventDefault(),e.stopImmediatePropagation();var n=t.$element.is(":checked");u.call(t,n),n!==t.options.state&&(t.options.state=n,t.$wrapper.toggleClass(d.call(t,"off")).toggleClass(d.call(t,"on")),i||(t.$element.is(":radio")&&r('[name="'+t.$element.attr("name")+'"]').not(t.$element).prop("checked",!1).trigger("change.bootstrapSwitch",!0),t.$element.trigger("switchChange.bootstrapSwitch",[n])))},"focus.bootstrapSwitch":function(e){e.preventDefault(),t.$wrapper.addClass(d.call(t,"focused"))},"blur.bootstrapSwitch":function(e){e.preventDefault(),t.$wrapper.removeClass(d.call(t,"focused"))},"keydown.bootstrapSwitch":function(e){!e.which||t.options.disabled||t.options.readonly||37!==e.which&&39!==e.which||(e.preventDefault(),e.stopImmediatePropagation(),t.state(39===e.which))}})}function f(){var t=this;return this.$on.on("click.bootstrapSwitch",(function(e){return e.preventDefault(),e.stopPropagation(),t.state(!1),t.$element.trigger("focus.bootstrapSwitch")})),this.$off.on("click.bootstrapSwitch",(function(e){return e.preventDefault(),e.stopPropagation(),t.state(!0),t.$element.trigger("focus.bootstrapSwitch")}))}function m(){var t=this,e=void 0,i=void 0,n={click:function(t){t.stopPropagation()},"mousedown.bootstrapSwitch touchstart.bootstrapSwitch":function(i){e||t.options.disabled||t.options.readonly||(i.preventDefault(),i.stopPropagation(),e=(i.pageX||i.originalEvent.touches[0].pageX)-parseInt(t.$container.css("margin-left"),10),t.options.animate&&t.$wrapper.removeClass(d.call(t,"animate")),t.$element.trigger("focus.bootstrapSwitch"))},"mousemove.bootstrapSwitch touchmove.bootstrapSwitch":function(n){if(null!=e){var s=(n.pageX||n.originalEvent.touches[0].pageX)-e;n.preventDefault(),s<-t.privateHandleWidth||s>0||(i=s,t.$container.css("margin-left",i+"px"))}},"mouseup.bootstrapSwitch touchend.bootstrapSwitch":function(n){if(e){if(n.preventDefault(),t.options.animate&&t.$wrapper.addClass(d.call(t,"animate")),i){var s=i>-t.privateHandleWidth/2;i=!1,t.state(t.options.inverse?!s:s)}else t.state(!t.options.state);e=!1}},"mouseleave.bootstrapSwitch":function(){t.$label.trigger("mouseup.bootstrapSwitch")}};this.$label.on(n)}function g(){var t=this,e=this.$element.closest("label");e.on("click",(function(i){i.preventDefault(),i.stopImmediatePropagation(),i.target===e[0]&&t.toggleState()}))}function v(){function t(){return r(this).data("bootstrap-switch")}function e(){return r(this).bootstrapSwitch("state",this.checked)}var i=this.$element.closest("form");i.data("bootstrap-switch")||i.on("reset.bootstrapSwitch",(function(){window.setTimeout((function(){i.find("input").filter(t).each(e)}),1)})).data("bootstrap-switch",!0)}function y(t){var e=this;return r.isArray(t)?t.map((function(t){return d.call(e,t)})):[d.call(this,t)]}var b=function(){function t(e){var i=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};s(this,t),this.$element=r(e),this.options=r.extend({},r.fn.bootstrapSwitch.defaults,l.call(this),n),this.prevOptions={},this.$wrapper=r("<div>",{class:function(){return a(i.options,i.$element.attr("id")).map((function(t){return d.call(i,t)})).concat([i.options.baseClass],y.call(i,i.options.wrapperClass)).join(" ")}}),this.$container=r("<div>",{class:d.call(this,"container")}),this.$on=r("<span>",{html:this.options.onText,class:d.call(this,"handle-on")+" "+d.call(this,this.options.onColor)}),this.$off=r("<span>",{html:this.options.offText,class:d.call(this,"handle-off")+" "+d.call(this,this.options.offColor)}),this.$label=r("<span>",{html:this.options.labelText,class:d.call(this,"label")}),this.$element.on("init.bootstrapSwitch",(function(){return i.options.onInit(e)})),this.$element.on("switchChange.bootstrapSwitch",(function(){for(var t=arguments.length,n=Array(t),s=0;s<t;s++)n[s]=arguments[s];var o=i.options.onSwitchChange.apply(e,n);!1===o&&(i.$element.is(":radio")?r('[name="'+i.$element.attr("name")+'"]').trigger("previousState.bootstrapSwitch",!0):i.$element.trigger("previousState.bootstrapSwitch",!0))})),this.$container=this.$element.wrap(this.$container).parent(),this.$wrapper=this.$container.wrap(this.$wrapper).parent(),this.$element.before(this.options.inverse?this.$off:this.$on).before(this.$label).before(this.options.inverse?this.$on:this.$off),this.options.indeterminate&&this.$element.prop("indeterminate",!0),p.call(this),h.call(this),f.call(this),m.call(this),v.call(this),g.call(this),this.$element.trigger("init.bootstrapSwitch",this.options.state)}return o(t,[{key:"setPrevOptions",value:function(){this.prevOptions=n({},this.options)}},{key:"state",value:function(t,e){return void 0===t?this.options.state:(this.options.disabled||this.options.readonly||this.options.state&&!this.options.radioAllOff&&this.$element.is(":radio")||(this.$element.is(":radio")?r('[name="'+this.$element.attr("name")+'"]').trigger("setPreviousOptions.bootstrapSwitch"):this.$element.trigger("setPreviousOptions.bootstrapSwitch"),this.options.indeterminate&&this.indeterminate(!1),this.$element.prop("checked",Boolean(t)).trigger("change.bootstrapSwitch",e)),this.$element)}},{key:"toggleState",value:function(t){return this.options.disabled||this.options.readonly?this.$element:this.options.indeterminate?(this.indeterminate(!1),this.state(!0)):this.$element.prop("checked",!this.options.state).trigger("change.bootstrapSwitch",t)}},{key:"size",value:function(t){return void 0===t?this.options.size:(null!=this.options.size&&this.$wrapper.removeClass(d.call(this,this.options.size)),t&&this.$wrapper.addClass(d.call(this,t)),c.call(this),u.call(this),this.options.size=t,this.$element)}},{key:"animate",value:function(t){return void 0===t?this.options.animate:this.options.animate===Boolean(t)?this.$element:this.toggleAnimate()}},{key:"toggleAnimate",value:function(){return this.options.animate=!this.options.animate,this.$wrapper.toggleClass(d.call(this,"animate")),this.$element}},{key:"disabled",value:function(t){return void 0===t?this.options.disabled:this.options.disabled===Boolean(t)?this.$element:this.toggleDisabled()}},{key:"toggleDisabled",value:function(){return this.options.disabled=!this.options.disabled,this.$element.prop("disabled",this.options.disabled),this.$wrapper.toggleClass(d.call(this,"disabled")),this.$element}},{key:"readonly",value:function(t){return void 0===t?this.options.readonly:this.options.readonly===Boolean(t)?this.$element:this.toggleReadonly()}},{key:"toggleReadonly",value:function(){return this.options.readonly=!this.options.readonly,this.$element.prop("readonly",this.options.readonly),this.$wrapper.toggleClass(d.call(this,"readonly")),this.$element}},{key:"indeterminate",value:function(t){return void 0===t?this.options.indeterminate:this.options.indeterminate===Boolean(t)?this.$element:this.toggleIndeterminate()}},{key:"toggleIndeterminate",value:function(){return this.options.indeterminate=!this.options.indeterminate,this.$element.prop("indeterminate",this.options.indeterminate),this.$wrapper.toggleClass(d.call(this,"indeterminate")),u.call(this),this.$element}},{key:"inverse",value:function(t){return void 0===t?this.options.inverse:this.options.inverse===Boolean(t)?this.$element:this.toggleInverse()}},{key:"toggleInverse",value:function(){this.$wrapper.toggleClass(d.call(this,"inverse"));var t=this.$on.clone(!0),e=this.$off.clone(!0);return this.$on.replaceWith(e),this.$off.replaceWith(t),this.$on=e,this.$off=t,this.options.inverse=!this.options.inverse,this.$element}},{key:"onColor",value:function(t){return void 0===t?this.options.onColor:(this.options.onColor&&this.$on.removeClass(d.call(this,this.options.onColor)),this.$on.addClass(d.call(this,t)),this.options.onColor=t,this.$element)}},{key:"offColor",value:function(t){return void 0===t?this.options.offColor:(this.options.offColor&&this.$off.removeClass(d.call(this,this.options.offColor)),this.$off.addClass(d.call(this,t)),this.options.offColor=t,this.$element)}},{key:"onText",value:function(t){return void 0===t?this.options.onText:(this.$on.html(t),c.call(this),u.call(this),this.options.onText=t,this.$element)}},{key:"offText",value:function(t){return void 0===t?this.options.offText:(this.$off.html(t),c.call(this),u.call(this),this.options.offText=t,this.$element)}},{key:"labelText",value:function(t){return void 0===t?this.options.labelText:(this.$label.html(t),c.call(this),this.options.labelText=t,this.$element)}},{key:"handleWidth",value:function(t){return void 0===t?this.options.handleWidth:(this.options.handleWidth=t,c.call(this),u.call(this),this.$element)}},{key:"labelWidth",value:function(t){return void 0===t?this.options.labelWidth:(this.options.labelWidth=t,c.call(this),u.call(this),this.$element)}},{key:"baseClass",value:function(){return this.options.baseClass}},{key:"wrapperClass",value:function(t){if(void 0===t)return this.options.wrapperClass;var e=t||r.fn.bootstrapSwitch.defaults.wrapperClass;return this.$wrapper.removeClass(y.call(this,this.options.wrapperClass).join(" ")),this.$wrapper.addClass(y.call(this,e).join(" ")),this.options.wrapperClass=e,this.$element}},{key:"radioAllOff",value:function(t){if(void 0===t)return this.options.radioAllOff;var e=Boolean(t);return this.options.radioAllOff===e||(this.options.radioAllOff=e),this.$element}},{key:"onInit",value:function(t){return void 0===t?this.options.onInit:(this.options.onInit=t||r.fn.bootstrapSwitch.defaults.onInit,this.$element)}},{key:"onSwitchChange",value:function(t){return void 0===t?this.options.onSwitchChange:(this.options.onSwitchChange=t||r.fn.bootstrapSwitch.defaults.onSwitchChange,this.$element)}},{key:"destroy",value:function(){var t=this.$element.closest("form");return t.length&&t.off("reset.bootstrapSwitch").removeData("bootstrap-switch"),this.$container.children().not(this.$element).remove(),this.$element.unwrap().unwrap().off(".bootstrapSwitch").removeData("bootstrap-switch"),this.$element}}]),t}();r.fn.bootstrapSwitch=function(t){for(var e=arguments.length,i=Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];function s(e,n){var s=r(n),o=s.data("bootstrap-switch"),a=o||new b(n,t);return o||s.data("bootstrap-switch",a),"string"==typeof t?a[t].apply(a,i):e}return Array.prototype.reduce.call(this,s,this)},r.fn.bootstrapSwitch.Constructor=b,r.fn.bootstrapSwitch.defaults={state:!0,size:null,animate:!0,disabled:!1,readonly:!1,indeterminate:!1,inverse:!1,radioAllOff:!1,onColor:"primary",offColor:"default",onText:"ON",offText:"OFF",labelText:"&nbsp",handleWidth:"auto",labelWidth:"auto",baseClass:"bootstrap-switch",wrapperClass:"wrapper",onInit:function(){},onSwitchChange:function(){}}})?n.apply(e,s):n)||(t.exports=o)},"dBg+":function(t,e){e.f=Object.getOwnPropertySymbols},eCb9:function(t,e){!function(){"use strict";if("undefined"!=typeof window){var t=window.navigator.userAgent.match(/Edge\/(\d{2})\./),e=!!t&&16<=parseInt(t[1],10);if("objectFit"in document.documentElement.style==0||e){var i=function(t,e,i){var n,s,o,r,a;if((i=i.split(" ")).length<2&&(i[1]=i[0]),"x"===t)n=i[0],s=i[1],o="left",r="right",a=e.clientWidth;else{if("y"!==t)return;n=i[1],s=i[0],o="top",r="bottom",a=e.clientHeight}if(n!==o&&s!==o){if(n!==r&&s!==r)return"center"===n||"50%"===n?(e.style[o]="50%",void(e.style["margin-"+o]=a/-2+"px")):void(0<=n.indexOf("%")?(n=parseInt(n))<50?(e.style[o]=n+"%",e.style["margin-"+o]=a*(n/-100)+"px"):(n=100-n,e.style[r]=n+"%",e.style["margin-"+r]=a*(n/-100)+"px"):e.style[o]=n);e.style[r]="0"}else e.style[o]="0"},n=function(t){var e=t.dataset?t.dataset.objectFit:t.getAttribute("data-object-fit"),n=t.dataset?t.dataset.objectPosition:t.getAttribute("data-object-position");e=e||"cover",n=n||"50% 50%";var s=t.parentNode;return function(t){var e=window.getComputedStyle(t,null),i=e.getPropertyValue("position"),n=e.getPropertyValue("overflow"),s=e.getPropertyValue("display");i&&"static"!==i||(t.style.position="relative"),"hidden"!==n&&(t.style.overflow="hidden"),s&&"inline"!==s||(t.style.display="block"),0===t.clientHeight&&(t.style.height="100%"),-1===t.className.indexOf("object-fit-polyfill")&&(t.className=t.className+" object-fit-polyfill")}(s),function(t){var e=window.getComputedStyle(t,null),i={"max-width":"none","max-height":"none","min-width":"0px","min-height":"0px",top:"auto",right:"auto",bottom:"auto",left:"auto","margin-top":"0px","margin-right":"0px","margin-bottom":"0px","margin-left":"0px"};for(var n in i)e.getPropertyValue(n)!==i[n]&&(t.style[n]=i[n])}(t),t.style.position="absolute",t.style.width="auto",t.style.height="auto","scale-down"===e&&(e=t.clientWidth<s.clientWidth&&t.clientHeight<s.clientHeight?"none":"contain"),"none"===e?(i("x",t,n),void i("y",t,n)):"fill"===e?(t.style.width="100%",t.style.height="100%",i("x",t,n),void i("y",t,n)):(t.style.height="100%",void("cover"===e&&t.clientWidth>s.clientWidth||"contain"===e&&t.clientWidth<s.clientWidth?(t.style.top="0",t.style.marginTop="0",i("x",t,n)):(t.style.width="100%",t.style.height="auto",t.style.left="0",t.style.marginLeft="0",i("y",t,n))))},s=function(t){if(void 0===t||t instanceof Event)t=document.querySelectorAll("[data-object-fit]");else if(t&&t.nodeName)t=[t];else{if("object"!=typeof t||!t.length||!t[0].nodeName)return!1;t=t}for(var i=0;i<t.length;i++)if(t[i].nodeName){var s=t[i].nodeName.toLowerCase();if("img"===s){if(e)continue;t[i].complete?n(t[i]):t[i].addEventListener("load",(function(){n(this)}))}else"video"===s?0<t[i].readyState?n(t[i]):t[i].addEventListener("loadedmetadata",(function(){n(this)})):n(t[i])}return!0};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",s):s(),window.addEventListener("resize",s),window.objectFitPolyfill=s}else window.objectFitPolyfill=function(){return!1}}}()},"eDl+":function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},eXwB:function(t,e){!function(t){"use strict";var e=function(i,n){this.options=t.extend({},e.DEFAULTS,n);var s=this.options.target===e.DEFAULTS.target?t(this.options.target):t(document).find(this.options.target);this.$target=s.on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(i),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};function i(i){return this.each((function(){var n=t(this),s=n.data("bs.affix"),o="object"==typeof i&&i;s||n.data("bs.affix",s=new e(this,o)),"string"==typeof i&&s[i]()}))}e.VERSION="3.4.1",e.RESET="affix affix-top affix-bottom",e.DEFAULTS={offset:0,target:window},e.prototype.getState=function(t,e,i,n){var s=this.$target.scrollTop(),o=this.$element.offset(),r=this.$target.height();if(null!=i&&"top"==this.affixed)return s<i&&"top";if("bottom"==this.affixed)return null!=i?!(s+this.unpin<=o.top)&&"bottom":!(s+r<=t-n)&&"bottom";var a=null==this.affixed,l=a?s:o.top;return null!=i&&s<=i?"top":null!=n&&l+(a?r:e)>=t-n&&"bottom"},e.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(e.RESET).addClass("affix");var t=this.$target.scrollTop(),i=this.$element.offset();return this.pinnedOffset=i.top-t},e.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},e.prototype.checkPosition=function(){if(this.$element.is(":visible")){var i=this.$element.height(),n=this.options.offset,s=n.top,o=n.bottom,r=Math.max(t(document).height(),t(document.body).height());"object"!=typeof n&&(o=s=n),"function"==typeof s&&(s=n.top(this.$element)),"function"==typeof o&&(o=n.bottom(this.$element));var a=this.getState(r,i,s,o);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),c=t.Event(l+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(e.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:r-i-o})}};var n=t.fn.affix;t.fn.affix=i,t.fn.affix.Constructor=e,t.fn.affix.noConflict=function(){return t.fn.affix=n,this},t(window).on("load",(function(){t('[data-spy="affix"]').each((function(){var e=t(this),n=e.data();n.offset=n.offset||{},null!=n.offsetBottom&&(n.offset.bottom=n.offsetBottom),null!=n.offsetTop&&(n.offset.top=n.offsetTop),i.call(e,n)}))}))}(jQuery)},ewvW:function(t,e,i){var n=i("HYAF");t.exports=function(t){return Object(n(t))}},f5p1:function(t,e,i){var n=i("2oRo"),s=i("iSVu"),o=n.WeakMap;t.exports="function"==typeof o&&/native code/.test(s(o))},fLsC:function(t,e,i){var n,s,o;s=[i("EVdn")],void 0===(o="function"==typeof(n=function(t){"use strict";var e=t(document),i=t(window),n=["a","e","i","o","u","n","c","y"],s=[/[\xE0-\xE5]/g,/[\xE8-\xEB]/g,/[\xEC-\xEF]/g,/[\xF2-\xF6]/g,/[\xF9-\xFC]/g,/[\xF1]/g,/[\xE7]/g,/[\xFD-\xFF]/g],o=function(e,i){this.element=e,this.$element=t(e),this.state={multiple:!!this.$element.attr("multiple"),enabled:!1,opened:!1,currValue:-1,selectedIdx:-1,highlightedIdx:-1},this.eventTriggers={open:this.open,close:this.close,destroy:this.destroy,refresh:this.refresh,init:this.init},this.init(i)};o.prototype={utils:{isMobile:function(){return/android|ip(hone|od|ad)/i.test(navigator.userAgent)},escapeRegExp:function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},replaceDiacritics:function(t){for(var e=s.length;e--;)t=t.toLowerCase().replace(s[e],n[e]);return t},format:function(t){var e=arguments;return(""+t).replace(/\{(?:(\d+)|(\w+))\}/g,(function(t,i,n){return n&&e[1]?e[1][n]:e[i]}))},nextEnabledItem:function(t,e){for(;t[e=(e+1)%t.length].disabled;);return e},previousEnabledItem:function(t,e){for(;t[e=(e>0?e:t.length)-1].disabled;);return e},toDash:function(t){return t.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()},triggerCallback:function(e,i){var n=i.element,s=i.options["on"+e],o=[n].concat([].slice.call(arguments).slice(1));t.isFunction(s)&&s.apply(n,o),t(n).trigger("selectric-"+this.toDash(e),o)},arrayToClassname:function(e){var i=t.grep(e,(function(t){return!!t}));return t.trim(i.join(" "))}},init:function(e){var i=this;if(i.options=t.extend(!0,{},t.fn.selectric.defaults,i.options,e),i.utils.triggerCallback("BeforeInit",i),i.destroy(!0),i.options.disableOnMobile&&i.utils.isMobile())i.disableOnMobile=!0;else{i.classes=i.getClassNames();var n=t("<input/>",{class:i.classes.input,readonly:i.utils.isMobile()}),s=t("<div/>",{class:i.classes.items,tabindex:-1}),o=t("<div/>",{class:i.classes.scroll}),r=t("<div/>",{class:i.classes.prefix,html:i.options.arrowButtonMarkup}),a=t("<span/>",{class:"label"}),l=i.$element.wrap("<div/>").parent().append(r.prepend(a),s,n),c=t("<div/>",{class:i.classes.hideselect});i.elements={input:n,items:s,itemsScroll:o,wrapper:r,label:a,outerWrapper:l},i.options.nativeOnMobile&&i.utils.isMobile()&&(i.elements.input=void 0,c.addClass(i.classes.prefix+"-is-native"),i.$element.on("change",(function(){i.refresh()}))),i.$element.on(i.eventTriggers).wrap(c),i.originalTabindex=i.$element.prop("tabindex"),i.$element.prop("tabindex",-1),i.populate(),i.activate(),i.utils.triggerCallback("Init",i)}},activate:function(){var t=this.elements.items.closest(":visible").children(":hidden").addClass(this.classes.tempshow),e=this.$element.width();t.removeClass(this.classes.tempshow),this.utils.triggerCallback("BeforeActivate",this),this.elements.outerWrapper.prop("class",this.utils.arrayToClassname([this.classes.wrapper,this.$element.prop("class").replace(/\S+/g,this.classes.prefix+"-$&"),this.options.responsive?this.classes.responsive:""])),this.options.inheritOriginalWidth&&e>0&&this.elements.outerWrapper.width(e),this.unbindEvents(),this.$element.prop("disabled")?(this.elements.outerWrapper.addClass(this.classes.disabled),this.elements.input&&this.elements.input.prop("disabled",!0)):(this.state.enabled=!0,this.elements.outerWrapper.removeClass(this.classes.disabled),this.$li=this.elements.items.removeAttr("style").find("li"),this.bindEvents()),this.utils.triggerCallback("Activate",this)},getClassNames:function(){var e=this,i=e.options.customClass,n={};return t.each("Input Items Open Disabled TempShow HideSelect Wrapper Focus Hover Responsive Above Below Scroll Group GroupLabel".split(" "),(function(t,s){var o=i.prefix+s;n[s.toLowerCase()]=i.camelCase?o:e.utils.toDash(o)})),n.prefix=i.prefix,n},setLabel:function(){var e=this,i=e.options.labelBuilder;if(e.state.multiple){var n=t.isArray(e.state.currValue)?e.state.currValue:[e.state.currValue];n=0===n.length?[0]:n;var s=t.map(n,(function(i){return t.grep(e.lookupItems,(function(t){return t.index===i}))[0]}));s=t.grep(s,(function(e){return s.length>1||0===s.length?""!==t.trim(e.value):e})),s=t.map(s,(function(n){return t.isFunction(i)?i(n):e.utils.format(i,n)})),e.options.multiple.maxLabelEntries&&(s.length>=e.options.multiple.maxLabelEntries+1?(s=s.slice(0,e.options.multiple.maxLabelEntries)).push(t.isFunction(i)?i({text:"..."}):e.utils.format(i,{text:"..."})):s.slice(s.length-1)),e.elements.label.html(s.join(e.options.multiple.separator))}else{var o=e.lookupItems[e.state.currValue];e.elements.label.html(t.isFunction(i)?i(o):e.utils.format(i,o))}},populate:function(){var e=this,i=e.$element.children(),n=e.$element.find("option"),s=n.filter(":selected"),o=n.index(s),r=0,a=e.state.multiple?[]:0;s.length>1&&e.state.multiple&&(o=[],s.each((function(){o.push(t(this).index())}))),e.state.currValue=~o?o:a,e.state.selectedIdx=e.state.currValue,e.state.highlightedIdx=e.state.currValue,e.items=[],e.lookupItems=[],i.length&&(i.each((function(i){var n=t(this);if(n.is("optgroup")){var s={element:n,label:n.prop("label"),groupDisabled:n.prop("disabled"),items:[]};n.children().each((function(i){var n=t(this);s.items[i]=e.getItemData(r,n,s.groupDisabled||n.prop("disabled")),e.lookupItems[r]=s.items[i],r++})),e.items[i]=s}else e.items[i]=e.getItemData(r,n,n.prop("disabled")),e.lookupItems[r]=e.items[i],r++})),e.setLabel(),e.elements.items.append(e.elements.itemsScroll.html(e.getItemsMarkup(e.items))))},getItemData:function(e,i,n){return{index:e,element:i,value:i.val(),className:i.prop("class"),text:i.html(),slug:t.trim(this.utils.replaceDiacritics(i.html())),alt:i.attr("data-alt"),selected:i.prop("selected"),disabled:n}},getItemsMarkup:function(e){var i=this,n="<ul>";return t.isFunction(i.options.listBuilder)&&i.options.listBuilder&&(e=i.options.listBuilder(e)),t.each(e,(function(e,s){void 0!==s.label?(n+=i.utils.format('<ul class="{1}"><li class="{2}">{3}</li>',i.utils.arrayToClassname([i.classes.group,s.groupDisabled?"disabled":"",s.element.prop("class")]),i.classes.grouplabel,s.element.prop("label")),t.each(s.items,(function(t,e){n+=i.getItemMarkup(e.index,e)})),n+="</ul>"):n+=i.getItemMarkup(s.index,s)})),n+"</ul>"},getItemMarkup:function(e,i){var n=this.options.optionsItemBuilder,s={value:i.value,text:i.text,slug:i.slug,index:i.index};return this.utils.format('<li data-index="{1}" class="{2}">{3}</li>',e,this.utils.arrayToClassname([i.className,e===this.items.length-1?"last":"",i.disabled?"disabled":"",i.selected?"selected":""]),t.isFunction(n)?this.utils.format(n(i,this.$element,e),i):this.utils.format(n,s))},unbindEvents:function(){this.elements.wrapper.add(this.$element).add(this.elements.outerWrapper).add(this.elements.input).off(".sl")},bindEvents:function(){var e=this;e.elements.outerWrapper.on("mouseenter.sl mouseleave.sl",(function(i){t(this).toggleClass(e.classes.hover,"mouseenter"===i.type),e.options.openOnHover&&(clearTimeout(e.closeTimer),"mouseleave"===i.type?e.closeTimer=setTimeout(t.proxy(e.close,e),e.options.hoverIntentTimeout):e.open())})),e.elements.wrapper.on("click.sl",(function(t){e.state.opened?e.close():e.open(t)})),e.options.nativeOnMobile&&e.utils.isMobile()||(e.$element.on("focus.sl",(function(){e.elements.input.focus()})),e.elements.input.prop({tabindex:e.originalTabindex,disabled:!1}).on("keydown.sl",t.proxy(e.handleKeys,e)).on("focusin.sl",(function(t){e.elements.outerWrapper.addClass(e.classes.focus),e.elements.input.one("blur",(function(){e.elements.input.blur()})),e.options.openOnFocus&&!e.state.opened&&e.open(t)})).on("focusout.sl",(function(){e.elements.outerWrapper.removeClass(e.classes.focus)})).on("input propertychange",(function(){var i=e.elements.input.val(),n=new RegExp("^"+e.utils.escapeRegExp(i),"i");clearTimeout(e.resetStr),e.resetStr=setTimeout((function(){e.elements.input.val("")}),e.options.keySearchTimeout),i.length&&t.each(e.items,(function(t,i){if(!i.disabled)if(n.test(i.text)||n.test(i.slug))e.highlight(t);else if(i.alt)for(var s=i.alt.split("|"),o=0;o<s.length&&s[o];o++)if(n.test(s[o].trim()))return void e.highlight(t)}))}))),e.$li.on({mousedown:function(t){t.preventDefault(),t.stopPropagation()},click:function(){return e.select(t(this).data("index")),!1}})},handleKeys:function(e){var i=e.which,n=this.options.keys,s=t.inArray(i,n.previous)>-1,o=t.inArray(i,n.next)>-1,r=t.inArray(i,n.select)>-1,a=t.inArray(i,n.open)>-1,l=this.state.highlightedIdx,c=s&&0===l||o&&l+1===this.items.length,u=0;if(13!==i&&32!==i||e.preventDefault(),s||o){if(!this.options.allowWrap&&c)return;s&&(u=this.utils.previousEnabledItem(this.lookupItems,l)),o&&(u=this.utils.nextEnabledItem(this.lookupItems,l)),this.highlight(u)}if(r&&this.state.opened)return this.select(l),void(this.state.multiple&&this.options.multiple.keepMenuOpen||this.close());a&&!this.state.opened&&this.open()},refresh:function(){this.populate(),this.activate(),this.utils.triggerCallback("Refresh",this)},setOptionsDimensions:function(){var t=this.elements.items.closest(":visible").children(":hidden").addClass(this.classes.tempshow),e=this.options.maxHeight,i=this.elements.items.outerWidth(),n=this.elements.wrapper.outerWidth()-(i-this.elements.items.width());!this.options.expandToItemText||n>i?this.finalWidth=n:(this.elements.items.css("overflow","scroll"),this.elements.outerWrapper.width(9e4),this.finalWidth=this.elements.items.width(),this.elements.items.css("overflow",""),this.elements.outerWrapper.width("")),this.elements.items.width(this.finalWidth).height()>e&&this.elements.items.height(e),t.removeClass(this.classes.tempshow)},isInViewport:function(){if(!0===this.options.forceRenderAbove)this.elements.outerWrapper.addClass(this.classes.above);else if(!0===this.options.forceRenderBelow)this.elements.outerWrapper.addClass(this.classes.below);else{var t=i.scrollTop(),e=i.height(),n=this.elements.outerWrapper.offset().top,s=n+this.elements.outerWrapper.outerHeight()+this.itemsHeight<=t+e,o=n-this.itemsHeight>t,r=!s&&o,a=!r;this.elements.outerWrapper.toggleClass(this.classes.above,r),this.elements.outerWrapper.toggleClass(this.classes.below,a)}},detectItemVisibility:function(e){var i=this.$li.filter("[data-index]");this.state.multiple&&(e=t.isArray(e)&&0===e.length?0:e,e=t.isArray(e)?Math.min.apply(Math,e):e);var n=i.eq(e).outerHeight(),s=i[e].offsetTop,o=this.elements.itemsScroll.scrollTop(),r=s+2*n;this.elements.itemsScroll.scrollTop(r>o+this.itemsHeight?r-this.itemsHeight:s-n<o?s-n:o)},open:function(i){var n=this;if(n.options.nativeOnMobile&&n.utils.isMobile())return!1;n.utils.triggerCallback("BeforeOpen",n),i&&(i.preventDefault(),n.options.stopPropagation&&i.stopPropagation()),n.state.enabled&&(n.setOptionsDimensions(),t("."+n.classes.hideselect,"."+n.classes.open).children().selectric("close"),n.state.opened=!0,n.itemsHeight=n.elements.items.outerHeight(),n.itemsInnerHeight=n.elements.items.height(),n.elements.outerWrapper.addClass(n.classes.open),n.elements.input.val(""),i&&"focusin"!==i.type&&n.elements.input.focus(),setTimeout((function(){e.on("click.sl",t.proxy(n.close,n)).on("scroll.sl",t.proxy(n.isInViewport,n))}),1),n.isInViewport(),n.options.preventWindowScroll&&e.on("mousewheel.sl DOMMouseScroll.sl","."+n.classes.scroll,(function(e){var i=e.originalEvent,s=t(this).scrollTop(),o=0;"detail"in i&&(o=-1*i.detail),"wheelDelta"in i&&(o=i.wheelDelta),"wheelDeltaY"in i&&(o=i.wheelDeltaY),"deltaY"in i&&(o=-1*i.deltaY),(s===this.scrollHeight-n.itemsInnerHeight&&o<0||0===s&&o>0)&&e.preventDefault()})),n.detectItemVisibility(n.state.selectedIdx),n.highlight(n.state.multiple?-1:n.state.selectedIdx),n.utils.triggerCallback("Open",n))},close:function(){this.utils.triggerCallback("BeforeClose",this),e.off(".sl"),this.elements.outerWrapper.removeClass(this.classes.open),this.state.opened=!1,this.utils.triggerCallback("Close",this)},change:function(){var e=this;e.utils.triggerCallback("BeforeChange",e),e.state.multiple?(t.each(e.lookupItems,(function(t){e.lookupItems[t].selected=!1,e.$element.find("option").prop("selected",!1)})),t.each(e.state.selectedIdx,(function(t,i){e.lookupItems[i].selected=!0,e.$element.find("option").eq(i).prop("selected",!0)})),e.state.currValue=e.state.selectedIdx,e.setLabel(),e.utils.triggerCallback("Change",e)):e.state.currValue!==e.state.selectedIdx&&(e.$element.prop("selectedIndex",e.state.currValue=e.state.selectedIdx).data("value",e.lookupItems[e.state.selectedIdx].text),e.setLabel(),e.utils.triggerCallback("Change",e))},highlight:function(t){var e=this.$li.filter("[data-index]").removeClass("highlighted");this.utils.triggerCallback("BeforeHighlight",this),void 0===t||-1===t||this.lookupItems[t].disabled||(e.eq(this.state.highlightedIdx=t).addClass("highlighted"),this.detectItemVisibility(t),this.utils.triggerCallback("Highlight",this))},select:function(e){var i=this,n=i.$li.filter("[data-index]");if(i.utils.triggerCallback("BeforeSelect",i,e),void 0!==e&&-1!==e&&!i.lookupItems[e].disabled){if(i.state.multiple){i.state.selectedIdx=t.isArray(i.state.selectedIdx)?i.state.selectedIdx:[i.state.selectedIdx];var s=t.inArray(e,i.state.selectedIdx);-1!==s?i.state.selectedIdx.splice(s,1):i.state.selectedIdx.push(e),n.removeClass("selected").filter((function(e){return-1!==t.inArray(e,i.state.selectedIdx)})).addClass("selected")}else n.removeClass("selected").eq(i.state.selectedIdx=e).addClass("selected");i.state.multiple&&i.options.multiple.keepMenuOpen||i.close(),i.change(),i.utils.triggerCallback("Select",i,e)}},destroy:function(t){this.state&&this.state.enabled&&(this.elements.items.add(this.elements.wrapper).add(this.elements.input).remove(),t||this.$element.removeData("selectric").removeData("value"),this.$element.prop("tabindex",this.originalTabindex).off(".sl").off(this.eventTriggers).unwrap().unwrap(),this.state.enabled=!1)}},t.fn.selectric=function(e){return this.each((function(){var i=t.data(this,"selectric");i&&!i.disableOnMobile?"string"==typeof e&&i[e]?i[e]():i.init(e):t.data(this,"selectric",new o(this,e))}))},t.fn.selectric.defaults={onChange:function(e){t(e).change()},maxHeight:300,keySearchTimeout:500,arrowButtonMarkup:'<b class="button">&#x25be;</b>',disableOnMobile:!1,nativeOnMobile:!0,openOnFocus:!0,openOnHover:!1,hoverIntentTimeout:500,expandToItemText:!1,responsive:!1,preventWindowScroll:!0,inheritOriginalWidth:!1,allowWrap:!0,forceRenderAbove:!1,forceRenderBelow:!1,stopPropagation:!0,optionsItemBuilder:"{text}",labelBuilder:"{text}",listBuilder:!1,keys:{previous:[37,38],next:[39,40],select:[9,13,27],open:[13,32,37,38,39,40],close:[9,27]},customClass:{prefix:"selectric",camelCase:!1},multiple:{separator:", ",keepMenuOpen:!0,maxLabelEntries:!1}}})?n.apply(e,s):n)||(t.exports=o)},fz2t:function(t,e){!function(t){var e=new Array,i=new Array,n=new Array,s=new Array,o={init:function(r,a){for(var l=t.extend({bind:"click",passwordElement:null,displayElement:null,passwordLength:16,uppercase:!0,lowercase:!0,numbers:!0,specialChars:!0,onPasswordGenerated:function(t){}},r),c=48;c<58;c++)e.push(c);for(c=65;c<91;c++)i.push(c);for(c=97;c<123;c++)n.push(c);return s=[33,35,64,36,38,42,91,93,123,125,92,47,63,58,59,95,45,53],this.each((function(){t(this).bind(l.bind,(function(t){t.preventDefault(),o.generatePassword(l)}))}))},generatePassword:function(o){var a=new Array,l=o.uppercase+o.lowercase+o.numbers+o.specialChars,c=0,u=new Array,d=Math.floor(o.passwordLength/l);if(o.uppercase){for(var p=0;p<d;p++)a.push(String.fromCharCode(i[r(0,i.length-1)]));u=u.concat(i),c++}if(o.numbers){for(p=0;p<d;p++)a.push(String.fromCharCode(e[r(0,e.length-1)]));u=u.concat(e),c++}if(o.specialChars){for(p=0;p<d;p++)a.push(String.fromCharCode(s[r(0,s.length-1)]));u=u.concat(s),c++}var h=o.passwordLength-c*d;if(o.lowercase)for(p=0;p<h;p++)a.push(String.fromCharCode(n[r(0,n.length-1)]));else for(p=0;p<h;p++)a.push(String.fromCharCode(u[r(0,u.length-1)]));a=function(t){for(var e,i,n=t.length;n;e=parseInt(Math.random()*n),i=t[--n],t[n]=t[e],t[e]=i);return t}(a),passwordString=a.join(""),null!==o.passwordElement&&t(o.passwordElement).val(passwordString),null!==o.displayElement&&(t(o.displayElement).is("input")?t(o.displayElement).val(passwordString):t(o.displayElement).text(passwordString)),o.onPasswordGenerated(passwordString)}};function r(t,e){return Math.floor(Math.random()*(e-t+1)+t)}t.fn.pGenerator=function(e){return o[e]?o[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void t.error("Method "+e+" does not exist on jQuery.pGenerator"):o.init.apply(this,arguments)}}(jQuery)},"g6v/":function(t,e,i){var n=i("0Dky");t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},gYfQ:function(t,e,i){(function(e){t.exports=function(t){var n=e.$||window.$||t||i("EVdn");n.attrFn=n.attrFn||{};var s=navigator.userAgent.toLowerCase(),o=s.indexOf("chrome")>-1&&(s.indexOf("windows")>-1||s.indexOf("macintosh")>-1||s.indexOf("linux")>-1)&&s.indexOf("mobile")<0&&s.indexOf("android")<0,r={tap_pixel_range:5,swipe_h_threshold:50,swipe_v_threshold:50,taphold_threshold:750,doubletap_int:500,touch_capable:"ontouchstart"in window&&!o,orientation_support:"orientation"in window&&"onorientationchange"in window,startevent:"ontouchstart"in window&&!o?"touchstart":"mousedown",endevent:"ontouchstart"in window&&!o?"touchend":"mouseup",moveevent:"ontouchstart"in window&&!o?"touchmove":"mousemove",tapevent:"ontouchstart"in window&&!o?"tap":"click",scrollevent:"ontouchstart"in window&&!o?"touchmove":"scroll",hold_timer:null,tap_timer:null};n.isTouchCapable=function(){return r.touch_capable},n.getStartEvent=function(){return r.startevent},n.getEndEvent=function(){return r.endevent},n.getMoveEvent=function(){return r.moveevent},n.getTapEvent=function(){return r.tapevent},n.getScrollEvent=function(){return r.scrollevent},n.each(["tapstart","tapend","tapmove","tap","tap2","tap3","tap4","singletap","doubletap","taphold","swipe","swipeup","swiperight","swipedown","swipeleft","swipeend","scrollstart","scrollend","orientationchange"],(function(t,e){n.fn[e]=function(t){return t?this.on(e,t):this.trigger(e)},n.attrFn[e]=!0})),n.event.special.tapstart={setup:function(){var t=this,e=n(t);e.on(r.startevent,(function i(n){if(e.data("callee",i),n.which&&1!==n.which)return!1;var s=n.originalEvent,o={position:{x:r.touch_capable?s.touches[0].screenX:n.screenX,y:r.touch_capable?s.touches[0].screenY:n.screenY},offset:{x:r.touch_capable?Math.round(s.changedTouches[0].pageX-(e.offset()?e.offset().left:0)):Math.round(n.pageX-(e.offset()?e.offset().left:0)),y:r.touch_capable?Math.round(s.changedTouches[0].pageY-(e.offset()?e.offset().top:0)):Math.round(n.pageY-(e.offset()?e.offset().top:0))},time:Date.now(),target:n.target};return x(t,"tapstart",n,o),!0}))},remove:function(){n(this).off(r.startevent,n(this).data.callee)}},n.event.special.tapmove={setup:function(){var t=this,e=n(t);e.on(r.moveevent,(function i(n){e.data("callee",i);var s=n.originalEvent,o={position:{x:r.touch_capable?s.touches[0].screenX:n.screenX,y:r.touch_capable?s.touches[0].screenY:n.screenY},offset:{x:r.touch_capable?Math.round(s.changedTouches[0].pageX-(e.offset()?e.offset().left:0)):Math.round(n.pageX-(e.offset()?e.offset().left:0)),y:r.touch_capable?Math.round(s.changedTouches[0].pageY-(e.offset()?e.offset().top:0)):Math.round(n.pageY-(e.offset()?e.offset().top:0))},time:Date.now(),target:n.target};return x(t,"tapmove",n,o),!0}))},remove:function(){n(this).off(r.moveevent,n(this).data.callee)}},n.event.special.tapend={setup:function(){var t=this,e=n(t);e.on(r.endevent,(function i(n){e.data("callee",i);var s=n.originalEvent,o={position:{x:r.touch_capable?s.changedTouches[0].screenX:n.screenX,y:r.touch_capable?s.changedTouches[0].screenY:n.screenY},offset:{x:r.touch_capable?Math.round(s.changedTouches[0].pageX-(e.offset()?e.offset().left:0)):Math.round(n.pageX-(e.offset()?e.offset().left:0)),y:r.touch_capable?Math.round(s.changedTouches[0].pageY-(e.offset()?e.offset().top:0)):Math.round(n.pageY-(e.offset()?e.offset().top:0))},time:Date.now(),target:n.target};return x(t,"tapend",n,o),!0}))},remove:function(){n(this).off(r.endevent,n(this).data.callee)}},n.event.special.taphold={setup:function(){var t,e=this,i=n(e),s={x:0,y:0},o=0,a=0;i.on(r.startevent,(function n(l){if(l.which&&1!==l.which)return!1;i.data("tapheld",!1),t=l.target;var c=l.originalEvent,u=Date.now(),d={x:r.touch_capable?c.touches[0].screenX:l.screenX,y:r.touch_capable?c.touches[0].screenY:l.screenY},p={x:r.touch_capable?c.touches[0].pageX-c.touches[0].target.offsetLeft:l.offsetX,y:r.touch_capable?c.touches[0].pageY-c.touches[0].target.offsetTop:l.offsetY};return s.x=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageX:l.pageX,s.y=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageY:l.pageY,o=s.x,a=s.y,r.hold_timer=window.setTimeout((function(){var h=s.x-o,f=s.y-a;if(l.target==t&&(s.x==o&&s.y==a||h>=-r.tap_pixel_range&&h<=r.tap_pixel_range&&f>=-r.tap_pixel_range&&f<=r.tap_pixel_range)){i.data("tapheld",!0);var m=Date.now(),g={x:r.touch_capable?c.touches[0].screenX:l.screenX,y:r.touch_capable?c.touches[0].screenY:l.screenY},v={x:r.touch_capable?Math.round(c.changedTouches[0].pageX-(i.offset()?i.offset().left:0)):Math.round(l.pageX-(i.offset()?i.offset().left:0)),y:r.touch_capable?Math.round(c.changedTouches[0].pageY-(i.offset()?i.offset().top:0)):Math.round(l.pageY-(i.offset()?i.offset().top:0))},y={startTime:u,endTime:m,startPosition:d,startOffset:p,endPosition:g,endOffset:v,duration:m-u,target:l.target};i.data("callee1",n),x(e,"taphold",l,y)}}),r.taphold_threshold),!0})).on(r.endevent,(function t(){i.data("callee2",t),i.data("tapheld",!1),window.clearTimeout(r.hold_timer)})).on(r.moveevent,(function t(e){i.data("callee3",t),o=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX,a=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY}))},remove:function(){n(this).off(r.startevent,n(this).data.callee1).off(r.endevent,n(this).data.callee2).off(r.moveevent,n(this).data.callee3)}},n.event.special.doubletap={setup:function(){var t,e,i,s=this,o=n(s),a=null,l=!1;o.on(r.startevent,(function e(n){return(!n.which||1===n.which)&&(o.data("doubletapped",!1),t=n.target,o.data("callee1",e),i=n.originalEvent,a||(a={position:{x:r.touch_capable?i.touches[0].screenX:n.screenX,y:r.touch_capable?i.touches[0].screenY:n.screenY},offset:{x:r.touch_capable?Math.round(i.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(n.pageX-(o.offset()?o.offset().left:0)),y:r.touch_capable?Math.round(i.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(n.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:n.target}),!0)})).on(r.endevent,(function n(c){var u=Date.now(),d=u-(o.data("lastTouch")||u+1);if(window.clearTimeout(e),o.data("callee2",n),d<r.doubletap_int&&c.target==t&&d>100){o.data("doubletapped",!0),window.clearTimeout(r.tap_timer);var p={position:{x:r.touch_capable?c.originalEvent.changedTouches[0].screenX:c.screenX,y:r.touch_capable?c.originalEvent.changedTouches[0].screenY:c.screenY},offset:{x:r.touch_capable?Math.round(i.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(c.pageX-(o.offset()?o.offset().left:0)),y:r.touch_capable?Math.round(i.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(c.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:c.target},h={firstTap:a,secondTap:p,interval:p.time-a.time};l||(x(s,"doubletap",c,h),a=null),l=!0,window.setTimeout((function(){l=!1}),r.doubletap_int)}else o.data("lastTouch",u),e=window.setTimeout((function(){a=null,window.clearTimeout(e)}),r.doubletap_int,[c]);o.data("lastTouch",u)}))},remove:function(){n(this).off(r.startevent,n(this).data.callee1).off(r.endevent,n(this).data.callee2)}},n.event.special.singletap={setup:function(){var t=this,e=n(t),i=null,s=null,o={x:0,y:0};e.on(r.startevent,(function t(n){return(!n.which||1===n.which)&&(s=Date.now(),i=n.target,e.data("callee1",t),o.x=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageX:n.pageX,o.y=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageY:n.pageY,!0)})).on(r.endevent,(function n(a){if(e.data("callee2",n),a.target==i){var l=a.originalEvent.changedTouches?a.originalEvent.changedTouches[0].pageX:a.pageX,c=a.originalEvent.changedTouches?a.originalEvent.changedTouches[0].pageY:a.pageY;r.tap_timer=window.setTimeout((function(){var i=o.x-l,n=o.y-c;if(!e.data("doubletapped")&&!e.data("tapheld")&&(o.x==l&&o.y==c||i>=-r.tap_pixel_range&&i<=r.tap_pixel_range&&n>=-r.tap_pixel_range&&n<=r.tap_pixel_range)){var u=a.originalEvent,d={position:{x:r.touch_capable?u.changedTouches[0].screenX:a.screenX,y:r.touch_capable?u.changedTouches[0].screenY:a.screenY},offset:{x:r.touch_capable?Math.round(u.changedTouches[0].pageX-(e.offset()?e.offset().left:0)):Math.round(a.pageX-(e.offset()?e.offset().left:0)),y:r.touch_capable?Math.round(u.changedTouches[0].pageY-(e.offset()?e.offset().top:0)):Math.round(a.pageY-(e.offset()?e.offset().top:0))},time:Date.now(),target:a.target};d.time-s<r.taphold_threshold&&x(t,"singletap",a,d)}}),r.doubletap_int)}}))},remove:function(){n(this).off(r.startevent,n(this).data.callee1).off(r.endevent,n(this).data.callee2)}},n.event.special.tap={setup:function(){var t,e,i=this,s=n(i),o=!1,a=null,l={x:0,y:0};s.on(r.startevent,(function i(n){return s.data("callee1",i),(!n.which||1===n.which)&&(o=!0,l.x=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageX:n.pageX,l.y=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageY:n.pageY,t=Date.now(),a=n.target,e=n.originalEvent.targetTouches?n.originalEvent.targetTouches:[n],!0)})).on(r.endevent,(function n(c){s.data("callee2",n);var u=c.originalEvent.targetTouches?c.originalEvent.changedTouches[0].pageX:c.pageX,d=c.originalEvent.targetTouches?c.originalEvent.changedTouches[0].pageY:c.pageY,p=l.x-u,h=l.y-d;if(a==c.target&&o&&Date.now()-t<r.taphold_threshold&&(l.x==u&&l.y==d||p>=-r.tap_pixel_range&&p<=r.tap_pixel_range&&h>=-r.tap_pixel_range&&h<=r.tap_pixel_range)){for(var f=c.originalEvent,m=[],g=0;g<e.length;g++){var v={position:{x:r.touch_capable?f.changedTouches[g].screenX:c.screenX,y:r.touch_capable?f.changedTouches[g].screenY:c.screenY},offset:{x:r.touch_capable?Math.round(f.changedTouches[g].pageX-(s.offset()?s.offset().left:0)):Math.round(c.pageX-(s.offset()?s.offset().left:0)),y:r.touch_capable?Math.round(f.changedTouches[g].pageY-(s.offset()?s.offset().top:0)):Math.round(c.pageY-(s.offset()?s.offset().top:0))},time:Date.now(),target:c.target};m.push(v)}x(i,"tap",c,m)}}))},remove:function(){n(this).off(r.startevent,n(this).data.callee1).off(r.endevent,n(this).data.callee2)}},n.event.special.swipe={setup:function(){var t,e=n(this),i=!1,s=!1,o={x:0,y:0},a={x:0,y:0};e.on(r.startevent,(function s(l){(e=n(l.currentTarget)).data("callee1",s),o.x=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageX:l.pageX,o.y=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageY:l.pageY,a.x=o.x,a.y=o.y,i=!0;var c=l.originalEvent;t={position:{x:r.touch_capable?c.touches[0].screenX:l.screenX,y:r.touch_capable?c.touches[0].screenY:l.screenY},offset:{x:r.touch_capable?Math.round(c.changedTouches[0].pageX-(e.offset()?e.offset().left:0)):Math.round(l.pageX-(e.offset()?e.offset().left:0)),y:r.touch_capable?Math.round(c.changedTouches[0].pageY-(e.offset()?e.offset().top:0)):Math.round(l.pageY-(e.offset()?e.offset().top:0))},time:Date.now(),target:l.target}})),e.on(r.moveevent,(function l(c){var u;(e=n(c.currentTarget)).data("callee2",l),a.x=c.originalEvent.targetTouches?c.originalEvent.targetTouches[0].pageX:c.pageX,a.y=c.originalEvent.targetTouches?c.originalEvent.targetTouches[0].pageY:c.pageY;var d=e.parent().data("xthreshold")?e.parent().data("xthreshold"):e.data("xthreshold"),p=e.parent().data("ythreshold")?e.parent().data("ythreshold"):e.data("ythreshold"),h=void 0!==d&&!1!==d&&parseInt(d)?parseInt(d):r.swipe_h_threshold,f=void 0!==p&&!1!==p&&parseInt(p)?parseInt(p):r.swipe_v_threshold;if(o.y>a.y&&o.y-a.y>f&&(u="swipeup"),o.x<a.x&&a.x-o.x>h&&(u="swiperight"),o.y<a.y&&a.y-o.y>f&&(u="swipedown"),o.x>a.x&&o.x-a.x>h&&(u="swipeleft"),null!=u&&i){o.x=0,o.y=0,a.x=0,a.y=0,i=!1;var m=c.originalEvent,g={position:{x:r.touch_capable?m.touches[0].screenX:c.screenX,y:r.touch_capable?m.touches[0].screenY:c.screenY},offset:{x:r.touch_capable?Math.round(m.changedTouches[0].pageX-(e.offset()?e.offset().left:0)):Math.round(c.pageX-(e.offset()?e.offset().left:0)),y:r.touch_capable?Math.round(m.changedTouches[0].pageY-(e.offset()?e.offset().top:0)):Math.round(c.pageY-(e.offset()?e.offset().top:0))},time:Date.now(),target:c.target},v=Math.abs(t.position.x-g.position.x),y=Math.abs(t.position.y-g.position.y),b={startEvnt:t,endEvnt:g,direction:u.replace("swipe",""),xAmount:v,yAmount:y,duration:g.time-t.time};s=!0,e.trigger("swipe",b).trigger(u,b)}})),e.on(r.endevent,(function o(a){var l="";if((e=n(a.currentTarget)).data("callee3",o),s){var c=e.data("xthreshold"),u=e.data("ythreshold"),d=void 0!==c&&!1!==c&&parseInt(c)?parseInt(c):r.swipe_h_threshold,p=void 0!==u&&!1!==u&&parseInt(u)?parseInt(u):r.swipe_v_threshold,h=a.originalEvent,f={position:{x:r.touch_capable?h.changedTouches[0].screenX:a.screenX,y:r.touch_capable?h.changedTouches[0].screenY:a.screenY},offset:{x:r.touch_capable?Math.round(h.changedTouches[0].pageX-(e.offset()?e.offset().left:0)):Math.round(a.pageX-(e.offset()?e.offset().left:0)),y:r.touch_capable?Math.round(h.changedTouches[0].pageY-(e.offset()?e.offset().top:0)):Math.round(a.pageY-(e.offset()?e.offset().top:0))},time:Date.now(),target:a.target};t.position.y>f.position.y&&t.position.y-f.position.y>p&&(l="swipeup"),t.position.x<f.position.x&&f.position.x-t.position.x>d&&(l="swiperight"),t.position.y<f.position.y&&f.position.y-t.position.y>p&&(l="swipedown"),t.position.x>f.position.x&&t.position.x-f.position.x>d&&(l="swipeleft");var m=Math.abs(t.position.x-f.position.x),g=Math.abs(t.position.y-f.position.y),v={startEvnt:t,endEvnt:f,direction:l.replace("swipe",""),xAmount:m,yAmount:g,duration:f.time-t.time};e.trigger("swipeend",v)}i=!1,s=!1}))},remove:function(){n(this).off(r.startevent,n(this).data.callee1).off(r.moveevent,n(this).data.callee2).off(r.endevent,n(this).data.callee3)}},n.event.special.scrollstart={setup:function(){var t,e,i=this,s=n(i);function o(e,n){x(i,(t=n)?"scrollstart":"scrollend",e)}s.on(r.scrollevent,(function i(n){s.data("callee",i),t||o(n,!0),clearTimeout(e),e=setTimeout((function(){o(n,!1)}),50)}))},remove:function(){n(this).off(r.scrollevent,n(this).data.callee)}};var a,l,c,u,d=n(window),p={0:!0,180:!0};if(r.orientation_support){var h=window.innerWidth||d.width(),f=window.innerHeight||d.height();c=h>f&&h-f>50,u=p[window.orientation],(c&&u||!c&&!u)&&(p={"-90":!0,90:!0})}function m(){var t=a();t!==l&&(l=t,d.trigger("orientationchange"))}n.event.special.orientationchange={setup:function(){return!r.orientation_support&&(l=a(),d.on("throttledresize",m),!0)},teardown:function(){return!r.orientation_support&&(d.off("throttledresize",m),!0)},add:function(t){var e=t.handler;t.handler=function(t){return t.orientation=a(),e.apply(this,arguments)}}},n.event.special.orientationchange.orientation=a=function(){var t=document.documentElement;return(r.orientation_support?p[window.orientation]:t&&t.clientWidth/t.clientHeight<1.1)?"portrait":"landscape"},n.event.special.throttledresize={setup:function(){n(this).on("resize",b)},teardown:function(){n(this).off("resize",b)}};var g,v,y,b=function(){v=Date.now(),(y=v-w)>=250?(w=v,n(this).trigger("throttledresize")):(g&&window.clearTimeout(g),g=window.setTimeout(m,250-y))},w=0;function x(t,e,i,s){var o=i.type;i.type=e,n.event.dispatch.call(t,i,s),i.type=o}n.each({scrollend:"scrollstart",swipeup:"swipe",swiperight:"swipe",swipedown:"swipe",swipeleft:"swipe",swipeend:"swipe",tap2:"tap"},(function(t,e){n.event.special[t]={setup:function(){n(this).on(e,n.noop)}}}))}}).call(this,i("yLpj"))},glrk:function(t,e,i){var n=i("hh1v");t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},hTDY:function(t,e){!function(t){"use strict";var e=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};function i(i){return this.each((function(){var n=t(this),s=n.data("bs.carousel"),o=t.extend({},e.DEFAULTS,n.data(),"object"==typeof i&&i),r="string"==typeof i?i:o.slide;s||n.data("bs.carousel",s=new e(this,o)),"number"==typeof i?s.to(i):r?s[r]():o.interval&&s.pause().cycle()}))}e.VERSION="3.4.1",e.TRANSITION_DURATION=600,e.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},e.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},e.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},e.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},e.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e);if(("prev"==t&&0===i||"next"==t&&i==this.$items.length-1)&&!this.options.wrap)return e;var n=(i+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(n)},e.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",(function(){e.to(t)})):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},e.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},e.prototype.next=function(){if(!this.sliding)return this.slide("next")},e.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},e.prototype.slide=function(i,n){var s=this.$element.find(".item.active"),o=n||this.getItemForDirection(i,s),r=this.interval,a="next"==i?"left":"right",l=this;if(o.hasClass("active"))return this.sliding=!1;var c=o[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:a});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,r&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var d=t(this.$indicators.children()[this.getItemIndex(o)]);d&&d.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:c,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(i),"object"==typeof o&&o.length&&o[0].offsetWidth,s.addClass(a),o.addClass(a),s.one("bsTransitionEnd",(function(){o.removeClass([i,a].join(" ")).addClass("active"),s.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout((function(){l.$element.trigger(p)}),0)})).emulateTransitionEnd(e.TRANSITION_DURATION)):(s.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(p)),r&&this.cycle(),this}};var n=t.fn.carousel;t.fn.carousel=i,t.fn.carousel.Constructor=e,t.fn.carousel.noConflict=function(){return t.fn.carousel=n,this};var s=function(e){var n=t(this),s=n.attr("href");s&&(s=s.replace(/.*(?=#[^\s]+$)/,""));var o=n.attr("data-target")||s,r=t(document).find(o);if(r.hasClass("carousel")){var a=t.extend({},r.data(),n.data()),l=n.attr("data-slide-to");l&&(a.interval=!1),i.call(r,a),l&&r.data("bs.carousel").to(l),e.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",s).on("click.bs.carousel.data-api","[data-slide-to]",s),t(window).on("load",(function(){t('[data-ride="carousel"]').each((function(){var e=t(this);i.call(e,e.data())}))}))}(jQuery)},hTGC:function(t,e){$(document).ready((function(){$((function(){$(".popup-js").magnificPopup({fixedContentPos:!0})})),$(".popup-js").click((function(){var t=$(this).attr("href");setTimeout((function(){$(t).find(".input-form")[0].focus()}),300)})),$(".appointment-btn-js").click((function(){var t=$(this).attr("data-subtitle");$("#appointment").find(".popup-sub-name").text(t),$("#appointment").find("input[name=appointment]").val(t)})),$(document).on("change",".select-appointment-specialist",(function(t){var e=$(".select-appointment-specialist option:selected").text();$("#appointment").find("input[name=specialist]").val(e)})),$(".specialist-btn-js").click((function(){var t=$(this).attr("data-subtitle");$("#specialist").find(".popup-sub-name").text(t),$("#specialist").find("input[name=appointment]").val(t)})),$(".question-btn-js").click((function(){var t=$(this).attr("data-subtitle");$("#question").find(".popup-sub-name").text(t),$("#question").find("input[name=appointment]").val(t)})),$(document).on("change",".select-question",(function(t){var e=$(".select-question option:selected").text();$("#question").find("input[name=appointment]").val(e)}))}))},hh1v:function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},i2Oj:function(t,e){$(document).ready((function(){$(".reviews-slider").slick({arrows:!1,fade:!0,asNavFor:$(".counter-slider"),responsive:[{breakpoint:1025,settings:{adaptiveHeight:!0}}]}),$(".counter-slider").slick({arrows:!1,dots:!0,fade:!0,asNavFor:$(".reviews-slider")})})),$(window).on("load resize",(function(){$(".special-actions-wrap.slider").length&&$(".special-actions-wrap.slider").each((function(){window.innerWidth<767?$(this).hasClass("slick-slider")||$(this).slick({arrows:!1,dots:!0,infinite:!0,slidesToShow:2,slidesToScroll:1,responsive:[{breakpoint:401,settings:{slidesToShow:1}}]}):$(this).hasClass("slick-slider")&&$(this).slick("destroy")})),$(".mobile-slider-js").length&&$(".mobile-slider-js").each((function(){window.innerWidth<401?$(this).hasClass("slick-slider")||$(this).slick({arrows:!0,infinite:!0,slidesToShow:1,slidesToScroll:1,prevArrow:'<div class="mobile-slider-arrow prev"></div>',nextArrow:'<div class="mobile-slider-arrow next"></div>'}):$(this).hasClass("slick-slider")&&$(this).slick("destroy")})),$(".mobile-diplom-slider-js").length&&$(".mobile-diplom-slider-js").each((function(){window.innerWidth<1025?($(".gallery-item").each((function(){$(this).hasClass("hide")&&$(this).removeClass("hide")})),$(this).hasClass("slick-slider")||$(this).slick({arrows:!0,infinite:!0,slidesToShow:3,slidesToScroll:3,prevArrow:'<div class="mobile-slider-arrow prev"></div>',nextArrow:'<div class="mobile-slider-arrow next"></div>',responsive:[{breakpoint:769,settings:{slidesToShow:2,slidesToScroll:2}},{breakpoint:401,settings:{slidesToShow:1,slidesToScroll:1}}]})):($(".gallery-item").each((function(){$(this).hasClass("visible")||$(this).addClass("hide")})),$(this).hasClass("slick-slider")&&$(this).slick("destroy"))}))}))},iSVu:function(t,e,i){var n=i("xs3f"),s=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return s.call(t)}),t.exports=n.inspectSource},iqWW:function(t,e,i){"use strict";var n=i("ZUd8").charAt;t.exports=function(t,e,i){return e+(i?n(t,e).length:1)}},kOOl:function(t,e){var i=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++i+n).toString(36)}},kRJp:function(t,e,i){var n=i("g6v/"),s=i("m/L8"),o=i("XGwC");t.exports=n?function(t,e,i){return s.f(t,e,o(1,i))}:function(t,e,i){return t[e]=i,t}},kmMV:function(t,e,i){"use strict";var n,s,o=i("rW0t"),r=i("n3/R"),a=RegExp.prototype.exec,l=String.prototype.replace,c=a,u=(n=/a/,s=/b*/g,a.call(n,"a"),a.call(s,"a"),0!==n.lastIndex||0!==s.lastIndex),d=r.UNSUPPORTED_Y||r.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(u||p||d)&&(c=function(t){var e,i,n,s,r=this,c=d&&r.sticky,h=o.call(r),f=r.source,m=0,g=t;return c&&(-1===(h=h.replace("y","")).indexOf("g")&&(h+="g"),g=String(t).slice(r.lastIndex),r.lastIndex>0&&(!r.multiline||r.multiline&&"\n"!==t[r.lastIndex-1])&&(f="(?: "+f+")",g=" "+g,m++),i=new RegExp("^(?:"+f+")",h)),p&&(i=new RegExp("^"+f+"$(?!\\s)",h)),u&&(e=r.lastIndex),n=a.call(c?i:r,g),c?n?(n.input=n.input.slice(m),n[0]=n[0].slice(m),n.index=r.lastIndex,r.lastIndex+=n[0].length):r.lastIndex=0:u&&n&&(r.lastIndex=r.global?n.index+n[0].length:e),p&&n&&n.length>1&&l.call(n[0],i,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(n[s]=void 0)})),n}),t.exports=c},lMq5:function(t,e,i){var n=i("0Dky"),s=/#|\.prototype\./,o=function(t,e){var i=a[r(t)];return i==c||i!=l&&("function"==typeof e?n(e):!!e)},r=o.normalize=function(t){return String(t).replace(s,".").toLowerCase()},a=o.data={},l=o.NATIVE="N",c=o.POLYFILL="P";t.exports=o},"m/L8":function(t,e,i){var n=i("g6v/"),s=i("DPsx"),o=i("glrk"),r=i("wE6v"),a=Object.defineProperty;e.f=n?a:function(t,e,i){if(o(t),e=r(e,!0),o(i),s)try{return a(t,e,i)}catch(t){}if("get"in i||"set"in i)throw TypeError("Accessors not supported");return"value"in i&&(t[e]=i.value),t}},"n3/R":function(t,e,i){"use strict";var n=i("0Dky");function s(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=n((function(){var t=s("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=n((function(){var t=s("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},omkw:function(t,e,i){var n,s,o;s=[i("EVdn")],void 0===(o="function"==typeof(n=function(t){var e,i,n,s,o,r,a="Close",l="BeforeClose",c="MarkupParse",u="Open",d="Change",p="mfp",h=".mfp",f="mfp-ready",m="mfp-removing",g="mfp-prevent-close",v=function(){},y=!!window.jQuery,b=t(window),w=function(t,i){e.ev.on(p+t+h,i)},x=function(e,i,n,s){var o=document.createElement("div");return o.className="mfp-"+e,n&&(o.innerHTML=n),s?i&&i.appendChild(o):(o=t(o),i&&o.appendTo(i)),o},k=function(i,n){e.ev.triggerHandler(p+i,n),e.st.callbacks&&(i=i.charAt(0).toLowerCase()+i.slice(1),e.st.callbacks[i]&&e.st.callbacks[i].apply(e,t.isArray(n)?n:[n]))},C=function(i){return i===r&&e.currTemplate.closeBtn||(e.currTemplate.closeBtn=t(e.st.closeMarkup.replace("%title%",e.st.tClose)),r=i),e.currTemplate.closeBtn},T=function(){t.magnificPopup.instance||((e=new v).init(),t.magnificPopup.instance=e)};v.prototype={constructor:v,init:function(){var i=navigator.appVersion;e.isLowIE=e.isIE8=document.all&&!document.addEventListener,e.isAndroid=/android/gi.test(i),e.isIOS=/iphone|ipad|ipod/gi.test(i),e.supportsTransition=function(){var t=document.createElement("p").style,e=["ms","O","Moz","Webkit"];if(void 0!==t.transition)return!0;for(;e.length;)if(e.pop()+"Transition"in t)return!0;return!1}(),e.probablyMobile=e.isAndroid||e.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),n=t(document),e.popupsCache={}},open:function(i){var s;if(!1===i.isObj){e.items=i.items.toArray(),e.index=0;var r,a=i.items;for(s=0;s<a.length;s++)if((r=a[s]).parsed&&(r=r.el[0]),r===i.el[0]){e.index=s;break}}else e.items=t.isArray(i.items)?i.items:[i.items],e.index=i.index||0;if(!e.isOpen){e.types=[],o="",i.mainEl&&i.mainEl.length?e.ev=i.mainEl.eq(0):e.ev=n,i.key?(e.popupsCache[i.key]||(e.popupsCache[i.key]={}),e.currTemplate=e.popupsCache[i.key]):e.currTemplate={},e.st=t.extend(!0,{},t.magnificPopup.defaults,i),e.fixedContentPos="auto"===e.st.fixedContentPos?!e.probablyMobile:e.st.fixedContentPos,e.st.modal&&(e.st.closeOnContentClick=!1,e.st.closeOnBgClick=!1,e.st.showCloseBtn=!1,e.st.enableEscapeKey=!1),e.bgOverlay||(e.bgOverlay=x("bg").on("click"+h,(function(){e.close()})),e.wrap=x("wrap").attr("tabindex",-1).on("click"+h,(function(t){e._checkIfClose(t.target)&&e.close()})),e.container=x("container",e.wrap)),e.contentContainer=x("content"),e.st.preloader&&(e.preloader=x("preloader",e.container,e.st.tLoading));var l=t.magnificPopup.modules;for(s=0;s<l.length;s++){var d=l[s];d=d.charAt(0).toUpperCase()+d.slice(1),e["init"+d].call(e)}k("BeforeOpen"),e.st.showCloseBtn&&(e.st.closeBtnInside?(w(c,(function(t,e,i,n){i.close_replaceWith=C(n.type)})),o+=" mfp-close-btn-in"):e.wrap.append(C())),e.st.alignTop&&(o+=" mfp-align-top"),e.fixedContentPos?e.wrap.css({overflow:e.st.overflowY,overflowX:"hidden",overflowY:e.st.overflowY}):e.wrap.css({top:b.scrollTop(),position:"absolute"}),(!1===e.st.fixedBgPos||"auto"===e.st.fixedBgPos&&!e.fixedContentPos)&&e.bgOverlay.css({height:n.height(),position:"absolute"}),e.st.enableEscapeKey&&n.on("keyup"+h,(function(t){27===t.keyCode&&e.close()})),b.on("resize"+h,(function(){e.updateSize()})),e.st.closeOnContentClick||(o+=" mfp-auto-cursor"),o&&e.wrap.addClass(o);var p=e.wH=b.height(),m={};if(e.fixedContentPos&&e._hasScrollBar(p)){var g=e._getScrollbarSize();g&&(m.marginRight=g)}e.fixedContentPos&&(e.isIE7?t("body, html").css("overflow","hidden"):m.overflow="hidden");var v=e.st.mainClass;return e.isIE7&&(v+=" mfp-ie7"),v&&e._addClassToMFP(v),e.updateItemHTML(),k("BuildControls"),t("html").css(m),e.bgOverlay.add(e.wrap).prependTo(e.st.prependTo||t(document.body)),e._lastFocusedEl=document.activeElement,setTimeout((function(){e.content?(e._addClassToMFP(f),e._setFocus()):e.bgOverlay.addClass(f),n.on("focusin"+h,e._onFocusIn)}),16),e.isOpen=!0,e.updateSize(p),k(u),i}e.updateItemHTML()},close:function(){e.isOpen&&(k(l),e.isOpen=!1,e.st.removalDelay&&!e.isLowIE&&e.supportsTransition?(e._addClassToMFP(m),setTimeout((function(){e._close()}),e.st.removalDelay)):e._close())},_close:function(){k(a);var i=m+" "+f+" ";if(e.bgOverlay.detach(),e.wrap.detach(),e.container.empty(),e.st.mainClass&&(i+=e.st.mainClass+" "),e._removeClassFromMFP(i),e.fixedContentPos){var s={marginRight:""};e.isIE7?t("body, html").css("overflow",""):s.overflow="",t("html").css(s)}n.off("keyup.mfp focusin"+h),e.ev.off(h),e.wrap.attr("class","mfp-wrap").removeAttr("style"),e.bgOverlay.attr("class","mfp-bg"),e.container.attr("class","mfp-container"),!e.st.showCloseBtn||e.st.closeBtnInside&&!0!==e.currTemplate[e.currItem.type]||e.currTemplate.closeBtn&&e.currTemplate.closeBtn.detach(),e.st.autoFocusLast&&e._lastFocusedEl&&t(e._lastFocusedEl).focus(),e.currItem=null,e.content=null,e.currTemplate=null,e.prevHeight=0,k("AfterClose")},updateSize:function(t){if(e.isIOS){var i=document.documentElement.clientWidth/window.innerWidth,n=window.innerHeight*i;e.wrap.css("height",n),e.wH=n}else e.wH=t||b.height();e.fixedContentPos||e.wrap.css("height",e.wH),k("Resize")},updateItemHTML:function(){var i=e.items[e.index];e.contentContainer.detach(),e.content&&e.content.detach(),i.parsed||(i=e.parseEl(e.index));var n=i.type;if(k("BeforeChange",[e.currItem?e.currItem.type:"",n]),e.currItem=i,!e.currTemplate[n]){var o=!!e.st[n]&&e.st[n].markup;k("FirstMarkupParse",o),e.currTemplate[n]=!o||t(o)}s&&s!==i.type&&e.container.removeClass("mfp-"+s+"-holder");var r=e["get"+n.charAt(0).toUpperCase()+n.slice(1)](i,e.currTemplate[n]);e.appendContent(r,n),i.preloaded=!0,k(d,i),s=i.type,e.container.prepend(e.contentContainer),k("AfterChange")},appendContent:function(t,i){e.content=t,t?e.st.showCloseBtn&&e.st.closeBtnInside&&!0===e.currTemplate[i]?e.content.find(".mfp-close").length||e.content.append(C()):e.content=t:e.content="",k("BeforeAppend"),e.container.addClass("mfp-"+i+"-holder"),e.contentContainer.append(e.content)},parseEl:function(i){var n,s=e.items[i];if(s.tagName?s={el:t(s)}:(n=s.type,s={data:s,src:s.src}),s.el){for(var o=e.types,r=0;r<o.length;r++)if(s.el.hasClass("mfp-"+o[r])){n=o[r];break}s.src=s.el.attr("data-mfp-src"),s.src||(s.src=s.el.attr("href"))}return s.type=n||e.st.type||"inline",s.index=i,s.parsed=!0,e.items[i]=s,k("ElementParse",s),e.items[i]},addGroup:function(t,i){var n=function(n){n.mfpEl=this,e._openClick(n,t,i)};i||(i={});var s="click.magnificPopup";i.mainEl=t,i.items?(i.isObj=!0,t.off(s).on(s,n)):(i.isObj=!1,i.delegate?t.off(s).on(s,i.delegate,n):(i.items=t,t.off(s).on(s,n)))},_openClick:function(i,n,s){if((void 0!==s.midClick?s.midClick:t.magnificPopup.defaults.midClick)||!(2===i.which||i.ctrlKey||i.metaKey||i.altKey||i.shiftKey)){var o=void 0!==s.disableOn?s.disableOn:t.magnificPopup.defaults.disableOn;if(o)if(t.isFunction(o)){if(!o.call(e))return!0}else if(b.width()<o)return!0;i.type&&(i.preventDefault(),e.isOpen&&i.stopPropagation()),s.el=t(i.mfpEl),s.delegate&&(s.items=n.find(s.delegate)),e.open(s)}},updateStatus:function(t,n){if(e.preloader){i!==t&&e.container.removeClass("mfp-s-"+i),n||"loading"!==t||(n=e.st.tLoading);var s={status:t,text:n};k("UpdateStatus",s),t=s.status,n=s.text,e.preloader.html(n),e.preloader.find("a").on("click",(function(t){t.stopImmediatePropagation()})),e.container.addClass("mfp-s-"+t),i=t}},_checkIfClose:function(i){if(!t(i).hasClass(g)){var n=e.st.closeOnContentClick,s=e.st.closeOnBgClick;if(n&&s)return!0;if(!e.content||t(i).hasClass("mfp-close")||e.preloader&&i===e.preloader[0])return!0;if(i===e.content[0]||t.contains(e.content[0],i)){if(n)return!0}else if(s&&t.contains(document,i))return!0;return!1}},_addClassToMFP:function(t){e.bgOverlay.addClass(t),e.wrap.addClass(t)},_removeClassFromMFP:function(t){this.bgOverlay.removeClass(t),e.wrap.removeClass(t)},_hasScrollBar:function(t){return(e.isIE7?n.height():document.body.scrollHeight)>(t||b.height())},_setFocus:function(){(e.st.focus?e.content.find(e.st.focus).eq(0):e.wrap).focus()},_onFocusIn:function(i){return i.target===e.wrap[0]||t.contains(e.wrap[0],i.target)?void 0:(e._setFocus(),!1)},_parseMarkup:function(e,i,n){var s;n.data&&(i=t.extend(n.data,i)),k(c,[e,i,n]),t.each(i,(function(i,n){if(void 0===n||!1===n)return!0;if((s=i.split("_")).length>1){var o=e.find(h+"-"+s[0]);if(o.length>0){var r=s[1];"replaceWith"===r?o[0]!==n[0]&&o.replaceWith(n):"img"===r?o.is("img")?o.attr("src",n):o.replaceWith(t("<img>").attr("src",n).attr("class",o.attr("class"))):o.attr(s[1],n)}}else e.find(h+"-"+i).html(n)}))},_getScrollbarSize:function(){if(void 0===e.scrollbarSize){var t=document.createElement("div");t.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(t),e.scrollbarSize=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return e.scrollbarSize}},t.magnificPopup={instance:null,proto:v.prototype,modules:[],open:function(e,i){return T(),(e=e?t.extend(!0,{},e):{}).isObj=!0,e.index=i||0,this.instance.open(e)},close:function(){return t.magnificPopup.instance&&t.magnificPopup.instance.close()},registerModule:function(e,i){i.options&&(t.magnificPopup.defaults[e]=i.options),t.extend(this.proto,i.proto),this.modules.push(e)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},t.fn.magnificPopup=function(i){T();var n=t(this);if("string"==typeof i)if("open"===i){var s,o=y?n.data("magnificPopup"):n[0].magnificPopup,r=parseInt(arguments[1],10)||0;o.items?s=o.items[r]:(s=n,o.delegate&&(s=s.find(o.delegate)),s=s.eq(r)),e._openClick({mfpEl:s},n,o)}else e.isOpen&&e[i].apply(e,Array.prototype.slice.call(arguments,1));else i=t.extend(!0,{},i),y?n.data("magnificPopup",i):n[0].magnificPopup=i,e.addGroup(n,i);return n};var S,$,E,D="inline",_=function(){E&&($.after(E.addClass(S)).detach(),E=null)};t.magnificPopup.registerModule(D,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){e.types.push(D),w(a+"."+D,(function(){_()}))},getInline:function(i,n){if(_(),i.src){var s=e.st.inline,o=t(i.src);if(o.length){var r=o[0].parentNode;r&&r.tagName&&($||(S=s.hiddenClass,$=x(S),S="mfp-"+S),E=o.after($).detach().removeClass(S)),e.updateStatus("ready")}else e.updateStatus("error",s.tNotFound),o=t("<div>");return i.inlineElement=o,o}return e.updateStatus("ready"),e._parseMarkup(n,{},i),n}}});var A,M="ajax",O=function(){A&&t(document.body).removeClass(A)},P=function(){O(),e.req&&e.req.abort()};t.magnificPopup.registerModule(M,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){e.types.push(M),A=e.st.ajax.cursor,w(a+"."+M,P),w("BeforeChange."+M,P)},getAjax:function(i){A&&t(document.body).addClass(A),e.updateStatus("loading");var n=t.extend({url:i.src,success:function(n,s,o){var r={data:n,xhr:o};k("ParseAjax",r),e.appendContent(t(r.data),M),i.finished=!0,O(),e._setFocus(),setTimeout((function(){e.wrap.addClass(f)}),16),e.updateStatus("ready"),k("AjaxContentAdded")},error:function(){O(),i.finished=i.loadError=!0,e.updateStatus("error",e.st.ajax.tError.replace("%url%",i.src))}},e.st.ajax.settings);return e.req=t.ajax(n),""}}});var j,L,I=function(i){if(i.data&&void 0!==i.data.title)return i.data.title;var n=e.st.image.titleSrc;if(n){if(t.isFunction(n))return n.call(e,i);if(i.el)return i.el.attr(n)||""}return""};t.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var i=e.st.image,n=".image";e.types.push("image"),w(u+n,(function(){"image"===e.currItem.type&&i.cursor&&t(document.body).addClass(i.cursor)})),w(a+n,(function(){i.cursor&&t(document.body).removeClass(i.cursor),b.off("resize"+h)})),w("Resize"+n,e.resizeImage),e.isLowIE&&w("AfterChange",e.resizeImage)},resizeImage:function(){var t=e.currItem;if(t&&t.img&&e.st.image.verticalFit){var i=0;e.isLowIE&&(i=parseInt(t.img.css("padding-top"),10)+parseInt(t.img.css("padding-bottom"),10)),t.img.css("max-height",e.wH-i)}},_onImageHasSize:function(t){t.img&&(t.hasSize=!0,j&&clearInterval(j),t.isCheckingImgSize=!1,k("ImageHasSize",t),t.imgHidden&&(e.content&&e.content.removeClass("mfp-loading"),t.imgHidden=!1))},findImageSize:function(t){var i=0,n=t.img[0],s=function(o){j&&clearInterval(j),j=setInterval((function(){return n.naturalWidth>0?void e._onImageHasSize(t):(i>200&&clearInterval(j),void(3==++i?s(10):40===i?s(50):100===i&&s(500)))}),o)};s(1)},getImage:function(i,n){var s=0,o=function(){i&&(i.img[0].complete?(i.img.off(".mfploader"),i===e.currItem&&(e._onImageHasSize(i),e.updateStatus("ready")),i.hasSize=!0,i.loaded=!0,k("ImageLoadComplete")):200>++s?setTimeout(o,100):r())},r=function(){i&&(i.img.off(".mfploader"),i===e.currItem&&(e._onImageHasSize(i),e.updateStatus("error",a.tError.replace("%url%",i.src))),i.hasSize=!0,i.loaded=!0,i.loadError=!0)},a=e.st.image,l=n.find(".mfp-img");if(l.length){var c=document.createElement("img");c.className="mfp-img",i.el&&i.el.find("img").length&&(c.alt=i.el.find("img").attr("alt")),i.img=t(c).on("load.mfploader",o).on("error.mfploader",r),c.src=i.src,l.is("img")&&(i.img=i.img.clone()),(c=i.img[0]).naturalWidth>0?i.hasSize=!0:c.width||(i.hasSize=!1)}return e._parseMarkup(n,{title:I(i),img_replaceWith:i.img},i),e.resizeImage(),i.hasSize?(j&&clearInterval(j),i.loadError?(n.addClass("mfp-loading"),e.updateStatus("error",a.tError.replace("%url%",i.src))):(n.removeClass("mfp-loading"),e.updateStatus("ready")),n):(e.updateStatus("loading"),i.loading=!0,i.hasSize||(i.imgHidden=!0,n.addClass("mfp-loading"),e.findImageSize(i)),n)}}}),t.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(t){return t.is("img")?t:t.find("img")}},proto:{initZoom:function(){var t,i=e.st.zoom,n=".zoom";if(i.enabled&&e.supportsTransition){var s,o,r=i.duration,c=function(t){var e=t.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),n="all "+i.duration/1e3+"s "+i.easing,s={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return s["-webkit-"+o]=s["-moz-"+o]=s["-o-"+o]=s[o]=n,e.css(s),e},u=function(){e.content.css("visibility","visible")};w("BuildControls"+n,(function(){if(e._allowZoom()){if(clearTimeout(s),e.content.css("visibility","hidden"),!(t=e._getItemToZoom()))return void u();(o=c(t)).css(e._getOffset()),e.wrap.append(o),s=setTimeout((function(){o.css(e._getOffset(!0)),s=setTimeout((function(){u(),setTimeout((function(){o.remove(),t=o=null,k("ZoomAnimationEnded")}),16)}),r)}),16)}})),w(l+n,(function(){if(e._allowZoom()){if(clearTimeout(s),e.st.removalDelay=r,!t){if(!(t=e._getItemToZoom()))return;o=c(t)}o.css(e._getOffset(!0)),e.wrap.append(o),e.content.css("visibility","hidden"),setTimeout((function(){o.css(e._getOffset())}),16)}})),w(a+n,(function(){e._allowZoom()&&(u(),o&&o.remove(),t=null)}))}},_allowZoom:function(){return"image"===e.currItem.type},_getItemToZoom:function(){return!!e.currItem.hasSize&&e.currItem.img},_getOffset:function(i){var n,s=(n=i?e.currItem.img:e.st.zoom.opener(e.currItem.el||e.currItem)).offset(),o=parseInt(n.css("padding-top"),10),r=parseInt(n.css("padding-bottom"),10);s.top-=t(window).scrollTop()-o;var a={width:n.width(),height:(y?n.innerHeight():n[0].offsetHeight)-r-o};return void 0===L&&(L=void 0!==document.createElement("p").style.MozTransform),L?a["-moz-transform"]=a.transform="translate("+s.left+"px,"+s.top+"px)":(a.left=s.left,a.top=s.top),a}}});var N="iframe",R=function(t){if(e.currTemplate[N]){var i=e.currTemplate[N].find("iframe");i.length&&(t||(i[0].src="//about:blank"),e.isIE8&&i.css("display",t?"block":"none"))}};t.magnificPopup.registerModule(N,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){e.types.push(N),w("BeforeChange",(function(t,e,i){e!==i&&(e===N?R():i===N&&R(!0))})),w(a+"."+N,(function(){R()}))},getIframe:function(i,n){var s=i.src,o=e.st.iframe;t.each(o.patterns,(function(){return s.indexOf(this.index)>-1?(this.id&&(s="string"==typeof this.id?s.substr(s.lastIndexOf(this.id)+this.id.length,s.length):this.id.call(this,s)),s=this.src.replace("%id%",s),!1):void 0}));var r={};return o.srcAction&&(r[o.srcAction]=s),e._parseMarkup(n,r,i),e.updateStatus("ready"),n}}});var H=function(t){var i=e.items.length;return t>i-1?t-i:0>t?i+t:t},F=function(t,e,i){return t.replace(/%curr%/gi,e+1).replace(/%total%/gi,i)};t.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var i=e.st.gallery,s=".mfp-gallery";return e.direction=!0,!(!i||!i.enabled)&&(o+=" mfp-gallery",w(u+s,(function(){i.navigateByImgClick&&e.wrap.on("click"+s,".mfp-img",(function(){return e.items.length>1?(e.next(),!1):void 0})),n.on("keydown"+s,(function(t){37===t.keyCode?e.prev():39===t.keyCode&&e.next()}))})),w("UpdateStatus"+s,(function(t,i){i.text&&(i.text=F(i.text,e.currItem.index,e.items.length))})),w(c+s,(function(t,n,s,o){var r=e.items.length;s.counter=r>1?F(i.tCounter,o.index,r):""})),w("BuildControls"+s,(function(){if(e.items.length>1&&i.arrows&&!e.arrowLeft){var n=i.arrowMarkup,s=e.arrowLeft=t(n.replace(/%title%/gi,i.tPrev).replace(/%dir%/gi,"left")).addClass(g),o=e.arrowRight=t(n.replace(/%title%/gi,i.tNext).replace(/%dir%/gi,"right")).addClass(g);s.click((function(){e.prev()})),o.click((function(){e.next()})),e.container.append(s.add(o))}})),w(d+s,(function(){e._preloadTimeout&&clearTimeout(e._preloadTimeout),e._preloadTimeout=setTimeout((function(){e.preloadNearbyImages(),e._preloadTimeout=null}),16)})),void w(a+s,(function(){n.off(s),e.wrap.off("click"+s),e.arrowRight=e.arrowLeft=null})))},next:function(){e.direction=!0,e.index=H(e.index+1),e.updateItemHTML()},prev:function(){e.direction=!1,e.index=H(e.index-1),e.updateItemHTML()},goTo:function(t){e.direction=t>=e.index,e.index=t,e.updateItemHTML()},preloadNearbyImages:function(){var t,i=e.st.gallery.preload,n=Math.min(i[0],e.items.length),s=Math.min(i[1],e.items.length);for(t=1;t<=(e.direction?s:n);t++)e._preloadItem(e.index+t);for(t=1;t<=(e.direction?n:s);t++)e._preloadItem(e.index-t)},_preloadItem:function(i){if(i=H(i),!e.items[i].preloaded){var n=e.items[i];n.parsed||(n=e.parseEl(i)),k("LazyLoad",n),"image"===n.type&&(n.img=t('<img class="mfp-img" />').on("load.mfploader",(function(){n.hasSize=!0})).on("error.mfploader",(function(){n.hasSize=!0,n.loadError=!0,k("LazyLoadError",n)})).attr("src",n.src)),n.preloaded=!0}}}});var z="retina";t.magnificPopup.registerModule(z,{options:{replaceSrc:function(t){return t.src.replace(/\.\w+$/,(function(t){return"@2x"+t}))},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var t=e.st.retina,i=t.ratio;(i=isNaN(i)?i():i)>1&&(w("ImageHasSize."+z,(function(t,e){e.img.css({"max-width":e.img[0].naturalWidth/i,width:"100%"})})),w("ElementParse."+z,(function(e,n){n.src=t.replaceSrc(n,i)})))}}}}),T()})?n.apply(e,s):n)||(t.exports=o)},pU5O:function(t,e,i){!function(e,i){"use strict";function n(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])}function s(t){return parseFloat(t)||0}function o(t){for(var e=0;t;)e+=t.offsetTop,t=t.offsetParent;return e}function r(){function t(){e.pageXOffset!=p.left?(p.top=e.pageYOffset,p.left=e.pageXOffset,m.refreshAll()):e.pageYOffset!=p.top&&(p.top=e.pageYOffset,p.left=e.pageXOffset,h.forEach((function(t){return t._recalcPosition()})))}function n(){s=setInterval((function(){h.forEach((function(t){return t._fastCheck()}))}),500)}if(!u){u=!0,t(),e.addEventListener("scroll",t),e.addEventListener("resize",m.refreshAll),e.addEventListener("orientationchange",m.refreshAll);var s=void 0,o=void 0,r=void 0;"hidden"in i?(o="hidden",r="visibilitychange"):"webkitHidden"in i&&(o="webkitHidden",r="webkitvisibilitychange"),r?(i[o]||n(),i.addEventListener(r,(function(){i[o]?clearInterval(s):n()}))):n()}}var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),l=!1,c=void 0!==e;c&&e.getComputedStyle?function(){var t=i.createElement("div");["","-webkit-","-moz-","-ms-"].some((function(e){try{t.style.position=e+"sticky"}catch(t){}return""!=t.style.position}))&&(l=!0)}():l=!0;var u=!1,d="undefined"!=typeof ShadowRoot,p={top:null,left:null},h=[],f=function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!(e instanceof HTMLElement))throw new Error("First argument must be HTMLElement");if(h.some((function(t){return t._node===e})))throw new Error("Stickyfill is already applied to this node");this._node=e,this._stickyMode=null,this._active=!1,h.push(this),this.refresh()}return a(t,[{key:"refresh",value:function(){if(!l&&!this._removed){this._active&&this._deactivate();var t=this._node,r=getComputedStyle(t),a={position:r.position,top:r.top,display:r.display,marginTop:r.marginTop,marginBottom:r.marginBottom,marginLeft:r.marginLeft,marginRight:r.marginRight,cssFloat:r.cssFloat};if(!isNaN(parseFloat(a.top))&&"table-cell"!=a.display&&"none"!=a.display){this._active=!0;var c=t.style.position;"sticky"!=r.position&&"-webkit-sticky"!=r.position||(t.style.position="static");var u=t.parentNode,p=d&&u instanceof ShadowRoot?u.host:u,h=t.getBoundingClientRect(),f=p.getBoundingClientRect(),m=getComputedStyle(p);this._parent={node:p,styles:{position:p.style.position},offsetHeight:p.offsetHeight},this._offsetToWindow={left:h.left,right:i.documentElement.clientWidth-h.right},this._offsetToParent={top:h.top-f.top-s(m.borderTopWidth),left:h.left-f.left-s(m.borderLeftWidth),right:-h.right+f.right-s(m.borderRightWidth)},this._styles={position:c,top:t.style.top,bottom:t.style.bottom,left:t.style.left,right:t.style.right,width:t.style.width,marginTop:t.style.marginTop,marginLeft:t.style.marginLeft,marginRight:t.style.marginRight};var g=s(a.top);this._limits={start:h.top+e.pageYOffset-g,end:f.top+e.pageYOffset+p.offsetHeight-s(m.borderBottomWidth)-t.offsetHeight-g-s(a.marginBottom)};var v=m.position;"absolute"!=v&&"relative"!=v&&(p.style.position="relative"),this._recalcPosition();var y=this._clone={};y.node=i.createElement("div"),n(y.node.style,{width:h.right-h.left+"px",height:h.bottom-h.top+"px",marginTop:a.marginTop,marginBottom:a.marginBottom,marginLeft:a.marginLeft,marginRight:a.marginRight,cssFloat:a.cssFloat,padding:0,border:0,borderSpacing:0,fontSize:"1em",position:"static"}),u.insertBefore(y.node,t),y.docOffsetTop=o(y.node)}}}},{key:"_recalcPosition",value:function(){if(this._active&&!this._removed){var t=p.top<=this._limits.start?"start":p.top>=this._limits.end?"end":"middle";if(this._stickyMode!=t){switch(t){case"start":n(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:this._offsetToParent.top+"px",bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"middle":n(this._node.style,{position:"fixed",left:this._offsetToWindow.left+"px",right:this._offsetToWindow.right+"px",top:this._styles.top,bottom:"auto",width:"auto",marginLeft:0,marginRight:0,marginTop:0});break;case"end":n(this._node.style,{position:"absolute",left:this._offsetToParent.left+"px",right:this._offsetToParent.right+"px",top:"auto",bottom:0,width:"auto",marginLeft:0,marginRight:0})}this._stickyMode=t}}}},{key:"_fastCheck",value:function(){this._active&&!this._removed&&(Math.abs(o(this._clone.node)-this._clone.docOffsetTop)>1||Math.abs(this._parent.node.offsetHeight-this._parent.offsetHeight)>1)&&this.refresh()}},{key:"_deactivate",value:function(){var t=this;this._active&&!this._removed&&(this._clone.node.parentNode.removeChild(this._clone.node),delete this._clone,n(this._node.style,this._styles),delete this._styles,h.some((function(e){return e!==t&&e._parent&&e._parent.node===t._parent.node}))||n(this._parent.node.style,this._parent.styles),delete this._parent,this._stickyMode=null,this._active=!1,delete this._offsetToWindow,delete this._offsetToParent,delete this._limits)}},{key:"remove",value:function(){var t=this;this._deactivate(),h.some((function(e,i){if(e._node===t._node)return h.splice(i,1),!0})),this._removed=!0}}]),t}(),m={stickies:h,Sticky:f,forceSticky:function(){l=!1,r(),this.refreshAll()},addOne:function(t){if(!(t instanceof HTMLElement)){if(!t.length||!t[0])return;t=t[0]}for(var e=0;e<h.length;e++)if(h[e]._node===t)return h[e];return new f(t)},add:function(t){if(t instanceof HTMLElement&&(t=[t]),t.length){for(var e=[],i=function(i){var n=t[i];return n instanceof HTMLElement?h.some((function(t){if(t._node===n)return e.push(t),!0}))?"continue":void e.push(new f(n)):(e.push(void 0),"continue")},n=0;n<t.length;n++)i(n);return e}},refreshAll:function(){h.forEach((function(t){return t.refresh()}))},removeOne:function(t){if(!(t instanceof HTMLElement)){if(!t.length||!t[0])return;t=t[0]}h.some((function(e){if(e._node===t)return e.remove(),!0}))},remove:function(t){if(t instanceof HTMLElement&&(t=[t]),t.length)for(var e=function(e){var i=t[e];h.some((function(t){if(t._node===i)return t.remove(),!0}))},i=0;i<t.length;i++)e(i)},removeAll:function(){for(;h.length;)h[0].remove()}};l||r(),t.exports?t.exports=m:c&&(e.Stickyfill=m)}(window,document)},pkCn:function(t,e,i){"use strict";var n=i("0Dky");t.exports=function(t,e){var i=[][t];return!!i&&n((function(){i.call(null,e||function(){throw 1},1)}))}},ppGB:function(t,e){var i=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:i)(t)}},pyCd:function(t,e){},rB9j:function(t,e,i){"use strict";var n=i("I+eb"),s=i("kmMV");n({target:"RegExp",proto:!0,forced:/./.exec!==s},{exec:s})},rIKr:function(t,e,i){var n,s,o;s=[i("EVdn")],void 0===(o="function"==typeof(n=function(t){t.extend(t.fn,{validate:function(e){if(this.length){var i=t.data(this[0],"validator");return i||(this.attr("novalidate","novalidate"),i=new t.validator(e,this[0]),t.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",(function(e){i.submitButton=e.currentTarget,t(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==t(this).attr("formnovalidate")&&(i.cancelSubmit=!0)})),this.on("submit.validate",(function(e){function n(){var n,s;return i.submitButton&&(i.settings.submitHandler||i.formSubmitted)&&(n=t("<input type='hidden'/>").attr("name",i.submitButton.name).val(t(i.submitButton).val()).appendTo(i.currentForm)),!(i.settings.submitHandler&&!i.settings.debug)||(s=i.settings.submitHandler.call(i,i.currentForm,e),n&&n.remove(),void 0!==s&&s)}return i.settings.debug&&e.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,n()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):n():(i.focusInvalid(),!1)}))),i)}e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var e,i,n;return t(this[0]).is("form")?e=this.validate().form():(n=[],e=!0,i=t(this[0].form).validate(),this.each((function(){(e=i.element(this)&&e)||(n=n.concat(i.errorList))})),i.errorList=n),e},rules:function(e,i){var n,s,o,r,a,l,c=this[0],u=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=c&&(!c.form&&u&&(c.form=this.closest("form")[0],c.name=this.attr("name")),null!=c.form)){if(e)switch(s=(n=t.data(c.form,"validator").settings).rules,o=t.validator.staticRules(c),e){case"add":t.extend(o,t.validator.normalizeRule(i)),delete o.messages,s[c.name]=o,i.messages&&(n.messages[c.name]=t.extend(n.messages[c.name],i.messages));break;case"remove":return i?(l={},t.each(i.split(/\s/),(function(t,e){l[e]=o[e],delete o[e]})),l):(delete s[c.name],o)}return(r=t.validator.normalizeRules(t.extend({},t.validator.classRules(c),t.validator.attributeRules(c),t.validator.dataRules(c),t.validator.staticRules(c)),c)).required&&(a=r.required,delete r.required,r=t.extend({required:a},r)),r.remote&&(a=r.remote,delete r.remote,r=t.extend(r,{remote:a})),r}}});var e,i=function(t){return t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")};t.extend(t.expr.pseudos||t.expr[":"],{blank:function(e){return!i(""+t(e).val())},filled:function(e){var n=t(e).val();return null!==n&&!!i(""+n)},unchecked:function(e){return!t(e).prop("checked")}}),t.validator=function(e,i){this.settings=t.extend(!0,{},t.validator.defaults,e),this.currentForm=i,this.init()},t.validator.format=function(e,i){return 1===arguments.length?function(){var i=t.makeArray(arguments);return i.unshift(e),t.validator.format.apply(this,i)}:(void 0===i||(arguments.length>2&&i.constructor!==Array&&(i=t.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),t.each(i,(function(t,i){e=e.replace(new RegExp("\\{"+t+"\\}","g"),(function(){return i}))}))),e)},t.extend(t.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:t([]),errorLabelContainer:t([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(t){this.lastActive=t,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,t,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(t)))},onfocusout:function(t){this.checkable(t)||!(t.name in this.submitted)&&this.optional(t)||this.element(t)},onkeyup:function(e,i){9===i.which&&""===this.elementValue(e)||-1!==t.inArray(i.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(e.name in this.submitted||e.name in this.invalid)&&this.element(e)},onclick:function(t){t.name in this.submitted?this.element(t):t.parentNode.name in this.submitted&&this.element(t.parentNode)},highlight:function(e,i,n){"radio"===e.type?this.findByName(e.name).addClass(i).removeClass(n):t(e).addClass(i).removeClass(n)},unhighlight:function(e,i,n){"radio"===e.type?this.findByName(e.name).removeClass(i).addClass(n):t(e).removeClass(i).addClass(n)}},setDefaults:function(e){t.extend(t.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:t.validator.format("Please enter no more than {0} characters."),minlength:t.validator.format("Please enter at least {0} characters."),rangelength:t.validator.format("Please enter a value between {0} and {1} characters long."),range:t.validator.format("Please enter a value between {0} and {1}."),max:t.validator.format("Please enter a value less than or equal to {0}."),min:t.validator.format("Please enter a value greater than or equal to {0}."),step:t.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){this.labelContainer=t(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||t(this.currentForm),this.containers=t(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var e,i=this.currentForm,n=this.groups={};function s(e){var n=void 0!==t(this).attr("contenteditable")&&"false"!==t(this).attr("contenteditable");if(!this.form&&n&&(this.form=t(this).closest("form")[0],this.name=t(this).attr("name")),i===this.form){var s=t.data(this.form,"validator"),o="on"+e.type.replace(/^validate/,""),r=s.settings;r[o]&&!t(this).is(r.ignore)&&r[o].call(s,this,e)}}t.each(this.settings.groups,(function(e,i){"string"==typeof i&&(i=i.split(/\s/)),t.each(i,(function(t,i){n[i]=e}))})),e=this.settings.rules,t.each(e,(function(i,n){e[i]=t.validator.normalizeRule(n)})),t(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",s).on("click.validate","select, option, [type='radio'], [type='checkbox']",s),this.settings.invalidHandler&&t(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),t.extend(this.submitted,this.errorMap),this.invalid=t.extend({},this.errorMap),this.valid()||t(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var t=0,e=this.currentElements=this.elements();e[t];t++)this.check(e[t]);return this.valid()},element:function(e){var i,n,s=this.clean(e),o=this.validationTargetFor(s),r=this,a=!0;return void 0===o?delete this.invalid[s.name]:(this.prepareElement(o),this.currentElements=t(o),(n=this.groups[o.name])&&t.each(this.groups,(function(t,e){e===n&&t!==o.name&&(s=r.validationTargetFor(r.clean(r.findByName(t))))&&s.name in r.invalid&&(r.currentElements.push(s),a=r.check(s)&&a)})),i=!1!==this.check(o),a=a&&i,this.invalid[o.name]=!i,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),t(e).attr("aria-invalid",!i)),a},showErrors:function(e){if(e){var i=this;t.extend(this.errorMap,e),this.errorList=t.map(this.errorMap,(function(t,e){return{message:t,element:i.findByName(e)[0]}})),this.successList=t.grep(this.successList,(function(t){return!(t.name in e)}))}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){t.fn.resetForm&&t(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var e=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(e)},resetElements:function(t){var e;if(this.settings.unhighlight)for(e=0;t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,""),this.findByName(t[e].name).removeClass(this.settings.validClass);else t.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(t){var e,i=0;for(e in t)void 0!==t[e]&&null!==t[e]&&!1!==t[e]&&i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(t){t.not(this.containers).text(""),this.addWrapper(t).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{t(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(t){}},findLastActive:function(){var e=this.lastActive;return e&&1===t.grep(this.errorList,(function(t){return t.element.name===e.name})).length&&e},elements:function(){var e=this,i={};return t(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter((function(){var n=this.name||t(this).attr("name"),s=void 0!==t(this).attr("contenteditable")&&"false"!==t(this).attr("contenteditable");return!n&&e.settings.debug&&window.console&&console.error("%o has no name assigned",this),s&&(this.form=t(this).closest("form")[0],this.name=n),!(this.form!==e.currentForm||n in i||!e.objectLength(t(this).rules())||(i[n]=!0,0))}))},clean:function(e){return t(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return t(this.settings.errorElement+"."+e,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=t([]),this.toHide=t([])},reset:function(){this.resetInternals(),this.currentElements=t([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(t){this.reset(),this.toHide=this.errorsFor(t)},elementValue:function(e){var i,n,s=t(e),o=e.type,r=void 0!==s.attr("contenteditable")&&"false"!==s.attr("contenteditable");return"radio"===o||"checkbox"===o?this.findByName(e.name).filter(":checked").val():"number"===o&&void 0!==e.validity?e.validity.badInput?"NaN":s.val():(i=r?s.text():s.val(),"file"===o?"C:\\fakepath\\"===i.substr(0,12)?i.substr(12):(n=i.lastIndexOf("/"))>=0||(n=i.lastIndexOf("\\"))>=0?i.substr(n+1):i:"string"==typeof i?i.replace(/\r/g,""):i)},check:function(e){e=this.validationTargetFor(this.clean(e));var i,n,s,o,r=t(e).rules(),a=t.map(r,(function(t,e){return e})).length,l=!1,c=this.elementValue(e);for(n in"function"==typeof r.normalizer?o=r.normalizer:"function"==typeof this.settings.normalizer&&(o=this.settings.normalizer),o&&(c=o.call(e,c),delete r.normalizer),r){s={method:n,parameters:r[n]};try{if("dependency-mismatch"===(i=t.validator.methods[n].call(this,c,e,s.parameters))&&1===a){l=!0;continue}if(l=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(e)));if(!i)return this.formatAndAdd(e,s),!1}catch(t){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+e.id+", check the '"+s.method+"' method.",t),t instanceof TypeError&&(t.message+=".  Exception occurred when checking element "+e.id+", check the '"+s.method+"' method."),t}}if(!l)return this.objectLength(r)&&this.successList.push(e),!0},customDataMessage:function(e,i){return t(e).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||t(e).data("msg")},customMessage:function(t,e){var i=this.settings.messages[t];return i&&(i.constructor===String?i:i[e])},findDefined:function(){for(var t=0;t<arguments.length;t++)if(void 0!==arguments[t])return arguments[t]},defaultMessage:function(e,i){"string"==typeof i&&(i={method:i});var n=this.findDefined(this.customMessage(e.name,i.method),this.customDataMessage(e,i.method),!this.settings.ignoreTitle&&e.title||void 0,t.validator.messages[i.method],"<strong>Warning: No message defined for "+e.name+"</strong>"),s=/\$?\{(\d+)\}/g;return"function"==typeof n?n=n.call(this,i.parameters,e):s.test(n)&&(n=t.validator.format(n.replace(s,"{$1}"),i.parameters)),n},formatAndAdd:function(t,e){var i=this.defaultMessage(t,e);this.errorList.push({message:i,element:t,method:e.method}),this.errorMap[t.name]=i,this.submitted[t.name]=i},addWrapper:function(t){return this.settings.wrapper&&(t=t.add(t.parent(this.settings.wrapper))),t},defaultShowErrors:function(){var t,e,i;for(t=0;this.errorList[t];t++)i=this.errorList[t],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(t=0;this.successList[t];t++)this.showLabel(this.successList[t]);if(this.settings.unhighlight)for(t=0,e=this.validElements();e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return t(this.errorList).map((function(){return this.element}))},showLabel:function(e,i){var n,s,o,r,a=this.errorsFor(e),l=this.idOrName(e),c=t(e).attr("aria-describedby");a.length?(a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),a.html(i)):(n=a=t("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(i||""),this.settings.wrapper&&(n=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(n):this.settings.errorPlacement?this.settings.errorPlacement.call(this,n,t(e)):n.insertAfter(e),a.is("label")?a.attr("for",l):0===a.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(o=a.attr("id"),c?c.match(new RegExp("\\b"+this.escapeCssMeta(o)+"\\b"))||(c+=" "+o):c=o,t(e).attr("aria-describedby",c),(s=this.groups[e.name])&&(r=this,t.each(r.groups,(function(e,i){i===s&&t("[name='"+r.escapeCssMeta(e)+"']",r.currentForm).attr("aria-describedby",a.attr("id"))}))))),!i&&this.settings.success&&(a.text(""),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,e)),this.toShow=this.toShow.add(a)},errorsFor:function(e){var i=this.escapeCssMeta(this.idOrName(e)),n=t(e).attr("aria-describedby"),s="label[for='"+i+"'], label[for='"+i+"'] *";return n&&(s=s+", #"+this.escapeCssMeta(n).replace(/\s+/g,", #")),this.errors().filter(s)},escapeCssMeta:function(t){return t.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(t){return this.groups[t.name]||(this.checkable(t)?t.name:t.id||t.name)},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),t(e).not(this.settings.ignore)[0]},checkable:function(t){return/radio|checkbox/i.test(t.type)},findByName:function(e){return t(this.currentForm).find("[name='"+this.escapeCssMeta(e)+"']")},getLength:function(e,i){switch(i.nodeName.toLowerCase()){case"select":return t("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return e.length},depend:function(t,e){return!this.dependTypes[typeof t]||this.dependTypes[typeof t](t,e)},dependTypes:{boolean:function(t){return t},string:function(e,i){return!!t(e,i.form).length},function:function(t,e){return t(e)}},optional:function(e){var i=this.elementValue(e);return!t.validator.methods.required.call(this,i,e)&&"dependency-mismatch"},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,t(e).addClass(this.settings.pendingClass),this.pending[e.name]=!0)},stopRequest:function(e,i){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],t(e).removeClass(this.settings.pendingClass),i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(t(this.currentForm).submit(),this.submitButton&&t("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(t(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e,i){return i="string"==typeof i&&i||"remote",t.data(e,"previousValue")||t.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,{method:i})})},destroy:function(){this.resetForm(),t(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,i){e.constructor===String?this.classRuleSettings[e]=i:t.extend(this.classRuleSettings,e)},classRules:function(e){var i={},n=t(e).attr("class");return n&&t.each(n.split(" "),(function(){this in t.validator.classRuleSettings&&t.extend(i,t.validator.classRuleSettings[this])})),i},normalizeAttributeRule:function(t,e,i,n){/min|max|step/.test(i)&&(null===e||/number|range|text/.test(e))&&(n=Number(n),isNaN(n)&&(n=void 0)),n||0===n?t[i]=n:e===i&&"range"!==e&&(t[i]=!0)},attributeRules:function(e){var i,n,s={},o=t(e),r=e.getAttribute("type");for(i in t.validator.methods)"required"===i?(""===(n=e.getAttribute(i))&&(n=!0),n=!!n):n=o.attr(i),this.normalizeAttributeRule(s,r,i,n);return s.maxlength&&/-1|2147483647|524288/.test(s.maxlength)&&delete s.maxlength,s},dataRules:function(e){var i,n,s={},o=t(e),r=e.getAttribute("type");for(i in t.validator.methods)""===(n=o.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()))&&(n=!0),this.normalizeAttributeRule(s,r,i,n);return s},staticRules:function(e){var i={},n=t.data(e.form,"validator");return n.settings.rules&&(i=t.validator.normalizeRule(n.settings.rules[e.name])||{}),i},normalizeRules:function(e,i){return t.each(e,(function(n,s){if(!1!==s){if(s.param||s.depends){var o=!0;switch(typeof s.depends){case"string":o=!!t(s.depends,i.form).length;break;case"function":o=s.depends.call(i,i)}o?e[n]=void 0===s.param||s.param:(t.data(i.form,"validator").resetElements(t(i)),delete e[n])}}else delete e[n]})),t.each(e,(function(n,s){e[n]=t.isFunction(s)&&"normalizer"!==n?s(i):s})),t.each(["minlength","maxlength"],(function(){e[this]&&(e[this]=Number(e[this]))})),t.each(["rangelength","range"],(function(){var i;e[this]&&(t.isArray(e[this])?e[this]=[Number(e[this][0]),Number(e[this][1])]:"string"==typeof e[this]&&(i=e[this].replace(/[\[\]]/g,"").split(/[\s,]+/),e[this]=[Number(i[0]),Number(i[1])]))})),t.validator.autoCreateRanges&&(null!=e.min&&null!=e.max&&(e.range=[e.min,e.max],delete e.min,delete e.max),null!=e.minlength&&null!=e.maxlength&&(e.rangelength=[e.minlength,e.maxlength],delete e.minlength,delete e.maxlength)),e},normalizeRule:function(e){if("string"==typeof e){var i={};t.each(e.split(/\s/),(function(){i[this]=!0})),e=i}return e},addMethod:function(e,i,n){t.validator.methods[e]=i,t.validator.messages[e]=void 0!==n?n:t.validator.messages[e],i.length<3&&t.validator.addClassRules(e,t.validator.normalizeRule(e))},methods:{required:function(e,i,n){if(!this.depend(n,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var s=t(i).val();return s&&s.length>0}return this.checkable(i)?this.getLength(e,i)>0:null!=e&&e.length>0},email:function(t,e){return this.optional(e)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(t)},url:function(t,e){return this.optional(e)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(t)},date:(e=!1,function(t,i){return e||(e=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(i)||!/Invalid|NaN/.test(new Date(t).toString())}),dateISO:function(t,e){return this.optional(e)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(t)},number:function(t,e){return this.optional(e)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)},digits:function(t,e){return this.optional(e)||/^\d+$/.test(t)},minlength:function(e,i,n){var s=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||s>=n},maxlength:function(e,i,n){var s=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||s<=n},rangelength:function(e,i,n){var s=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||s>=n[0]&&s<=n[1]},min:function(t,e,i){return this.optional(e)||t>=i},max:function(t,e,i){return this.optional(e)||t<=i},range:function(t,e,i){return this.optional(e)||t>=i[0]&&t<=i[1]},step:function(e,i,n){var s,o=t(i).attr("type"),r="Step attribute on input type "+o+" is not supported.",a=new RegExp("\\b"+o+"\\b"),l=function(t){var e=(""+t).match(/(?:\.(\d+))?$/);return e&&e[1]?e[1].length:0},c=function(t){return Math.round(t*Math.pow(10,s))},u=!0;if(o&&!a.test(["text","number","range"].join()))throw new Error(r);return s=l(n),(l(e)>s||c(e)%c(n)!=0)&&(u=!1),this.optional(i)||u},equalTo:function(e,i,n){var s=t(n);return this.settings.onfocusout&&s.not(".validate-equalTo-blur").length&&s.addClass("validate-equalTo-blur").on("blur.validate-equalTo",(function(){t(i).valid()})),e===s.val()},remote:function(e,i,n,s){if(this.optional(i))return"dependency-mismatch";s="string"==typeof s&&s||"remote";var o,r,a,l=this.previousValue(i,s);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[i.name][s],this.settings.messages[i.name][s]=l.message,n="string"==typeof n&&{url:n}||n,a=t.param(t.extend({data:e},n.data)),l.old===a?l.valid:(l.old=a,o=this,this.startRequest(i),(r={})[i.name]=e,t.ajax(t.extend(!0,{mode:"abort",port:"validate"+i.name,dataType:"json",data:r,context:o.currentForm,success:function(t){var n,r,a,c=!0===t||"true"===t;o.settings.messages[i.name][s]=l.originalMessage,c?(a=o.formSubmitted,o.resetInternals(),o.toHide=o.errorsFor(i),o.formSubmitted=a,o.successList.push(i),o.invalid[i.name]=!1,o.showErrors()):(n={},r=t||o.defaultMessage(i,{method:s,parameters:e}),n[i.name]=l.message=r,o.invalid[i.name]=!0,o.showErrors(n)),l.valid=c,o.stopRequest(i,c)}},n)),"pending")}}});var n,s={};return t.ajaxPrefilter?t.ajaxPrefilter((function(t,e,i){var n=t.port;"abort"===t.mode&&(s[n]&&s[n].abort(),s[n]=i)})):(n=t.ajax,t.ajax=function(e){var i=("mode"in e?e:t.ajaxSettings).mode,o=("port"in e?e:t.ajaxSettings).port;return"abort"===i?(s[o]&&s[o].abort(),s[o]=n.apply(this,arguments),s[o]):n.apply(this,arguments)}),t})?n.apply(e,s):n)||(t.exports=o)},rW0t:function(t,e,i){"use strict";var n=i("glrk");t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},rkAj:function(t,e,i){var n=i("g6v/"),s=i("0Dky"),o=i("UTVS"),r=Object.defineProperty,a={},l=function(t){throw t};t.exports=function(t,e){if(o(a,t))return a[t];e||(e={});var i=[][t],c=!!o(e,"ACCESSORS")&&e.ACCESSORS,u=o(e,0)?e[0]:l,d=o(e,1)?e[1]:void 0;return a[t]=!!i&&!s((function(){if(c&&!n)return!0;var t={length:-1};c?r(t,1,{enumerable:!0,get:l}):t[1]=1,i.call(t,u,d)}))}},"s+lh":function(t,e,i){!function(e,i){var n=function(t,e,i){"use strict";var n,s;if(function(){var e,i={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(e in s=t.lazySizesConfig||t.lazysizesConfig||{},i)e in s||(s[e]=i[e])}(),!e||!e.getElementsByClassName)return{init:function(){},cfg:s,noSupport:!0};var o=e.documentElement,r=t.HTMLPictureElement,a=t.addEventListener.bind(t),l=t.setTimeout,c=t.requestAnimationFrame||l,u=t.requestIdleCallback,d=/^picture$/i,p=["load","error","lazyincluded","_lazyloaded"],h={},f=Array.prototype.forEach,m=function(t,e){return h[e]||(h[e]=new RegExp("(\\s|^)"+e+"(\\s|$)")),h[e].test(t.getAttribute("class")||"")&&h[e]},g=function(t,e){m(t,e)||t.setAttribute("class",(t.getAttribute("class")||"").trim()+" "+e)},v=function(t,e){var i;(i=m(t,e))&&t.setAttribute("class",(t.getAttribute("class")||"").replace(i," "))},y=function(t,e,i){var n=i?"addEventListener":"removeEventListener";i&&y(t,e),p.forEach((function(i){t[n](i,e)}))},b=function(t,i,s,o,r){var a=e.createEvent("Event");return s||(s={}),s.instance=n,a.initEvent(i,!o,!r),a.detail=s,t.dispatchEvent(a),a},w=function(e,i){var n;!r&&(n=t.picturefill||s.pf)?(i&&i.src&&!e.getAttribute("srcset")&&e.setAttribute("srcset",i.src),n({reevaluate:!0,elements:[e]})):i&&i.src&&(e.src=i.src)},x=function(t,e){return(getComputedStyle(t,null)||{})[e]},k=function(t,e,i){for(i=i||t.offsetWidth;i<s.minSize&&e&&!t._lazysizesWidth;)i=e.offsetWidth,e=e.parentNode;return i},C=(ht=[],ft=[],mt=ht,gt=function(){var t=mt;for(mt=ht.length?ft:ht,dt=!0,pt=!1;t.length;)t.shift()();dt=!1},vt=function(t,i){dt&&!i?t.apply(this,arguments):(mt.push(t),pt||(pt=!0,(e.hidden?l:c)(gt)))},vt._lsFlush=gt,vt),T=function(t,e){return e?function(){C(t)}:function(){var e=this,i=arguments;C((function(){t.apply(e,i)}))}},S=function(t){var e,n,s=function(){e=null,t()},o=function(){var t=i.now()-n;t<99?l(o,99-t):(u||s)(s)};return function(){n=i.now(),e||(e=l(o,99))}},$=(U=/^img$/i,V=/^iframe$/i,Y="onscroll"in t&&!/(gle|ing)bot/.test(navigator.userAgent),X=0,G=0,K=-1,Q=function(t){G--,(!t||G<0||!t.target)&&(G=0)},J=function(t){return null==B&&(B="hidden"==x(e.body,"visibility")),B||!("hidden"==x(t.parentNode,"visibility")&&"hidden"==x(t,"visibility"))},Z=function(t,i){var n,s=t,r=J(t);for(F-=i,q+=i,z-=i,W+=i;r&&(s=s.offsetParent)&&s!=e.body&&s!=o;)(r=(x(s,"opacity")||1)>0)&&"visible"!=x(s,"overflow")&&(n=s.getBoundingClientRect(),r=W>n.left&&z<n.right&&q>n.top-1&&F<n.bottom+1);return r},tt=function(){var t,i,r,a,l,c,u,d,p,h,f,m,g=n.elements;if((I=s.loadMode)&&G<8&&(t=g.length)){for(i=0,K++;i<t;i++)if(g[i]&&!g[i]._lazyRace)if(!Y||n.prematureUnveil&&n.prematureUnveil(g[i]))at(g[i]);else if((d=g[i].getAttribute("data-expand"))&&(c=1*d)||(c=X),h||(h=!s.expand||s.expand<1?o.clientHeight>500&&o.clientWidth>500?500:370:s.expand,n._defEx=h,f=h*s.expFactor,m=s.hFac,B=null,X<f&&G<1&&K>2&&I>2&&!e.hidden?(X=f,K=0):X=I>1&&K>1&&G<6?h:0),p!==c&&(R=innerWidth+c*m,H=innerHeight+c,u=-1*c,p=c),r=g[i].getBoundingClientRect(),(q=r.bottom)>=u&&(F=r.top)<=H&&(W=r.right)>=u*m&&(z=r.left)<=R&&(q||W||z||F)&&(s.loadHidden||J(g[i]))&&(j&&G<3&&!d&&(I<3||K<4)||Z(g[i],c))){if(at(g[i]),l=!0,G>9)break}else!l&&j&&!a&&G<4&&K<4&&I>2&&(P[0]||s.preloadAfterLoad)&&(P[0]||!d&&(q||W||z||F||"auto"!=g[i].getAttribute(s.sizesAttr)))&&(a=P[0]||g[i]);a&&!l&&at(a)}},et=function(t){var e,n=0,o=s.throttleDelay,r=s.ricTimeout,a=function(){e=!1,n=i.now(),t()},c=u&&r>49?function(){u(a,{timeout:r}),r!==s.ricTimeout&&(r=s.ricTimeout)}:T((function(){l(a)}),!0);return function(t){var s;(t=!0===t)&&(r=33),e||(e=!0,(s=o-(i.now()-n))<0&&(s=0),t||s<9?c():l(c,s))}}(tt),it=function(t){var e=t.target;e._lazyCache?delete e._lazyCache:(Q(t),g(e,s.loadedClass),v(e,s.loadingClass),y(e,st),b(e,"lazyloaded"))},nt=T(it),st=function(t){nt({target:t.target})},ot=function(t){var e,i=t.getAttribute(s.srcsetAttr);(e=s.customMedia[t.getAttribute("data-media")||t.getAttribute("media")])&&t.setAttribute("media",e),i&&t.setAttribute("srcset",i)},rt=T((function(t,e,i,n,o){var r,a,c,u,p,h;(p=b(t,"lazybeforeunveil",e)).defaultPrevented||(n&&(i?g(t,s.autosizesClass):t.setAttribute("sizes",n)),a=t.getAttribute(s.srcsetAttr),r=t.getAttribute(s.srcAttr),o&&(u=(c=t.parentNode)&&d.test(c.nodeName||"")),h=e.firesLoad||"src"in t&&(a||r||u),p={target:t},g(t,s.loadingClass),h&&(clearTimeout(L),L=l(Q,2500),y(t,st,!0)),u&&f.call(c.getElementsByTagName("source"),ot),a?t.setAttribute("srcset",a):r&&!u&&(V.test(t.nodeName)?function(t,e){try{t.contentWindow.location.replace(e)}catch(i){t.src=e}}(t,r):t.src=r),o&&(a||u)&&w(t,{src:r})),t._lazyRace&&delete t._lazyRace,v(t,s.lazyClass),C((function(){var e=t.complete&&t.naturalWidth>1;h&&!e||(e&&g(t,"ls-is-cached"),it(p),t._lazyCache=!0,l((function(){"_lazyCache"in t&&delete t._lazyCache}),9)),"lazy"==t.loading&&G--}),!0)})),at=function(t){if(!t._lazyRace){var e,i=U.test(t.nodeName),n=i&&(t.getAttribute(s.sizesAttr)||t.getAttribute("sizes")),o="auto"==n;(!o&&j||!i||!t.getAttribute("src")&&!t.srcset||t.complete||m(t,s.errorClass)||!m(t,s.lazyClass))&&(e=b(t,"lazyunveilread").detail,o&&E.updateElem(t,!0,t.offsetWidth),t._lazyRace=!0,G++,rt(t,e,o,n,i))}},lt=S((function(){s.loadMode=3,et()})),ct=function(){3==s.loadMode&&(s.loadMode=2),lt()},ut=function(){j||(i.now()-N<999?l(ut,999):(j=!0,s.loadMode=3,et(),a("scroll",ct,!0)))},{_:function(){N=i.now(),n.elements=e.getElementsByClassName(s.lazyClass),P=e.getElementsByClassName(s.lazyClass+" "+s.preloadClass),a("scroll",et,!0),a("resize",et,!0),a("pageshow",(function(t){if(t.persisted){var i=e.querySelectorAll("."+s.loadingClass);i.length&&i.forEach&&c((function(){i.forEach((function(t){t.complete&&at(t)}))}))}})),t.MutationObserver?new MutationObserver(et).observe(o,{childList:!0,subtree:!0,attributes:!0}):(o.addEventListener("DOMNodeInserted",et,!0),o.addEventListener("DOMAttrModified",et,!0),setInterval(et,999)),a("hashchange",et,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach((function(t){e.addEventListener(t,et,!0)})),/d$|^c/.test(e.readyState)?ut():(a("load",ut),e.addEventListener("DOMContentLoaded",et),l(ut,2e4)),n.elements.length?(tt(),C._lsFlush()):et()},checkElems:et,unveil:at,_aLSL:ct}),E=(A=T((function(t,e,i,n){var s,o,r;if(t._lazysizesWidth=n,n+="px",t.setAttribute("sizes",n),d.test(e.nodeName||""))for(o=0,r=(s=e.getElementsByTagName("source")).length;o<r;o++)s[o].setAttribute("sizes",n);i.detail.dataAttr||w(t,i.detail)})),M=function(t,e,i){var n,s=t.parentNode;s&&(i=k(t,s,i),(n=b(t,"lazybeforesizes",{width:i,dataAttr:!!e})).defaultPrevented||(i=n.detail.width)&&i!==t._lazysizesWidth&&A(t,s,n,i))},O=S((function(){var t,e=_.length;if(e)for(t=0;t<e;t++)M(_[t])})),{_:function(){_=e.getElementsByClassName(s.autosizesClass),a("resize",O)},checkElems:O,updateElem:M}),D=function(){!D.i&&e.getElementsByClassName&&(D.i=!0,E._(),$._())};var _,A,M,O;var P,j,L,I,N,R,H,F,z,W,q,B,U,V,Y,X,G,K,Q,J,Z,tt,et,it,nt,st,ot,rt,at,lt,ct,ut;var dt,pt,ht,ft,mt,gt,vt;return l((function(){s.init&&D()})),n={cfg:s,autoSizer:E,loader:$,init:D,uP:w,aC:g,rC:v,hC:m,fire:b,gW:k,rAF:C}}(e,e.document,Date);e.lazySizes=n,t.exports&&(t.exports=n)}("undefined"!=typeof window?window:{})},sMBO:function(t,e,i){var n=i("g6v/"),s=i("m/L8").f,o=Function.prototype,r=o.toString,a=/^\s*function ([^ (]*)/;n&&!("name"in o)&&s(o,"name",{configurable:!0,get:function(){try{return r.call(this).match(a)[1]}catch(t){return""}}})},tiKp:function(t,e,i){var n=i("2oRo"),s=i("VpIT"),o=i("UTVS"),r=i("kOOl"),a=i("STAE"),l=i("/b8u"),c=s("wks"),u=n.Symbol,d=l?u:u&&u.withoutSetter||r;t.exports=function(t){return o(c,t)||(a&&o(u,t)?c[t]=u[t]:c[t]=d("Symbol."+t)),c[t]}},tycR:function(t,e,i){var n=i("A2ZE"),s=i("RK3t"),o=i("ewvW"),r=i("UMSQ"),a=i("ZfDv"),l=[].push,c=function(t){var e=1==t,i=2==t,c=3==t,u=4==t,d=6==t,p=5==t||d;return function(h,f,m,g){for(var v,y,b=o(h),w=s(b),x=n(f,m,3),k=r(w.length),C=0,T=g||a,S=e?T(h,k):i?T(h,0):void 0;k>C;C++)if((p||C in w)&&(y=x(v=w[C],C,b),t))if(e)S[C]=y;else if(y)switch(t){case 3:return!0;case 5:return v;case 6:return C;case 2:l.call(S,v)}else if(u)return!1;return d?-1:c||u?u:S}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},w1tE:function(t,e){!function(t){"use strict";var e='[data-dismiss="alert"]',i=function(i){t(i).on("click",e,this.close)};i.VERSION="3.4.1",i.TRANSITION_DURATION=150,i.prototype.close=function(e){var n=t(this),s=n.attr("data-target");s||(s=(s=n.attr("href"))&&s.replace(/.*(?=#[^\s]*$)/,"")),s="#"===s?[]:s;var o=t(document).find(s);function r(){o.detach().trigger("closed.bs.alert").remove()}e&&e.preventDefault(),o.length||(o=n.closest(".alert")),o.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",r).emulateTransitionEnd(i.TRANSITION_DURATION):r())};var n=t.fn.alert;t.fn.alert=function(e){return this.each((function(){var n=t(this),s=n.data("bs.alert");s||n.data("bs.alert",s=new i(this)),"string"==typeof e&&s[e].call(n)}))},t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",e,i.prototype.close)}(jQuery)},wE6v:function(t,e,i){var n=i("hh1v");t.exports=function(t,e){if(!n(t))return t;var i,s;if(e&&"function"==typeof(i=t.toString)&&!n(s=i.call(t)))return s;if("function"==typeof(i=t.valueOf)&&!n(s=i.call(t)))return s;if(!e&&"function"==typeof(i=t.toString)&&!n(s=i.call(t)))return s;throw TypeError("Can't convert object to primitive value")}},wlMK:function(t,e,i){var n,s,o,r;r=function(t){"use strict";function e(e){return!e||void 0!==e.allowPageScroll||void 0===e.swipe&&void 0===e.swipeStatus||(e.allowPageScroll=c),void 0!==e.click&&void 0===e.tap&&(e.tap=e.click),e||(e={}),e=t.extend({},t.fn.swipe.defaults,e),this.each((function(){var n=t(this),s=n.data(E);s||(s=new i(this,e),n.data(E,s))}))}function i(e,i){function D(e){if(!(!0===kt.data(E+"_intouch")||t(e.target).closest(i.excludedElements,kt).length>0)){var a=e.originalEvent?e.originalEvent:e;if(!a.pointerType||"mouse"!=a.pointerType||0!=i.fallbackToMouseEvents){var l,c=a.touches,u=c?c[0]:a;return Ct=w,c?Tt=c.length:!1!==i.preventDefaultEvents&&e.preventDefault(),pt=0,ht=null,ft=null,wt=null,mt=0,gt=0,vt=0,yt=1,bt=0,(d={})[n]=et(n),d[s]=et(s),d[o]=et(o),d[r]=et(r),xt=d,G(),J(0,u),!c||Tt===i.fingers||i.fingers===y||z()?($t=ot(),2==Tt&&(J(1,c[1]),gt=vt=nt(St[0].start,St[1].start)),(i.swipeStatus||i.pinchStatus)&&(l=L(a,Ct))):l=!1,!1===l?(L(a,Ct=C),l):(i.hold&&(Ot=setTimeout(t.proxy((function(){kt.trigger("hold",[a.target]),i.hold&&(l=i.hold.call(kt,a,a.target))}),this),i.longTapThreshold)),Q(!0),null)}}var d}function _(e){var d,p,h,f,m=e.originalEvent?e.originalEvent:e;if(Ct!==k&&Ct!==C&&!K()){var b,w=m.touches,T=Z(w?w[0]:m);if(Et=ot(),w&&(Tt=w.length),i.hold&&clearTimeout(Ot),Ct=x,2==Tt&&(0==gt?(J(1,w[1]),gt=vt=nt(St[0].start,St[1].start)):(Z(w[1]),vt=nt(St[0].end,St[1].end),St[0].end,St[1].end,wt=1>yt?l:a),yt=(vt/gt*1).toFixed(2),bt=Math.abs(gt-vt)),Tt===i.fingers||i.fingers===y||!w||z()){if(ht=st(T.start,T.end),function(t,e){if(!1!==i.preventDefaultEvents)if(i.allowPageScroll===c)t.preventDefault();else{var a=i.allowPageScroll===u;switch(e){case n:(i.swipeLeft&&a||!a&&i.allowPageScroll!=g)&&t.preventDefault();break;case s:(i.swipeRight&&a||!a&&i.allowPageScroll!=g)&&t.preventDefault();break;case o:(i.swipeUp&&a||!a&&i.allowPageScroll!=v)&&t.preventDefault();break;case r:(i.swipeDown&&a||!a&&i.allowPageScroll!=v)&&t.preventDefault()}}}(e,ft=st(T.last,T.end)),h=T.start,f=T.end,pt=Math.round(Math.sqrt(Math.pow(f.x-h.x,2)+Math.pow(f.y-h.y,2))),mt=it(),function(t,e){t!=c&&(e=Math.max(e,tt(t)),xt[t].distance=e)}(ht,pt),b=L(m,Ct),!i.triggerOnTouchEnd||i.triggerOnTouchLeave){var S=!0;if(i.triggerOnTouchLeave){var $={left:(p=(d=t(d=this)).offset()).left,right:p.left+d.outerWidth(),top:p.top,bottom:p.top+d.outerHeight()};S=function(t,e){return t.x>e.left&&t.x<e.right&&t.y>e.top&&t.y<e.bottom}(T.end,$)}!i.triggerOnTouchEnd&&S?Ct=j(x):i.triggerOnTouchLeave&&!S&&(Ct=j(k)),Ct!=C&&Ct!=k||L(m,Ct)}}else L(m,Ct=C);!1===b&&L(m,Ct=C)}}function A(t){var e=t.originalEvent?t.originalEvent:t,n=e.touches;if(n){if(n.length&&!K())return function(t){Dt=ot(),_t=t.touches.length+1}(e),!0;if(n.length&&K())return!0}return K()&&(Tt=_t),Et=ot(),mt=it(),R()||!N()?L(e,Ct=C):i.triggerOnTouchEnd||!1===i.triggerOnTouchEnd&&Ct===x?(!1!==i.preventDefaultEvents&&!1!==t.cancelable&&t.preventDefault(),L(e,Ct=k)):!i.triggerOnTouchEnd&&V()?I(e,Ct=k,h):Ct===x&&L(e,Ct=C),Q(!1),null}function M(){Tt=0,Et=0,$t=0,gt=0,vt=0,yt=1,G(),Q(!1)}function O(t){var e=t.originalEvent?t.originalEvent:t;i.triggerOnTouchLeave&&L(e,Ct=j(k))}function P(){kt.off(at,D),kt.off(dt,M),kt.off(lt,_),kt.off(ct,A),ut&&kt.off(ut,O),Q(!1)}function j(t){var e=t,n=H(),s=N(),o=R();return!n||o?e=C:!s||t!=x||i.triggerOnTouchEnd&&!i.triggerOnTouchLeave?!s&&t==k&&i.triggerOnTouchLeave&&(e=C):e=k,e}function L(t,e){var n,s=t.touches;return(!(!W()||!q())||q())&&(n=I(t,e,d)),(!(!F()||!z())||z())&&!1!==n&&(n=I(t,e,p)),X()&&Y()&&!1!==n?n=I(t,e,f):mt>i.longTapThreshold&&b>pt&&i.longTap&&!1!==n?n=I(t,e,m):!(1!==Tt&&T||!(isNaN(pt)||pt<i.threshold)||!V())&&!1!==n&&(n=I(t,e,h)),e===C&&M(),e===k&&(s&&s.length||M()),n}function I(e,c,u){var g;if(u==d){if(kt.trigger("swipeStatus",[c,ht||null,pt||0,mt||0,Tt,St,ft]),i.swipeStatus&&!1===(g=i.swipeStatus.call(kt,e,c,ht||null,pt||0,mt||0,Tt,St,ft)))return!1;if(c==k&&W()){if(clearTimeout(Mt),clearTimeout(Ot),kt.trigger("swipe",[ht,pt,mt,Tt,St,ft]),i.swipe&&!1===(g=i.swipe.call(kt,e,ht,pt,mt,Tt,St,ft)))return!1;switch(ht){case n:kt.trigger("swipeLeft",[ht,pt,mt,Tt,St,ft]),i.swipeLeft&&(g=i.swipeLeft.call(kt,e,ht,pt,mt,Tt,St,ft));break;case s:kt.trigger("swipeRight",[ht,pt,mt,Tt,St,ft]),i.swipeRight&&(g=i.swipeRight.call(kt,e,ht,pt,mt,Tt,St,ft));break;case o:kt.trigger("swipeUp",[ht,pt,mt,Tt,St,ft]),i.swipeUp&&(g=i.swipeUp.call(kt,e,ht,pt,mt,Tt,St,ft));break;case r:kt.trigger("swipeDown",[ht,pt,mt,Tt,St,ft]),i.swipeDown&&(g=i.swipeDown.call(kt,e,ht,pt,mt,Tt,St,ft))}}}if(u==p){if(kt.trigger("pinchStatus",[c,wt||null,bt||0,mt||0,Tt,yt,St]),i.pinchStatus&&!1===(g=i.pinchStatus.call(kt,e,c,wt||null,bt||0,mt||0,Tt,yt,St)))return!1;if(c==k&&F())switch(wt){case a:kt.trigger("pinchIn",[wt||null,bt||0,mt||0,Tt,yt,St]),i.pinchIn&&(g=i.pinchIn.call(kt,e,wt||null,bt||0,mt||0,Tt,yt,St));break;case l:kt.trigger("pinchOut",[wt||null,bt||0,mt||0,Tt,yt,St]),i.pinchOut&&(g=i.pinchOut.call(kt,e,wt||null,bt||0,mt||0,Tt,yt,St))}}return u==h?c!==C&&c!==k||(clearTimeout(Mt),clearTimeout(Ot),Y()&&!X()?(At=ot(),Mt=setTimeout(t.proxy((function(){At=null,kt.trigger("tap",[e.target]),i.tap&&(g=i.tap.call(kt,e,e.target))}),this),i.doubleTapThreshold)):(At=null,kt.trigger("tap",[e.target]),i.tap&&(g=i.tap.call(kt,e,e.target)))):u==f?c!==C&&c!==k||(clearTimeout(Mt),clearTimeout(Ot),At=null,kt.trigger("doubletap",[e.target]),i.doubleTap&&(g=i.doubleTap.call(kt,e,e.target))):u==m&&(c!==C&&c!==k||(clearTimeout(Mt),At=null,kt.trigger("longtap",[e.target]),i.longTap&&(g=i.longTap.call(kt,e,e.target)))),g}function N(){var t=!0;return null!==i.threshold&&(t=pt>=i.threshold),t}function R(){var t=!1;return null!==i.cancelThreshold&&null!==ht&&(t=tt(ht)-pt>=i.cancelThreshold),t}function H(){return!(i.maxTimeThreshold&&mt>=i.maxTimeThreshold)}function F(){var t=B(),e=U(),n=null===i.pinchThreshold||bt>=i.pinchThreshold;return t&&e&&n}function z(){return!!(i.pinchStatus||i.pinchIn||i.pinchOut)}function W(){var t=H(),e=N(),i=B(),n=U();return!R()&&n&&i&&e&&t}function q(){return!!(i.swipe||i.swipeStatus||i.swipeLeft||i.swipeRight||i.swipeUp||i.swipeDown)}function B(){return Tt===i.fingers||i.fingers===y||!T}function U(){return 0!==St[0].end.x}function V(){return!!i.tap}function Y(){return!!i.doubleTap}function X(){if(null==At)return!1;var t=ot();return Y()&&t-At<=i.doubleTapThreshold}function G(){Dt=0,_t=0}function K(){var t=!1;return Dt&&ot()-Dt<=i.fingerReleaseThreshold&&(t=!0),t}function Q(t){kt&&(!0===t?(kt.on(lt,_),kt.on(ct,A),ut&&kt.on(ut,O)):(kt.off(lt,_,!1),kt.off(ct,A,!1),ut&&kt.off(ut,O,!1)),kt.data(E+"_intouch",!0===t))}function J(t,e){var i={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return i.start.x=i.last.x=i.end.x=e.pageX||e.clientX,i.start.y=i.last.y=i.end.y=e.pageY||e.clientY,St[t]=i,i}function Z(t){var e=void 0!==t.identifier?t.identifier:0,i=function(t){return St[t]||null}(e);return null===i&&(i=J(e,t)),i.last.x=i.end.x,i.last.y=i.end.y,i.end.x=t.pageX||t.clientX,i.end.y=t.pageY||t.clientY,i}function tt(t){return xt[t]?xt[t].distance:void 0}function et(t){return{direction:t,distance:0}}function it(){return Et-$t}function nt(t,e){var i=Math.abs(t.x-e.x),n=Math.abs(t.y-e.y);return Math.round(Math.sqrt(i*i+n*n))}function st(t,e){if(a=e,(i=t).x==a.x&&i.y==a.y)return c;var i,a,l=function(t,e){var i=t.x-e.x,n=e.y-t.y,s=Math.atan2(n,i),o=Math.round(180*s/Math.PI);return 0>o&&(o=360-Math.abs(o)),o}(t,e);return 45>=l&&l>=0||360>=l&&l>=315?n:l>=135&&225>=l?s:l>45&&135>l?r:o}function ot(){return(new Date).getTime()}i=t.extend({},i);var rt=T||$||!i.fallbackToMouseEvents,at=rt?$?S?"MSPointerDown":"pointerdown":"touchstart":"mousedown",lt=rt?$?S?"MSPointerMove":"pointermove":"touchmove":"mousemove",ct=rt?$?S?"MSPointerUp":"pointerup":"touchend":"mouseup",ut=rt?$?"mouseleave":null:"mouseleave",dt=$?S?"MSPointerCancel":"pointercancel":"touchcancel",pt=0,ht=null,ft=null,mt=0,gt=0,vt=0,yt=1,bt=0,wt=0,xt=null,kt=t(e),Ct="start",Tt=0,St={},$t=0,Et=0,Dt=0,_t=0,At=0,Mt=null,Ot=null;try{kt.on(at,D),kt.on(dt,M)}catch(e){t.error("events not supported "+at+","+dt+" on jQuery.swipe")}this.enable=function(){return this.disable(),kt.on(at,D),kt.on(dt,M),kt},this.disable=function(){return P(),kt},this.destroy=function(){P(),kt.data(E,null),kt=null},this.option=function(e,n){if("object"==typeof e)i=t.extend(i,e);else if(void 0!==i[e]){if(void 0===n)return i[e];i[e]=n}else{if(!e)return i;t.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}var n="left",s="right",o="up",r="down",a="in",l="out",c="none",u="auto",d="swipe",p="pinch",h="tap",f="doubletap",m="longtap",g="horizontal",v="vertical",y="all",b=10,w="start",x="move",k="end",C="cancel",T="ontouchstart"in window,S=window.navigator.msPointerEnabled&&!window.PointerEvent&&!T,$=(window.PointerEvent||window.navigator.msPointerEnabled)&&!T,E="TouchSwipe";t.fn.swipe=function(i){var n=t(this),s=n.data(E);if(s&&"string"==typeof i){if(s[i])return s[i].apply(s,Array.prototype.slice.call(arguments,1));t.error("Method "+i+" does not exist on jQuery.swipe")}else if(s&&"object"==typeof i)s.option.apply(s,arguments);else if(!(s||"object"!=typeof i&&i))return e.apply(this,arguments);return n},t.fn.swipe.version="1.6.18",t.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},t.fn.swipe.phases={PHASE_START:w,PHASE_MOVE:x,PHASE_END:k,PHASE_CANCEL:C},t.fn.swipe.directions={LEFT:n,RIGHT:s,UP:o,DOWN:r,IN:a,OUT:l},t.fn.swipe.pageScroll={NONE:c,HORIZONTAL:g,VERTICAL:v,AUTO:u},t.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:y}},i("PDX0").jQuery?(s=[i("EVdn")],void 0===(o="function"==typeof(n=r)?n.apply(e,s):n)||(t.exports=o)):r(t.exports?i("EVdn"):jQuery)},xDBR:function(t,e){t.exports=!1},xHl5:function(t,e){!function(t){"use strict";var e=function(e,i){this.options=t.extend({},t.fn.editableform.defaults,i),this.$div=t(e),this.options.scope||(this.options.scope=this)};e.prototype={constructor:e,initInput:function(){this.input=this.options.input,this.value=this.input.str2value(this.options.value),this.input.prerender()},initTemplate:function(){this.$form=t(t.fn.editableform.template)},initButtons:function(){var e=this.$form.find(".editable-buttons");e.append(t.fn.editableform.buttons),"bottom"===this.options.showbuttons&&e.addClass("editable-buttons-bottom")},render:function(){this.$loading=t(t.fn.editableform.loading),this.$div.empty().append(this.$loading),this.initTemplate(),this.options.showbuttons?this.initButtons():this.$form.find(".editable-buttons").remove(),this.showLoading(),this.isSaving=!1,this.$div.triggerHandler("rendering"),this.initInput(),this.$form.find("div.editable-input").append(this.input.$tpl),this.$div.append(this.$form),t.when(this.input.render()).then(t.proxy((function(){if(this.options.showbuttons||this.input.autosubmit(),this.$form.find(".editable-cancel").click(t.proxy(this.cancel,this)),this.input.error)this.error(this.input.error),this.$form.find(".editable-submit").attr("disabled",!0),this.input.$input.attr("disabled",!0),this.$form.submit((function(t){t.preventDefault()}));else{this.error(!1),this.input.$input.removeAttr("disabled"),this.$form.find(".editable-submit").removeAttr("disabled");var e=null===this.value||void 0===this.value||""===this.value?this.options.defaultValue:this.value;this.input.value2input(e),this.$form.submit(t.proxy(this.submit,this))}this.$div.triggerHandler("rendered"),this.showForm(),this.input.postrender&&this.input.postrender()}),this))},cancel:function(){this.$div.triggerHandler("cancel")},showLoading:function(){var t,e;this.$form?(t=this.$form.outerWidth(),e=this.$form.outerHeight(),t&&this.$loading.width(t),e&&this.$loading.height(e),this.$form.hide()):(t=this.$loading.parent().width())&&this.$loading.width(t),this.$loading.show()},showForm:function(t){this.$loading.hide(),this.$form.show(),!1!==t&&this.input.activate(),this.$div.triggerHandler("show")},error:function(e){var i,n=this.$form.find(".control-group"),s=this.$form.find(".editable-error-block");if(!1===e)n.removeClass(t.fn.editableform.errorGroupClass),s.removeClass(t.fn.editableform.errorBlockClass).empty().hide();else{if(e){i=(""+e).split("\n");for(var o=0;o<i.length;o++)i[o]=t("<div>").text(i[o]).html();e=i.join("<br>")}n.addClass(t.fn.editableform.errorGroupClass),s.addClass(t.fn.editableform.errorBlockClass).html(e).show()}},submit:function(e){e.stopPropagation(),e.preventDefault();var i=this.input.input2value(),n=this.validate(i);if("object"===t.type(n)&&void 0!==n.newValue){if(i=n.newValue,this.input.value2input(i),"string"==typeof n.msg)return this.error(n.msg),void this.showForm()}else if(n)return this.error(n),void this.showForm();if(this.options.savenochange||this.input.value2str(i)!=this.input.value2str(this.value)){var s=this.input.value2submit(i);this.isSaving=!0,t.when(this.save(s)).done(t.proxy((function(t){this.isSaving=!1;var e="function"==typeof this.options.success?this.options.success.call(this.options.scope,t,i):null;return!1===e?(this.error(!1),void this.showForm(!1)):"string"==typeof e?(this.error(e),void this.showForm()):(e&&"object"==typeof e&&e.hasOwnProperty("newValue")&&(i=e.newValue),this.error(!1),this.value=i,void this.$div.triggerHandler("save",{newValue:i,submitValue:s,response:t}))}),this)).fail(t.proxy((function(t){var e;this.isSaving=!1,e="function"==typeof this.options.error?this.options.error.call(this.options.scope,t,i):"string"==typeof t?t:t.responseText||t.statusText||"Unknown error!",this.error(e),this.showForm()}),this))}else this.$div.triggerHandler("nochange")},save:function(e){this.options.pk=t.fn.editableutils.tryParseJson(this.options.pk,!0);var i,n="function"==typeof this.options.pk?this.options.pk.call(this.options.scope):this.options.pk;if(!!("function"==typeof this.options.url||this.options.url&&("always"===this.options.send||"auto"===this.options.send&&null!=n)))return this.showLoading(),i={name:this.options.name||"",value:e,pk:n},"function"==typeof this.options.params?i=this.options.params.call(this.options.scope,i):(this.options.params=t.fn.editableutils.tryParseJson(this.options.params,!0),t.extend(i,this.options.params)),"function"==typeof this.options.url?this.options.url.call(this.options.scope,i):t.ajax(t.extend({url:this.options.url,data:i,type:"POST"},this.options.ajaxOptions))},validate:function(t){if(void 0===t&&(t=this.value),"function"==typeof this.options.validate)return this.options.validate.call(this.options.scope,t)},option:function(t,e){t in this.options&&(this.options[t]=e),"value"===t&&this.setValue(e)},setValue:function(t,e){this.value=e?this.input.str2value(t):t,this.$form&&this.$form.is(":visible")&&this.input.value2input(this.value)}},t.fn.editableform=function(i){var n=arguments;return this.each((function(){var s=t(this),o=s.data("editableform"),r="object"==typeof i&&i;o||s.data("editableform",o=new e(this,r)),"string"==typeof i&&o[i].apply(o,Array.prototype.slice.call(n,1))}))},t.fn.editableform.Constructor=e,t.fn.editableform.defaults={type:"text",url:null,params:null,name:null,pk:null,value:null,defaultValue:null,send:"auto",validate:null,success:null,error:null,ajaxOptions:null,showbuttons:!0,scope:null,savenochange:!1},t.fn.editableform.template='<form class="form-inline editableform"><div class="control-group"><div><div class="editable-input"></div><div class="editable-buttons"></div></div><div class="editable-error-block"></div></div></form>',t.fn.editableform.loading='<div class="editableform-loading"></div>',t.fn.editableform.buttons='<button type="submit" class="editable-submit">ok</button><button type="button" class="editable-cancel">cancel</button>',t.fn.editableform.errorGroupClass=null,t.fn.editableform.errorBlockClass="editable-error",t.fn.editableform.engine="jquery"}(window.jQuery),function(t){"use strict";t.fn.editableutils={inherit:function(t,e){var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t,t.superclass=e.prototype},setCursorPosition:function(t,e){if(t.setSelectionRange)t.setSelectionRange(e,e);else if(t.createTextRange){var i=t.createTextRange();i.collapse(!0),i.moveEnd("character",e),i.moveStart("character",e),i.select()}},tryParseJson:function(t,e){if("string"==typeof t&&t.length&&t.match(/^[\{\[].*[\}\]]$/))if(e)try{t=new Function("return "+t)()}catch(t){}finally{return t}else t=new Function("return "+t)();return t},sliceObj:function(e,i,n){var s,o,r={};if(!t.isArray(i)||!i.length)return r;for(var a=0;a<i.length;a++)s=i[a],e.hasOwnProperty(s)&&(r[s]=e[s]),!0!==n&&(o=s.toLowerCase(),e.hasOwnProperty(o)&&(r[s]=e[o]));return r},getConfigData:function(e){var i={};return t.each(e.data(),(function(t,e){("object"!=typeof e||e&&"object"==typeof e&&(e.constructor===Object||e.constructor===Array))&&(i[t]=e)})),i},objectKeys:function(t){if(Object.keys)return Object.keys(t);if(t!==Object(t))throw new TypeError("Object.keys called on a non-object");var e,i=[];for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&i.push(e);return i},escape:function(e){return t("<div>").text(e).html()},itemsByValue:function(e,i,n){if(!i||null===e)return[];if("function"!=typeof n){var s=n||"value";n=function(t){return t[s]}}var o=t.isArray(e),r=[],a=this;return t.each(i,(function(i,s){if(s.children)r=r.concat(a.itemsByValue(e,s.children,n));else if(o)t.grep(e,(function(t){return t==(s&&"object"==typeof s?n(s):s)})).length&&r.push(s);else{var l=s&&"object"==typeof s?n(s):s;e==l&&r.push(s)}})),r},createInput:function(e){var i,n=e.type;return"date"===n&&("inline"===e.mode?t.fn.editabletypes.datefield?n="datefield":t.fn.editabletypes.dateuifield&&(n="dateuifield"):t.fn.editabletypes.date?n="date":t.fn.editabletypes.dateui&&(n="dateui"),"date"!==n||t.fn.editabletypes.date||(n="combodate")),"datetime"===n&&"inline"===e.mode&&(n="datetimefield"),"wysihtml5"!==n||t.fn.editabletypes[n]||(n="textarea"),"function"==typeof t.fn.editabletypes[n]?new(i=t.fn.editabletypes[n])(this.sliceObj(e,this.objectKeys(i.defaults))):(t.error("Unknown type: "+n),!1)},supportsTransitions:function(){var t=(document.body||document.documentElement).style,e="transition",i=["Moz","Webkit","Khtml","O","ms"];if("string"==typeof t[e])return!0;e=e.charAt(0).toUpperCase()+e.substr(1);for(var n=0;n<i.length;n++)if("string"==typeof t[i[n]+e])return!0;return!1}}}(window.jQuery),function(t){"use strict";var e=function(t,e){this.init(t,e)},i=function(t,e){this.init(t,e)};e.prototype={containerName:null,containerDataName:null,innerCss:null,containerClass:"editable-container editable-popup",defaults:{},init:function(i,n){this.$element=t(i),this.options=t.extend({},t.fn.editableContainer.defaults,n),this.splitOptions(),this.formOptions.scope=this.$element[0],this.initContainer(),this.delayedHide=!1,this.$element.on("destroyed",t.proxy((function(){this.destroy()}),this)),t(document).data("editable-handlers-attached")||(t(document).on("keyup.editable",(function(e){27===e.which&&t(".editable-open").editableContainer("hide")})),t(document).on("click.editable",(function(i){var n,s=t(i.target),o=[".editable-container",".ui-datepicker-header",".datepicker",".modal-backdrop",".bootstrap-wysihtml5-insert-image-modal",".bootstrap-wysihtml5-insert-link-modal"];if(t.contains(document.documentElement,i.target)&&!s.is(document)){for(n=0;n<o.length;n++)if(s.is(o[n])||s.parents(o[n]).length)return;e.prototype.closeOthers(i.target)}})),t(document).data("editable-handlers-attached",!0))},splitOptions:function(){if(this.containerOptions={},this.formOptions={},!t.fn[this.containerName])throw new Error(this.containerName+" not found. Have you included corresponding js file?");for(var e in this.options)e in this.defaults?this.containerOptions[e]=this.options[e]:this.formOptions[e]=this.options[e]},tip:function(){return this.container()?this.container().$tip:null},container:function(){var t;return this.containerDataName&&(t=this.$element.data(this.containerDataName))?t:t=this.$element.data(this.containerName)},call:function(){this.$element[this.containerName].apply(this.$element,arguments)},initContainer:function(){this.call(this.containerOptions)},renderForm:function(){this.$form.editableform(this.formOptions).on({save:t.proxy(this.save,this),nochange:t.proxy((function(){this.hide("nochange")}),this),cancel:t.proxy((function(){this.hide("cancel")}),this),show:t.proxy((function(){this.delayedHide?(this.hide(this.delayedHide.reason),this.delayedHide=!1):this.setPosition()}),this),rendering:t.proxy(this.setPosition,this),resize:t.proxy(this.setPosition,this),rendered:t.proxy((function(){this.$element.triggerHandler("shown",t(this.options.scope).data("editable"))}),this)}).editableform("render")},show:function(e){this.$element.addClass("editable-open"),!1!==e&&this.closeOthers(this.$element[0]),this.innerShow(),this.tip().addClass(this.containerClass),this.$form,this.$form=t("<div>"),this.tip().is(this.innerCss)?this.tip().append(this.$form):this.tip().find(this.innerCss).append(this.$form),this.renderForm()},hide:function(t){this.tip()&&this.tip().is(":visible")&&this.$element.hasClass("editable-open")&&(this.$form.data("editableform").isSaving?this.delayedHide={reason:t}:(this.delayedHide=!1,this.$element.removeClass("editable-open"),this.innerHide(),this.$element.triggerHandler("hidden",t||"manual")))},innerShow:function(){},innerHide:function(){},toggle:function(t){this.container()&&this.tip()&&this.tip().is(":visible")?this.hide():this.show(t)},setPosition:function(){},save:function(t,e){this.$element.triggerHandler("save",e),this.hide("save")},option:function(t,e){this.options[t]=e,t in this.containerOptions?(this.containerOptions[t]=e,this.setContainerOption(t,e)):(this.formOptions[t]=e,this.$form&&this.$form.editableform("option",t,e))},setContainerOption:function(t,e){this.call("option",t,e)},destroy:function(){this.hide(),this.innerDestroy(),this.$element.off("destroyed"),this.$element.removeData("editableContainer")},innerDestroy:function(){},closeOthers:function(e){t(".editable-open").each((function(i,n){if(n!==e&&!t(n).find(e).length){var s=t(n),o=s.data("editableContainer");o&&("cancel"===o.options.onblur?s.data("editableContainer").hide("onblur"):"submit"===o.options.onblur&&s.data("editableContainer").tip().find("form").submit())}}))},activate:function(){this.tip&&this.tip().is(":visible")&&this.$form&&this.$form.data("editableform").input.activate()}},t.fn.editableContainer=function(n){var s=arguments;return this.each((function(){var o=t(this),r=o.data("editableContainer"),a="object"==typeof n&&n,l="inline"===a.mode?i:e;r||o.data("editableContainer",r=new l(this,a)),"string"==typeof n&&r[n].apply(r,Array.prototype.slice.call(s,1))}))},t.fn.editableContainer.Popup=e,t.fn.editableContainer.Inline=i,t.fn.editableContainer.defaults={value:null,placement:"top",autohide:!0,onblur:"cancel",anim:!1,mode:"popup"},jQuery.event.special.destroyed={remove:function(t){t.handler&&t.handler()}}}(window.jQuery),function(t){"use strict";t.extend(t.fn.editableContainer.Inline.prototype,t.fn.editableContainer.Popup.prototype,{containerName:"editableform",innerCss:".editable-inline",containerClass:"editable-container editable-inline",initContainer:function(){this.$tip=t("<span></span>"),this.options.anim||(this.options.anim=0)},splitOptions:function(){this.containerOptions={},this.formOptions=this.options},tip:function(){return this.$tip},innerShow:function(){this.$element.hide(),this.tip().insertAfter(this.$element).show()},innerHide:function(){this.$tip.hide(this.options.anim,t.proxy((function(){this.$element.show(),this.innerDestroy()}),this))},innerDestroy:function(){this.tip()&&this.tip().empty().remove()}})}(window.jQuery),function(t){"use strict";var e=function(e,i){this.$element=t(e),this.options=t.extend({},t.fn.editable.defaults,i,t.fn.editableutils.getConfigData(this.$element)),this.options.selector?this.initLive():this.init(),this.options.highlight&&!t.fn.editableutils.supportsTransitions()&&(this.options.highlight=!1)};e.prototype={constructor:e,init:function(){var e,i=!1;if(this.options.name=this.options.name||this.$element.attr("id"),this.options.scope=this.$element[0],this.input=t.fn.editableutils.createInput(this.options),this.input){switch(void 0===this.options.value||null===this.options.value?(this.value=this.input.html2value(t.trim(this.$element.html())),i=!0):(this.options.value=t.fn.editableutils.tryParseJson(this.options.value,!0),"string"==typeof this.options.value?this.value=this.input.str2value(this.options.value):this.value=this.options.value),this.$element.addClass("editable"),"textarea"===this.input.type&&this.$element.addClass("editable-pre-wrapped"),"manual"!==this.options.toggle?(this.$element.addClass("editable-click"),this.$element.on(this.options.toggle+".editable",t.proxy((function(t){if(this.options.disabled||t.preventDefault(),"mouseenter"===this.options.toggle)this.show();else{var e="click"!==this.options.toggle;this.toggle(e)}}),this))):this.$element.attr("tabindex",-1),"function"==typeof this.options.display&&(this.options.autotext="always"),this.options.autotext){case"always":e=!0;break;case"auto":e=!t.trim(this.$element.text()).length&&null!==this.value&&void 0!==this.value&&!i;break;default:e=!1}t.when(!e||this.render()).then(t.proxy((function(){this.options.disabled?this.disable():this.enable(),this.$element.triggerHandler("init",this)}),this))}},initLive:function(){var e=this.options.selector;this.options.selector=!1,this.options.autotext="never",this.$element.on(this.options.toggle+".editable",e,t.proxy((function(e){var i=t(e.target);i.data("editable")||(i.hasClass(this.options.emptyclass)&&i.empty(),i.editable(this.options).trigger(e))}),this))},render:function(t){if(!1!==this.options.display)return this.input.value2htmlFinal?this.input.value2html(this.value,this.$element[0],this.options.display,t):"function"==typeof this.options.display?this.options.display.call(this.$element[0],this.value,t):this.input.value2html(this.value,this.$element[0])},enable:function(){this.options.disabled=!1,this.$element.removeClass("editable-disabled"),this.handleEmpty(this.isEmpty),"manual"!==this.options.toggle&&"-1"===this.$element.attr("tabindex")&&this.$element.removeAttr("tabindex")},disable:function(){this.options.disabled=!0,this.hide(),this.$element.addClass("editable-disabled"),this.handleEmpty(this.isEmpty),this.$element.attr("tabindex",-1)},toggleDisabled:function(){this.options.disabled?this.enable():this.disable()},option:function(e,i){if(e&&"object"==typeof e)t.each(e,t.proxy((function(e,i){this.option(t.trim(e),i)}),this));else{if(this.options[e]=i,"disabled"===e)return i?this.disable():this.enable();"value"===e&&this.setValue(i),this.container&&this.container.option(e,i),this.input.option&&this.input.option(e,i)}},handleEmpty:function(e){!1!==this.options.display&&(void 0!==e?this.isEmpty=e:"function"==typeof this.input.isEmpty?this.isEmpty=this.input.isEmpty(this.$element):this.isEmpty=""===t.trim(this.$element.html()),this.options.disabled?this.isEmpty&&(this.$element.empty(),this.options.emptyclass&&this.$element.removeClass(this.options.emptyclass)):this.isEmpty?(this.$element.html(this.options.emptytext),this.options.emptyclass&&this.$element.addClass(this.options.emptyclass)):this.options.emptyclass&&this.$element.removeClass(this.options.emptyclass))},show:function(e){if(!this.options.disabled){if(this.container){if(this.container.tip().is(":visible"))return}else{var i=t.extend({},this.options,{value:this.value,input:this.input});this.$element.editableContainer(i),this.$element.on("save.internal",t.proxy(this.save,this)),this.container=this.$element.data("editableContainer")}this.container.show(e)}},hide:function(){this.container&&this.container.hide()},toggle:function(t){this.container&&this.container.tip().is(":visible")?this.hide():this.show(t)},save:function(t,e){if(this.options.unsavedclass){var i=!1;(i=(i=(i=(i=i||"function"==typeof this.options.url)||!1===this.options.display)||void 0!==e.response)||this.options.savenochange&&this.input.value2str(this.value)!==this.input.value2str(e.newValue))?this.$element.removeClass(this.options.unsavedclass):this.$element.addClass(this.options.unsavedclass)}if(this.options.highlight){var n=this.$element,s=n.css("background-color");n.css("background-color",this.options.highlight),setTimeout((function(){"transparent"===s&&(s=""),n.css("background-color",s),n.addClass("editable-bg-transition"),setTimeout((function(){n.removeClass("editable-bg-transition")}),1700)}),10)}this.setValue(e.newValue,!1,e.response)},validate:function(){if("function"==typeof this.options.validate)return this.options.validate.call(this,this.value)},setValue:function(e,i,n){this.value=i?this.input.str2value(e):e,this.container&&this.container.option("value",this.value),t.when(this.render(n)).then(t.proxy((function(){this.handleEmpty()}),this))},activate:function(){this.container&&this.container.activate()},destroy:function(){this.disable(),this.container&&this.container.destroy(),this.input.destroy(),"manual"!==this.options.toggle&&(this.$element.removeClass("editable-click"),this.$element.off(this.options.toggle+".editable")),this.$element.off("save.internal"),this.$element.removeClass("editable editable-open editable-disabled"),this.$element.removeData("editable")}},t.fn.editable=function(i){var n={},s=arguments,o="editable";switch(i){case"validate":return this.each((function(){var e,i=t(this).data(o);i&&(e=i.validate())&&(n[i.options.name]=e)})),n;case"getValue":return 2===arguments.length&&!0===arguments[1]?n=this.eq(0).data(o).value:this.each((function(){var e=t(this).data(o);e&&void 0!==e.value&&null!==e.value&&(n[e.options.name]=e.input.value2submit(e.value))})),n;case"submit":var r=arguments[1]||{},a=this,l=this.editable("validate");if(t.isEmptyObject(l)){var c={};if(1===a.length){var u=a.data("editable"),d={name:u.options.name||"",value:u.input.value2submit(u.value),pk:"function"==typeof u.options.pk?u.options.pk.call(u.options.scope):u.options.pk};"function"==typeof u.options.params?d=u.options.params.call(u.options.scope,d):(u.options.params=t.fn.editableutils.tryParseJson(u.options.params,!0),t.extend(d,u.options.params)),c={url:u.options.url,data:d,type:"POST"},r.success=r.success||u.options.success,r.error=r.error||u.options.error}else{var p=this.editable("getValue");c={url:r.url,data:p,type:"POST"}}c.success="function"==typeof r.success?function(t){r.success.call(a,t,r)}:t.noop,c.error="function"==typeof r.error?function(){r.error.apply(a,arguments)}:t.noop,r.ajaxOptions&&t.extend(c,r.ajaxOptions),r.data&&t.extend(c.data,r.data),t.ajax(c)}else"function"==typeof r.error&&r.error.call(a,l);return this}return this.each((function(){var n=t(this),r=n.data(o),a="object"==typeof i&&i;a&&a.selector?r=new e(this,a):(r||n.data(o,r=new e(this,a)),"string"==typeof i&&r[i].apply(r,Array.prototype.slice.call(s,1)))}))},t.fn.editable.defaults={type:"text",disabled:!1,toggle:"click",emptytext:"Empty",autotext:"auto",value:null,display:null,emptyclass:"editable-empty",unsavedclass:"editable-unsaved",selector:null,highlight:"#FFFF80"}}(window.jQuery),function(t){"use strict";t.fn.editabletypes={};var e=function(){};e.prototype={init:function(e,i,n){this.type=e,this.options=t.extend({},n,i)},prerender:function(){this.$tpl=t(this.options.tpl),this.$input=this.$tpl,this.$clear=null,this.error=null},render:function(){},value2html:function(e,i){t(i)[this.options.escape?"text":"html"](t.trim(e))},html2value:function(e){return t("<div>").html(e).text()},value2str:function(t){return t},str2value:function(t){return t},value2submit:function(t){return t},value2input:function(t){this.$input.val(t)},input2value:function(){return this.$input.val()},activate:function(){this.$input.is(":visible")&&this.$input.focus()},clear:function(){this.$input.val(null)},escape:function(e){return t("<div>").text(e).html()},autosubmit:function(){},destroy:function(){},setClass:function(){this.options.inputclass&&this.$input.addClass(this.options.inputclass)},setAttr:function(t){void 0!==this.options[t]&&null!==this.options[t]&&this.$input.attr(t,this.options[t])},option:function(t,e){this.options[t]=e}},e.defaults={tpl:"",inputclass:null,escape:!0,scope:null,showbuttons:!0},t.extend(t.fn.editabletypes,{abstractinput:e})}(window.jQuery),function(t){"use strict";var e=function(t){};t.fn.editableutils.inherit(e,t.fn.editabletypes.abstractinput),t.extend(e.prototype,{render:function(){var e=t.Deferred();return this.error=null,this.onSourceReady((function(){this.renderList(),e.resolve()}),(function(){this.error=this.options.sourceError,e.resolve()})),e.promise()},html2value:function(t){return null},value2html:function(e,i,n,s){var o=t.Deferred(),r=function(){"function"==typeof n?n.call(i,e,this.sourceData,s):this.value2htmlFinal(e,i),o.resolve()};return null===e?r.call(this):this.onSourceReady(r,(function(){o.resolve()})),o.promise()},onSourceReady:function(e,i){var n;if(t.isFunction(this.options.source)?(n=this.options.source.call(this.options.scope),this.sourceData=null):n=this.options.source,this.options.sourceCache&&t.isArray(this.sourceData))e.call(this);else{try{n=t.fn.editableutils.tryParseJson(n,!1)}catch(t){return void i.call(this)}if("string"==typeof n){if(this.options.sourceCache){var s,o=n;if(t(document).data(o)||t(document).data(o,{}),!1===(s=t(document).data(o)).loading&&s.sourceData)return this.sourceData=s.sourceData,this.doPrepend(),void e.call(this);if(!0===s.loading)return s.callbacks.push(t.proxy((function(){this.sourceData=s.sourceData,this.doPrepend(),e.call(this)}),this)),void s.err_callbacks.push(t.proxy(i,this));s.loading=!0,s.callbacks=[],s.err_callbacks=[]}var r=t.extend({url:n,type:"get",cache:!1,dataType:"json",success:t.proxy((function(n){s&&(s.loading=!1),this.sourceData=this.makeArray(n),t.isArray(this.sourceData)?(s&&(s.sourceData=this.sourceData,t.each(s.callbacks,(function(){this.call()}))),this.doPrepend(),e.call(this)):(i.call(this),s&&t.each(s.err_callbacks,(function(){this.call()})))}),this),error:t.proxy((function(){i.call(this),s&&(s.loading=!1,t.each(s.err_callbacks,(function(){this.call()})))}),this)},this.options.sourceOptions);t.ajax(r)}else this.sourceData=this.makeArray(n),t.isArray(this.sourceData)?(this.doPrepend(),e.call(this)):i.call(this)}},doPrepend:function(){null!==this.options.prepend&&void 0!==this.options.prepend&&(t.isArray(this.prependData)||(t.isFunction(this.options.prepend)&&(this.options.prepend=this.options.prepend.call(this.options.scope)),this.options.prepend=t.fn.editableutils.tryParseJson(this.options.prepend,!0),"string"==typeof this.options.prepend&&(this.options.prepend={"":this.options.prepend}),this.prependData=this.makeArray(this.options.prepend)),t.isArray(this.prependData)&&t.isArray(this.sourceData)&&(this.sourceData=this.prependData.concat(this.sourceData)))},renderList:function(){},value2htmlFinal:function(t,e){},makeArray:function(e){var i,n,s,o,r=[];if(!e||"string"==typeof e)return null;if(t.isArray(e)){o=function(t,e){if(n={value:t,text:e},i++>=2)return!1};for(var a=0;a<e.length;a++)"object"==typeof(s=e[a])?(i=0,t.each(s,o),1===i?r.push(n):i>1&&(s.children&&(s.children=this.makeArray(s.children)),r.push(s))):r.push({value:s,text:s})}else t.each(e,(function(t,e){r.push({value:t,text:e})}));return r},option:function(t,e){this.options[t]=e,"source"===t&&(this.sourceData=null),"prepend"===t&&(this.prependData=null)}}),e.defaults=t.extend({},t.fn.editabletypes.abstractinput.defaults,{source:null,prepend:!1,sourceError:"Error when loading list",sourceCache:!0,sourceOptions:null}),t.fn.editabletypes.list=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("text",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.abstractinput),t.extend(e.prototype,{render:function(){this.renderClear(),this.setClass(),this.setAttr("placeholder")},activate:function(){this.$input.is(":visible")&&(this.$input.focus(),t.fn.editableutils.setCursorPosition(this.$input.get(0),this.$input.val().length),this.toggleClear&&this.toggleClear())},renderClear:function(){this.options.clear&&(this.$clear=t('<span class="editable-clear-x"></span>'),this.$input.after(this.$clear).css("padding-right",24).keyup(t.proxy((function(e){if(!~t.inArray(e.keyCode,[40,38,9,13,27])){clearTimeout(this.t);var i=this;this.t=setTimeout((function(){i.toggleClear(e)}),100)}}),this)).parent().css("position","relative"),this.$clear.click(t.proxy(this.clear,this)))},postrender:function(){},toggleClear:function(t){if(this.$clear){var e=this.$input.val().length,i=this.$clear.is(":visible");e&&!i&&this.$clear.show(),!e&&i&&this.$clear.hide()}},clear:function(){this.$clear.hide(),this.$input.val("").focus()}}),e.defaults=t.extend({},t.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',placeholder:null,clear:!0}),t.fn.editabletypes.text=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("textarea",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.abstractinput),t.extend(e.prototype,{render:function(){this.setClass(),this.setAttr("placeholder"),this.setAttr("rows"),this.$input.keydown((function(e){e.ctrlKey&&13===e.which&&t(this).closest("form").submit()}))},activate:function(){t.fn.editabletypes.text.prototype.activate.call(this)}}),e.defaults=t.extend({},t.fn.editabletypes.abstractinput.defaults,{tpl:"<textarea></textarea>",inputclass:"input-large",placeholder:null,rows:7}),t.fn.editabletypes.textarea=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("select",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.list),t.extend(e.prototype,{renderList:function(){this.$input.empty();var e=function(i,n){var s;if(t.isArray(n))for(var o=0;o<n.length;o++)s={},n[o].children?(s.label=n[o].text,i.append(e(t("<optgroup>",s),n[o].children))):(s.value=n[o].value,n[o].disabled&&(s.disabled=!0),i.append(t("<option>",s).text(n[o].text)));return i};e(this.$input,this.sourceData),this.setClass(),this.$input.on("keydown.editable",(function(e){13===e.which&&t(this).closest("form").submit()}))},value2htmlFinal:function(e,i){var n="",s=t.fn.editableutils.itemsByValue(e,this.sourceData);s.length&&(n=s[0].text),t.fn.editabletypes.abstractinput.prototype.value2html.call(this,n,i)},autosubmit:function(){this.$input.off("keydown.editable").on("change.editable",(function(){t(this).closest("form").submit()}))}}),e.defaults=t.extend({},t.fn.editabletypes.list.defaults,{tpl:"<select></select>"}),t.fn.editabletypes.select=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("checklist",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.list),t.extend(e.prototype,{renderList:function(){var e;if(this.$tpl.empty(),t.isArray(this.sourceData)){for(var i=0;i<this.sourceData.length;i++)e=t("<label>").append(t("<input>",{type:"checkbox",value:this.sourceData[i].value})).append(t("<span>").text(" "+this.sourceData[i].text)),t("<div>").append(e).appendTo(this.$tpl);this.$input=this.$tpl.find('input[type="checkbox"]'),this.setClass()}},value2str:function(e){return t.isArray(e)?e.sort().join(t.trim(this.options.separator)):""},str2value:function(e){var i,n=null;return"string"==typeof e&&e.length?(i=new RegExp("\\s*"+t.trim(this.options.separator)+"\\s*"),n=e.split(i)):n=t.isArray(e)?e:[e],n},value2input:function(e){this.$input.prop("checked",!1),t.isArray(e)&&e.length&&this.$input.each((function(i,n){var s=t(n);t.each(e,(function(t,e){s.val()==e&&s.prop("checked",!0)}))}))},input2value:function(){var e=[];return this.$input.filter(":checked").each((function(i,n){e.push(t(n).val())})),e},value2htmlFinal:function(e,i){var n=[],s=t.fn.editableutils.itemsByValue(e,this.sourceData),o=this.options.escape;s.length?(t.each(s,(function(e,i){var s=o?t.fn.editableutils.escape(i.text):i.text;n.push(s)})),t(i).html(n.join("<br>"))):t(i).empty()},activate:function(){this.$input.first().focus()},autosubmit:function(){this.$input.on("keydown",(function(e){13===e.which&&t(this).closest("form").submit()}))}}),e.defaults=t.extend({},t.fn.editabletypes.list.defaults,{tpl:'<div class="editable-checklist"></div>',inputclass:null,separator:","}),t.fn.editabletypes.checklist=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("password",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.text),t.extend(e.prototype,{value2html:function(e,i){e?t(i).text("[hidden]"):t(i).empty()},html2value:function(t){return null}}),e.defaults=t.extend({},t.fn.editabletypes.text.defaults,{tpl:'<input type="password">'}),t.fn.editabletypes.password=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("email",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.text),e.defaults=t.extend({},t.fn.editabletypes.text.defaults,{tpl:'<input type="email">'}),t.fn.editabletypes.email=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("url",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.text),e.defaults=t.extend({},t.fn.editabletypes.text.defaults,{tpl:'<input type="url">'}),t.fn.editabletypes.url=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("tel",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.text),e.defaults=t.extend({},t.fn.editabletypes.text.defaults,{tpl:'<input type="tel">'}),t.fn.editabletypes.tel=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("number",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.text),t.extend(e.prototype,{render:function(){e.superclass.render.call(this),this.setAttr("min"),this.setAttr("max"),this.setAttr("step")},postrender:function(){this.$clear&&this.$clear.css({right:24})}}),e.defaults=t.extend({},t.fn.editabletypes.text.defaults,{tpl:'<input type="number">',inputclass:"input-mini",min:null,max:null,step:null}),t.fn.editabletypes.number=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("range",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.number),t.extend(e.prototype,{render:function(){this.$input=this.$tpl.filter("input"),this.setClass(),this.setAttr("min"),this.setAttr("max"),this.setAttr("step"),this.$input.on("input",(function(){t(this).siblings("output").text(t(this).val())}))},activate:function(){this.$input.focus()}}),e.defaults=t.extend({},t.fn.editabletypes.number.defaults,{tpl:'<input type="range"><output style="width: 30px; display: inline-block"></output>',inputclass:"input-medium"}),t.fn.editabletypes.range=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("time",t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.abstractinput),t.extend(e.prototype,{render:function(){this.setClass()}}),e.defaults=t.extend({},t.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="time">'}),t.fn.editabletypes.time=e}(window.jQuery),function(t){"use strict";var e=function(i){if(this.init("select2",i,e.defaults),i.select2=i.select2||{},this.sourceData=null,i.placeholder&&(i.select2.placeholder=i.placeholder),!i.select2.tags&&i.source){var n=i.source;t.isFunction(i.source)&&(n=i.source.call(i.scope)),"string"==typeof n?(i.select2.ajax=i.select2.ajax||{},i.select2.ajax.data||(i.select2.ajax.data=function(t){return{query:t}}),i.select2.ajax.results||(i.select2.ajax.results=function(t){return{results:t}}),i.select2.ajax.url=n):(this.sourceData=this.convertSource(n),i.select2.data=this.sourceData)}if(this.options.select2=t.extend({},e.defaults.select2,i.select2),this.isMultiple=this.options.select2.tags||this.options.select2.multiple,this.isRemote="ajax"in this.options.select2,this.idFunc=this.options.select2.id,"function"!=typeof this.idFunc){var s=this.idFunc||"id";this.idFunc=function(t){return t[s]}}this.formatSelection=this.options.select2.formatSelection,"function"!=typeof this.formatSelection&&(this.formatSelection=function(t){return t.text})};t.fn.editableutils.inherit(e,t.fn.editabletypes.abstractinput),t.extend(e.prototype,{render:function(){this.setClass(),this.isRemote&&this.$input.on("select2-loaded",t.proxy((function(t){this.sourceData=t.items.results}),this)),this.isMultiple&&this.$input.on("change",(function(){t(this).closest("form").parent().triggerHandler("resize")}))},value2html:function(i,n){var s,o="",r=this;this.options.select2.tags?s=i:this.sourceData&&(s=t.fn.editableutils.itemsByValue(i,this.sourceData,this.idFunc)),t.isArray(s)?(o=[],t.each(s,(function(t,e){o.push(e&&"object"==typeof e?r.formatSelection(e):e)}))):s&&(o=r.formatSelection(s)),o=t.isArray(o)?o.join(this.options.viewseparator):o,e.superclass.value2html.call(this,o,n)},html2value:function(t){return this.options.select2.tags?this.str2value(t,this.options.viewseparator):null},value2input:function(e){if(t.isArray(e)&&(e=e.join(this.getSeparator())),this.$input.data("select2")?this.$input.val(e).trigger("change",!0):(this.$input.val(e),this.$input.select2(this.options.select2)),this.isRemote&&!this.isMultiple&&!this.options.select2.initSelection){var i=this.options.select2.id,n=this.options.select2.formatSelection;if(!i&&!n){var s=t(this.options.scope);if(!s.data("editable").isEmpty){var o={id:e,text:s.text()};this.$input.select2("data",o)}}}},input2value:function(){return this.$input.select2("val")},str2value:function(e,i){if("string"!=typeof e||!this.isMultiple)return e;var n,s,o;if(i=i||this.getSeparator(),null===e||e.length<1)return null;for(s=0,o=(n=e.split(i)).length;s<o;s+=1)n[s]=t.trim(n[s]);return n},autosubmit:function(){this.$input.on("change",(function(e,i){i||t(this).closest("form").submit()}))},getSeparator:function(){return this.options.select2.separator||t.fn.select2.defaults.separator},convertSource:function(e){if(t.isArray(e)&&e.length&&void 0!==e[0].value)for(var i=0;i<e.length;i++)void 0!==e[i].value&&(e[i].id=e[i].value,delete e[i].value);return e},destroy:function(){this.$input.data("select2")&&this.$input.select2("destroy")}}),e.defaults=t.extend({},t.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="hidden">',select2:null,placeholder:null,source:null,viewseparator:", "}),t.fn.editabletypes.select2=e}(window.jQuery),function(t){var e=function(e,i){this.$element=t(e),this.$element.is("input")?(this.options=t.extend({},t.fn.combodate.defaults,i,this.$element.data()),this.init()):t.error("Combodate should be applied to INPUT element")};e.prototype={constructor:e,init:function(){this.map={day:["D","date"],month:["M","month"],year:["Y","year"],hour:["[Hh]","hours"],minute:["m","minutes"],second:["s","seconds"],ampm:["[Aa]",""]},this.$widget=t('<span class="combodate"></span>').html(this.getTemplate()),this.initCombos(),this.$widget.on("change","select",t.proxy((function(e){this.$element.val(this.getValue()).change(),this.options.smartDays&&(t(e.target).is(".month")||t(e.target).is(".year"))&&this.fillCombo("day")}),this)),this.$widget.find("select").css("width","auto"),this.$element.hide().after(this.$widget),this.setValue(this.$element.val()||this.options.value)},getTemplate:function(){var e=this.options.template;return t.each(this.map,(function(t,i){i=i[0];var n=new RegExp(i+"+"),s=i.length>1?i.substring(1,2):i;e=e.replace(n,"{"+s+"}")})),e=e.replace(/ /g,"&nbsp;"),t.each(this.map,(function(t,i){var n=(i=i[0]).length>1?i.substring(1,2):i;e=e.replace("{"+n+"}",'<select class="'+t+'"></select>')})),e},initCombos:function(){for(var t in this.map){var e=this.$widget.find("."+t);this["$"+t]=e.length?e:null,this.fillCombo(t)}},fillCombo:function(t){var e=this["$"+t];if(e){var i=this["fill"+t.charAt(0).toUpperCase()+t.slice(1)](),n=e.val();e.empty();for(var s=0;s<i.length;s++)e.append('<option value="'+i[s][0]+'">'+i[s][1]+"</option>");e.val(n)}},fillCommon:function(t){var e,i=[];if("name"===this.options.firstItem){var n="function"==typeof(e=moment.relativeTime||moment.langData()._relativeTime)[t]?e[t](1,!0,t,!1):e[t];n=n.split(" ").reverse()[0],i.push(["",n])}else"empty"===this.options.firstItem&&i.push(["",""]);return i},fillDay:function(){var t,e,i=this.fillCommon("d"),n=-1!==this.options.template.indexOf("DD"),s=31;if(this.options.smartDays&&this.$month&&this.$year){var o=parseInt(this.$month.val(),10),r=parseInt(this.$year.val(),10);isNaN(o)||isNaN(r)||(s=moment([r,o]).daysInMonth())}for(e=1;e<=s;e++)t=n?this.leadZero(e):e,i.push([e,t]);return i},fillMonth:function(){var t,e,i=this.fillCommon("M"),n=-1!==this.options.template.indexOf("MMMM"),s=-1!==this.options.template.indexOf("MMM"),o=-1!==this.options.template.indexOf("MM");for(e=0;e<=11;e++)t=n?moment().date(1).month(e).format("MMMM"):s?moment().date(1).month(e).format("MMM"):o?this.leadZero(e+1):e+1,i.push([e,t]);return i},fillYear:function(){var t,e,i=[],n=-1!==this.options.template.indexOf("YYYY");for(e=this.options.maxYear;e>=this.options.minYear;e--)t=n?e:(e+"").substring(2),i[this.options.yearDescending?"push":"unshift"]([e,t]);return i=this.fillCommon("y").concat(i)},fillHour:function(){var t,e,i=this.fillCommon("h"),n=-1!==this.options.template.indexOf("h"),s=(this.options.template.indexOf("H"),-1!==this.options.template.toLowerCase().indexOf("hh")),o=n?12:23;for(e=n?1:0;e<=o;e++)t=s?this.leadZero(e):e,i.push([e,t]);return i},fillMinute:function(){var t,e,i=this.fillCommon("m"),n=-1!==this.options.template.indexOf("mm");for(e=0;e<=59;e+=this.options.minuteStep)t=n?this.leadZero(e):e,i.push([e,t]);return i},fillSecond:function(){var t,e,i=this.fillCommon("s"),n=-1!==this.options.template.indexOf("ss");for(e=0;e<=59;e+=this.options.secondStep)t=n?this.leadZero(e):e,i.push([e,t]);return i},fillAmpm:function(){var t=-1!==this.options.template.indexOf("a");this.options.template.indexOf("A");return[["am",t?"am":"AM"],["pm",t?"pm":"PM"]]},getValue:function(e){var i,n={},s=this,o=!1;return t.each(this.map,(function(t,e){if("ampm"!==t){var i="day"===t?1:0;return n[t]=s["$"+t]?parseInt(s["$"+t].val(),10):i,isNaN(n[t])?(o=!0,!1):void 0}})),o?"":(this.$ampm&&(12===n.hour?n.hour="am"===this.$ampm.val()?0:12:n.hour="am"===this.$ampm.val()?n.hour:n.hour+12),i=moment([n.year,n.month,n.day,n.hour,n.minute,n.second]),this.highlight(i),null===(e=void 0===e?this.options.format:e)?i.isValid()?i:null:i.isValid()?i.format(e):"")},setValue:function(e){if(e){var i="string"==typeof e?moment(e,this.options.format):moment(e),n=this,s={};i.isValid()&&(t.each(this.map,(function(t,e){"ampm"!==t&&(s[t]=i[e[1]]())})),this.$ampm&&(s.hour>=12?(s.ampm="pm",s.hour>12&&(s.hour-=12)):(s.ampm="am",0===s.hour&&(s.hour=12))),t.each(s,(function(t,e){n["$"+t]&&("minute"===t&&n.options.minuteStep>1&&n.options.roundTime&&(e=o(n["$"+t],e)),"second"===t&&n.options.secondStep>1&&n.options.roundTime&&(e=o(n["$"+t],e)),n["$"+t].val(e))})),this.options.smartDays&&this.fillCombo("day"),this.$element.val(i.format(this.options.format)).change())}function o(e,i){var n={};return e.children("option").each((function(e,s){var o,r=t(s).attr("value");""!==r&&(o=Math.abs(r-i),(void 0===n.distance||o<n.distance)&&(n={value:r,distance:o}))})),n.value}},highlight:function(t){t.isValid()?this.options.errorClass?this.$widget.removeClass(this.options.errorClass):this.$widget.find("select").css("border-color",this.borderColor):this.options.errorClass?this.$widget.addClass(this.options.errorClass):(this.borderColor||(this.borderColor=this.$widget.find("select").css("border-color")),this.$widget.find("select").css("border-color","red"))},leadZero:function(t){return t<=9?"0"+t:t},destroy:function(){this.$widget.remove(),this.$element.removeData("combodate").show()}},t.fn.combodate=function(i){var n,s=Array.apply(null,arguments);return s.shift(),"getValue"===i&&this.length&&(n=this.eq(0).data("combodate"))?n.getValue.apply(n,s):this.each((function(){var n=t(this),o=n.data("combodate"),r="object"==typeof i&&i;o||n.data("combodate",o=new e(this,r)),"string"==typeof i&&"function"==typeof o[i]&&o[i].apply(o,s)}))},t.fn.combodate.defaults={format:"DD-MM-YYYY HH:mm",template:"D / MMM / YYYY   H : mm",value:null,minYear:1970,maxYear:2015,yearDescending:!0,minuteStep:5,secondStep:1,firstItem:"empty",errorClass:null,roundTime:!0,smartDays:!1}}(window.jQuery),function(t){"use strict";var e=function(i){this.init("combodate",i,e.defaults),this.options.viewformat||(this.options.viewformat=this.options.format),i.combodate=t.fn.editableutils.tryParseJson(i.combodate,!0),this.options.combodate=t.extend({},e.defaults.combodate,i.combodate,{format:this.options.format,template:this.options.template})};t.fn.editableutils.inherit(e,t.fn.editabletypes.abstractinput),t.extend(e.prototype,{render:function(){this.$input.combodate(this.options.combodate),"bs3"===t.fn.editableform.engine&&this.$input.siblings().find("select").addClass("form-control"),this.options.inputclass&&this.$input.siblings().find("select").addClass(this.options.inputclass)},value2html:function(t,i){var n=t?t.format(this.options.viewformat):"";e.superclass.value2html.call(this,n,i)},html2value:function(t){return t?moment(t,this.options.viewformat):null},value2str:function(t){return t?t.format(this.options.format):""},str2value:function(t){return t?moment(t,this.options.format):null},value2submit:function(t){return this.value2str(t)},value2input:function(t){this.$input.combodate("setValue",t)},input2value:function(){return this.$input.combodate("getValue",null)},activate:function(){this.$input.siblings(".combodate").find("select").eq(0).focus()},autosubmit:function(){}}),e.defaults=t.extend({},t.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',inputclass:null,format:"YYYY-MM-DD",viewformat:null,template:"D / MMM / YYYY",combodate:null}),t.fn.editabletypes.combodate=e}(window.jQuery),function(t){"use strict";var e=t.fn.editableform.Constructor.prototype.initInput;t.extend(t.fn.editableform.Constructor.prototype,{initTemplate:function(){this.$form=t(t.fn.editableform.template),this.$form.find(".control-group").addClass("form-group"),this.$form.find(".editable-error-block").addClass("help-block")},initInput:function(){e.apply(this);var i=null===this.input.options.inputclass||!1===this.input.options.inputclass,n="text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs".split(",");~t.inArray(this.input.type,n)&&(this.input.$input.addClass("form-control"),i&&(this.input.options.inputclass="input-sm",this.input.$input.addClass("input-sm")));for(var s=this.$form.find(".editable-buttons"),o=i?["input-sm"]:this.input.options.inputclass.split(" "),r=0;r<o.length;r++)"input-lg"===o[r].toLowerCase()&&s.find("button").removeClass("btn-sm").addClass("btn-lg")}}),t.fn.editableform.buttons='<button type="submit" class="btn btn-primary btn-sm editable-submit"><i class="glyphicon glyphicon-ok"></i></button><button type="button" class="btn btn-default btn-sm editable-cancel"><i class="glyphicon glyphicon-remove"></i></button>',t.fn.editableform.errorGroupClass="has-error",t.fn.editableform.errorBlockClass=null,t.fn.editableform.engine="bs3"}(window.jQuery),function(t){"use strict";t.extend(t.fn.editableContainer.Popup.prototype,{containerName:"popover",containerDataName:"bs.popover",innerCss:".popover-content",defaults:t.fn.popover.Constructor.DEFAULTS,initContainer:function(){var e;t.extend(this.containerOptions,{trigger:"manual",selector:!1,content:" ",template:this.defaults.template}),this.$element.data("template")&&(e=this.$element.data("template"),this.$element.removeData("template")),this.call(this.containerOptions),e&&this.$element.data("template",e)},innerShow:function(){this.call("show")},innerHide:function(){this.call("hide")},innerDestroy:function(){this.call("destroy")},setContainerOption:function(t,e){this.container().options[t]=e},setPosition:function(){(function(){var t=this.tip(),e="function"==typeof this.options.placement?this.options.placement.call(this,t[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,n=i.test(e);n&&(e=e.replace(i,"")||"top");var s=this.getPosition(),o=t[0].offsetWidth,r=t[0].offsetHeight;if(n){var a=this.$element.parent(),l=e,c=document.documentElement.scrollTop||document.body.scrollTop,u="body"==this.options.container?window.innerWidth:a.outerWidth(),d="body"==this.options.container?window.innerHeight:a.outerHeight(),p="body"==this.options.container?0:a.offset().left;e="bottom"==e&&s.top+s.height+r-c>d?"top":"top"==e&&s.top-c-r<0?"bottom":"right"==e&&s.right+o>u?"left":"left"==e&&s.left-o<p?"right":e,t.removeClass(l).addClass(e)}var h=this.getCalculatedOffset(e,s,o,r);this.applyPlacement(h,e)}).call(this.container())}})}(window.jQuery),function(t){function e(){return new Date(Date.UTC.apply(Date,arguments))}var i=function(e,i){this._process_options(i),this.element=t(e),this.isInline=!1,this.isInput=this.element.is("input"),this.component=!!this.element.is(".date")&&this.element.find(".add-on, .btn"),this.hasInput=this.component&&this.element.find("input").length,this.component&&0===this.component.length&&(this.component=!1),this.picker=t(d.template),this._buildEvents(),this._attachEvents(),this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu"),this.o.rtl&&(this.picker.addClass("datepicker-rtl"),this.picker.find(".prev i, .next i").toggleClass("icon-arrow-left icon-arrow-right")),this.viewMode=this.o.startView,this.o.calendarWeeks&&this.picker.find("tfoot th.today").attr("colspan",(function(t,e){return parseInt(e)+1})),this._allow_update=!1,this.setStartDate(this.o.startDate),this.setEndDate(this.o.endDate),this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled),this.fillDow(),this.fillMonths(),this._allow_update=!0,this.update(),this.showMode(),this.isInline&&this.show()};i.prototype={constructor:i,_process_options:function(e){this._o=t.extend({},this._o,e);var i=this.o=t.extend({},this._o),n=i.language;switch(u[n]||(n=n.split("-")[0],u[n]||(n=l.language)),i.language=n,i.startView){case 2:case"decade":i.startView=2;break;case 1:case"year":i.startView=1;break;default:i.startView=0}switch(i.minViewMode){case 1:case"months":i.minViewMode=1;break;case 2:case"years":i.minViewMode=2;break;default:i.minViewMode=0}i.startView=Math.max(i.startView,i.minViewMode),i.weekStart%=7,i.weekEnd=(i.weekStart+6)%7;var s=d.parseFormat(i.format);i.startDate!==-1/0&&(i.startDate=d.parseDate(i.startDate,s,i.language)),i.endDate!==1/0&&(i.endDate=d.parseDate(i.endDate,s,i.language)),i.daysOfWeekDisabled=i.daysOfWeekDisabled||[],t.isArray(i.daysOfWeekDisabled)||(i.daysOfWeekDisabled=i.daysOfWeekDisabled.split(/[,\s]*/)),i.daysOfWeekDisabled=t.map(i.daysOfWeekDisabled,(function(t){return parseInt(t,10)}))},_events:[],_secondaryEvents:[],_applyEvents:function(t){for(var e,i,n=0;n<t.length;n++)e=t[n][0],i=t[n][1],e.on(i)},_unapplyEvents:function(t){for(var e,i,n=0;n<t.length;n++)e=t[n][0],i=t[n][1],e.off(i)},_buildEvents:function(){this.isInput?this._events=[[this.element,{focus:t.proxy(this.show,this),keyup:t.proxy(this.update,this),keydown:t.proxy(this.keydown,this)}]]:this.component&&this.hasInput?this._events=[[this.element.find("input"),{focus:t.proxy(this.show,this),keyup:t.proxy(this.update,this),keydown:t.proxy(this.keydown,this)}],[this.component,{click:t.proxy(this.show,this)}]]:this.element.is("div")?this.isInline=!0:this._events=[[this.element,{click:t.proxy(this.show,this)}]],this._secondaryEvents=[[this.picker,{click:t.proxy(this.click,this)}],[t(window),{resize:t.proxy(this.place,this)}],[t(document),{mousedown:t.proxy((function(t){this.element.is(t.target)||this.element.find(t.target).size()||this.picker.is(t.target)||this.picker.find(t.target).size()||this.hide()}),this)}]]},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(e,i){var n=i||this.date,s=new Date(n.getTime()+6e4*n.getTimezoneOffset());this.element.trigger({type:e,date:s,format:t.proxy((function(t){var e=t||this.o.format;return d.formatDate(n,e,this.o.language)}),this)})},show:function(t){this.isInline||this.picker.appendTo("body"),this.picker.show(),this.height=this.component?this.component.outerHeight():this.element.outerHeight(),this.place(),this._attachSecondaryEvents(),t&&t.preventDefault(),this._trigger("show")},hide:function(t){this.isInline||this.picker.is(":visible")&&(this.picker.hide().detach(),this._detachSecondaryEvents(),this.viewMode=this.o.startView,this.showMode(),this.o.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val())&&this.setValue(),this._trigger("hide"))},remove:function(){this.hide(),this._detachEvents(),this._detachSecondaryEvents(),this.picker.remove(),delete this.element.data().datepicker,this.isInput||delete this.element.data().date},getDate:function(){var t=this.getUTCDate();return new Date(t.getTime()+6e4*t.getTimezoneOffset())},getUTCDate:function(){return this.date},setDate:function(t){this.setUTCDate(new Date(t.getTime()-6e4*t.getTimezoneOffset()))},setUTCDate:function(t){this.date=t,this.setValue()},setValue:function(){var t=this.getFormattedDate();this.isInput?this.element.val(t):this.component&&this.element.find("input").val(t)},getFormattedDate:function(t){return void 0===t&&(t=this.o.format),d.formatDate(this.date,t,this.o.language)},setStartDate:function(t){this._process_options({startDate:t}),this.update(),this.updateNavArrows()},setEndDate:function(t){this._process_options({endDate:t}),this.update(),this.updateNavArrows()},setDaysOfWeekDisabled:function(t){this._process_options({daysOfWeekDisabled:t}),this.update(),this.updateNavArrows()},place:function(){if(!this.isInline){var e=parseInt(this.element.parents().filter((function(){return"auto"!=t(this).css("z-index")})).first().css("z-index"))+10,i=this.component?this.component.parent().offset():this.element.offset(),n=this.component?this.component.outerHeight(!0):this.element.outerHeight(!0);this.picker.css({top:i.top+n,left:i.left,zIndex:e})}},_allow_update:!0,update:function(){if(this._allow_update){var t,e=!1;arguments&&arguments.length&&("string"==typeof arguments[0]||arguments[0]instanceof Date)?(t=arguments[0],e=!0):(t=this.isInput?this.element.val():this.element.data("date")||this.element.find("input").val(),delete this.element.data().date),this.date=d.parseDate(t,this.o.format,this.o.language),e&&this.setValue(),this.date<this.o.startDate?this.viewDate=new Date(this.o.startDate):this.date>this.o.endDate?this.viewDate=new Date(this.o.endDate):this.viewDate=new Date(this.date),this.fill()}},fillDow:function(){var t=this.o.weekStart,e="<tr>";if(this.o.calendarWeeks){var i='<th class="cw">&nbsp;</th>';e+=i,this.picker.find(".datepicker-days thead tr:first-child").prepend(i)}for(;t<this.o.weekStart+7;)e+='<th class="dow">'+u[this.o.language].daysMin[t++%7]+"</th>";e+="</tr>",this.picker.find(".datepicker-days thead").append(e)},fillMonths:function(){for(var t="",e=0;e<12;)t+='<span class="month">'+u[this.o.language].monthsShort[e++]+"</span>";this.picker.find(".datepicker-months td").html(t)},setRange:function(e){e&&e.length?this.range=t.map(e,(function(t){return t.valueOf()})):delete this.range,this.fill()},getClassNames:function(e){var i=[],n=this.viewDate.getUTCFullYear(),s=this.viewDate.getUTCMonth(),o=this.date.valueOf(),r=new Date;return e.getUTCFullYear()<n||e.getUTCFullYear()==n&&e.getUTCMonth()<s?i.push("old"):(e.getUTCFullYear()>n||e.getUTCFullYear()==n&&e.getUTCMonth()>s)&&i.push("new"),this.o.todayHighlight&&e.getUTCFullYear()==r.getFullYear()&&e.getUTCMonth()==r.getMonth()&&e.getUTCDate()==r.getDate()&&i.push("today"),o&&e.valueOf()==o&&i.push("active"),(e.valueOf()<this.o.startDate||e.valueOf()>this.o.endDate||-1!==t.inArray(e.getUTCDay(),this.o.daysOfWeekDisabled))&&i.push("disabled"),this.range&&(e>this.range[0]&&e<this.range[this.range.length-1]&&i.push("range"),-1!=t.inArray(e.valueOf(),this.range)&&i.push("selected")),i},fill:function(){var i,n=new Date(this.viewDate),s=n.getUTCFullYear(),o=n.getUTCMonth(),r=this.o.startDate!==-1/0?this.o.startDate.getUTCFullYear():-1/0,a=this.o.startDate!==-1/0?this.o.startDate.getUTCMonth():-1/0,l=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,c=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0;this.date&&this.date.valueOf();this.picker.find(".datepicker-days thead th.datepicker-switch").text(u[this.o.language].months[o]+" "+s),this.picker.find("tfoot th.today").text(u[this.o.language].today).toggle(!1!==this.o.todayBtn),this.picker.find("tfoot th.clear").text(u[this.o.language].clear).toggle(!1!==this.o.clearBtn),this.updateNavArrows(),this.fillMonths();var p=e(s,o-1,28,0,0,0,0),h=d.getDaysInMonth(p.getUTCFullYear(),p.getUTCMonth());p.setUTCDate(h),p.setUTCDate(h-(p.getUTCDay()-this.o.weekStart+7)%7);var f=new Date(p);f.setUTCDate(f.getUTCDate()+42),f=f.valueOf();for(var m,g=[];p.valueOf()<f;){if(p.getUTCDay()==this.o.weekStart&&(g.push("<tr>"),this.o.calendarWeeks)){var v=new Date(+p+(this.o.weekStart-p.getUTCDay()-7)%7*864e5),y=new Date(+v+(11-v.getUTCDay())%7*864e5),b=new Date(+(b=e(y.getUTCFullYear(),0,1))+(11-b.getUTCDay())%7*864e5),w=(y-b)/864e5/7+1;g.push('<td class="cw">'+w+"</td>")}(m=this.getClassNames(p)).push("day");var x=this.o.beforeShowDay(p);void 0===x?x={}:"boolean"==typeof x?x={enabled:x}:"string"==typeof x&&(x={classes:x}),!1===x.enabled&&m.push("disabled"),x.classes&&(m=m.concat(x.classes.split(/\s+/))),x.tooltip&&(i=x.tooltip),m=t.unique(m),g.push('<td class="'+m.join(" ")+'"'+(i?' title="'+i+'"':"")+">"+p.getUTCDate()+"</td>"),p.getUTCDay()==this.o.weekEnd&&g.push("</tr>"),p.setUTCDate(p.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(g.join(""));var k=this.date&&this.date.getUTCFullYear(),C=this.picker.find(".datepicker-months").find("th:eq(1)").text(s).end().find("span").removeClass("active");k&&k==s&&C.eq(this.date.getUTCMonth()).addClass("active"),(s<r||s>l)&&C.addClass("disabled"),s==r&&C.slice(0,a).addClass("disabled"),s==l&&C.slice(c+1).addClass("disabled"),g="",s=10*parseInt(s/10,10);var T=this.picker.find(".datepicker-years").find("th:eq(1)").text(s+"-"+(s+9)).end().find("td");s-=1;for(var S=-1;S<11;S++)g+='<span class="year'+(-1==S?" old":10==S?" new":"")+(k==s?" active":"")+(s<r||s>l?" disabled":"")+'">'+s+"</span>",s+=1;T.html(g)},updateNavArrows:function(){if(this._allow_update){var t=new Date(this.viewDate),e=t.getUTCFullYear(),i=t.getUTCMonth();switch(this.viewMode){case 0:this.o.startDate!==-1/0&&e<=this.o.startDate.getUTCFullYear()&&i<=this.o.startDate.getUTCMonth()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&e>=this.o.endDate.getUTCFullYear()&&i>=this.o.endDate.getUTCMonth()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 1:case 2:this.o.startDate!==-1/0&&e<=this.o.startDate.getUTCFullYear()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&e>=this.o.endDate.getUTCFullYear()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"})}}},click:function(i){i.preventDefault();var n=t(i.target).closest("span, td, th");if(1==n.length)switch(n[0].nodeName.toLowerCase()){case"th":switch(n[0].className){case"datepicker-switch":this.showMode(1);break;case"prev":case"next":var s=d.modes[this.viewMode].navStep*("prev"==n[0].className?-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveMonth(this.viewDate,s);break;case 1:case 2:this.viewDate=this.moveYear(this.viewDate,s)}this.fill();break;case"today":var o=new Date;o=e(o.getFullYear(),o.getMonth(),o.getDate(),0,0,0),this.showMode(-2);var r="linked"==this.o.todayBtn?null:"view";this._setDate(o,r);break;case"clear":var a;this.isInput?a=this.element:this.component&&(a=this.element.find("input")),a&&a.val("").change(),this._trigger("changeDate"),this.update(),this.o.autoclose&&this.hide()}break;case"span":if(!n.is(".disabled")){if(this.viewDate.setUTCDate(1),n.is(".month")){var l=1,c=n.parent().find("span").index(n),u=this.viewDate.getUTCFullYear();this.viewDate.setUTCMonth(c),this._trigger("changeMonth",this.viewDate),1===this.o.minViewMode&&this._setDate(e(u,c,l,0,0,0,0))}else{u=parseInt(n.text(),10)||0,l=1,c=0;this.viewDate.setUTCFullYear(u),this._trigger("changeYear",this.viewDate),2===this.o.minViewMode&&this._setDate(e(u,c,l,0,0,0,0))}this.showMode(-1),this.fill()}break;case"td":if(n.is(".day")&&!n.is(".disabled")){l=parseInt(n.text(),10)||1,u=this.viewDate.getUTCFullYear(),c=this.viewDate.getUTCMonth();n.is(".old")?0===c?(c=11,u-=1):c-=1:n.is(".new")&&(11==c?(c=0,u+=1):c+=1),this._setDate(e(u,c,l,0,0,0,0))}}},_setDate:function(t,e){var i;e&&"date"!=e||(this.date=new Date(t)),e&&"view"!=e||(this.viewDate=new Date(t)),this.fill(),this.setValue(),this._trigger("changeDate"),this.isInput?i=this.element:this.component&&(i=this.element.find("input")),i&&(i.change(),!this.o.autoclose||e&&"date"!=e||this.hide())},moveMonth:function(t,e){if(!e)return t;var i,n,s=new Date(t.valueOf()),o=s.getUTCDate(),r=s.getUTCMonth(),a=Math.abs(e);if(e=e>0?1:-1,1==a)n=-1==e?function(){return s.getUTCMonth()==r}:function(){return s.getUTCMonth()!=i},i=r+e,s.setUTCMonth(i),(i<0||i>11)&&(i=(i+12)%12);else{for(var l=0;l<a;l++)s=this.moveMonth(s,e);i=s.getUTCMonth(),s.setUTCDate(o),n=function(){return i!=s.getUTCMonth()}}for(;n();)s.setUTCDate(--o),s.setUTCMonth(i);return s},moveYear:function(t,e){return this.moveMonth(t,12*e)},dateWithinRange:function(t){return t>=this.o.startDate&&t<=this.o.endDate},keydown:function(t){if(this.picker.is(":not(:visible)"))27==t.keyCode&&this.show();else{var e,i,n,s,o=!1;switch(t.keyCode){case 27:this.hide(),t.preventDefault();break;case 37:case 39:if(!this.o.keyboardNavigation)break;e=37==t.keyCode?-1:1,t.ctrlKey?(i=this.moveYear(this.date,e),n=this.moveYear(this.viewDate,e)):t.shiftKey?(i=this.moveMonth(this.date,e),n=this.moveMonth(this.viewDate,e)):((i=new Date(this.date)).setUTCDate(this.date.getUTCDate()+e),(n=new Date(this.viewDate)).setUTCDate(this.viewDate.getUTCDate()+e)),this.dateWithinRange(i)&&(this.date=i,this.viewDate=n,this.setValue(),this.update(),t.preventDefault(),o=!0);break;case 38:case 40:if(!this.o.keyboardNavigation)break;e=38==t.keyCode?-1:1,t.ctrlKey?(i=this.moveYear(this.date,e),n=this.moveYear(this.viewDate,e)):t.shiftKey?(i=this.moveMonth(this.date,e),n=this.moveMonth(this.viewDate,e)):((i=new Date(this.date)).setUTCDate(this.date.getUTCDate()+7*e),(n=new Date(this.viewDate)).setUTCDate(this.viewDate.getUTCDate()+7*e)),this.dateWithinRange(i)&&(this.date=i,this.viewDate=n,this.setValue(),this.update(),t.preventDefault(),o=!0);break;case 13:this.hide(),t.preventDefault();break;case 9:this.hide()}if(o)this._trigger("changeDate"),this.isInput?s=this.element:this.component&&(s=this.element.find("input")),s&&s.change()}},showMode:function(t){t&&(this.viewMode=Math.max(this.o.minViewMode,Math.min(2,this.viewMode+t))),this.picker.find(">div").hide().filter(".datepicker-"+d.modes[this.viewMode].clsName).css("display","block"),this.updateNavArrows()}};var n=function(e,i){this.element=t(e),this.inputs=t.map(i.inputs,(function(t){return t.jquery?t[0]:t})),delete i.inputs,t(this.inputs).datepicker(i).bind("changeDate",t.proxy(this.dateUpdated,this)),this.pickers=t.map(this.inputs,(function(e){return t(e).data("datepicker")})),this.updateDates()};function s(e,i){var n=t(e).data(),s={},o=new RegExp("^"+i.toLowerCase()+"([A-Z])");i=new RegExp("^"+i.toLowerCase());for(var r in n)i.test(r)&&(s[r.replace(o,(function(t,e){return e.toLowerCase()}))]=n[r]);return s}function o(e){var i={};if(u[e]||(e=e.split("-")[0],u[e])){var n=u[e];return t.each(c,(function(t,e){e in n&&(i[e]=n[e])})),i}}n.prototype={updateDates:function(){this.dates=t.map(this.pickers,(function(t){return t.date})),this.updateRanges()},updateRanges:function(){var e=t.map(this.dates,(function(t){return t.valueOf()}));t.each(this.pickers,(function(t,i){i.setRange(e)}))},dateUpdated:function(e){var i=t(e.target).data("datepicker").getUTCDate(),n=t.inArray(e.target,this.inputs),s=this.inputs.length;if(-1!=n){if(i<this.dates[n])for(;n>=0&&i<this.dates[n];)this.pickers[n--].setUTCDate(i);else if(i>this.dates[n])for(;n<s&&i>this.dates[n];)this.pickers[n++].setUTCDate(i);this.updateDates()}},remove:function(){t.map(this.pickers,(function(t){t.remove()})),delete this.element.data().datepicker}};var r=t.fn.datepicker,a=t.fn.datepicker=function(e){var r,a=Array.apply(null,arguments);return a.shift(),this.each((function(){var c=t(this),u=c.data("datepicker"),d="object"==typeof e&&e;if(!u){var p=s(this,"date"),h=o(t.extend({},l,p,d).language),f=t.extend({},l,h,p,d);if(c.is(".input-daterange")||f.inputs){var m={inputs:f.inputs||c.find("input").toArray()};c.data("datepicker",u=new n(this,t.extend(f,m)))}else c.data("datepicker",u=new i(this,f))}if("string"==typeof e&&"function"==typeof u[e]&&void 0!==(r=u[e].apply(u,a)))return!1})),void 0!==r?r:this},l=t.fn.datepicker.defaults={autoclose:!1,beforeShowDay:t.noop,calendarWeeks:!1,clearBtn:!1,daysOfWeekDisabled:[],endDate:1/0,forceParse:!0,format:"mm/dd/yyyy",keyboardNavigation:!0,language:"en",minViewMode:0,rtl:!1,startDate:-1/0,startView:0,todayBtn:!1,todayHighlight:!1,weekStart:0},c=t.fn.datepicker.locale_opts=["format","rtl","weekStart"];t.fn.datepicker.Constructor=i;var u=t.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear"}},d={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(t){return t%4==0&&t%100!=0||t%400==0},getDaysInMonth:function(t,e){return[31,d.isLeapYear(t)?29:28,31,30,31,30,31,31,30,31,30,31][e]},validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,parseFormat:function(t){var e=t.replace(this.validParts,"\0").split("\0"),i=t.match(this.validParts);if(!e||!e.length||!i||0===i.length)throw new Error("Invalid date format.");return{separators:e,parts:i}},parseDate:function(n,s,o){if(n instanceof Date)return n;if("string"==typeof s&&(s=d.parseFormat(s)),/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(n)){var r,a=/([\-+]\d+)([dmwy])/,l=n.match(/([\-+]\d+)([dmwy])/g);n=new Date;for(var c=0;c<l.length;c++)switch(f=a.exec(l[c]),r=parseInt(f[1]),f[2]){case"d":n.setUTCDate(n.getUTCDate()+r);break;case"m":n=i.prototype.moveMonth.call(i.prototype,n,r);break;case"w":n.setUTCDate(n.getUTCDate()+7*r);break;case"y":n=i.prototype.moveYear.call(i.prototype,n,r)}return e(n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate(),0,0,0)}l=n&&n.match(this.nonpunctuation)||[],n=new Date;var p,h,f,m={},g=["yyyy","yy","M","MM","m","mm","d","dd"],v={yyyy:function(t,e){return t.setUTCFullYear(e)},yy:function(t,e){return t.setUTCFullYear(2e3+e)},m:function(t,e){for(e-=1;e<0;)e+=12;for(e%=12,t.setUTCMonth(e);t.getUTCMonth()!=e;)t.setUTCDate(t.getUTCDate()-1);return t},d:function(t,e){return t.setUTCDate(e)}};v.M=v.MM=v.mm=v.m,v.dd=v.d,n=e(n.getFullYear(),n.getMonth(),n.getDate(),0,0,0);var y=s.parts.slice();if(l.length!=y.length&&(y=t(y).filter((function(e,i){return-1!==t.inArray(i,g)})).toArray()),l.length==y.length){c=0;for(var b=y.length;c<b;c++){if(p=parseInt(l[c],10),f=y[c],isNaN(p))switch(f){case"MM":h=t(u[o].months).filter((function(){var t=this.slice(0,l[c].length);return t==l[c].slice(0,t.length)})),p=t.inArray(h[0],u[o].months)+1;break;case"M":h=t(u[o].monthsShort).filter((function(){var t=this.slice(0,l[c].length);return t==l[c].slice(0,t.length)})),p=t.inArray(h[0],u[o].monthsShort)+1}m[f]=p}var w;for(c=0;c<g.length;c++)(w=g[c])in m&&!isNaN(m[w])&&v[w](n,m[w])}return n},formatDate:function(e,i,n){"string"==typeof i&&(i=d.parseFormat(i));var s={d:e.getUTCDate(),D:u[n].daysShort[e.getUTCDay()],DD:u[n].days[e.getUTCDay()],m:e.getUTCMonth()+1,M:u[n].monthsShort[e.getUTCMonth()],MM:u[n].months[e.getUTCMonth()],yy:e.getUTCFullYear().toString().substring(2),yyyy:e.getUTCFullYear()};s.dd=(s.d<10?"0":"")+s.d,s.mm=(s.m<10?"0":"")+s.m;e=[];for(var o=t.extend([],i.separators),r=0,a=i.parts.length;r<=a;r++)o.length&&e.push(o.shift()),e.push(s[i.parts[r]]);return e.join("")},headTemplate:'<thead><tr><th class="prev"><i class="icon-arrow-left"/></th><th colspan="5" class="datepicker-switch"></th><th class="next"><i class="icon-arrow-right"/></th></tr></thead>',contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};d.template='<div class="datepicker"><div class="datepicker-days"><table class=" table-condensed">'+d.headTemplate+"<tbody></tbody>"+d.footTemplate+'</table></div><div class="datepicker-months"><table class="table-condensed">'+d.headTemplate+d.contTemplate+d.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+d.headTemplate+d.contTemplate+d.footTemplate+"</table></div></div>",t.fn.datepicker.DPGlobal=d,t.fn.datepicker.noConflict=function(){return t.fn.datepicker=r,this},t(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',(function(e){var i=t(this);i.data("datepicker")||(e.preventDefault(),a.call(i,"show"))})),t((function(){a.call(t('[data-provide="datepicker-inline"]'))}))}(window.jQuery),function(t){"use strict";t.fn.bdatepicker=t.fn.datepicker.noConflict(),t.fn.datepicker||(t.fn.datepicker=t.fn.bdatepicker);var e=function(t){this.init("date",t,e.defaults),this.initPicker(t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.abstractinput),t.extend(e.prototype,{initPicker:function(e,i){this.options.viewformat||(this.options.viewformat=this.options.format),e.datepicker=t.fn.editableutils.tryParseJson(e.datepicker,!0),this.options.datepicker=t.extend({},i.datepicker,e.datepicker,{format:this.options.viewformat}),this.options.datepicker.language=this.options.datepicker.language||"en",this.dpg=t.fn.bdatepicker.DPGlobal,this.parsedFormat=this.dpg.parseFormat(this.options.format),this.parsedViewFormat=this.dpg.parseFormat(this.options.viewformat)},render:function(){this.$input.bdatepicker(this.options.datepicker),this.options.clear&&(this.$clear=t('<a href="#"></a>').html(this.options.clear).click(t.proxy((function(t){t.preventDefault(),t.stopPropagation(),this.clear()}),this)),this.$tpl.parent().append(t('<div class="editable-clear">').append(this.$clear)))},value2html:function(t,i){var n=t?this.dpg.formatDate(t,this.parsedViewFormat,this.options.datepicker.language):"";e.superclass.value2html.call(this,n,i)},html2value:function(t){return this.parseDate(t,this.parsedViewFormat)},value2str:function(t){return t?this.dpg.formatDate(t,this.parsedFormat,this.options.datepicker.language):""},str2value:function(t){return this.parseDate(t,this.parsedFormat)},value2submit:function(t){return this.value2str(t)},value2input:function(t){this.$input.bdatepicker("update",t)},input2value:function(){return this.$input.data("datepicker").date},activate:function(){},clear:function(){this.$input.data("datepicker").date=null,this.$input.find(".active").removeClass("active"),this.options.showbuttons||this.$input.closest("form").submit()},autosubmit:function(){this.$input.on("mouseup",".day",(function(e){if(!t(e.currentTarget).is(".old")&&!t(e.currentTarget).is(".new")){var i=t(this).closest("form");setTimeout((function(){i.submit()}),200)}}))},parseDate:function(t,e){var i=null;return t&&(i=this.dpg.parseDate(t,e,this.options.datepicker.language),"string"==typeof t&&t!==this.dpg.formatDate(i,e,this.options.datepicker.language)&&(i=null)),i}}),e.defaults=t.extend({},t.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date well"></div>',inputclass:null,format:"yyyy-mm-dd",viewformat:null,datepicker:{weekStart:0,startView:0,minViewMode:0,autoclose:!1},clear:"&times; clear"}),t.fn.editabletypes.date=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("datefield",t,e.defaults),this.initPicker(t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.date),t.extend(e.prototype,{render:function(){this.$input=this.$tpl.find("input"),this.setClass(),this.setAttr("placeholder"),this.$tpl.bdatepicker(this.options.datepicker),this.$input.off("focus keydown"),this.$input.keyup(t.proxy((function(){this.$tpl.removeData("date"),this.$tpl.bdatepicker("update")}),this))},value2input:function(t){this.$input.val(t?this.dpg.formatDate(t,this.parsedViewFormat,this.options.datepicker.language):""),this.$tpl.bdatepicker("update")},input2value:function(){return this.html2value(this.$input.val())},activate:function(){t.fn.editabletypes.text.prototype.activate.call(this)},autosubmit:function(){}}),e.defaults=t.extend({},t.fn.editabletypes.date.defaults,{tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',inputclass:"input-small",datepicker:{weekStart:0,startView:0,minViewMode:0,autoclose:!0}}),t.fn.editabletypes.datefield=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("datetime",t,e.defaults),this.initPicker(t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.abstractinput),t.extend(e.prototype,{initPicker:function(e,i){this.options.viewformat||(this.options.viewformat=this.options.format),e.datetimepicker=t.fn.editableutils.tryParseJson(e.datetimepicker,!0),this.options.datetimepicker=t.extend({},i.datetimepicker,e.datetimepicker,{format:this.options.viewformat}),this.options.datetimepicker.language=this.options.datetimepicker.language||"en",this.dpg=t.fn.datetimepicker.DPGlobal,this.parsedFormat=this.dpg.parseFormat(this.options.format,this.options.formatType),this.parsedViewFormat=this.dpg.parseFormat(this.options.viewformat,this.options.formatType)},render:function(){this.$input.datetimepicker(this.options.datetimepicker),this.$input.on("changeMode",(function(e){var i=t(this).closest("form").parent();setTimeout((function(){i.triggerHandler("resize")}),0)})),this.options.clear&&(this.$clear=t('<a href="#"></a>').html(this.options.clear).click(t.proxy((function(t){t.preventDefault(),t.stopPropagation(),this.clear()}),this)),this.$tpl.parent().append(t('<div class="editable-clear">').append(this.$clear)))},value2html:function(t,i){var n=t?this.dpg.formatDate(this.toUTC(t),this.parsedViewFormat,this.options.datetimepicker.language,this.options.formatType):"";if(!i)return n;e.superclass.value2html.call(this,n,i)},html2value:function(t){var e=this.parseDate(t,this.parsedViewFormat);return e?this.fromUTC(e):null},value2str:function(t){return t?this.dpg.formatDate(this.toUTC(t),this.parsedFormat,this.options.datetimepicker.language,this.options.formatType):""},str2value:function(t){var e=this.parseDate(t,this.parsedFormat);return e?this.fromUTC(e):null},value2submit:function(t){return this.value2str(t)},value2input:function(t){t&&this.$input.data("datetimepicker").setDate(t)},input2value:function(){var t=this.$input.data("datetimepicker");return t.date?t.getDate():null},activate:function(){},clear:function(){this.$input.data("datetimepicker").date=null,this.$input.find(".active").removeClass("active"),this.options.showbuttons||this.$input.closest("form").submit()},autosubmit:function(){this.$input.on("mouseup",".minute",(function(e){var i=t(this).closest("form");setTimeout((function(){i.submit()}),200)}))},toUTC:function(t){return t?new Date(t.valueOf()-6e4*t.getTimezoneOffset()):t},fromUTC:function(t){return t?new Date(t.valueOf()+6e4*t.getTimezoneOffset()):t},parseDate:function(t,e){var i=null;return t&&(i=this.dpg.parseDate(t,e,this.options.datetimepicker.language,this.options.formatType),"string"==typeof t&&t!==this.dpg.formatDate(i,e,this.options.datetimepicker.language,this.options.formatType)&&(i=null)),i}}),e.defaults=t.extend({},t.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date well"></div>',inputclass:null,format:"yyyy-mm-dd hh:ii",formatType:"standard",viewformat:null,datetimepicker:{todayHighlight:!1,autoclose:!1},clear:"&times; clear"}),t.fn.editabletypes.datetime=e}(window.jQuery),function(t){"use strict";var e=function(t){this.init("datetimefield",t,e.defaults),this.initPicker(t,e.defaults)};t.fn.editableutils.inherit(e,t.fn.editabletypes.datetime),t.extend(e.prototype,{render:function(){this.$input=this.$tpl.find("input"),this.setClass(),this.setAttr("placeholder"),this.$tpl.datetimepicker(this.options.datetimepicker),this.$input.off("focus keydown"),this.$input.keyup(t.proxy((function(){this.$tpl.removeData("date"),this.$tpl.datetimepicker("update")}),this))},value2input:function(t){this.$input.val(this.value2html(t)),this.$tpl.datetimepicker("update")},input2value:function(){return this.html2value(this.$input.val())},activate:function(){t.fn.editabletypes.text.prototype.activate.call(this)},autosubmit:function(){}}),e.defaults=t.extend({},t.fn.editabletypes.datetime.defaults,{tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',inputclass:"input-medium",datetimepicker:{todayHighlight:!1,autoclose:!0}}),t.fn.editabletypes.datetimefield=e}(window.jQuery)},xexB:function(t,e,i){var n;!function(e,i){"use strict";"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,(function(i,s){"use strict";var o=[],r=Object.getPrototypeOf,a=o.slice,l=o.flat?function(t){return o.flat.call(t)}:function(t){return o.concat.apply([],t)},c=o.push,u=o.indexOf,d={},p=d.toString,h=d.hasOwnProperty,f=h.toString,m=f.call(Object),g={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function(t){return null!=t&&t===t.window},b=i.document,w={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,i){var n,s,o=(i=i||b).createElement("script");if(o.text=t,e)for(n in w)(s=e[n]||e.getAttribute&&e.getAttribute(n))&&o.setAttribute(n,s);i.head.appendChild(o).parentNode.removeChild(o)}function k(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?d[p.call(t)]||"object":typeof t}var C="3.5.1",T=function(t,e){return new T.fn.init(t,e)};function S(t){var e=!!t&&"length"in t&&t.length,i=k(t);return!v(t)&&!y(t)&&("array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}T.fn=T.prototype={jquery:C,constructor:T,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(t){return this.pushStack(T.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(T.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(0<=i&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var t,e,i,n,s,o,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||v(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(c&&n&&(T.isPlainObject(n)||(s=Array.isArray(n)))?(i=r[e],o=s&&!Array.isArray(i)?[]:s||T.isPlainObject(i)?i:{},s=!1,r[e]=T.extend(c,o,n)):void 0!==n&&(r[e]=n));return r},T.extend({expando:"jQuery"+(C+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==p.call(t)||(e=r(t))&&("function"!=typeof(i=h.call(e,"constructor")&&e.constructor)||f.call(i)!==m))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){x(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(S(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(S(Object(t))?T.merge(i,"string"==typeof t?[t]:t):c.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:u.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;n<i;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n=[],s=0,o=t.length,r=!i;s<o;s++)!e(t[s],s)!==r&&n.push(t[s]);return n},map:function(t,e,i){var n,s,o=0,r=[];if(S(t))for(n=t.length;o<n;o++)null!=(s=e(t[o],o,i))&&r.push(s);else for(o in t)null!=(s=e(t[o],o,i))&&r.push(s);return l(r)},guid:1,support:g}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){d["[object "+e+"]"]=e.toLowerCase()}));var $=function(t){var e,i,n,s,o,r,a,l,c,u,d,p,h,f,m,g,v,y,b,w="sizzle"+1*new Date,x=t.document,k=0,C=0,T=lt(),S=lt(),$=lt(),E=lt(),D=function(t,e){return t===e&&(d=!0),0},_={}.hasOwnProperty,A=[],M=A.pop,O=A.push,P=A.push,j=A.slice,L=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+N+"*("+R+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+N+"*\\]",F=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",z=new RegExp(N+"+","g"),W=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),q=new RegExp("^"+N+"*,"+N+"*"),B=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),U=new RegExp(N+"|>"),V=new RegExp(F),Y=new RegExp("^"+R+"$"),X={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\([^\\r\\n\\f])","g"),it=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){p()},rt=wt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{P.apply(A=j.call(x.childNodes),x.childNodes),A[x.childNodes.length].nodeType}catch(e){P={apply:A.length?function(t,e){O.apply(t,j.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function at(t,e,n,s){var o,a,c,u,d,f,v,y=e&&e.ownerDocument,x=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==x&&9!==x&&11!==x)return n;if(!s&&(p(e),e=e||h,m)){if(11!==x&&(d=Z.exec(t)))if(o=d[1]){if(9===x){if(!(c=e.getElementById(o)))return n;if(c.id===o)return n.push(c),n}else if(y&&(c=y.getElementById(o))&&b(e,c)&&c.id===o)return n.push(c),n}else{if(d[2])return P.apply(n,e.getElementsByTagName(t)),n;if((o=d[3])&&i.getElementsByClassName&&e.getElementsByClassName)return P.apply(n,e.getElementsByClassName(o)),n}if(i.qsa&&!E[t+" "]&&(!g||!g.test(t))&&(1!==x||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===x&&(U.test(t)||B.test(t))){for((y=tt.test(t)&&vt(e.parentNode)||e)===e&&i.scope||((u=e.getAttribute("id"))?u=u.replace(nt,st):e.setAttribute("id",u=w)),a=(f=r(t)).length;a--;)f[a]=(u?"#"+u:":scope")+" "+bt(f[a]);v=f.join(",")}try{return P.apply(n,y.querySelectorAll(v)),n}catch(e){E(t,!0)}finally{u===w&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,n,s)}function lt(){var t=[];return function e(i,s){return t.push(i+" ")>n.cacheLength&&delete e[t.shift()],e[i+" "]=s}}function ct(t){return t[w]=!0,t}function ut(t){var e=h.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function dt(t,e){for(var i=t.split("|"),s=i.length;s--;)n.attrHandle[i[s]]=e}function pt(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function ht(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function mt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function gt(t){return ct((function(e){return e=+e,ct((function(i,n){for(var s,o=t([],i.length,e),r=o.length;r--;)i[s=o[r]]&&(i[s]=!(n[s]=i[s]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in i=at.support={},o=at.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!G.test(e||i&&i.nodeName||"HTML")},p=at.setDocument=function(t){var e,s,r=t?t.ownerDocument||t:x;return r!=h&&9===r.nodeType&&r.documentElement&&(f=(h=r).documentElement,m=!o(h),x!=h&&(s=h.defaultView)&&s.top!==s&&(s.addEventListener?s.addEventListener("unload",ot,!1):s.attachEvent&&s.attachEvent("onunload",ot)),i.scope=ut((function(t){return f.appendChild(t).appendChild(h.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),i.attributes=ut((function(t){return t.className="i",!t.getAttribute("className")})),i.getElementsByTagName=ut((function(t){return t.appendChild(h.createComment("")),!t.getElementsByTagName("*").length})),i.getElementsByClassName=J.test(h.getElementsByClassName),i.getById=ut((function(t){return f.appendChild(t).id=w,!h.getElementsByName||!h.getElementsByName(w).length})),i.getById?(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var i=e.getElementById(t);return i?[i]:[]}}):(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var i,n,s,o=e.getElementById(t);if(o){if((i=o.getAttributeNode("id"))&&i.value===t)return[o];for(s=e.getElementsByName(t),n=0;o=s[n++];)if((i=o.getAttributeNode("id"))&&i.value===t)return[o]}return[]}}),n.find.TAG=i.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):i.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],s=0,o=e.getElementsByTagName(t);if("*"===t){for(;i=o[s++];)1===i.nodeType&&n.push(i);return n}return o},n.find.CLASS=i.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&m)return e.getElementsByClassName(t)},v=[],g=[],(i.qsa=J.test(h.querySelectorAll))&&(ut((function(t){var e;f.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+N+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+N+"*(?:value|"+I+")"),t.querySelectorAll("[id~="+w+"-]").length||g.push("~="),(e=h.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\["+N+"*name"+N+"*="+N+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ut((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=h.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+N+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")}))),(i.matchesSelector=J.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut((function(t){i.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",F)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(f.compareDocumentPosition),b=e||J.test(f.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},D=e?function(t,e){if(t===e)return d=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!i.sortDetached&&e.compareDocumentPosition(t)===n?t==h||t.ownerDocument==x&&b(x,t)?-1:e==h||e.ownerDocument==x&&b(x,e)?1:u?L(u,t)-L(u,e):0:4&n?-1:1)}:function(t,e){if(t===e)return d=!0,0;var i,n=0,s=t.parentNode,o=e.parentNode,r=[t],a=[e];if(!s||!o)return t==h?-1:e==h?1:s?-1:o?1:u?L(u,t)-L(u,e):0;if(s===o)return pt(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?pt(r[n],a[n]):r[n]==x?-1:a[n]==x?1:0}),h},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(p(t),i.matchesSelector&&m&&!E[e+" "]&&(!v||!v.test(e))&&(!g||!g.test(e)))try{var n=y.call(t,e);if(n||i.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){E(e,!0)}return 0<at(e,h,null,[t]).length},at.contains=function(t,e){return(t.ownerDocument||t)!=h&&p(t),b(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=h&&p(t);var s=n.attrHandle[e.toLowerCase()],o=s&&_.call(n.attrHandle,e.toLowerCase())?s(t,e,!m):void 0;return void 0!==o?o:i.attributes||!m?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(nt,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,n=[],s=0,o=0;if(d=!i.detectDuplicates,u=!i.sortStable&&t.slice(0),t.sort(D),d){for(;e=t[o++];)e===t[o]&&(s=n.push(o));for(;s--;)t.splice(n[s],1)}return u=null,t},s=at.getText=function(t){var e,i="",n=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[n++];)i+=s(e);return i},(n=at.selectors={cacheLength:50,createPseudo:ct,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,it),t[3]=(t[3]||t[4]||t[5]||"").replace(et,it),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&V.test(i)&&(e=r(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,it).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=T[t+" "];return e||(e=new RegExp("(^|"+N+")"+t+"("+N+"|$)"))&&T(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var s=at.attr(n,t);return null==s?"!="===e:!e||(s+="","="===e?s===i:"!="===e?s!==i:"^="===e?i&&0===s.indexOf(i):"*="===e?i&&-1<s.indexOf(i):"$="===e?i&&s.slice(-i.length)===i:"~="===e?-1<(" "+s.replace(z," ")+" ").indexOf(i):"|="===e&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var c,u,d,p,h,f,m=o!==r?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(o){for(;m;){for(p=e;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(b=(h=(c=(u=(d=(p=g)[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[t]||[])[0]===k&&c[1])&&c[2],p=h&&g.childNodes[h];p=++h&&p&&p[m]||(b=h=0)||f.pop();)if(1===p.nodeType&&++b&&p===e){u[t]=[k,h,b];break}}else if(y&&(b=h=(c=(u=(d=(p=e)[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[t]||[])[0]===k&&c[1]),!1===b)for(;(p=++h&&p&&p[m]||(b=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((u=(d=p[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[t]=[k,b]),p!==e)););return(b-=s)===n||b%n==0&&0<=b/n}}},PSEUDO:function(t,e){var i,s=n.pseudos[t]||n.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return s[w]?s(e):1<s.length?(i=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,i){for(var n,o=s(t,e),r=o.length;r--;)t[n=L(t,o[r])]=!(i[n]=o[r])})):function(t){return s(t,0,i)}):s}},pseudos:{not:ct((function(t){var e=[],i=[],n=a(t.replace(W,"$1"));return n[w]?ct((function(t,e,i,s){for(var o,r=n(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))})):function(t,s,o){return e[0]=t,n(e,null,o,i),e[0]=null,!i.pop()}})),has:ct((function(t){return function(e){return 0<at(t,e).length}})),contains:ct((function(t){return t=t.replace(et,it),function(e){return-1<(e.textContent||s(e)).indexOf(t)}})),lang:ct((function(t){return Y.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,it).toLowerCase(),function(e){var i;do{if(i=m?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:mt(!1),disabled:mt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt((function(){return[0]})),last:gt((function(t,e){return[e-1]})),eq:gt((function(t,e,i){return[i<0?i+e:i]})),even:gt((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:gt((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:gt((function(t,e,i){for(var n=i<0?i+e:e<i?e:i;0<=--n;)t.push(n);return t})),gt:gt((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=ht(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=ft(e);function yt(){}function bt(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function wt(t,e,i){var n=e.dir,s=e.next,o=s||n,r=i&&"parentNode"===o,a=C++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||r)return t(e,i,s);return!1}:function(e,i,l){var c,u,d,p=[k,a];if(l){for(;e=e[n];)if((1===e.nodeType||r)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||r)if(u=(d=e[w]||(e[w]={}))[e.uniqueID]||(d[e.uniqueID]={}),s&&s===e.nodeName.toLowerCase())e=e[n]||e;else{if((c=u[o])&&c[0]===k&&c[1]===a)return p[2]=c[2];if((u[o]=p)[2]=t(e,i,l))return!0}return!1}}function xt(t){return 1<t.length?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function kt(t,e,i,n,s){for(var o,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,n,s)||(r.push(o),c&&e.push(a)));return r}function Ct(t,e,i,n,s,o){return n&&!n[w]&&(n=Ct(n)),s&&!s[w]&&(s=Ct(s,o)),ct((function(o,r,a,l){var c,u,d,p=[],h=[],f=r.length,m=o||function(t,e,i){for(var n=0,s=e.length;n<s;n++)at(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),g=!t||!o&&e?m:kt(m,p,t,a,l),v=i?s||(o?t:f||n)?[]:r:g;if(i&&i(g,v,a,l),n)for(c=kt(v,h),n(c,[],a,l),u=c.length;u--;)(d=c[u])&&(v[h[u]]=!(g[h[u]]=d));if(o){if(s||t){if(s){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(g[u]=d);s(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&-1<(c=s?L(o,d):p[u])&&(o[c]=!(r[c]=d))}}else v=kt(v===r?v.splice(f,v.length):v),s?s(null,r,v,l):P.apply(r,v)}))}function Tt(t){for(var e,i,s,o=t.length,r=n.relative[t[0].type],a=r||n.relative[" "],l=r?1:0,u=wt((function(t){return t===e}),a,!0),d=wt((function(t){return-1<L(e,t)}),a,!0),p=[function(t,i,n){var s=!r&&(n||i!==c)||((e=i).nodeType?u(t,i,n):d(t,i,n));return e=null,s}];l<o;l++)if(i=n.relative[t[l].type])p=[wt(xt(p),i)];else{if((i=n.filter[t[l].type].apply(null,t[l].matches))[w]){for(s=++l;s<o&&!n.relative[t[s].type];s++);return Ct(1<l&&xt(p),1<l&&bt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),i,l<s&&Tt(t.slice(l,s)),s<o&&Tt(t=t.slice(s)),s<o&&bt(t))}p.push(i)}return xt(p)}return yt.prototype=n.filters=n.pseudos,n.setFilters=new yt,r=at.tokenize=function(t,e){var i,s,o,r,a,l,c,u=S[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],c=n.preFilter;a;){for(r in i&&!(s=q.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),i=!1,(s=B.exec(a))&&(i=s.shift(),o.push({value:i,type:s[0].replace(W," ")}),a=a.slice(i.length)),n.filter)!(s=X[r].exec(a))||c[r]&&!(s=c[r](s))||(i=s.shift(),o.push({value:i,type:r,matches:s}),a=a.slice(i.length));if(!i)break}return e?a.length:a?at.error(t):S(t,l).slice(0)},a=at.compile=function(t,e){var i,s,o,a,l,u,d=[],f=[],g=$[t+" "];if(!g){for(e||(e=r(t)),i=e.length;i--;)(g=Tt(e[i]))[w]?d.push(g):f.push(g);(g=$(t,(s=f,a=0<(o=d).length,l=0<s.length,u=function(t,e,i,r,u){var d,f,g,v=0,y="0",b=t&&[],w=[],x=c,C=t||l&&n.find.TAG("*",u),T=k+=null==x?1:Math.random()||.1,S=C.length;for(u&&(c=e==h||e||u);y!==S&&null!=(d=C[y]);y++){if(l&&d){for(f=0,e||d.ownerDocument==h||(p(d),i=!m);g=s[f++];)if(g(d,e||h,i)){r.push(d);break}u&&(k=T)}a&&((d=!g&&d)&&v--,t&&b.push(d))}if(v+=y,a&&y!==v){for(f=0;g=o[f++];)g(b,w,e,i);if(t){if(0<v)for(;y--;)b[y]||w[y]||(w[y]=M.call(r));w=kt(w)}P.apply(r,w),u&&!t&&0<w.length&&1<v+o.length&&at.uniqueSort(r)}return u&&(k=T,c=x),b},a?ct(u):u))).selector=t}return g},l=at.select=function(t,e,i,s){var o,l,c,u,d,p="function"==typeof t&&t,h=!s&&r(t=p.selector||t);if(i=i||[],1===h.length){if(2<(l=h[0]=h[0].slice(0)).length&&"ID"===(c=l[0]).type&&9===e.nodeType&&m&&n.relative[l[1].type]){if(!(e=(n.find.ID(c.matches[0].replace(et,it),e)||[])[0]))return i;p&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(o=X.needsContext.test(t)?0:l.length;o--&&(c=l[o],!n.relative[u=c.type]);)if((d=n.find[u])&&(s=d(c.matches[0].replace(et,it),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(o,1),!(t=s.length&&bt(l)))return P.apply(i,s),i;break}}return(p||a(t,h))(s,e,!m,i,!e||tt.test(t)&&vt(e.parentNode)||e),i},i.sortStable=w.split("").sort(D).join("")===w,i.detectDuplicates=!!d,p(),i.sortDetached=ut((function(t){return 1&t.compareDocumentPosition(h.createElement("fieldset"))})),ut((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||dt("type|href|height|width",(function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),i.attributes&&ut((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||dt("value",(function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ut((function(t){return null==t.getAttribute("disabled")}))||dt(I,(function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null})),at}(i);T.find=$,T.expr=$.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=$.uniqueSort,T.text=$.getText,T.isXMLDoc=$.isXML,T.contains=$.contains,T.escapeSelector=$.escape;var E=function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&T(t).is(i))break;n.push(t)}return n},D=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},_=T.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,e,i){return v(e)?T.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?T.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?T.grep(t,(function(t){return-1<u.call(e,t)!==i})):T.filter(e,t,i)}T.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?T.find.matchesSelector(n,t)?[n]:[]:T.find.matches(t,T.grep(e,(function(t){return 1===t.nodeType})))},T.fn.extend({find:function(t){var e,i,n=this.length,s=this;if("string"!=typeof t)return this.pushStack(T(t).filter((function(){for(e=0;e<n;e++)if(T.contains(s[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)T.find(t,s[e],i);return 1<n?T.uniqueSort(i):i},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&_.test(t)?T(t):t||[],!1).length}});var P,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,i){var n,s;if(!t)return this;if(i=i||P,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:j.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:b,!0)),M.test(n[1])&&T.isPlainObject(e))for(n in e)v(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(s=b.getElementById(n[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==i.ready?i.ready(t):t(T):T.makeArray(t,this)}).prototype=T.fn,P=T(b);var L=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function N(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(T.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,s=this.length,o=[],r="string"!=typeof t&&T(t);if(!_.test(t))for(;n<s;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&T.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(1<o.length?T.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?u.call(T(t),this[0]):u.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return E(t,"parentNode")},parentsUntil:function(t,e,i){return E(t,"parentNode",i)},next:function(t){return N(t,"nextSibling")},prev:function(t){return N(t,"previousSibling")},nextAll:function(t){return E(t,"nextSibling")},prevAll:function(t){return E(t,"previousSibling")},nextUntil:function(t,e,i){return E(t,"nextSibling",i)},prevUntil:function(t,e,i){return E(t,"previousSibling",i)},siblings:function(t){return D((t.parentNode||{}).firstChild,t)},children:function(t){return D(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(A(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},(function(t,e){T.fn[t]=function(i,n){var s=T.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=T.filter(n,s)),1<this.length&&(I[t]||T.uniqueSort(s),L.test(t)&&s.reverse()),this.pushStack(s)}}));var R=/[^\x20\t\r\n\f]+/g;function H(t){return t}function F(t){throw t}function z(t,e,i,n){var s;try{t&&v(s=t.promise)?s.call(t).done(e).fail(i):t&&v(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}T.Callbacks=function(t){var e,i;t="string"==typeof t?(e=t,i={},T.each(e.match(R)||[],(function(t,e){i[e]=!0})),i):T.extend({},t);var n,s,o,r,a=[],l=[],c=-1,u=function(){for(r=r||t.once,o=n=!0;l.length;c=-1)for(s=l.shift();++c<a.length;)!1===a[c].apply(s[0],s[1])&&t.stopOnFalse&&(c=a.length,s=!1);t.memory||(s=!1),n=!1,r&&(a=s?[]:"")},d={add:function(){return a&&(s&&!n&&(c=a.length-1,l.push(s)),function e(i){T.each(i,(function(i,n){v(n)?t.unique&&d.has(n)||a.push(n):n&&n.length&&"string"!==k(n)&&e(n)}))}(arguments),s&&!n&&u()),this},remove:function(){return T.each(arguments,(function(t,e){for(var i;-1<(i=T.inArray(e,a,i));)a.splice(i,1),i<=c&&c--})),this},has:function(t){return t?-1<T.inArray(t,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return r=l=[],a=s="",this},disabled:function(){return!a},lock:function(){return r=l=[],s||n||(a=s=""),this},locked:function(){return!!r},fireWith:function(t,e){return r||(e=[t,(e=e||[]).slice?e.slice():e],l.push(e),n||u()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!o}};return d},T.extend({Deferred:function(t){var e=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],n="pending",s={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return T.Deferred((function(i){T.each(e,(function(e,n){var s=v(t[n[4]])&&t[n[4]];o[n[1]]((function(){var t=s&&s.apply(this,arguments);t&&v(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,s?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,s){var o=0;function r(t,e,n,s){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(t<o)){if((i=n.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?s?c.call(i,r(o,e,H,s),r(o,e,F,s)):(o++,c.call(i,r(o,e,H,s),r(o,e,F,s),r(o,e,H,e.notifyWith))):(n!==H&&(a=void 0,l=[i]),(s||e.resolveWith)(a,l))}},u=s?c:function(){try{c()}catch(i){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(i,u.stackTrace),o<=t+1&&(n!==F&&(a=void 0,l=[i]),e.rejectWith(a,l))}};t?u():(T.Deferred.getStackHook&&(u.stackTrace=T.Deferred.getStackHook()),i.setTimeout(u))}}return T.Deferred((function(i){e[0][3].add(r(0,i,v(s)?s:H,i.notifyWith)),e[1][3].add(r(0,i,v(t)?t:H)),e[2][3].add(r(0,i,v(n)?n:F))})).promise()},promise:function(t){return null!=t?T.extend(t,s):s}},o={};return T.each(e,(function(t,i){var r=i[2],a=i[5];s[i[1]]=r.add,a&&r.add((function(){n=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),r.add(i[3].fire),o[i[0]]=function(){return o[i[0]+"With"](this===o?void 0:this,arguments),this},o[i[0]+"With"]=r.fireWith})),s.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,i=e,n=Array(i),s=a.call(arguments),o=T.Deferred(),r=function(t){return function(i){n[t]=this,s[t]=1<arguments.length?a.call(arguments):i,--e||o.resolveWith(n,s)}};if(e<=1&&(z(t,o.done(r(i)).resolve,o.reject,!e),"pending"===o.state()||v(s[i]&&s[i].then)))return o.then();for(;i--;)z(s[i],r(i),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){i.console&&i.console.warn&&t&&W.test(t.name)&&i.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){i.setTimeout((function(){throw t}))};var q=T.Deferred();function B(){b.removeEventListener("DOMContentLoaded",B),i.removeEventListener("load",B),T.ready()}T.fn.ready=function(t){return q.then(t).catch((function(t){T.readyException(t)})),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0)!==t&&0<--T.readyWait||q.resolveWith(b,[T])}}),T.ready.then=q.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(T.ready):(b.addEventListener("DOMContentLoaded",B),i.addEventListener("load",B));var U=function(t,e,i,n,s,o,r){var a=0,l=t.length,c=null==i;if("object"===k(i))for(a in s=!0,i)U(t,e,a,i[a],!0,o,r);else if(void 0!==n&&(s=!0,v(n)||(r=!0),c&&(r?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(T(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return s?t:c?e.call(t):l?e(t[0],i):o},V=/^-ms-/,Y=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function G(t){return t.replace(V,"ms-").replace(Y,X)}var K=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=T.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},K(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,s=this.cache(t);if("string"==typeof e)s[G(e)]=i;else for(n in e)s[G(n)]=e[n];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][G(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(G):(e=G(e))in n?[e]:e.match(R)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||T.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var J=new Q,Z=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function it(t,e,i){var n,s;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i="true"===(s=i)||"false"!==s&&("null"===s?null:s===+s+""?+s:tt.test(s)?JSON.parse(s):s)}catch(t){}Z.set(t,e,i)}else i=void 0;return i}T.extend({hasData:function(t){return Z.hasData(t)||J.hasData(t)},data:function(t,e,i){return Z.access(t,e,i)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,i){return J.access(t,e,i)},_removeData:function(t,e){J.remove(t,e)}}),T.fn.extend({data:function(t,e){var i,n,s,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(s=Z.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=G(n.slice(5)),it(o,n,s[n]));J.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each((function(){Z.set(this,t)})):U(this,(function(e){var i;if(o&&void 0===e)return void 0!==(i=Z.get(o,t))||void 0!==(i=it(o,t))?i:void 0;this.each((function(){Z.set(this,t,e)}))}),null,e,1<arguments.length,null,!0)},removeData:function(t){return this.each((function(){Z.remove(this,t)}))}}),T.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=J.get(t,e),i&&(!n||Array.isArray(i)?n=J.access(t,e,T.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=T.queue(t,e),n=i.length,s=i.shift(),o=T._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete o.stop,s.call(t,(function(){T.dequeue(t,e)}),o)),!n&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return J.get(t,i)||J.access(t,i,{empty:T.Callbacks("once memory").add((function(){J.remove(t,[e+"queue",i])}))})}}),T.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?T.queue(this[0],t):void 0===e?this:this.each((function(){var i=T.queue(this,t,e);T._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&T.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){T.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=T.Deferred(),o=this,r=this.length,a=function(){--n||s.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=J.get(o[r],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var nt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,st=new RegExp("^(?:([+-])=|)("+nt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],rt=b.documentElement,at=function(t){return T.contains(t.ownerDocument,t)},lt={composed:!0};rt.getRootNode&&(at=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ct=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===T.css(t,"display")};function ut(t,e,i,n){var s,o,r=20,a=n?function(){return n.cur()}:function(){return T.css(t,e,"")},l=a(),c=i&&i[3]||(T.cssNumber[e]?"":"px"),u=t.nodeType&&(T.cssNumber[e]||"px"!==c&&+l)&&st.exec(T.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;r--;)T.style(t,e,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(r=0),u/=o;u*=2,T.style(t,e,u+c),i=i||[]}return i&&(u=+u||+l||0,s=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=u,n.end=s)),s}var dt={};function pt(t,e){for(var i,n,s,o,r,a,l,c=[],u=0,d=t.length;u<d;u++)(n=t[u]).style&&(i=n.style.display,e?("none"===i&&(c[u]=J.get(n,"display")||null,c[u]||(n.style.display="")),""===n.style.display&&ct(n)&&(c[u]=(l=r=o=void 0,r=(s=n).ownerDocument,a=s.nodeName,(l=dt[a])||(o=r.body.appendChild(r.createElement(a)),l=T.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),dt[a]=l)))):"none"!==i&&(c[u]="none",J.set(n,"display",i)));for(u=0;u<d;u++)null!=c[u]&&(t[u].style.display=c[u]);return t}T.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ct(this)?T(this).show():T(this).hide()}))}});var ht,ft,mt=/^(?:checkbox|radio)$/i,gt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,vt=/^$|^module$|\/(?:java|ecma)script/i;ht=b.createDocumentFragment().appendChild(b.createElement("div")),(ft=b.createElement("input")).setAttribute("type","radio"),ft.setAttribute("checked","checked"),ft.setAttribute("name","t"),ht.appendChild(ft),g.checkClone=ht.cloneNode(!0).cloneNode(!0).lastChild.checked,ht.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!ht.cloneNode(!0).lastChild.defaultValue,ht.innerHTML="<option></option>",g.option=!!ht.lastChild;var yt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function bt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?T.merge([t],i):i}function wt(t,e){for(var i=0,n=t.length;i<n;i++)J.set(t[i],"globalEval",!e||J.get(e[i],"globalEval"))}yt.tbody=yt.tfoot=yt.colgroup=yt.caption=yt.thead,yt.th=yt.td,g.option||(yt.optgroup=yt.option=[1,"<select multiple='multiple'>","</select>"]);var xt=/<|&#?\w+;/;function kt(t,e,i,n,s){for(var o,r,a,l,c,u,d=e.createDocumentFragment(),p=[],h=0,f=t.length;h<f;h++)if((o=t[h])||0===o)if("object"===k(o))T.merge(p,o.nodeType?[o]:o);else if(xt.test(o)){for(r=r||d.appendChild(e.createElement("div")),a=(gt.exec(o)||["",""])[1].toLowerCase(),l=yt[a]||yt._default,r.innerHTML=l[1]+T.htmlPrefilter(o)+l[2],u=l[0];u--;)r=r.lastChild;T.merge(p,r.childNodes),(r=d.firstChild).textContent=""}else p.push(e.createTextNode(o));for(d.textContent="",h=0;o=p[h++];)if(n&&-1<T.inArray(o,n))s&&s.push(o);else if(c=at(o),r=bt(d.appendChild(o),"script"),c&&wt(r),i)for(u=0;o=r[u++];)vt.test(o.type||"")&&i.push(o);return d}var Ct=/^key/,Tt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,St=/^([^.]*)(?:\.(.+)|)/;function $t(){return!0}function Et(){return!1}function Dt(t,e){return t===function(){try{return b.activeElement}catch(t){}}()==("focus"===e)}function _t(t,e,i,n,s,o){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)_t(t,a,i,n,e[a],o);return t}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Et;else if(!s)return t;return 1===o&&(r=s,(s=function(t){return T().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=T.guid++)),t.each((function(){T.event.add(this,e,s,n,i)}))}function At(t,e,i){i?(J.set(t,e,!1),T.event.add(t,e,{namespace:!1,handler:function(t){var n,s,o=J.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(T.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=a.call(arguments),J.set(this,e,o),n=i(this,e),this[e](),o!==(s=J.get(this,e))||n?J.set(this,e,!1):s={},o!==s)return t.stopImmediatePropagation(),t.preventDefault(),s.value}else o.length&&(J.set(this,e,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&T.event.add(t,e,$t)}T.event={global:{},add:function(t,e,i,n,s){var o,r,a,l,c,u,d,p,h,f,m,g=J.get(t);if(K(t))for(i.handler&&(i=(o=i).handler,s=o.selector),s&&T.find.matchesSelector(rt,s),i.guid||(i.guid=T.guid++),(l=g.events)||(l=g.events=Object.create(null)),(r=g.handle)||(r=g.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(R)||[""]).length;c--;)h=m=(a=St.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),h&&(d=T.event.special[h]||{},h=(s?d.delegateType:d.bindType)||h,d=T.event.special[h]||{},u=T.extend({type:h,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&T.expr.match.needsContext.test(s),namespace:f.join(".")},o),(p=l[h])||((p=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(h,r)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),s?p.splice(p.delegateCount++,0,u):p.push(u),T.event.global[h]=!0)},remove:function(t,e,i,n,s){var o,r,a,l,c,u,d,p,h,f,m,g=J.hasData(t)&&J.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(R)||[""]).length;c--;)if(h=m=(a=St.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),h){for(d=T.event.special[h]||{},p=l[h=(n?d.delegateType:d.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=p.length;o--;)u=p[o],!s&&m!==u.origType||i&&i.guid!==u.guid||a&&!a.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(t,u));r&&!p.length&&(d.teardown&&!1!==d.teardown.call(t,f,g.handle)||T.removeEvent(t,h,g.handle),delete l[h])}else for(h in l)T.event.remove(t,h+e[c],i,n,!0);T.isEmptyObject(l)&&J.remove(t,"handle events")}},dispatch:function(t){var e,i,n,s,o,r,a=new Array(arguments.length),l=T.event.fix(t),c=(J.get(this,"events")||Object.create(null))[l.type]||[],u=T.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(r=T.event.handlers.call(this,l,c),e=0;(s=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(o=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(n=((T.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,s,o,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],r={},i=0;i<l;i++)void 0===r[s=(n=e[i]).selector+" "]&&(r[s]=n.needsContext?-1<T(s,this).index(c):T.find(s,this,null,[c]).length),r[s]&&o.push(n);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(T.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return mt.test(e.type)&&e.click&&A(e,"input")&&At(e,"click",$t),!1},trigger:function(t){var e=this||t;return mt.test(e.type)&&e.click&&A(e,"input")&&At(e,"click"),!0},_default:function(t){var e=t.target;return mt.test(e.type)&&e.click&&A(e,"input")&&J.get(e,"click")||A(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?$t:Et,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Et,isPropagationStopped:Et,isImmediatePropagationStopped:Et,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=$t,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=$t,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=$t,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Tt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(t,e){T.event.special[t]={setup:function(){return At(this,t,Dt),!1},trigger:function(){return At(this,t),!0},delegateType:e}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){T.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=t.relatedTarget,s=t.handleObj;return n&&(n===this||T.contains(this,n))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}})),T.fn.extend({on:function(t,e,i,n){return _t(this,t,e,i,n)},one:function(t,e,i,n){return _t(this,t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,T(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Et),this.each((function(){T.event.remove(this,t,i,e)}))}});var Mt=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,Pt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function jt(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function Lt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function It(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Nt(t,e){var i,n,s,o,r,a;if(1===e.nodeType){if(J.hasData(t)&&(a=J.get(t).events))for(s in J.remove(e,"handle events"),a)for(i=0,n=a[s].length;i<n;i++)T.event.add(e,s,a[s][i]);Z.hasData(t)&&(o=Z.access(t),r=T.extend({},o),Z.set(e,r))}}function Rt(t,e,i,n){e=l(e);var s,o,r,a,c,u,d=0,p=t.length,h=p-1,f=e[0],m=v(f);if(m||1<p&&"string"==typeof f&&!g.checkClone&&Ot.test(f))return t.each((function(s){var o=t.eq(s);m&&(e[0]=f.call(this,s,o.html())),Rt(o,e,i,n)}));if(p&&(o=(s=kt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===s.childNodes.length&&(s=o),o||n)){for(a=(r=T.map(bt(s,"script"),Lt)).length;d<p;d++)c=s,d!==h&&(c=T.clone(c,!0,!0),a&&T.merge(r,bt(c,"script"))),i.call(t[d],c,d);if(a)for(u=r[r.length-1].ownerDocument,T.map(r,It),d=0;d<a;d++)c=r[d],vt.test(c.type||"")&&!J.access(c,"globalEval")&&T.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?T._evalUrl&&!c.noModule&&T._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):x(c.textContent.replace(Pt,""),c,u))}return t}function Ht(t,e,i){for(var n,s=e?T.filter(e,t):t,o=0;null!=(n=s[o]);o++)i||1!==n.nodeType||T.cleanData(bt(n)),n.parentNode&&(i&&at(n)&&wt(bt(n,"script")),n.parentNode.removeChild(n));return t}T.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,s,o,r,a,l,c,u=t.cloneNode(!0),d=at(t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(r=bt(u),n=0,s=(o=bt(t)).length;n<s;n++)a=o[n],"input"===(c=(l=r[n]).nodeName.toLowerCase())&&mt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(i)for(o=o||bt(t),r=r||bt(u),n=0,s=o.length;n<s;n++)Nt(o[n],r[n]);else Nt(t,u);return 0<(r=bt(u,"script")).length&&wt(r,!d&&bt(t,"script")),u},cleanData:function(t){for(var e,i,n,s=T.event.special,o=0;void 0!==(i=t[o]);o++)if(K(i)){if(e=i[J.expando]){if(e.events)for(n in e.events)s[n]?T.event.remove(i,n):T.removeEvent(i,n,e.handle);i[J.expando]=void 0}i[Z.expando]&&(i[Z.expando]=void 0)}}}),T.fn.extend({detach:function(t){return Ht(this,t,!0)},remove:function(t){return Ht(this,t)},text:function(t){return U(this,(function(t){return void 0===t?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Rt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||jt(this,t).appendChild(t)}))},prepend:function(){return Rt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=jt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Rt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Rt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(bt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return T.clone(this,t,e)}))},html:function(t){return U(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Mt.test(t)&&!yt[(gt.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(T.cleanData(bt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Rt(this,arguments,(function(e){var i=this.parentNode;T.inArray(this,t)<0&&(T.cleanData(bt(this)),i&&i.replaceChild(e,this))}),t)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){T.fn[t]=function(t){for(var i,n=[],s=T(t),o=s.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),T(s[r])[e](i),c.apply(n,i.get());return this.pushStack(n)}}));var Ft=new RegExp("^("+nt+")(?!px)[a-z%]+$","i"),zt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=i),e.getComputedStyle(t)},Wt=function(t,e,i){var n,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in n=i.call(t),e)t.style[s]=o[s];return n},qt=new RegExp(ot.join("|"),"i");function Bt(t,e,i){var n,s,o,r,a=t.style;return(i=i||zt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||at(t)||(r=T.style(t,e)),!g.pixelBoxStyles()&&Ft.test(r)&&qt.test(e)&&(n=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=s,a.maxWidth=o)),void 0!==r?r+"":r}function Ut(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",rt.appendChild(c).appendChild(u);var t=i.getComputedStyle(u);n="1%"!==t.top,l=12===e(t.marginLeft),u.style.right="60%",r=36===e(t.right),s=36===e(t.width),u.style.position="absolute",o=12===e(u.offsetWidth/3),rt.removeChild(c),u=null}}function e(t){return Math.round(parseFloat(t))}var n,s,o,r,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,T.extend(g,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),r},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o},reliableTrDimensions:function(){var t,e,n,s;return null==a&&(t=b.createElement("table"),e=b.createElement("tr"),n=b.createElement("div"),t.style.cssText="position:absolute;left:-11111px",e.style.height="1px",n.style.height="9px",rt.appendChild(t).appendChild(e).appendChild(n),s=i.getComputedStyle(e),a=3<parseInt(s.height),rt.removeChild(t)),a}}))}();var Vt=["Webkit","Moz","ms"],Yt=b.createElement("div").style,Xt={};function Gt(t){return T.cssProps[t]||Xt[t]||(t in Yt?t:Xt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=Vt.length;i--;)if((t=Vt[i]+e)in Yt)return t}(t)||t)}var Kt=/^(none|table(?!-c[ea]).+)/,Qt=/^--/,Jt={position:"absolute",visibility:"hidden",display:"block"},Zt={letterSpacing:"0",fontWeight:"400"};function te(t,e,i){var n=st.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function ee(t,e,i,n,s,o){var r="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=T.css(t,i+ot[r],!0,s)),n?("content"===i&&(l-=T.css(t,"padding"+ot[r],!0,s)),"margin"!==i&&(l-=T.css(t,"border"+ot[r]+"Width",!0,s))):(l+=T.css(t,"padding"+ot[r],!0,s),"padding"!==i?l+=T.css(t,"border"+ot[r]+"Width",!0,s):a+=T.css(t,"border"+ot[r]+"Width",!0,s));return!n&&0<=o&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-a-.5))||0),l}function ie(t,e,i){var n=zt(t),s=(!g.boxSizingReliable()||i)&&"border-box"===T.css(t,"boxSizing",!1,n),o=s,r=Bt(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(Ft.test(r)){if(!i)return r;r="auto"}return(!g.boxSizingReliable()&&s||!g.reliableTrDimensions()&&A(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===T.css(t,"display",!1,n))&&t.getClientRects().length&&(s="border-box"===T.css(t,"boxSizing",!1,n),(o=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+ee(t,e,i||(s?"border":"content"),o,n,r)+"px"}function ne(t,e,i,n,s){return new ne.prototype.init(t,e,i,n,s)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Bt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,o,r,a=G(e),l=Qt.test(e),c=t.style;if(l||(e=Gt(a)),r=T.cssHooks[e]||T.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(t,!1,n))?s:c[e];"string"==(o=typeof i)&&(s=st.exec(i))&&s[1]&&(i=ut(t,e,s),o="number"),null!=i&&i==i&&("number"!==o||l||(i+=s&&s[3]||(T.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var s,o,r,a=G(e);return Qt.test(e)||(e=Gt(a)),(r=T.cssHooks[e]||T.cssHooks[a])&&"get"in r&&(s=r.get(t,!0,i)),void 0===s&&(s=Bt(t,e,n)),"normal"===s&&e in Zt&&(s=Zt[e]),""===i||i?(o=parseFloat(s),!0===i||isFinite(o)?o||0:s):s}}),T.each(["height","width"],(function(t,e){T.cssHooks[e]={get:function(t,i,n){if(i)return!Kt.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ie(t,e,n):Wt(t,Jt,(function(){return ie(t,e,n)}))},set:function(t,i,n){var s,o=zt(t),r=!g.scrollboxSize()&&"absolute"===o.position,a=(r||n)&&"border-box"===T.css(t,"boxSizing",!1,o),l=n?ee(t,e,n,a,o):0;return a&&r&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ee(t,e,"border",!1,o)-.5)),l&&(s=st.exec(i))&&"px"!==(s[3]||"px")&&(t.style[e]=i,i=T.css(t,e)),te(0,i,l)}}})),T.cssHooks.marginLeft=Ut(g.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Bt(t,"marginLeft"))||t.getBoundingClientRect().left-Wt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(t,e){T.cssHooks[t+e]={expand:function(i){for(var n=0,s={},o="string"==typeof i?i.split(" "):[i];n<4;n++)s[t+ot[n]+e]=o[n]||o[n-2]||o[0];return s}},"margin"!==t&&(T.cssHooks[t+e].set=te)})),T.fn.extend({css:function(t,e){return U(this,(function(t,e,i){var n,s,o={},r=0;if(Array.isArray(e)){for(n=zt(t),s=e.length;r<s;r++)o[e[r]]=T.css(t,e[r],!1,n);return o}return void 0!==i?T.style(t,e,i):T.css(t,e)}),t,e,1<arguments.length)}}),((T.Tween=ne).prototype={constructor:ne,init:function(t,e,i,n,s,o){this.elem=t,this.prop=i,this.easing=s||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=o||(T.cssNumber[i]?"":"px")},cur:function(){var t=ne.propHooks[this.prop];return t&&t.get?t.get(this):ne.propHooks._default.get(this)},run:function(t){var e,i=ne.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ne.propHooks._default.set(this),this}}).init.prototype=ne.prototype,(ne.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[Gt(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=ne.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=ne.prototype.init,T.fx.step={};var se,oe,re,ae,le=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;function ue(){oe&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(ue):i.setTimeout(ue,T.fx.interval),T.fx.tick())}function de(){return i.setTimeout((function(){se=void 0})),se=Date.now()}function pe(t,e){var i,n=0,s={height:t};for(e=e?1:0;n<4;n+=2-e)s["margin"+(i=ot[n])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function he(t,e,i){for(var n,s=(fe.tweeners[e]||[]).concat(fe.tweeners["*"]),o=0,r=s.length;o<r;o++)if(n=s[o].call(i,e,t))return n}function fe(t,e,i){var n,s,o=0,r=fe.prefilters.length,a=T.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var e=se||de(),i=Math.max(0,c.startTime+c.duration-e),n=1-(i/c.duration||0),o=0,r=c.tweens.length;o<r;o++)c.tweens[o].run(n);return a.notifyWith(t,[c,n,i]),n<1&&r?i:(r||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},i),originalProperties:e,originalOptions:i,startTime:se||de(),duration:i.duration,tweens:[],createTween:function(e,i){var n=T.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(function(t,e){var i,n,s,o,r;for(i in t)if(s=e[n=G(i)],o=t[i],Array.isArray(o)&&(s=o[1],o=t[i]=o[0]),i!==n&&(t[n]=o,delete t[i]),(r=T.cssHooks[n])&&"expand"in r)for(i in o=r.expand(o),delete t[n],o)i in t||(t[i]=o[i],e[i]=s);else e[n]=s}(u,c.opts.specialEasing);o<r;o++)if(n=fe.prefilters[o].call(c,t,u,c.opts))return v(n.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return T.map(u,he,c),v(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(fe,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ut(i.elem,t,st.exec(e),i),i}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(R);for(var i,n=0,s=t.length;n<s;n++)i=t[n],fe.tweeners[i]=fe.tweeners[i]||[],fe.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,s,o,r,a,l,c,u,d="width"in e||"height"in e,p=this,h={},f=t.style,m=t.nodeType&&ct(t),g=J.get(t,"fxshow");for(n in i.queue||(null==(r=T._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,p.always((function(){p.always((function(){r.unqueued--,T.queue(t,"fx").length||r.empty.fire()}))}))),e)if(s=e[n],le.test(s)){if(delete e[n],o=o||"toggle"===s,s===(m?"hide":"show")){if("show"!==s||!g||void 0===g[n])continue;m=!0}h[n]=g&&g[n]||T.style(t,n)}if((l=!T.isEmptyObject(e))||!T.isEmptyObject(h))for(n in d&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=J.get(t,"display")),"none"===(u=T.css(t,"display"))&&(c?u=c:(pt([t],!0),c=t.style.display||c,u=T.css(t,"display"),pt([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===T.css(t,"float")&&(l||(p.done((function(){f.display=c})),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,h)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(t,"fxshow",{display:c}),o&&(g.hidden=!m),m&&pt([t],!0),p.done((function(){for(n in m||pt([t]),J.remove(t,"fxshow"),h)T.style(t,n,h[n])}))),l=he(m?g[n]:0,n,p),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?fe.prefilters.unshift(t):fe.prefilters.push(t)}}),T.speed=function(t,e,i){var n=t&&"object"==typeof t?T.extend({},t):{complete:i||!i&&e||v(t)&&t,duration:t,easing:i&&e||e&&!v(e)&&e};return T.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in T.fx.speeds?n.duration=T.fx.speeds[n.duration]:n.duration=T.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){v(n.old)&&n.old.call(this),n.queue&&T.dequeue(this,n.queue)},n},T.fn.extend({fadeTo:function(t,e,i,n){return this.filter(ct).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=T.isEmptyObject(t),o=T.speed(e,i,n),r=function(){var e=fe(this,T.extend({},t),o);(s||J.get(this,"finish"))&&e.stop(!0)};return r.finish=r,s||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,s=null!=t&&t+"queueHooks",o=T.timers,r=J.get(this);if(s)r[s]&&r[s].stop&&n(r[s]);else for(s in r)r[s]&&r[s].stop&&ce.test(s)&&n(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=t&&o[s].queue!==t||(o[s].anim.stop(i),e=!1,o.splice(s,1));!e&&i||T.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=J.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],o=T.timers,r=n?n.length:0;for(i.finish=!0,T.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),T.each(["toggle","show","hide"],(function(t,e){var i=T.fn[e];T.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(pe(e,!0),t,n,s)}})),T.each({slideDown:pe("show"),slideUp:pe("hide"),slideToggle:pe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){T.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),T.timers=[],T.fx.tick=function(){var t,e=0,i=T.timers;for(se=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||T.fx.stop(),se=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){oe||(oe=!0,ue())},T.fx.stop=function(){oe=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(t,e){return t=T.fx&&T.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var s=i.setTimeout(e,t);n.stop=function(){i.clearTimeout(s)}}))},re=b.createElement("input"),ae=b.createElement("select").appendChild(b.createElement("option")),re.type="checkbox",g.checkOn=""!==re.value,g.optSelected=ae.selected,(re=b.createElement("input")).value="t",re.type="radio",g.radioValue="t"===re.value;var me,ge=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return U(this,T.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each((function(){T.removeAttr(this,t)}))}}),T.extend({attr:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?T.prop(t,e,i):(1===o&&T.isXMLDoc(t)||(s=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?me:void 0)),void 0!==i?null===i?void T.removeAttr(t,e):s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:(t.setAttribute(e,i+""),i):s&&"get"in s&&null!==(n=s.get(t,e))?n:null==(n=T.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&A(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,s=e&&e.match(R);if(s&&1===t.nodeType)for(;i=s[n++];)t.removeAttribute(i)}}),me={set:function(t,e,i){return!1===e?T.removeAttr(t,i):t.setAttribute(i,i),i}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=ge[e]||T.find.attr;ge[e]=function(t,e,n){var s,o,r=e.toLowerCase();return n||(o=ge[r],ge[r]=s,s=null!=i(t,e,n)?r:null,ge[r]=o),s}}));var ve=/^(?:input|select|textarea|button)$/i,ye=/^(?:a|area)$/i;function be(t){return(t.match(R)||[]).join(" ")}function we(t){return t.getAttribute&&t.getAttribute("class")||""}function xe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(R)||[]}T.fn.extend({prop:function(t,e){return U(this,T.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each((function(){delete this[T.propFix[t]||t]}))}}),T.extend({prop:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(t)||(e=T.propFix[e]||e,s=T.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):ve.test(t.nodeName)||ye.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(t){var e,i,n,s,o,r,a,l=0;if(v(t))return this.each((function(e){T(this).addClass(t.call(this,e,we(this)))}));if((e=xe(t)).length)for(;i=this[l++];)if(s=we(i),n=1===i.nodeType&&" "+be(s)+" "){for(r=0;o=e[r++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");s!==(a=be(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,s,o,r,a,l=0;if(v(t))return this.each((function(e){T(this).removeClass(t.call(this,e,we(this)))}));if(!arguments.length)return this.attr("class","");if((e=xe(t)).length)for(;i=this[l++];)if(s=we(i),n=1===i.nodeType&&" "+be(s)+" "){for(r=0;o=e[r++];)for(;-1<n.indexOf(" "+o+" ");)n=n.replace(" "+o+" "," ");s!==(a=be(n))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t,n="string"===i||Array.isArray(t);return"boolean"==typeof e&&n?e?this.addClass(t):this.removeClass(t):v(t)?this.each((function(i){T(this).toggleClass(t.call(this,i,we(this),e),e)})):this.each((function(){var e,s,o,r;if(n)for(s=0,o=T(this),r=xe(t);e=r[s++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==i||((e=we(this))&&J.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":J.get(this,"__className__")||""))}))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+be(we(i))+" ").indexOf(e))return!0;return!1}});var ke=/\r/g;T.fn.extend({val:function(t){var e,i,n,s=this[0];return arguments.length?(n=v(t),this.each((function(i){var s;1===this.nodeType&&(null==(s=n?t.call(this,i,T(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=T.map(s,(function(t){return null==t?"":t+""}))),(e=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))}))):s?(e=T.valHooks[s.type]||T.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:"string"==typeof(i=s.value)?i.replace(ke,""):null==i?"":i:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:be(T.text(t))}},select:{get:function(t){var e,i,n,s=t.options,o=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?o+1:s.length;for(n=o<0?l:r?o:0;n<l;n++)if(((i=s[n]).selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!A(i.parentNode,"optgroup"))){if(e=T(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,n,s=t.options,o=T.makeArray(e),r=s.length;r--;)((n=s[r]).selected=-1<T.inArray(T.valHooks.option.get(n),o))&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<T.inArray(T(t).val(),e)}},g.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),g.focusin="onfocusin"in i;var Ce=/^(?:focusinfocus|focusoutblur)$/,Te=function(t){t.stopPropagation()};T.extend(T.event,{trigger:function(t,e,n,s){var o,r,a,l,c,u,d,p,f=[n||b],m=h.call(t,"type")?t.type:t,g=h.call(t,"namespace")?t.namespace.split("."):[];if(r=p=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!Ce.test(m+T.event.triggered)&&(-1<m.indexOf(".")&&(m=(g=m.split(".")).shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[T.expando]?t:new T.Event(m,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:T.makeArray(e,[t]),d=T.event.special[m]||{},s||!d.trigger||!1!==d.trigger.apply(n,e))){if(!s&&!d.noBubble&&!y(n)){for(l=d.delegateType||m,Ce.test(l+m)||(r=r.parentNode);r;r=r.parentNode)f.push(r),a=r;a===(n.ownerDocument||b)&&f.push(a.defaultView||a.parentWindow||i)}for(o=0;(r=f[o++])&&!t.isPropagationStopped();)p=r,t.type=1<o?l:d.bindType||m,(u=(J.get(r,"events")||Object.create(null))[t.type]&&J.get(r,"handle"))&&u.apply(r,e),(u=c&&r[c])&&u.apply&&K(r)&&(t.result=u.apply(r,e),!1===t.result&&t.preventDefault());return t.type=m,s||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),e)||!K(n)||c&&v(n[m])&&!y(n)&&((a=n[c])&&(n[c]=null),T.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,Te),n[m](),t.isPropagationStopped()&&p.removeEventListener(m,Te),T.event.triggered=void 0,a&&(n[c]=a)),t.result}},simulate:function(t,e,i){var n=T.extend(new T.Event,i,{type:t,isSimulated:!0});T.event.trigger(n,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each((function(){T.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return T.event.trigger(t,e,i,!0)}}),g.focusin||T.each({focus:"focusin",blur:"focusout"},(function(t,e){var i=function(t){T.event.simulate(e,t.target,T.event.fix(t))};T.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,s=J.access(n,e);s||n.addEventListener(t,i,!0),J.access(n,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,s=J.access(n,e)-1;s?J.access(n,e,s):(n.removeEventListener(t,i,!0),J.remove(n,e))}}}));var Se=i.location,$e={guid:Date.now()},Ee=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new i.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var De=/\[\]$/,_e=/\r?\n/g,Ae=/^(?:submit|button|image|reset|file)$/i,Me=/^(?:input|select|textarea|keygen)/i;function Oe(t,e,i,n){var s;if(Array.isArray(e))T.each(e,(function(e,s){i||De.test(t)?n(t,s):Oe(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,i,n)}));else if(i||"object"!==k(e))n(t,e);else for(s in e)Oe(t+"["+s+"]",e[s],i,n)}T.param=function(t,e){var i,n=[],s=function(t,e){var i=v(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,(function(){s(this.name,this.value)}));else for(i in t)Oe(i,t[i],e,s);return n.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&Me.test(this.nodeName)&&!Ae.test(t)&&(this.checked||!mt.test(t))})).map((function(t,e){var i=T(this).val();return null==i?null:Array.isArray(i)?T.map(i,(function(t){return{name:e.name,value:t.replace(_e,"\r\n")}})):{name:e.name,value:i.replace(_e,"\r\n")}})).get()}});var Pe=/%20/g,je=/#.*$/,Le=/([?&])_=[^&]*/,Ie=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ne=/^(?:GET|HEAD)$/,Re=/^\/\//,He={},Fe={},ze="*/".concat("*"),We=b.createElement("a");function qe(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,o=e.toLowerCase().match(R)||[];if(v(i))for(;n=o[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Be(t,e,i,n){var s={},o=t===Fe;function r(a){var l;return s[a]=!0,T.each(t[a]||[],(function(t,a){var c=a(e,i,n);return"string"!=typeof c||o||s[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)})),l}return r(e.dataTypes[0])||!s["*"]&&r("*")}function Ue(t,e){var i,n,s=T.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&T.extend(!0,t,n),t}We.href=Se.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ue(Ue(t,T.ajaxSettings),e):Ue(T.ajaxSettings,t)},ajaxPrefilter:qe(He),ajaxTransport:qe(Fe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,s,o,r,a,l,c,u,d,p,h=T.ajaxSetup({},e),f=h.context||h,m=h.context&&(f.nodeType||f.jquery)?T(f):T.event,g=T.Deferred(),v=T.Callbacks("once memory"),y=h.statusCode||{},w={},x={},k="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(c){if(!r)for(r={};e=Ie.exec(o);)r[e[1].toLowerCase()+" "]=(r[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=r[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==c&&(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)C.always(t[C.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||k;return n&&n.abort(e),S(0,e),this}};if(g.promise(C),h.url=((t||h.url||Se.href)+"").replace(Re,Se.protocol+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(R)||[""],null==h.crossDomain){l=b.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=We.protocol+"//"+We.host!=l.protocol+"//"+l.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=T.param(h.data,h.traditional)),Be(He,h,e,C),c)return C;for(d in(u=T.event&&h.global)&&0==T.active++&&T.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ne.test(h.type),s=h.url.replace(je,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Pe,"+")):(p=h.url.slice(s.length),h.data&&(h.processData||"string"==typeof h.data)&&(s+=(Ee.test(s)?"&":"?")+h.data,delete h.data),!1===h.cache&&(s=s.replace(Le,"$1"),p=(Ee.test(s)?"&":"?")+"_="+$e.guid+++p),h.url=s+p),h.ifModified&&(T.lastModified[s]&&C.setRequestHeader("If-Modified-Since",T.lastModified[s]),T.etag[s]&&C.setRequestHeader("If-None-Match",T.etag[s])),(h.data&&h.hasContent&&!1!==h.contentType||e.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+ze+"; q=0.01":""):h.accepts["*"]),h.headers)C.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(f,C,h)||c))return C.abort();if(k="abort",v.add(h.complete),C.done(h.success),C.fail(h.error),n=Be(Fe,h,e,C)){if(C.readyState=1,u&&m.trigger("ajaxSend",[C,h]),c)return C;h.async&&0<h.timeout&&(a=i.setTimeout((function(){C.abort("timeout")}),h.timeout));try{c=!1,n.send(w,S)}catch(t){if(c)throw t;S(-1,t)}}else S(-1,"No Transport");function S(t,e,r,l){var d,p,b,w,x,k=e;c||(c=!0,a&&i.clearTimeout(a),n=void 0,o=l||"",C.readyState=0<t?4:0,d=200<=t&&t<300||304===t,r&&(w=function(t,e,i){for(var n,s,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(h,C,r)),!d&&-1<T.inArray("script",h.dataTypes)&&(h.converters["text script"]=function(){}),w=function(t,e,i,n){var s,o,r,a,l,c={},u=t.dataTypes.slice();if(u[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(o=u.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=c[l+" "+o]||c["* "+o]))for(s in c)if((a=s.split(" "))[1]===o&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[s]:!0!==c[s]&&(o=a[0],u.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(h,w,C,d),d?(h.ifModified&&((x=C.getResponseHeader("Last-Modified"))&&(T.lastModified[s]=x),(x=C.getResponseHeader("etag"))&&(T.etag[s]=x)),204===t||"HEAD"===h.type?k="nocontent":304===t?k="notmodified":(k=w.state,p=w.data,d=!(b=w.error))):(b=k,!t&&k||(k="error",t<0&&(t=0))),C.status=t,C.statusText=(e||k)+"",d?g.resolveWith(f,[p,k,C]):g.rejectWith(f,[C,k,b]),C.statusCode(y),y=void 0,u&&m.trigger(d?"ajaxSuccess":"ajaxError",[C,h,d?p:b]),v.fireWith(f,[C,k]),u&&(m.trigger("ajaxComplete",[C,h]),--T.active||T.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,i){return T.get(t,e,i,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],(function(t,e){T[e]=function(t,i,n,s){return v(i)&&(s=s||n,n=i,i=void 0),T.ajax(T.extend({url:t,type:e,dataType:s,data:i,success:n},T.isPlainObject(t)&&t))}})),T.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),T._evalUrl=function(t,e,i){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e,i)}})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){T(this).wrapInner(t.call(this,e))})):this.each((function(){var e=T(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(i){T(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(t){}};var Ve={0:200,1223:204},Ye=T.ajaxSettings.xhr();g.cors=!!Ye&&"withCredentials"in Ye,g.ajax=Ye=!!Ye,T.ajaxTransport((function(t){var e,n;if(g.cors||Ye&&!t.crossDomain)return{send:function(s,o){var r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];for(r in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)a.setRequestHeader(r,s[r]);e=function(t){return function(){e&&(e=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ve[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),n=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){e&&n()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(s){if(e)throw s}},abort:function(){e&&e()}}})),T.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),T.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,s){e=T("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),b.head.appendChild(e[0])},abort:function(){i&&i()}}}));var Xe,Ge=[],Ke=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ge.pop()||T.expando+"_"+$e.guid++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",(function(t,e,n){var s,o,r,a=!1!==t.jsonp&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ke,"$1"+s):!1!==t.jsonp&&(t.url+=(Ee.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return r||T.error(s+" was not called"),r[0]},t.dataTypes[0]="json",o=i[s],i[s]=function(){r=arguments},n.always((function(){void 0===o?T(i).removeProp(s):i[s]=o,t[s]&&(t.jsonpCallback=e.jsonpCallback,Ge.push(s)),r&&v(o)&&o(r[0]),r=o=void 0})),"script"})),g.createHTMLDocument=((Xe=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xe.childNodes.length),T.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(g.createHTMLDocument?((n=(e=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,e.head.appendChild(n)):e=b),o=!i&&[],(s=M.exec(t))?[e.createElement(s[1])]:(s=kt([t],e,o),o&&o.length&&T(o).remove(),T.merge([],s.childNodes)));var n,s,o},T.fn.load=function(t,e,i){var n,s,o,r=this,a=t.indexOf(" ");return-1<a&&(n=be(t.slice(a)),t=t.slice(0,a)),v(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),0<r.length&&T.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done((function(t){o=arguments,r.html(n?T("<div>").append(T.parseHTML(t)).find(n):t)})).always(i&&function(t,e){r.each((function(){i.apply(this,o||[t.responseText,e,t])}))}),this},T.expr.pseudos.animated=function(t){return T.grep(T.timers,(function(e){return t===e.elem})).length},T.offset={setOffset:function(t,e,i){var n,s,o,r,a,l,c=T.css(t,"position"),u=T(t),d={};"static"===c&&(t.style.position="relative"),a=u.offset(),o=T.css(t,"top"),l=T.css(t,"left"),("absolute"===c||"fixed"===c)&&-1<(o+l).indexOf("auto")?(r=(n=u.position()).top,s=n.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),v(e)&&(e=e.call(t,i,T.extend({},a))),null!=e.top&&(d.top=e.top-a.top+r),null!=e.left&&(d.left=e.left-a.left+s),"using"in e?e.using.call(t,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){T.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],s={top:0,left:0};if("fixed"===T.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((s=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),s.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-T.css(n,"marginTop",!0),left:e.left-s.left-T.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||rt}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;T.fn[t]=function(n){return U(this,(function(t,n,s){var o;if(y(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===s)return o?o[e]:t[n];o?o.scrollTo(i?o.pageXOffset:s,i?s:o.pageYOffset):t[n]=s}),t,n,arguments.length)}})),T.each(["top","left"],(function(t,e){T.cssHooks[e]=Ut(g.pixelPosition,(function(t,i){if(i)return i=Bt(t,e),Ft.test(i)?T(t).position()[e]+"px":i}))})),T.each({Height:"height",Width:"width"},(function(t,e){T.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){T.fn[n]=function(s,o){var r=arguments.length&&(i||"boolean"!=typeof s),a=i||(!0===s||!0===o?"margin":"border");return U(this,(function(e,i,s){var o;return y(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===s?T.css(e,i,a):T.style(e,i,s,a)}),e,r?s:void 0,r)}}))})),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){T.fn[e]=function(t){return this.on(e,t)}})),T.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){T.fn[e]=function(t,i){return 0<arguments.length?this.on(e,null,t,i):this.trigger(e)}}));var Qe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),v(t))return n=a.call(arguments,2),(s=function(){return t.apply(e||this,n.concat(a.call(arguments)))}).guid=t.guid=t.guid||T.guid++,s},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=A,T.isFunction=v,T.isWindow=y,T.camelCase=G,T.type=k,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},T.trim=function(t){return null==t?"":(t+"").replace(Qe,"")},void 0===(n=function(){return T}.apply(e,[]))||(t.exports=n);var Je=i.jQuery,Ze=i.$;return T.noConflict=function(t){return i.$===T&&(i.$=Ze),t&&i.jQuery===T&&(i.jQuery=Je),T},void 0===s&&(i.jQuery=i.$=T),T}))},xrYK:function(t,e){var i={}.toString;t.exports=function(t){return i.call(t).slice(8,-1)}},xs3f:function(t,e,i){var n=i("2oRo"),s=i("zk60"),o=n["__core-js_shared__"]||s("__core-js_shared__",{});t.exports=o},yLpj:function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},yoRg:function(t,e,i){var n=i("UTVS"),s=i("/GqU"),o=i("TWQb").indexOf,r=i("0BK2");t.exports=function(t,e){var i,a=s(t),l=0,c=[];for(i in a)!n(r,i)&&n(a,i)&&c.push(i);for(;e.length>l;)n(a,i=e[l++])&&(~o(c,i)||c.push(i));return c}},zANn:function(t,e,i){"use strict";i.r(e);i("/4UK");$(document).ready((function(){"en"==$("html").attr("lang")?($.fn.datepicker.language.en={days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tues","Wed","Thurs","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan.","Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.","Sep.","Oct.","Nov.","Dec."],today:"Today",clear:"Clear",dateFormat:"dd.mm.yyyy",timeFormat:"hh:ii",firstDay:7},$(".datepicker-before-js").datepicker({language:"en",maxDate:new Date}),$(".datepicker-after-js").datepicker({language:"en",minDate:new Date})):"uk"==$("html").attr("lang")?($.fn.datepicker.language.uk={days:["Неділя","понеділок","вівторок","середа","четвер","п'ятницю"," суботу "],daysShort:["Вос","Пон","Вів","Сре","Чет","П'ят","Суб"],daysMin:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],monthsShort:["січень","лютий","березнь","квітень","травень","червень","липень","серпень","вересень","жовтень","листопад","грудень"],today:"Сегодня",clear:"Очистить",dateFormat:"dd.mm.yyyy",timeFormat:"hh:ii",firstDay:1},$(".datepicker-before-js").datepicker({language:"uk",maxDate:new Date}),$(".datepicker-after-js").datepicker({language:"uk",minDate:new Date})):($(".datepicker-before-js").datepicker({maxDate:new Date}),$(".datepicker-after-js").datepicker({minDate:new Date}))}))},zBJ4:function(t,e,i){var n=i("2oRo"),s=i("hh1v"),o=n.document,r=s(o)&&s(o.createElement);t.exports=function(t){return r?o.createElement(t):{}}},zk60:function(t,e,i){var n=i("2oRo"),s=i("kRJp");t.exports=function(t,e){try{s(n,t,e)}catch(i){n[t]=e}return e}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fpci1kYXRlcGlja2VyL2Rpc3QvanMvZGF0ZXBpY2tlci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RpY2t5ZmlsbGpzL2Rpc3Qvc3RpY2t5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYW4tdXNlLWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LW1hdGNoLWhlaWdodC9kaXN0L2pxdWVyeS5tYXRjaEhlaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL21vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvZGlzdC9qcy9ucG0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy90b29sdGlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9kaXN0L2lucHV0bWFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy90YWIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9wb3BvdmVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2Ryb3Bkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2NvbGxhcHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaENsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTGlzdENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2ltcGxlYmFyLWNvcmUvZGlzdC9zaW1wbGViYXItY29yZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpbXBsZWJhci9kaXN0L3NpbXBsZWJhci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9idXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zY3JvbGxzcHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC1zd2l0Y2gvZGlzdC9qcy9ib290c3RyYXAtc3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3RGaXRQb2x5ZmlsbC9kaXN0L29iamVjdEZpdFBvbHlmaWxsLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2FmZml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VsZWN0cmljL3B1YmxpYy9qcXVlcnkuc2VsZWN0cmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZ2VuZXJhdG9yL3BHZW5lcmF0b3IuanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXRvdWNoLWV2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3BvcHVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3NsaWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFnbmlmaWMtcG9wdXAvZGlzdC9qcXVlcnkubWFnbmlmaWMtcG9wdXAubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdGlja3lmaWxsanMvZGlzdC9zdGlja3lmaWxsLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnktdmFsaWRhdGlvbi9kaXN0L2pxdWVyeS52YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xhenlzaXplcy9sYXp5c2l6ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvYWxlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXRvdWNoc3dpcGUvanF1ZXJ5LnRvdWNoU3dpcGUubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94LWVkaXRhYmxlL2Rpc3QvYm9vdHN0cmFwMy1lZGl0YWJsZS9qcy9ib290c3RyYXAtZWRpdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2Fpci1kYXRlcGlja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImUiLCJhIiwidSIsIndpbmRvdyIsImpRdWVyeSIsImNsYXNzZXMiLCJpbmxpbmUiLCJsYW5ndWFnZSIsInN0YXJ0RGF0ZSIsIkRhdGUiLCJmaXJzdERheSIsIndlZWtlbmRzIiwiZGF0ZUZvcm1hdCIsImFsdEZpZWxkIiwiYWx0RmllbGREYXRlRm9ybWF0IiwidG9nZ2xlU2VsZWN0ZWQiLCJrZXlib2FyZE5hdiIsInBvc2l0aW9uIiwib2Zmc2V0IiwidmlldyIsIm1pblZpZXciLCJzaG93T3RoZXJNb250aHMiLCJzZWxlY3RPdGhlck1vbnRocyIsIm1vdmVUb090aGVyTW9udGhzT25TZWxlY3QiLCJzaG93T3RoZXJZZWFycyIsInNlbGVjdE90aGVyWWVhcnMiLCJtb3ZlVG9PdGhlclllYXJzT25TZWxlY3QiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImRpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZSIsIm11bHRpcGxlRGF0ZXMiLCJtdWx0aXBsZURhdGVzU2VwYXJhdG9yIiwicmFuZ2UiLCJ0b2RheUJ1dHRvbiIsImNsZWFyQnV0dG9uIiwic2hvd0V2ZW50IiwiYXV0b0Nsb3NlIiwibW9udGhzRmllbGQiLCJwcmV2SHRtbCIsIm5leHRIdG1sIiwibmF2VGl0bGVzIiwiZGF5cyIsIm1vbnRocyIsInllYXJzIiwidGltZXBpY2tlciIsIm9ubHlUaW1lcGlja2VyIiwiZGF0ZVRpbWVTZXBhcmF0b3IiLCJ0aW1lRm9ybWF0IiwibWluSG91cnMiLCJtYXhIb3VycyIsIm1pbk1pbnV0ZXMiLCJtYXhNaW51dGVzIiwiaG91cnNTdGVwIiwibWludXRlc1N0ZXAiLCJvblNlbGVjdCIsIm9uU2hvdyIsIm9uSGlkZSIsIm9uQ2hhbmdlTW9udGgiLCJvbkNoYW5nZVllYXIiLCJvbkNoYW5nZURlY2FkZSIsIm9uQ2hhbmdlVmlldyIsIm9uUmVuZGVyQ2VsbCIsImN0cmxSaWdodCIsImN0cmxVcCIsImN0cmxMZWZ0IiwiY3RybERvd24iLCJzaGlmdFJpZ2h0Iiwic2hpZnRVcCIsInNoaWZ0TGVmdCIsInNoaWZ0RG93biIsImFsdFVwIiwiYWx0UmlnaHQiLCJhbHRMZWZ0IiwiYWx0RG93biIsImN0cmxTaGlmdFVwIiwidGhpcyIsImVsIiwiJGVsIiwib3B0cyIsImV4dGVuZCIsImRhdGEiLCJub2RlTmFtZSIsImVsSXNJbnB1dCIsIiRhbHRGaWVsZCIsImluaXRlZCIsInZpc2libGUiLCJzaWxlbnQiLCJjdXJyZW50RGF0ZSIsImN1cnJlbnRWaWV3IiwiX2NyZWF0ZVNob3J0Q3V0cyIsInNlbGVjdGVkRGF0ZXMiLCJ2aWV3cyIsImtleXMiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwiX3ByZXZPblNlbGVjdFZhbHVlIiwiaW5pdCIsIlZFUlNJT04iLCJ2aWV3SW5kZXhlcyIsIl9idWlsZERhdGVwaWNrZXJzQ29udGFpbmVyIiwiX2J1aWxkQmFzZUh0bWwiLCJfZGVmaW5lTG9jYWxlIiwiX3N5bmNXaXRoTWluTWF4RGF0ZXMiLCJfc2V0UG9zaXRpb25DbGFzc2VzIiwiX2JpbmRFdmVudHMiLCJfYmluZEtleWJvYXJkRXZlbnRzIiwiJGRhdGVwaWNrZXIiLCJvbiIsIl9vbk1vdXNlRG93bkRhdGVwaWNrZXIiLCJfb25Nb3VzZVVwRGF0ZXBpY2tlciIsImFkZENsYXNzIiwiZm4iLCJkYXRlcGlja2VyIiwiVGltZXBpY2tlciIsIl9iaW5kVGltZXBpY2tlckV2ZW50cyIsIkJvZHkiLCJzaG93IiwibmF2IiwiTmF2aWdhdGlvbiIsIl9vbkNsaWNrQ2VsbCIsIl9vbk1vdXNlRW50ZXJDZWxsIiwiX29uTW91c2VMZWF2ZUNlbGwiLCJfb25TaG93RXZlbnQiLCJfb25Nb3VzZVVwRWwiLCJfb25CbHVyIiwiX29uS2V5VXBHZW5lcmFsIiwiX29uUmVzaXplIiwiX29uTW91c2VVcEJvZHkiLCJfb25LZXlEb3duIiwiX29uS2V5VXAiLCJfb25Ib3RLZXkiLCJfb25UaW1lQ2hhbmdlIiwiaXNXZWVrZW5kIiwiaW5kZXhPZiIsImxvYyIsImNvbnNvbGUiLCJ3YXJuIiwicnUiLCJqb2luIiwiX2dldFdvcmRCb3VuZGFyeVJlZ0V4cCIsIm1hdGNoIiwiYW1wbSIsImFwcGVuZCIsImluc2VydEFmdGVyIiwiYXBwZW5kVG8iLCIkY29udGVudCIsIiRuYXYiLCJfdHJpZ2dlck9uQ2hhbmdlIiwibGVuZ3RoIiwiZ2V0UGFyc2VkRGF0ZSIsInllYXIiLCJtb250aCIsImRhdGUiLCJob3VycyIsIm1pbnV0ZXMiLCJtYXAiLCJmb3JtYXREYXRlIiwibmV4dCIsInBhcnNlZERhdGUiLCJjdXJEZWNhZGUiLCJwcmV2IiwiaCIsImdldExlYWRpbmdaZXJvTnVtIiwiZ2V0RGVjYWRlIiwiZnVsbEhvdXJzIiwiX3JlcGxhY2VyIiwiX2dldFZhbGlkSG91cnNGcm9tRGF0ZSIsImRheVBlcmlvZCIsInRlc3QiLCJyZXBsYWNlIiwiZ2V0VGltZSIsInRvVXBwZXJDYXNlIiwiZnVsbERhdGUiLCJkYXkiLCJkYXlzU2hvcnQiLCJmdWxsTW9udGgiLCJtb250aHNTaG9ydCIsImZ1bGxNaW51dGVzIiwidG9TdHJpbmciLCJzbGljZSIsIlJlZ0V4cCIsInNlbGVjdERhdGUiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwibGFzdFNlbGVjdGVkRGF0ZSIsIl9zZXRUaW1lIiwiX3RyaWdnZXIiLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiX3JlbmRlciIsIl9pc1NlbGVjdGVkIiwicHVzaCIsImJpZ2dlciIsIl9zZXRJbnB1dFZhbHVlIiwidGltZXBpY2tlcklzQWN0aXZlIiwiaGlkZSIsInJlbW92ZURhdGUiLCJzb21lIiwiaXNTYW1lIiwic3BsaWNlIiwidG9kYXkiLCJjbGVhciIsInVwZGF0ZSIsImFyZ3VtZW50cyIsIl9hZGRCdXR0b25zSWZOZWVkIiwic2V0UG9zaXRpb24iLCJfaGFuZGxlRGF0ZSIsIl91cGRhdGVSYW5nZXMiLCJfdXBkYXRlQ3VycmVudFRpbWUiLCJtaW5UaW1lIiwibWF4VGltZSIsInZhbCIsIl9pc0luUmFuZ2UiLCJfZ2V0RGltZW5zaW9ucyIsIndpZHRoIiwib3V0ZXJXaWR0aCIsImhlaWdodCIsIm91dGVySGVpZ2h0IiwibGVmdCIsInRvcCIsIl9nZXREYXRlRnJvbUNlbGwiLCJzcGxpdCIsInJlbW92ZUF0dHIiLCJjc3MiLCJfYmluZFZpc2lvbkV2ZW50cyIsInJlbW92ZUNsYXNzIiwiZm9jdXNlZCIsImluRm9jdXMiLCJibHVyIiwiZG93biIsIl9jaGFuZ2VWaWV3IiwidXAiLCJvZmYiLCJvbmUiLCJ2aWV3SW5kZXgiLCJfaGFuZGxlSG90S2V5IiwiX2dldEZvY3VzZWREYXRlIiwiZ2V0RGF5c0NvdW50IiwiX3JlZ2lzdGVyS2V5IiwiX3VuUmVnaXN0ZXJLZXkiLCJfaXNIb3RLZXlQcmVzc2VkIiwic29ydCIsImV2ZXJ5IiwidHJpZ2dlciIsIl9mb2N1c05leHRDZWxsIiwiY2VsbFR5cGUiLCJnZXREYXRlIiwiX2dldENlbGwiLCJmaW5kIiwiZGVzdHJveSIsImNsb3Nlc3QiLCJyZW1vdmUiLCJfaGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMiLCJvcmlnaW5hbEV2ZW50IiwidGltZXBpY2tlckZvY3VzIiwiZm9jdXMiLCJzZXRUaW1lb3V0Iiwid2hpY2giLCJwcmV2ZW50RGVmYXVsdCIsImhhc0NsYXNzIiwidGFyZ2V0IiwibGVzcyIsIl91cGRhdGUiLCJfZm9jdXNlZCIsInByZXZWaWV3Iiwic3Vic3RyaW5nIiwiZ2V0RGF5IiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiTWF0aCIsImZsb29yIiwidGVtcGxhdGUiLCJwYXJzZUludCIsInJlc2V0VGltZSIsImVhY2giLCJDb25zdHJ1Y3RvciIsImRheXNNaW4iLCJ0eXBlIiwicHJveHkiLCIkbmFtZXMiLCIkY2VsbHMiLCJfZ2V0RGF5TmFtZXNIdG1sIiwiX2dldENlbGxDb250ZW50cyIsImh0bWwiLCJkaXNhYmxlZCIsIl9nZXREYXlzSHRtbCIsIl9nZXREYXlIdG1sIiwiX2dldE1vbnRoc0h0bWwiLCJfZ2V0TW9udGhIdG1sIiwiX2dldFllYXJzSHRtbCIsIl9nZXRZZWFySHRtbCIsIl9yZW5kZXJUeXBlcyIsImF0dHIiLCJhY2l0dmUiLCJhY3RpdmUiLCJfaGFuZGxlQ2xpY2siLCIkYnV0dG9uc0NvbnRhaW5lciIsIl9vbkNsaWNrTmF2QnV0dG9uIiwiX29uQ2xpY2tOYXZUaXRsZSIsIl9hZGRCdXR0b24iLCJfZ2V0VGl0bGUiLCJ0aXRsZSIsInNldE5hdlN0YXR1cyIsIl9hZGRCdXR0b25zQ29udGFpbmVyIiwiYWN0aW9uIiwibGFiZWwiLCJfZGlzYWJsZU5hdiIsIl9hY3RpdmF0ZU5hdiIsIl9idWlsZEhUTUwiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfb25TZWxlY3REYXRlIiwiJHJhbmdlcyIsIl9vbkNoYW5nZVJhbmdlIiwiX29uTW91c2VVcFJhbmdlIiwiX29uTW91c2VFbnRlclJhbmdlIiwiX29uTW91c2VPdXRSYW5nZSIsIl9zZXRNaW5UaW1lRnJvbURhdGUiLCJfc2V0TWF4VGltZUZyb21EYXRlIiwiX3NldERlZmF1bHRNaW5NYXhUaW1lIiwiX3ZhbGlkYXRlSG91cnNNaW51dGVzIiwiaG91ck1pbiIsImhvdXJNYXgiLCJob3VyU3RlcCIsImhvdXJWYWx1ZSIsImhvdXJWaXNpYmxlIiwiZGlzcGxheUhvdXJzIiwibWluTWluIiwibWluTWF4IiwibWluU3RlcCIsIm1pblZhbHVlIiwiJHRpbWVwaWNrZXIiLCIkaG91cnMiLCIkbWludXRlcyIsIiRob3Vyc1RleHQiLCIkbWludXRlc1RleHQiLCIkYW1wbSIsIm1pbiIsIm1heCIsIl9ob3VycyIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiaXQiLCJOQVRJVkVfU1lNQk9MIiwic2hhbSIsIml0ZXJhdG9yIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJleGVjIiwiZXJyb3IiLCJwYXRoIiwiZ2xvYmFsIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJ1bmRlZmluZWQiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiTkFTSE9STl9CVUciLCIxIiwiZiIsIlYiLCJkZXNjcmlwdG9yIiwicmVkZWZpbmUiLCJmYWlscyIsIndlbGxLbm93blN5bWJvbCIsInJlZ2V4cEV4ZWMiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJTUEVDSUVTIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJyZSIsInJlc3VsdCIsImdyb3VwcyIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRVBMQUNFIiwiUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJhcHBseSIsIktFWSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJPIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwiY29uc3RydWN0b3IiLCJmbGFncyIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsIm1ldGhvZHMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJzdHIiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJkb25lIiwic3RyaW5nTWV0aG9kIiwicmVnZXhNZXRob2QiLCJTdHJpbmciLCJzdHJpbmciLCJhcmciLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiY3JlYXRlTWV0aG9kIiwiSVNfUklHSFQiLCJ0aGF0IiwiY2FsbGJhY2tmbiIsImFyZ3VtZW50c0xlbmd0aCIsIm1lbW8iLCJzZWxmIiwiaW5kZXgiLCJUeXBlRXJyb3IiLCJyaWdodCIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiZG9jdW1lbnQiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInRlc3ROb2RlIiwic2VwcHVrdSIsImlzV2luZG93RGVmaW5lZCIsImdldENvbXB1dGVkU3R5bGUiLCJjcmVhdGVFbGVtZW50IiwicHJlZml4Iiwic3R5bGUiLCJpc0luaXRpYWxpemVkIiwic2hhZG93Um9vdEV4aXN0cyIsIlNoYWRvd1Jvb3QiLCJzY3JvbGwiLCJzdGlja2llcyIsInRhcmdldE9iaiIsInNvdXJjZU9iamVjdCIsInBhcnNlTnVtZXJpYyIsInBhcnNlRmxvYXQiLCJnZXREb2NPZmZzZXRUb3AiLCJub2RlIiwiZG9jT2Zmc2V0VG9wIiwib2Zmc2V0VG9wIiwib2Zmc2V0UGFyZW50IiwiU3RpY2t5IiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJIVE1MRWxlbWVudCIsIkVycm9yIiwic3RpY2t5IiwiX25vZGUiLCJfc3RpY2t5TW9kZSIsIl9hY3RpdmUiLCJyZWZyZXNoIiwiX3JlbW92ZWQiLCJfZGVhY3RpdmF0ZSIsIm5vZGVDb21wdXRlZFN0eWxlIiwibm9kZUNvbXB1dGVkUHJvcHMiLCJkaXNwbGF5IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiY3NzRmxvYXQiLCJpc05hTiIsIm9yaWdpbmFsUG9zaXRpb24iLCJyZWZlcmVuY2VOb2RlIiwicGFyZW50Tm9kZSIsImhvc3QiLCJub2RlV2luT2Zmc2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFyZW50V2luT2Zmc2V0IiwicGFyZW50Q29tcHV0ZWRTdHlsZSIsIl9wYXJlbnQiLCJzdHlsZXMiLCJvZmZzZXRIZWlnaHQiLCJfb2Zmc2V0VG9XaW5kb3ciLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsIl9vZmZzZXRUb1BhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsIl9zdHlsZXMiLCJib3R0b20iLCJub2RlVG9wVmFsdWUiLCJfbGltaXRzIiwic3RhcnQiLCJwYWdlWU9mZnNldCIsImVuZCIsImJvcmRlckJvdHRvbVdpZHRoIiwicGFyZW50UG9zaXRpb24iLCJfcmVjYWxjUG9zaXRpb24iLCJjbG9uZSIsIl9jbG9uZSIsInBhZGRpbmciLCJib3JkZXIiLCJib3JkZXJTcGFjaW5nIiwiZm9udFNpemUiLCJpbnNlcnRCZWZvcmUiLCJzdGlja3lNb2RlIiwiYWJzIiwiX3RoaXMiLCJyZW1vdmVDaGlsZCIsIl90aGlzMiIsIlN0aWNreWZpbGwiLCJmb3JjZVN0aWNreSIsInJlZnJlc2hBbGwiLCJhZGRPbmUiLCJhZGQiLCJub2RlTGlzdCIsImFkZGVkU3RpY2tpZXMiLCJfbG9vcCIsInJlbW92ZU9uZSIsIl9sb29wMiIsInJlbW92ZUFsbCIsImNoZWNrU2Nyb2xsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImZhc3RDaGVja1RpbWVyIiwiZG9jSGlkZGVuS2V5IiwidmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZSIsInN0YXJ0RmFzdENoZWNrVGltZXIiLCJjbGVhckludGVydmFsIiwicGFnZVhPZmZzZXQiLCJzZXRJbnRlcnZhbCIsIl9mYXN0Q2hlY2siLCJoYXMiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJzb3VyY2UiLCJjbGFzc29mIiwiaW5pdFNjcm9sbGJhciIsIiQiLCJtQ3VzdG9tU2Nyb2xsYmFyIiwiYXhpcyIsInVwZGF0ZU9uQ29udGVudFJlc2l6ZSIsImRvY3VtZW50VG91Y2hTY3JvbGwiLCJyZWFkeSIsIm1hZ25pZmljUG9wdXAiLCJvcGVuIiwiaXRlbXMiLCJzcmMiLCJzd2lwZSIsInN3aXBlTGVmdCIsImV2ZW50IiwiZGlyZWN0aW9uIiwiZGlzdGFuY2UiLCJkdXJhdGlvbiIsImZpbmdlckNvdW50Iiwic3dpcGVSaWdodCIsInRocmVzaG9sZCIsIm1hdGNoSGVpZ2h0IiwiYnlSb3ciLCJjbGljayIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJ0b2dnbGVDbGFzcyIsInN0b3BQcm9wYWdhdGlvbiIsImFkbWluSW1nIiwicXVlcnlTZWxlY3RvckFsbCIsIndyYXBwZXIiLCJpbWFnZXMiLCJpbWciLCJmbG9hdCIsImNsYXNzTGlzdCIsImhUb3BUaXRsZSIsInNlbGVjdFRhYiIsInBhcmVudCIsImZhZGVJbiIsInRleHQiLCJzbGlkZVRvZ2dsZSIsImFjdGl2ZV90YWIiLCJmaXJzdCIsInRhYnNfY29udGFpbmVyIiwiaXMiLCJzbGljayIsImluaXRTZWFyY2hUYWJzIiwic2VsZWN0cmljIiwiZGlzYWJsZU9uTW9iaWxlIiwibmF0aXZlT25Nb2JpbGUiLCJzY3JvbGxfZWwiLCJkZWxlZ2F0ZSIsIm1haW5DbGFzcyIsImdhbGxlcnkiLCJlbmFibGVkIiwibmF2aWdhdGVCeUltZ0NsaWNrIiwicHJlbG9hZCIsImVsZW1lbnRzIiwiYnRuIiwic2xpZGVVcCIsInVuYmluZCIsInNsaWRlRG93biIsImtleUNvZGUiLCJzb21lSW1hZ2VzIiwib2JqZWN0Rml0UG9seWZpbGwiLCJwcmljZV9saXN0IiwiY2hpbGRyZW4iLCJkaXBsb21zX2xpc3QiLCJzdWJtZW51IiwiaWNvbiIsImlubmVyV2lkdGgiLCJtb3JlTGluayIsImZhZGVPdXQiLCJzaGFyZWQiLCJ1aWQiLCJiIiwiY2FuVXNlRE9NIiwiZmFjdG9yeSIsIl9wcmV2aW91c1Jlc2l6ZVdpZHRoIiwiX3VwZGF0ZVRpbWVvdXQiLCJfcGFyc2UiLCJfcm93cyIsIiRlbGVtZW50cyIsImxhc3RUb3AiLCJyb3dzIiwiJHRoYXQiLCJsYXN0Um93IiwiX3BhcnNlT3B0aW9ucyIsIm9wdGlvbnMiLCJfZ3JvdXBzIiwiZ3JvdXAiLCJub3QiLCJfYXBwbHkiLCJ2ZXJzaW9uIiwiX3Rocm90dGxlIiwiX21haW50YWluU2Nyb2xsIiwiX2JlZm9yZVVwZGF0ZSIsIl9hZnRlclVwZGF0ZSIsImh0bWxIZWlnaHQiLCIkaGlkZGVuUGFyZW50cyIsInBhcmVudHMiLCJmaWx0ZXIiLCJyb3ciLCIkcm93IiwidGFyZ2V0SGVpZ2h0IiwidmVydGljYWxQYWRkaW5nIiwiX2FwcGx5RGF0YUFwaSIsIiR0aGlzIiwiZ3JvdXBJZCIsInRocm90dGxlIiwid2luZG93V2lkdGgiLCJERVNDUklQVE9SUyIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwidG9JbmRleGVkT2JqZWN0IiwidG9QcmltaXRpdmUiLCJJRThfRE9NX0RFRklORSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlAiLCIkcmVkdWNlIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoIiwiU1RSSUNUX01FVEhPRCIsIlVTRVNfVE9fTEVOR1RIIiwicHJvdG8iLCJmb3JjZWQiLCJyZWR1Y2UiLCJ3Iiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiZmxhdCIsImFycmF5IiwiY29uY2F0IiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwib2JqIiwibm9kZVR5cGUiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJzY3JpcHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJ0b1R5cGUiLCJzZWxlY3RvciIsImNvbnRleHQiLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImNhbGxiYWNrIiwiZWxlbSIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJsZW4iLCJqIiwiY29weSIsImNvcHlJc0FycmF5IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImd1aWQiLCJfaSIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJwb3AiLCJwdXNoTmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicnRyaW0iLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJodG1sIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpciIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibmlkIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0Q29udGV4dCIsInNjb3BlIiwidG9TZWxlY3RvciIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2VVUkkiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5wdXQiLCJpbm5lckhUTUwiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwic3BlY2lmaWVkIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwicm9vdGpRdWVyeSIsInJvb3QiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY29udGVudHMiLCJzaWJsaW5nIiwidGFyZ2V0cyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsIl8iLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJlbXB0eSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwiY2FtZWxDYXNlIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInNldCIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwidmFsdWVzIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJ0eXBlcyIsIm9yaWdGbiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwibG9hZCIsIm5vQnViYmxlIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImNoYXJDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsInByZXBlbmQiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwicHJlcGVuZFRvIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibWFyZ2luIiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwidHJpbSIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJNb2RhbCIsImVsZW1lbnQiLCIkYm9keSIsIiRlbGVtZW50IiwiJGRpYWxvZyIsIiRiYWNrZHJvcCIsImlzU2hvd24iLCJvcmlnaW5hbEJvZHlQYWQiLCJzY3JvbGxiYXJXaWR0aCIsImlnbm9yZUJhY2tkcm9wQ2xpY2siLCJmaXhlZENvbnRlbnQiLCJyZW1vdGUiLCJfcmVsYXRlZFRhcmdldCIsIkRFRkFVTFRTIiwiVFJBTlNJVElPTl9EVVJBVElPTiIsIkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04iLCJiYWNrZHJvcCIsImtleWJvYXJkIiwiY2hlY2tTY3JvbGxiYXIiLCJzZXRTY3JvbGxiYXIiLCJyZXNpemUiLCJ0cmFuc2l0aW9uIiwiYWRqdXN0RGlhbG9nIiwiZW5mb3JjZUZvY3VzIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJoaWRlTW9kYWwiLCJoYW5kbGVVcGRhdGUiLCJyZXNldEFkanVzdG1lbnRzIiwicmVzZXRTY3JvbGxiYXIiLCJyZW1vdmVCYWNrZHJvcCIsImRvQW5pbWF0ZSIsImNhbGxiYWNrUmVtb3ZlIiwibW9kYWxJc092ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJib2R5SXNPdmVyZmxvd2luZyIsInBhZGRpbmdSaWdodCIsImZ1bGxXaW5kb3dXaWR0aCIsImRvY3VtZW50RWxlbWVudFJlY3QiLCJtZWFzdXJlU2Nyb2xsYmFyIiwiYm9keVBhZCIsImFjdHVhbFBhZGRpbmciLCJjYWxjdWxhdGVkUGFkZGluZyIsInNjcm9sbERpdiIsIm1vZGFsIiwiJHRhcmdldCIsIiRmb3JFYWNoIiwiUiIsIlMiLCJET01JdGVyYWJsZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIkRJU0FMTE9XRURfQVRUUklCVVRFUyIsInVyaUF0dHJzIiwiRGVmYXVsdFdoaXRlbGlzdCIsImFyZWEiLCJiciIsImVtIiwiaHIiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJsaSIsIm9sIiwicHJlIiwic21hbGwiLCJzcGFuIiwic3ViIiwic3VwIiwic3Ryb25nIiwidWwiLCJTQUZFX1VSTF9QQVRURVJOIiwiREFUQV9VUkxfUEFUVEVSTiIsImFsbG93ZWRBdHRyaWJ1dGUiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsImF0dHJOYW1lIiwiQm9vbGVhbiIsInJlZ0V4cCIsInNhbml0aXplSHRtbCIsInVuc2FmZUh0bWwiLCJ3aGl0ZUxpc3QiLCJzYW5pdGl6ZUZuIiwiY3JlYXRlZERvY3VtZW50Iiwid2hpdGVsaXN0S2V5cyIsImVsTmFtZSIsImF0dHJpYnV0ZUxpc3QiLCJ3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMiLCJsZW4yIiwiVG9vbHRpcCIsImhvdmVyU3RhdGUiLCJpblN0YXRlIiwicGxhY2VtZW50Iiwidmlld3BvcnQiLCJzYW5pdGl6ZSIsImdldE9wdGlvbnMiLCIkdmlld3BvcnQiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsImVudGVyIiwibGVhdmUiLCJfb3B0aW9ucyIsImZpeFRpdGxlIiwiZ2V0RGVmYXVsdHMiLCJkYXRhQXR0cmlidXRlcyIsImdldERlbGVnYXRlT3B0aW9ucyIsImRlZmF1bHRzIiwidGlwIiwiaXNJblN0YXRlVHJ1ZSIsImluRG9tIiwiJHRpcCIsInRpcElkIiwiZ2V0VUlEIiwic2V0Q29udGVudCIsImF1dG9Ub2tlbiIsImF1dG9QbGFjZSIsImdldFBvc2l0aW9uIiwiYWN0dWFsV2lkdGgiLCJhY3R1YWxIZWlnaHQiLCJvcmdQbGFjZW1lbnQiLCJ2aWV3cG9ydERpbSIsImNhbGN1bGF0ZWRPZmZzZXQiLCJnZXRDYWxjdWxhdGVkT2Zmc2V0IiwiYXBwbHlQbGFjZW1lbnQiLCJwcmV2SG92ZXJTdGF0ZSIsImdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSIsImlzVmVydGljYWwiLCJhcnJvd0RlbHRhIiwiYXJyb3dPZmZzZXRQb3NpdGlvbiIsInJlcGxhY2VBcnJvdyIsImFycm93IiwiZ2V0VGl0bGUiLCIkZSIsImlzQm9keSIsInRhZ05hbWUiLCJlbFJlY3QiLCJpc1N2ZyIsIlNWR0VsZW1lbnQiLCJlbE9mZnNldCIsIm91dGVyRGltcyIsInZpZXdwb3J0UGFkZGluZyIsInZpZXdwb3J0RGltZW5zaW9ucyIsInRvcEVkZ2VPZmZzZXQiLCJib3R0b21FZGdlT2Zmc2V0IiwibGVmdEVkZ2VPZmZzZXQiLCJyaWdodEVkZ2VPZmZzZXQiLCIkYXJyb3ciLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwidG9vbHRpcCIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJ0b0ludGVnZXIiLCJpbnRlZ2VyIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfdHlwZW9mIiwiZ2VuZXJhdGVNYXNrU2V0IiwiYW5hbHlzZU1hc2siLCJtYXNrU2NvcGUiLCJJbnB1dG1hc2siLCJhbGlhcyIsImludGVybmFsIiwibWFza3NldCIsInJlZnJlc2hWYWx1ZSIsIm5vTWFza3NDYWNoZSIsImRlZmluaXRpb25zIiwidXNlck9wdGlvbnMiLCJyZXNvbHZlQWxpYXMiLCJpc1JUTCIsIm51bWVyaWNJbnB1dCIsImFsaWFzU3RyIiwiYWxpYXNEZWZpbml0aW9uIiwiYWxpYXNlcyIsIm1hc2siLCJkYXRhQXR0cmlidXRlIiwiX21heFRlc3RQb3MiLCJwbGFjZWhvbGRlciIsIm9wdGlvbmFsbWFya2VyIiwicXVhbnRpZmllcm1hcmtlciIsImdyb3VwbWFya2VyIiwiYWx0ZXJuYXRvcm1hcmtlciIsImVzY2FwZUNoYXIiLCJyZWdleCIsIm9uY29tcGxldGUiLCJvbmluY29tcGxldGUiLCJvbmNsZWFyZWQiLCJyZXBlYXQiLCJncmVlZHkiLCJhdXRvVW5tYXNrIiwicmVtb3ZlTWFza09uU3VibWl0IiwiY2xlYXJNYXNrT25Mb3N0Rm9jdXMiLCJpbnNlcnRNb2RlIiwiaW5zZXJ0TW9kZVZpc3VhbCIsImNsZWFySW5jb21wbGV0ZSIsIm9uS2V5RG93biIsIm9uQmVmb3JlTWFzayIsIm9uQmVmb3JlUGFzdGUiLCJwYXN0ZWRWYWx1ZSIsIm9uQmVmb3JlV3JpdGUiLCJvblVuTWFzayIsInNob3dNYXNrT25Gb2N1cyIsInNob3dNYXNrT25Ib3ZlciIsIm9uS2V5VmFsaWRhdGlvbiIsInNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIiLCJyaWdodEFsaWduIiwidW5kb09uRXNjYXBlIiwicmFkaXhQb2ludCIsIl9yYWRpeERhbmNlIiwiZ3JvdXBTZXBhcmF0b3IiLCJrZWVwU3RhdGljIiwicG9zaXRpb25DYXJldE9uVGFiIiwidGFiVGhyb3VnaCIsInN1cHBvcnRzSW5wdXRUeXBlIiwiaWdub3JhYmxlcyIsImlzQ29tcGxldGUiLCJwcmVWYWxpZGF0aW9uIiwicG9zdFZhbGlkYXRpb24iLCJzdGF0aWNEZWZpbml0aW9uU3ltYm9sIiwiaml0TWFza2luZyIsIm51bGxhYmxlIiwiaW5wdXRFdmVudE9ubHkiLCJub1ZhbHVlUGF0Y2hpbmciLCJwb3NpdGlvbkNhcmV0T25DbGljayIsImNhc2luZyIsImlucHV0bW9kZSIsImltcG9ydERhdGFBdHRyaWJ1dGVzIiwic2hpZnRQb3NpdGlvbnMiLCI5IiwidmFsaWRhdG9yIiwiZGVmaW5pdGlvblN5bWJvbCIsIm1hc2tzQ2FjaGUiLCJuZHgiLCJzY29wZWRPcHRzIiwibnB0IiwiaW1wb3J0T3B0aW9uIiwib3B0aW9uRGF0YSIsImRhdGFvcHRpb25zIiwiYXR0ck9wdGlvbnMiLCJ0ZXh0QWxpZ24iLCJpbXBvcnRBdHRyaWJ1dGVPcHRpb25zIiwiaW5wdXRtYXNrIiwibm9yZW1hc2siLCJ1bm1hc2tlZHZhbHVlIiwiZ2V0ZW1wdHltYXNrIiwiaGFzTWFza2VkVmFsdWUiLCJnZXRtZXRhZGF0YSIsImlzVmFsaWQiLCJmb3JtYXQiLCJtZXRhZGF0YSIsInNldFZhbHVlIiwiZXh0ZW5kRGVmYXVsdHMiLCJleHRlbmREZWZpbml0aW9ucyIsImRlZmluaXRpb24iLCJleHRlbmRBbGlhc2VzIiwidW5tYXNrIiwiZXNjYXBlUmVnZXhSZWdleCIsImVzY2FwZVJlZ2V4IiwiZGVwZW5kZW5jeUxpYiIsImlzVmFsaWRFbGVtZW50IiwiRWxlbWVudCIsIkRlcGVuZGVuY3lMaWIiLCJxdWVyeVNlbGVjdG9yIiwiZXZlbnRSZWdpc3RyeSIsImFkZEV2ZW50IiwiZXYiLCJfZXZlbnRzIiwiZW5keCIsIm5zRXZlbnQiLCJkZXRhY2hFdmVudCIsIm5tc3AiLCJyZXNvbHZlTmFtZXNwYWNlIiwiaG5keCIsImhuZEwiLCJldnRzIiwiZXZOZHgiLCJvZmZFdmVudHMiLCJvZmZFdmVudHNMIiwiYXJndW1lbnRfMSIsImV2bnQiLCJjcmVhdGVFdmVudCIsIkN1c3RvbUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZlbnRUeXBlIiwiZmlyZUV2ZW50IiwibHR5cGUiLCJpc0FycmF5bGlrZSIsIl9fZGF0YSIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiZXZhbCIsIm5vY2FjaGUiLCJnZW5lcmF0ZU1hc2siLCJtYXNrc2V0RGVmaW5pdGlvbiIsIm1hc2tkZWZLZXkiLCJyZWdleE1hc2siLCJyZXBlYXRTdGFydCIsIm1hc2tUb2tlbiIsInZhbGlkUG9zaXRpb25zIiwiX2J1ZmZlciIsImJ1ZmZlciIsInRlc3RzIiwiZXhjbHVkZXMiLCJtYXNrTGVuZ3RoIiwiaml0T2Zmc2V0IiwiYWx0TWFzayIsIm1zayIsIm9wZW5pbmdUb2tlbiIsImN1cnJlbnRPcGVuaW5nVG9rZW4iLCJhbHRlcm5hdG9yIiwibGFzdE1hdGNoIiwidG9rZW5pemVyIiwicmVnZXhUb2tlbml6ZXIiLCJlc2NhcGVkIiwiY3VycmVudFRva2VuIiwiTWFza1Rva2VuIiwib3BlbmVuaW5ncyIsIm1hc2tUb2tlbnMiLCJjbG9zZVJlZ2V4R3JvdXAiLCJpc0dyb3VwIiwiaXNPcHRpb25hbCIsImlzUXVhbnRpZmllciIsImlzQWx0ZXJuYXRvciIsIm9wZW5Hcm91cCIsImFsdGVybmF0b3JHcm91cCIsInF1YW50aWZpZXIiLCJpbnNlcnRUZXN0RGVmaW5pdGlvbiIsIm10b2tlbiIsInByZXZNYXRjaCIsInN0YXRpYyIsIm9wdGlvbmFsaXR5IiwibmV3QmxvY2tNYXJrZXIiLCJkZWYiLCJuYXRpdmVEZWYiLCJsbW50IiwibWFza2RlZiIsImdlbmVyYXRlZCIsImRlZmF1bHRDYXNlIiwibW5keCIsImdyb3VwaWZ5IiwiZ3JvdXBUb2tlbiIsImNsb3NlR3JvdXAiLCJncm91cFF1YW50aWZpZXIiLCJjaGFyQXQiLCJhbHRSZWdleEdyb3VwIiwibXFqIiwibXEiLCJtcTAiLCJtcTEiLCJqaXQiLCJ0bXBNYXRjaCIsInN1YlRva2VuIiwidmVyaWZ5R3JvdXBNYXJrZXIiLCJuZXh0VG9rZW4iLCJyZXZlcnNlVG9rZW5zIiwiaW50TWF0Y2giLCJxdCIsInN0IiwiQSIsImlwVmFsaWRhdG9yUmVnZXgiLCJpcFZhbGlkYXRvciIsImNocnMiLCJzdHJpY3QiLCJjc3N1bml0IiwiaXAiLCJrIiwibWFza2VkVmFsdWUiLCJ1bm1hc2tlZFZhbHVlIiwiZW1haWwiLCJtYWMiLCJ2aW4iLCJzc24iLCJjdXJyZW50UmVzdWx0IiwidWEiLCJpZSIsIm1vYmlsZSIsImllbW9iaWxlIiwiaXBob25lIiwiYWN0aW9uT2JqIiwidW5kb1ZhbHVlIiwibWF4TGVuZ3RoIiwic2tpcEtleVByZXNzRXZlbnQiLCJza2lwSW5wdXRFdmVudCIsInZhbGlkYXRpb25FdmVudCIsImlnbm9yYWJsZSIsIm1vdXNlRW50ZXIiLCJvcmlnaW5hbFBsYWNlaG9sZGVyIiwiZ2V0TWFza1RlbXBsYXRlIiwiYmFzZU9uSW5wdXQiLCJtaW5pbWFsUG9zIiwiaW5jbHVkZU1vZGUiLCJub0ppdCIsImNsZWFyT3B0aW9uYWxUYWlsIiwibmR4SW50bHpyIiwidGVzdFBvcyIsImppdFJlbmRlclN0YXRpYyIsIm1hc2tUZW1wbGF0ZSIsImdlbmVyYXRlZElucHV0IiwiZGV0ZXJtaW5lVGVzdFRlbXBsYXRlIiwiZ2V0VGVzdHMiLCJsb2NhdG9yIiwiZ2V0UGxhY2Vob2xkZXIiLCJnZXRUZXN0VGVtcGxhdGUiLCJyZXNldE1hc2tTZXQiLCJzb2Z0IiwiZ2V0TGFzdFZhbGlkUG9zaXRpb24iLCJjbG9zZXN0VG8iLCJ2YWxpZHMiLCJwb3NOZHgiLCJwc05keCIsImdldERlY2lzaW9uVGFrZXIiLCJ0c3QiLCJkZWNpc2lvblRha2VyIiwiYWx0ZXJuYXRpb24iLCJnZXRMb2NhdG9yIiwiYWxpZ24iLCJtbG9jIiwidHN0TG9jYXRvciIsImJlc3RNYXRjaCIsInRhcmdldExvY2F0b3IiLCJnZXRUZXN0Iiwib3B0aW9uYWxRdWFudGlmaWVyIiwidHN0UHMiLCJwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbiIsInRlc3REZWZpbml0aW9uIiwidmFsaWQiLCJ0bmR4IiwibGF0ZXN0TWF0Y2giLCJuZHhJbml0aWFsaXplciIsImluc2VydFN0b3AiLCJjYWNoZURlcGVuZGVuY3kiLCJyZXNvbHZlVGVzdEZyb21Ub2tlbiIsImxvb3BOZHgiLCJxdWFudGlmaWVyUmVjdXJzZSIsImhhbmRsZU1hdGNoIiwiaXNGaXJzdE1hdGNoIiwidG9rZW5Hcm91cCIsImZpcnN0TWF0Y2giLCJyZXNvbHZlTmR4SW5pdGlhbGl6ZXIiLCJhbHRlcm5hdGVOZHgiLCJ0YXJnZXRBbHRlcm5hdGlvbiIsImluZGV4UG9zIiwibmR4UG9zIiwiYmVzdE1hdGNoQWx0SW5kZXgiLCJpc1N1YnNldE9mIiwic2V0TWVyZ2VMb2NhdG9ycyIsInRhcmdldE1hdGNoIiwiYWx0TWF0Y2giLCJhbHRlcm5hdGlvbk5keCIsInNob3VsZE1lcmdlIiwibG9jTmR4IiwiaXNTYW1lTGV2ZWwiLCJjZCIsIm9wdGlvbmFsVG9rZW4iLCJtdGNoc05keCIsIm10Y2giLCJtYWx0TWF0Y2hlcyIsImFsdGVybmF0ZVRva2VuIiwibWFsdGVybmF0ZU1hdGNoZXMiLCJjdXJyZW50TWF0Y2hlcyIsImxvb3BOZHhDbnQiLCJhbHRJbmRleCIsImFtbmR4IiwiY3VycmVudFBvcyIsIm5keEluaXRpYWxpemVyQ2xvbmUiLCJhbHRJbmRleEFyciIsImFsdEluZGV4QXJyQ2xvbmUiLCJleGwiLCJleGNsdWRlU2V0IiwidW5NYXRjaGVkQWx0ZXJuYXRpb24iLCJuZHgxIiwiZHJvcE1hdGNoIiwibmR4MiIsImFsdE1hdGNoMiIsInFuZHgiLCJwcmV2aW91c1BvcyIsIm1lcmdlTG9jYXRvcnMiLCJtdG5keCIsImdldEJ1ZmZlclRlbXBsYXRlIiwiZ2V0QnVmZmVyIiwibm9DYWNoZSIsInJlZnJlc2hGcm9tQnVmZmVyIiwiYmZmciIsImRldGVybWluZU5ld0NhcmV0UG9zaXRpb24iLCJiZWdpbiIsImtleXByZXNzIiwidmFsUmVzdWx0IiwiRXZlbnRIYW5kbGVycyIsImtleXByZXNzRXZlbnQiLCJmb3J3YXJkUG9zaXRpb24iLCJwb3NCZWZvcmUiLCJTUEFDRSIsImNoZWNrQWx0ZXJuYXRpb25NYXRjaCIsImFsdEFycjEiLCJhbHRBcnIyIiwibmEiLCJuYU5keCIsImFsdEFyckMiLCJpc01hdGNoIiwibmFBcnIiLCJhbG5keCIsImFsdGVybmF0ZSIsIm1hc2tQb3MiLCJmcm9tSXNWYWxpZCIsInJBbHRQb3MiLCJsYXN0QWx0IiwiYWx0UG9zIiwicHJldkFsdFBvcyIsInZhbGlkUG9zIiwiZGVjaXNpb25Qb3MiLCJ2YWxpZFBzQ2xvbmUiLCJ0c3RDbG9uZSIsImlzVmFsaWRSc2x0IiwicmV0dXJuUnNsdCIsImxBbHRQb3MiLCJ2YWxpZElucHV0cyIsInJlc3VsdFBvcyIsImNhcmV0IiwiY2FyZXRQb3MiLCJmcm9tQWx0ZXJuYXRlIiwidmFsaWRhdGVPbmx5IiwiaXNTZWxlY3Rpb24iLCJwb3NPYmoiLCJwcm9jZXNzQ29tbWFuZE9iamVjdCIsImNvbW1hbmRPYmoiLCJyZXZhbGlkYXRlTWFzayIsInJld3JpdGVQb3NpdGlvbiIsIl9pc1ZhbGlkIiwicnNsdCIsInZhbGlkYXRlZFBvcyIsInBvc2l0aW9uc0Nsb25lIiwiY3VycmVudFBvc1ZhbGlkIiwic2Vla05leHQiLCJpc01hc2siLCJuUG9zIiwic25Qb3MiLCJ0cmFja2JhY2tQb3NpdGlvbnMiLCJwb3N0UmVzdWx0Iiwib3JpZ2luYWxQb3MiLCJuZXdQb3MiLCJmaWxsT25seSIsInBzIiwibnAiLCJjdnBJbnB1dCIsInZhbGlkVGVzdCIsIklzRW5jbG9zZWRTdGF0aWMiLCJwb3NNYXRjaCIsIm5leHRNYXRjaCIsImx2cCIsImNhbk1hdGNoIiwiZnV6enkiLCJ0ZXN0VGVtcGxhdGUiLCJ0ZXN0UGxhY2VIb2xkZXIiLCJuZXdCbG9jayIsInNlZWtQcmV2aW91cyIsIndyaXRlQnVmZmVyIiwidHJpZ2dlckV2ZW50cyIsIl92YWx1ZVNldCIsIkRFTEVURSIsIkJBQ0tTUEFDRSIsIiRpbnB1dCIsIm5wdFZhbCIsIl92YWx1ZUdldCIsInJldHVyblBMIiwicHJldlRlc3QiLCJzdGF0aWNBbHRlcm5hdGlvbnMiLCJIYW5kbGVOYXRpdmVQbGFjZWhvbGRlciIsIm5wdFZhbHVlIiwic2VsZWN0ZWRDYXJldCIsInRhYmJlZCIsImNsaWNrUG9zIiwiZGlnaXRzIiwidnBzIiwicmFkaXhQb3MiLCJ2cCIsImRvUmFkaXhGb2N1cyIsImNsaWNrUG9zaXRpb24iLCJsdmNsaWNrUG9zaXRpb24iLCJsYXN0UG9zaXRpb24iLCJ0dCIsInZhbHVlQnVmZmVyIiwiRXZlbnRSdWxlciIsImV2ZW50TmFtZSIsImV2ZW50SGFuZGxlciIsImltT3B0cyIsInJlYWRPbmx5IiwiVEFCIiwiaW5wdXRUeXBlIiwicmV0dXJuVmFsIiwiZm9ybSIsImV2QXJyIiwia2V5ZG93bkV2ZW50Iiwia2RSZXN1bHQiLCJCQUNLU1BBQ0VfU0FGQVJJIiwiWCIsImhhbmRsZVJlbW92ZSIsIkVORCIsIlBBR0VfRE9XTiIsIkhPTUUiLCJQQUdFX1VQIiwiRVNDQVBFIiwiY2hlY2tWYWwiLCJSSUdIVCIsIkxFRlQiLCJjYXJldFBvc19iZWdpbiIsInRyYW5zbGF0ZVBvc2l0aW9uIiwiY2hlY2t2YWwiLCJ3cml0ZU91dCIsIkVOVEVSIiwid3JpdGVPdXRCdWZmZXIiLCJwYXN0ZUV2ZW50IiwidGVtcFZhbHVlIiwiaW5wdXRWYWx1ZSIsInZhbHVlQmVmb3JlQ2FyZXQiLCJzdWJzdHIiLCJ2YWx1ZUFmdGVyQ2FyZXQiLCJjbGlwYm9hcmREYXRhIiwicGFzdGVWYWx1ZSIsImlucHV0RmFsbEJhY2tFdmVudCIsImNoYW5nZXMiLCJibCIsImZyb250UGFydCIsImJhY2tQYXJ0IiwiZnJvbnRCdWZmZXJQYXJ0IiwiYmFja0J1ZmZlclBhcnQiLCJmcGwiLCJicGwiLCJuZXdCdWZmZXIiLCJvbGRCdWZmZXIiLCJhbmFseXNlQ2hhbmdlcyIsImlucHV0Q2hhciIsIml2IiwiaWVNb2JpbGVIYW5kbGVyIiwic2hhZG93Um9vdCIsImVudHJ5Iiwia2V5ZG93biIsImFwcGx5SW5wdXRWYWx1ZSIsImNvbXBvc2l0aW9uZW5kRXZlbnQiLCJzZXRWYWx1ZUV2ZW50IiwiYXJndW1lbnRfMiIsImZvY3VzRXZlbnQiLCJjbGlja0V2ZW50IiwiaW52YWxpZEV2ZW50IiwibW91c2VsZWF2ZUV2ZW50IiwibmV3Q2FyZXRQb3NpdGlvbiIsImN1dEV2ZW50IiwiY2xpcERhdGEiLCJzZXREYXRhIiwiZXhlY0NvbW1hbmQiLCJibHVyRXZlbnQiLCJtb3VzZWVudGVyRXZlbnQiLCJzdWJtaXRFdmVudCIsInJlc2V0RXZlbnQiLCJucHR2bCIsImluaXRpYXRpbmdFdmVudCIsImNoYXJDb2RlcyIsImluaXRpYWxOZHgiLCJzdGF0aWNNYXRjaGVzIiwicHJldkNhcmV0UG9zIiwidGFyZ2V0VGVtcGxhdGUiLCJjaGFyQ29kZU5keCIsIm5leHRQb3MiLCJpc1RlbXBsYXRlTWF0Y2giLCJzbmR4IiwibmV4dFZhbGlkIiwibmV4dFNuZHgiLCJ2bmR4IiwidW1WYWx1ZSIsInBuZHgiLCJidWZmZXJWYWx1ZSIsIm5vdHJhbnNsYXRlIiwiaXNEZWxldGUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImdldFJhbmdlQXQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJkdXBsaWNhdGUiLCJtb3ZlU3RhcnQiLCJzY3JvbGxDYWxjIiwiY3VycmVudFN0eWxlIiwic2Nyb2xsV2lkdGgiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInRleHROb2RlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb2xsYXBzZSIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwibW92ZUVuZCIsImRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uIiwicmV0dXJuRGVmaW5pdGlvbiIsInBvc2l0aW9ucyIsImx2VGVzdCIsImx2VGVzdEFsdCIsImxycCIsImFtbCIsInBlbmQiLCJpc1N1cHBvcnRlZCIsImVsZW1lbnRUeXBlIiwiaXNDb250ZW50RWRpdGFibGUiLCJ2YWx1ZUdldCIsInZhbHVlU2V0IiwiX192YWx1ZUdldCIsIl9fcHJvdG9fXyIsInZhbHVlUHJvcGVydHkiLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2RlZmluZVNldHRlcl9fIiwiX192YWx1ZVNldCIsIm92ZXJydWxlUlRMIiwiaW5wdXRtYXNrcGF0Y2giLCJ2YWxob29rR2V0IiwidmFsaG9va1NldCIsInBhdGNoVmFsaG9vayIsImluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrIiwicGF0Y2hWYWx1ZVByb3BlcnR5IiwiaXNFbGVtZW50VHlwZVN1cHBvcnRlZCIsImlucHV0TW9kZSIsImF1dG9jb21wbGV0ZSIsInJsIiwibG1pYiIsImN2IiwibWFza1RhcmdldCIsIm10ZHQiLCJmb3JtYXRDb2RlIiwic2V0RGF0ZSIsImRkIiwicGFkIiwiZGRkIiwiZGRkZCIsInNldE1vbnRoIiwibW0iLCJtbW0iLCJtbW1tIiwieXkiLCJzZXRGdWxsWWVhciIsInl5eXkiLCJoaCIsImh4IiwieCIsIkgiLCJISCIsIkh4IiwiTSIsIk1NIiwic2V0U2Vjb25kcyIsImdldFNlY29uZHMiLCJzcyIsInNldE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIkwiLCJUIiwiVFQiLCJaIiwiZm9ybWF0QWxpYXMiLCJpc29EYXRlIiwiaXNvVGltZSIsImlzb0RhdGVUaW1lIiwiaXNvVXRjRGF0ZVRpbWUiLCJmb3JtYXRjb2RlIiwiZHluTWF0Y2hlcyIsImZjb2RlIiwiZ2V0VG9rZW5pemVyIiwiZHludG9rZW5zIiwiZHluVG9rZW4iLCJkYXRlT2JqVmFsdWUiLCJsYXN0SW5kZXgiLCJtYXNrU3RyaW5nIiwidGFyZ2V0UHJvcCIsImRhdGVPcGVyYXRpb24iLCJkYXRlT2JqIiwiZXh0ZW5kUHJvcGVydHkiLCJpbXBvcnREYXRlIiwiaW5wdXRGb3JtYXQiLCJnZXRZZWFyIiwiZ2V0VG9rZW5NYXRjaCIsImNhbGNQb3MiLCJtYXRjaExlbmd0aCIsInRhcmdldE1hdGNoSW5kZXgiLCJkYXRldGltZSIsImkxOG4iLCJvcmRpbmFsU3VmZml4IiwiZGlzcGxheUZvcm1hdCIsIm91dHB1dEZvcm1hdCIsImRheU5hbWVzIiwibW9udGhOYW1lcyIsInRva2VuTWF0Y2giLCJwYXJ0IiwiZGF0ZVBhcnRzIiwicmF3ZGF5IiwicmF3eWVhciIsInJhd21vbnRoIiwiaXNWYWxpZERhdGUiLCJyYXdZZWFyIiwiaXNEYXRlSW5SYW5nZSIsImluaXRpYWxWYWx1ZSIsImF1dG9Fc2NhcGUiLCJ0eHQiLCJlc2NhcGVkVHh0IiwiYWxpZ25EaWdpdHMiLCJmb3JjZSIsImRpZ2l0c09wdGlvbmFsIiwicmFkaXhQb3NpdGlvbiIsImZpbmRWYWxpZGF0b3IiLCJzeW1ib2wiLCJ0c3ROZHgiLCJuZHhsIiwiZmluZFZhbGlkIiwiZGVjaW1hbFZhbGlkYXRvciIsIm51bWVyaWMiLCJkZWNpbWFsRGVmIiwicmFkaXhQb2ludERlZiIsIl9fZmluYW5jZUlucHV0IiwiX21hc2siLCJkcSIsInBhcnNlTWluTWF4T3B0aW9ucyIsIk5hTiIsIk51bWJlciIsIk1JTl9WQUxVRSIsIk1BWF9WQUxVRSIsImVuZm9yY2VEaWdpdHNPbkJsdXIiLCJhbGxvd01pbnVzIiwibmVnYXRpb25TeW1ib2wiLCJmcm9udCIsImJhY2siLCJ1bm1hc2tBc051bWJlciIsInJvdW5kaW5nRk4iLCJzaG9ydGN1dHMiLCJpbnNlcnRzIiwiaW5pdFBvcyIsImhhbm5kbGVSYWRpeERhbmNlIiwiaXNOZWdhdGl2ZSIsInVubWFza2VkIiwicHJvY2Vzc1ZhbHVlIiwiaW50ZWdlclBhcnQiLCJkZWNpbWFsUGFydCIsImZvcmNlRGlnaXRzIiwiZGlnaXRzRmFjdG9yIiwicG93IiwidG9GaXhlZCIsIm51bWJlclZhbHVlIiwic3RyaXBCdWZmZXIiLCJzdHJpcFJhZGl4IiwibGVhZGluZ3plcm9lcyIsIm51bWJlck1hdGNoZXMiLCJudW1iZXIiLCJjaGVja0ZvckxlYWRpbmdaZXJvZXMiLCJidWYiLCJjYXJldE5keCIsIm5ld0NhcmV0UG9zIiwibm1ick10Y2hzIiwiVVAiLCJET1dOIiwiY3VycmVuY3kiLCJkZWNpbWFsIiwicGVyY2VudGFnZSIsImluZGlhbm5zIiwiX2lucHV0bWFzayIsImRlZmF1bHQiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl93cmFwTmF0aXZlU3VwZXIiLCJDbGFzcyIsIl9jYWNoZSIsIk1hcCIsIldyYXBwZXIiLCJfY29uc3RydWN0IiwiX2dldFByb3RvdHlwZU9mIiwiX3NldFByb3RvdHlwZU9mIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlByb3h5IiwiUGFyZW50Iiwic2V0UHJvdG90eXBlT2YiLCJjcmVhdGVTaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwiSW5wdXRtYXNrRWxlbWVudCIsIl9IVE1MRWxlbWVudCIsImF0dHJpYnV0ZU5hbWVzIiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJzaGFkb3ciLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfaW5oZXJpdHMiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImNhbGxlZCIsInRyYW5zRW5kRXZlbnROYW1lcyIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwiYnNUcmFuc2l0aW9uRW5kIiwiVGFiIiwiJHVsIiwiJHByZXZpb3VzIiwiaGlkZUV2ZW50IiwiYWN0aXZhdGUiLCIkYWN0aXZlIiwidGFiIiwiY2xpY2tIYW5kbGVyIiwiY2hhbmdlIiwiZmlsZUlucHV0U2l6ZSIsImZpbGVzIiwic2l6ZSIsImZpbGVJbnB1dCIsImxhYmVsVGV4dCIsImxhYmVsUmVtb3ZlIiwiZmlsZU5hbWUiLCJpdGVtIiwic2VuZFRleHRGaWVsZHMiLCJmb3JtZGF0YSIsImRhdGFGb3JtIiwiY3NyZl90b2tlbiIsIl90b2tlbiIsInN1YmoiLCJyb3V0ZXMiLCJwb3N0U2VuZCIsImZvcm1WYWxpZGF0ZU5ld1Bvc3QiLCJ2YWxpZGF0ZSIsInN1Ym1pdEhhbmRsZXIiLCJmb3JtQ2hla3VwVmFsaWRhdGUiLCJjbG9zZSIsImZvcm1WYWwiLCJpbnB1dHMiLCIkZGF0YSIsIm5leHRfZWwiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicG9zdExvYWRGaWxlIiwidXBsb2FkZWRGaWxlIiwiZmlsZV9uYW1lIiwicmVhZEFzRGF0YVVSTCIsInBvc3RSZWdpc3RlciIsIm9yaWdpbiIsInBvc3RQYXNzd29yZCIsInBvc3RMb2dpbiIsInJlbG9hZCIsInBvc3RMb2dvdXQiLCJyZXR1cm5faHJlZiIsIlBvcG92ZXIiLCJnZXRDb250ZW50IiwidHlwZUNvbnRlbnQiLCJwb3BvdmVyIiwiX193ZWJwYWNrX2FtZF9vcHRpb25zX18iLCJEcm9wZG93biIsImdldFBhcmVudCIsIiRwYXJlbnQiLCJjbGVhck1lbnVzIiwiaXNBY3RpdmUiLCIkaXRlbXMiLCJkcm9wZG93biIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwiYW5PYmplY3QiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiTUFUQ0giLCJuYXRpdmVNYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJlcyIsInJ4IiwiZnVsbFVuaWNvZGUiLCJ1bmljb2RlIiwibWF0Y2hTdHIiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm5hdGl2ZVJlcGxhY2UiLCJyZWFzb24iLCJVTlNBRkVfU1VCU1RJVFVURSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVwbGFjZXIiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwic3ltYm9scyIsImNhcHR1cmUiLCJJU19QVVJFIiwic3RvcmUiLCJjb3B5cmlnaHQiLCJnZXRCdWlsdEluIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsImJpdG1hcCIsIlNsaWNrIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kQXJyb3dzIiwiYXBwZW5kRG90cyIsImFycm93cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXV0b3BsYXkiLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwiZG90cyIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluZmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicnRsIiwic2xpZGUiLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidXNlVHJhbnNmb3JtIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsIiwidmVydGljYWxTd2lwaW5nIiwid2FpdEZvckFuaW1hdGUiLCJ6SW5kZXgiLCJpbml0aWFscyIsImFuaW1hdGluZyIsImRyYWdnaW5nIiwiYXV0b1BsYXlUaW1lciIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImN1cnJlbnRTbGlkZSIsIiRkb3RzIiwibGlzdFdpZHRoIiwibGlzdEhlaWdodCIsImxvYWRJbmRleCIsIiRuZXh0QXJyb3ciLCIkcHJldkFycm93Iiwic2Nyb2xsaW5nIiwic2xpZGVDb3VudCIsInNsaWRlV2lkdGgiLCIkc2xpZGVUcmFjayIsIiRzbGlkZXMiLCJzbGlkaW5nIiwic2xpZGVPZmZzZXQiLCJzd2lwaW5nIiwiJGxpc3QiLCJ0b3VjaE9iamVjdCIsInRyYW5zZm9ybXNFbmFibGVkIiwidW5zbGlja2VkIiwiYWN0aXZlQnJlYWtwb2ludCIsImFuaW1UeXBlIiwiYW5pbVByb3AiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwiZm9jdXNzZWQiLCJpbnRlcnJ1cHRlZCIsInBhdXNlZCIsInBvc2l0aW9uUHJvcCIsInJvd0NvdW50Iiwic2hvdWxkQ2xpY2siLCIkc2xpZGVyIiwiJHNsaWRlc0NhY2hlIiwidHJhbnNmb3JtVHlwZSIsInRyYW5zaXRpb25UeXBlIiwidmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvd1RpbWVyIiwibW96SGlkZGVuIiwid2Via2l0SGlkZGVuIiwiYXV0b1BsYXkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNoYW5nZVNsaWRlIiwic2VsZWN0SGFuZGxlciIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImluc3RhbmNlVWlkIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJhZGRTbGlkZSIsInNsaWNrQWRkIiwidW5sb2FkIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsImFuaW1hdGVTbGlkZSIsImFuaW1TdGFydCIsImFwcGx5VHJhbnNpdGlvbiIsImRpc2FibGVUcmFuc2l0aW9uIiwiZ2V0TmF2VGFyZ2V0Iiwic2xpZGVIYW5kbGVyIiwiYnVpbGRBcnJvd3MiLCJidWlsZERvdHMiLCJnZXREb3RDb3VudCIsImJ1aWxkT3V0Iiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJjaGVja1Jlc3BvbnNpdmUiLCJ1bnNsaWNrIiwiY2hlY2tOYXZpZ2FibGUiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiY2xlYW5VcEV2ZW50cyIsImludGVycnVwdCIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwiY2xlYW5VcFJvd3MiLCJmYWRlU2xpZGUiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJzbGlja0ZpbHRlciIsImZvY3VzSGFuZGxlciIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImdldExlZnQiLCJvZmZzZXRMZWZ0IiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJnZXRTbGljayIsImdldFNsaWRlQ291bnQiLCJnb1RvIiwic2xpY2tHb1RvIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJyb2xlIiwiaW5pdEFycm93RXZlbnRzIiwiaW5pdERvdEV2ZW50cyIsImluaXRTbGlkZUV2ZW50cyIsImluaXRVSSIsInByb2dyZXNzaXZlTGF6eUxvYWQiLCJzbGlja05leHQiLCJwYXVzZSIsInNsaWNrUGF1c2UiLCJwbGF5Iiwic2xpY2tQbGF5IiwicG9zdFNsaWRlIiwic2xpY2tQcmV2IiwiYnJlYWtwb2ludCIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInNldENTUyIsInNldERpbWVuc2lvbnMiLCJzZXRGYWRlIiwic2V0SGVpZ2h0Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJtc1RyYW5zaXRpb24iLCJPVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsInN3aXBlRGlyZWN0aW9uIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJzd2lwZVN0YXJ0Iiwic3dpcGVNb3ZlIiwic3FydCIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsIkNvbGxhcHNlIiwiJHRyaWdnZXIiLCJ0cmFuc2l0aW9uaW5nIiwiYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiZ2V0VGFyZ2V0RnJvbVRyaWdnZXIiLCJhY3RpdmVzRGF0YSIsImFjdGl2ZXMiLCJzdGFydEV2ZW50Iiwic2Nyb2xsU2l6ZSIsImlzT3BlbiIsImZyZWVHbG9iYWwiLCJDT05WRVJUX1RPX1NUUklORyIsImNvZGVBdCIsImlzT2JqZWN0Iiwib3JpZ2luYWxBcnJheSIsIkMiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJXZWFrTWFwIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwiU1RBVEUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwiVFlQRSIsImZyZWVTZWxmIiwib2JqZWN0UHJvdG8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwiaXNPd24iLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsIm90aGVyIiwidmFsdWVPZiIsImlzQmluYXJ5IiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGhpc0FyZyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZmx1c2giLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJmdW5jVG9TdHJpbmciLCJyZUlzSG9zdEN0b3IiLCJyZUlzTmF0aXZlIiwiX19kYXRhX18iLCJIYXNoIiwiZW50cmllcyIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwibWVtb2l6ZSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsImNhY2hlZFNjcm9sbGJhcldpZHRoIiwiY2FjaGVkRGV2aWNlUGl4ZWxSYXRpbyIsImdldEVsZW1lbnRXaW5kb3ciLCJnZXRFbGVtZW50RG9jdW1lbnQiLCJkZXZpY2VQaXhlbFJhdGlvIiwib25TY3JvbGwiLCJlbFdpbmRvdyIsInNjcm9sbFhUaWNraW5nIiwic2Nyb2xsWCIsInNjcm9sbFlUaWNraW5nIiwic2Nyb2xsWSIsImlzU2Nyb2xsaW5nIiwib25TdG9wU2Nyb2xsaW5nIiwiaXNPdmVyZmxvd2luZyIsInBvc2l0aW9uU2Nyb2xsYmFyIiwieSIsIm9uTW91c2VFbnRlciIsImlzTW91c2VFbnRlcmluZyIsIm1vdXNlRW50ZXJlZCIsIm9uTW91c2VFbnRlcmVkIiwib25Nb3VzZU1vdmUiLCJtb3VzZVgiLCJtb3VzZVkiLCJmb3JjZVZpc2libGUiLCJvbk1vdXNlTW92ZUZvckF4aXMiLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlTGVhdmVGb3JBeGlzIiwib25XaW5kb3dSZXNpemUiLCJnZXRTY3JvbGxiYXJXaWR0aCIsImhpZGVOYXRpdmVTY3JvbGxiYXIiLCJvblBvaW50ZXJFdmVudCIsImlzV2l0aGluVHJhY2tYQm91bmRzIiwiaXNXaXRoaW5UcmFja1lCb3VuZHMiLCJ0cmFjayIsImlzV2l0aGluQm91bmRzIiwic2Nyb2xsYmFyIiwib25EcmFnU3RhcnQiLCJvblRyYWNrQ2xpY2siLCJkcmFnIiwiZXZlbnRPZmZzZXQiLCJkcmFnZ2VkQXhpcyIsInRyYWNrU2l6ZSIsInNpemVBdHRyIiwiY29udGVudFNpemUiLCJjb250ZW50V3JhcHBlckVsIiwic2Nyb2xsU2l6ZUF0dHIiLCJob3N0U2l6ZSIsImVsU3R5bGVzIiwic2Nyb2xsUG9zIiwib2Zmc2V0QXR0ciIsImRyYWdPZmZzZXQiLCJpc1J0bCIsImdldFJ0bEhlbHBlcnMiLCJpc1Njcm9sbE9yaWdpbkF0WmVybyIsInNjcm9sbE9mZnNldEF0dHIiLCJvbkVuZERyYWciLCJlbERvY3VtZW50IiwicmVtb3ZlUHJldmVudENsaWNrSWQiLCJwcmV2ZW50Q2xpY2siLCJtaW5TY3JvbGxiYXJXaWR0aCIsInN0b3BTY3JvbGxEZWxheSIsImRlZmF1bHRPcHRpb25zIiwib2Zmc2V0U2l6ZUF0dHIiLCJvdmVyZmxvd0F0dHIiLCJpc1Zpc2libGUiLCJpbnN0YW5jZXMiLCJhdXRvSGlkZSIsInJlY2FsY3VsYXRlIiwiZHVtbXlEaXYiLCJzY3JvbGxiYXJEdW1teUVsIiwiZHVtbXlDaGlsZCIsImR1bW15Q29udGFpbmVyT2Zmc2V0IiwiZ2V0T2Zmc2V0IiwiZHVtbXlDaGlsZE9mZnNldCIsImR1bW15Q2hpbGRPZmZzZXRBZnRlclNjcm9sbCIsImlzU2Nyb2xsaW5nVG9OZWdhdGl2ZSIsImluaXRET00iLCJpbml0TGlzdGVuZXJzIiwiY2hpbGQiLCJ3cmFwcGVyRWwiLCJzY3JvbGxhYmxlTm9kZSIsImNvbnRlbnRXcmFwcGVyIiwiY29udGVudEVsIiwiY29udGVudE5vZGUiLCJvZmZzZXRFbCIsIm1hc2tFbCIsInBsYWNlaG9sZGVyRWwiLCJmaW5kQ2hpbGQiLCJoZWlnaHRBdXRvT2JzZXJ2ZXJXcmFwcGVyRWwiLCJoZWlnaHRBdXRvT2JzZXJ2ZXJFbCIsImhvcml6b250YWwiLCJwYXNzaXZlIiwiUmVzaXplT2JzZXJ2ZXIiLCJyZXNpemVPYnNlcnZlclN0YXJ0ZWQiLCJyZXNpemVPYnNlcnZlciIsIm9ic2VydmUiLCJtdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjaGFyYWN0ZXJEYXRhIiwiY29udGVudEVsT2Zmc2V0V2lkdGgiLCJpc0hlaWdodEF1dG8iLCJpc1dpZHRoQXV0byIsImNvbnRlbnRXcmFwcGVyRWxPZmZzZXRXaWR0aCIsImVsT3ZlcmZsb3dYIiwiZWxPdmVyZmxvd1kiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImNvbnRlbnRFbFNjcm9sbEhlaWdodCIsImNvbnRlbnRFbFNjcm9sbFdpZHRoIiwiY29udGVudFdyYXBwZXJFbE9mZnNldEhlaWdodCIsIm9mZnNldEZvclhTY3JvbGxiYXIiLCJvZmZzZXRGb3JZU2Nyb2xsYmFyIiwiZ2V0U2Nyb2xsYmFyU2l6ZSIsInRvZ2dsZVRyYWNrVmlzaWJpbGl0eSIsInNjcm9sbGJhclNpemUiLCJzY3JvbGxiYXJSYXRpbyIsInNjcm9sbGJhck1pblNpemUiLCJzY3JvbGxiYXJNYXhTaXplIiwic2Nyb2xsT2Zmc2V0Iiwic2Nyb2xsUG91cmNlbnQiLCJoYW5kbGVPZmZzZXQiLCJzY3JvbGxhYmxlIiwiY2xpY2tPblRyYWNrIiwic2Nyb2xsYmFyT2Zmc2V0Iiwic2Nyb2xsZWQiLCJkaXNjb25uZWN0IiwicmVtb3ZlTGlzdGVuZXJzIiwiZGVsZXRlIiwiYmJveCIsInF1ZXJ5IiwiYWNjIiwiYXR0cmlidXRlIiwiY2hyIiwiaW5pdERPTUxvYWRlZEVsZW1lbnRzIiwicmVtb3ZlT2JzZXJ2ZXIiLCJnbG9iYWxPYnNlcnZlciIsImluaXRIdG1sQXBpIiwiaGFuZGxlTXV0YXRpb25zIiwibXV0YXRpb25zIiwibXV0YXRpb24iLCJhZGRlZE5vZGVzIiwiYWRkZWROb2RlIiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlZE5vZGVzIiwicmVtb3ZlZE5vZGUiLCJ1bk1vdW50IiwicmVxdWlyZSIsImxvYWRUb3VjaEV2ZW50cyIsImluc3BlY3RTb3VyY2UiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJ1bnNhZmUiLCJCdXR0b24iLCJpc0xvYWRpbmciLCJzZXRTdGF0ZSIsImxvYWRpbmdUZXh0IiwicmVzZXRUZXh0IiwiY2hhbmdlZCIsIiRidG4iLCJTY3JvbGxTcHkiLCIkc2Nyb2xsRWxlbWVudCIsIm9mZnNldHMiLCJhY3RpdmVUYXJnZXQiLCJnZXRTY3JvbGxIZWlnaHQiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiJGhyZWYiLCJtYXhTY3JvbGwiLCJzY3JvbGxzcHkiLCIkc3B5IiwiX2pxdWVyeSIsIl9qcXVlcnkyIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJnZXRDbGFzc2VzIiwicmVhZG9ubHkiLCJpbmRldGVybWluYXRlIiwiaW52ZXJzZSIsInBydmdldEVsZW1lbnRPcHRpb25zIiwicmFkaW9BbGxPZmYiLCJvbkNvbG9yIiwib2ZmQ29sb3IiLCJvblRleHQiLCJvZmZUZXh0IiwiaGFuZGxlV2lkdGgiLCJsYWJlbFdpZHRoIiwiYmFzZUNsYXNzIiwid3JhcHBlckNsYXNzIiwicHJ2d2lkdGgiLCIkaGFuZGxlcyIsIiRvbiIsIiRvZmYiLCIkbGFiZWwiLCJwcml2YXRlSGFuZGxlV2lkdGgiLCJwcml2YXRlTGFiZWxXaWR0aCIsIiRjb250YWluZXIiLCIkd3JhcHBlciIsInBydmNvbnRhaW5lclBvc2l0aW9uIiwib3BlIiwicHJ2Z2V0Q2xhc3MiLCJwcnZpbml0IiwiX3RoaXMzIiwic2V0UHJldk9wdGlvbnMiLCJpbml0SW50ZXJ2YWwiLCJwcnZlbGVtZW50SGFuZGxlcnMiLCJfdGhpczQiLCJwcmV2T3B0aW9ucyIsInBydmhhbmRsZUhhbmRsZXJzIiwiX3RoaXM1IiwicHJ2bGFiZWxIYW5kbGVycyIsIl90aGlzNiIsImRyYWdTdGFydCIsImRyYWdFbmQiLCJkaWZmZXJlbmNlIiwicHJ2ZXh0ZXJuYWxMYWJlbEhhbmRsZXIiLCJfdGhpczciLCIkZXh0ZXJuYWxMYWJlbCIsInRvZ2dsZVN0YXRlIiwicHJ2Zm9ybUhhbmRsZXIiLCJpc0Jvb3RzdHJhcFN3aXRjaCIsInBlcmZvcm1SZXNldCIsImJvb3RzdHJhcFN3aXRjaCIsIiRmb3JtIiwicHJ2Z2V0Q2xhc3NlcyIsIl90aGlzOCIsIkJvb3RzdHJhcFN3aXRjaCIsIl90aGlzOSIsImNsYXNzIiwib25Jbml0IiwiX2xlbiIsImNoYW5nZVN0YXRlIiwib25Td2l0Y2hDaGFuZ2UiLCJ0b2dnbGVBbmltYXRlIiwidG9nZ2xlRGlzYWJsZWQiLCJ0b2dnbGVSZWFkb25seSIsInRvZ2dsZUluZGV0ZXJtaW5hdGUiLCJ0b2dnbGVJbnZlcnNlIiwiX2xlbjIiLCJfa2V5MiIsInJlZHVjZXIiLCJleGlzdGluZ0RhdGEiLCJkYXRhc2V0Iiwib2JqZWN0Rml0Iiwib2JqZWN0UG9zaXRpb24iLCJBZmZpeCIsImNoZWNrUG9zaXRpb24iLCJjaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCIsImFmZml4ZWQiLCJ1bnBpbiIsInBpbm5lZE9mZnNldCIsIlJFU0VUIiwiZ2V0U3RhdGUiLCJvZmZzZXRCb3R0b20iLCJpbml0aWFsaXppbmciLCJjb2xsaWRlclRvcCIsImdldFBpbm5lZE9mZnNldCIsImFmZml4IiwiYWZmaXhUeXBlIiwiJGRvYyIsIiR3aW4iLCJjaGFycyIsImRpYWNyaXRpY3MiLCJTZWxlY3RyaWMiLCJtdWx0aXBsZSIsIm9wZW5lZCIsImN1cnJWYWx1ZSIsInNlbGVjdGVkSWR4IiwiaGlnaGxpZ2h0ZWRJZHgiLCJldmVudFRyaWdnZXJzIiwidXRpbHMiLCJpc01vYmlsZSIsImVzY2FwZVJlZ0V4cCIsInJlcGxhY2VEaWFjcml0aWNzIiwibmV4dEVuYWJsZWRJdGVtIiwic2VsZWN0SXRlbXMiLCJwcmV2aW91c0VuYWJsZWRJdGVtIiwidG9EYXNoIiwidHJpZ2dlckNhbGxiYWNrIiwiZWxtIiwicGx1Z2luTmFtZSIsImFycmF5VG9DbGFzc25hbWUiLCJuZXdBcnIiLCJnZXRDbGFzc05hbWVzIiwiaXRlbXNTY3JvbGwiLCJhcnJvd0J1dHRvbk1hcmt1cCIsIm91dGVyV3JhcHBlciIsImhpZGVTZWxlY3RXcmFwcGVyIiwiaGlkZXNlbGVjdCIsIm9yaWdpbmFsVGFiaW5kZXgiLCJwb3B1bGF0ZSIsImhpZGRlbkNoaWxkcmVuIiwidGVtcHNob3ciLCJvcmlnaW5hbFdpZHRoIiwiaW5oZXJpdE9yaWdpbmFsV2lkdGgiLCJ1bmJpbmRFdmVudHMiLCIkbGkiLCJiaW5kRXZlbnRzIiwiY3VzdG9tQ2xhc3MiLCJjbGFzc2VzT2JqIiwiY3VyckNsYXNzIiwic2V0TGFiZWwiLCJsYWJlbEJ1aWxkZXIiLCJjdXJyZW50VmFsdWVzIiwibGFiZWxNYXJrdXAiLCJsb29rdXBJdGVtcyIsIm1heExhYmVsRW50cmllcyIsInNlcGFyYXRvciIsImN1cnJJdGVtIiwiJG9wdGlvbnMiLCIkanVzdE9wdGlvbnMiLCIkc2VsZWN0ZWQiLCJjdXJySW5kZXgiLCJlbXB0eVZhbHVlIiwiJGVsbSIsIm9wdGlvbnNHcm91cCIsImdyb3VwRGlzYWJsZWQiLCJnZXRJdGVtRGF0YSIsImdldEl0ZW1zTWFya3VwIiwic2x1ZyIsImFsdCIsIm1hcmt1cCIsImxpc3RCdWlsZGVyIiwiZ3JvdXBsYWJlbCIsImdldEl0ZW1NYXJrdXAiLCJpdGVtRGF0YSIsIml0ZW1CdWlsZGVyIiwib3B0aW9uc0l0ZW1CdWlsZGVyIiwiZmlsdGVyZWRJdGVtRGF0YSIsIm9wZW5PbkhvdmVyIiwiY2xvc2VUaW1lciIsImhvdmVySW50ZW50VGltZW91dCIsImhhbmRsZUtleXMiLCJvcGVuT25Gb2N1cyIsInNlYXJjaFJlZ0V4cCIsInJlc2V0U3RyIiwia2V5U2VhcmNoVGltZW91dCIsImhpZ2hsaWdodCIsImFsdEl0ZW1zIiwiYWkiLCJtb3VzZWRvd24iLCJpc1ByZXZLZXkiLCJwcmV2aW91cyIsImlzTmV4dEtleSIsImlzU2VsZWN0S2V5IiwiaXNPcGVuS2V5IiwiaXNGaXJzdE9yTGFzdEl0ZW0iLCJnb1RvSXRlbSIsImFsbG93V3JhcCIsImtlZXBNZW51T3BlbiIsInNldE9wdGlvbnNEaW1lbnNpb25zIiwibWF4SGVpZ2h0IiwiaXRlbXNXaWR0aCIsIndyYXBwZXJXaWR0aCIsImV4cGFuZFRvSXRlbVRleHQiLCJmaW5hbFdpZHRoIiwiaXNJblZpZXdwb3J0IiwiZm9yY2VSZW5kZXJBYm92ZSIsImFib3ZlIiwiZm9yY2VSZW5kZXJCZWxvdyIsImJlbG93Iiwid2luSGVpZ2h0IiwidWlQb3NYIiwiZml0c0Rvd24iLCJpdGVtc0hlaWdodCIsImZpdHNBYm92ZSIsInJlbmRlckFib3ZlIiwicmVuZGVyQmVsb3ciLCJkZXRlY3RJdGVtVmlzaWJpbGl0eSIsIiRmaWx0ZXJlZExpIiwibGlIZWlnaHQiLCJsaVRvcCIsIml0ZW1zU2Nyb2xsVG9wIiwic2Nyb2xsVCIsIml0ZW1zSW5uZXJIZWlnaHQiLCJwcmV2ZW50V2luZG93U2Nyb2xsIiwib3JnRXZlbnQiLCJkZWx0YVkiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJoYXNTZWxlY3RlZEluZGV4IiwicHJlc2VydmVEYXRhIiwib25DaGFuZ2UiLCJudW1iZXJzX2FycmF5IiwidXBwZXJfbGV0dGVyc19hcnJheSIsImxvd2VyX2xldHRlcnNfYXJyYXkiLCJzcGVjaWFsX2NoYXJzX2FycmF5IiwiY2FsbGJhY2tzIiwiZ2VuZXJhdGVkUGFzc3dvcmQiLCJnZW5lcmF0ZVBhc3N3b3JkIiwic2VsT3B0aW9ucyIsInVwcGVyY2FzZSIsImxvd2VyY2FzZSIsIm51bWJlcnMiLCJzcGVjaWFsQ2hhcnMiLCJub19sb3dlcl9sZXR0ZXJzIiwib3B0aW9uTGVuZ3RoIiwicGFzc3dvcmRMZW5ndGgiLCJyYW5kb21Gcm9tSW50ZXJ2YWwiLCJyZW1haW5lZCIsInNodWZmbGUiLCJwYXNzd29yZFN0cmluZyIsInBhc3N3b3JkRWxlbWVudCIsImRpc3BsYXlFbGVtZW50Iiwib25QYXNzd29yZEdlbmVyYXRlZCIsImZyb20iLCJwR2VuZXJhdG9yIiwiYXR0ckZuIiwiYWdlbnQiLCJpc0Nocm9tZURlc2t0b3AiLCJ0YXBfcGl4ZWxfcmFuZ2UiLCJzd2lwZV9oX3RocmVzaG9sZCIsInN3aXBlX3ZfdGhyZXNob2xkIiwidGFwaG9sZF90aHJlc2hvbGQiLCJkb3VibGV0YXBfaW50IiwidG91Y2hfY2FwYWJsZSIsIm9yaWVudGF0aW9uX3N1cHBvcnQiLCJzdGFydGV2ZW50IiwiZW5kZXZlbnQiLCJtb3ZlZXZlbnQiLCJ0YXBldmVudCIsInNjcm9sbGV2ZW50IiwiaG9sZF90aW1lciIsInRhcF90aW1lciIsImlzVG91Y2hDYXBhYmxlIiwiZ2V0U3RhcnRFdmVudCIsImdldEVuZEV2ZW50IiwiZ2V0TW92ZUV2ZW50IiwiZ2V0VGFwRXZlbnQiLCJnZXRTY3JvbGxFdmVudCIsInRhcHN0YXJ0IiwidGhpc09iamVjdCIsInRhcFN0YXJ0RnVuYyIsIm9yaWdFdmVudCIsInRvdWNoRGF0YSIsInRyaWdnZXJDdXN0b21FdmVudCIsImNhbGxlZSIsInRhcG1vdmUiLCJ0YXBNb3ZlRnVuYyIsInRhcGVuZCIsInRhcEVuZEZ1bmMiLCJ0YXBob2xkIiwib3JpZ1RhcmdldCIsInN0YXJ0X3BvcyIsImVuZF94IiwiZW5kX3kiLCJ0YXBIb2xkRnVuYzEiLCJzdGFydF90aW1lIiwic3RhcnRQb3NpdGlvbiIsImRpZmZfeCIsImRpZmZfeSIsImVuZF90aW1lIiwiZW5kUG9zaXRpb24iLCJ0YXBIb2xkRnVuYzIiLCJ0YXBIb2xkRnVuYzMiLCJjYWxsZWUxIiwiY2FsbGVlMiIsImNhbGxlZTMiLCJkb3VibGV0YXAiLCJmaXJzdFRhcCIsImNvb2xpbmciLCJkb3VibGVUYXBGdW5jMSIsImRvdWJsZVRhcEZ1bmMyIiwibGFzdFRhcCIsInNpbmdsZXRhcCIsInNpbmdsZVRhcEZ1bmMxIiwic2luZ2xlVGFwRnVuYzIiLCJlbmRfcG9zX3giLCJlbmRfcG9zX3kiLCJ0YXAiLCJzdGFydGVkIiwidGFwRnVuYzEiLCJ0YXBGdW5jMiIsInRvdWNoIiwic3RhcnRFdm50IiwiaGFzU3dpcGVkIiwib3JpZ2luYWxDb29yZCIsImZpbmFsQ29vcmQiLCJ0b3VjaFN0YXJ0Iiwic3dpcGVkaXIiLCJlbGVfeF90aHJlc2hvbGQiLCJlbGVfeV90aHJlc2hvbGQiLCJoX3RocmVzaG9sZCIsInZfdGhyZXNob2xkIiwiZW5kRXZudCIsInhBbW91bnQiLCJ5QW1vdW50IiwidG91Y2hFbmQiLCJzY3JvbGxzdGFydCIsInNjcm9sbEZ1bmMiLCJnZXRfb3JpZW50YXRpb24iLCJsYXN0X29yaWVudGF0aW9uIiwiaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUiLCJpbml0aWFsX29yaWVudGF0aW9uX2lzX2RlZmF1bHQiLCJwb3J0cmFpdF9tYXAiLCJ3dyIsIndoIiwiaW5uZXJIZWlnaHQiLCJvcmllbnRhdGlvbiIsIm9yaWVudGF0aW9uY2hhbmdlIiwib2xkX2hhbmRsZXIiLCJ0aHJvdHRsZWRyZXNpemUiLCJ0aHJvdHRsZV9oYW5kbGVyIiwiaGVsZENhbGwiLCJjdXJyIiwibGFzdENhbGwiLCJvcmlnaW5hbFR5cGUiLCJzY3JvbGxlbmQiLCJzd2lwZXVwIiwic3dpcGVyaWdodCIsInN3aXBlZG93biIsInN3aXBlbGVmdCIsInN3aXBlZW5kIiwidGFwMiIsInNyY0UiLCJDYXJvdXNlbCIsIiRpbmRpY2F0b3JzIiwiY3ljbGUiLCJnZXRJdGVtSW5kZXgiLCJnZXRJdGVtRm9yRGlyZWN0aW9uIiwiYWN0aXZlSW5kZXgiLCJpdGVtSW5kZXgiLCIkbmV4dCIsImlzQ3ljbGluZyIsInNsaWRlRXZlbnQiLCIkbmV4dEluZGljYXRvciIsInNsaWRFdmVudCIsImNhcm91c2VsIiwic2xpZGVJbmRleCIsIiRjYXJvdXNlbCIsImZpeGVkQ29udGVudFBvcyIsInBvcHVwIiwic2VsZWN0QXBwb2ludG1lbnRTcGVjaWFsaXN0Iiwic2VsZWN0UXVlc3Rpb25UZXh0IiwiZnVuY3Rpb25Ub1N0cmluZyIsInBvc3RmaXgiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJuYXRpdmVFeGVjIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJBdHRyaWJ1dGVzIiwiUkUiLCJnIiwicSIsInoiLCJjdXJyVGVtcGxhdGUiLCJjbG9zZUJ0biIsImNsb3NlTWFya3VwIiwidENsb3NlIiwiYXBwVmVyc2lvbiIsImlzTG93SUUiLCJpc0lFOCIsImFsbCIsImlzQW5kcm9pZCIsImlzSU9TIiwic3VwcG9ydHNUcmFuc2l0aW9uIiwiQiIsInByb2JhYmx5TW9iaWxlIiwicG9wdXBzQ2FjaGUiLCJpc09iaiIsIm1haW5FbCIsImNsb3NlT25Db250ZW50Q2xpY2siLCJjbG9zZU9uQmdDbGljayIsInNob3dDbG9zZUJ0biIsImVuYWJsZUVzY2FwZUtleSIsImJnT3ZlcmxheSIsIl9jaGVja0lmQ2xvc2UiLCJjb250ZW50Q29udGFpbmVyIiwicHJlbG9hZGVyIiwidExvYWRpbmciLCJjbG9zZUJ0bkluc2lkZSIsImNsb3NlX3JlcGxhY2VXaXRoIiwiYWxpZ25Ub3AiLCJmaXhlZEJnUG9zIiwidXBkYXRlU2l6ZSIsIndIIiwiX2hhc1Njcm9sbEJhciIsIl9nZXRTY3JvbGxiYXJTaXplIiwiaXNJRTciLCJfYWRkQ2xhc3NUb01GUCIsInVwZGF0ZUl0ZW1IVE1MIiwiX2xhc3RGb2N1c2VkRWwiLCJfc2V0Rm9jdXMiLCJfb25Gb2N1c0luIiwicmVtb3ZhbERlbGF5IiwiX2Nsb3NlIiwiX3JlbW92ZUNsYXNzRnJvbU1GUCIsImF1dG9Gb2N1c0xhc3QiLCJwcmV2SGVpZ2h0IiwicGFyc2VFbCIsImFwcGVuZENvbnRlbnQiLCJwcmVsb2FkZWQiLCJhZGRHcm91cCIsIm1mcEVsIiwiX29wZW5DbGljayIsIm1pZENsaWNrIiwiZGlzYWJsZU9uIiwidXBkYXRlU3RhdHVzIiwiX3BhcnNlTWFya3VwIiwicmVnaXN0ZXJNb2R1bGUiLCJEIiwiRSIsIkYiLCJHIiwiaGlkZGVuQ2xhc3MiLCJ0Tm90Rm91bmQiLCJpbml0SW5saW5lIiwiZ2V0SW5saW5lIiwiaW5saW5lRWxlbWVudCIsIkkiLCJKIiwiSyIsInJlcSIsImN1cnNvciIsInRFcnJvciIsImluaXRBamF4IiwiZ2V0QWpheCIsImZpbmlzaGVkIiwibG9hZEVycm9yIiwiTiIsInRpdGxlU3JjIiwidmVydGljYWxGaXQiLCJpbml0SW1hZ2UiLCJyZXNpemVJbWFnZSIsIl9vbkltYWdlSGFzU2l6ZSIsImhhc1NpemUiLCJpc0NoZWNraW5nSW1nU2l6ZSIsImltZ0hpZGRlbiIsImZpbmRJbWFnZVNpemUiLCJuYXR1cmFsV2lkdGgiLCJnZXRJbWFnZSIsImxvYWRlZCIsImltZ19yZXBsYWNlV2l0aCIsImxvYWRpbmciLCJpbml0Wm9vbSIsInpvb20iLCJfYWxsb3dab29tIiwiX2dldEl0ZW1Ub1pvb20iLCJfZ2V0T2Zmc2V0Iiwic3JjQWN0aW9uIiwicGF0dGVybnMiLCJ5b3V0dWJlIiwidmltZW8iLCJnbWFwcyIsImluaXRJZnJhbWUiLCJnZXRJZnJhbWUiLCJpZnJhbWUiLCJsYXN0SW5kZXhPZiIsImFycm93TWFya3VwIiwidFByZXYiLCJ0TmV4dCIsInRDb3VudGVyIiwiaW5pdEdhbGxlcnkiLCJjb3VudGVyIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsIl9wcmVsb2FkVGltZW91dCIsInByZWxvYWROZWFyYnlJbWFnZXMiLCJfcHJlbG9hZEl0ZW0iLCJVIiwicmVwbGFjZVNyYyIsInJhdGlvIiwiaW5pdFJldGluYSIsInJldGluYSIsIk1FVEhPRF9OQU1FIiwib25zdWJtaXQiLCJzdWJtaXRCdXR0b24iLCJjYW5jZWxTdWJtaXQiLCJmb3JtU3VibWl0dGVkIiwiY3VycmVudEZvcm0iLCJkZWJ1ZyIsInBlbmRpbmdSZXF1ZXN0IiwiZm9jdXNJbnZhbGlkIiwiZXJyb3JMaXN0IiwicnVsZXMiLCJjb21tYW5kIiwic3RhdGljUnVsZXMiLCJleGlzdGluZ1J1bGVzIiwiZmlsdGVyZWQiLCJub3JtYWxpemVSdWxlIiwibWVzc2FnZXMiLCJub3JtYWxpemVSdWxlcyIsImNsYXNzUnVsZXMiLCJhdHRyaWJ1dGVSdWxlcyIsImRhdGFSdWxlcyIsInJlcXVpcmVkIiwiYmxhbmsiLCJmaWxsZWQiLCJ1bmNoZWNrZWQiLCJlcnJvckNsYXNzIiwicGVuZGluZ0NsYXNzIiwidmFsaWRDbGFzcyIsImVycm9yRWxlbWVudCIsImZvY3VzQ2xlYW51cCIsImVycm9yQ29udGFpbmVyIiwiZXJyb3JMYWJlbENvbnRhaW5lciIsImlnbm9yZSIsImlnbm9yZVRpdGxlIiwib25mb2N1c2luIiwibGFzdEFjdGl2ZSIsInVuaGlnaGxpZ2h0IiwiaGlkZVRoZXNlIiwiZXJyb3JzRm9yIiwib25mb2N1c291dCIsImNoZWNrYWJsZSIsInN1Ym1pdHRlZCIsIm9wdGlvbmFsIiwib25rZXl1cCIsImVsZW1lbnRWYWx1ZSIsImludmFsaWQiLCJvbmNsaWNrIiwiZmluZEJ5TmFtZSIsInNldERlZmF1bHRzIiwiZGF0ZUlTTyIsImVxdWFsVG8iLCJtYXhsZW5ndGgiLCJtaW5sZW5ndGgiLCJyYW5nZWxlbmd0aCIsImF1dG9DcmVhdGVSYW5nZXMiLCJsYWJlbENvbnRhaW5lciIsImVycm9yQ29udGV4dCIsImNvbnRhaW5lcnMiLCJ2YWx1ZUNhY2hlIiwicGVuZGluZyIsImludmFsaWRIYW5kbGVyIiwiY2hlY2tGb3JtIiwiZXJyb3JNYXAiLCJzaG93RXJyb3JzIiwicHJlcGFyZUZvcm0iLCJjdXJyZW50RWxlbWVudHMiLCJycyIsImNsZWFuRWxlbWVudCIsImNsZWFuIiwiY2hlY2tFbGVtZW50IiwidmFsaWRhdGlvblRhcmdldEZvciIsInByZXBhcmVFbGVtZW50IiwidGVzdGdyb3VwIiwibnVtYmVyT2ZJbnZhbGlkcyIsInRvSGlkZSIsImVycm9ycyIsInN1Y2Nlc3NMaXN0IiwiZGVmYXVsdFNob3dFcnJvcnMiLCJyZXNldEZvcm0iLCJoaWRlRXJyb3JzIiwicmVzZXRFbGVtZW50cyIsIm9iamVjdExlbmd0aCIsImFkZFdyYXBwZXIiLCJmaW5kTGFzdEFjdGl2ZSIsInJ1bGVzQ2FjaGUiLCJyZXNldEludGVybmFscyIsInRvU2hvdyIsInZhbGlkaXR5IiwiYmFkSW5wdXQiLCJydWxlIiwibm9ybWFsaXplciIsInJ1bGVzQ291bnQiLCJkZXBlbmRlbmN5TWlzbWF0Y2giLCJwYXJhbWV0ZXJzIiwiZm9ybWF0QW5kQWRkIiwibG9nIiwiY3VzdG9tRGF0YU1lc3NhZ2UiLCJjdXN0b21NZXNzYWdlIiwiZmluZERlZmluZWQiLCJkZWZhdWx0TWVzc2FnZSIsInRoZXJlZ2V4IiwidG9Ub2dnbGUiLCJzaG93TGFiZWwiLCJ2YWxpZEVsZW1lbnRzIiwiaW52YWxpZEVsZW1lbnRzIiwicGxhY2UiLCJlcnJvcklEIiwiZWxlbWVudElEIiwiaWRPck5hbWUiLCJkZXNjcmliZWRCeSIsImVycm9yUGxhY2VtZW50IiwiZXNjYXBlQ3NzTWV0YSIsImRlc2NyaWJlciIsImdldExlbmd0aCIsImRlcGVuZCIsImRlcGVuZFR5cGVzIiwic3RhcnRSZXF1ZXN0Iiwic3RvcFJlcXVlc3QiLCJwcmV2aW91c1ZhbHVlIiwiY2xhc3NSdWxlU2V0dGluZ3MiLCJjcmVkaXRjYXJkIiwiYWRkQ2xhc3NSdWxlcyIsIm5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGUiLCJkZXBlbmRzIiwia2VlcFJ1bGUiLCJwYXJhbWV0ZXIiLCJ0cmFuc2Zvcm1lZCIsImFkZE1ldGhvZCIsImRlY2ltYWxzIiwiZXJyb3JNZXNzYWdlIiwiZGVjaW1hbFBsYWNlcyIsInRvSW50Iiwib3B0aW9uRGF0YVN0cmluZyIsIm9yaWdpbmFsTWVzc2FnZSIsInBvcnQiLCJwZW5kaW5nUmVxdWVzdHMiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwidGhyb3dlciIsIkFDQ0VTU09SUyIsImFyZ3VtZW50MCIsImFyZ3VtZW50MSIsImxhenlTaXplcyIsImxhenlzaXplcyIsImxhenlTaXplc0NmZyIsImxhenlTaXplc0RlZmF1bHRzIiwibGF6eUNsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJwcmVsb2FkQ2xhc3MiLCJhdXRvc2l6ZXNDbGFzcyIsInNyY0F0dHIiLCJzcmNzZXRBdHRyIiwic2l6ZXNBdHRyIiwibWluU2l6ZSIsImN1c3RvbU1lZGlhIiwiZXhwRmFjdG9yIiwiaEZhYyIsImxvYWRNb2RlIiwibG9hZEhpZGRlbiIsInJpY1RpbWVvdXQiLCJ0aHJvdHRsZURlbGF5IiwibGF6eVNpemVzQ29uZmlnIiwibGF6eXNpemVzQ29uZmlnIiwiY2ZnIiwibm9TdXBwb3J0Iiwic3VwcG9ydFBpY3R1cmUiLCJIVE1MUGljdHVyZUVsZW1lbnQiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwicmVnUGljdHVyZSIsImxvYWRFdmVudHMiLCJyZWdDbGFzc0NhY2hlIiwiZWxlIiwiY2xzIiwicmVnIiwiYWRkUmVtb3ZlTG9hZEV2ZW50cyIsImRvbSIsInRyaWdnZXJFdmVudCIsIm5vQnViYmxlcyIsIm5vQ2FuY2VsYWJsZSIsImluaXRFdmVudCIsInVwZGF0ZVBvbHlmaWxsIiwiZnVsbCIsInBvbHlmaWxsIiwicGljdHVyZWZpbGwiLCJwZiIsInJlZXZhbHVhdGUiLCJnZXRDU1MiLCJnZXRXaWR0aCIsIl9sYXp5c2l6ZXNXaWR0aCIsInJBRiIsImZpcnN0Rm5zIiwic2Vjb25kRm5zIiwicnVuRm5zIiwicnVubmluZyIsIndhaXRpbmciLCJyYWZCYXRjaCIsIl9sc0ZsdXNoIiwickFGSXQiLCJkZWJvdW5jZSIsInRpbWVzdGFtcCIsImxhdGVyIiwibG9hZGVyIiwicmVnSW1nIiwicmVnSWZyYW1lIiwic3VwcG9ydFNjcm9sbCIsImN1cnJlbnRFeHBhbmQiLCJsb3dSdW5zIiwicmVzZXRQcmVsb2FkaW5nIiwiaXNCb2R5SGlkZGVuIiwiaXNOZXN0ZWRWaXNpYmxlIiwiZWxlbUV4cGFuZCIsIm91dGVyUmVjdCIsImVMdG9wIiwiZUxib3R0b20iLCJlTGxlZnQiLCJlTHJpZ2h0IiwiY2hlY2tFbGVtZW50cyIsImVMbGVuIiwiYXV0b0xvYWRFbGVtIiwibG9hZGVkU29tZXRoaW5nIiwiZWxlbU5lZ2F0aXZlRXhwYW5kIiwiZWxlbUV4cGFuZFZhbCIsImJlZm9yZUV4cGFuZFZhbCIsImRlZmF1bHRFeHBhbmQiLCJwcmVsb2FkRXhwYW5kIiwibGF6eWxvYWRFbGVtcyIsIl9sYXp5UmFjZSIsInByZW1hdHVyZVVudmVpbCIsInVudmVpbEVsZW1lbnQiLCJfZGVmRXgiLCJlTHZXIiwiZWx2SCIsImlzQ29tcGxldGVkIiwicHJlbG9hZEVsZW1zIiwicHJlbG9hZEFmdGVyTG9hZCIsInRocm90dGxlZENoZWNrRWxlbWVudHMiLCJsYXN0VGltZSIsImdEZWxheSIsInJJQ1RpbWVvdXQiLCJpZGxlQ2FsbGJhY2siLCJpc1ByaW9yaXR5Iiwic3dpdGNoTG9hZGluZ0NsYXNzIiwiX2xhenlDYWNoZSIsInJhZlN3aXRjaExvYWRpbmdDbGFzcyIsInJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzIiwiaGFuZGxlU291cmNlcyIsInNvdXJjZVNyY3NldCIsImxhenlVbnZlaWwiLCJpc0F1dG8iLCJzaXplcyIsImlzSW1nIiwic3Jjc2V0IiwiaXNQaWN0dXJlIiwiZmlyZXNMb2FkIiwicmVzZXRQcmVsb2FkaW5nVGltZXIiLCJjb250ZW50V2luZG93IiwiY2hhbmdlSWZyYW1lU3JjIiwiaXNMb2FkZWQiLCJhdXRvU2l6ZXIiLCJ1cGRhdGVFbGVtIiwiYWZ0ZXJTY3JvbGwiLCJhbHRMb2FkbW9kZVNjcm9sbExpc3RuZXIiLCJwZXJzaXN0ZWQiLCJsb2FkaW5nRWxlbWVudHMiLCJjaGVja0VsZW1zIiwidW52ZWlsIiwiX2FMU0wiLCJzaXplRWxlbWVudCIsInNvdXJjZXMiLCJnZXRTaXplRWxlbWVudCIsImRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMiLCJhdXRvc2l6ZXNFbGVtcyIsInVQIiwiYUMiLCJyQyIsImhDIiwiZ1ciLCJGdW5jdGlvblByb3RvdHlwZSIsIkZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmciLCJuYW1lUkUiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJzcGVjaWZpY0NyZWF0ZSIsImJvdW5kRnVuY3Rpb24iLCJmaW5kSW5kZXgiLCJkaXNtaXNzIiwiQWxlcnQiLCJyZW1vdmVFbGVtZW50IiwiYWxlcnQiLCJQUkVGRVJSRURfU1RSSU5HIiwiYWxsb3dQYWdlU2Nyb2xsIiwic3dpcGVTdGF0dXMiLCJOT05FIiwicGx1Z2luIiwiUExVR0lOX05TIiwiVG91Y2hTd2lwZSIsImpxRXZlbnQiLCJleGNsdWRlZEVsZW1lbnRzIiwiZmFsbGJhY2tUb01vdXNlRXZlbnRzIiwicGhhc2UiLCJQSEFTRV9TVEFSVCIsInByZXZlbnREZWZhdWx0RXZlbnRzIiwicGluY2hEaXJlY3Rpb24iLCJzdGFydFRvdWNoZXNEaXN0YW5jZSIsImVuZFRvdWNoZXNEaXN0YW5jZSIsInBpbmNoWm9vbSIsInBpbmNoRGlzdGFuY2UiLCJtYXhEYXRhIiwiY3JlYXRlTWF4aW11bVZPIiwibWF4aW11bXNNYXAiLCJjYW5jZWxNdWx0aUZpbmdlclJlbGVhc2UiLCJjcmVhdGVGaW5nZXJEYXRhIiwiZmluZ2VycyIsIkFMTF9GSU5HRVJTIiwiaGFzUGluY2hlcyIsImdldFRpbWVTdGFtcCIsImNhbGN1bGF0ZVRvdWNoZXNEaXN0YW5jZSIsImZpbmdlckRhdGEiLCJwaW5jaFN0YXR1cyIsIlBIQVNFX0NBTkNFTCIsImhvbGRUaW1lb3V0IiwibG9uZ1RhcFRocmVzaG9sZCIsInNldFRvdWNoSW5Qcm9ncmVzcyIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsIlBIQVNFX0VORCIsImluTXVsdGlGaW5nZXJSZWxlYXNlIiwiY3VycmVudEZpbmdlciIsInVwZGF0ZUZpbmdlckRhdGEiLCJlbmRUaW1lIiwiUEhBU0VfTU9WRSIsIk9VVCIsIklOIiwiY2FsY3VsYXRlRGlyZWN0aW9uIiwiYXV0byIsIkFVVE8iLCJIT1JJWk9OVEFMIiwic3dpcGVVcCIsIlZFUlRJQ0FMIiwic3dpcGVEb3duIiwidmFsaWRhdGVEZWZhdWx0RXZlbnQiLCJjYWxjdWxhdGVEdXJhdGlvbiIsImdldE1heERpc3RhbmNlIiwic2V0TWF4RGlzdGFuY2UiLCJ0cmlnZ2VyT25Ub3VjaEVuZCIsInRyaWdnZXJPblRvdWNoTGVhdmUiLCJpbkJvdW5kcyIsImJvdW5kcyIsInBvaW50IiwiaXNJbkJvdW5kcyIsImdldE5leHRQaGFzZSIsInByZXZpb3VzVG91Y2hFbmRUaW1lIiwiZmluZ2VyQ291bnRBdFJlbGVhc2UiLCJzdGFydE11bHRpRmluZ2VyUmVsZWFzZSIsImRpZFN3aXBlQmFja1RvQ2FuY2VsIiwidmFsaWRhdGVTd2lwZURpc3RhbmNlIiwiaGFzVGFwIiwidHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlIiwiVEFQIiwidG91Y2hDYW5jZWwiLCJ0b3VjaExlYXZlIiwiU1RBUlRfRVYiLCJDQU5DRUxfRVYiLCJNT1ZFX0VWIiwiRU5EX0VWIiwiTEVBVkVfRVYiLCJjdXJyZW50UGhhc2UiLCJuZXh0UGhhc2UiLCJ2YWxpZFRpbWUiLCJ2YWxpZGF0ZVN3aXBlVGltZSIsInZhbGlkRGlzdGFuY2UiLCJkaWRDYW5jZWwiLCJ2YWxpZGF0ZVN3aXBlIiwiaGFzU3dpcGVzIiwiU1dJUEUiLCJ2YWxpZGF0ZVBpbmNoIiwiUElOQ0giLCJ2YWxpZGF0ZURvdWJsZVRhcCIsImhhc0RvdWJsZVRhcCIsIkRPVUJMRV9UQVAiLCJET1VCTEVfVEFQX1RIUkVTSE9MRCIsImxvbmdUYXAiLCJMT05HX1RBUCIsIlNVUFBPUlRTX1RPVUNIIiwiZ2VzdHVyZSIsInNpbmdsZVRhcFRpbWVvdXQiLCJwaW5jaEluIiwicGluY2hPdXQiLCJkb3VibGVUYXBTdGFydFRpbWUiLCJkb3VibGVUYXBUaHJlc2hvbGQiLCJkb3VibGVUYXAiLCJjYW5jZWxsZWQiLCJjYW5jZWxUaHJlc2hvbGQiLCJtYXhUaW1lVGhyZXNob2xkIiwiaGFzQ29ycmVjdEZpbmdlckNvdW50IiwidmFsaWRhdGVGaW5nZXJzIiwiaGFzRW5kUG9pbnQiLCJ2YWxpZGF0ZUVuZFBvaW50IiwiaGFzQ29ycmVjdERpc3RhbmNlIiwicGluY2hUaHJlc2hvbGQiLCJoYXNWYWxpZFRpbWUiLCJoYXNWYWxpZERpc3RhbmNlIiwid2l0aGluVGhyZXNob2xkIiwiZmluZ2VyUmVsZWFzZVRocmVzaG9sZCIsImdldEZpbmdlckRhdGEiLCJkaWZmWCIsImRpZmZZIiwicG9pbnRCIiwicG9pbnRBIiwiYW5nbGUiLCJjYWxjdWxhdGVBbmdsZSIsInVzZVRvdWNoRXZlbnRzIiwiU1VQUE9SVFNfUE9JTlRFUiIsIlNVUFBPUlRTX1BPSU5URVJfSUUxMCIsIm1zUG9pbnRlckVuYWJsZWQiLCJQb2ludGVyRXZlbnQiLCJwaGFzZXMiLCJkaXJlY3Rpb25zIiwicGFnZVNjcm9sbCIsIk9ORSIsIlRXTyIsIlRIUkVFIiwiRk9VUiIsIkZJVkUiLCJBTEwiLCJFZGl0YWJsZUZvcm0iLCJlZGl0YWJsZWZvcm0iLCIkZGl2IiwiaW5pdElucHV0Iiwic3RyMnZhbHVlIiwicHJlcmVuZGVyIiwiaW5pdFRlbXBsYXRlIiwiaW5pdEJ1dHRvbnMiLCJzaG93YnV0dG9ucyIsInJlbmRlciIsIiRsb2FkaW5nIiwic2hvd0xvYWRpbmciLCJpc1NhdmluZyIsIiR0cGwiLCJhdXRvc3VibWl0IiwidmFsdWUyaW5wdXQiLCJzaG93Rm9ybSIsInBvc3RyZW5kZXIiLCJsaW5lcyIsIiRncm91cCIsIiRibG9jayIsImVycm9yR3JvdXBDbGFzcyIsImVycm9yQmxvY2tDbGFzcyIsIm5ld1ZhbHVlIiwiaW5wdXQydmFsdWUiLCJzYXZlbm9jaGFuZ2UiLCJ2YWx1ZTJzdHIiLCJzdWJtaXRWYWx1ZSIsInZhbHVlMnN1Ym1pdCIsInNhdmUiLCJwayIsImVkaXRhYmxldXRpbHMiLCJ0cnlQYXJzZUpzb24iLCJhamF4T3B0aW9ucyIsImNvbnZlcnRTdHIiLCJlbmdpbmUiLCJpbmhlcml0IiwiQ2hpbGQiLCJzdXBlcmNsYXNzIiwic2V0Q3Vyc29yUG9zaXRpb24iLCJzYWZlIiwic2xpY2VPYmoiLCJjYXNlU2Vuc2l0aXZlIiwia2V5TG93ZXIiLCJuZXdPYmoiLCJnZXRDb25maWdEYXRhIiwib2JqZWN0S2V5cyIsIml0ZW1zQnlWYWx1ZSIsInNvdXJjZURhdGEiLCJ2YWx1ZVByb3AiLCJpZEtleSIsImlzVmFsQXJyYXkiLCJpdGVtVmFsdWUiLCJjcmVhdGVJbnB1dCIsIlR5cGVDb25zdHJ1Y3RvciIsImVkaXRhYmxldHlwZXMiLCJkYXRlZmllbGQiLCJkYXRldWlmaWVsZCIsImRhdGV1aSIsInN1cHBvcnRzVHJhbnNpdGlvbnMiLCJQb3B1cCIsIklubGluZSIsImNvbnRhaW5lck5hbWUiLCJjb250YWluZXJEYXRhTmFtZSIsImlubmVyQ3NzIiwiY29udGFpbmVyQ2xhc3MiLCJlZGl0YWJsZUNvbnRhaW5lciIsInNwbGl0T3B0aW9ucyIsImZvcm1PcHRpb25zIiwiaW5pdENvbnRhaW5lciIsImRlbGF5ZWRIaWRlIiwiZXhjbHVkZV9jbGFzc2VzIiwiY2xvc2VPdGhlcnMiLCJjb250YWluZXJPcHRpb25zIiwicmVuZGVyRm9ybSIsIm5vY2hhbmdlIiwicmVuZGVyaW5nIiwicmVuZGVyZWQiLCJjbG9zZUFsbCIsImlubmVyU2hvdyIsImlubmVySGlkZSIsInNldENvbnRhaW5lck9wdGlvbiIsImlubmVyRGVzdHJveSIsImVjIiwib25ibHVyIiwiYXV0b2hpZGUiLCJkZXN0cm95ZWQiLCJFZGl0YWJsZSIsImVkaXRhYmxlIiwiaW5pdExpdmUiLCJkb0F1dG90ZXh0IiwiaXNWYWx1ZUJ5VGV4dCIsImh0bWwydmFsdWUiLCJhdXRvdGV4dCIsImVtcHR5Y2xhc3MiLCJ2YWx1ZTJodG1sRmluYWwiLCJ2YWx1ZTJodG1sIiwiaGFuZGxlRW1wdHkiLCJpc0VtcHR5IiwiZW1wdHl0ZXh0IiwidW5zYXZlZGNsYXNzIiwic2VudCIsImJnQ29sb3IiLCJkYXRha2V5IiwiY29uZmlnIiwiJGVsZW1zIiwiQWJzdHJhY3RJbnB1dCIsInRwbCIsIiRjbGVhciIsInNldENsYXNzIiwiaW5wdXRjbGFzcyIsInNldEF0dHIiLCJhYnN0cmFjdGlucHV0IiwiTGlzdCIsIm9uU291cmNlUmVhZHkiLCJyZW5kZXJMaXN0Iiwic291cmNlRXJyb3IiLCJzb3VyY2VDYWNoZSIsImNhY2hlSUQiLCJkb1ByZXBlbmQiLCJlcnJfY2FsbGJhY2tzIiwic291cmNlT3B0aW9ucyIsInByZXBlbmREYXRhIiwiaXRlcmF0ZUl0ZW0iLCJUZXh0IiwicmVuZGVyQ2xlYXIiLCJ0b2dnbGVDbGVhciIsImtleXVwIiwiVGV4dGFyZWEiLCJ0ZXh0YXJlYSIsIlNlbGVjdCIsImZpbGxJdGVtcyIsIkNoZWNrbGlzdCIsImNoZWNrbGlzdCIsIlBhc3N3b3JkIiwiRW1haWwiLCJVcmwiLCJUZWwiLCJ0ZWwiLCJOdW1iZXJJbnB1dCIsIlJhbmdlIiwiVGltZSIsInNlbGVjdDIiLCJ0YWdzIiwidGVybSIsImNvbnZlcnRTb3VyY2UiLCJpc011bHRpcGxlIiwiaXNSZW1vdGUiLCJpZEZ1bmMiLCJmb3JtYXRTZWxlY3Rpb24iLCJ2aWV3c2VwYXJhdG9yIiwiZ2V0U2VwYXJhdG9yIiwiaW5pdFNlbGVjdGlvbiIsImN1c3RvbUlkIiwiY3VzdG9tVGV4dCIsImlzSW5pdGlhbCIsIkNvbWJvZGF0ZSIsImNvbWJvZGF0ZSIsImhvdXIiLCJtaW51dGUiLCIkd2lkZ2V0IiwiZ2V0VGVtcGxhdGUiLCJpbml0Q29tYm9zIiwiZ2V0VmFsdWUiLCJzbWFydERheXMiLCJmaWxsQ29tYm8iLCIkYyIsIiRjb21ibyIsImZpbGxDb21tb24iLCJyZWxUaW1lIiwiZmlyc3RJdGVtIiwiaGVhZGVyIiwibW9tZW50IiwicmVsYXRpdmVUaW1lIiwibGFuZ0RhdGEiLCJfcmVsYXRpdmVUaW1lIiwiZmlsbERheSIsInR3b0RpZ2l0IiwiZGF5c0NvdW50IiwiJG1vbnRoIiwiJHllYXIiLCJkYXlzSW5Nb250aCIsImxlYWRaZXJvIiwiZmlsbE1vbnRoIiwibG9uZ05hbWVzIiwic2hvcnROYW1lcyIsImZpbGxZZWFyIiwibWF4WWVhciIsIm1pblllYXIiLCJ5ZWFyRGVzY2VuZGluZyIsImZpbGxIb3VyIiwiaDEyIiwiZmlsbE1pbnV0ZSIsIm1pbnV0ZVN0ZXAiLCJmaWxsU2Vjb25kIiwic2Vjb25kU3RlcCIsImZpbGxBbXBtIiwiYW1wbUwiLCJkdCIsIm5vdFNlbGVjdGVkIiwicm91bmRUaW1lIiwiZ2V0TmVhcmVzdCIsIiRzZWxlY3QiLCJvcHRWYWx1ZSIsImJvcmRlckNvbG9yIiwidmlld2Zvcm1hdCIsInBJbml0SW5wdXQiLCJlbXB0eUlucHV0Q2xhc3MiLCJzdGR0eXBlcyIsImRvY1Njcm9sbCIsInBhcmVudFdpZHRoIiwicGFyZW50SGVpZ2h0IiwicGFyZW50TGVmdCIsIlVUQ0RhdGUiLCJVVEMiLCJEYXRlcGlja2VyIiwiX3Byb2Nlc3Nfb3B0aW9ucyIsImlzSW5saW5lIiwiaXNJbnB1dCIsImNvbXBvbmVudCIsImhhc0lucHV0IiwicGlja2VyIiwiRFBHbG9iYWwiLCJfYnVpbGRFdmVudHMiLCJfYXR0YWNoRXZlbnRzIiwidmlld01vZGUiLCJzdGFydFZpZXciLCJjYWxlbmRhcldlZWtzIiwiX2FsbG93X3VwZGF0ZSIsInNldFN0YXJ0RGF0ZSIsInNldEVuZERhdGUiLCJlbmREYXRlIiwic2V0RGF5c09mV2Vla0Rpc2FibGVkIiwiZGF5c09mV2Vla0Rpc2FibGVkIiwiZmlsbERvdyIsImZpbGxNb250aHMiLCJzaG93TW9kZSIsIl9vIiwiZGF0ZXMiLCJtaW5WaWV3TW9kZSIsIndlZWtTdGFydCIsIndlZWtFbmQiLCJwYXJzZUZvcm1hdCIsIkluZmluaXR5IiwicGFyc2VEYXRlIiwiX3NlY29uZGFyeUV2ZW50cyIsIl9hcHBseUV2ZW50cyIsImV2cyIsIl91bmFwcGx5RXZlbnRzIiwiX2RldGFjaEV2ZW50cyIsIl9hdHRhY2hTZWNvbmRhcnlFdmVudHMiLCJfZGV0YWNoU2Vjb25kYXJ5RXZlbnRzIiwiYWx0ZGF0ZSIsImxvY2FsX2RhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImFsdGZvcm1hdCIsImZvcmNlUGFyc2UiLCJnZXRVVENEYXRlIiwic2V0VVRDRGF0ZSIsImZvcm1hdHRlZCIsImdldEZvcm1hdHRlZERhdGUiLCJ1cGRhdGVOYXZBcnJvd3MiLCJmcm9tQXJncyIsInZpZXdEYXRlIiwiZmlsbCIsImRvd0NudCIsImNlbGwiLCJzZXRSYW5nZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJ0b2RheUhpZ2hsaWdodCIsImdldFVUQ0RheSIsInN0YXJ0WWVhciIsInN0YXJ0TW9udGgiLCJlbmRZZWFyIiwiZW5kTW9udGgiLCJ0b2RheUJ0biIsImNsZWFyQnRuIiwicHJldk1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJuZXh0TW9udGgiLCJjbHNOYW1lIiwid3MiLCJ5dGgiLCJjYWxXZWVrIiwiYmVmb3JlU2hvd0RheSIsImN1cnJlbnRZZWFyIiwieWVhckNvbnQiLCJtb2RlcyIsIm5hdlN0ZXAiLCJtb3ZlTW9udGgiLCJtb3ZlWWVhciIsIl9zZXREYXRlIiwiYXV0b2Nsb3NlIiwic2V0VVRDTW9udGgiLCJzZXRVVENGdWxsWWVhciIsIm5ld19tb250aCIsIm5ld19kYXRlIiwibWFnIiwiZGF0ZVdpdGhpblJhbmdlIiwibmV3RGF0ZSIsIm5ld1ZpZXdEYXRlIiwiZGF0ZUNoYW5nZWQiLCJrZXlib2FyZE5hdmlnYXRpb24iLCJEYXRlUmFuZ2VQaWNrZXIiLCJkYXRlVXBkYXRlZCIsInBpY2tlcnMiLCJ1cGRhdGVEYXRlcyIsIm9wdHNfZnJvbV9lbCIsIm91dCIsIm9wdHNfZnJvbV9sb2NhbGUiLCJsb2NhbGVfb3B0cyIsInVwZGF0ZVJhbmdlcyIsImludGVybmFsX3JldHVybiIsImVsb3B0cyIsImxvY29wdHMiLCJyb3B0cyIsImVuIiwibmF2Rm5jIiwiaXNMZWFwWWVhciIsInZhbGlkUGFydHMiLCJub25wdW5jdHVhdGlvbiIsInNlcGFyYXRvcnMiLCJwYXJ0X3JlIiwic2V0dGVyc19vcmRlciIsInNldHRlcnNfbWFwIiwiZnBhcnRzIiwiY250IiwiREQiLCJzZXBzIiwiaGVhZFRlbXBsYXRlIiwiY29udFRlbXBsYXRlIiwiZm9vdFRlbXBsYXRlIiwiYmRhdGVwaWNrZXIiLCJpbml0UGlja2VyIiwiZHBnIiwicGFyc2VkRm9ybWF0IiwicGFyc2VkVmlld0Zvcm1hdCIsIkRhdGVGaWVsZCIsIkRhdGVUaW1lIiwiZGF0ZXRpbWVwaWNrZXIiLCJmb3JtYXRUeXBlIiwidG9VVEMiLCJmcm9tVVRDIiwiRGF0ZVRpbWVGaWVsZCIsImRhdGV0aW1lZmllbGQiLCJ1ZSIsIlciLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiWSIsIlEiLCJlZSIsInRlIiwibmUiLCJvZSIsImFlIiwiYmUiLCJzZSIsInllIiwieGUiLCJsZSIsImNlIiwiZmUiLCJwZSIsImRlIiwiaGUiLCJnZSIsInZlIiwibHQiLCJndCIsIm50aCIsIm1lIiwid2UiLCJUZSIsIkNlIiwiRWUiLCJTZSIsImtlIiwiQWUiLCJOZSIsIkRlIiwiamUiLCJxZSIsIkxlIiwiSGUiLCJPZSIsIlBlIiwiUmUiLCJNZSIsIkllIiwiV2UiLCJGZSIsIkJlIiwiX2UiLCJ6ZSIsIlVlIiwiWGUiLCJWZSIsIkdlIiwiWWUiLCJRZSIsIkplIiwiS2UiLCJaZSIsImV0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsIm50IiwicnQiLCJvdCIsImF0IiwidXQiLCJmdCIsInB0IiwiaHQiLCJ2dCIsInl0IiwibXQiLCJ4dCIsImJ0Iiwid3QiLCJUdCIsIkN0IiwiRXQiLCJTdCIsImt0IiwiQXQiLCJOdCIsIkR0IiwianQiLCJMdCIsIkh0IiwiT3QiLCJQdCIsIlJ0IiwiTXQiLCJJdCIsIld0IiwiRnQiLCJCdCIsIiR0IiwiX3QiLCJ6dCIsIlV0IiwiWHQiLCJWdCIsIkd0IiwiWXQiLCJRdCIsIm5hbWVzIiwiRVhJU1RTIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FB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anMvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIiFmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKCl7dmFyIHMsYSxuLGg9XCIyLjIuM1wiLG89XCJkYXRlcGlja2VyXCIscj1cIi5kYXRlcGlja2VyLWhlcmVcIixjPSExLGQ9JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyXCI+PGkgY2xhc3M9XCJkYXRlcGlja2VyLS1wb2ludGVyXCI+PC9pPjxuYXYgY2xhc3M9XCJkYXRlcGlja2VyLS1uYXZcIj48L25hdj48ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tY29udGVudFwiPjwvZGl2PjwvZGl2PicsbD17Y2xhc3NlczpcIlwiLGlubGluZTohMSxsYW5ndWFnZTpcInJ1XCIsc3RhcnREYXRlOm5ldyBEYXRlLGZpcnN0RGF5OlwiXCIsd2Vla2VuZHM6WzYsMF0sZGF0ZUZvcm1hdDpcIlwiLGFsdEZpZWxkOlwiXCIsYWx0RmllbGREYXRlRm9ybWF0OlwiQFwiLHRvZ2dsZVNlbGVjdGVkOiEwLGtleWJvYXJkTmF2OiEwLHBvc2l0aW9uOlwiYm90dG9tIGxlZnRcIixvZmZzZXQ6MTIsdmlldzpcImRheXNcIixtaW5WaWV3OlwiZGF5c1wiLHNob3dPdGhlck1vbnRoczohMCxzZWxlY3RPdGhlck1vbnRoczohMCxtb3ZlVG9PdGhlck1vbnRoc09uU2VsZWN0OiEwLHNob3dPdGhlclllYXJzOiEwLHNlbGVjdE90aGVyWWVhcnM6ITAsbW92ZVRvT3RoZXJZZWFyc09uU2VsZWN0OiEwLG1pbkRhdGU6XCJcIixtYXhEYXRlOlwiXCIsZGlzYWJsZU5hdldoZW5PdXRPZlJhbmdlOiEwLG11bHRpcGxlRGF0ZXM6ITEsbXVsdGlwbGVEYXRlc1NlcGFyYXRvcjpcIixcIixyYW5nZTohMSx0b2RheUJ1dHRvbjohMSxjbGVhckJ1dHRvbjohMSxzaG93RXZlbnQ6XCJmb2N1c1wiLGF1dG9DbG9zZTohMSxtb250aHNGaWVsZDpcIm1vbnRoc1Nob3J0XCIscHJldkh0bWw6Jzxzdmc+PHBhdGggZD1cIk0gMTcsMTIgbCAtNSw1IGwgNSw1XCI+PC9wYXRoPjwvc3ZnPicsbmV4dEh0bWw6Jzxzdmc+PHBhdGggZD1cIk0gMTQsMTIgbCA1LDUgbCAtNSw1XCI+PC9wYXRoPjwvc3ZnPicsbmF2VGl0bGVzOntkYXlzOlwiTU0sIDxpPnl5eXk8L2k+XCIsbW9udGhzOlwieXl5eVwiLHllYXJzOlwieXl5eTEgLSB5eXl5MlwifSx0aW1lcGlja2VyOiExLG9ubHlUaW1lcGlja2VyOiExLGRhdGVUaW1lU2VwYXJhdG9yOlwiIFwiLHRpbWVGb3JtYXQ6XCJcIixtaW5Ib3VyczowLG1heEhvdXJzOjI0LG1pbk1pbnV0ZXM6MCxtYXhNaW51dGVzOjU5LGhvdXJzU3RlcDoxLG1pbnV0ZXNTdGVwOjEsb25TZWxlY3Q6XCJcIixvblNob3c6XCJcIixvbkhpZGU6XCJcIixvbkNoYW5nZU1vbnRoOlwiXCIsb25DaGFuZ2VZZWFyOlwiXCIsb25DaGFuZ2VEZWNhZGU6XCJcIixvbkNoYW5nZVZpZXc6XCJcIixvblJlbmRlckNlbGw6XCJcIn0sdT17Y3RybFJpZ2h0OlsxNywzOV0sY3RybFVwOlsxNywzOF0sY3RybExlZnQ6WzE3LDM3XSxjdHJsRG93bjpbMTcsNDBdLHNoaWZ0UmlnaHQ6WzE2LDM5XSxzaGlmdFVwOlsxNiwzOF0sc2hpZnRMZWZ0OlsxNiwzN10sc2hpZnREb3duOlsxNiw0MF0sYWx0VXA6WzE4LDM4XSxhbHRSaWdodDpbMTgsMzldLGFsdExlZnQ6WzE4LDM3XSxhbHREb3duOlsxOCw0MF0sY3RybFNoaWZ0VXA6WzE2LDE3LDM4XX0sbT1mdW5jdGlvbih0LGEpe3RoaXMuZWw9dCx0aGlzLiRlbD1lKHQpLHRoaXMub3B0cz1lLmV4dGVuZCghMCx7fSxsLGEsdGhpcy4kZWwuZGF0YSgpKSxzPT1pJiYocz1lKFwiYm9keVwiKSksdGhpcy5vcHRzLnN0YXJ0RGF0ZXx8KHRoaXMub3B0cy5zdGFydERhdGU9bmV3IERhdGUpLFwiSU5QVVRcIj09dGhpcy5lbC5ub2RlTmFtZSYmKHRoaXMuZWxJc0lucHV0PSEwKSx0aGlzLm9wdHMuYWx0RmllbGQmJih0aGlzLiRhbHRGaWVsZD1cInN0cmluZ1wiPT10eXBlb2YgdGhpcy5vcHRzLmFsdEZpZWxkP2UodGhpcy5vcHRzLmFsdEZpZWxkKTp0aGlzLm9wdHMuYWx0RmllbGQpLHRoaXMuaW5pdGVkPSExLHRoaXMudmlzaWJsZT0hMSx0aGlzLnNpbGVudD0hMSx0aGlzLmN1cnJlbnREYXRlPXRoaXMub3B0cy5zdGFydERhdGUsdGhpcy5jdXJyZW50Vmlldz10aGlzLm9wdHMudmlldyx0aGlzLl9jcmVhdGVTaG9ydEN1dHMoKSx0aGlzLnNlbGVjdGVkRGF0ZXM9W10sdGhpcy52aWV3cz17fSx0aGlzLmtleXM9W10sdGhpcy5taW5SYW5nZT1cIlwiLHRoaXMubWF4UmFuZ2U9XCJcIix0aGlzLl9wcmV2T25TZWxlY3RWYWx1ZT1cIlwiLHRoaXMuaW5pdCgpfTtuPW0sbi5wcm90b3R5cGU9e1ZFUlNJT046aCx2aWV3SW5kZXhlczpbXCJkYXlzXCIsXCJtb250aHNcIixcInllYXJzXCJdLGluaXQ6ZnVuY3Rpb24oKXtjfHx0aGlzLm9wdHMuaW5saW5lfHwhdGhpcy5lbElzSW5wdXR8fHRoaXMuX2J1aWxkRGF0ZXBpY2tlcnNDb250YWluZXIoKSx0aGlzLl9idWlsZEJhc2VIdG1sKCksdGhpcy5fZGVmaW5lTG9jYWxlKHRoaXMub3B0cy5sYW5ndWFnZSksdGhpcy5fc3luY1dpdGhNaW5NYXhEYXRlcygpLHRoaXMuZWxJc0lucHV0JiYodGhpcy5vcHRzLmlubGluZXx8KHRoaXMuX3NldFBvc2l0aW9uQ2xhc3Nlcyh0aGlzLm9wdHMucG9zaXRpb24pLHRoaXMuX2JpbmRFdmVudHMoKSksdGhpcy5vcHRzLmtleWJvYXJkTmF2JiYhdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyJiZ0aGlzLl9iaW5kS2V5Ym9hcmRFdmVudHMoKSx0aGlzLiRkYXRlcGlja2VyLm9uKFwibW91c2Vkb3duXCIsdGhpcy5fb25Nb3VzZURvd25EYXRlcGlja2VyLmJpbmQodGhpcykpLHRoaXMuJGRhdGVwaWNrZXIub24oXCJtb3VzZXVwXCIsdGhpcy5fb25Nb3VzZVVwRGF0ZXBpY2tlci5iaW5kKHRoaXMpKSksdGhpcy5vcHRzLmNsYXNzZXMmJnRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3ModGhpcy5vcHRzLmNsYXNzZXMpLHRoaXMub3B0cy50aW1lcGlja2VyJiYodGhpcy50aW1lcGlja2VyPW5ldyBlLmZuLmRhdGVwaWNrZXIuVGltZXBpY2tlcih0aGlzLHRoaXMub3B0cyksdGhpcy5fYmluZFRpbWVwaWNrZXJFdmVudHMoKSksdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyJiZ0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKFwiLW9ubHktdGltZXBpY2tlci1cIiksdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XT1uZXcgZS5mbi5kYXRlcGlja2VyLkJvZHkodGhpcyx0aGlzLmN1cnJlbnRWaWV3LHRoaXMub3B0cyksdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5zaG93KCksdGhpcy5uYXY9bmV3IGUuZm4uZGF0ZXBpY2tlci5OYXZpZ2F0aW9uKHRoaXMsdGhpcy5vcHRzKSx0aGlzLnZpZXc9dGhpcy5jdXJyZW50Vmlldyx0aGlzLiRlbC5vbihcImNsaWNrQ2VsbC5hZHBcIix0aGlzLl9vbkNsaWNrQ2VsbC5iaW5kKHRoaXMpKSx0aGlzLiRkYXRlcGlja2VyLm9uKFwibW91c2VlbnRlclwiLFwiLmRhdGVwaWNrZXItLWNlbGxcIix0aGlzLl9vbk1vdXNlRW50ZXJDZWxsLmJpbmQodGhpcykpLHRoaXMuJGRhdGVwaWNrZXIub24oXCJtb3VzZWxlYXZlXCIsXCIuZGF0ZXBpY2tlci0tY2VsbFwiLHRoaXMuX29uTW91c2VMZWF2ZUNlbGwuYmluZCh0aGlzKSksdGhpcy5pbml0ZWQ9ITB9LF9jcmVhdGVTaG9ydEN1dHM6ZnVuY3Rpb24oKXt0aGlzLm1pbkRhdGU9dGhpcy5vcHRzLm1pbkRhdGU/dGhpcy5vcHRzLm1pbkRhdGU6bmV3IERhdGUoLTg2Mzk5OTk5MTM2ZTUpLHRoaXMubWF4RGF0ZT10aGlzLm9wdHMubWF4RGF0ZT90aGlzLm9wdHMubWF4RGF0ZTpuZXcgRGF0ZSg4NjM5OTk5OTEzNmU1KX0sX2JpbmRFdmVudHM6ZnVuY3Rpb24oKXt0aGlzLiRlbC5vbih0aGlzLm9wdHMuc2hvd0V2ZW50K1wiLmFkcFwiLHRoaXMuX29uU2hvd0V2ZW50LmJpbmQodGhpcykpLHRoaXMuJGVsLm9uKFwibW91c2V1cC5hZHBcIix0aGlzLl9vbk1vdXNlVXBFbC5iaW5kKHRoaXMpKSx0aGlzLiRlbC5vbihcImJsdXIuYWRwXCIsdGhpcy5fb25CbHVyLmJpbmQodGhpcykpLHRoaXMuJGVsLm9uKFwia2V5dXAuYWRwXCIsdGhpcy5fb25LZXlVcEdlbmVyYWwuYmluZCh0aGlzKSksZSh0KS5vbihcInJlc2l6ZS5hZHBcIix0aGlzLl9vblJlc2l6ZS5iaW5kKHRoaXMpKSxlKFwiYm9keVwiKS5vbihcIm1vdXNldXAuYWRwXCIsdGhpcy5fb25Nb3VzZVVwQm9keS5iaW5kKHRoaXMpKX0sX2JpbmRLZXlib2FyZEV2ZW50czpmdW5jdGlvbigpe3RoaXMuJGVsLm9uKFwia2V5ZG93bi5hZHBcIix0aGlzLl9vbktleURvd24uYmluZCh0aGlzKSksdGhpcy4kZWwub24oXCJrZXl1cC5hZHBcIix0aGlzLl9vbktleVVwLmJpbmQodGhpcykpLHRoaXMuJGVsLm9uKFwiaG90S2V5LmFkcFwiLHRoaXMuX29uSG90S2V5LmJpbmQodGhpcykpfSxfYmluZFRpbWVwaWNrZXJFdmVudHM6ZnVuY3Rpb24oKXt0aGlzLiRlbC5vbihcInRpbWVDaGFuZ2UuYWRwXCIsdGhpcy5fb25UaW1lQ2hhbmdlLmJpbmQodGhpcykpfSxpc1dlZWtlbmQ6ZnVuY3Rpb24odCl7cmV0dXJuLTEhPT10aGlzLm9wdHMud2Vla2VuZHMuaW5kZXhPZih0KX0sX2RlZmluZUxvY2FsZTpmdW5jdGlvbih0KXtcInN0cmluZ1wiPT10eXBlb2YgdD8odGhpcy5sb2M9ZS5mbi5kYXRlcGlja2VyLmxhbmd1YWdlW3RdLHRoaXMubG9jfHwoY29uc29sZS53YXJuKFwiQ2FuJ3QgZmluZCBsYW5ndWFnZSBcXFwiXCIrdCsnXCIgaW4gRGF0ZXBpY2tlci5sYW5ndWFnZSwgd2lsbCB1c2UgXCJydVwiIGluc3RlYWQnKSx0aGlzLmxvYz1lLmV4dGVuZCghMCx7fSxlLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UucnUpKSx0aGlzLmxvYz1lLmV4dGVuZCghMCx7fSxlLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UucnUsZS5mbi5kYXRlcGlja2VyLmxhbmd1YWdlW3RdKSk6dGhpcy5sb2M9ZS5leHRlbmQoITAse30sZS5mbi5kYXRlcGlja2VyLmxhbmd1YWdlLnJ1LHQpLHRoaXMub3B0cy5kYXRlRm9ybWF0JiYodGhpcy5sb2MuZGF0ZUZvcm1hdD10aGlzLm9wdHMuZGF0ZUZvcm1hdCksdGhpcy5vcHRzLnRpbWVGb3JtYXQmJih0aGlzLmxvYy50aW1lRm9ybWF0PXRoaXMub3B0cy50aW1lRm9ybWF0KSxcIlwiIT09dGhpcy5vcHRzLmZpcnN0RGF5JiYodGhpcy5sb2MuZmlyc3REYXk9dGhpcy5vcHRzLmZpcnN0RGF5KSx0aGlzLm9wdHMudGltZXBpY2tlciYmKHRoaXMubG9jLmRhdGVGb3JtYXQ9W3RoaXMubG9jLmRhdGVGb3JtYXQsdGhpcy5sb2MudGltZUZvcm1hdF0uam9pbih0aGlzLm9wdHMuZGF0ZVRpbWVTZXBhcmF0b3IpKSx0aGlzLm9wdHMub25seVRpbWVwaWNrZXImJih0aGlzLmxvYy5kYXRlRm9ybWF0PXRoaXMubG9jLnRpbWVGb3JtYXQpO3ZhciBpPXRoaXMuX2dldFdvcmRCb3VuZGFyeVJlZ0V4cDsodGhpcy5sb2MudGltZUZvcm1hdC5tYXRjaChpKFwiYWFcIikpfHx0aGlzLmxvYy50aW1lRm9ybWF0Lm1hdGNoKGkoXCJBQVwiKSkpJiYodGhpcy5hbXBtPSEwKX0sX2J1aWxkRGF0ZXBpY2tlcnNDb250YWluZXI6ZnVuY3Rpb24oKXtjPSEwLHMuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlcnMtY29udGFpbmVyXCIgaWQ9XCJkYXRlcGlja2Vycy1jb250YWluZXJcIj48L2Rpdj4nKSxhPWUoXCIjZGF0ZXBpY2tlcnMtY29udGFpbmVyXCIpfSxfYnVpbGRCYXNlSHRtbDpmdW5jdGlvbigpe3ZhciB0LGk9ZSgnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItaW5saW5lXCI+Jyk7dD1cIklOUFVUXCI9PXRoaXMuZWwubm9kZU5hbWU/dGhpcy5vcHRzLmlubGluZT9pLmluc2VydEFmdGVyKHRoaXMuJGVsKTphOmkuYXBwZW5kVG8odGhpcy4kZWwpLHRoaXMuJGRhdGVwaWNrZXI9ZShkKS5hcHBlbmRUbyh0KSx0aGlzLiRjb250ZW50PWUoXCIuZGF0ZXBpY2tlci0tY29udGVudFwiLHRoaXMuJGRhdGVwaWNrZXIpLHRoaXMuJG5hdj1lKFwiLmRhdGVwaWNrZXItLW5hdlwiLHRoaXMuJGRhdGVwaWNrZXIpfSxfdHJpZ2dlck9uQ2hhbmdlOmZ1bmN0aW9uKCl7aWYoIXRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGgpe2lmKFwiXCI9PT10aGlzLl9wcmV2T25TZWxlY3RWYWx1ZSlyZXR1cm47cmV0dXJuIHRoaXMuX3ByZXZPblNlbGVjdFZhbHVlPVwiXCIsdGhpcy5vcHRzLm9uU2VsZWN0KFwiXCIsXCJcIix0aGlzKX12YXIgdCxlPXRoaXMuc2VsZWN0ZWREYXRlcyxpPW4uZ2V0UGFyc2VkRGF0ZShlWzBdKSxzPXRoaXMsYT1uZXcgRGF0ZShpLnllYXIsaS5tb250aCxpLmRhdGUsaS5ob3VycyxpLm1pbnV0ZXMpO3Q9ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHMuZm9ybWF0RGF0ZShzLmxvYy5kYXRlRm9ybWF0LHQpfSkuam9pbih0aGlzLm9wdHMubXVsdGlwbGVEYXRlc1NlcGFyYXRvciksKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzfHx0aGlzLm9wdHMucmFuZ2UpJiYoYT1lLm1hcChmdW5jdGlvbih0KXt2YXIgZT1uLmdldFBhcnNlZERhdGUodCk7cmV0dXJuIG5ldyBEYXRlKGUueWVhcixlLm1vbnRoLGUuZGF0ZSxlLmhvdXJzLGUubWludXRlcyl9KSksdGhpcy5fcHJldk9uU2VsZWN0VmFsdWU9dCx0aGlzLm9wdHMub25TZWxlY3QodCxhLHRoaXMpfSxuZXh0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wYXJzZWREYXRlLGU9dGhpcy5vcHRzO3N3aXRjaCh0aGlzLnZpZXcpe2Nhc2VcImRheXNcIjp0aGlzLmRhdGU9bmV3IERhdGUodC55ZWFyLHQubW9udGgrMSwxKSxlLm9uQ2hhbmdlTW9udGgmJmUub25DaGFuZ2VNb250aCh0aGlzLnBhcnNlZERhdGUubW9udGgsdGhpcy5wYXJzZWREYXRlLnllYXIpO2JyZWFrO2Nhc2VcIm1vbnRoc1wiOnRoaXMuZGF0ZT1uZXcgRGF0ZSh0LnllYXIrMSx0Lm1vbnRoLDEpLGUub25DaGFuZ2VZZWFyJiZlLm9uQ2hhbmdlWWVhcih0aGlzLnBhcnNlZERhdGUueWVhcik7YnJlYWs7Y2FzZVwieWVhcnNcIjp0aGlzLmRhdGU9bmV3IERhdGUodC55ZWFyKzEwLDAsMSksZS5vbkNoYW5nZURlY2FkZSYmZS5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSl9fSxwcmV2OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wYXJzZWREYXRlLGU9dGhpcy5vcHRzO3N3aXRjaCh0aGlzLnZpZXcpe2Nhc2VcImRheXNcIjp0aGlzLmRhdGU9bmV3IERhdGUodC55ZWFyLHQubW9udGgtMSwxKSxlLm9uQ2hhbmdlTW9udGgmJmUub25DaGFuZ2VNb250aCh0aGlzLnBhcnNlZERhdGUubW9udGgsdGhpcy5wYXJzZWREYXRlLnllYXIpO2JyZWFrO2Nhc2VcIm1vbnRoc1wiOnRoaXMuZGF0ZT1uZXcgRGF0ZSh0LnllYXItMSx0Lm1vbnRoLDEpLGUub25DaGFuZ2VZZWFyJiZlLm9uQ2hhbmdlWWVhcih0aGlzLnBhcnNlZERhdGUueWVhcik7YnJlYWs7Y2FzZVwieWVhcnNcIjp0aGlzLmRhdGU9bmV3IERhdGUodC55ZWFyLTEwLDAsMSksZS5vbkNoYW5nZURlY2FkZSYmZS5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSl9fSxmb3JtYXREYXRlOmZ1bmN0aW9uKHQsZSl7ZT1lfHx0aGlzLmRhdGU7dmFyIGkscz10LGE9dGhpcy5fZ2V0V29yZEJvdW5kYXJ5UmVnRXhwLGg9dGhpcy5sb2Msbz1uLmdldExlYWRpbmdaZXJvTnVtLHI9bi5nZXREZWNhZGUoZSksYz1uLmdldFBhcnNlZERhdGUoZSksZD1jLmZ1bGxIb3VycyxsPWMuaG91cnMsdT10Lm1hdGNoKGEoXCJhYVwiKSl8fHQubWF0Y2goYShcIkFBXCIpKSxtPVwiYW1cIixwPXRoaXMuX3JlcGxhY2VyO3N3aXRjaCh0aGlzLm9wdHMudGltZXBpY2tlciYmdGhpcy50aW1lcGlja2VyJiZ1JiYoaT10aGlzLnRpbWVwaWNrZXIuX2dldFZhbGlkSG91cnNGcm9tRGF0ZShlLHUpLGQ9byhpLmhvdXJzKSxsPWkuaG91cnMsbT1pLmRheVBlcmlvZCksITApe2Nhc2UvQC8udGVzdChzKTpzPXMucmVwbGFjZSgvQC8sZS5nZXRUaW1lKCkpO2Nhc2UvYWEvLnRlc3Qocyk6cz1wKHMsYShcImFhXCIpLG0pO2Nhc2UvQUEvLnRlc3Qocyk6cz1wKHMsYShcIkFBXCIpLG0udG9VcHBlckNhc2UoKSk7Y2FzZS9kZC8udGVzdChzKTpzPXAocyxhKFwiZGRcIiksYy5mdWxsRGF0ZSk7Y2FzZS9kLy50ZXN0KHMpOnM9cChzLGEoXCJkXCIpLGMuZGF0ZSk7Y2FzZS9ERC8udGVzdChzKTpzPXAocyxhKFwiRERcIiksaC5kYXlzW2MuZGF5XSk7Y2FzZS9ELy50ZXN0KHMpOnM9cChzLGEoXCJEXCIpLGguZGF5c1Nob3J0W2MuZGF5XSk7Y2FzZS9tbS8udGVzdChzKTpzPXAocyxhKFwibW1cIiksYy5mdWxsTW9udGgpO2Nhc2UvbS8udGVzdChzKTpzPXAocyxhKFwibVwiKSxjLm1vbnRoKzEpO2Nhc2UvTU0vLnRlc3Qocyk6cz1wKHMsYShcIk1NXCIpLHRoaXMubG9jLm1vbnRoc1tjLm1vbnRoXSk7Y2FzZS9NLy50ZXN0KHMpOnM9cChzLGEoXCJNXCIpLGgubW9udGhzU2hvcnRbYy5tb250aF0pO2Nhc2UvaWkvLnRlc3Qocyk6cz1wKHMsYShcImlpXCIpLGMuZnVsbE1pbnV0ZXMpO2Nhc2UvaS8udGVzdChzKTpzPXAocyxhKFwiaVwiKSxjLm1pbnV0ZXMpO2Nhc2UvaGgvLnRlc3Qocyk6cz1wKHMsYShcImhoXCIpLGQpO2Nhc2UvaC8udGVzdChzKTpzPXAocyxhKFwiaFwiKSxsKTtjYXNlL3l5eXkvLnRlc3Qocyk6cz1wKHMsYShcInl5eXlcIiksYy55ZWFyKTtjYXNlL3l5eXkxLy50ZXN0KHMpOnM9cChzLGEoXCJ5eXl5MVwiKSxyWzBdKTtjYXNlL3l5eXkyLy50ZXN0KHMpOnM9cChzLGEoXCJ5eXl5MlwiKSxyWzFdKTtjYXNlL3l5Ly50ZXN0KHMpOnM9cChzLGEoXCJ5eVwiKSxjLnllYXIudG9TdHJpbmcoKS5zbGljZSgtMikpfXJldHVybiBzfSxfcmVwbGFjZXI6ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0LnJlcGxhY2UoZSxmdW5jdGlvbih0LGUscyxhKXtyZXR1cm4gZStpK2F9KX0sX2dldFdvcmRCb3VuZGFyeVJlZ0V4cDpmdW5jdGlvbih0KXt2YXIgZT1cIlxcXFxzfFxcXFwufC18L3xcXFxcXFxcXHwsfFxcXFwkfFxcXFwhfFxcXFw/fDp8O1wiO3JldHVybiBuZXcgUmVnRXhwKFwiKF58PnxcIitlK1wiKShcIit0K1wiKSgkfDx8XCIrZStcIilcIixcImdcIil9LHNlbGVjdERhdGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxpPWUub3B0cyxzPWUucGFyc2VkRGF0ZSxhPWUuc2VsZWN0ZWREYXRlcyxoPWEubGVuZ3RoLG89XCJcIjtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiB2b2lkIHQuZm9yRWFjaChmdW5jdGlvbih0KXtlLnNlbGVjdERhdGUodCl9KTtpZih0IGluc3RhbmNlb2YgRGF0ZSl7aWYodGhpcy5sYXN0U2VsZWN0ZWREYXRlPXQsdGhpcy50aW1lcGlja2VyJiZ0aGlzLnRpbWVwaWNrZXIuX3NldFRpbWUodCksZS5fdHJpZ2dlcihcInNlbGVjdERhdGVcIix0KSx0aGlzLnRpbWVwaWNrZXImJih0LnNldEhvdXJzKHRoaXMudGltZXBpY2tlci5ob3VycyksdC5zZXRNaW51dGVzKHRoaXMudGltZXBpY2tlci5taW51dGVzKSksXCJkYXlzXCI9PWUudmlldyYmdC5nZXRNb250aCgpIT1zLm1vbnRoJiZpLm1vdmVUb090aGVyTW9udGhzT25TZWxlY3QmJihvPW5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSx0LmdldE1vbnRoKCksMSkpLFwieWVhcnNcIj09ZS52aWV3JiZ0LmdldEZ1bGxZZWFyKCkhPXMueWVhciYmaS5tb3ZlVG9PdGhlclllYXJzT25TZWxlY3QmJihvPW5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwwLDEpKSxvJiYoZS5zaWxlbnQ9ITAsZS5kYXRlPW8sZS5zaWxlbnQ9ITEsZS5uYXYuX3JlbmRlcigpKSxpLm11bHRpcGxlRGF0ZXMmJiFpLnJhbmdlKXtpZihoPT09aS5tdWx0aXBsZURhdGVzKXJldHVybjtlLl9pc1NlbGVjdGVkKHQpfHxlLnNlbGVjdGVkRGF0ZXMucHVzaCh0KX1lbHNlIGkucmFuZ2U/Mj09aD8oZS5zZWxlY3RlZERhdGVzPVt0XSxlLm1pblJhbmdlPXQsZS5tYXhSYW5nZT1cIlwiKToxPT1oPyhlLnNlbGVjdGVkRGF0ZXMucHVzaCh0KSxlLm1heFJhbmdlP2UubWluUmFuZ2U9dDplLm1heFJhbmdlPXQsbi5iaWdnZXIoZS5tYXhSYW5nZSxlLm1pblJhbmdlKSYmKGUubWF4UmFuZ2U9ZS5taW5SYW5nZSxlLm1pblJhbmdlPXQpLGUuc2VsZWN0ZWREYXRlcz1bZS5taW5SYW5nZSxlLm1heFJhbmdlXSk6KGUuc2VsZWN0ZWREYXRlcz1bdF0sZS5taW5SYW5nZT10KTplLnNlbGVjdGVkRGF0ZXM9W3RdO2UuX3NldElucHV0VmFsdWUoKSxpLm9uU2VsZWN0JiZlLl90cmlnZ2VyT25DaGFuZ2UoKSxpLmF1dG9DbG9zZSYmIXRoaXMudGltZXBpY2tlcklzQWN0aXZlJiYoaS5tdWx0aXBsZURhdGVzfHxpLnJhbmdlP2kucmFuZ2UmJjI9PWUuc2VsZWN0ZWREYXRlcy5sZW5ndGgmJmUuaGlkZSgpOmUuaGlkZSgpKSxlLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLl9yZW5kZXIoKX19LHJlbW92ZURhdGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zZWxlY3RlZERhdGVzLGk9dGhpcztpZih0IGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gZS5zb21lKGZ1bmN0aW9uKHMsYSl7cmV0dXJuIG4uaXNTYW1lKHMsdCk/KGUuc3BsaWNlKGEsMSksaS5zZWxlY3RlZERhdGVzLmxlbmd0aD9pLmxhc3RTZWxlY3RlZERhdGU9aS5zZWxlY3RlZERhdGVzW2kuc2VsZWN0ZWREYXRlcy5sZW5ndGgtMV06KGkubWluUmFuZ2U9XCJcIixpLm1heFJhbmdlPVwiXCIsaS5sYXN0U2VsZWN0ZWREYXRlPVwiXCIpLGkudmlld3NbaS5jdXJyZW50Vmlld10uX3JlbmRlcigpLGkuX3NldElucHV0VmFsdWUoKSxpLm9wdHMub25TZWxlY3QmJmkuX3RyaWdnZXJPbkNoYW5nZSgpLCEwKTp2b2lkIDB9KX0sdG9kYXk6ZnVuY3Rpb24oKXt0aGlzLnNpbGVudD0hMCx0aGlzLnZpZXc9dGhpcy5vcHRzLm1pblZpZXcsdGhpcy5zaWxlbnQ9ITEsdGhpcy5kYXRlPW5ldyBEYXRlLHRoaXMub3B0cy50b2RheUJ1dHRvbiBpbnN0YW5jZW9mIERhdGUmJnRoaXMuc2VsZWN0RGF0ZSh0aGlzLm9wdHMudG9kYXlCdXR0b24pfSxjbGVhcjpmdW5jdGlvbigpe3RoaXMuc2VsZWN0ZWREYXRlcz1bXSx0aGlzLm1pblJhbmdlPVwiXCIsdGhpcy5tYXhSYW5nZT1cIlwiLHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uX3JlbmRlcigpLHRoaXMuX3NldElucHV0VmFsdWUoKSx0aGlzLm9wdHMub25TZWxlY3QmJnRoaXMuX3RyaWdnZXJPbkNoYW5nZSgpfSx1cGRhdGU6ZnVuY3Rpb24odCxpKXt2YXIgcz1hcmd1bWVudHMubGVuZ3RoLGE9dGhpcy5sYXN0U2VsZWN0ZWREYXRlO3JldHVybiAyPT1zP3RoaXMub3B0c1t0XT1pOjE9PXMmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiYodGhpcy5vcHRzPWUuZXh0ZW5kKCEwLHRoaXMub3B0cyx0KSksdGhpcy5fY3JlYXRlU2hvcnRDdXRzKCksdGhpcy5fc3luY1dpdGhNaW5NYXhEYXRlcygpLHRoaXMuX2RlZmluZUxvY2FsZSh0aGlzLm9wdHMubGFuZ3VhZ2UpLHRoaXMubmF2Ll9hZGRCdXR0b25zSWZOZWVkKCksdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyfHx0aGlzLm5hdi5fcmVuZGVyKCksdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fcmVuZGVyKCksdGhpcy5lbElzSW5wdXQmJiF0aGlzLm9wdHMuaW5saW5lJiYodGhpcy5fc2V0UG9zaXRpb25DbGFzc2VzKHRoaXMub3B0cy5wb3NpdGlvbiksdGhpcy52aXNpYmxlJiZ0aGlzLnNldFBvc2l0aW9uKHRoaXMub3B0cy5wb3NpdGlvbikpLHRoaXMub3B0cy5jbGFzc2VzJiZ0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKHRoaXMub3B0cy5jbGFzc2VzKSx0aGlzLm9wdHMub25seVRpbWVwaWNrZXImJnRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3MoXCItb25seS10aW1lcGlja2VyLVwiKSx0aGlzLm9wdHMudGltZXBpY2tlciYmKGEmJnRoaXMudGltZXBpY2tlci5faGFuZGxlRGF0ZShhKSx0aGlzLnRpbWVwaWNrZXIuX3VwZGF0ZVJhbmdlcygpLHRoaXMudGltZXBpY2tlci5fdXBkYXRlQ3VycmVudFRpbWUoKSxhJiYoYS5zZXRIb3Vycyh0aGlzLnRpbWVwaWNrZXIuaG91cnMpLGEuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcykpKSx0aGlzLl9zZXRJbnB1dFZhbHVlKCksdGhpc30sX3N5bmNXaXRoTWluTWF4RGF0ZXM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmRhdGUuZ2V0VGltZSgpO3RoaXMuc2lsZW50PSEwLHRoaXMubWluVGltZT50JiYodGhpcy5kYXRlPXRoaXMubWluRGF0ZSksdGhpcy5tYXhUaW1lPHQmJih0aGlzLmRhdGU9dGhpcy5tYXhEYXRlKSx0aGlzLnNpbGVudD0hMX0sX2lzU2VsZWN0ZWQ6ZnVuY3Rpb24odCxlKXt2YXIgaT0hMTtyZXR1cm4gdGhpcy5zZWxlY3RlZERhdGVzLnNvbWUoZnVuY3Rpb24ocyl7cmV0dXJuIG4uaXNTYW1lKHMsdCxlKT8oaT1zLCEwKTp2b2lkIDB9KSxpfSxfc2V0SW5wdXRWYWx1ZTpmdW5jdGlvbigpe3ZhciB0LGU9dGhpcyxpPWUub3B0cyxzPWUubG9jLmRhdGVGb3JtYXQsYT1pLmFsdEZpZWxkRGF0ZUZvcm1hdCxuPWUuc2VsZWN0ZWREYXRlcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGUuZm9ybWF0RGF0ZShzLHQpfSk7aS5hbHRGaWVsZCYmZS4kYWx0RmllbGQubGVuZ3RoJiYodD10aGlzLnNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBlLmZvcm1hdERhdGUoYSx0KX0pLHQ9dC5qb2luKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzU2VwYXJhdG9yKSx0aGlzLiRhbHRGaWVsZC52YWwodCkpLG49bi5qb2luKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzU2VwYXJhdG9yKSx0aGlzLiRlbC52YWwobil9LF9pc0luUmFuZ2U6ZnVuY3Rpb24odCxlKXt2YXIgaT10LmdldFRpbWUoKSxzPW4uZ2V0UGFyc2VkRGF0ZSh0KSxhPW4uZ2V0UGFyc2VkRGF0ZSh0aGlzLm1pbkRhdGUpLGg9bi5nZXRQYXJzZWREYXRlKHRoaXMubWF4RGF0ZSksbz1uZXcgRGF0ZShzLnllYXIscy5tb250aCxhLmRhdGUpLmdldFRpbWUoKSxyPW5ldyBEYXRlKHMueWVhcixzLm1vbnRoLGguZGF0ZSkuZ2V0VGltZSgpLGM9e2RheTppPj10aGlzLm1pblRpbWUmJmk8PXRoaXMubWF4VGltZSxtb250aDpvPj10aGlzLm1pblRpbWUmJnI8PXRoaXMubWF4VGltZSx5ZWFyOnMueWVhcj49YS55ZWFyJiZzLnllYXI8PWgueWVhcn07cmV0dXJuIGU/Y1tlXTpjLmRheX0sX2dldERpbWVuc2lvbnM6ZnVuY3Rpb24odCl7dmFyIGU9dC5vZmZzZXQoKTtyZXR1cm57d2lkdGg6dC5vdXRlcldpZHRoKCksaGVpZ2h0OnQub3V0ZXJIZWlnaHQoKSxsZWZ0OmUubGVmdCx0b3A6ZS50b3B9fSxfZ2V0RGF0ZUZyb21DZWxsOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucGFyc2VkRGF0ZSxzPXQuZGF0YShcInllYXJcIil8fGUueWVhcixhPXQuZGF0YShcIm1vbnRoXCIpPT1pP2UubW9udGg6dC5kYXRhKFwibW9udGhcIiksbj10LmRhdGEoXCJkYXRlXCIpfHwxO3JldHVybiBuZXcgRGF0ZShzLGEsbil9LF9zZXRQb3NpdGlvbkNsYXNzZXM6ZnVuY3Rpb24odCl7dD10LnNwbGl0KFwiIFwiKTt2YXIgZT10WzBdLGk9dFsxXSxzPVwiZGF0ZXBpY2tlciAtXCIrZStcIi1cIitpK1wiLSAtZnJvbS1cIitlK1wiLVwiO3RoaXMudmlzaWJsZSYmKHMrPVwiIGFjdGl2ZVwiKSx0aGlzLiRkYXRlcGlja2VyLnJlbW92ZUF0dHIoXCJjbGFzc1wiKS5hZGRDbGFzcyhzKX0sc2V0UG9zaXRpb246ZnVuY3Rpb24odCl7dD10fHx0aGlzLm9wdHMucG9zaXRpb247dmFyIGUsaSxzPXRoaXMuX2dldERpbWVuc2lvbnModGhpcy4kZWwpLGE9dGhpcy5fZ2V0RGltZW5zaW9ucyh0aGlzLiRkYXRlcGlja2VyKSxuPXQuc3BsaXQoXCIgXCIpLGg9dGhpcy5vcHRzLm9mZnNldCxvPW5bMF0scj1uWzFdO3N3aXRjaChvKXtjYXNlXCJ0b3BcIjplPXMudG9wLWEuaGVpZ2h0LWg7YnJlYWs7Y2FzZVwicmlnaHRcIjppPXMubGVmdCtzLndpZHRoK2g7YnJlYWs7Y2FzZVwiYm90dG9tXCI6ZT1zLnRvcCtzLmhlaWdodCtoO2JyZWFrO2Nhc2VcImxlZnRcIjppPXMubGVmdC1hLndpZHRoLWh9c3dpdGNoKHIpe2Nhc2VcInRvcFwiOmU9cy50b3A7YnJlYWs7Y2FzZVwicmlnaHRcIjppPXMubGVmdCtzLndpZHRoLWEud2lkdGg7YnJlYWs7Y2FzZVwiYm90dG9tXCI6ZT1zLnRvcCtzLmhlaWdodC1hLmhlaWdodDticmVhaztjYXNlXCJsZWZ0XCI6aT1zLmxlZnQ7YnJlYWs7Y2FzZVwiY2VudGVyXCI6L2xlZnR8cmlnaHQvLnRlc3Qobyk/ZT1zLnRvcCtzLmhlaWdodC8yLWEuaGVpZ2h0LzI6aT1zLmxlZnQrcy53aWR0aC8yLWEud2lkdGgvMn10aGlzLiRkYXRlcGlja2VyLmNzcyh7bGVmdDppLHRvcDplfSl9LHNob3c6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdHMub25TaG93O3RoaXMuc2V0UG9zaXRpb24odGhpcy5vcHRzLnBvc2l0aW9uKSx0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKFwiYWN0aXZlXCIpLHRoaXMudmlzaWJsZT0hMCx0JiZ0aGlzLl9iaW5kVmlzaW9uRXZlbnRzKHQpfSxoaWRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRzLm9uSGlkZTt0aGlzLiRkYXRlcGlja2VyLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLmNzcyh7bGVmdDpcIi0xMDAwMDBweFwifSksdGhpcy5mb2N1c2VkPVwiXCIsdGhpcy5rZXlzPVtdLHRoaXMuaW5Gb2N1cz0hMSx0aGlzLnZpc2libGU9ITEsdGhpcy4kZWwuYmx1cigpLHQmJnRoaXMuX2JpbmRWaXNpb25FdmVudHModCl9LGRvd246ZnVuY3Rpb24odCl7dGhpcy5fY2hhbmdlVmlldyh0LFwiZG93blwiKX0sdXA6ZnVuY3Rpb24odCl7dGhpcy5fY2hhbmdlVmlldyh0LFwidXBcIil9LF9iaW5kVmlzaW9uRXZlbnRzOmZ1bmN0aW9uKHQpe3RoaXMuJGRhdGVwaWNrZXIub2ZmKFwidHJhbnNpdGlvbmVuZC5kcFwiKSx0KHRoaXMsITEpLHRoaXMuJGRhdGVwaWNrZXIub25lKFwidHJhbnNpdGlvbmVuZC5kcFwiLHQuYmluZCh0aGlzLHRoaXMsITApKX0sX2NoYW5nZVZpZXc6ZnVuY3Rpb24odCxlKXt0PXR8fHRoaXMuZm9jdXNlZHx8dGhpcy5kYXRlO3ZhciBpPVwidXBcIj09ZT90aGlzLnZpZXdJbmRleCsxOnRoaXMudmlld0luZGV4LTE7aT4yJiYoaT0yKSwwPmkmJihpPTApLHRoaXMuc2lsZW50PSEwLHRoaXMuZGF0ZT1uZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksdC5nZXRNb250aCgpLDEpLHRoaXMuc2lsZW50PSExLHRoaXMudmlldz10aGlzLnZpZXdJbmRleGVzW2ldfSxfaGFuZGxlSG90S2V5OmZ1bmN0aW9uKHQpe3ZhciBlLGkscyxhPW4uZ2V0UGFyc2VkRGF0ZSh0aGlzLl9nZXRGb2N1c2VkRGF0ZSgpKSxoPXRoaXMub3B0cyxvPSExLHI9ITEsYz0hMSxkPWEueWVhcixsPWEubW9udGgsdT1hLmRhdGU7c3dpdGNoKHQpe2Nhc2VcImN0cmxSaWdodFwiOmNhc2VcImN0cmxVcFwiOmwrPTEsbz0hMDticmVhaztjYXNlXCJjdHJsTGVmdFwiOmNhc2VcImN0cmxEb3duXCI6bC09MSxvPSEwO2JyZWFrO2Nhc2VcInNoaWZ0UmlnaHRcIjpjYXNlXCJzaGlmdFVwXCI6cj0hMCxkKz0xO2JyZWFrO2Nhc2VcInNoaWZ0TGVmdFwiOmNhc2VcInNoaWZ0RG93blwiOnI9ITAsZC09MTticmVhaztjYXNlXCJhbHRSaWdodFwiOmNhc2VcImFsdFVwXCI6Yz0hMCxkKz0xMDticmVhaztjYXNlXCJhbHRMZWZ0XCI6Y2FzZVwiYWx0RG93blwiOmM9ITAsZC09MTA7YnJlYWs7Y2FzZVwiY3RybFNoaWZ0VXBcIjp0aGlzLnVwKCl9cz1uLmdldERheXNDb3VudChuZXcgRGF0ZShkLGwpKSxpPW5ldyBEYXRlKGQsbCx1KSx1PnMmJih1PXMpLGkuZ2V0VGltZSgpPHRoaXMubWluVGltZT9pPXRoaXMubWluRGF0ZTppLmdldFRpbWUoKT50aGlzLm1heFRpbWUmJihpPXRoaXMubWF4RGF0ZSksdGhpcy5mb2N1c2VkPWksZT1uLmdldFBhcnNlZERhdGUoaSksbyYmaC5vbkNoYW5nZU1vbnRoJiZoLm9uQ2hhbmdlTW9udGgoZS5tb250aCxlLnllYXIpLHImJmgub25DaGFuZ2VZZWFyJiZoLm9uQ2hhbmdlWWVhcihlLnllYXIpLGMmJmgub25DaGFuZ2VEZWNhZGUmJmgub25DaGFuZ2VEZWNhZGUodGhpcy5jdXJEZWNhZGUpfSxfcmVnaXN0ZXJLZXk6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5rZXlzLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PXR9KTtlfHx0aGlzLmtleXMucHVzaCh0KX0sX3VuUmVnaXN0ZXJLZXk6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5rZXlzLmluZGV4T2YodCk7dGhpcy5rZXlzLnNwbGljZShlLDEpfSxfaXNIb3RLZXlQcmVzc2VkOmZ1bmN0aW9uKCl7dmFyIHQsZT0hMSxpPXRoaXMscz10aGlzLmtleXMuc29ydCgpO2Zvcih2YXIgYSBpbiB1KXQ9dVthXSxzLmxlbmd0aD09dC5sZW5ndGgmJnQuZXZlcnkoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09c1tlXX0pJiYoaS5fdHJpZ2dlcihcImhvdEtleVwiLGEpLGU9ITApO3JldHVybiBlfSxfdHJpZ2dlcjpmdW5jdGlvbih0LGUpe3RoaXMuJGVsLnRyaWdnZXIodCxlKX0sX2ZvY3VzTmV4dENlbGw6ZnVuY3Rpb24odCxlKXtlPWV8fHRoaXMuY2VsbFR5cGU7dmFyIGk9bi5nZXRQYXJzZWREYXRlKHRoaXMuX2dldEZvY3VzZWREYXRlKCkpLHM9aS55ZWFyLGE9aS5tb250aCxoPWkuZGF0ZTtpZighdGhpcy5faXNIb3RLZXlQcmVzc2VkKCkpe3N3aXRjaCh0KXtjYXNlIDM3OlwiZGF5XCI9PWU/aC09MTpcIlwiLFwibW9udGhcIj09ZT9hLT0xOlwiXCIsXCJ5ZWFyXCI9PWU/cy09MTpcIlwiO2JyZWFrO2Nhc2UgMzg6XCJkYXlcIj09ZT9oLT03OlwiXCIsXCJtb250aFwiPT1lP2EtPTM6XCJcIixcInllYXJcIj09ZT9zLT00OlwiXCI7YnJlYWs7Y2FzZSAzOTpcImRheVwiPT1lP2grPTE6XCJcIixcIm1vbnRoXCI9PWU/YSs9MTpcIlwiLFwieWVhclwiPT1lP3MrPTE6XCJcIjticmVhaztjYXNlIDQwOlwiZGF5XCI9PWU/aCs9NzpcIlwiLFwibW9udGhcIj09ZT9hKz0zOlwiXCIsXCJ5ZWFyXCI9PWU/cys9NDpcIlwifXZhciBvPW5ldyBEYXRlKHMsYSxoKTtvLmdldFRpbWUoKTx0aGlzLm1pblRpbWU/bz10aGlzLm1pbkRhdGU6by5nZXRUaW1lKCk+dGhpcy5tYXhUaW1lJiYobz10aGlzLm1heERhdGUpLHRoaXMuZm9jdXNlZD1vfX0sX2dldEZvY3VzZWREYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5mb2N1c2VkfHx0aGlzLnNlbGVjdGVkRGF0ZXNbdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aC0xXSxlPXRoaXMucGFyc2VkRGF0ZTtpZighdClzd2l0Y2godGhpcy52aWV3KXtjYXNlXCJkYXlzXCI6dD1uZXcgRGF0ZShlLnllYXIsZS5tb250aCwobmV3IERhdGUpLmdldERhdGUoKSk7YnJlYWs7Y2FzZVwibW9udGhzXCI6dD1uZXcgRGF0ZShlLnllYXIsZS5tb250aCwxKTticmVhaztjYXNlXCJ5ZWFyc1wiOnQ9bmV3IERhdGUoZS55ZWFyLDAsMSl9cmV0dXJuIHR9LF9nZXRDZWxsOmZ1bmN0aW9uKHQsaSl7aT1pfHx0aGlzLmNlbGxUeXBlO3ZhciBzLGE9bi5nZXRQYXJzZWREYXRlKHQpLGg9Jy5kYXRlcGlja2VyLS1jZWxsW2RhdGEteWVhcj1cIicrYS55ZWFyKydcIl0nO3N3aXRjaChpKXtjYXNlXCJtb250aFwiOmg9J1tkYXRhLW1vbnRoPVwiJythLm1vbnRoKydcIl0nO2JyZWFrO2Nhc2VcImRheVwiOmgrPSdbZGF0YS1tb250aD1cIicrYS5tb250aCsnXCJdW2RhdGEtZGF0ZT1cIicrYS5kYXRlKydcIl0nfXJldHVybiBzPXRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uJGVsLmZpbmQoaCkscy5sZW5ndGg/czplKFwiXCIpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0LiRlbC5vZmYoXCIuYWRwXCIpLmRhdGEoXCJkYXRlcGlja2VyXCIsXCJcIiksdC5zZWxlY3RlZERhdGVzPVtdLHQuZm9jdXNlZD1cIlwiLHQudmlld3M9e30sdC5rZXlzPVtdLHQubWluUmFuZ2U9XCJcIix0Lm1heFJhbmdlPVwiXCIsdC5vcHRzLmlubGluZXx8IXQuZWxJc0lucHV0P3QuJGRhdGVwaWNrZXIuY2xvc2VzdChcIi5kYXRlcGlja2VyLWlubGluZVwiKS5yZW1vdmUoKTp0LiRkYXRlcGlja2VyLnJlbW92ZSgpfSxfaGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXM6ZnVuY3Rpb24odCxlKXt0aGlzLm9wdHMucmFuZ2U/dGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkP3RoaXMucmVtb3ZlRGF0ZShlKToyIT10aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiZ0aGlzLl90cmlnZ2VyKFwiY2xpY2tDZWxsXCIsZSk6dGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkJiZ0aGlzLnJlbW92ZURhdGUoZSksdGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkfHwodGhpcy5sYXN0U2VsZWN0ZWREYXRlPXQsdGhpcy5vcHRzLnRpbWVwaWNrZXImJih0aGlzLnRpbWVwaWNrZXIuX3NldFRpbWUodCksdGhpcy50aW1lcGlja2VyLnVwZGF0ZSgpKSl9LF9vblNob3dFdmVudDpmdW5jdGlvbih0KXt0aGlzLnZpc2libGV8fHRoaXMuc2hvdygpfSxfb25CbHVyOmZ1bmN0aW9uKCl7IXRoaXMuaW5Gb2N1cyYmdGhpcy52aXNpYmxlJiZ0aGlzLmhpZGUoKX0sX29uTW91c2VEb3duRGF0ZXBpY2tlcjpmdW5jdGlvbih0KXt0aGlzLmluRm9jdXM9ITB9LF9vbk1vdXNlVXBEYXRlcGlja2VyOmZ1bmN0aW9uKHQpe3RoaXMuaW5Gb2N1cz0hMSx0Lm9yaWdpbmFsRXZlbnQuaW5Gb2N1cz0hMCx0Lm9yaWdpbmFsRXZlbnQudGltZXBpY2tlckZvY3VzfHx0aGlzLiRlbC5mb2N1cygpfSxfb25LZXlVcEdlbmVyYWw6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy4kZWwudmFsKCk7ZXx8dGhpcy5jbGVhcigpfSxfb25SZXNpemU6ZnVuY3Rpb24oKXt0aGlzLnZpc2libGUmJnRoaXMuc2V0UG9zaXRpb24oKX0sX29uTW91c2VVcEJvZHk6ZnVuY3Rpb24odCl7dC5vcmlnaW5hbEV2ZW50LmluRm9jdXN8fHRoaXMudmlzaWJsZSYmIXRoaXMuaW5Gb2N1cyYmdGhpcy5oaWRlKCl9LF9vbk1vdXNlVXBFbDpmdW5jdGlvbih0KXt0Lm9yaWdpbmFsRXZlbnQuaW5Gb2N1cz0hMCxzZXRUaW1lb3V0KHRoaXMuX29uS2V5VXBHZW5lcmFsLmJpbmQodGhpcyksNCl9LF9vbktleURvd246ZnVuY3Rpb24odCl7dmFyIGU9dC53aGljaDtpZih0aGlzLl9yZWdpc3RlcktleShlKSxlPj0zNyYmNDA+PWUmJih0LnByZXZlbnREZWZhdWx0KCksdGhpcy5fZm9jdXNOZXh0Q2VsbChlKSksMTM9PWUmJnRoaXMuZm9jdXNlZCl7aWYodGhpcy5fZ2V0Q2VsbCh0aGlzLmZvY3VzZWQpLmhhc0NsYXNzKFwiLWRpc2FibGVkLVwiKSlyZXR1cm47aWYodGhpcy52aWV3IT10aGlzLm9wdHMubWluVmlldyl0aGlzLmRvd24oKTtlbHNle3ZhciBpPXRoaXMuX2lzU2VsZWN0ZWQodGhpcy5mb2N1c2VkLHRoaXMuY2VsbFR5cGUpO2lmKCFpKXJldHVybiB0aGlzLnRpbWVwaWNrZXImJih0aGlzLmZvY3VzZWQuc2V0SG91cnModGhpcy50aW1lcGlja2VyLmhvdXJzKSx0aGlzLmZvY3VzZWQuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcykpLHZvaWQgdGhpcy5zZWxlY3REYXRlKHRoaXMuZm9jdXNlZCk7dGhpcy5faGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMoaSx0aGlzLmZvY3VzZWQpfX0yNz09ZSYmdGhpcy5oaWRlKCl9LF9vbktleVVwOmZ1bmN0aW9uKHQpe3ZhciBlPXQud2hpY2g7dGhpcy5fdW5SZWdpc3RlcktleShlKX0sX29uSG90S2V5OmZ1bmN0aW9uKHQsZSl7dGhpcy5faGFuZGxlSG90S2V5KGUpfSxfb25Nb3VzZUVudGVyQ2VsbDpmdW5jdGlvbih0KXt2YXIgaT1lKHQudGFyZ2V0KS5jbG9zZXN0KFwiLmRhdGVwaWNrZXItLWNlbGxcIikscz10aGlzLl9nZXREYXRlRnJvbUNlbGwoaSk7dGhpcy5zaWxlbnQ9ITAsdGhpcy5mb2N1c2VkJiYodGhpcy5mb2N1c2VkPVwiXCIpLGkuYWRkQ2xhc3MoXCItZm9jdXMtXCIpLHRoaXMuZm9jdXNlZD1zLHRoaXMuc2lsZW50PSExLHRoaXMub3B0cy5yYW5nZSYmMT09dGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCYmKHRoaXMubWluUmFuZ2U9dGhpcy5zZWxlY3RlZERhdGVzWzBdLHRoaXMubWF4UmFuZ2U9XCJcIixuLmxlc3ModGhpcy5taW5SYW5nZSx0aGlzLmZvY3VzZWQpJiYodGhpcy5tYXhSYW5nZT10aGlzLm1pblJhbmdlLHRoaXMubWluUmFuZ2U9XCJcIiksdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fdXBkYXRlKCkpfSxfb25Nb3VzZUxlYXZlQ2VsbDpmdW5jdGlvbih0KXt2YXIgaT1lKHQudGFyZ2V0KS5jbG9zZXN0KFwiLmRhdGVwaWNrZXItLWNlbGxcIik7aS5yZW1vdmVDbGFzcyhcIi1mb2N1cy1cIiksdGhpcy5zaWxlbnQ9ITAsdGhpcy5mb2N1c2VkPVwiXCIsdGhpcy5zaWxlbnQ9ITF9LF9vblRpbWVDaGFuZ2U6ZnVuY3Rpb24odCxlLGkpe3ZhciBzPW5ldyBEYXRlLGE9dGhpcy5zZWxlY3RlZERhdGVzLG49ITE7YS5sZW5ndGgmJihuPSEwLHM9dGhpcy5sYXN0U2VsZWN0ZWREYXRlKSxzLnNldEhvdXJzKGUpLHMuc2V0TWludXRlcyhpKSxufHx0aGlzLl9nZXRDZWxsKHMpLmhhc0NsYXNzKFwiLWRpc2FibGVkLVwiKT8odGhpcy5fc2V0SW5wdXRWYWx1ZSgpLHRoaXMub3B0cy5vblNlbGVjdCYmdGhpcy5fdHJpZ2dlck9uQ2hhbmdlKCkpOnRoaXMuc2VsZWN0RGF0ZShzKX0sX29uQ2xpY2tDZWxsOmZ1bmN0aW9uKHQsZSl7dGhpcy50aW1lcGlja2VyJiYoZS5zZXRIb3Vycyh0aGlzLnRpbWVwaWNrZXIuaG91cnMpLGUuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcykpLHRoaXMuc2VsZWN0RGF0ZShlKX0sc2V0IGZvY3VzZWQodCl7aWYoIXQmJnRoaXMuZm9jdXNlZCl7dmFyIGU9dGhpcy5fZ2V0Q2VsbCh0aGlzLmZvY3VzZWQpO2UubGVuZ3RoJiZlLnJlbW92ZUNsYXNzKFwiLWZvY3VzLVwiKX10aGlzLl9mb2N1c2VkPXQsdGhpcy5vcHRzLnJhbmdlJiYxPT10aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiYodGhpcy5taW5SYW5nZT10aGlzLnNlbGVjdGVkRGF0ZXNbMF0sdGhpcy5tYXhSYW5nZT1cIlwiLG4ubGVzcyh0aGlzLm1pblJhbmdlLHRoaXMuX2ZvY3VzZWQpJiYodGhpcy5tYXhSYW5nZT10aGlzLm1pblJhbmdlLHRoaXMubWluUmFuZ2U9XCJcIikpLHRoaXMuc2lsZW50fHwodGhpcy5kYXRlPXQpfSxnZXQgZm9jdXNlZCgpe3JldHVybiB0aGlzLl9mb2N1c2VkfSxnZXQgcGFyc2VkRGF0ZSgpe3JldHVybiBuLmdldFBhcnNlZERhdGUodGhpcy5kYXRlKX0sc2V0IGRhdGUodCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlPyh0aGlzLmN1cnJlbnREYXRlPXQsdGhpcy5pbml0ZWQmJiF0aGlzLnNpbGVudCYmKHRoaXMudmlld3NbdGhpcy52aWV3XS5fcmVuZGVyKCksdGhpcy5uYXYuX3JlbmRlcigpLHRoaXMudmlzaWJsZSYmdGhpcy5lbElzSW5wdXQmJnRoaXMuc2V0UG9zaXRpb24oKSksdCk6dm9pZCAwfSxnZXQgZGF0ZSgpe3JldHVybiB0aGlzLmN1cnJlbnREYXRlfSxzZXQgdmlldyh0KXtyZXR1cm4gdGhpcy52aWV3SW5kZXg9dGhpcy52aWV3SW5kZXhlcy5pbmRleE9mKHQpLHRoaXMudmlld0luZGV4PDA/dm9pZCAwOih0aGlzLnByZXZWaWV3PXRoaXMuY3VycmVudFZpZXcsdGhpcy5jdXJyZW50Vmlldz10LHRoaXMuaW5pdGVkJiYodGhpcy52aWV3c1t0XT90aGlzLnZpZXdzW3RdLl9yZW5kZXIoKTp0aGlzLnZpZXdzW3RdPW5ldyBlLmZuLmRhdGVwaWNrZXIuQm9keSh0aGlzLHQsdGhpcy5vcHRzKSx0aGlzLnZpZXdzW3RoaXMucHJldlZpZXddLmhpZGUoKSx0aGlzLnZpZXdzW3RdLnNob3coKSx0aGlzLm5hdi5fcmVuZGVyKCksdGhpcy5vcHRzLm9uQ2hhbmdlVmlldyYmdGhpcy5vcHRzLm9uQ2hhbmdlVmlldyh0KSx0aGlzLmVsSXNJbnB1dCYmdGhpcy52aXNpYmxlJiZ0aGlzLnNldFBvc2l0aW9uKCkpLHQpfSxnZXQgdmlldygpe3JldHVybiB0aGlzLmN1cnJlbnRWaWV3fSxnZXQgY2VsbFR5cGUoKXtyZXR1cm4gdGhpcy52aWV3LnN1YnN0cmluZygwLHRoaXMudmlldy5sZW5ndGgtMSl9LGdldCBtaW5UaW1lKCl7dmFyIHQ9bi5nZXRQYXJzZWREYXRlKHRoaXMubWluRGF0ZSk7cmV0dXJuIG5ldyBEYXRlKHQueWVhcix0Lm1vbnRoLHQuZGF0ZSkuZ2V0VGltZSgpfSxnZXQgbWF4VGltZSgpe3ZhciB0PW4uZ2V0UGFyc2VkRGF0ZSh0aGlzLm1heERhdGUpO3JldHVybiBuZXcgRGF0ZSh0LnllYXIsdC5tb250aCx0LmRhdGUpLmdldFRpbWUoKX0sZ2V0IGN1ckRlY2FkZSgpe3JldHVybiBuLmdldERlY2FkZSh0aGlzLmRhdGUpfX0sbi5nZXREYXlzQ291bnQ9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSx0LmdldE1vbnRoKCkrMSwwKS5nZXREYXRlKCl9LG4uZ2V0UGFyc2VkRGF0ZT1mdW5jdGlvbih0KXtyZXR1cm57eWVhcjp0LmdldEZ1bGxZZWFyKCksbW9udGg6dC5nZXRNb250aCgpLGZ1bGxNb250aDp0LmdldE1vbnRoKCkrMTwxMD9cIjBcIisodC5nZXRNb250aCgpKzEpOnQuZ2V0TW9udGgoKSsxLGRhdGU6dC5nZXREYXRlKCksZnVsbERhdGU6dC5nZXREYXRlKCk8MTA/XCIwXCIrdC5nZXREYXRlKCk6dC5nZXREYXRlKCksZGF5OnQuZ2V0RGF5KCksaG91cnM6dC5nZXRIb3VycygpLGZ1bGxIb3Vyczp0LmdldEhvdXJzKCk8MTA/XCIwXCIrdC5nZXRIb3VycygpOnQuZ2V0SG91cnMoKSxtaW51dGVzOnQuZ2V0TWludXRlcygpLGZ1bGxNaW51dGVzOnQuZ2V0TWludXRlcygpPDEwP1wiMFwiK3QuZ2V0TWludXRlcygpOnQuZ2V0TWludXRlcygpfX0sbi5nZXREZWNhZGU9ZnVuY3Rpb24odCl7dmFyIGU9MTAqTWF0aC5mbG9vcih0LmdldEZ1bGxZZWFyKCkvMTApO3JldHVybltlLGUrOV19LG4udGVtcGxhdGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5yZXBsYWNlKC8jXFx7KFtcXHddKylcXH0vZyxmdW5jdGlvbih0LGkpe3JldHVybiBlW2ldfHwwPT09ZVtpXT9lW2ldOnZvaWQgMH0pfSxuLmlzU2FtZT1mdW5jdGlvbih0LGUsaSl7aWYoIXR8fCFlKXJldHVybiExO3ZhciBzPW4uZ2V0UGFyc2VkRGF0ZSh0KSxhPW4uZ2V0UGFyc2VkRGF0ZShlKSxoPWk/aTpcImRheVwiLG89e2RheTpzLmRhdGU9PWEuZGF0ZSYmcy5tb250aD09YS5tb250aCYmcy55ZWFyPT1hLnllYXIsbW9udGg6cy5tb250aD09YS5tb250aCYmcy55ZWFyPT1hLnllYXIseWVhcjpzLnllYXI9PWEueWVhcn07cmV0dXJuIG9baF19LG4ubGVzcz1mdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQmJmU/ZS5nZXRUaW1lKCk8dC5nZXRUaW1lKCk6ITF9LG4uYmlnZ2VyPWZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdCYmZT9lLmdldFRpbWUoKT50LmdldFRpbWUoKTohMX0sbi5nZXRMZWFkaW5nWmVyb051bT1mdW5jdGlvbih0KXtyZXR1cm4gcGFyc2VJbnQodCk8MTA/XCIwXCIrdDp0fSxuLnJlc2V0VGltZT1mdW5jdGlvbih0KXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgdD8odD1uLmdldFBhcnNlZERhdGUodCksbmV3IERhdGUodC55ZWFyLHQubW9udGgsdC5kYXRlKSk6dm9pZCAwfSxlLmZuLmRhdGVwaWNrZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2lmKGUuZGF0YSh0aGlzLG8pKXt2YXIgaT1lLmRhdGEodGhpcyxvKTtpLm9wdHM9ZS5leHRlbmQoITAsaS5vcHRzLHQpLGkudXBkYXRlKCl9ZWxzZSBlLmRhdGEodGhpcyxvLG5ldyBtKHRoaXMsdCkpfSl9LGUuZm4uZGF0ZXBpY2tlci5Db25zdHJ1Y3Rvcj1tLGUuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZT17cnU6e2RheXM6W1wi0JLQvtGB0LrRgNC10YHQtdC90YzQtVwiLFwi0J/QvtC90LXQtNC10LvRjNC90LjQulwiLFwi0JLRgtC+0YDQvdC40LpcIixcItCh0YDQtdC00LBcIixcItCn0LXRgtCy0LXRgNCzXCIsXCLQn9GP0YLQvdC40YbQsFwiLFwi0KHRg9Cx0LHQvtGC0LBcIl0sZGF5c1Nob3J0OltcItCS0L7RgVwiLFwi0J/QvtC9XCIsXCLQktGC0L5cIixcItCh0YDQtVwiLFwi0KfQtdGCXCIsXCLQn9GP0YJcIixcItCh0YPQsVwiXSxkYXlzTWluOltcItCS0YFcIixcItCf0L1cIixcItCS0YJcIixcItCh0YBcIixcItCn0YJcIixcItCf0YJcIixcItCh0LFcIl0sbW9udGhzOltcItCv0L3QstCw0YDRjFwiLFwi0KTQtdCy0YDQsNC70YxcIixcItCc0LDRgNGCXCIsXCLQkNC/0YDQtdC70YxcIixcItCc0LDQuVwiLFwi0JjRjtC90YxcIixcItCY0Y7Qu9GMXCIsXCLQkNCy0LPRg9GB0YJcIixcItCh0LXQvdGC0Y/QsdGA0YxcIixcItCe0LrRgtGP0LHRgNGMXCIsXCLQndC+0Y/QsdGA0YxcIixcItCU0LXQutCw0LHRgNGMXCJdLG1vbnRoc1Nob3J0OltcItCv0L3QslwiLFwi0KTQtdCyXCIsXCLQnNCw0YBcIixcItCQ0L/RgFwiLFwi0JzQsNC5XCIsXCLQmNGO0L1cIixcItCY0Y7Qu1wiLFwi0JDQstCzXCIsXCLQodC10L1cIixcItCe0LrRglwiLFwi0J3QvtGPXCIsXCLQlNC10LpcIl0sdG9kYXk6XCLQodC10LPQvtC00L3Rj1wiLGNsZWFyOlwi0J7Rh9C40YHRgtC40YLRjFwiLGRhdGVGb3JtYXQ6XCJkZC5tbS55eXl5XCIsdGltZUZvcm1hdDpcImhoOmlpXCIsZmlyc3REYXk6MX19LGUoZnVuY3Rpb24oKXtlKHIpLmRhdGVwaWNrZXIoKX0pfSgpLGZ1bmN0aW9uKCl7dmFyIHQ9e2RheXM6JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1kYXlzIGRhdGVwaWNrZXItLWJvZHlcIj48ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tZGF5cy1uYW1lc1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy1kYXlzXCI+PC9kaXY+PC9kaXY+Jyxtb250aHM6JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1tb250aHMgZGF0ZXBpY2tlci0tYm9keVwiPjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy1tb250aHNcIj48L2Rpdj48L2Rpdj4nLHllYXJzOic8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0teWVhcnMgZGF0ZXBpY2tlci0tYm9keVwiPjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy15ZWFyc1wiPjwvZGl2PjwvZGl2Pid9LHM9ZS5mbi5kYXRlcGlja2VyLGE9cy5Db25zdHJ1Y3RvcjtzLkJvZHk9ZnVuY3Rpb24odCxpLHMpe3RoaXMuZD10LHRoaXMudHlwZT1pLHRoaXMub3B0cz1zLHRoaXMuJGVsPWUoXCJcIiksdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyfHx0aGlzLmluaXQoKX0scy5Cb2R5LnByb3RvdHlwZT17aW5pdDpmdW5jdGlvbigpe3RoaXMuX2J1aWxkQmFzZUh0bWwoKSx0aGlzLl9yZW5kZXIoKSx0aGlzLl9iaW5kRXZlbnRzKCl9LF9iaW5kRXZlbnRzOmZ1bmN0aW9uKCl7dGhpcy4kZWwub24oXCJjbGlja1wiLFwiLmRhdGVwaWNrZXItLWNlbGxcIixlLnByb3h5KHRoaXMuX29uQ2xpY2tDZWxsLHRoaXMpKX0sX2J1aWxkQmFzZUh0bWw6ZnVuY3Rpb24oKXt0aGlzLiRlbD1lKHRbdGhpcy50eXBlXSkuYXBwZW5kVG8odGhpcy5kLiRjb250ZW50KSx0aGlzLiRuYW1lcz1lKFwiLmRhdGVwaWNrZXItLWRheXMtbmFtZXNcIix0aGlzLiRlbCksdGhpcy4kY2VsbHM9ZShcIi5kYXRlcGlja2VyLS1jZWxsc1wiLHRoaXMuJGVsKX0sX2dldERheU5hbWVzSHRtbDpmdW5jdGlvbih0LGUscyxhKXtyZXR1cm4gZT1lIT1pP2U6dCxzPXM/czpcIlwiLGE9YSE9aT9hOjAsYT43P3M6Nz09ZT90aGlzLl9nZXREYXlOYW1lc0h0bWwodCwwLHMsKythKToocys9JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1kYXktbmFtZScrKHRoaXMuZC5pc1dlZWtlbmQoZSk/XCIgLXdlZWtlbmQtXCI6XCJcIikrJ1wiPicrdGhpcy5kLmxvYy5kYXlzTWluW2VdK1wiPC9kaXY+XCIsdGhpcy5fZ2V0RGF5TmFtZXNIdG1sKHQsKytlLHMsKythKSl9LF9nZXRDZWxsQ29udGVudHM6ZnVuY3Rpb24odCxlKXt2YXIgaT1cImRhdGVwaWNrZXItLWNlbGwgZGF0ZXBpY2tlci0tY2VsbC1cIitlLHM9bmV3IERhdGUsbj10aGlzLmQsaD1hLnJlc2V0VGltZShuLm1pblJhbmdlKSxvPWEucmVzZXRUaW1lKG4ubWF4UmFuZ2UpLHI9bi5vcHRzLGM9YS5nZXRQYXJzZWREYXRlKHQpLGQ9e30sbD1jLmRhdGU7c3dpdGNoKGUpe2Nhc2VcImRheVwiOm4uaXNXZWVrZW5kKGMuZGF5KSYmKGkrPVwiIC13ZWVrZW5kLVwiKSxjLm1vbnRoIT10aGlzLmQucGFyc2VkRGF0ZS5tb250aCYmKGkrPVwiIC1vdGhlci1tb250aC1cIixyLnNlbGVjdE90aGVyTW9udGhzfHwoaSs9XCIgLWRpc2FibGVkLVwiKSxyLnNob3dPdGhlck1vbnRoc3x8KGw9XCJcIikpO2JyZWFrO2Nhc2VcIm1vbnRoXCI6bD1uLmxvY1tuLm9wdHMubW9udGhzRmllbGRdW2MubW9udGhdO2JyZWFrO2Nhc2VcInllYXJcIjp2YXIgdT1uLmN1ckRlY2FkZTtsPWMueWVhciwoYy55ZWFyPHVbMF18fGMueWVhcj51WzFdKSYmKGkrPVwiIC1vdGhlci1kZWNhZGUtXCIsci5zZWxlY3RPdGhlclllYXJzfHwoaSs9XCIgLWRpc2FibGVkLVwiKSxyLnNob3dPdGhlclllYXJzfHwobD1cIlwiKSl9cmV0dXJuIHIub25SZW5kZXJDZWxsJiYoZD1yLm9uUmVuZGVyQ2VsbCh0LGUpfHx7fSxsPWQuaHRtbD9kLmh0bWw6bCxpKz1kLmNsYXNzZXM/XCIgXCIrZC5jbGFzc2VzOlwiXCIpLHIucmFuZ2UmJihhLmlzU2FtZShoLHQsZSkmJihpKz1cIiAtcmFuZ2UtZnJvbS1cIiksYS5pc1NhbWUobyx0LGUpJiYoaSs9XCIgLXJhbmdlLXRvLVwiKSwxPT1uLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiZuLmZvY3VzZWQ/KChhLmJpZ2dlcihoLHQpJiZhLmxlc3Mobi5mb2N1c2VkLHQpfHxhLmxlc3Mobyx0KSYmYS5iaWdnZXIobi5mb2N1c2VkLHQpKSYmKGkrPVwiIC1pbi1yYW5nZS1cIiksYS5sZXNzKG8sdCkmJmEuaXNTYW1lKG4uZm9jdXNlZCx0KSYmKGkrPVwiIC1yYW5nZS1mcm9tLVwiKSxhLmJpZ2dlcihoLHQpJiZhLmlzU2FtZShuLmZvY3VzZWQsdCkmJihpKz1cIiAtcmFuZ2UtdG8tXCIpKToyPT1uLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiZhLmJpZ2dlcihoLHQpJiZhLmxlc3Mobyx0KSYmKGkrPVwiIC1pbi1yYW5nZS1cIikpLGEuaXNTYW1lKHMsdCxlKSYmKGkrPVwiIC1jdXJyZW50LVwiKSxuLmZvY3VzZWQmJmEuaXNTYW1lKHQsbi5mb2N1c2VkLGUpJiYoaSs9XCIgLWZvY3VzLVwiKSxuLl9pc1NlbGVjdGVkKHQsZSkmJihpKz1cIiAtc2VsZWN0ZWQtXCIpLCghbi5faXNJblJhbmdlKHQsZSl8fGQuZGlzYWJsZWQpJiYoaSs9XCIgLWRpc2FibGVkLVwiKSx7aHRtbDpsLGNsYXNzZXM6aX19LF9nZXREYXlzSHRtbDpmdW5jdGlvbih0KXt2YXIgZT1hLmdldERheXNDb3VudCh0KSxpPW5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSx0LmdldE1vbnRoKCksMSkuZ2V0RGF5KCkscz1uZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksdC5nZXRNb250aCgpLGUpLmdldERheSgpLG49aS10aGlzLmQubG9jLmZpcnN0RGF5LGg9Ni1zK3RoaXMuZC5sb2MuZmlyc3REYXk7bj0wPm4/bis3Om4saD1oPjY/aC03Omg7Zm9yKHZhciBvLHIsYz0tbisxLGQ9XCJcIixsPWMsdT1lK2g7dT49bDtsKyspcj10LmdldEZ1bGxZZWFyKCksbz10LmdldE1vbnRoKCksZCs9dGhpcy5fZ2V0RGF5SHRtbChuZXcgRGF0ZShyLG8sbCkpO3JldHVybiBkfSxfZ2V0RGF5SHRtbDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9nZXRDZWxsQ29udGVudHModCxcImRheVwiKTtyZXR1cm4nPGRpdiBjbGFzcz1cIicrZS5jbGFzc2VzKydcIiBkYXRhLWRhdGU9XCInK3QuZ2V0RGF0ZSgpKydcIiBkYXRhLW1vbnRoPVwiJyt0LmdldE1vbnRoKCkrJ1wiIGRhdGEteWVhcj1cIicrdC5nZXRGdWxsWWVhcigpKydcIj4nK2UuaHRtbCtcIjwvZGl2PlwifSxfZ2V0TW9udGhzSHRtbDpmdW5jdGlvbih0KXtmb3IodmFyIGU9XCJcIixpPWEuZ2V0UGFyc2VkRGF0ZSh0KSxzPTA7MTI+czspZSs9dGhpcy5fZ2V0TW9udGhIdG1sKG5ldyBEYXRlKGkueWVhcixzKSkscysrO3JldHVybiBlfSxfZ2V0TW9udGhIdG1sOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2dldENlbGxDb250ZW50cyh0LFwibW9udGhcIik7cmV0dXJuJzxkaXYgY2xhc3M9XCInK2UuY2xhc3NlcysnXCIgZGF0YS1tb250aD1cIicrdC5nZXRNb250aCgpKydcIj4nK2UuaHRtbCtcIjwvZGl2PlwifSxfZ2V0WWVhcnNIdG1sOmZ1bmN0aW9uKHQpe3ZhciBlPShhLmdldFBhcnNlZERhdGUodCksYS5nZXREZWNhZGUodCkpLGk9ZVswXS0xLHM9XCJcIixuPWk7Zm9yKG47bjw9ZVsxXSsxO24rKylzKz10aGlzLl9nZXRZZWFySHRtbChuZXcgRGF0ZShuLDApKTtyZXR1cm4gc30sX2dldFllYXJIdG1sOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2dldENlbGxDb250ZW50cyh0LFwieWVhclwiKTtyZXR1cm4nPGRpdiBjbGFzcz1cIicrZS5jbGFzc2VzKydcIiBkYXRhLXllYXI9XCInK3QuZ2V0RnVsbFllYXIoKSsnXCI+JytlLmh0bWwrXCI8L2Rpdj5cIn0sX3JlbmRlclR5cGVzOntkYXlzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZ2V0RGF5TmFtZXNIdG1sKHRoaXMuZC5sb2MuZmlyc3REYXkpLGU9dGhpcy5fZ2V0RGF5c0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTt0aGlzLiRjZWxscy5odG1sKGUpLHRoaXMuJG5hbWVzLmh0bWwodCl9LG1vbnRoczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldE1vbnRoc0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTt0aGlzLiRjZWxscy5odG1sKHQpfSx5ZWFyczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldFllYXJzSHRtbCh0aGlzLmQuY3VycmVudERhdGUpO3RoaXMuJGNlbGxzLmh0bWwodCl9fSxfcmVuZGVyOmZ1bmN0aW9uKCl7dGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyfHx0aGlzLl9yZW5kZXJUeXBlc1t0aGlzLnR5cGVdLmJpbmQodGhpcykoKX0sX3VwZGF0ZTpmdW5jdGlvbigpe3ZhciB0LGkscyxhPWUoXCIuZGF0ZXBpY2tlci0tY2VsbFwiLHRoaXMuJGNlbGxzKSxuPXRoaXM7YS5lYWNoKGZ1bmN0aW9uKGEsaCl7aT1lKHRoaXMpLHM9bi5kLl9nZXREYXRlRnJvbUNlbGwoZSh0aGlzKSksdD1uLl9nZXRDZWxsQ29udGVudHMocyxuLmQuY2VsbFR5cGUpLGkuYXR0cihcImNsYXNzXCIsdC5jbGFzc2VzKX0pfSxzaG93OmZ1bmN0aW9uKCl7dGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyfHwodGhpcy4kZWwuYWRkQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy5hY2l0dmU9ITApfSxoaWRlOmZ1bmN0aW9uKCl7dGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy5hY3RpdmU9ITF9LF9oYW5kbGVDbGljazpmdW5jdGlvbih0KXt2YXIgZT10LmRhdGEoXCJkYXRlXCIpfHwxLGk9dC5kYXRhKFwibW9udGhcIil8fDAscz10LmRhdGEoXCJ5ZWFyXCIpfHx0aGlzLmQucGFyc2VkRGF0ZS55ZWFyLGE9dGhpcy5kO2lmKGEudmlldyE9dGhpcy5vcHRzLm1pblZpZXcpcmV0dXJuIHZvaWQgYS5kb3duKG5ldyBEYXRlKHMsaSxlKSk7dmFyIG49bmV3IERhdGUocyxpLGUpLGg9dGhpcy5kLl9pc1NlbGVjdGVkKG4sdGhpcy5kLmNlbGxUeXBlKTtyZXR1cm4gaD92b2lkIGEuX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzLmJpbmQoYSxoLG4pKCk6dm9pZCBhLl90cmlnZ2VyKFwiY2xpY2tDZWxsXCIsbil9LF9vbkNsaWNrQ2VsbDpmdW5jdGlvbih0KXt2YXIgaT1lKHQudGFyZ2V0KS5jbG9zZXN0KFwiLmRhdGVwaWNrZXItLWNlbGxcIik7aS5oYXNDbGFzcyhcIi1kaXNhYmxlZC1cIil8fHRoaXMuX2hhbmRsZUNsaWNrLmJpbmQodGhpcykoaSl9fX0oKSxmdW5jdGlvbigpe3ZhciB0PSc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbmF2LWFjdGlvblwiIGRhdGEtYWN0aW9uPVwicHJldlwiPiN7cHJldkh0bWx9PC9kaXY+PGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi10aXRsZVwiPiN7dGl0bGV9PC9kaXY+PGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi1hY3Rpb25cIiBkYXRhLWFjdGlvbj1cIm5leHRcIj4je25leHRIdG1sfTwvZGl2PicsaT0nPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWJ1dHRvbnNcIj48L2Rpdj4nLHM9JzxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tYnV0dG9uXCIgZGF0YS1hY3Rpb249XCIje2FjdGlvbn1cIj4je2xhYmVsfTwvc3Bhbj4nLGE9ZS5mbi5kYXRlcGlja2VyLG49YS5Db25zdHJ1Y3RvcjthLk5hdmlnYXRpb249ZnVuY3Rpb24odCxlKXt0aGlzLmQ9dCx0aGlzLm9wdHM9ZSx0aGlzLiRidXR0b25zQ29udGFpbmVyPVwiXCIsdGhpcy5pbml0KCl9LGEuTmF2aWdhdGlvbi5wcm90b3R5cGU9e2luaXQ6ZnVuY3Rpb24oKXt0aGlzLl9idWlsZEJhc2VIdG1sKCksdGhpcy5fYmluZEV2ZW50cygpfSxfYmluZEV2ZW50czpmdW5jdGlvbigpe3RoaXMuZC4kbmF2Lm9uKFwiY2xpY2tcIixcIi5kYXRlcGlja2VyLS1uYXYtYWN0aW9uXCIsZS5wcm94eSh0aGlzLl9vbkNsaWNrTmF2QnV0dG9uLHRoaXMpKSx0aGlzLmQuJG5hdi5vbihcImNsaWNrXCIsXCIuZGF0ZXBpY2tlci0tbmF2LXRpdGxlXCIsZS5wcm94eSh0aGlzLl9vbkNsaWNrTmF2VGl0bGUsdGhpcykpLHRoaXMuZC4kZGF0ZXBpY2tlci5vbihcImNsaWNrXCIsXCIuZGF0ZXBpY2tlci0tYnV0dG9uXCIsZS5wcm94eSh0aGlzLl9vbkNsaWNrTmF2QnV0dG9uLHRoaXMpKX0sX2J1aWxkQmFzZUh0bWw6ZnVuY3Rpb24oKXt0aGlzLm9wdHMub25seVRpbWVwaWNrZXJ8fHRoaXMuX3JlbmRlcigpLHRoaXMuX2FkZEJ1dHRvbnNJZk5lZWQoKX0sX2FkZEJ1dHRvbnNJZk5lZWQ6ZnVuY3Rpb24oKXt0aGlzLm9wdHMudG9kYXlCdXR0b24mJnRoaXMuX2FkZEJ1dHRvbihcInRvZGF5XCIpLHRoaXMub3B0cy5jbGVhckJ1dHRvbiYmdGhpcy5fYWRkQnV0dG9uKFwiY2xlYXJcIil9LF9yZW5kZXI6ZnVuY3Rpb24oKXt2YXIgaT10aGlzLl9nZXRUaXRsZSh0aGlzLmQuY3VycmVudERhdGUpLHM9bi50ZW1wbGF0ZSh0LGUuZXh0ZW5kKHt0aXRsZTppfSx0aGlzLm9wdHMpKTt0aGlzLmQuJG5hdi5odG1sKHMpLFwieWVhcnNcIj09dGhpcy5kLnZpZXcmJmUoXCIuZGF0ZXBpY2tlci0tbmF2LXRpdGxlXCIsdGhpcy5kLiRuYXYpLmFkZENsYXNzKFwiLWRpc2FibGVkLVwiKSx0aGlzLnNldE5hdlN0YXR1cygpfSxfZ2V0VGl0bGU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZC5mb3JtYXREYXRlKHRoaXMub3B0cy5uYXZUaXRsZXNbdGhpcy5kLnZpZXddLHQpfSxfYWRkQnV0dG9uOmZ1bmN0aW9uKHQpe3RoaXMuJGJ1dHRvbnNDb250YWluZXIubGVuZ3RofHx0aGlzLl9hZGRCdXR0b25zQ29udGFpbmVyKCk7dmFyIGk9e2FjdGlvbjp0LGxhYmVsOnRoaXMuZC5sb2NbdF19LGE9bi50ZW1wbGF0ZShzLGkpO2UoXCJbZGF0YS1hY3Rpb249XCIrdCtcIl1cIix0aGlzLiRidXR0b25zQ29udGFpbmVyKS5sZW5ndGh8fHRoaXMuJGJ1dHRvbnNDb250YWluZXIuYXBwZW5kKGEpfSxfYWRkQnV0dG9uc0NvbnRhaW5lcjpmdW5jdGlvbigpe3RoaXMuZC4kZGF0ZXBpY2tlci5hcHBlbmQoaSksdGhpcy4kYnV0dG9uc0NvbnRhaW5lcj1lKFwiLmRhdGVwaWNrZXItLWJ1dHRvbnNcIix0aGlzLmQuJGRhdGVwaWNrZXIpfSxzZXROYXZTdGF0dXM6ZnVuY3Rpb24oKXtpZigodGhpcy5vcHRzLm1pbkRhdGV8fHRoaXMub3B0cy5tYXhEYXRlKSYmdGhpcy5vcHRzLmRpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZSl7dmFyIHQ9dGhpcy5kLnBhcnNlZERhdGUsZT10Lm1vbnRoLGk9dC55ZWFyLHM9dC5kYXRlO3N3aXRjaCh0aGlzLmQudmlldyl7Y2FzZVwiZGF5c1wiOnRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGksZS0xLDEpLFwibW9udGhcIil8fHRoaXMuX2Rpc2FibGVOYXYoXCJwcmV2XCIpLHRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGksZSsxLDEpLFwibW9udGhcIil8fHRoaXMuX2Rpc2FibGVOYXYoXCJuZXh0XCIpO2JyZWFrO2Nhc2VcIm1vbnRoc1wiOnRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGktMSxlLHMpLFwieWVhclwiKXx8dGhpcy5fZGlzYWJsZU5hdihcInByZXZcIiksdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoaSsxLGUscyksXCJ5ZWFyXCIpfHx0aGlzLl9kaXNhYmxlTmF2KFwibmV4dFwiKTticmVhaztjYXNlXCJ5ZWFyc1wiOnZhciBhPW4uZ2V0RGVjYWRlKHRoaXMuZC5kYXRlKTt0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZShhWzBdLTEsMCwxKSxcInllYXJcIil8fHRoaXMuX2Rpc2FibGVOYXYoXCJwcmV2XCIpLHRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGFbMV0rMSwwLDEpLFwieWVhclwiKXx8dGhpcy5fZGlzYWJsZU5hdihcIm5leHRcIil9fX0sX2Rpc2FibGVOYXY6ZnVuY3Rpb24odCl7ZSgnW2RhdGEtYWN0aW9uPVwiJyt0KydcIl0nLHRoaXMuZC4kbmF2KS5hZGRDbGFzcyhcIi1kaXNhYmxlZC1cIil9LF9hY3RpdmF0ZU5hdjpmdW5jdGlvbih0KXtlKCdbZGF0YS1hY3Rpb249XCInK3QrJ1wiXScsdGhpcy5kLiRuYXYpLnJlbW92ZUNsYXNzKFwiLWRpc2FibGVkLVwiKX0sX29uQ2xpY2tOYXZCdXR0b246ZnVuY3Rpb24odCl7dmFyIGk9ZSh0LnRhcmdldCkuY2xvc2VzdChcIltkYXRhLWFjdGlvbl1cIikscz1pLmRhdGEoXCJhY3Rpb25cIik7dGhpcy5kW3NdKCl9LF9vbkNsaWNrTmF2VGl0bGU6ZnVuY3Rpb24odCl7cmV0dXJuIGUodC50YXJnZXQpLmhhc0NsYXNzKFwiLWRpc2FibGVkLVwiKT92b2lkIDA6XCJkYXlzXCI9PXRoaXMuZC52aWV3P3RoaXMuZC52aWV3PVwibW9udGhzXCI6dm9pZCh0aGlzLmQudmlldz1cInllYXJzXCIpfX19KCksZnVuY3Rpb24oKXt2YXIgdD0nPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWVcIj48ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50XCI+ICAgPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtaG91cnNcIj4je2hvdXJWaXNpYmxlfTwvc3Bhbj4gICA8c3BhbiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1jb2xvblwiPjo8L3NwYW4+ICAgPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtbWludXRlc1wiPiN7bWluVmFsdWV9PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLXNsaWRlcnNcIj4gICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1yb3dcIj4gICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cImhvdXJzXCIgdmFsdWU9XCIje2hvdXJWYWx1ZX1cIiBtaW49XCIje2hvdXJNaW59XCIgbWF4PVwiI3tob3VyTWF4fVwiIHN0ZXA9XCIje2hvdXJTdGVwfVwiLz4gICA8L2Rpdj4gICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1yb3dcIj4gICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cIm1pbnV0ZXNcIiB2YWx1ZT1cIiN7bWluVmFsdWV9XCIgbWluPVwiI3ttaW5NaW59XCIgbWF4PVwiI3ttaW5NYXh9XCIgc3RlcD1cIiN7bWluU3RlcH1cIi8+ICAgPC9kaXY+PC9kaXY+PC9kaXY+JyxpPWUuZm4uZGF0ZXBpY2tlcixzPWkuQ29uc3RydWN0b3I7aS5UaW1lcGlja2VyPWZ1bmN0aW9uKHQsZSl7dGhpcy5kPXQsdGhpcy5vcHRzPWUsdGhpcy5pbml0KCl9LGkuVGltZXBpY2tlci5wcm90b3R5cGU9e2luaXQ6ZnVuY3Rpb24oKXt2YXIgdD1cImlucHV0XCI7dGhpcy5fc2V0VGltZSh0aGlzLmQuZGF0ZSksdGhpcy5fYnVpbGRIVE1MKCksbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvdHJpZGVudC9naSkmJih0PVwiY2hhbmdlXCIpLHRoaXMuZC4kZWwub24oXCJzZWxlY3REYXRlXCIsdGhpcy5fb25TZWxlY3REYXRlLmJpbmQodGhpcykpLHRoaXMuJHJhbmdlcy5vbih0LHRoaXMuX29uQ2hhbmdlUmFuZ2UuYmluZCh0aGlzKSksdGhpcy4kcmFuZ2VzLm9uKFwibW91c2V1cFwiLHRoaXMuX29uTW91c2VVcFJhbmdlLmJpbmQodGhpcykpLHRoaXMuJHJhbmdlcy5vbihcIm1vdXNlbW92ZSBmb2N1cyBcIix0aGlzLl9vbk1vdXNlRW50ZXJSYW5nZS5iaW5kKHRoaXMpKSx0aGlzLiRyYW5nZXMub24oXCJtb3VzZW91dCBibHVyXCIsdGhpcy5fb25Nb3VzZU91dFJhbmdlLmJpbmQodGhpcykpfSxfc2V0VGltZTpmdW5jdGlvbih0KXt2YXIgZT1zLmdldFBhcnNlZERhdGUodCk7dGhpcy5faGFuZGxlRGF0ZSh0KSx0aGlzLmhvdXJzPWUuaG91cnM8dGhpcy5taW5Ib3Vycz90aGlzLm1pbkhvdXJzOmUuaG91cnMsdGhpcy5taW51dGVzPWUubWludXRlczx0aGlzLm1pbk1pbnV0ZXM/dGhpcy5taW5NaW51dGVzOmUubWludXRlc30sX3NldE1pblRpbWVGcm9tRGF0ZTpmdW5jdGlvbih0KXt0aGlzLm1pbkhvdXJzPXQuZ2V0SG91cnMoKSx0aGlzLm1pbk1pbnV0ZXM9dC5nZXRNaW51dGVzKCksdGhpcy5kLmxhc3RTZWxlY3RlZERhdGUmJnRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlLmdldEhvdXJzKCk+dC5nZXRIb3VycygpJiYodGhpcy5taW5NaW51dGVzPXRoaXMub3B0cy5taW5NaW51dGVzKX0sX3NldE1heFRpbWVGcm9tRGF0ZTpmdW5jdGlvbih0KXtcbnRoaXMubWF4SG91cnM9dC5nZXRIb3VycygpLHRoaXMubWF4TWludXRlcz10LmdldE1pbnV0ZXMoKSx0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZSYmdGhpcy5kLmxhc3RTZWxlY3RlZERhdGUuZ2V0SG91cnMoKTx0LmdldEhvdXJzKCkmJih0aGlzLm1heE1pbnV0ZXM9dGhpcy5vcHRzLm1heE1pbnV0ZXMpfSxfc2V0RGVmYXVsdE1pbk1heFRpbWU6ZnVuY3Rpb24oKXt2YXIgdD0yMyxlPTU5LGk9dGhpcy5vcHRzO3RoaXMubWluSG91cnM9aS5taW5Ib3VyczwwfHxpLm1pbkhvdXJzPnQ/MDppLm1pbkhvdXJzLHRoaXMubWluTWludXRlcz1pLm1pbk1pbnV0ZXM8MHx8aS5taW5NaW51dGVzPmU/MDppLm1pbk1pbnV0ZXMsdGhpcy5tYXhIb3Vycz1pLm1heEhvdXJzPDB8fGkubWF4SG91cnM+dD90OmkubWF4SG91cnMsdGhpcy5tYXhNaW51dGVzPWkubWF4TWludXRlczwwfHxpLm1heE1pbnV0ZXM+ZT9lOmkubWF4TWludXRlc30sX3ZhbGlkYXRlSG91cnNNaW51dGVzOmZ1bmN0aW9uKHQpe3RoaXMuaG91cnM8dGhpcy5taW5Ib3Vycz90aGlzLmhvdXJzPXRoaXMubWluSG91cnM6dGhpcy5ob3Vycz50aGlzLm1heEhvdXJzJiYodGhpcy5ob3Vycz10aGlzLm1heEhvdXJzKSx0aGlzLm1pbnV0ZXM8dGhpcy5taW5NaW51dGVzP3RoaXMubWludXRlcz10aGlzLm1pbk1pbnV0ZXM6dGhpcy5taW51dGVzPnRoaXMubWF4TWludXRlcyYmKHRoaXMubWludXRlcz10aGlzLm1heE1pbnV0ZXMpfSxfYnVpbGRIVE1MOmZ1bmN0aW9uKCl7dmFyIGk9cy5nZXRMZWFkaW5nWmVyb051bSxhPXtob3VyTWluOnRoaXMubWluSG91cnMsaG91ck1heDppKHRoaXMubWF4SG91cnMpLGhvdXJTdGVwOnRoaXMub3B0cy5ob3Vyc1N0ZXAsaG91clZhbHVlOnRoaXMuaG91cnMsaG91clZpc2libGU6aSh0aGlzLmRpc3BsYXlIb3VycyksbWluTWluOnRoaXMubWluTWludXRlcyxtaW5NYXg6aSh0aGlzLm1heE1pbnV0ZXMpLG1pblN0ZXA6dGhpcy5vcHRzLm1pbnV0ZXNTdGVwLG1pblZhbHVlOmkodGhpcy5taW51dGVzKX0sbj1zLnRlbXBsYXRlKHQsYSk7dGhpcy4kdGltZXBpY2tlcj1lKG4pLmFwcGVuZFRvKHRoaXMuZC4kZGF0ZXBpY2tlciksdGhpcy4kcmFuZ2VzPWUoJ1t0eXBlPVwicmFuZ2VcIl0nLHRoaXMuJHRpbWVwaWNrZXIpLHRoaXMuJGhvdXJzPWUoJ1tuYW1lPVwiaG91cnNcIl0nLHRoaXMuJHRpbWVwaWNrZXIpLHRoaXMuJG1pbnV0ZXM9ZSgnW25hbWU9XCJtaW51dGVzXCJdJyx0aGlzLiR0aW1lcGlja2VyKSx0aGlzLiRob3Vyc1RleHQ9ZShcIi5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtaG91cnNcIix0aGlzLiR0aW1lcGlja2VyKSx0aGlzLiRtaW51dGVzVGV4dD1lKFwiLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1taW51dGVzXCIsdGhpcy4kdGltZXBpY2tlciksdGhpcy5kLmFtcG0mJih0aGlzLiRhbXBtPWUoJzxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWFtcG1cIj4nKS5hcHBlbmRUbyhlKFwiLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudFwiLHRoaXMuJHRpbWVwaWNrZXIpKS5odG1sKHRoaXMuZGF5UGVyaW9kKSx0aGlzLiR0aW1lcGlja2VyLmFkZENsYXNzKFwiLWFtLXBtLVwiKSl9LF91cGRhdGVDdXJyZW50VGltZTpmdW5jdGlvbigpe3ZhciB0PXMuZ2V0TGVhZGluZ1plcm9OdW0odGhpcy5kaXNwbGF5SG91cnMpLGU9cy5nZXRMZWFkaW5nWmVyb051bSh0aGlzLm1pbnV0ZXMpO3RoaXMuJGhvdXJzVGV4dC5odG1sKHQpLHRoaXMuJG1pbnV0ZXNUZXh0Lmh0bWwoZSksdGhpcy5kLmFtcG0mJnRoaXMuJGFtcG0uaHRtbCh0aGlzLmRheVBlcmlvZCl9LF91cGRhdGVSYW5nZXM6ZnVuY3Rpb24oKXt0aGlzLiRob3Vycy5hdHRyKHttaW46dGhpcy5taW5Ib3VycyxtYXg6dGhpcy5tYXhIb3Vyc30pLnZhbCh0aGlzLmhvdXJzKSx0aGlzLiRtaW51dGVzLmF0dHIoe21pbjp0aGlzLm1pbk1pbnV0ZXMsbWF4OnRoaXMubWF4TWludXRlc30pLnZhbCh0aGlzLm1pbnV0ZXMpfSxfaGFuZGxlRGF0ZTpmdW5jdGlvbih0KXt0aGlzLl9zZXREZWZhdWx0TWluTWF4VGltZSgpLHQmJihzLmlzU2FtZSh0LHRoaXMuZC5vcHRzLm1pbkRhdGUpP3RoaXMuX3NldE1pblRpbWVGcm9tRGF0ZSh0aGlzLmQub3B0cy5taW5EYXRlKTpzLmlzU2FtZSh0LHRoaXMuZC5vcHRzLm1heERhdGUpJiZ0aGlzLl9zZXRNYXhUaW1lRnJvbURhdGUodGhpcy5kLm9wdHMubWF4RGF0ZSkpLHRoaXMuX3ZhbGlkYXRlSG91cnNNaW51dGVzKHQpfSx1cGRhdGU6ZnVuY3Rpb24oKXt0aGlzLl91cGRhdGVSYW5nZXMoKSx0aGlzLl91cGRhdGVDdXJyZW50VGltZSgpfSxfZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dCxhPXQ7dCBpbnN0YW5jZW9mIERhdGUmJihpPXMuZ2V0UGFyc2VkRGF0ZSh0KSxhPWkuaG91cnMpO3ZhciBuPWV8fHRoaXMuZC5hbXBtLGg9XCJhbVwiO2lmKG4pc3dpdGNoKCEwKXtjYXNlIDA9PWE6YT0xMjticmVhaztjYXNlIDEyPT1hOmg9XCJwbVwiO2JyZWFrO2Nhc2UgYT4xMTphLT0xMixoPVwicG1cIn1yZXR1cm57aG91cnM6YSxkYXlQZXJpb2Q6aH19LHNldCBob3Vycyh0KXt0aGlzLl9ob3Vycz10O3ZhciBlPXRoaXMuX2dldFZhbGlkSG91cnNGcm9tRGF0ZSh0KTt0aGlzLmRpc3BsYXlIb3Vycz1lLmhvdXJzLHRoaXMuZGF5UGVyaW9kPWUuZGF5UGVyaW9kfSxnZXQgaG91cnMoKXtyZXR1cm4gdGhpcy5faG91cnN9LF9vbkNoYW5nZVJhbmdlOmZ1bmN0aW9uKHQpe3ZhciBpPWUodC50YXJnZXQpLHM9aS5hdHRyKFwibmFtZVwiKTt0aGlzLmQudGltZXBpY2tlcklzQWN0aXZlPSEwLHRoaXNbc109aS52YWwoKSx0aGlzLl91cGRhdGVDdXJyZW50VGltZSgpLHRoaXMuZC5fdHJpZ2dlcihcInRpbWVDaGFuZ2VcIixbdGhpcy5ob3Vycyx0aGlzLm1pbnV0ZXNdKSx0aGlzLl9oYW5kbGVEYXRlKHRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlKSx0aGlzLnVwZGF0ZSgpfSxfb25TZWxlY3REYXRlOmZ1bmN0aW9uKHQsZSl7dGhpcy5faGFuZGxlRGF0ZShlKSx0aGlzLnVwZGF0ZSgpfSxfb25Nb3VzZUVudGVyUmFuZ2U6ZnVuY3Rpb24odCl7dmFyIGk9ZSh0LnRhcmdldCkuYXR0cihcIm5hbWVcIik7ZShcIi5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtXCIraSx0aGlzLiR0aW1lcGlja2VyKS5hZGRDbGFzcyhcIi1mb2N1cy1cIil9LF9vbk1vdXNlT3V0UmFuZ2U6ZnVuY3Rpb24odCl7dmFyIGk9ZSh0LnRhcmdldCkuYXR0cihcIm5hbWVcIik7dGhpcy5kLmluRm9jdXN8fGUoXCIuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LVwiK2ksdGhpcy4kdGltZXBpY2tlcikucmVtb3ZlQ2xhc3MoXCItZm9jdXMtXCIpfSxfb25Nb3VzZVVwUmFuZ2U6ZnVuY3Rpb24odCl7dGhpcy5kLnRpbWVwaWNrZXJJc0FjdGl2ZT0hMX19fSgpfSh3aW5kb3csalF1ZXJ5KTsiLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gSUUgPD0gMTEgcmVwbGFjZXMgJDAgd2l0aCB0aGUgd2hvbGUgbWF0Y2gsIGFzIGlmIGl0IHdhcyAkJlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAyNDY2Ni9nZXR0aW5nLWllLXRvLXJlcGxhY2UtYS1yZWdleC13aXRoLXRoZS1saXRlcmFsLXN0cmluZy0wXG52YXIgUkVQTEFDRV9LRUVQU18kMCA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbi8vIFNhZmFyaSA8PSAxMy4wLjMoPykgc3Vic3RpdHV0ZXMgbnRoIGNhcHR1cmUgd2hlcmUgbj5tIHdpdGggYW4gZW1wdHkgc3RyaW5nXG52YXIgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAoLy4vW1JFUExBQ0VdKSB7XG4gICAgcmV0dXJuIC8uL1tSRVBMQUNFXSgnYScsICckMCcpID09PSAnJztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG4vLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbi8vIFdlZXggSlMgaGFzIGZyb3plbiBidWlsdC1pbiBwcm90b3R5cGVzLCBzbyB1c2UgdHJ5IC8gY2F0Y2ggd3JhcHBlclxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAhPT0gMiB8fCByZXN1bHRbMF0gIT09ICdhJyB8fCByZXN1bHRbMV0gIT09ICdiJztcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYywgc2hhbSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICEoXG4gICAgICBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyAmJlxuICAgICAgUkVQTEFDRV9LRUVQU18kMCAmJlxuICAgICAgIVJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgKSkgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9LCB7XG4gICAgICBSRVBMQUNFX0tFRVBTXyQwOiBSRVBMQUNFX0tFRVBTXyQwLFxuICAgICAgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU6IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxuXG4gIGlmIChzaGFtKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZVtTWU1CT0xdLCAnc2hhbScsIHRydWUpO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IHJlZHVjZSwgcmVkdWNlUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19SSUdIVCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c0xlbmd0aCwgbWVtbykge1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IElTX1JJR0hUID8gbGVuZ3RoIC0gMSA6IDA7XG4gICAgdmFyIGkgPSBJU19SSUdIVCA/IC0xIDogMTtcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoIDwgMikgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgICAgaW5kZXggKz0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgaWYgKElTX1JJR0hUID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDtJU19SSUdIVCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICBsZWZ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4gIHJpZ2h0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwiLyohXHJcbiAgKiBTdGlja3lmaWxsIOKAkyBgcG9zaXRpb246IHN0aWNreWAgcG9seWZpbGxcclxuICAqIHYuIDIuMS4wIHwgaHR0cHM6Ly9naXRodWIuY29tL3dpbGRkZWVyL3N0aWNreWZpbGxcclxuICAqIE1JVCBMaWNlbnNlXHJcbiAgKi9cclxuXHJcbjsoZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgXHJcbiAgICAvKlxyXG4gICAgICogMS4gQ2hlY2sgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgYHBvc2l0aW9uOiBzdGlja3lgIG5hdGl2ZWx5IG9yIGlzIHRvbyBvbGQgdG8gcnVuIHRoZSBwb2x5ZmlsbC5cclxuICAgICAqICAgIElmIGVpdGhlciBvZiB0aGVzZSBpcyB0aGUgY2FzZSBzZXQgYHNlcHB1a3VgIGZsYWcuIEl0IHdpbGwgYmUgY2hlY2tlZCBsYXRlciB0byBkaXNhYmxlIGtleSBmZWF0dXJlc1xyXG4gICAgICogICAgb2YgdGhlIHBvbHlmaWxsLCBidXQgdGhlIEFQSSB3aWxsIHJlbWFpbiBmdW5jdGlvbmFsIHRvIGF2b2lkIGJyZWFraW5nIHRoaW5ncy5cclxuICAgICAqL1xyXG4gICAgXHJcbiAgICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG4gICAgXHJcbiAgICB2YXIgc2VwcHVrdSA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICB2YXIgaXNXaW5kb3dEZWZpbmVkID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XHJcbiAgICBcclxuICAgIC8vIFRoZSBwb2x5ZmlsbCBjYW7igJl0IGZ1bmN0aW9uIHByb3Blcmx5IHdpdGhvdXQgYHdpbmRvd2Agb3IgYHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlYC5cclxuICAgIGlmICghaXNXaW5kb3dEZWZpbmVkIHx8ICF3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkgc2VwcHVrdSA9IHRydWU7XHJcbiAgICAvLyBEb2504oCZdCBnZXQgaW4gYSB3YXkgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgYHBvc2l0aW9uOiBzdGlja3lgIG5hdGl2ZWx5LlxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVzdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKFsnJywgJy13ZWJraXQtJywgJy1tb3otJywgJy1tcy0nXS5zb21lKGZ1bmN0aW9uIChwcmVmaXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Tm9kZS5zdHlsZS5wb3NpdGlvbiA9IHByZWZpeCArICdzdGlja3knO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdE5vZGUuc3R5bGUucG9zaXRpb24gIT0gJyc7XHJcbiAgICAgICAgICAgICAgICB9KSkgc2VwcHVrdSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAvKlxyXG4gICAgICogMi4g4oCcR2xvYmFs4oCdIHZhcnMgdXNlZCBhY3Jvc3MgdGhlIHBvbHlmaWxsXHJcbiAgICAgKi9cclxuICAgIHZhciBpc0luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIFNoYWRvdyBSb290IGNvbnN0cnVjdG9yIGV4aXN0cyB0byBtYWtlIGZ1cnRoZXIgY2hlY2tzIHNpbXBsZXJcclxuICAgIHZhciBzaGFkb3dSb290RXhpc3RzID0gdHlwZW9mIFNoYWRvd1Jvb3QgIT09ICd1bmRlZmluZWQnO1xyXG4gICAgXHJcbiAgICAvLyBMYXN0IHNhdmVkIHNjcm9sbCBwb3NpdGlvblxyXG4gICAgdmFyIHNjcm9sbCA9IHtcclxuICAgICAgICB0b3A6IG51bGwsXHJcbiAgICAgICAgbGVmdDogbnVsbFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gQXJyYXkgb2YgY3JlYXRlZCBTdGlja3kgaW5zdGFuY2VzXHJcbiAgICB2YXIgc3RpY2tpZXMgPSBbXTtcclxuICAgIFxyXG4gICAgLypcclxuICAgICAqIDMuIFV0aWxpdHkgZnVuY3Rpb25zXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGV4dGVuZCh0YXJnZXRPYmosIHNvdXJjZU9iamVjdCkge1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2VPYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZU9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRPYmpba2V5XSA9IHNvdXJjZU9iamVjdFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBwYXJzZU51bWVyaWModmFsKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsKSB8fCAwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBnZXREb2NPZmZzZXRUb3Aobm9kZSkge1xyXG4gICAgICAgIHZhciBkb2NPZmZzZXRUb3AgPSAwO1xyXG4gICAgXHJcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgICAgICAgZG9jT2Zmc2V0VG9wICs9IG5vZGUub2Zmc2V0VG9wO1xyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5vZmZzZXRQYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIGRvY09mZnNldFRvcDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLypcclxuICAgICAqIDQuIFN0aWNreSBjbGFzc1xyXG4gICAgICovXHJcbiAgICBcclxuICAgIHZhciBTdGlja3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gU3RpY2t5KG5vZGUpIHtcclxuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0aWNreSk7XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIEhUTUxFbGVtZW50Jyk7XHJcbiAgICAgICAgICAgIGlmIChzdGlja2llcy5zb21lKGZ1bmN0aW9uIChzdGlja3kpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdGlja3kuX25vZGUgPT09IG5vZGU7XHJcbiAgICAgICAgICAgIH0pKSB0aHJvdyBuZXcgRXJyb3IoJ1N0aWNreWZpbGwgaXMgYWxyZWFkeSBhcHBsaWVkIHRvIHRoaXMgbm9kZScpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHRoaXMuX25vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGlja3lNb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XHJcbiAgICBcclxuICAgICAgICAgICAgc3RpY2tpZXMucHVzaCh0aGlzKTtcclxuICAgIFxyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBfY3JlYXRlQ2xhc3MoU3RpY2t5LCBbe1xyXG4gICAgICAgICAgICBrZXk6ICdyZWZyZXNoJyxcclxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VwcHVrdSB8fCB0aGlzLl9yZW1vdmVkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB0aGlzLl9kZWFjdGl2YXRlKCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5fbm9kZTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAqIDEuIFNhdmUgbm9kZSBjb21wdXRlZCBwcm9wc1xyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVDb21wdXRlZFByb3BzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBub2RlQ29tcHV0ZWRTdHlsZS5wb3NpdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IG5vZGVDb21wdXRlZFN0eWxlLnRvcCxcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub2RlQ29tcHV0ZWRTdHlsZS5kaXNwbGF5LFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogbm9kZUNvbXB1dGVkU3R5bGUubWFyZ2luVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogbm9kZUNvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IG5vZGVDb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IG5vZGVDb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNzc0Zsb2F0OiBub2RlQ29tcHV0ZWRTdHlsZS5jc3NGbG9hdFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAqIDIuIENoZWNrIGlmIHRoZSBub2RlIGNhbiBiZSBhY3RpdmF0ZWRcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHBhcnNlRmxvYXQobm9kZUNvbXB1dGVkUHJvcHMudG9wKSkgfHwgbm9kZUNvbXB1dGVkUHJvcHMuZGlzcGxheSA9PSAndGFibGUtY2VsbCcgfHwgbm9kZUNvbXB1dGVkUHJvcHMuZGlzcGxheSA9PSAnbm9uZScpIHJldHVybjtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAqIDMuIENoZWNrIGlmIHRoZSBjdXJyZW50IG5vZGUgcG9zaXRpb24gaXMgYHN0aWNreWAuIElmIGl0IGlzLCBpdCBtZWFucyB0aGF0IHRoZSBicm93c2VyIHN1cHBvcnRzIHN0aWNreSBwb3NpdGlvbmluZyxcclxuICAgICAgICAgICAgICAgICAqICAgIGJ1dCB0aGUgcG9seWZpbGwgd2FzIGZvcmNlLWVuYWJsZWQuIFdlIHNldCB0aGUgbm9kZeKAmXMgcG9zaXRpb24gdG8gYHN0YXRpY2AgYmVmb3JlIGNvbnRpbnVpbmcsIHNvIHRoYXQgdGhlIG5vZGVcclxuICAgICAgICAgICAgICAgICAqICAgIGlzIGluIGl04oCZcyBpbml0aWFsIHBvc2l0aW9uIHdoZW4gd2UgZ2F0aGVyIGl0cyBwYXJhbXMuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbFBvc2l0aW9uID0gbm9kZS5zdHlsZS5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlQ29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PSAnc3RpY2t5JyB8fCBub2RlQ29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PSAnLXdlYmtpdC1zdGlja3knKSBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3N0YXRpYyc7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgKiA0LiBHZXQgbmVjZXNzYXJ5IG5vZGUgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVmZXJlbmNlTm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gc2hhZG93Um9vdEV4aXN0cyAmJiByZWZlcmVuY2VOb2RlIGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHJlZmVyZW5jZU5vZGUuaG9zdCA6IHJlZmVyZW5jZU5vZGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZVdpbk9mZnNldCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50V2luT2Zmc2V0ID0gcGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnROb2RlKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IHBhcmVudE5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwYXJlbnROb2RlLnN0eWxlLnBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRIZWlnaHQ6IHBhcmVudE5vZGUub2Zmc2V0SGVpZ2h0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0VG9XaW5kb3cgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogbm9kZVdpbk9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggLSBub2RlV2luT2Zmc2V0LnJpZ2h0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0VG9QYXJlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBub2RlV2luT2Zmc2V0LnRvcCAtIHBhcmVudFdpbk9mZnNldC50b3AgLSBwYXJzZU51bWVyaWMocGFyZW50Q29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCksXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogbm9kZVdpbk9mZnNldC5sZWZ0IC0gcGFyZW50V2luT2Zmc2V0LmxlZnQgLSBwYXJzZU51bWVyaWMocGFyZW50Q29tcHV0ZWRTdHlsZS5ib3JkZXJMZWZ0V2lkdGgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAtbm9kZVdpbk9mZnNldC5yaWdodCArIHBhcmVudFdpbk9mZnNldC5yaWdodCAtIHBhcnNlTnVtZXJpYyhwYXJlbnRDb21wdXRlZFN0eWxlLmJvcmRlclJpZ2h0V2lkdGgpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBvcmlnaW5hbFBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogbm9kZS5zdHlsZS50b3AsXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBub2RlLnN0eWxlLmJvdHRvbSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBub2RlLnN0eWxlLmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IG5vZGUuc3R5bGUucmlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG5vZGUuc3R5bGUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiBub2RlLnN0eWxlLm1hcmdpblRvcCxcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBub2RlLnN0eWxlLm1hcmdpbkxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IG5vZGUuc3R5bGUubWFyZ2luUmlnaHRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHZhciBub2RlVG9wVmFsdWUgPSBwYXJzZU51bWVyaWMobm9kZUNvbXB1dGVkUHJvcHMudG9wKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xpbWl0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogbm9kZVdpbk9mZnNldC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgLSBub2RlVG9wVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBwYXJlbnRXaW5PZmZzZXQudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0ICsgcGFyZW50Tm9kZS5vZmZzZXRIZWlnaHQgLSBwYXJzZU51bWVyaWMocGFyZW50Q29tcHV0ZWRTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCkgLSBub2RlLm9mZnNldEhlaWdodCAtIG5vZGVUb3BWYWx1ZSAtIHBhcnNlTnVtZXJpYyhub2RlQ29tcHV0ZWRQcm9wcy5tYXJnaW5Cb3R0b20pXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgICogNS4gRW5zdXJlIHRoYXQgdGhlIG5vZGUgd2lsbCBiZSBwb3NpdGlvbmVkIHJlbGF0aXZlbHkgdG8gdGhlIHBhcmVudCBub2RlXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRQb3NpdGlvbiA9IHBhcmVudENvbXB1dGVkU3R5bGUucG9zaXRpb247XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRQb3NpdGlvbiAhPSAnYWJzb2x1dGUnICYmIHBhcmVudFBvc2l0aW9uICE9ICdyZWxhdGl2ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAqIDYuIFJlY2FsYyBub2RlIHBvc2l0aW9uLlxyXG4gICAgICAgICAgICAgICAgICogICAgSXTigJlzIGltcG9ydGFudCB0byBkbyB0aGlzIGJlZm9yZSBjbG9uZSBpbmplY3Rpb24gdG8gYXZvaWQgc2Nyb2xsaW5nIGJ1ZyBpbiBDaHJvbWUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlY2FsY1Bvc2l0aW9uKCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgKiA3LiBDcmVhdGUgYSBjbG9uZVxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLl9jbG9uZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgY2xvbmUubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBzdHlsZXMgdG8gdGhlIGNsb25lXHJcbiAgICAgICAgICAgICAgICBleHRlbmQoY2xvbmUubm9kZS5zdHlsZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBub2RlV2luT2Zmc2V0LnJpZ2h0IC0gbm9kZVdpbk9mZnNldC5sZWZ0ICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG5vZGVXaW5PZmZzZXQuYm90dG9tIC0gbm9kZVdpbk9mZnNldC50b3AgKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogbm9kZUNvbXB1dGVkUHJvcHMubWFyZ2luVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogbm9kZUNvbXB1dGVkUHJvcHMubWFyZ2luQm90dG9tLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IG5vZGVDb21wdXRlZFByb3BzLm1hcmdpbkxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IG5vZGVDb21wdXRlZFByb3BzLm1hcmdpblJpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNzc0Zsb2F0OiBub2RlQ29tcHV0ZWRQcm9wcy5jc3NGbG9hdCxcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMCxcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXJTcGFjaW5nOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMWVtJyxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3N0YXRpYydcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VOb2RlLmluc2VydEJlZm9yZShjbG9uZS5ub2RlLCBub2RlKTtcclxuICAgICAgICAgICAgICAgIGNsb25lLmRvY09mZnNldFRvcCA9IGdldERvY09mZnNldFRvcChjbG9uZS5ub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAga2V5OiAnX3JlY2FsY1Bvc2l0aW9uJyxcclxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWNhbGNQb3NpdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYWN0aXZlIHx8IHRoaXMuX3JlbW92ZWQpIHJldHVybjtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIHN0aWNreU1vZGUgPSBzY3JvbGwudG9wIDw9IHRoaXMuX2xpbWl0cy5zdGFydCA/ICdzdGFydCcgOiBzY3JvbGwudG9wID49IHRoaXMuX2xpbWl0cy5lbmQgPyAnZW5kJyA6ICdtaWRkbGUnO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RpY2t5TW9kZSA9PSBzdGlja3lNb2RlKSByZXR1cm47XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RpY2t5TW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHRoaXMuX25vZGUuc3R5bGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogdGhpcy5fb2Zmc2V0VG9QYXJlbnQubGVmdCArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogdGhpcy5fb2Zmc2V0VG9QYXJlbnQucmlnaHQgKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB0aGlzLl9vZmZzZXRUb1BhcmVudC50b3AgKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAnYXV0bycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pZGRsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZCh0aGlzLl9ub2RlLnN0eWxlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMuX29mZnNldFRvV2luZG93LmxlZnQgKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRoaXMuX29mZnNldFRvV2luZG93LnJpZ2h0ICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogdGhpcy5fc3R5bGVzLnRvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdlbmQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmQodGhpcy5fbm9kZS5zdHlsZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLl9vZmZzZXRUb1BhcmVudC5sZWZ0ICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB0aGlzLl9vZmZzZXRUb1BhcmVudC5yaWdodCArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnYXV0bycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGlja3lNb2RlID0gc3RpY2t5TW9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAga2V5OiAnX2Zhc3RDaGVjaycsXHJcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZmFzdENoZWNrKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmUgfHwgdGhpcy5fcmVtb3ZlZCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZ2V0RG9jT2Zmc2V0VG9wKHRoaXMuX2Nsb25lLm5vZGUpIC0gdGhpcy5fY2xvbmUuZG9jT2Zmc2V0VG9wKSA+IDEgfHwgTWF0aC5hYnModGhpcy5fcGFyZW50Lm5vZGUub2Zmc2V0SGVpZ2h0IC0gdGhpcy5fcGFyZW50Lm9mZnNldEhlaWdodCkgPiAxKSB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAga2V5OiAnX2RlYWN0aXZhdGUnLFxyXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2RlYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2FjdGl2ZSB8fCB0aGlzLl9yZW1vdmVkKSByZXR1cm47XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Nsb25lLm5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLl9jbG9uZS5ub2RlKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jbG9uZTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHRoaXMuX25vZGUuc3R5bGUsIHRoaXMuX3N0eWxlcyk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fc3R5bGVzO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIGVsZW1lbnTigJlzIHBhcmVudCBub2RlIGlzIHVzZWQgYnkgb3RoZXIgc3RpY2tpZXMuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBub3QsIHJlc3RvcmUgcGFyZW50IG5vZGXigJlzIHN0eWxlcy5cclxuICAgICAgICAgICAgICAgIGlmICghc3RpY2tpZXMuc29tZShmdW5jdGlvbiAoc3RpY2t5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0aWNreSAhPT0gX3RoaXMgJiYgc3RpY2t5Ll9wYXJlbnQgJiYgc3RpY2t5Ll9wYXJlbnQubm9kZSA9PT0gX3RoaXMuX3BhcmVudC5ub2RlO1xyXG4gICAgICAgICAgICAgICAgfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbmQodGhpcy5fcGFyZW50Lm5vZGUuc3R5bGUsIHRoaXMuX3BhcmVudC5zdHlsZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3BhcmVudDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RpY2t5TW9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29mZnNldFRvV2luZG93O1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29mZnNldFRvUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2xpbWl0cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAga2V5OiAncmVtb3ZlJyxcclxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHN0aWNraWVzLnNvbWUoZnVuY3Rpb24gKHN0aWNreSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RpY2t5Ll9ub2RlID09PSBfdGhpczIuX25vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RpY2tpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIFN0aWNreTtcclxuICAgIH0oKTtcclxuICAgIFxyXG4gICAgLypcclxuICAgICAqIDUuIFN0aWNreWZpbGwgQVBJXHJcbiAgICAgKi9cclxuICAgIFxyXG4gICAgXHJcbiAgICB2YXIgU3RpY2t5ZmlsbCA9IHtcclxuICAgICAgICBzdGlja2llczogc3RpY2tpZXMsXHJcbiAgICAgICAgU3RpY2t5OiBTdGlja3ksXHJcbiAgICBcclxuICAgICAgICBmb3JjZVN0aWNreTogZnVuY3Rpb24gZm9yY2VTdGlja3koKSB7XHJcbiAgICAgICAgICAgIHNlcHB1a3UgPSBmYWxzZTtcclxuICAgICAgICAgICAgaW5pdCgpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEFsbCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWRkT25lOiBmdW5jdGlvbiBhZGRPbmUobm9kZSkge1xyXG4gICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIGl04oCZcyBhIG5vZGVcclxuICAgICAgICAgICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTWF5YmUgaXTigJlzIGEgbm9kZSBsaXN0IG9mIHNvbWUgc29ydD9cclxuICAgICAgICAgICAgICAgIC8vIFRha2UgZmlyc3Qgbm9kZSBmcm9tIHRoZSBsaXN0IHRoZW5cclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmxlbmd0aCAmJiBub2RlWzBdKSBub2RlID0gbm9kZVswXTtlbHNlIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIFN0aWNreWZpbGwgaXMgYWxyZWFkeSBhcHBsaWVkIHRvIHRoZSBub2RlXHJcbiAgICAgICAgICAgIC8vIGFuZCByZXR1cm4gZXhpc3Rpbmcgc3RpY2t5XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RpY2tpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGlja2llc1tpXS5fbm9kZSA9PT0gbm9kZSkgcmV0dXJuIHN0aWNraWVzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gbmV3IHN0aWNreVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0aWNreShub2RlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZDogZnVuY3Rpb24gYWRkKG5vZGVMaXN0KSB7XHJcbiAgICAgICAgICAgIC8vIElmIGl04oCZcyBhIG5vZGUgbWFrZSBhbiBhcnJheSBvZiBvbmUgbm9kZVxyXG4gICAgICAgICAgICBpZiAobm9kZUxpc3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgbm9kZUxpc3QgPSBbbm9kZUxpc3RdO1xyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgYXJndW1lbnQgaXMgYW4gaXRlcmFibGUgb2Ygc29tZSBzb3J0XHJcbiAgICAgICAgICAgIGlmICghbm9kZUxpc3QubGVuZ3RoKSByZXR1cm47XHJcbiAgICBcclxuICAgICAgICAgICAgLy8gQWRkIGV2ZXJ5IGVsZW1lbnQgYXMgYSBzdGlja3kgYW5kIHJldHVybiBhbiBhcnJheSBvZiBjcmVhdGVkIFN0aWNreSBpbnN0YW5jZXNcclxuICAgICAgICAgICAgdmFyIGFkZGVkU3RpY2tpZXMgPSBbXTtcclxuICAgIFxyXG4gICAgICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVMaXN0W2ldO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBpdOKAmXMgbm90IGFuIEhUTUxFbGVtZW50IOKAkyBjcmVhdGUgYW4gZW1wdHkgZWxlbWVudCB0byBwcmVzZXJ2ZSAxLXRvLTFcclxuICAgICAgICAgICAgICAgIC8vIGNvcnJlbGF0aW9uIHdpdGggaW5wdXQgbGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZGVkU3RpY2tpZXMucHVzaCh2b2lkIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnY29udGludWUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBTdGlja3lmaWxsIGlzIGFscmVhZHkgYXBwbGllZCB0byB0aGUgbm9kZVxyXG4gICAgICAgICAgICAgICAgLy8gYWRkIGV4aXN0aW5nIHN0aWNreVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0aWNraWVzLnNvbWUoZnVuY3Rpb24gKHN0aWNreSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGlja3kuX25vZGUgPT09IG5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWRTdGlja2llcy5wdXNoKHN0aWNreSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pKSByZXR1cm4gJ2NvbnRpbnVlJztcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGFuZCBhZGQgbmV3IHN0aWNreVxyXG4gICAgICAgICAgICAgICAgYWRkZWRTdGlja2llcy5wdXNoKG5ldyBTdGlja3kobm9kZSkpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBfcmV0MiA9IF9sb29wKGkpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoX3JldDIgPT09ICdjb250aW51ZScpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIGFkZGVkU3RpY2tpZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWZyZXNoQWxsOiBmdW5jdGlvbiByZWZyZXNoQWxsKCkge1xyXG4gICAgICAgICAgICBzdGlja2llcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGlja3kpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdGlja3kucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbW92ZU9uZTogZnVuY3Rpb24gcmVtb3ZlT25lKG5vZGUpIHtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciBpdOKAmXMgYSBub2RlXHJcbiAgICAgICAgICAgIGlmICghKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIE1heWJlIGl04oCZcyBhIG5vZGUgbGlzdCBvZiBzb21lIHNvcnQ/XHJcbiAgICAgICAgICAgICAgICAvLyBUYWtlIGZpcnN0IG5vZGUgZnJvbSB0aGUgbGlzdCB0aGVuXHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5sZW5ndGggJiYgbm9kZVswXSkgbm9kZSA9IG5vZGVbMF07ZWxzZSByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHN0aWNraWVzIGJvdW5kIHRvIHRoZSBub2RlcyBpbiB0aGUgbGlzdFxyXG4gICAgICAgICAgICBzdGlja2llcy5zb21lKGZ1bmN0aW9uIChzdGlja3kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGlja3kuX25vZGUgPT09IG5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGlja3kucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobm9kZUxpc3QpIHtcclxuICAgICAgICAgICAgLy8gSWYgaXTigJlzIGEgbm9kZSBtYWtlIGFuIGFycmF5IG9mIG9uZSBub2RlXHJcbiAgICAgICAgICAgIGlmIChub2RlTGlzdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSBub2RlTGlzdCA9IFtub2RlTGlzdF07XHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBpdGVyYWJsZSBvZiBzb21lIHNvcnRcclxuICAgICAgICAgICAgaWYgKCFub2RlTGlzdC5sZW5ndGgpIHJldHVybjtcclxuICAgIFxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHN0aWNraWVzIGJvdW5kIHRvIHRoZSBub2RlcyBpbiB0aGUgbGlzdFxyXG4gICAgXHJcbiAgICAgICAgICAgIHZhciBfbG9vcDIgPSBmdW5jdGlvbiBfbG9vcDIoaSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBub2RlTGlzdFtpXTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgc3RpY2tpZXMuc29tZShmdW5jdGlvbiAoc3RpY2t5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0aWNreS5fbm9kZSA9PT0gbm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGlja3kucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIF9sb29wMihpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbiByZW1vdmVBbGwoKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChzdGlja2llcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHN0aWNraWVzWzBdLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLypcclxuICAgICAqIDYuIFNldHVwIGV2ZW50cyAodW5sZXNzIHRoZSBwb2x5ZmlsbCB3YXMgZGlzYWJsZWQpXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAgICAgaWYgKGlzSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgXHJcbiAgICAgICAgLy8gV2F0Y2ggZm9yIHNjcm9sbCBwb3NpdGlvbiBjaGFuZ2VzIGFuZCB0cmlnZ2VyIHJlY2FsYy9yZWZyZXNoIGlmIG5lZWRlZFxyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrU2Nyb2xsKCkge1xyXG4gICAgICAgICAgICBpZiAod2luZG93LnBhZ2VYT2Zmc2V0ICE9IHNjcm9sbC5sZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGwudG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsLmxlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQ7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIFN0aWNreWZpbGwucmVmcmVzaEFsbCgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCAhPSBzY3JvbGwudG9wKSB7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGwudG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsLmxlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQ7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIC8vIHJlY2FsYyBwb3NpdGlvbiBmb3IgYWxsIHN0aWNraWVzXHJcbiAgICAgICAgICAgICAgICBzdGlja2llcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGlja3kpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RpY2t5Ll9yZWNhbGNQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjaGVja1Njcm9sbCgpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBjaGVja1Njcm9sbCk7XHJcbiAgICBcclxuICAgICAgICAvLyBXYXRjaCBmb3Igd2luZG93IHJlc2l6ZXMgYW5kIGRldmljZSBvcmllbnRhdGlvbiBjaGFuZ2VzIGFuZCB0cmlnZ2VyIHJlZnJlc2hcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgU3RpY2t5ZmlsbC5yZWZyZXNoQWxsKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBTdGlja3lmaWxsLnJlZnJlc2hBbGwpO1xyXG4gICAgXHJcbiAgICAgICAgLy9GYXN0IGRpcnR5IGNoZWNrIGZvciBsYXlvdXQgY2hhbmdlcyBldmVyeSA1MDBtc1xyXG4gICAgICAgIHZhciBmYXN0Q2hlY2tUaW1lciA9IHZvaWQgMDtcclxuICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0RmFzdENoZWNrVGltZXIoKSB7XHJcbiAgICAgICAgICAgIGZhc3RDaGVja1RpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RpY2tpZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RpY2t5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0aWNreS5fZmFzdENoZWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBmdW5jdGlvbiBzdG9wRmFzdENoZWNrVGltZXIoKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZmFzdENoZWNrVGltZXIpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHZhciBkb2NIaWRkZW5LZXkgPSB2b2lkIDA7XHJcbiAgICAgICAgdmFyIHZpc2liaWxpdHlDaGFuZ2VFdmVudE5hbWUgPSB2b2lkIDA7XHJcbiAgICBcclxuICAgICAgICBpZiAoJ2hpZGRlbicgaW4gZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgZG9jSGlkZGVuS2V5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2VFdmVudE5hbWUgPSAndmlzaWJpbGl0eWNoYW5nZSc7XHJcbiAgICAgICAgfSBlbHNlIGlmICgnd2Via2l0SGlkZGVuJyBpbiBkb2N1bWVudCkge1xyXG4gICAgICAgICAgICBkb2NIaWRkZW5LZXkgPSAnd2Via2l0SGlkZGVuJztcclxuICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAodmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50W2RvY0hpZGRlbktleV0pIHN0YXJ0RmFzdENoZWNrVGltZXIoKTtcclxuICAgIFxyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHZpc2liaWxpdHlDaGFuZ2VFdmVudE5hbWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudFtkb2NIaWRkZW5LZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcEZhc3RDaGVja1RpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RmFzdENoZWNrVGltZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHN0YXJ0RmFzdENoZWNrVGltZXIoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCFzZXBwdWt1KSBpbml0KCk7XHJcbiAgICBcclxuICAgIC8qXHJcbiAgICAgKiA3LiBFeHBvc2UgU3RpY2t5ZmlsbFxyXG4gICAgICovXHJcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gU3RpY2t5ZmlsbDtcclxuICAgIH0gZWxzZSBpZiAoaXNXaW5kb3dEZWZpbmVkKSB7XHJcbiAgICAgICAgd2luZG93LlN0aWNreWZpbGwgPSBTdGlja3lmaWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbn0pKHdpbmRvdywgZG9jdW1lbnQpOyIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiZnVuY3Rpb24gaW5pdFNjcm9sbGJhcigpIHtcbiAgICAkKFwiLnNjcm9sbC1qc1wiKS5tQ3VzdG9tU2Nyb2xsYmFyKHtcbiAgICAgICAgYXhpczpcInlcIixcbiAgICAgICAgdXBkYXRlT25Db250ZW50UmVzaXplOnRydWUsXG4gICAgICAgIGRvY3VtZW50VG91Y2hTY3JvbGw6IHRydWUsXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGluaXRQcmljZVRhYnMoKSB7XG5cdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcudGFiLWxpbmsnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBoVG9wVGl0bGUgPSAkKCcubWFpbi1zZWN0aW9uLXRpdGxlJykub2Zmc2V0KCkudG9wO1xuICAgICAgICB2YXIgc2VsZWN0VGFiID0gJCh0aGlzKS5hdHRyKCdkYXRhLXRhYicpO1xuICAgICAgICB2YXIgcGFyZW50ID0gJCh0aGlzKS5jbG9zZXN0KCcudGFicy1jb250YWluZXInKTtcbiAgICAgICAgaWYoIHNlbGVjdFRhYiA9PSAnYWxsJyApIHtcbiAgICAgICAgICAgIHBhcmVudC5maW5kKCcudGFiLWxpbmsnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICQoJy50YWItY29udGVudCcpLmZhZGVJbigpO1xuICAgICAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSA+IGhUb3BUaXRsZSkge1xuICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAkKCcubWFpbi1zZWN0aW9uLXRpdGxlJykub2Zmc2V0KCkudG9wIC0gNDAgfSwgNTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmVudC5maW5kKCcudGFiLWxpbmsnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIHBhcmVudC5maW5kKCcudGFiLWNvbnRlbnQnKS5oaWRlKCk7XG4gICAgICAgICAgICAkKCcjJytzZWxlY3RUYWIpLmZhZGVJbigpO1xuICAgICAgICAgICAgaWYgKCQoJyMnK3NlbGVjdFRhYikubGVuZ3RoICE9IDAgJiYgJCh3aW5kb3cpLnNjcm9sbFRvcCgpID4gaFRvcFRpdGxlKSB7XG4gICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6ICQoJy5tYWluLXNlY3Rpb24tdGl0bGUnKS5vZmZzZXQoKS50b3AgLSA0MCB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnRhYi1tb2JpbGUtbGluaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHNlbGVjdFRhYiA9ICQodGhpcykuYXR0cignZGF0YS10YWInKTtcbiAgICAgICAgdmFyIHBhcmVudCA9ICQodGhpcykuY2xvc2VzdCgnLnRhYnMtY29udGFpbmVyJyk7XG4gICAgICAgIGlmKCBzZWxlY3RUYWIgPT0gJ2FsbCcgKSB7XG4gICAgICAgICAgICBwYXJlbnQuZmluZCgnLnRhYi1tb2JpbGUtbGluaycpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgcGFyZW50LmZpbmQoJy50YWItY29udGVudCcpLmZhZGVJbigpO1xuICAgICAgICAgICAgJChcIi5hY3RpdmUtdGFiLW1vYmlsZS10ZXh0XCIpLmh0bWwoJCgnLnRhYi1tb2JpbGUtbGluay5hY3RpdmUnKS50ZXh0KCkpO1xuICAgICAgICAgICAgJCgnLmFjdGl2ZS10YWItbW9iaWxlJykudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAkKFwiLnRhYnNcIikuc2xpZGVUb2dnbGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmVudC5maW5kKCcudGFiLW1vYmlsZS1saW5rJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICBwYXJlbnQuZmluZCgnLnRhYi1jb250ZW50JykuaGlkZSgpO1xuICAgICAgICAgICAgJCgnIycrc2VsZWN0VGFiKS5mYWRlSW4oKTtcbiAgICAgICAgICAgICQoXCIuYWN0aXZlLXRhYi1tb2JpbGUtdGV4dFwiKS5odG1sKCQoJy50YWItbW9iaWxlLWxpbmsuYWN0aXZlJykudGV4dCgpKTtcbiAgICAgICAgICAgICQoJy5hY3RpdmUtdGFiLW1vYmlsZScpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgJChcIi50YWJzXCIpLnNsaWRlVG9nZ2xlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gaW5pdFNlYXJjaFRhYnMoKSB7XG4gICAgdmFyIGFjdGl2ZV90YWIgPSAkKCcudGFicyBsaScpLmZpcnN0KCk7XG5cdHZhciB0YWJzX2NvbnRhaW5lciA9ICQodGhpcykuY2xvc2VzdCgnLnRhYnMtY29udGFpbmVyJyk7XG4gICAgdmFyIHNlbGVjdFRhYiA9IGFjdGl2ZV90YWIuYXR0cignZGF0YS10YWInKTtcblx0YWN0aXZlX3RhYi5hZGRDbGFzcygnYWN0aXZlJyk7XG5cdHRhYnNfY29udGFpbmVyLmZpbmQoJy50YWItY29udGVudCcpLmhpZGUoKTtcbiAgICAkKCcjJytzZWxlY3RUYWIpLmZhZGVJbigpO1xuICAgIGlmICgkKCcjJytzZWxlY3RUYWIpLmZpbmQoJy5tb2JpbGUtc2xpZGVyLWpzJykuaXMoJy5zbGljay1zbGlkZXInKSA9PSB0cnVlKSB7XG4gICAgICAgICQoXCIubW9iaWxlLXNsaWRlci1qc1wiKS5zbGljaygnZGVzdHJveScpO1xuICAgICAgICAkKFwiLm1vYmlsZS1zbGlkZXItanNcIikuc2xpY2soJ3JlZnJlc2gnKTtcbiAgICB9XG5cdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcudGFiLWxpbmsnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBzZWxlY3RUYWIgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdGFiJyk7XG4gICAgICAgIHZhciBwYXJlbnQgPSAkKHRoaXMpLmNsb3Nlc3QoJy50YWJzLWNvbnRhaW5lcicpO1xuICAgICAgICBwYXJlbnQuZmluZCgnLnRhYi1saW5rJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgcGFyZW50LmZpbmQoJy50YWItY29udGVudCcpLmhpZGUoKTtcbiAgICAgICAgJCgnIycrc2VsZWN0VGFiKS5mYWRlSW4oKTtcbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcudGFiLW1vYmlsZS1saW5rJywgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgc2VsZWN0VGFiID0gJCh0aGlzKS5hdHRyKCdkYXRhLXRhYicpO1xuICAgICAgICB2YXIgcGFyZW50ID0gJCh0aGlzKS5jbG9zZXN0KCcudGFicy1jb250YWluZXInKTtcbiAgICAgICAgICAgIHBhcmVudC5maW5kKCcudGFiLW1vYmlsZS1saW5rJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICBwYXJlbnQuZmluZCgnLnRhYi1jb250ZW50JykuaGlkZSgpO1xuICAgICAgICAgICAgJCgnIycrc2VsZWN0VGFiKS5mYWRlSW4oKTtcbiAgICAgICAgICAgIGlmICgkKCcjJytzZWxlY3RUYWIpLmZpbmQoJy5tb2JpbGUtc2xpZGVyLWpzJykuaXMoJy5zbGljay1zbGlkZXInKSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChcIi5tb2JpbGUtc2xpZGVyLWpzXCIpLnNsaWNrKCdkZXN0cm95Jyk7XG4gICAgICAgICAgICAgICAgJChcIi5tb2JpbGUtc2xpZGVyLWpzXCIpLnNsaWNrKCdyZWZyZXNoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKFwiLmFjdGl2ZS10YWItbW9iaWxlLXRleHRcIikuaHRtbCgkKCcudGFiLW1vYmlsZS1saW5rLmFjdGl2ZScpLnRleHQoKSk7XG4gICAgICAgICAgICAkKCcuYWN0aXZlLXRhYi1tb2JpbGUnKS50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICQoXCIudGFic1wiKS5zbGlkZVRvZ2dsZSgpO1xuICAgIH0pO1xufVxuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBpZigkKCcuaGlydXJnaXlhLXBhZ2UnKS5sZW5ndGgpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICQubWFnbmlmaWNQb3B1cC5vcGVuKHtpdGVtczoge3NyYzogJyNwb3B1cC1pbmZvJ30sdHlwZTogJ2lubGluZSd9LCAwKTtcbiAgICAgICAgfSwgMjAwMCk7XG4gICAgfVxuXG4gICAgLy8gc3dpcGUgZm9yIG1hZ25pZmljLXBvcHVwXG4gICAgaWYoJCgnLnBvcHVwLWdhbGxlcnknKS5sZW5ndGgpIHtcbiAgICAgICAgJChcImJvZHlcIikuc3dpcGUoe1xuICAgICAgICAgICAgc3dpcGVMZWZ0OiBmdW5jdGlvbihldmVudCwgZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50KSB7XG4gICAgICAgICAgICAgICAgJChcIi5tZnAtYXJyb3ctcmlnaHRcIikubWFnbmlmaWNQb3B1cChcIm5leHRcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3dpcGVSaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJChcIi5tZnAtYXJyb3ctbGVmdFwiKS5tYWduaWZpY1BvcHVwKFwicHJldlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IDUwXG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgaWYoJCgnLnNwZWNpYWxpc3RzLWV4cGVyaWVuY2UnKS5sZW5ndGgpIHtcbiAgICAgICAgJCgnLnNwZWNpYWxpc3RzLWV4cGVyaWVuY2UnKS5tYXRjaEhlaWdodCh7XG4gICAgICAgICAgICBieVJvdzogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHNjcm9sbFRvcFxuICAgICQoJy51cF9idXR0b24nKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAkKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAwIH0sIDEwMDApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICAkKCcuYnVyZ2VyLW1lbnUnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAkKCcubWVudV9faWNvbicpLnRvZ2dsZUNsYXNzKCdvcGVuJyk7XG4gICAgICAgJCgnLmhlYWRlci1tZW51JykudG9nZ2xlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAkKCdib2R5JykudG9nZ2xlQ2xhc3MoJ292ZXJmbG93Jyk7XG4gICAgICAgJCgnaHRtbCcpLnRvZ2dsZUNsYXNzKCdub3Qtb3ZlcmZsb3cnKTtcbiAgIH0pO1xuXG4gICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmhlYWRlci1tZW51Lm9wZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAkKCcubWVudV9faWNvbicpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4gICAgICAgJCgnLmhlYWRlci1tZW51JykucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ292ZXJmbG93Jyk7XG4gICAgICAgJCgnaHRtbCcpLnJlbW92ZUNsYXNzKCdub3Qtb3ZlcmZsb3cnKTtcbiAgIH0pO1xuXG4gICAkKCcuaGVhZGVyLW1lbnUtd3JhcCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgfSlcblxuICAgIC8vL2FkbWluIGltZ1xuICAgIHZhciBhZG1pbkltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZGVzY3JpcHRpb25cIik7XG4gICAgaWYgKGFkbWluSW1nKSB7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYWRtaW5JbWcsIGZ1bmN0aW9uICh3cmFwcGVyLCBpKSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2VzID0gd3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nXCIpO1xuICAgICAgICAgICAgaWYgKGltYWdlcykge1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoaW1hZ2VzLCBmdW5jdGlvbiAoaW1nLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsb2F0ID0gaW1nLnN0eWxlLmZsb2F0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmxvYXQgPT0gXCJsZWZ0XCIpIGltZy5jbGFzc0xpc3QuYWRkKFwibWFyZ2luLWxlZnQtbm9uZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmxvYXQgPT0gXCJyaWdodFwiKSBpbWcuY2xhc3NMaXN0LmFkZChcIm1hcmdpbi1yaWdodC1ub25lXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gdGFic1xuICAgIGlmICgkKCcucHJpY2UtcGFnZScpLmxlbmd0aCkge1xuICAgICAgICBpbml0UHJpY2VUYWJzKCk7XG4gICAgfVxuXG4gICAgaWYgKCQoJy5zZWFyY2hfcGFnZScpLmxlbmd0aCB8fCAkKCcub2ZmZXJzLXRhYicpLmxlbmd0aCkge1xuICAgICAgICBpbml0U2VhcmNoVGFicygpO1xuICAgIH1cblxuICAgICQoXCIuYWN0aXZlLXRhYi1tb2JpbGVcIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgJChcIi50YWJzXCIpLnNsaWRlVG9nZ2xlKCk7XG4gICAgfSlcblxuICAgIC8vIHNlbGVjdHJpYyBpbml0XG4gICAgaWYoJCgnLnNlbGVjdHJpYycpLmxlbmd0aCkge1xuICAgICAgICAkKCcuc2VsZWN0cmljJykuc2VsZWN0cmljKHtcbiAgICAgICAgICAgIGRpc2FibGVPbk1vYmlsZTogZmFsc2UsXG4gICAgICAgICAgICBuYXRpdmVPbk1vYmlsZTogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gQ3VzdG9tU2Nyb2xsYmFyXG4gICAgaWYoJCgnLnNjcm9sbC1qcycpLmxlbmd0aCkge1xuICAgICAgICBpbml0U2Nyb2xsYmFyKCk7XG4gICAgfVxuXG4gICAgaWYoJCgnLnNjcm9sbC1ibnQtanMnKS5sZW5ndGgpIHtcbiAgICAgICAgJCgnLnNjcm9sbC1ibnQtanMnKS5jbGljayggZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBzY3JvbGxfZWwgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtaWQnKTtcbiAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAkKFwiLlwiK3Njcm9sbF9lbCkub2Zmc2V0KCkudG9wIC0gMzAgfSwgNTAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYoJCgnLnBvcHVwLWdhbGxlcnknKS5sZW5ndGgpIHtcbiAgICAgICAgJCgnLnBvcHVwLWdhbGxlcnknKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5tYWduaWZpY1BvcHVwKHtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogJ2EnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgICAgICAgICAgbWFpbkNsYXNzOiAnbWZwLWltZy1tb2JpbGUnLFxuICAgICAgICAgICAgICAgIGdhbGxlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVCeUltZ0NsaWNrOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkOiBbMCwxXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHBvc2l0aW9uIHN0aWNreVxuICAgIGlmKCQoJy5zdGlja3knKS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gJCgnLnN0aWNreScpO1xuICAgICAgICBTdGlja3lmaWxsLmFkZChlbGVtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gICBvcGVuIHNlYXJjaCBtb2RhbFxuICAgICQoJy5oZWFkZXItc2VhcmNoLWJ0bicpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYnRuID0gJCh0aGlzKTtcbiAgICAgICAgaWYgKGJ0bi5oYXNDbGFzcygnYWN0aXZlJykpIHtcbiAgICAgICAgICAgIGJ0bi5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAkKCcuc2VhcmNoLWRyb3Bkb3duJykuc2xpZGVVcCgyMDApO1xuICAgICAgICAgICAgJCgnLm92ZXJsYXknKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAkKCcub3ZlcmxheS5hY3RpdmUnKS51bmJpbmQoJ2NsaWNrJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidG4uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJCgnLnNlYXJjaC1kcm9wZG93bicpLnNsaWRlRG93bigyMDApO1xuICAgICAgICAgICAgJCgnLm92ZXJsYXknKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKFwiLnNlYXJjaC1pbnB1dFwiKS5mb2N1cygpO1xuXG4gICAgICAgICAgICAkKFwiLm92ZXJsYXkuYWN0aXZlXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5pcyhcIi5vdmVybGF5LmFjdGl2ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBidG4ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAkKCcuc2VhcmNoLWRyb3Bkb3duJykuc2xpZGVVcCgyMDApO1xuICAgICAgICAgICAgICAgICAgICAkKCcub3ZlcmxheScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLm92ZXJsYXkuYWN0aXZlJykudW5iaW5kKCdjbGljaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAzMDApO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uZSgna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHtcbiAgICAgICAgICAgICAgICBidG4ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICQoJy5zZWFyY2gtZHJvcGRvd24nKS5zbGlkZVVwKDIwMCk7XG4gICAgICAgICAgICAgICAgJCgnLm92ZXJsYXknKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgJCgnLm92ZXJsYXkuYWN0aXZlJykudW5iaW5kKCdjbGljaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHBvbGlmaWwgb2JqZWN0LWZpdFxuICAgIGlmKCQoJy5vYmplY3QtZml0LWpzJykubGVuZ3RoKSB7XG4gICAgICAgdmFyIHNvbWVJbWFnZXMgPSAkKCcub2JqZWN0LWZpdC1qcycpO1xuICAgICAgIG9iamVjdEZpdFBvbHlmaWxsKHNvbWVJbWFnZXMpO1xuICAgIH1cblxuICAgIC8vIG9wZW4gYWxsIHByaWNlXG4gICAgaWYoJCgnLmFsbF9wcmljZV9qcycpLmxlbmd0aCkge1xuICAgICAgICAkKCcuYWxsX3ByaWNlX2pzJykuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHByaWNlX2xpc3QgPSAkKHRoaXMpLnByZXYoKTtcbiAgICAgICAgICAgIHByaWNlX2xpc3QuZmluZCgnLnByaWNlLWl0ZW06bm90KC52aXNpYmxlKScpLnNsaWRlVG9nZ2xlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHByaWNlX2xpc3QuZmluZCgnbGk6bm90KC52aXNpYmxlKScpLnRvZ2dsZUNsYXNzKCdoaWRlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy52aXNpYmxlLXRleHQnKS50b2dnbGVDbGFzcygndGV4dC1oaWRlJyk7XG4gICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCcuaGlkZS10ZXh0JykudG9nZ2xlQ2xhc3MoJ3RleHQtaGlkZScpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBvcGVuIGFsbCBkaXBsb21zXG4gICAgaWYoJCgnLmFsbF9kaXBsb21zX2pzJykubGVuZ3RoKSB7XG4gICAgICAgICQoJy5hbGxfZGlwbG9tc19qcycpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBkaXBsb21zX2xpc3QgPSAkKHRoaXMpLnByZXYoKTtcbiAgICAgICAgICAgIGRpcGxvbXNfbGlzdC5maW5kKCcuZ2FsbGVyeS1pdGVtOm5vdCgudmlzaWJsZSknKS5zbGlkZVRvZ2dsZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkaXBsb21zX2xpc3QuZmluZCgnYTpub3QoLnZpc2libGUpJykudG9nZ2xlQ2xhc3MoJ2hpZGUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJCh0aGlzKS5jaGlsZHJlbignLnZpc2libGUtdGV4dCcpLnRvZ2dsZUNsYXNzKCd0ZXh0LWhpZGUnKTtcbiAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy5oaWRlLXRleHQnKS50b2dnbGVDbGFzcygndGV4dC1oaWRlJyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vICBmYXEgYWNjb3JkZW9uXG4gICAgaWYoJCgnLmZhcS1xdWVzdGlvbicpLmxlbmd0aCkge1xuICAgICAgICAkKCcuZmFxLXF1ZXN0aW9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHN1Ym1lbnUgPSAkKHRoaXMpLmNsb3Nlc3QoJy5mYXEtaXRlbScpLmZpbmQoJy5mYXEtYW5zd2VyJyk7XG4gICAgICAgICAgICB2YXIgaWNvbiA9ICAkKHRoaXMpLmNsb3Nlc3QoJy5mYXEtaXRlbScpLmZpbmQoJy5mYXEtaWNvbicpO1xuICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICBpZigkKHRoaXMpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgIGljb24uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIHN1Ym1lbnUuc2xpZGVEb3duKDIwMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGljb24ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIHN1Ym1lbnUuc2xpZGVVcCgyMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyAgZGVzY3JpcHRpb24gc3BvaWxlclxuICAgIGlmKCQoJy5zcG9pbGVyJykubGVuZ3RoKSB7XG4gICAgICAgICQoJy5zcG9pbGVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHN1Ym1lbnUgPSAkKHRoaXMpLmZpbmQoJy5zcG9pbGVyLWNvbnRlbnQnKTtcbiAgICAgICAgICAgIHZhciBpY29uID0gICQodGhpcykuZmluZCgnLnNwb2lsZXItdG9nZ2xlJyk7XG4gICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIGlmKCQodGhpcykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgaWNvbi5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgc3VibWVudS5zbGlkZURvd24oMjAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWNvbi5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgc3VibWVudS5zbGlkZVVwKDIwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxufSk7XG5cblxuJCh3aW5kb3cpLm9uKCdsb2FkIHJlc2l6ZScsIGZ1bmN0aW9uKCkge1xuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMjUpIHtcbiAgICAgICAgLy8gZm9yIGhlYWRlciBzdWJtZW51IHNlcnZpY2VzXG4gICAgICAgIGlmKCEkKCcuaGFzLXN1Ym1lbnUtc2VydmljZXMgLmhlYWRlci1tZW51LWxpbmsnKS5oYXNDbGFzcygnaGVhZGVyLW1lbnUtbGluay1qcycpKSB7XG4gICAgICAgICAgICAkKCcuaGFzLXN1Ym1lbnUtc2VydmljZXMgLmhlYWRlci1tZW51LWxpbmsnKS5hZGRDbGFzcygnaGVhZGVyLW1lbnUtbGluay1qcycpO1xuXG4gICAgICAgICAgICAkKCcuaGVhZGVyLW1lbnUtbGluay1qcycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3VibWVudSA9ICQodGhpcykuY2xvc2VzdCgnLmhhcy1zdWJtZW51LXNlcnZpY2VzJykuZmluZCgnLmhlYWRlci1zdWJtZW51LXNlcnZpY2VzLXdyYXAnKTtcbiAgICAgICAgICAgICAgICAgaWYoISQodGhpcykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgIHN1Ym1lbnUuc2xpZGVEb3duKDIwMCk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgIHN1Ym1lbnUuc2xpZGVVcCgyMDApO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCEkKCcuaGVhZGVyLXN1Ym1lbnUtc2VydmljZXMtdGl0bGUnKS5oYXNDbGFzcygnc3VibWVudS1zZXJ2aWNlcy1qcycpKSB7XG4gICAgICAgICAgICAkKCcuaGVhZGVyLXN1Ym1lbnUtc2VydmljZXMtdGl0bGUnKS5hZGRDbGFzcygnc3VibWVudS1zZXJ2aWNlcy1qcycpO1xuXG4gICAgICAgICAgICAkKCcuc3VibWVudS1zZXJ2aWNlcy1qcycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VibWVudSA9ICQodGhpcykuY2xvc2VzdCgnLmhlYWRlci1zdWJtZW51LXNlcnZpY2VzLWl0ZW0nKS5maW5kKCcuaGVhZGVyLXN1Ym1lbnUtc2VydmljZXMtbGlzdCcpO1xuICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGlmKCQodGhpcykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ym1lbnUuc2xpZGVEb3duKDIwMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWVudS5zbGlkZVVwKDIwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gcmVtb3ZlIHBvc2l0aW9uIHN0aWNreSB3aXRoIG92ZXJmbG93IGhpZGRlblxuICAgICAgICBpZigkKCcuc3RpY2t5LXdpdGgtaGlkZW4nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9ICQoJy5zdGlja3ktd2l0aC1oaWRlbicpO1xuICAgICAgICAgICAgU3RpY2t5ZmlsbC5yZW1vdmUoZWxlbWVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoJCgnLnVuaXQtYmxvY2staW1nJykubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdW5pdEltZyA9ICQoJy51bml0LWJsb2NrLWltZy13cmFwIC51bml0LWJsb2NrLWltZycpO1xuICAgICAgICAgICAgdW5pdEltZy5pbnNlcnRBZnRlciggJCggXCIudW5pdC1ibG9jay10aXRsZS1qc1wiICkgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCQoJy5zY3JvbGwtanMnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICgkKCcuc2Nyb2xsLWpzJykuaGFzQ2xhc3MoJ21DdXN0b21TY3JvbGxiYXInKSkge1xuICAgICAgICAgICAgICAgICQoJy5zY3JvbGwtanMnKS5tQ3VzdG9tU2Nyb2xsYmFyKFwiZGVzdHJveVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCQoJy50YWJzJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAkKCcudGFicycpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpID0gJCh0aGlzKS5maW5kKCdsaScpLnJlbW92ZUNsYXNzKCd0YWItbGluaycpLmFkZENsYXNzKCd0YWItbW9iaWxlLWxpbmsnKTtcbiAgICAgICAgICAgICAgICBpZiAobGkuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlX3RhYiA9ICQodGhpcykuZmluZCgnLnRhYi1tb2JpbGUtbGluaycpLmZpcnN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJzX2NvbnRhaW5lciA9ICQodGhpcykuY2xvc2VzdCgnLnRhYnMtY29udGFpbmVyJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RUYWIgPSBhY3RpdmVfdGFiLmF0dHIoJ2RhdGEtdGFiJyk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZV90YWIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJChcIi5hY3RpdmUtdGFiLW1vYmlsZS10ZXh0XCIpLmh0bWwoJCgnLnRhYi1tb2JpbGUtbGluay5hY3RpdmUnKS50ZXh0KCkpO1xuICAgICAgICB9XG5cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGZvciBoZWFkZXIgc3VibWVudSBzZXJ2aWNlc1xuICAgICAgICBpZigkKCcuaGFzLXN1Ym1lbnUtc2VydmljZXMgLmhlYWRlci1tZW51LWxpbmsnKS5oYXNDbGFzcygnaGVhZGVyLW1lbnUtbGluay1qcycpKSB7XG4gICAgICAgICAgICAkKCcuaGVhZGVyLW1lbnUtbGluay1qcycpLnVuYmluZCgnY2xpY2snKTtcbiAgICAgICAgICAgICQoJy5oYXMtc3VibWVudS1zZXJ2aWNlcyAuaGVhZGVyLW1lbnUtbGluaycpLnJlbW92ZUNsYXNzKCdoZWFkZXItbWVudS1saW5rLWpzIGFjdGl2ZScpO1xuICAgICAgICAgICAgJCgnLmhlYWRlci1zdWJtZW51LXNlcnZpY2VzLXdyYXAnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZigkKCcuaGVhZGVyLXN1Ym1lbnUtc2VydmljZXMtdGl0bGUnKS5oYXNDbGFzcygnc3VibWVudS1zZXJ2aWNlcy1qcycpKSB7XG4gICAgICAgICAgICAkKCcuc3VibWVudS1zZXJ2aWNlcy1qcycpLnVuYmluZCgnY2xpY2snKTtcbiAgICAgICAgICAgICQoJy5oZWFkZXItc3VibWVudS1zZXJ2aWNlcy10aXRsZScpLnJlbW92ZUNsYXNzKCdzdWJtZW51LXNlcnZpY2VzLWpzJyk7XG4gICAgICAgICAgICAkKCcuaGVhZGVyLXN1Ym1lbnUtc2VydmljZXMtbGlzdCcpLmNzcygnZGlzcGxheScsICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJy5oZWFkZXItc3VibWVudS1zZXJ2aWNlcy10aXRsZScpLnVuYmluZCgnY2xpY2snKTtcblxuICAgICAgICAvLyBwb3NpdGlvbiBzdGlja3kgd2l0aCBvdmVyZmxvdyBoaWRkZW5cbiAgICAgICAgaWYoJCgnLnN0aWNreS13aXRoLWhpZGVuJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBTdGlja3lmaWxsLmZvcmNlU3RpY2t5KCk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSAkKCcuc3RpY2t5LXdpdGgtaGlkZW4nKTtcbiAgICAgICAgICAgIFN0aWNreWZpbGwuYWRkKGVsZW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCQoJy51bml0LWJsb2NrLWltZycpLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHVuaXRJbWcgPSAkKCcudW5pdC1ibG9jay1pbmZvIC51bml0LWJsb2NrLWltZycpO1xuICAgICAgICAgICAgdW5pdEltZy5hcHBlbmRUbyggJCggXCIuc3RpY2t5XCIgKSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBjdXN0b20gc2Nyb2xsIGZpbHRlciBibG9ja1xuXG4gICAgICAgICBpZigkKCcuc2Nyb2xsLWpzJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgaWYgKCQoJy5zY3JvbGwtanMnKS5oYXNDbGFzcygnbUNTX2Rlc3Ryb3llZCcpKSB7XG4gICAgICAgICAgICAgICAgIGluaXRTY3JvbGxiYXIoKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG5cbiAgICAgICAgIGlmKCQoJy50YWJzJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgJCgnLnRhYnMnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgICAgJCgnLnRhYnMnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICB2YXIgbGkgPSAkKHRoaXMpLmZpbmQoJ2xpJykucmVtb3ZlQ2xhc3MoJ3RhYi1tb2JpbGUtbGluaycpLmFkZENsYXNzKCd0YWItbGluaycpO1xuICAgICAgICAgICAgICAgICBpZiAobGkuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG5cbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmVfdGFiID0gJCh0aGlzKS5maW5kKCcudGFiLWxpbmsnKS5maXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYnNfY29udGFpbmVyID0gJCh0aGlzKS5jbG9zZXN0KCcudGFicy1jb250YWluZXInKTtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RUYWIgPSBhY3RpdmVfdGFiLmF0dHIoJ2RhdGEtdGFiJyk7XG4gICAgICAgICAgICAgICAgICAgICBhY3RpdmVfdGFiLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgfVxuXG4gICAgfVxuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDc2Nykge1xuICAgICAgICBpZigkKCcubWFpbi1zZWN0aW9uLXRpdGxlLXdyYXAgLmJ0bi1hcnJvdycpLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIG1vcmVMaW5rID0gJCgnLm1haW4tc2VjdGlvbi10aXRsZS13cmFwIC5idG4tYXJyb3cnKTtcbiAgICAgICAgICAgICQobW9yZUxpbmspLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gJCh0aGlzKS5jbG9zZXN0KCcubWFpbi1zZWN0aW9uJykuZmluZCgnLmJ0bi13cmFwJyk7XG4gICAgICAgICAgICAgICAgbG9jYXRpb24uYXBwZW5kKCQodGhpcykpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKCQoJy5idG4td3JhcCAuYnRuLWFycm93JykubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbW9yZUxpbmsgPSAkKCcuYnRuLXdyYXAgLmJ0bi1hcnJvdycpO1xuICAgICAgICAgICAgJChtb3JlTGluaykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSAkKHRoaXMpLmNsb3Nlc3QoJy5tYWluLXNlY3Rpb24nKS5maW5kKCcubWFpbi1zZWN0aW9uLXRpdGxlLXdyYXAnKTtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5hcHBlbmQoJCh0aGlzKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgNDAxKSB7XG4gICAgICAgIC8vINC+0YLQutC70Y7Rh9C10L3QuNC1INGA0LDRgdGH0LXRgtCwINCy0YvRgdGC0L7RgtGLXG4gICAgICAgIGlmICgkKCcuc3BlY2lhbC1hY3Rpb24taW5mbycpLmxlbmd0aCkge1xuICAgICAgICAgICAgJCgnLnNwZWNpYWwtYWN0aW9uLWluZm8nKS5tYXRjaEhlaWdodCh7IHJlbW92ZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vINCg0LDRgdGH0LXRgiDQstGL0YHRgtC+0YLRi1xuICAgICAgICBpZiAoJCgnLnNwZWNpYWwtYWN0aW9uLWluZm8nKS5sZW5ndGggJiYgISQoJy5zcGVjaWFsLWFjdGlvbi1pbmZvJykuYXR0cignc3R5bGUnKSkge1xuICAgICAgICAgICAgJCgnLnNwZWNpYWwtYWN0aW9uLWluZm8nKS5tYXRjaEhlaWdodCgpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cblxuLy8gc2Nyb2xsLWJ0blxuJCh3aW5kb3cpLm9uKCdsb2FkIHNjcm9sbCcsIGZ1bmN0aW9uKCl7XG4gICAgaWYgKCQodGhpcykuc2Nyb2xsVG9wKCkgPiAxMDApIHtcbiAgICAgICAgICQoJy51cF9idXR0b24nKS5hZGRDbGFzcyhcInZpc2libGVcIikuZmFkZUluKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgICQoJy51cF9idXR0b24nKS5yZW1vdmVDbGFzcyhcInZpc2libGVcIikuZmFkZU91dCgpO1xuICAgIH07XG59KTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGNhblVzZURPTSA9ICEhKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiZcbiAgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gY2FuVXNlRE9NOyIsIi8qKlxuKiBqcXVlcnktbWF0Y2gtaGVpZ2h0IDAuNy4yIGJ5IEBsaWFicnVcbiogaHR0cDovL2JybS5pby9qcXVlcnktbWF0Y2gtaGVpZ2h0L1xuKiBMaWNlbnNlOiBNSVRcbiovXG5cbjsoZnVuY3Rpb24oZmFjdG9yeSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLXNlbWlcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTURcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgLy8gQ29tbW9uSlNcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBHbG9iYWxcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKCQpIHtcbiAgICAvKlxuICAgICogIGludGVybmFsXG4gICAgKi9cblxuICAgIHZhciBfcHJldmlvdXNSZXNpemVXaWR0aCA9IC0xLFxuICAgICAgICBfdXBkYXRlVGltZW91dCA9IC0xO1xuXG4gICAgLypcbiAgICAqICBfcGFyc2VcbiAgICAqICB2YWx1ZSBwYXJzZSB1dGlsaXR5IGZ1bmN0aW9uXG4gICAgKi9cblxuICAgIHZhciBfcGFyc2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBwYXJzZSB2YWx1ZSBhbmQgY29udmVydCBOYU4gdG8gMFxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqICBfcm93c1xuICAgICogIHV0aWxpdHkgZnVuY3Rpb24gcmV0dXJucyBhcnJheSBvZiBqUXVlcnkgc2VsZWN0aW9ucyByZXByZXNlbnRpbmcgZWFjaCByb3dcbiAgICAqICAoYXMgZGlzcGxheWVkIGFmdGVyIGZsb2F0IHdyYXBwaW5nIGFwcGxpZWQgYnkgYnJvd3NlcilcbiAgICAqL1xuXG4gICAgdmFyIF9yb3dzID0gZnVuY3Rpb24oZWxlbWVudHMpIHtcbiAgICAgICAgdmFyIHRvbGVyYW5jZSA9IDEsXG4gICAgICAgICAgICAkZWxlbWVudHMgPSAkKGVsZW1lbnRzKSxcbiAgICAgICAgICAgIGxhc3RUb3AgPSBudWxsLFxuICAgICAgICAgICAgcm93cyA9IFtdO1xuXG4gICAgICAgIC8vIGdyb3VwIGVsZW1lbnRzIGJ5IHRoZWlyIHRvcCBwb3NpdGlvblxuICAgICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyICR0aGF0ID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICB0b3AgPSAkdGhhdC5vZmZzZXQoKS50b3AgLSBfcGFyc2UoJHRoYXQuY3NzKCdtYXJnaW4tdG9wJykpLFxuICAgICAgICAgICAgICAgIGxhc3RSb3cgPSByb3dzLmxlbmd0aCA+IDAgPyByb3dzW3Jvd3MubGVuZ3RoIC0gMV0gOiBudWxsO1xuXG4gICAgICAgICAgICBpZiAobGFzdFJvdyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGZpcnN0IGl0ZW0gb24gdGhlIHJvdywgc28ganVzdCBwdXNoIGl0XG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKCR0aGF0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHJvdyB0b3AgaXMgdGhlIHNhbWUsIGFkZCB0byB0aGUgcm93IGdyb3VwXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguZmxvb3IoTWF0aC5hYnMobGFzdFRvcCAtIHRvcCkpIDw9IHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgICAgICAgICByb3dzW3Jvd3MubGVuZ3RoIC0gMV0gPSBsYXN0Um93LmFkZCgkdGhhdCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHN0YXJ0IGEgbmV3IHJvdyBncm91cFxuICAgICAgICAgICAgICAgICAgICByb3dzLnB1c2goJHRoYXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgbGFzdCByb3cgdG9wXG4gICAgICAgICAgICBsYXN0VG9wID0gdG9wO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcm93cztcbiAgICB9O1xuXG4gICAgLypcbiAgICAqICBfcGFyc2VPcHRpb25zXG4gICAgKiAgaGFuZGxlIHBsdWdpbiBvcHRpb25zXG4gICAgKi9cblxuICAgIHZhciBfcGFyc2VPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgb3B0cyA9IHtcbiAgICAgICAgICAgIGJ5Um93OiB0cnVlLFxuICAgICAgICAgICAgcHJvcGVydHk6ICdoZWlnaHQnLFxuICAgICAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICAgICAgcmVtb3ZlOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZChvcHRzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBvcHRzLmJ5Um93ID0gb3B0aW9ucztcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zID09PSAncmVtb3ZlJykge1xuICAgICAgICAgICAgb3B0cy5yZW1vdmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdHM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKiAgbWF0Y2hIZWlnaHRcbiAgICAqICBwbHVnaW4gZGVmaW5pdGlvblxuICAgICovXG5cbiAgICB2YXIgbWF0Y2hIZWlnaHQgPSAkLmZuLm1hdGNoSGVpZ2h0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgb3B0cyA9IF9wYXJzZU9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAgICAgLy8gaGFuZGxlIHJlbW92ZVxuICAgICAgICBpZiAob3B0cy5yZW1vdmUpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGZpeGVkIGhlaWdodCBmcm9tIGFsbCBzZWxlY3RlZCBlbGVtZW50c1xuICAgICAgICAgICAgdGhpcy5jc3Mob3B0cy5wcm9wZXJ0eSwgJycpO1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgc2VsZWN0ZWQgZWxlbWVudHMgZnJvbSBhbGwgZ3JvdXBzXG4gICAgICAgICAgICAkLmVhY2gobWF0Y2hIZWlnaHQuX2dyb3VwcywgZnVuY3Rpb24oa2V5LCBncm91cCkge1xuICAgICAgICAgICAgICAgIGdyb3VwLmVsZW1lbnRzID0gZ3JvdXAuZWxlbWVudHMubm90KHRoYXQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IGNsZWFudXAgZW1wdHkgZ3JvdXBzXG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoIDw9IDEgJiYgIW9wdHMudGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhpcyBncm91cCBzbyB3ZSBjYW4gcmUtYXBwbHkgbGF0ZXIgb24gbG9hZCBhbmQgcmVzaXplIGV2ZW50c1xuICAgICAgICBtYXRjaEhlaWdodC5fZ3JvdXBzLnB1c2goe1xuICAgICAgICAgICAgZWxlbWVudHM6IHRoaXMsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG1hdGNoIGVhY2ggZWxlbWVudCdzIGhlaWdodCB0byB0aGUgdGFsbGVzdCBlbGVtZW50IGluIHRoZSBzZWxlY3Rpb25cbiAgICAgICAgbWF0Y2hIZWlnaHQuX2FwcGx5KHRoaXMsIG9wdHMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKlxuICAgICogIHBsdWdpbiBnbG9iYWwgb3B0aW9uc1xuICAgICovXG5cbiAgICBtYXRjaEhlaWdodC52ZXJzaW9uID0gJzAuNy4yJztcbiAgICBtYXRjaEhlaWdodC5fZ3JvdXBzID0gW107XG4gICAgbWF0Y2hIZWlnaHQuX3Rocm90dGxlID0gODA7XG4gICAgbWF0Y2hIZWlnaHQuX21haW50YWluU2Nyb2xsID0gZmFsc2U7XG4gICAgbWF0Y2hIZWlnaHQuX2JlZm9yZVVwZGF0ZSA9IG51bGw7XG4gICAgbWF0Y2hIZWlnaHQuX2FmdGVyVXBkYXRlID0gbnVsbDtcbiAgICBtYXRjaEhlaWdodC5fcm93cyA9IF9yb3dzO1xuICAgIG1hdGNoSGVpZ2h0Ll9wYXJzZSA9IF9wYXJzZTtcbiAgICBtYXRjaEhlaWdodC5fcGFyc2VPcHRpb25zID0gX3BhcnNlT3B0aW9ucztcblxuICAgIC8qXG4gICAgKiAgbWF0Y2hIZWlnaHQuX2FwcGx5XG4gICAgKiAgYXBwbHkgbWF0Y2hIZWlnaHQgdG8gZ2l2ZW4gZWxlbWVudHNcbiAgICAqL1xuXG4gICAgbWF0Y2hIZWlnaHQuX2FwcGx5ID0gZnVuY3Rpb24oZWxlbWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG9wdHMgPSBfcGFyc2VPcHRpb25zKG9wdGlvbnMpLFxuICAgICAgICAgICAgJGVsZW1lbnRzID0gJChlbGVtZW50cyksXG4gICAgICAgICAgICByb3dzID0gWyRlbGVtZW50c107XG5cbiAgICAgICAgLy8gdGFrZSBub3RlIG9mIHNjcm9sbCBwb3NpdGlvblxuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgaHRtbEhlaWdodCA9ICQoJ2h0bWwnKS5vdXRlckhlaWdodCh0cnVlKTtcblxuICAgICAgICAvLyBnZXQgaGlkZGVuIHBhcmVudHNcbiAgICAgICAgdmFyICRoaWRkZW5QYXJlbnRzID0gJGVsZW1lbnRzLnBhcmVudHMoKS5maWx0ZXIoJzpoaWRkZW4nKTtcblxuICAgICAgICAvLyBjYWNoZSB0aGUgb3JpZ2luYWwgaW5saW5lIHN0eWxlXG4gICAgICAgICRoaWRkZW5QYXJlbnRzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJHRoYXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgJHRoYXQuZGF0YSgnc3R5bGUtY2FjaGUnLCAkdGhhdC5hdHRyKCdzdHlsZScpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdGVtcG9yYXJpbHkgbXVzdCBmb3JjZSBoaWRkZW4gcGFyZW50cyB2aXNpYmxlXG4gICAgICAgICRoaWRkZW5QYXJlbnRzLmNzcygnZGlzcGxheScsICdibG9jaycpO1xuXG4gICAgICAgIC8vIGdldCByb3dzIGlmIHVzaW5nIGJ5Um93LCBvdGhlcndpc2UgYXNzdW1lIG9uZSByb3dcbiAgICAgICAgaWYgKG9wdHMuYnlSb3cgJiYgIW9wdHMudGFyZ2V0KSB7XG5cbiAgICAgICAgICAgIC8vIG11c3QgZmlyc3QgZm9yY2UgYW4gYXJiaXRyYXJ5IGVxdWFsIGhlaWdodCBzbyBmbG9hdGluZyBlbGVtZW50cyBicmVhayBldmVubHlcbiAgICAgICAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciAkdGhhdCA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSAkdGhhdC5jc3MoJ2Rpc3BsYXknKTtcblxuICAgICAgICAgICAgICAgIC8vIHRlbXBvcmFyaWx5IGZvcmNlIGEgdXNhYmxlIGRpc3BsYXkgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoZGlzcGxheSAhPT0gJ2lubGluZS1ibG9jaycgJiYgZGlzcGxheSAhPT0gJ2ZsZXgnICYmIGRpc3BsYXkgIT09ICdpbmxpbmUtZmxleCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY2FjaGUgdGhlIG9yaWdpbmFsIGlubGluZSBzdHlsZVxuICAgICAgICAgICAgICAgICR0aGF0LmRhdGEoJ3N0eWxlLWNhY2hlJywgJHRoYXQuYXR0cignc3R5bGUnKSk7XG5cbiAgICAgICAgICAgICAgICAkdGhhdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6IGRpc3BsYXksXG4gICAgICAgICAgICAgICAgICAgICdwYWRkaW5nLXRvcCc6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmctYm90dG9tJzogJzAnLFxuICAgICAgICAgICAgICAgICAgICAnbWFyZ2luLXRvcCc6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgJ21hcmdpbi1ib3R0b20nOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgICdib3JkZXItdG9wLXdpZHRoJzogJzAnLFxuICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLWJvdHRvbS13aWR0aCc6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDBweCcsXG4gICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBhcnJheSBvZiByb3dzIChiYXNlZCBvbiBlbGVtZW50IHRvcCBwb3NpdGlvbilcbiAgICAgICAgICAgIHJvd3MgPSBfcm93cygkZWxlbWVudHMpO1xuXG4gICAgICAgICAgICAvLyByZXZlcnQgb3JpZ2luYWwgaW5saW5lIHN0eWxlc1xuICAgICAgICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyICR0aGF0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAkdGhhdC5hdHRyKCdzdHlsZScsICR0aGF0LmRhdGEoJ3N0eWxlLWNhY2hlJykgfHwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAkLmVhY2gocm93cywgZnVuY3Rpb24oa2V5LCByb3cpIHtcbiAgICAgICAgICAgIHZhciAkcm93ID0gJChyb3cpLFxuICAgICAgICAgICAgICAgIHRhcmdldEhlaWdodCA9IDA7XG5cbiAgICAgICAgICAgIGlmICghb3B0cy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBza2lwIGFwcGx5IHRvIHJvd3Mgd2l0aCBvbmx5IG9uZSBpdGVtXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuYnlSb3cgJiYgJHJvdy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAkcm93LmNzcyhvcHRzLnByb3BlcnR5LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpdGVyYXRlIHRoZSByb3cgYW5kIGZpbmQgdGhlIG1heCBoZWlnaHRcbiAgICAgICAgICAgICAgICAkcm93LmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0aGF0ID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gJHRoYXQuYXR0cignc3R5bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSAkdGhhdC5jc3MoJ2Rpc3BsYXknKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyB0ZW1wb3JhcmlseSBmb3JjZSBhIHVzYWJsZSBkaXNwbGF5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5ICE9PSAnaW5saW5lLWJsb2NrJyAmJiBkaXNwbGF5ICE9PSAnZmxleCcgJiYgZGlzcGxheSAhPT0gJ2lubGluZS1mbGV4Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgd2UgZ2V0IHRoZSBjb3JyZWN0IGFjdHVhbCBoZWlnaHQgKGFuZCBub3QgYSBwcmV2aW91c2x5IHNldCBoZWlnaHQgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIHZhciBjc3MgPSB7ICdkaXNwbGF5JzogZGlzcGxheSB9O1xuICAgICAgICAgICAgICAgICAgICBjc3Nbb3B0cy5wcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgJHRoYXQuY3NzKGNzcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgbWF4IGhlaWdodCAoaW5jbHVkaW5nIHBhZGRpbmcsIGJ1dCBub3QgbWFyZ2luKVxuICAgICAgICAgICAgICAgICAgICBpZiAoJHRoYXQub3V0ZXJIZWlnaHQoZmFsc2UpID4gdGFyZ2V0SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRIZWlnaHQgPSAkdGhhdC5vdXRlckhlaWdodChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyByZXZlcnQgc3R5bGVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRoYXQuYXR0cignc3R5bGUnLCBzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGhhdC5jc3MoJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGFyZ2V0IHNldCwgdXNlIHRoZSBoZWlnaHQgb2YgdGhlIHRhcmdldCBlbGVtZW50XG4gICAgICAgICAgICAgICAgdGFyZ2V0SGVpZ2h0ID0gb3B0cy50YXJnZXQub3V0ZXJIZWlnaHQoZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpdGVyYXRlIHRoZSByb3cgYW5kIGFwcGx5IHRoZSBoZWlnaHQgdG8gYWxsIGVsZW1lbnRzXG4gICAgICAgICAgICAkcm93LmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgJHRoYXQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbFBhZGRpbmcgPSAwO1xuXG4gICAgICAgICAgICAgICAgLy8gZG9uJ3QgYXBwbHkgdG8gYSB0YXJnZXRcbiAgICAgICAgICAgICAgICBpZiAob3B0cy50YXJnZXQgJiYgJHRoYXQuaXMob3B0cy50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgcGFkZGluZyBhbmQgYm9yZGVyIGNvcnJlY3RseSAocmVxdWlyZWQgd2hlbiBub3QgdXNpbmcgYm9yZGVyLWJveClcbiAgICAgICAgICAgICAgICBpZiAoJHRoYXQuY3NzKCdib3gtc2l6aW5nJykgIT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbFBhZGRpbmcgKz0gX3BhcnNlKCR0aGF0LmNzcygnYm9yZGVyLXRvcC13aWR0aCcpKSArIF9wYXJzZSgkdGhhdC5jc3MoJ2JvcmRlci1ib3R0b20td2lkdGgnKSk7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsUGFkZGluZyArPSBfcGFyc2UoJHRoYXQuY3NzKCdwYWRkaW5nLXRvcCcpKSArIF9wYXJzZSgkdGhhdC5jc3MoJ3BhZGRpbmctYm90dG9tJykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgaGVpZ2h0IChhY2NvdW50aW5nIGZvciBwYWRkaW5nIGFuZCBib3JkZXIpXG4gICAgICAgICAgICAgICAgJHRoYXQuY3NzKG9wdHMucHJvcGVydHksICh0YXJnZXRIZWlnaHQgLSB2ZXJ0aWNhbFBhZGRpbmcpICsgJ3B4Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmV2ZXJ0IGhpZGRlbiBwYXJlbnRzXG4gICAgICAgICRoaWRkZW5QYXJlbnRzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJHRoYXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgJHRoYXQuYXR0cignc3R5bGUnLCAkdGhhdC5kYXRhKCdzdHlsZS1jYWNoZScpIHx8IG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbiBpZiBlbmFibGVkXG4gICAgICAgIGlmIChtYXRjaEhlaWdodC5fbWFpbnRhaW5TY3JvbGwpIHtcbiAgICAgICAgICAgICQod2luZG93KS5zY3JvbGxUb3AoKHNjcm9sbFRvcCAvIGh0bWxIZWlnaHQpICogJCgnaHRtbCcpLm91dGVySGVpZ2h0KHRydWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKlxuICAgICogIG1hdGNoSGVpZ2h0Ll9hcHBseURhdGFBcGlcbiAgICAqICBhcHBsaWVzIG1hdGNoSGVpZ2h0IHRvIGFsbCBlbGVtZW50cyB3aXRoIGEgZGF0YS1tYXRjaC1oZWlnaHQgYXR0cmlidXRlXG4gICAgKi9cblxuICAgIG1hdGNoSGVpZ2h0Ll9hcHBseURhdGFBcGkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGdyb3VwcyA9IHt9O1xuXG4gICAgICAgIC8vIGdlbmVyYXRlIGdyb3VwcyBieSB0aGVpciBncm91cElkIHNldCBieSBlbGVtZW50cyB1c2luZyBkYXRhLW1hdGNoLWhlaWdodFxuICAgICAgICAkKCdbZGF0YS1tYXRjaC1oZWlnaHRdLCBbZGF0YS1taF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICBncm91cElkID0gJHRoaXMuYXR0cignZGF0YS1taCcpIHx8ICR0aGlzLmF0dHIoJ2RhdGEtbWF0Y2gtaGVpZ2h0Jyk7XG5cbiAgICAgICAgICAgIGlmIChncm91cElkIGluIGdyb3Vwcykge1xuICAgICAgICAgICAgICAgIGdyb3Vwc1tncm91cElkXSA9IGdyb3Vwc1tncm91cElkXS5hZGQoJHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBncm91cHNbZ3JvdXBJZF0gPSAkdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYXBwbHkgbWF0Y2hIZWlnaHQgdG8gZWFjaCBncm91cFxuICAgICAgICAkLmVhY2goZ3JvdXBzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWF0Y2hIZWlnaHQodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKlxuICAgICogIG1hdGNoSGVpZ2h0Ll91cGRhdGVcbiAgICAqICB1cGRhdGVzIG1hdGNoSGVpZ2h0IG9uIGFsbCBjdXJyZW50IGdyb3VwcyB3aXRoIHRoZWlyIGNvcnJlY3Qgb3B0aW9uc1xuICAgICovXG5cbiAgICB2YXIgX3VwZGF0ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmIChtYXRjaEhlaWdodC5fYmVmb3JlVXBkYXRlKSB7XG4gICAgICAgICAgICBtYXRjaEhlaWdodC5fYmVmb3JlVXBkYXRlKGV2ZW50LCBtYXRjaEhlaWdodC5fZ3JvdXBzKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQuZWFjaChtYXRjaEhlaWdodC5fZ3JvdXBzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG1hdGNoSGVpZ2h0Ll9hcHBseSh0aGlzLmVsZW1lbnRzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hIZWlnaHQuX2FmdGVyVXBkYXRlKSB7XG4gICAgICAgICAgICBtYXRjaEhlaWdodC5fYWZ0ZXJVcGRhdGUoZXZlbnQsIG1hdGNoSGVpZ2h0Ll9ncm91cHMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG1hdGNoSGVpZ2h0Ll91cGRhdGUgPSBmdW5jdGlvbih0aHJvdHRsZSwgZXZlbnQpIHtcbiAgICAgICAgLy8gcHJldmVudCB1cGRhdGUgaWYgZmlyZWQgZnJvbSBhIHJlc2l6ZSBldmVudFxuICAgICAgICAvLyB3aGVyZSB0aGUgdmlld3BvcnQgd2lkdGggaGFzbid0IGFjdHVhbGx5IGNoYW5nZWRcbiAgICAgICAgLy8gZml4ZXMgYW4gZXZlbnQgbG9vcGluZyBidWcgaW4gSUU4XG4gICAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAncmVzaXplJykge1xuICAgICAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICBpZiAod2luZG93V2lkdGggPT09IF9wcmV2aW91c1Jlc2l6ZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3ByZXZpb3VzUmVzaXplV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRocm90dGxlIHVwZGF0ZXNcbiAgICAgICAgaWYgKCF0aHJvdHRsZSkge1xuICAgICAgICAgICAgX3VwZGF0ZShldmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoX3VwZGF0ZVRpbWVvdXQgPT09IC0xKSB7XG4gICAgICAgICAgICBfdXBkYXRlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZShldmVudCk7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZVRpbWVvdXQgPSAtMTtcbiAgICAgICAgICAgIH0sIG1hdGNoSGVpZ2h0Ll90aHJvdHRsZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAqICBiaW5kIGV2ZW50c1xuICAgICovXG5cbiAgICAvLyBhcHBseSBvbiBET00gcmVhZHkgZXZlbnRcbiAgICAkKG1hdGNoSGVpZ2h0Ll9hcHBseURhdGFBcGkpO1xuXG4gICAgLy8gdXNlIG9uIG9yIGJpbmQgd2hlcmUgc3VwcG9ydGVkXG4gICAgdmFyIG9uID0gJC5mbi5vbiA/ICdvbicgOiAnYmluZCc7XG5cbiAgICAvLyB1cGRhdGUgaGVpZ2h0cyBvbiBsb2FkIGFuZCByZXNpemUgZXZlbnRzXG4gICAgJCh3aW5kb3cpW29uXSgnbG9hZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIG1hdGNoSGVpZ2h0Ll91cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICB9KTtcblxuICAgIC8vIHRocm90dGxlZCB1cGRhdGUgaGVpZ2h0cyBvbiByZXNpemUgZXZlbnRzXG4gICAgJCh3aW5kb3cpW29uXSgncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgbWF0Y2hIZWlnaHQuX3VwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgfSk7XG5cbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgncmVkdWNlJywgeyAxOiAwIH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My41LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIwLTA1LTA0VDIyOjQ5WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjUuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNVxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMC0wMy0xNFxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggcHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSAxMSssIEVkZ2UgMTIgLSAxOCssIENocm9tZSA8PTE2IC0gMjUgb25seSwgRmlyZWZveCA8PTMuNiAtIDMxIG9ubHksXG5cdC8vIFNhZmFyaSA0IC0gNSBvbmx5LCBPcGVyYSA8PTExLjYgLSAxMi54IG9ubHlcblx0Ly8gSUUvRWRnZSAmIG9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjAgb25seVxuXHQvLyBTYWZhcmkgNi4wIHN1cHBvcnRzIDpzY29wZSBidXQgaXQncyBhbiBhbGlhcyBvZiA6cm9vdCB0aGVyZS5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXHRcdHJldHVybiB0eXBlb2YgZWwucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0IWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiICk7XG5cdH0gKTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCggXCJcIiApICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCIqXCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFsgXCJUQUdcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbIFwiQ0xBU1NcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoICggc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSApICkge1xuXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaW5wdXQ7XG5cblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlttc2FsbG93Y2FwdHVyZV49JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9My42IC0gNSBvbmx5XG5cdFx0XHQvLyBPbGQgRmlyZWZveCBkb2Vzbid0IHRocm93IG9uIGEgYmFkbHktZXNjYXBlZCBpZGVudGlmaWVyLlxuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCJcXFxcXFxmXCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIltcXFxcclxcXFxuXFxcXGZdXCIgKTtcblx0XHR9ICk7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmVuYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEwIC0gMTEgb25seVxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiKiw6eFwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIsLio6XCIgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoICggbWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yICkgKSApICkge1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSApO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoICggYiA9IGIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdHJldHVybiBhID09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbIGkgXSA9PT0gYnBbIGkgXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFsgaSBdLCBicFsgaSBdICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdGFwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fFxuXHRcdFx0XHRtYXRjaFsgNSBdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByWyBcIkNISUxEXCIgXS50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFx0XCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJiBjbGFzc0NhY2hlKFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG5cdFx0XHRcdCggIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1sgXCJlbXB0eVwiIF0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1sgXCJudGhcIiBdID0gRXhwci5wc2V1ZG9zWyBcImVxXCIgXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyhcblx0XHRcdFx0c2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsXG5cdFx0XHRcdFtdXG5cdFx0XHQpLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdHRva2Vuc1xuXHRcdFx0XHRcdFx0LnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kWyBcIlRBR1wiIF0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKFxuXHRcdFx0c2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKVxuXHRcdCk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFsgXCJJRFwiIF0oIHRva2VuLm1hdGNoZXNbIDAgXVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSwgY29udGV4dCApIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbIFwibmVlZHNDb250ZXh0XCIgXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIiNcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgX25hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT0gbnVsbDtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0gKTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSApKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHhcIjtcblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQgKSA+IDM7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmIGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy50b3AgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLnRvcCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy5sZWZ0ID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy5sZWZ0ICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjQuMVxuICogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvMy40L2phdmFzY3JpcHQvI21vZGFsc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIE1PREFMIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBNb2RhbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpXG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRkaWFsb2cgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKVxuICAgIHRoaXMuJGJhY2tkcm9wID0gbnVsbFxuICAgIHRoaXMuaXNTaG93biA9IG51bGxcbiAgICB0aGlzLm9yaWdpbmFsQm9keVBhZCA9IG51bGxcbiAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gMFxuICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG4gICAgdGhpcy5maXhlZENvbnRlbnQgPSAnLm5hdmJhci1maXhlZC10b3AsIC5uYXZiYXItZml4ZWQtYm90dG9tJ1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmZpbmQoJy5tb2RhbC1jb250ZW50JylcbiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxuICAgICAgICB9LCB0aGlzKSlcbiAgICB9XG4gIH1cblxuICBNb2RhbC5WRVJTSU9OID0gJzMuNC4xJ1xuXG4gIE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDBcbiAgTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIE1vZGFsLkRFRkFVTFRTID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKHRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IHRydWVcblxuICAgIHRoaXMuY2hlY2tTY3JvbGxiYXIoKVxuICAgIHRoaXMuc2V0U2Nyb2xsYmFyKClcbiAgICB0aGlzLiRib2R5LmFkZENsYXNzKCdtb2RhbC1vcGVuJylcblxuICAgIHRoaXMuZXNjYXBlKClcbiAgICB0aGlzLnJlc2l6ZSgpXG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsICQucHJveHkodGhpcy5oaWRlLCB0aGlzKSlcblxuICAgIHRoaXMuJGRpYWxvZy5vbignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRlbGVtZW50Lm9uZSgnbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoYXQuJGVsZW1lbnQpKSB0aGF0Lmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhhdC4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpXG5cbiAgICAgIGlmICghdGhhdC4kZWxlbWVudC5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudC5hcHBlbmRUbyh0aGF0LiRib2R5KSAvLyBkb24ndCBtb3ZlIG1vZGFscyBkb20gcG9zaXRpb25cbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAuc2hvdygpXG4gICAgICAgIC5zY3JvbGxUb3AoMClcblxuICAgICAgdGhhdC5hZGp1c3REaWFsb2coKVxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB0aGF0LiRlbGVtZW50WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgfVxuXG4gICAgICB0aGF0LiRlbGVtZW50LmFkZENsYXNzKCdpbicpXG5cbiAgICAgIHRoYXQuZW5mb3JjZUZvY3VzKClcblxuICAgICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93bi5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgICAgdHJhbnNpdGlvbiA/XG4gICAgICAgIHRoYXQuJGRpYWxvZyAvLyB3YWl0IGZvciBtb2RhbCB0byBzbGlkZSBpblxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgZSA9ICQuRXZlbnQoJ2hpZGUuYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoIXRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IGZhbHNlXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgJChkb2N1bWVudCkub2ZmKCdmb2N1c2luLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnaW4nKVxuICAgICAgLm9mZignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgICAub2ZmKCdtb3VzZXVwLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZGlhbG9nLm9mZignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eSh0aGlzLmhpZGVNb2RhbCwgdGhpcykpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICB0aGlzLmhpZGVNb2RhbCgpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICQoZG9jdW1lbnQpXG4gICAgICAub2ZmKCdmb2N1c2luLmJzLm1vZGFsJykgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4gICAgICAub24oJ2ZvY3VzaW4uYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChkb2N1bWVudCAhPT0gZS50YXJnZXQgJiZcbiAgICAgICAgICB0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJlxuICAgICAgICAgICF0aGlzLiRlbGVtZW50LmhhcyhlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVzY2FwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5rZXlib2FyZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLndoaWNoID09IDI3ICYmIHRoaXMuaGlkZSgpXG4gICAgICB9LCB0aGlzKSlcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTaG93bikge1xuICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuYnMubW9kYWwnLCAkLnByb3h5KHRoaXMuaGFuZGxlVXBkYXRlLCB0aGlzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLmJzLm1vZGFsJylcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZU1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRib2R5LnJlbW92ZUNsYXNzKCdtb2RhbC1vcGVuJylcbiAgICAgIHRoYXQucmVzZXRBZGp1c3RtZW50cygpXG4gICAgICB0aGF0LnJlc2V0U2Nyb2xsYmFyKClcbiAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignaGlkZGVuLmJzLm1vZGFsJylcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJhY2tkcm9wICYmIHRoaXMuJGJhY2tkcm9wLnJlbW92ZSgpXG4gICAgdGhpcy4kYmFja2Ryb3AgPSBudWxsXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuYmFja2Ryb3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgYW5pbWF0ZSA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/ICdmYWRlJyA6ICcnXG5cbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgdmFyIGRvQW5pbWF0ZSA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIGFuaW1hdGVcblxuICAgICAgdGhpcy4kYmFja2Ryb3AgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgICAgICAuYWRkQ2xhc3MoJ21vZGFsLWJhY2tkcm9wICcgKyBhbmltYXRlKVxuICAgICAgICAuYXBwZW5kVG8odGhpcy4kYm9keSlcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQpIHJldHVyblxuICAgICAgICB0aGlzLm9wdGlvbnMuYmFja2Ryb3AgPT0gJ3N0YXRpYydcbiAgICAgICAgICA/IHRoaXMuJGVsZW1lbnRbMF0uZm9jdXMoKVxuICAgICAgICAgIDogdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuXG4gICAgICBpZiAoZG9BbmltYXRlKSB0aGlzLiRiYWNrZHJvcFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcblxuICAgICAgdGhpcy4kYmFja2Ryb3AuYWRkQ2xhc3MoJ2luJylcblxuICAgICAgaWYgKCFjYWxsYmFjaykgcmV0dXJuXG5cbiAgICAgIGRvQW5pbWF0ZSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2spXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2soKVxuXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duICYmIHRoaXMuJGJhY2tkcm9wKSB7XG4gICAgICB0aGlzLiRiYWNrZHJvcC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgICB2YXIgY2FsbGJhY2tSZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQucmVtb3ZlQmFja2Ryb3AoKVxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9XG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgICB0aGlzLiRiYWNrZHJvcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrUmVtb3ZlKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNhbGxiYWNrUmVtb3ZlKClcblxuICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICAvLyB0aGVzZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG5cbiAgTW9kYWwucHJvdG90eXBlLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFkanVzdERpYWxvZygpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtb2RhbElzT3ZlcmZsb3dpbmcgPSB0aGlzLiRlbGVtZW50WzBdLnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcblxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAhdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkgeyAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxuICAgICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGZ1bGxXaW5kb3dXaWR0aCA9IGRvY3VtZW50RWxlbWVudFJlY3QucmlnaHQgLSBNYXRoLmFicyhkb2N1bWVudEVsZW1lbnRSZWN0LmxlZnQpXG4gICAgfVxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHRoaXMubWVhc3VyZVNjcm9sbGJhcigpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgJydcbiAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSB0aGlzLnNjcm9sbGJhcldpZHRoXG4gICAgaWYgKHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcpIHtcbiAgICAgIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgYm9keVBhZCArIHNjcm9sbGJhcldpZHRoKVxuICAgICAgJCh0aGlzLmZpeGVkQ29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodFxuICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpXG4gICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAuZGF0YSgncGFkZGluZy1yaWdodCcsIGFjdHVhbFBhZGRpbmcpXG4gICAgICAgICAgLmNzcygncGFkZGluZy1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgc2Nyb2xsYmFyV2lkdGggKyAncHgnKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCB0aGlzLm9yaWdpbmFsQm9keVBhZClcbiAgICAkKHRoaXMuZml4ZWRDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgdmFyIHBhZGRpbmcgPSAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKVxuICAgICAgJChlbGVtZW50KS5yZW1vdmVEYXRhKCdwYWRkaW5nLXJpZ2h0JylcbiAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA/IHBhZGRpbmcgOiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUubWVhc3VyZVNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHsgLy8gdGh4IHdhbHNoXG4gICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZSdcbiAgICB0aGlzLiRib2R5LmFwcGVuZChzY3JvbGxEaXYpXG4gICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoXG4gICAgdGhpcy4kYm9keVswXS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpXG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoXG4gIH1cblxuXG4gIC8vIE1PREFMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbiwgX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTW9kYWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXG5cbiAgJC5mbi5tb2RhbCA9IFBsdWdpblxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcblxuXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBNT0RBTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgIHZhciBocmVmID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgdmFyIHRhcmdldCA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHxcbiAgICAgIChocmVmICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSAvLyBzdHJpcCBmb3IgaWU3XG5cbiAgICB2YXIgJHRhcmdldCA9ICQoZG9jdW1lbnQpLmZpbmQodGFyZ2V0KVxuICAgIHZhciBvcHRpb24gPSAkdGFyZ2V0LmRhdGEoJ2JzLm1vZGFsJykgPyAndG9nZ2xlJyA6ICQuZXh0ZW5kKHsgcmVtb3RlOiAhLyMvLnRlc3QoaHJlZikgJiYgaHJlZiB9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxuXG4gICAgaWYgKCR0aGlzLmlzKCdhJykpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgJHRhcmdldC5vbmUoJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4gLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgJHRhcmdldC5vbmUoJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHRoaXMuaXMoJzp2aXNpYmxlJykgJiYgJHRoaXMudHJpZ2dlcignZm9jdXMnKVxuICAgICAgfSlcbiAgICB9KVxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbiwgdGhpcylcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZm9yRWFjaCcpO1xudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICghU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEgpID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSA6IFtdLmZvckVhY2g7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4cEV4ZWMuY2FsbChSLCBTKTtcbn07XG5cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59XG4iLCIvLyBUaGlzIGZpbGUgaXMgYXV0b2dlbmVyYXRlZCB2aWEgdGhlIGBjb21tb25qc2AgR3J1bnQgdGFzay4gWW91IGNhbiByZXF1aXJlKCkgdGhpcyBmaWxlIGluIGEgQ29tbW9uSlMgZW52aXJvbm1lbnQuXG5yZXF1aXJlKCcuLi8uLi9qcy90cmFuc2l0aW9uLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2FsZXJ0LmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2J1dHRvbi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9jYXJvdXNlbC5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9jb2xsYXBzZS5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9kcm9wZG93bi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9tb2RhbC5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy90b29sdGlwLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL3BvcG92ZXIuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvc2Nyb2xsc3B5LmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL3RhYi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9hZmZpeC5qcycpIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0b29sdGlwLmpzIHYzLjQuMVxuICogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvMy40L2phdmFzY3JpcHQvI3Rvb2x0aXBcbiAqIEluc3BpcmVkIGJ5IHRoZSBvcmlnaW5hbCBqUXVlcnkudGlwc3kgYnkgSmFzb24gRnJhbWVcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIERJU0FMTE9XRURfQVRUUklCVVRFUyA9IFsnc2FuaXRpemUnLCAnd2hpdGVMaXN0JywgJ3Nhbml0aXplRm4nXVxuXG4gIHZhciB1cmlBdHRycyA9IFtcbiAgICAnYmFja2dyb3VuZCcsXG4gICAgJ2NpdGUnLFxuICAgICdocmVmJyxcbiAgICAnaXRlbXR5cGUnLFxuICAgICdsb25nZGVzYycsXG4gICAgJ3Bvc3RlcicsXG4gICAgJ3NyYycsXG4gICAgJ3hsaW5rOmhyZWYnXG4gIF1cblxuICB2YXIgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiA9IC9eYXJpYS1bXFx3LV0qJC9pXG5cbiAgdmFyIERlZmF1bHRXaGl0ZWxpc3QgPSB7XG4gICAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cbiAgICAnKic6IFsnY2xhc3MnLCAnZGlyJywgJ2lkJywgJ2xhbmcnLCAncm9sZScsIEFSSUFfQVRUUklCVVRFX1BBVFRFUk5dLFxuICAgIGE6IFsndGFyZ2V0JywgJ2hyZWYnLCAndGl0bGUnLCAncmVsJ10sXG4gICAgYXJlYTogW10sXG4gICAgYjogW10sXG4gICAgYnI6IFtdLFxuICAgIGNvbDogW10sXG4gICAgY29kZTogW10sXG4gICAgZGl2OiBbXSxcbiAgICBlbTogW10sXG4gICAgaHI6IFtdLFxuICAgIGgxOiBbXSxcbiAgICBoMjogW10sXG4gICAgaDM6IFtdLFxuICAgIGg0OiBbXSxcbiAgICBoNTogW10sXG4gICAgaDY6IFtdLFxuICAgIGk6IFtdLFxuICAgIGltZzogWydzcmMnLCAnYWx0JywgJ3RpdGxlJywgJ3dpZHRoJywgJ2hlaWdodCddLFxuICAgIGxpOiBbXSxcbiAgICBvbDogW10sXG4gICAgcDogW10sXG4gICAgcHJlOiBbXSxcbiAgICBzOiBbXSxcbiAgICBzbWFsbDogW10sXG4gICAgc3BhbjogW10sXG4gICAgc3ViOiBbXSxcbiAgICBzdXA6IFtdLFxuICAgIHN0cm9uZzogW10sXG4gICAgdTogW10sXG4gICAgdWw6IFtdXG4gIH1cblxuICAvKipcbiAgICogQSBwYXR0ZXJuIHRoYXQgcmVjb2duaXplcyBhIGNvbW1vbmx5IHVzZWZ1bCBzdWJzZXQgb2YgVVJMcyB0aGF0IGFyZSBzYWZlLlxuICAgKlxuICAgKiBTaG91dG91dCB0byBBbmd1bGFyIDcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzcuMi40L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gICAqL1xuICB2YXIgU0FGRV9VUkxfUEFUVEVSTiA9IC9eKD86KD86aHR0cHM/fG1haWx0b3xmdHB8dGVsfGZpbGUpOnxbXiY6Lz8jXSooPzpbLz8jXXwkKSkvZ2lcblxuICAvKipcbiAgICogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBzYWZlIGRhdGEgVVJMcy4gT25seSBtYXRjaGVzIGltYWdlLCB2aWRlbyBhbmQgYXVkaW8gdHlwZXMuXG4gICAqXG4gICAqIFNob3V0b3V0IHRvIEFuZ3VsYXIgNyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNy4yLjQvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAgICovXG4gIHZhciBEQVRBX1VSTF9QQVRURVJOID0gL15kYXRhOig/OmltYWdlXFwvKD86Ym1wfGdpZnxqcGVnfGpwZ3xwbmd8dGlmZnx3ZWJwKXx2aWRlb1xcLyg/Om1wZWd8bXA0fG9nZ3x3ZWJtKXxhdWRpb1xcLyg/Om1wM3xvZ2F8b2dnfG9wdXMpKTtiYXNlNjQsW2EtejAtOSsvXSs9KiQvaVxuXG4gIGZ1bmN0aW9uIGFsbG93ZWRBdHRyaWJ1dGUoYXR0ciwgYWxsb3dlZEF0dHJpYnV0ZUxpc3QpIHtcbiAgICB2YXIgYXR0ck5hbWUgPSBhdHRyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKClcblxuICAgIGlmICgkLmluQXJyYXkoYXR0ck5hbWUsIGFsbG93ZWRBdHRyaWJ1dGVMaXN0KSAhPT0gLTEpIHtcbiAgICAgIGlmICgkLmluQXJyYXkoYXR0ck5hbWUsIHVyaUF0dHJzKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oYXR0ci5ub2RlVmFsdWUubWF0Y2goU0FGRV9VUkxfUEFUVEVSTikgfHwgYXR0ci5ub2RlVmFsdWUubWF0Y2goREFUQV9VUkxfUEFUVEVSTikpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgdmFyIHJlZ0V4cCA9ICQoYWxsb3dlZEF0dHJpYnV0ZUxpc3QpLmZpbHRlcihmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBSZWdFeHBcbiAgICB9KVxuXG4gICAgLy8gQ2hlY2sgaWYgYSByZWd1bGFyIGV4cHJlc3Npb24gdmFsaWRhdGVzIHRoZSBhdHRyaWJ1dGUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSByZWdFeHAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXR0ck5hbWUubWF0Y2gocmVnRXhwW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gc2FuaXRpemVIdG1sKHVuc2FmZUh0bWwsIHdoaXRlTGlzdCwgc2FuaXRpemVGbikge1xuICAgIGlmICh1bnNhZmVIdG1sLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuc2FmZUh0bWxcbiAgICB9XG5cbiAgICBpZiAoc2FuaXRpemVGbiAmJiB0eXBlb2Ygc2FuaXRpemVGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHNhbml0aXplRm4odW5zYWZlSHRtbClcbiAgICB9XG5cbiAgICAvLyBJRSA4IGFuZCBiZWxvdyBkb24ndCBzdXBwb3J0IGNyZWF0ZUhUTUxEb2N1bWVudFxuICAgIGlmICghZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gfHwgIWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCkge1xuICAgICAgcmV0dXJuIHVuc2FmZUh0bWxcbiAgICB9XG5cbiAgICB2YXIgY3JlYXRlZERvY3VtZW50ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCdzYW5pdGl6YXRpb24nKVxuICAgIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IHVuc2FmZUh0bWxcblxuICAgIHZhciB3aGl0ZWxpc3RLZXlzID0gJC5tYXAod2hpdGVMaXN0LCBmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGkgfSlcbiAgICB2YXIgZWxlbWVudHMgPSAkKGNyZWF0ZWREb2N1bWVudC5ib2R5KS5maW5kKCcqJylcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGVsID0gZWxlbWVudHNbaV1cbiAgICAgIHZhciBlbE5hbWUgPSBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgICAgIGlmICgkLmluQXJyYXkoZWxOYW1lLCB3aGl0ZWxpc3RLZXlzKSA9PT0gLTEpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbClcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgYXR0cmlidXRlTGlzdCA9ICQubWFwKGVsLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwgfSlcbiAgICAgIHZhciB3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQod2hpdGVMaXN0WycqJ10gfHwgW10sIHdoaXRlTGlzdFtlbE5hbWVdIHx8IFtdKVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgbGVuMiA9IGF0dHJpYnV0ZUxpc3QubGVuZ3RoOyBqIDwgbGVuMjsgaisrKSB7XG4gICAgICAgIGlmICghYWxsb3dlZEF0dHJpYnV0ZShhdHRyaWJ1dGVMaXN0W2pdLCB3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZUxpc3Rbal0ubm9kZU5hbWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlZERvY3VtZW50LmJvZHkuaW5uZXJIVE1MXG4gIH1cblxuICAvLyBUT09MVElQIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlICAgICAgID0gbnVsbFxuICAgIHRoaXMub3B0aW9ucyAgICA9IG51bGxcbiAgICB0aGlzLmVuYWJsZWQgICAgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ICAgID0gbnVsbFxuICAgIHRoaXMuaG92ZXJTdGF0ZSA9IG51bGxcbiAgICB0aGlzLiRlbGVtZW50ICAgPSBudWxsXG4gICAgdGhpcy5pblN0YXRlICAgID0gbnVsbFxuXG4gICAgdGhpcy5pbml0KCd0b29sdGlwJywgZWxlbWVudCwgb3B0aW9ucylcbiAgfVxuXG4gIFRvb2x0aXAuVkVSU0lPTiAgPSAnMy40LjEnXG5cbiAgVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVG9vbHRpcC5ERUZBVUxUUyA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVsYXk6IDAsXG4gICAgaHRtbDogZmFsc2UsXG4gICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICB2aWV3cG9ydDoge1xuICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9LFxuICAgIHNhbml0aXplIDogdHJ1ZSxcbiAgICBzYW5pdGl6ZUZuIDogbnVsbCxcbiAgICB3aGl0ZUxpc3QgOiBEZWZhdWx0V2hpdGVsaXN0XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHR5cGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmVuYWJsZWQgICA9IHRydWVcbiAgICB0aGlzLnR5cGUgICAgICA9IHR5cGVcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9IHRoaXMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICAgIHRoaXMuJHZpZXdwb3J0ID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmICQoZG9jdW1lbnQpLmZpbmQoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy52aWV3cG9ydCkgPyB0aGlzLm9wdGlvbnMudmlld3BvcnQuY2FsbCh0aGlzLCB0aGlzLiRlbGVtZW50KSA6ICh0aGlzLm9wdGlvbnMudmlld3BvcnQuc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLnZpZXdwb3J0KSlcbiAgICB0aGlzLmluU3RhdGUgICA9IHsgY2xpY2s6IGZhbHNlLCBob3ZlcjogZmFsc2UsIGZvY3VzOiBmYWxzZSB9XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudFswXSBpbnN0YW5jZW9mIGRvY3VtZW50LmNvbnN0cnVjdG9yICYmICF0aGlzLm9wdGlvbnMuc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHNlbGVjdG9yYCBvcHRpb24gbXVzdCBiZSBzcGVjaWZpZWQgd2hlbiBpbml0aWFsaXppbmcgJyArIHRoaXMudHlwZSArICcgb24gdGhlIHdpbmRvdy5kb2N1bWVudCBvYmplY3QhJylcbiAgICB9XG5cbiAgICB2YXIgdHJpZ2dlcnMgPSB0aGlzLm9wdGlvbnMudHJpZ2dlci5zcGxpdCgnICcpXG5cbiAgICBmb3IgKHZhciBpID0gdHJpZ2dlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgdHJpZ2dlciA9IHRyaWdnZXJzW2ldXG5cbiAgICAgIGlmICh0cmlnZ2VyID09ICdjbGljaycpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMudG9nZ2xlLCB0aGlzKSlcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPSAnbWFudWFsJykge1xuICAgICAgICB2YXIgZXZlbnRJbiAgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VlbnRlcicgOiAnZm9jdXNpbidcbiAgICAgICAgdmFyIGV2ZW50T3V0ID0gdHJpZ2dlciA9PSAnaG92ZXInID8gJ21vdXNlbGVhdmUnIDogJ2ZvY3Vzb3V0J1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRJbiAgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmVudGVyLCB0aGlzKSlcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudE91dCArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMubGVhdmUsIHRoaXMpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA/XG4gICAgICAodGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHsgdHJpZ2dlcjogJ21hbnVhbCcsIHNlbGVjdG9yOiAnJyB9KSkgOlxuICAgICAgdGhpcy5maXhUaXRsZSgpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVG9vbHRpcC5ERUZBVUxUU1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGRhdGFBdHRyaWJ1dGVzID0gdGhpcy4kZWxlbWVudC5kYXRhKClcblxuICAgIGZvciAodmFyIGRhdGFBdHRyIGluIGRhdGFBdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoZGF0YUF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoZGF0YUF0dHIpICYmICQuaW5BcnJheShkYXRhQXR0ciwgRElTQUxMT1dFRF9BVFRSSUJVVEVTKSAhPT0gLTEpIHtcbiAgICAgICAgZGVsZXRlIGRhdGFBdHRyaWJ1dGVzW2RhdGFBdHRyXVxuICAgICAgfVxuICAgIH1cblxuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5nZXREZWZhdWx0cygpLCBkYXRhQXR0cmlidXRlcywgb3B0aW9ucylcblxuICAgIGlmIChvcHRpb25zLmRlbGF5ICYmIHR5cGVvZiBvcHRpb25zLmRlbGF5ID09ICdudW1iZXInKSB7XG4gICAgICBvcHRpb25zLmRlbGF5ID0ge1xuICAgICAgICBzaG93OiBvcHRpb25zLmRlbGF5LFxuICAgICAgICBoaWRlOiBvcHRpb25zLmRlbGF5XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2FuaXRpemUpIHtcbiAgICAgIG9wdGlvbnMudGVtcGxhdGUgPSBzYW5pdGl6ZUh0bWwob3B0aW9ucy50ZW1wbGF0ZSwgb3B0aW9ucy53aGl0ZUxpc3QsIG9wdGlvbnMuc2FuaXRpemVGbilcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVsZWdhdGVPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zICA9IHt9XG4gICAgdmFyIGRlZmF1bHRzID0gdGhpcy5nZXREZWZhdWx0cygpXG5cbiAgICB0aGlzLl9vcHRpb25zICYmICQuZWFjaCh0aGlzLl9vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGRlZmF1bHRzW2tleV0gIT0gdmFsdWUpIG9wdGlvbnNba2V5XSA9IHZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c2luJyA/ICdmb2N1cycgOiAnaG92ZXInXSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoc2VsZi50aXAoKS5oYXNDbGFzcygnaW4nKSB8fCBzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykge1xuICAgICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbidcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdykgcmV0dXJuIHNlbGYuc2hvdygpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykgc2VsZi5zaG93KClcbiAgICB9LCBzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmlzSW5TdGF0ZVRydWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuaW5TdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuaW5TdGF0ZVtrZXldKSByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID9cbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgfVxuXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mICQuRXZlbnQpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZVtvYmoudHlwZSA9PSAnZm9jdXNvdXQnID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHJldHVyblxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdvdXQnXG5cbiAgICBpZiAoIXNlbGYub3B0aW9ucy5kZWxheSB8fCAhc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpIHJldHVybiBzZWxmLmhpZGUoKVxuXG4gICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5ob3ZlclN0YXRlID09ICdvdXQnKSBzZWxmLmhpZGUoKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5oaWRlKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZSA9ICQuRXZlbnQoJ3Nob3cuYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSAmJiB0aGlzLmVuYWJsZWQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICB2YXIgaW5Eb20gPSAkLmNvbnRhaW5zKHRoaXMuJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaW5Eb20pIHJldHVyblxuICAgICAgdmFyIHRoYXQgPSB0aGlzXG5cbiAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuXG4gICAgICB2YXIgdGlwSWQgPSB0aGlzLmdldFVJRCh0aGlzLnR5cGUpXG5cbiAgICAgIHRoaXMuc2V0Q29udGVudCgpXG4gICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZClcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pICR0aXAuYWRkQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnRcblxuICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2lcbiAgICAgIHZhciBhdXRvUGxhY2UgPSBhdXRvVG9rZW4udGVzdChwbGFjZW1lbnQpXG4gICAgICBpZiAoYXV0b1BsYWNlKSBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJ1xuXG4gICAgICAkdGlwXG4gICAgICAgIC5kZXRhY2goKVxuICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pXG4gICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXG4gICAgICAgIC5kYXRhKCdicy4nICsgdGhpcy50eXBlLCB0aGlzKVxuXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyID8gJHRpcC5hcHBlbmRUbygkKGRvY3VtZW50KS5maW5kKHRoaXMub3B0aW9ucy5jb250YWluZXIpKSA6ICR0aXAuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudClcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5zZXJ0ZWQuYnMuJyArIHRoaXMudHlwZSlcblxuICAgICAgdmFyIHBvcyAgICAgICAgICA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRcbiAgICAgICAgdmFyIHZpZXdwb3J0RGltID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydClcblxuICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLmJvdHRvbSArIGFjdHVhbEhlaWdodCA+IHZpZXdwb3J0RGltLmJvdHRvbSA/ICd0b3AnICAgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgICYmIHBvcy50b3AgICAgLSBhY3R1YWxIZWlnaHQgPCB2aWV3cG9ydERpbS50b3AgICAgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAncmlnaHQnICAmJiBwb3MucmlnaHQgICsgYWN0dWFsV2lkdGggID4gdmlld3BvcnREaW0ud2lkdGggID8gJ2xlZnQnICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgICAtIGFjdHVhbFdpZHRoICA8IHZpZXdwb3J0RGltLmxlZnQgICA/ICdyaWdodCcgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50XG5cbiAgICAgICAgJHRpcFxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpXG4gICAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGN1bGF0ZWRPZmZzZXQgPSB0aGlzLmdldENhbGN1bGF0ZWRPZmZzZXQocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoY2FsY3VsYXRlZE9mZnNldCwgcGxhY2VtZW50KVxuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IHRoYXQuaG92ZXJTdGF0ZVxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ3Nob3duLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICAgIHRoYXQuaG92ZXJTdGF0ZSA9IG51bGxcblxuICAgICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT0gJ291dCcpIHRoYXQubGVhdmUodGhhdClcbiAgICAgIH1cblxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgICAkdGlwXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjb21wbGV0ZSgpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQgPSBmdW5jdGlvbiAob2Zmc2V0LCBwbGFjZW1lbnQpIHtcbiAgICB2YXIgJHRpcCAgID0gdGhpcy50aXAoKVxuICAgIHZhciB3aWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAvLyBtYW51YWxseSByZWFkIG1hcmdpbnMgYmVjYXVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaW5jbHVkZXMgZGlmZmVyZW5jZVxuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLXRvcCcpLCAxMClcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tbGVmdCcpLCAxMClcblxuICAgIC8vIHdlIG11c3QgY2hlY2sgZm9yIE5hTiBmb3IgaWUgOC85XG4gICAgaWYgKGlzTmFOKG1hcmdpblRvcCkpICBtYXJnaW5Ub3AgID0gMFxuICAgIGlmIChpc05hTihtYXJnaW5MZWZ0KSkgbWFyZ2luTGVmdCA9IDBcblxuICAgIG9mZnNldC50b3AgICs9IG1hcmdpblRvcFxuICAgIG9mZnNldC5sZWZ0ICs9IG1hcmdpbkxlZnRcblxuICAgIC8vICQuZm4ub2Zmc2V0IGRvZXNuJ3Qgcm91bmQgcGl4ZWwgdmFsdWVzXG4gICAgLy8gc28gd2UgdXNlIHNldE9mZnNldCBkaXJlY3RseSB3aXRoIG91ciBvd24gZnVuY3Rpb24gQi0wXG4gICAgJC5vZmZzZXQuc2V0T2Zmc2V0KCR0aXBbMF0sICQuZXh0ZW5kKHtcbiAgICAgIHVzaW5nOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgJHRpcC5jc3Moe1xuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChwcm9wcy50b3ApLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQocHJvcHMubGVmdClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LCBvZmZzZXQpLCAwKVxuXG4gICAgJHRpcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHBsYWNpbmcgdGlwIGluIG5ldyBvZmZzZXQgY2F1c2VkIHRoZSB0aXAgdG8gcmVzaXplIGl0c2VsZlxuICAgIHZhciBhY3R1YWxXaWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICBpZiAocGxhY2VtZW50ID09ICd0b3AnICYmIGFjdHVhbEhlaWdodCAhPSBoZWlnaHQpIHtcbiAgICAgIG9mZnNldC50b3AgPSBvZmZzZXQudG9wICsgaGVpZ2h0IC0gYWN0dWFsSGVpZ2h0XG4gICAgfVxuXG4gICAgdmFyIGRlbHRhID0gdGhpcy5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEocGxhY2VtZW50LCBvZmZzZXQsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICBpZiAoZGVsdGEubGVmdCkgb2Zmc2V0LmxlZnQgKz0gZGVsdGEubGVmdFxuICAgIGVsc2Ugb2Zmc2V0LnRvcCArPSBkZWx0YS50b3BcblxuICAgIHZhciBpc1ZlcnRpY2FsICAgICAgICAgID0gL3RvcHxib3R0b20vLnRlc3QocGxhY2VtZW50KVxuICAgIHZhciBhcnJvd0RlbHRhICAgICAgICAgID0gaXNWZXJ0aWNhbCA/IGRlbHRhLmxlZnQgKiAyIC0gd2lkdGggKyBhY3R1YWxXaWR0aCA6IGRlbHRhLnRvcCAqIDIgLSBoZWlnaHQgKyBhY3R1YWxIZWlnaHRcbiAgICB2YXIgYXJyb3dPZmZzZXRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCdcblxuICAgICR0aXAub2Zmc2V0KG9mZnNldClcbiAgICB0aGlzLnJlcGxhY2VBcnJvdyhhcnJvd0RlbHRhLCAkdGlwWzBdW2Fycm93T2Zmc2V0UG9zaXRpb25dLCBpc1ZlcnRpY2FsKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIGlzVmVydGljYWwpIHtcbiAgICB0aGlzLmFycm93KClcbiAgICAgIC5jc3MoaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnLCA1MCAqICgxIC0gZGVsdGEgLyBkaW1lbnNpb24pICsgJyUnKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsICcnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHRpdGxlID0gdGhpcy5nZXRUaXRsZSgpXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmh0bWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2FuaXRpemUpIHtcbiAgICAgICAgdGl0bGUgPSBzYW5pdGl6ZUh0bWwodGl0bGUsIHRoaXMub3B0aW9ucy53aGl0ZUxpc3QsIHRoaXMub3B0aW9ucy5zYW5pdGl6ZUZuKVxuICAgICAgfVxuXG4gICAgICAkdGlwLmZpbmQoJy50b29sdGlwLWlubmVyJykuaHRtbCh0aXRsZSlcbiAgICB9IGVsc2Uge1xuICAgICAgJHRpcC5maW5kKCcudG9vbHRpcC1pbm5lcicpLnRleHQodGl0bGUpXG4gICAgfVxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHQnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciAkdGlwID0gJCh0aGlzLiR0aXApXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdoaWRlLmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKVxuICAgICAgaWYgKHRoYXQuJGVsZW1lbnQpIHsgLy8gVE9ETzogQ2hlY2sgd2hldGhlciBndWFyZGluZyB0aGlzIGNvZGUgd2l0aCB0aGlzIGBpZmAgaXMgcmVhbGx5IG5lY2Vzc2FyeS5cbiAgICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHRpcFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgY29tcGxldGUoKVxuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICBpZiAoJGUuYXR0cigndGl0bGUnKSB8fCB0eXBlb2YgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpICE9ICdzdHJpbmcnKSB7XG4gICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnRcblxuICAgIHZhciBlbCAgICAgPSAkZWxlbWVudFswXVxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xuXG4gICAgdmFyIGVsUmVjdCAgICA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XG4gICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBtaXNzaW5nIGluIElFOCwgc28gY29tcHV0ZSB0aGVtIG1hbnVhbGx5OyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8xNDA5M1xuICAgICAgZWxSZWN0ID0gJC5leHRlbmQoe30sIGVsUmVjdCwgeyB3aWR0aDogZWxSZWN0LnJpZ2h0IC0gZWxSZWN0LmxlZnQsIGhlaWdodDogZWxSZWN0LmJvdHRvbSAtIGVsUmVjdC50b3AgfSlcbiAgICB9XG4gICAgdmFyIGlzU3ZnID0gd2luZG93LlNWR0VsZW1lbnQgJiYgZWwgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudFxuICAgIC8vIEF2b2lkIHVzaW5nICQub2Zmc2V0KCkgb24gU1ZHcyBzaW5jZSBpdCBnaXZlcyBpbmNvcnJlY3QgcmVzdWx0cyBpbiBqUXVlcnkgMy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yMDI4MFxuICAgIHZhciBlbE9mZnNldCAgPSBpc0JvZHkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogKGlzU3ZnID8gbnVsbCA6ICRlbGVtZW50Lm9mZnNldCgpKVxuICAgIHZhciBzY3JvbGwgICAgPSB7IHNjcm9sbDogaXNCb2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA6ICRlbGVtZW50LnNjcm9sbFRvcCgpIH1cbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsXG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGVsUmVjdCwgc2Nyb2xsLCBvdXRlckRpbXMsIGVsT2Zmc2V0KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRlZE9mZnNldCA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgPyB7IHRvcDogcG9zLnRvcCAtIGFjdHVhbEhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgLSBhY3R1YWxXaWR0aCB9IDpcbiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH1cblxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxuXG4gICAgdmFyIHZpZXdwb3J0UGFkZGluZyA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiB0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZyB8fCAwXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICBpZiAoL3JpZ2h0fGxlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxuICAgICAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSBwb3MudG9wICsgdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbCArIGFjdHVhbEhlaWdodFxuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7IC8vIHRvcCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHsgLy8gYm90dG9tIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgID0gcG9zLmxlZnQgLSB2aWV3cG9ydFBhZGRpbmdcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXG4gICAgICBpZiAobGVmdEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCkgeyAvLyBsZWZ0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCAtIGxlZnRFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkgeyAvLyByaWdodCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsdGFcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZVxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHRpdGxlID0gJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICB8fCAodHlwZW9mIG8udGl0bGUgPT0gJ2Z1bmN0aW9uJyA/IG8udGl0bGUuY2FsbCgkZVswXSkgOiAgby50aXRsZSlcblxuICAgIHJldHVybiB0aXRsZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiR0aXApIHtcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKVxuICAgICAgaWYgKHRoaXMuJHRpcC5sZW5ndGggIT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy50eXBlICsgJyBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IScpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiR0aXBcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93JykpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIGlmIChlKSB7XG4gICAgICBzZWxmID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG4gICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZS5jbGljayA9ICFzZWxmLmluU3RhdGUuY2xpY2tcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKVxuICAgICAgZWxzZSBzZWxmLmxlYXZlKHNlbGYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICB0aGlzLmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vZmYoJy4nICsgdGhhdC50eXBlKS5yZW1vdmVEYXRhKCdicy4nICsgdGhhdC50eXBlKVxuICAgICAgaWYgKHRoYXQuJHRpcCkge1xuICAgICAgICB0aGF0LiR0aXAuZGV0YWNoKClcbiAgICAgIH1cbiAgICAgIHRoYXQuJHRpcCA9IG51bGxcbiAgICAgIHRoYXQuJGFycm93ID0gbnVsbFxuICAgICAgdGhhdC4kdmlld3BvcnQgPSBudWxsXG4gICAgICB0aGF0LiRlbGVtZW50ID0gbnVsbFxuICAgIH0pXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zYW5pdGl6ZUh0bWwgPSBmdW5jdGlvbiAodW5zYWZlSHRtbCkge1xuICAgIHJldHVybiBzYW5pdGl6ZUh0bWwodW5zYWZlSHRtbCwgdGhpcy5vcHRpb25zLndoaXRlTGlzdCwgdGhpcy5vcHRpb25zLnNhbml0aXplRm4pXG4gIH1cblxuICAvLyBUT09MVElQIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50b29sdGlwJywgKGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udG9vbHRpcFxuXG4gICQuZm4udG9vbHRpcCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IgPSBUb29sdGlwXG5cblxuICAvLyBUT09MVElQIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnRvb2x0aXAubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRvb2x0aXAgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9kaXN0L2lucHV0bWFza1wiKTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLyohXG4gKiBkaXN0L2lucHV0bWFza1xuICogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiAqIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMjAgUm9iaW4gSGVyYm90c1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBWZXJzaW9uOiA1LjAuM1xuICovXG4hZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBleHBvcnRzICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQpIGRlZmluZShbXSwgZmFjdG9yeSk7IGVsc2Uge1xuICAgICAgICB2YXIgYSA9IGZhY3RvcnkoKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBhKSAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG4gICAgfVxufSh3aW5kb3csIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtb2R1bGVzID0gWyBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBKU09OLnBhcnNlKCd7XCJCQUNLU1BBQ0VcIjo4LFwiQkFDS1NQQUNFX1NBRkFSSVwiOjEyNyxcIkRFTEVURVwiOjQ2LFwiRE9XTlwiOjQwLFwiRU5EXCI6MzUsXCJFTlRFUlwiOjEzLFwiRVNDQVBFXCI6MjcsXCJIT01FXCI6MzYsXCJJTlNFUlRcIjo0NSxcIkxFRlRcIjozNyxcIlBBR0VfRE9XTlwiOjM0LFwiUEFHRV9VUFwiOjMzLFwiUklHSFRcIjozOSxcIlNQQUNFXCI6MzIsXCJUQUJcIjo5LFwiVVBcIjozOCxcIlhcIjo4OCxcIkNPTlRST0xcIjoxN30nKTtcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgICAgICAgICB9IDogZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgICAgICAgICAgfSwgX3R5cGVvZihvYmopO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSwgd2luZG93ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKSwgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsIGdlbmVyYXRlTWFza1NldCA9IF9fd2VicGFja19yZXF1aXJlX18oNCkuZ2VuZXJhdGVNYXNrU2V0LCBhbmFseXNlTWFzayA9IF9fd2VicGFja19yZXF1aXJlX18oNCkuYW5hbHlzZU1hc2ssIG1hc2tTY29wZSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG4gICAgICAgIGZ1bmN0aW9uIElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpIHtcbiAgICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJbnB1dG1hc2spKSByZXR1cm4gbmV3IElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpO1xuICAgICAgICAgICAgdGhpcy5lbCA9IHZvaWQgMCwgdGhpcy5ldmVudHMgPSB7fSwgdGhpcy5tYXNrc2V0ID0gdm9pZCAwLCB0aGlzLnJlZnJlc2hWYWx1ZSA9ICExLCBcbiAgICAgICAgICAgICEwICE9PSBpbnRlcm5hbCAmJiAoJC5pc1BsYWluT2JqZWN0KGFsaWFzKSA/IG9wdGlvbnMgPSBhbGlhcyA6IChvcHRpb25zID0gb3B0aW9ucyB8fCB7fSwgXG4gICAgICAgICAgICBhbGlhcyAmJiAob3B0aW9ucy5hbGlhcyA9IGFsaWFzKSksIHRoaXMub3B0cyA9ICQuZXh0ZW5kKCEwLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyksIFxuICAgICAgICAgICAgdGhpcy5ub01hc2tzQ2FjaGUgPSBvcHRpb25zICYmIHZvaWQgMCAhPT0gb3B0aW9ucy5kZWZpbml0aW9ucywgdGhpcy51c2VyT3B0aW9ucyA9IG9wdGlvbnMgfHwge30sIFxuICAgICAgICAgICAgcmVzb2x2ZUFsaWFzKHRoaXMub3B0cy5hbGlhcywgb3B0aW9ucywgdGhpcy5vcHRzKSwgdGhpcy5pc1JUTCA9IHRoaXMub3B0cy5udW1lcmljSW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbGlhcyhhbGlhc1N0ciwgb3B0aW9ucywgb3B0cykge1xuICAgICAgICAgICAgdmFyIGFsaWFzRGVmaW5pdGlvbiA9IElucHV0bWFzay5wcm90b3R5cGUuYWxpYXNlc1thbGlhc1N0cl07XG4gICAgICAgICAgICByZXR1cm4gYWxpYXNEZWZpbml0aW9uID8gKGFsaWFzRGVmaW5pdGlvbi5hbGlhcyAmJiByZXNvbHZlQWxpYXMoYWxpYXNEZWZpbml0aW9uLmFsaWFzLCB2b2lkIDAsIG9wdHMpLCBcbiAgICAgICAgICAgICQuZXh0ZW5kKCEwLCBvcHRzLCBhbGlhc0RlZmluaXRpb24pLCAkLmV4dGVuZCghMCwgb3B0cywgb3B0aW9ucyksICEwKSA6IChudWxsID09PSBvcHRzLm1hc2sgJiYgKG9wdHMubWFzayA9IGFsaWFzU3RyKSwgXG4gICAgICAgICAgICAhMSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaW1wb3J0QXR0cmlidXRlT3B0aW9ucyhucHQsIG9wdHMsIHVzZXJPcHRpb25zLCBkYXRhQXR0cmlidXRlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBpbXBvcnRPcHRpb24ob3B0aW9uLCBvcHRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHZvaWQgMCAhPT0gb3B0aW9uRGF0YSA/IG9wdGlvbkRhdGEgOiBucHQuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGUgKyBcIi1cIiArIG9wdGlvbiksIFxuICAgICAgICAgICAgICAgIG51bGwgIT09IG9wdGlvbkRhdGEgJiYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIG9wdGlvbkRhdGEgJiYgKDAgPT09IG9wdGlvbi5pbmRleE9mKFwib25cIikgPyBvcHRpb25EYXRhID0gd2luZG93W29wdGlvbkRhdGFdIDogXCJmYWxzZVwiID09PSBvcHRpb25EYXRhID8gb3B0aW9uRGF0YSA9ICExIDogXCJ0cnVlXCIgPT09IG9wdGlvbkRhdGEgJiYgKG9wdGlvbkRhdGEgPSAhMCkpLCBcbiAgICAgICAgICAgICAgICB1c2VyT3B0aW9uc1tvcHRpb25dID0gb3B0aW9uRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoITAgPT09IG9wdHMuaW1wb3J0RGF0YUF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0ck9wdGlvbnMgPSBucHQuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGUpLCBvcHRpb24sIGRhdGFvcHRpb25zLCBvcHRpb25EYXRhLCBwO1xuICAgICAgICAgICAgICAgIGlmIChhdHRyT3B0aW9ucyAmJiBcIlwiICE9PSBhdHRyT3B0aW9ucyAmJiAoYXR0ck9wdGlvbnMgPSBhdHRyT3B0aW9ucy5yZXBsYWNlKC8nL2csICdcIicpLCBcbiAgICAgICAgICAgICAgICBkYXRhb3B0aW9ucyA9IEpTT04ucGFyc2UoXCJ7XCIgKyBhdHRyT3B0aW9ucyArIFwifVwiKSksIGRhdGFvcHRpb25zKSBmb3IgKHAgaW4gb3B0aW9uRGF0YSA9IHZvaWQgMCwgXG4gICAgICAgICAgICAgICAgZGF0YW9wdGlvbnMpIGlmIChcImFsaWFzXCIgPT09IHAudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gZGF0YW9wdGlvbnNbcF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKG9wdGlvbiBpbiBpbXBvcnRPcHRpb24oXCJhbGlhc1wiLCBvcHRpb25EYXRhKSwgdXNlck9wdGlvbnMuYWxpYXMgJiYgcmVzb2x2ZUFsaWFzKHVzZXJPcHRpb25zLmFsaWFzLCB1c2VyT3B0aW9ucywgb3B0cyksIFxuICAgICAgICAgICAgICAgIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFvcHRpb25zKSBmb3IgKHAgaW4gb3B0aW9uRGF0YSA9IHZvaWQgMCwgZGF0YW9wdGlvbnMpIGlmIChwLnRvTG93ZXJDYXNlKCkgPT09IG9wdGlvbi50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gZGF0YW9wdGlvbnNbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbXBvcnRPcHRpb24ob3B0aW9uLCBvcHRpb25EYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoITAsIG9wdHMsIHVzZXJPcHRpb25zKSwgXCJydGxcIiAhPT0gbnB0LmRpciAmJiAhb3B0cy5yaWdodEFsaWduIHx8IChucHQuc3R5bGUudGV4dEFsaWduID0gXCJyaWdodFwiKSwgXG4gICAgICAgICAgICBcInJ0bFwiICE9PSBucHQuZGlyICYmICFvcHRzLm51bWVyaWNJbnB1dCB8fCAobnB0LmRpciA9IFwibHRyXCIsIG5wdC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXJcIiksIFxuICAgICAgICAgICAgb3B0cy5pc1JUTCA9ICEwKSwgT2JqZWN0LmtleXModXNlck9wdGlvbnMpLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBJbnB1dG1hc2sucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgZGF0YUF0dHJpYnV0ZTogXCJkYXRhLWlucHV0bWFza1wiLFxuICAgICAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgICAgICBfbWF4VGVzdFBvczogNTAwLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIl9cIixcbiAgICAgICAgICAgICAgICBvcHRpb25hbG1hcmtlcjogWyBcIltcIiwgXCJdXCIgXSxcbiAgICAgICAgICAgICAgICBxdWFudGlmaWVybWFya2VyOiBbIFwie1wiLCBcIn1cIiBdLFxuICAgICAgICAgICAgICAgIGdyb3VwbWFya2VyOiBbIFwiKFwiLCBcIilcIiBdLFxuICAgICAgICAgICAgICAgIGFsdGVybmF0b3JtYXJrZXI6IFwifFwiLFxuICAgICAgICAgICAgICAgIGVzY2FwZUNoYXI6IFwiXFxcXFwiLFxuICAgICAgICAgICAgICAgIG1hc2s6IG51bGwsXG4gICAgICAgICAgICAgICAgcmVnZXg6IG51bGwsXG4gICAgICAgICAgICAgICAgb25jb21wbGV0ZTogJC5ub29wLFxuICAgICAgICAgICAgICAgIG9uaW5jb21wbGV0ZTogJC5ub29wLFxuICAgICAgICAgICAgICAgIG9uY2xlYXJlZDogJC5ub29wLFxuICAgICAgICAgICAgICAgIHJlcGVhdDogMCxcbiAgICAgICAgICAgICAgICBncmVlZHk6ICExLFxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExLFxuICAgICAgICAgICAgICAgIHJlbW92ZU1hc2tPblN1Ym1pdDogITEsXG4gICAgICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6ICEwLFxuICAgICAgICAgICAgICAgIGluc2VydE1vZGU6ICEwLFxuICAgICAgICAgICAgICAgIGluc2VydE1vZGVWaXN1YWw6ICEwLFxuICAgICAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogITEsXG4gICAgICAgICAgICAgICAgYWxpYXM6IG51bGwsXG4gICAgICAgICAgICAgICAgb25LZXlEb3duOiAkLm5vb3AsXG4gICAgICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBudWxsLFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uIG9uQmVmb3JlUGFzdGUocGFzdGVkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKHRoaXMsIHBhc3RlZFZhbHVlLCBvcHRzKSA6IHBhc3RlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25CZWZvcmVXcml0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBvblVuTWFzazogbnVsbCxcbiAgICAgICAgICAgICAgICBzaG93TWFza09uRm9jdXM6ICEwLFxuICAgICAgICAgICAgICAgIHNob3dNYXNrT25Ib3ZlcjogITAsXG4gICAgICAgICAgICAgICAgb25LZXlWYWxpZGF0aW9uOiAkLm5vb3AsXG4gICAgICAgICAgICAgICAgc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjogXCIgXCIsXG4gICAgICAgICAgICAgICAgbnVtZXJpY0lucHV0OiAhMSxcbiAgICAgICAgICAgICAgICByaWdodEFsaWduOiAhMSxcbiAgICAgICAgICAgICAgICB1bmRvT25Fc2NhcGU6ICEwLFxuICAgICAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgX3JhZGl4RGFuY2U6ICExLFxuICAgICAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIlwiLFxuICAgICAgICAgICAgICAgIGtlZXBTdGF0aWM6IG51bGwsXG4gICAgICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uVGFiOiAhMCxcbiAgICAgICAgICAgICAgICB0YWJUaHJvdWdoOiAhMSxcbiAgICAgICAgICAgICAgICBzdXBwb3J0c0lucHV0VHlwZTogWyBcInRleHRcIiwgXCJ0ZWxcIiwgXCJ1cmxcIiwgXCJwYXNzd29yZFwiLCBcInNlYXJjaFwiIF0sXG4gICAgICAgICAgICAgICAgaWdub3JhYmxlczogWyA4LCA5LCAxOSwgMjcsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDUsIDQ2LCA5MywgMTEyLCAxMTMsIDExNCwgMTE1LCAxMTYsIDExNywgMTE4LCAxMTksIDEyMCwgMTIxLCAxMjIsIDEyMywgMCwgMjI5IF0sXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmVWYWxpZGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXRpY0RlZmluaXRpb25TeW1ib2w6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBqaXRNYXNraW5nOiAhMSxcbiAgICAgICAgICAgICAgICBudWxsYWJsZTogITAsXG4gICAgICAgICAgICAgICAgaW5wdXRFdmVudE9ubHk6ICExLFxuICAgICAgICAgICAgICAgIG5vVmFsdWVQYXRjaGluZzogITEsXG4gICAgICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uQ2xpY2s6IFwibHZwXCIsXG4gICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgaW1wb3J0RGF0YUF0dHJpYnV0ZXM6ICEwLFxuICAgICAgICAgICAgICAgIHNoaWZ0UG9zaXRpb25zOiAhMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgOToge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOVxcdWZmMTEtXFx1ZmYxOV1cIixcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6IFwiKlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOVxcdWZmMTEtXFx1ZmYxOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGlhc2VzOiB7fSxcbiAgICAgICAgICAgIG1hc2tzQ2FjaGU6IHt9LFxuICAgICAgICAgICAgbWFzazogZnVuY3Rpb24gbWFzayhlbGVtcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZWxlbXMgJiYgKGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpKSwgXG4gICAgICAgICAgICAgICAgZWxlbXMgPSBlbGVtcy5ub2RlTmFtZSA/IFsgZWxlbXMgXSA6IGVsZW1zLCAkLmVhY2goZWxlbXMsIGZ1bmN0aW9uKG5keCwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjb3BlZE9wdHMgPSAkLmV4dGVuZCghMCwge30sIHRoYXQub3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKGVsLCBzY29wZWRPcHRzLCAkLmV4dGVuZCghMCwge30sIHRoYXQudXNlck9wdGlvbnMpLCB0aGF0LmRhdGFBdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFza3NldCA9IGdlbmVyYXRlTWFza1NldChzY29wZWRPcHRzLCB0aGF0Lm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IG1hc2tzZXQgJiYgKHZvaWQgMCAhPT0gZWwuaW5wdXRtYXNrICYmIChlbC5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrID0gITAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLnJlbW92ZSgpKSwgZWwuaW5wdXRtYXNrID0gbmV3IElucHV0bWFzayh2b2lkIDAsIHZvaWQgMCwgITApLCBlbC5pbnB1dG1hc2sub3B0cyA9IHNjb3BlZE9wdHMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm5vTWFza3NDYWNoZSA9IHRoYXQubm9NYXNrc0NhY2hlLCBlbC5pbnB1dG1hc2sudXNlck9wdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHRoYXQudXNlck9wdGlvbnMpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5pc1JUTCA9IHNjb3BlZE9wdHMuaXNSVEwgfHwgc2NvcGVkT3B0cy5udW1lcmljSW5wdXQsIGVsLmlucHV0bWFzay5lbCA9IGVsLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5tYXNrc2V0ID0gbWFza3NldCwgJC5kYXRhKGVsLCBcIl9pbnB1dG1hc2tfb3B0c1wiLCBzY29wZWRPcHRzKSwgbWFza1Njb3BlLmNhbGwoZWwuaW5wdXRtYXNrLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIm1hc2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksIGVsZW1zICYmIGVsZW1zWzBdICYmIGVsZW1zWzBdLmlucHV0bWFzayB8fCB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbjogZnVuY3Rpb24gb3B0aW9uKG9wdGlvbnMsIG5vcmVtYXNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIG9wdGlvbnMgPyB0aGlzLm9wdHNbb3B0aW9uc10gOiBcIm9iamVjdFwiID09PSBfdHlwZW9mKG9wdGlvbnMpID8gKCQuZXh0ZW5kKHRoaXMudXNlck9wdGlvbnMsIG9wdGlvbnMpLCBcbiAgICAgICAgICAgICAgICB0aGlzLmVsICYmICEwICE9PSBub3JlbWFzayAmJiB0aGlzLm1hc2sodGhpcy5lbCksIHRoaXMpIDogdm9pZCAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVubWFza2VkdmFsdWU6IGZ1bmN0aW9uIHVubWFza2VkdmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwidW5tYXNrZWR2YWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVtb3ZlXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRlbXB0eW1hc2s6IGZ1bmN0aW9uIGdldGVtcHR5bWFzaygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0ZW1wdHltYXNrXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNNYXNrZWRWYWx1ZTogZnVuY3Rpb24gaGFzTWFza2VkVmFsdWUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLm9wdHMuYXV0b1VubWFzaztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0NvbXBsZXRlOiBmdW5jdGlvbiBpc0NvbXBsZXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpLCBcbiAgICAgICAgICAgICAgICBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpc0NvbXBsZXRlXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRtZXRhZGF0YTogZnVuY3Rpb24gZ2V0bWV0YWRhdGEoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIFxuICAgICAgICAgICAgICAgIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldG1ldGFkYXRhXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1ZhbGlkOiBmdW5jdGlvbiBpc1ZhbGlkKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIFxuICAgICAgICAgICAgICAgIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImlzVmFsaWRcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIG1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIFxuICAgICAgICAgICAgICAgIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImZvcm1hdFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWwgJiYgJCh0aGlzLmVsKS50cmlnZ2VyKFwic2V0dmFsdWVcIiwgWyB2YWx1ZSBdKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmFseXNlTWFzazogYW5hbHlzZU1hc2tcbiAgICAgICAgfSwgSW5wdXRtYXNrLmV4dGVuZERlZmF1bHRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgJC5leHRlbmQoITAsIElucHV0bWFzay5wcm90b3R5cGUuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICB9LCBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMgPSBmdW5jdGlvbihkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAkLmV4dGVuZCghMCwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZpbml0aW9ucywgZGVmaW5pdGlvbik7XG4gICAgICAgIH0sIElucHV0bWFzay5leHRlbmRBbGlhc2VzID0gZnVuY3Rpb24oYWxpYXMpIHtcbiAgICAgICAgICAgICQuZXh0ZW5kKCEwLCBJbnB1dG1hc2sucHJvdG90eXBlLmFsaWFzZXMsIGFsaWFzKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLmZvcm1hdCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zLCBtZXRhZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5mb3JtYXQodmFsdWUsIG1ldGFkYXRhKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLnVubWFzayA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLnVubWFza2VkdmFsdWUodmFsdWUpO1xuICAgICAgICB9LCBJbnB1dG1hc2suaXNWYWxpZCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLmlzVmFsaWQodmFsdWUpO1xuICAgICAgICB9LCBJbnB1dG1hc2sucmVtb3ZlID0gZnVuY3Rpb24oZWxlbXMpIHtcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIGVsZW1zICYmIChlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKSksIFxuICAgICAgICAgICAgZWxlbXMgPSBlbGVtcy5ub2RlTmFtZSA/IFsgZWxlbXMgXSA6IGVsZW1zLCAkLmVhY2goZWxlbXMsIGZ1bmN0aW9uKG5keCwgZWwpIHtcbiAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sgJiYgZWwuaW5wdXRtYXNrLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIElucHV0bWFzay5zZXRWYWx1ZSA9IGZ1bmN0aW9uKGVsZW1zLCB2YWx1ZSkge1xuICAgICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZWxlbXMgJiYgKGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpKSwgXG4gICAgICAgICAgICBlbGVtcyA9IGVsZW1zLm5vZGVOYW1lID8gWyBlbGVtcyBdIDogZWxlbXMsICQuZWFjaChlbGVtcywgZnVuY3Rpb24obmR4LCBlbCkge1xuICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzayA/IGVsLmlucHV0bWFzay5zZXRWYWx1ZSh2YWx1ZSkgOiAkKGVsKS50cmlnZ2VyKFwic2V0dmFsdWVcIiwgWyB2YWx1ZSBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZXNjYXBlUmVnZXhSZWdleCA9IG5ldyBSZWdFeHAoXCIoXFxcXFwiICsgWyBcIi9cIiwgXCIuXCIsIFwiKlwiLCBcIitcIiwgXCI/XCIsIFwifFwiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBcIlxcXFxcIiwgXCIkXCIsIFwiXlwiIF0uam9pbihcInxcXFxcXCIpICsgXCIpXCIsIFwiZ2ltXCIpO1xuICAgICAgICBJbnB1dG1hc2suZXNjYXBlUmVnZXggPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZShlc2NhcGVSZWdleFJlZ2V4LCBcIlxcXFwkMVwiKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLmRlcGVuZGVuY3lMaWIgPSAkLCB3aW5kb3cuSW5wdXRtYXNrID0gSW5wdXRtYXNrLCBtb2R1bGUuZXhwb3J0cyA9IElucHV0bWFzaztcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgICAgICAgICB9IDogZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgICAgICAgICAgfSwgX3R5cGVvZihvYmopO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3aW5kb3cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpLCBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICAgICAgZnVuY3Rpb24gaW5kZXhPZihsaXN0LCBlbGVtKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykgaWYgKGxpc3RbaV0gPT09IGVsZW0pIHJldHVybiBpO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgIT0gb2JqICYmIG9iaiA9PT0gb2JqLndpbmRvdztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0FycmF5bGlrZShvYmopIHtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLCBsdHlwZSA9IF90eXBlb2Yob2JqKTtcbiAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgIT09IGx0eXBlICYmICFpc1dpbmRvdyhvYmopICYmICghKDEgIT09IG9iai5ub2RlVHlwZSB8fCAhbGVuZ3RoKSB8fCAoXCJhcnJheVwiID09PSBsdHlwZSB8fCAwID09PSBsZW5ndGggfHwgXCJudW1iZXJcIiA9PSB0eXBlb2YgbGVuZ3RoICYmIDAgPCBsZW5ndGggJiYgbGVuZ3RoIC0gMSBpbiBvYmopKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gRGVwZW5kZW5jeUxpYihlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbSBpbnN0YW5jZW9mIERlcGVuZGVuY3lMaWIgPyBlbGVtIDogdGhpcyBpbnN0YW5jZW9mIERlcGVuZGVuY3lMaWIgPyB2b2lkIChudWxsICE9IGVsZW0gJiYgZWxlbSAhPT0gd2luZG93ICYmICh0aGlzWzBdID0gZWxlbS5ub2RlTmFtZSA/IGVsZW0gOiB2b2lkIDAgIT09IGVsZW1bMF0gJiYgZWxlbVswXS5ub2RlTmFtZSA/IGVsZW1bMF0gOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW0pLCBcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gdGhpc1swXSAmJiBudWxsICE9PSB0aGlzWzBdICYmICh0aGlzWzBdLmV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnkgfHwge30pKSkgOiBuZXcgRGVwZW5kZW5jeUxpYihlbGVtKTtcbiAgICAgICAgfVxuICAgICAgICBEZXBlbmRlbmN5TGliLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIG9uOiBmdW5jdGlvbiBvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGRFdmVudChldiwgbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciA/IGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihldiwgaGFuZGxlciwgITEpIDogZWxlbS5hdHRhY2hFdmVudCAmJiBlbGVtLmF0dGFjaEV2ZW50KFwib25cIiArIGV2LCBoYW5kbGVyKSwgXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdID0gZXZlbnRSZWdpc3RyeVtldl0gfHwge30sIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0gPSBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdIHx8IFtdLCBcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQodGhpc1swXSkpIGZvciAodmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdLCBfZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKSwgZW5keCA9IDA7IGVuZHggPCBfZXZlbnRzLmxlbmd0aDsgZW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuc0V2ZW50ID0gX2V2ZW50c1tlbmR4XS5zcGxpdChcIi5cIiksIGV2ID0gbnNFdmVudFswXSwgbmFtZXNwYWNlID0gbnNFdmVudFsxXSB8fCBcImdsb2JhbFwiO1xuICAgICAgICAgICAgICAgICAgICBhZGRFdmVudChldiwgbmFtZXNwYWNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb2ZmOiBmdW5jdGlvbiBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVnaXN0cnksIGVsZW07XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlRXZlbnQoZXYsIG5hbWVzcGFjZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXYgaW4gZXZlbnRSZWdpc3RyeSA9PSAhMCkgaWYgKGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgaGFuZGxlciwgITEpIDogZWxlbS5kZXRhY2hFdmVudCAmJiBlbGVtLmRldGFjaEV2ZW50KFwib25cIiArIGV2LCBoYW5kbGVyKSwgXG4gICAgICAgICAgICAgICAgICAgIFwiZ2xvYmFsXCIgPT09IG5hbWVzcGFjZSkgZm9yICh2YXIgbm1zcCBpbiBldmVudFJlZ2lzdHJ5W2V2XSkgZXZlbnRSZWdpc3RyeVtldl1bbm1zcF0uc3BsaWNlKGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLmluZGV4T2YoaGFuZGxlciksIDEpOyBlbHNlIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0uc3BsaWNlKGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0uaW5kZXhPZihoYW5kbGVyKSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVOYW1lc3BhY2UoZXYsIG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZ0cyA9IFtdLCBobmR4LCBobmRMO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA8IGV2Lmxlbmd0aCkgaWYgKHZvaWQgMCA9PT0gaGFuZGxlcikgZm9yIChobmR4ID0gMCwgaG5kTCA9IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoOyBobmR4IDwgaG5kTDsgaG5keCsrKSBldnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2UgJiYgMCA8IG5hbWVzcGFjZS5sZW5ndGggPyBuYW1lc3BhY2UgOiBcImdsb2JhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXVtobmR4XVxuICAgICAgICAgICAgICAgICAgICB9KTsgZWxzZSBldnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2UgJiYgMCA8IG5hbWVzcGFjZS5sZW5ndGggPyBuYW1lc3BhY2UgOiBcImdsb2JhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICB9KTsgZWxzZSBpZiAoMCA8IG5hbWVzcGFjZS5sZW5ndGgpIGZvciAodmFyIGV2TmR4IGluIGV2ZW50UmVnaXN0cnkpIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldk5keF0pIGlmIChubXNwID09PSBuYW1lc3BhY2UpIGlmICh2b2lkIDAgPT09IGhhbmRsZXIpIGZvciAoaG5keCA9IDAsIFxuICAgICAgICAgICAgICAgICAgICBobmRMID0gZXZlbnRSZWdpc3RyeVtldk5keF1bbm1zcF0ubGVuZ3RoOyBobmR4IDwgaG5kTDsgaG5keCsrKSBldnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2TmR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBubXNwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZXZlbnRSZWdpc3RyeVtldk5keF1bbm1zcF1baG5keF1cbiAgICAgICAgICAgICAgICAgICAgfSk7IGVsc2UgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2OiBldk5keCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogbm1zcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldnRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQodGhpc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeSA9IHRoaXNbMF0uZXZlbnRSZWdpc3RyeSwgZWxlbSA9IHRoaXNbMF07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9ldmVudHMgPSBldmVudHMuc3BsaXQoXCIgXCIpLCBlbmR4ID0gMDsgZW5keCA8IF9ldmVudHMubGVuZ3RoOyBlbmR4KyspIGZvciAodmFyIG5zRXZlbnQgPSBfZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSwgb2ZmRXZlbnRzID0gcmVzb2x2ZU5hbWVzcGFjZShuc0V2ZW50WzBdLCBuc0V2ZW50WzFdKSwgaSA9IDAsIG9mZkV2ZW50c0wgPSBvZmZFdmVudHMubGVuZ3RoOyBpIDwgb2ZmRXZlbnRzTDsgaSsrKSByZW1vdmVFdmVudChvZmZFdmVudHNbaV0uZXYsIG9mZkV2ZW50c1tpXS5uYW1lc3BhY2UsIG9mZkV2ZW50c1tpXS5oYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcihldmVudHMsIGFyZ3VtZW50XzEpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQodGhpc1swXSkpIGZvciAodmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdLCBfZXZlbnRzID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZXZlbnRzID8gZXZlbnRzLnNwbGl0KFwiIFwiKSA6IFsgZXZlbnRzLnR5cGUgXSwgZW5keCA9IDA7IGVuZHggPCBfZXZlbnRzLmxlbmd0aDsgZW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuc0V2ZW50ID0gX2V2ZW50c1tlbmR4XS5zcGxpdChcIi5cIiksIGV2ID0gbnNFdmVudFswXSwgbmFtZXNwYWNlID0gbnNFdmVudFsxXSB8fCBcImdsb2JhbFwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBkb2N1bWVudCAmJiBcImdsb2JhbFwiID09PSBuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldm50LCBpLCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlczogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiBhcmd1bWVudF8xXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudCA9IG5ldyBDdXN0b21FdmVudChldiwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpLCBldm50LmluaXRDdXN0b21FdmVudChldiwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLnR5cGUgJiYgRGVwZW5kZW5jeUxpYi5leHRlbmQoZXZudCwgZXZlbnRzKSwgZWxlbS5kaXNwYXRjaEV2ZW50KGV2bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGV2bnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpLCBldm50LmV2ZW50VHlwZSA9IGV2LCBldm50LmRldGFpbCA9IGFyZ3VtZW50XzEsIFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLnR5cGUgJiYgRGVwZW5kZW5jeUxpYi5leHRlbmQoZXZudCwgZXZlbnRzKSwgZWxlbS5maXJlRXZlbnQoXCJvblwiICsgZXZudC5ldmVudFR5cGUsIGV2bnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZvaWQgMCAhPT0gZXZlbnRSZWdpc3RyeVtldl0pIGlmIChldmVudHMgPSBldmVudHMudHlwZSA/IGV2ZW50cyA6IERlcGVuZGVuY3lMaWIuRXZlbnQoZXZlbnRzKSwgXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cy5kZXRhaWwgPSBhcmd1bWVudHMuc2xpY2UoMSksIFwiZ2xvYmFsXCIgPT09IG5hbWVzcGFjZSkgZm9yICh2YXIgbm1zcCBpbiBldmVudFJlZ2lzdHJ5W2V2XSkgZm9yIChpID0gMDsgaSA8IGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLmxlbmd0aDsgaSsrKSBldmVudFJlZ2lzdHJ5W2V2XVtubXNwXVtpXS5hcHBseShlbGVtLCBhcmd1bWVudHMpOyBlbHNlIGZvciAoaSA9IDA7IGkgPCBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdLmxlbmd0aDsgaSsrKSBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdW2ldLmFwcGx5KGVsZW0sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBEZXBlbmRlbmN5TGliLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG9iajtcbiAgICAgICAgfSwgRGVwZW5kZW5jeUxpYi5ub29wID0gZnVuY3Rpb24oKSB7fSwgRGVwZW5kZW5jeUxpYi5pc0FycmF5ID0gQXJyYXkuaXNBcnJheSwgRGVwZW5kZW5jeUxpYi5pbkFycmF5ID0gZnVuY3Rpb24oZWxlbSwgYXJyLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBhcnIgPyAtMSA6IGluZGV4T2YoYXJyLCBlbGVtLCBpKTtcbiAgICAgICAgfSwgRGVwZW5kZW5jeUxpYi52YWxIb29rcyA9IHZvaWQgMCwgRGVwZW5kZW5jeUxpYi5pc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJvYmplY3RcIiA9PT0gX3R5cGVvZihvYmopICYmICFvYmoubm9kZVR5cGUgJiYgIWlzV2luZG93KG9iaikgJiYgIShvYmouY29uc3RydWN0b3IgJiYgIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiKSk7XG4gICAgICAgIH0sIERlcGVuZGVuY3lMaWIuZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsIHRhcmdldCA9IGFyZ3VtZW50c1swXSB8fCB7fSwgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIGRlZXAgPSAhMTtcbiAgICAgICAgICAgIGZvciAoXCJib29sZWFuXCIgPT0gdHlwZW9mIHRhcmdldCAmJiAoZGVlcCA9IHRhcmdldCwgdGFyZ2V0ID0gYXJndW1lbnRzW2ldIHx8IHt9LCBcbiAgICAgICAgICAgIGkrKyksIFwib2JqZWN0XCIgPT09IF90eXBlb2YodGFyZ2V0KSB8fCBEZXBlbmRlbmN5TGliLmlzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0ID0ge30pLCBcbiAgICAgICAgICAgIGkgPT09IGxlbmd0aCAmJiAodGFyZ2V0ID0gdGhpcywgaS0tKTsgaSA8IGxlbmd0aDsgaSsrKSBpZiAobnVsbCAhPSAob3B0aW9ucyA9IGFyZ3VtZW50c1tpXSkpIGZvciAobmFtZSBpbiBvcHRpb25zKSBzcmMgPSB0YXJnZXRbbmFtZV0sIFxuICAgICAgICAgICAgY29weSA9IG9wdGlvbnNbbmFtZV0sIHRhcmdldCAhPT0gY29weSAmJiAoZGVlcCAmJiBjb3B5ICYmIChEZXBlbmRlbmN5TGliLmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gRGVwZW5kZW5jeUxpYi5pc0FycmF5KGNvcHkpKSkgPyAoY2xvbmUgPSBjb3B5SXNBcnJheSA/IChjb3B5SXNBcnJheSA9ICExLCBcbiAgICAgICAgICAgIHNyYyAmJiBEZXBlbmRlbmN5TGliLmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdKSA6IHNyYyAmJiBEZXBlbmRlbmN5TGliLmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9LCBcbiAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IERlcGVuZGVuY3lMaWIuZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KSkgOiB2b2lkIDAgIT09IGNvcHkgJiYgKHRhcmdldFtuYW1lXSA9IGNvcHkpKTtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH0sIERlcGVuZGVuY3lMaWIuZWFjaCA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSwgaSA9IDA7XG4gICAgICAgICAgICBpZiAoaXNBcnJheWxpa2Uob2JqKSkgZm9yICh2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aCAmJiAodmFsdWUgPSBjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKSwgXG4gICAgICAgICAgICAhMSAhPT0gdmFsdWUpOyBpKyspIDsgZWxzZSBmb3IgKGkgaW4gb2JqKSBpZiAodmFsdWUgPSBjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKSwgXG4gICAgICAgICAgICAhMSA9PT0gdmFsdWUpIGJyZWFrO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwgRGVwZW5kZW5jeUxpYi5kYXRhID0gZnVuY3Rpb24ob3duZXIsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHZhbHVlKSByZXR1cm4gb3duZXIuX19kYXRhID8gb3duZXIuX19kYXRhW2tleV0gOiBudWxsO1xuICAgICAgICAgICAgb3duZXIuX19kYXRhID0gb3duZXIuX19kYXRhIHx8IHt9LCBvd25lci5fX2RhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICB9LCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA/IERlcGVuZGVuY3lMaWIuRXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQgOiAoRGVwZW5kZW5jeUxpYi5FdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7XG4gICAgICAgICAgICAgICAgYnViYmxlczogITEsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogITEsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB2b2lkIDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgICAgICAgIHJldHVybiBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpLCBcbiAgICAgICAgICAgIGV2dDtcbiAgICAgICAgfSwgRGVwZW5kZW5jeUxpYi5FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlKSwgbW9kdWxlLmV4cG9ydHMgPSBEZXBlbmRlbmN5TGliO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xuICAgICAgICBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICAgICAgICAgIH0sIF90eXBlb2Yob2JqKTtcbiAgICAgICAgfVxuICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IG5ldyAoZXZhbChcInJlcXVpcmUoJ2pzZG9tJykuSlNET01cIikpKFwiXCIpLndpbmRvdztcbiAgICAgICAgfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18sIGV4cG9ydHMsIG1vZHVsZSksIHZvaWQgMCA9PT0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gfHwgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZU1hc2tTZXQob3B0cywgbm9jYWNoZSkge1xuICAgICAgICAgICAgdmFyIG1zO1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrKG1hc2ssIG1ldGFkYXRhLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4TWFzayA9ICExLCBtYXNrc2V0RGVmaW5pdGlvbiwgbWFza2RlZktleTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gbWFzayAmJiBcIlwiICE9PSBtYXNrIHx8IChyZWdleE1hc2sgPSBudWxsICE9PSBvcHRzLnJlZ2V4LCBtYXNrID0gcmVnZXhNYXNrID8gKG1hc2sgPSBvcHRzLnJlZ2V4LCBcbiAgICAgICAgICAgICAgICBtYXNrLnJlcGxhY2UoL14oXFxeKSguKikoXFwkKSQvLCBcIiQyXCIpKSA6IChyZWdleE1hc2sgPSAhMCwgXCIuKlwiKSksIDEgPT09IG1hc2subGVuZ3RoICYmICExID09PSBvcHRzLmdyZWVkeSAmJiAwICE9PSBvcHRzLnJlcGVhdCAmJiAob3B0cy5wbGFjZWhvbGRlciA9IFwiXCIpLCBcbiAgICAgICAgICAgICAgICAwIDwgb3B0cy5yZXBlYXQgfHwgXCIqXCIgPT09IG9wdHMucmVwZWF0IHx8IFwiK1wiID09PSBvcHRzLnJlcGVhdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVwZWF0U3RhcnQgPSBcIipcIiA9PT0gb3B0cy5yZXBlYXQgPyAwIDogXCIrXCIgPT09IG9wdHMucmVwZWF0ID8gMSA6IG9wdHMucmVwZWF0O1xuICAgICAgICAgICAgICAgICAgICBtYXNrID0gb3B0cy5ncm91cG1hcmtlclswXSArIG1hc2sgKyBvcHRzLmdyb3VwbWFya2VyWzFdICsgb3B0cy5xdWFudGlmaWVybWFya2VyWzBdICsgcmVwZWF0U3RhcnQgKyBcIixcIiArIG9wdHMucmVwZWF0ICsgb3B0cy5xdWFudGlmaWVybWFya2VyWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza2RlZktleSA9IHJlZ2V4TWFzayA/IFwicmVnZXhfXCIgKyBvcHRzLnJlZ2V4IDogb3B0cy5udW1lcmljSW5wdXQgPyBtYXNrLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogbWFzaywgXG4gICAgICAgICAgICAgICAgITEgIT09IG9wdHMua2VlcFN0YXRpYyAmJiAobWFza2RlZktleSA9IFwia3NfXCIgKyBtYXNrZGVmS2V5KSwgdm9pZCAwID09PSBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0gfHwgITAgPT09IG5vY2FjaGUgPyAobWFza3NldERlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2s6IG1hc2ssXG4gICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbjogSW5wdXRtYXNrLnByb3RvdHlwZS5hbmFseXNlTWFzayhtYXNrLCByZWdleE1hc2ssIG9wdHMpLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZFBvc2l0aW9uczoge30sXG4gICAgICAgICAgICAgICAgICAgIF9idWZmZXI6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgIHRlc3RzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgZXhjbHVkZXM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1hc2tMZW5ndGg6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgaml0T2Zmc2V0OiB7fVxuICAgICAgICAgICAgICAgIH0sICEwICE9PSBub2NhY2hlICYmIChJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0gPSBtYXNrc2V0RGVmaW5pdGlvbiwgXG4gICAgICAgICAgICAgICAgbWFza3NldERlZmluaXRpb24gPSAkLmV4dGVuZCghMCwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSkpKSA6IG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQoITAsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pLCBcbiAgICAgICAgICAgICAgICBtYXNrc2V0RGVmaW5pdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5tYXNrKSAmJiAob3B0cy5tYXNrID0gb3B0cy5tYXNrKG9wdHMpKSwgJC5pc0FycmF5KG9wdHMubWFzaykpIHtcbiAgICAgICAgICAgICAgICBpZiAoMSA8IG9wdHMubWFzay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gb3B0cy5rZWVwU3RhdGljICYmIChvcHRzLmtlZXBTdGF0aWMgPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHRNYXNrID0gb3B0cy5ncm91cG1hcmtlclswXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuZWFjaChvcHRzLmlzUlRMID8gb3B0cy5tYXNrLnJldmVyc2UoKSA6IG9wdHMubWFzaywgZnVuY3Rpb24obmR4LCBtc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIDEgPCBhbHRNYXNrLmxlbmd0aCAmJiAoYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyWzFdICsgb3B0cy5hbHRlcm5hdG9ybWFya2VyICsgb3B0cy5ncm91cG1hcmtlclswXSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBtc2subWFzayB8fCAkLmlzRnVuY3Rpb24obXNrLm1hc2spID8gYWx0TWFzayArPSBtc2sgOiBhbHRNYXNrICs9IG1zay5tYXNrO1xuICAgICAgICAgICAgICAgICAgICB9KSwgYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyWzFdLCBnZW5lcmF0ZU1hc2soYWx0TWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy5tYXNrID0gb3B0cy5tYXNrLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IG9wdHMua2VlcFN0YXRpYyAmJiAob3B0cy5rZWVwU3RhdGljID0gITEpLCBtcyA9IG9wdHMubWFzayAmJiB2b2lkIDAgIT09IG9wdHMubWFzay5tYXNrICYmICEkLmlzRnVuY3Rpb24ob3B0cy5tYXNrLm1hc2spID8gZ2VuZXJhdGVNYXNrKG9wdHMubWFzay5tYXNrLCBvcHRzLm1hc2ssIG9wdHMpIDogZ2VuZXJhdGVNYXNrKG9wdHMubWFzaywgb3B0cy5tYXNrLCBvcHRzKSwgXG4gICAgICAgICAgICBtcztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhbmFseXNlTWFzayhtYXNrLCByZWdleE1hc2ssIG9wdHMpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbml6ZXIgPSAvKD86Wz8qK118XFx7WzAtOSsqXSsoPzosWzAtOSsqXSopPyg/OlxcfFswLTkrKl0qKT9cXH0pfFteLj8qK14ke1tdKCl8XFxcXF0rfC4vZywgcmVnZXhUb2tlbml6ZXIgPSAvXFxbXFxeP10/KD86W15cXFxcXFxdXSt8XFxcXFtcXFNcXHNdPykqXT98XFxcXCg/OjAoPzpbMC0zXVswLTddezAsMn18WzQtN11bMC03XT8pP3xbMS05XVswLTldKnx4WzAtOUEtRmEtZl17Mn18dVswLTlBLUZhLWZdezR9fGNbQS1aYS16XXxbXFxTXFxzXT8pfFxcKCg/OlxcP1s6PSFdPyk/fCg/Ols/KitdfFxce1swLTldKyg/OixbMC05XSopP1xcfSlcXD8/fFteLj8qK14ke1soKXxcXFxcXSt8Li9nLCBlc2NhcGVkID0gITEsIGN1cnJlbnRUb2tlbiA9IG5ldyBNYXNrVG9rZW4oKSwgbWF0Y2gsIG0sIG9wZW5lbmluZ3MgPSBbXSwgbWFza1Rva2VucyA9IFtdLCBvcGVuaW5nVG9rZW4sIGN1cnJlbnRPcGVuaW5nVG9rZW4sIGFsdGVybmF0b3IsIGxhc3RNYXRjaCwgY2xvc2VSZWdleEdyb3VwID0gITE7XG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrVG9rZW4oaXNHcm91cCwgaXNPcHRpb25hbCwgaXNRdWFudGlmaWVyLCBpc0FsdGVybmF0b3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXSwgdGhpcy5vcGVuR3JvdXAgPSBpc0dyb3VwIHx8ICExLCB0aGlzLmFsdGVybmF0b3JHcm91cCA9ICExLCB0aGlzLmlzR3JvdXAgPSBpc0dyb3VwIHx8ICExLCBcbiAgICAgICAgICAgICAgICB0aGlzLmlzT3B0aW9uYWwgPSBpc09wdGlvbmFsIHx8ICExLCB0aGlzLmlzUXVhbnRpZmllciA9IGlzUXVhbnRpZmllciB8fCAhMSwgdGhpcy5pc0FsdGVybmF0b3IgPSBpc0FsdGVybmF0b3IgfHwgITEsIFxuICAgICAgICAgICAgICAgIHRoaXMucXVhbnRpZmllciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IDFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaW5zZXJ0VGVzdERlZmluaXRpb24obXRva2VuLCBlbGVtZW50LCBwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdm9pZCAwICE9PSBwb3NpdGlvbiA/IHBvc2l0aW9uIDogbXRva2VuLm1hdGNoZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2TWF0Y2ggPSBtdG9rZW4ubWF0Y2hlc1twb3NpdGlvbiAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChyZWdleE1hc2spIDAgPT09IGVsZW1lbnQuaW5kZXhPZihcIltcIikgfHwgZXNjYXBlZCAmJiAvXFxcXGR8XFxcXHN8XFxcXHddL2kudGVzdChlbGVtZW50KSB8fCBcIi5cIiA9PT0gZWxlbWVudCA/IG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgIGZuOiBuZXcgUmVnRXhwKGVsZW1lbnQsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6ICExLFxuICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogdm9pZCAwID09PSBwcmV2TWF0Y2ggPyBcIm1hc3RlclwiIDogcHJldk1hdGNoLmRlZiAhPT0gZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBkZWY6IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudFxuICAgICAgICAgICAgICAgIH0pIDogKGVzY2FwZWQgJiYgKGVsZW1lbnQgPSBlbGVtZW50W2VsZW1lbnQubGVuZ3RoIC0gMV0pLCAkLmVhY2goZWxlbWVudC5zcGxpdChcIlwiKSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV0sIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbjogL1thLXpdL2kudGVzdChvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgfHwgbG1udCkgPyBuZXcgUmVnRXhwKFwiW1wiICsgKG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBsbW50KSArIFwiXVwiLCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIikgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiB2b2lkIDAgPT09IHByZXZNYXRjaCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSBsbW50ICYmICEwICE9PSBwcmV2TWF0Y2guc3RhdGljLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgfHwgbG1udCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB2b2lkIDAgIT09IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCA/IGxtbnQgOiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVEZWY6IChlc2NhcGVkID8gXCInXCIgOiBcIlwiKSArIGxtbnRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSkpLCBlc2NhcGVkID0gITE7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza2RlZiA9IChvcHRzLmRlZmluaXRpb25zID8gb3B0cy5kZWZpbml0aW9uc1tlbGVtZW50XSA6IHZvaWQgMCkgfHwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZpbml0aW9uc1tlbGVtZW50XTtcbiAgICAgICAgICAgICAgICAgICAgbWFza2RlZiAmJiAhZXNjYXBlZCA/IG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbjogbWFza2RlZi52YWxpZGF0b3IgPyBcInN0cmluZ1wiID09IHR5cGVvZiBtYXNrZGVmLnZhbGlkYXRvciA/IG5ldyBSZWdFeHAobWFza2RlZi52YWxpZGF0b3IsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSA6IG5ldyBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlc3QgPSBtYXNrZGVmLnZhbGlkYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoXCIuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljOiBtYXNrZGVmLnN0YXRpYyB8fCAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiB2b2lkIDAgPT09IHByZXZNYXRjaCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSAobWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBtYXNrZGVmLmNhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogbWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWFza2RlZi5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlZDogbWFza2RlZi5nZW5lcmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgfSkgOiAobXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuOiAvW2Etel0vaS50ZXN0KG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50KSA/IG5ldyBSZWdFeHAoXCJbXCIgKyAob3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQpICsgXCJdXCIsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWM6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6ICExLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHZvaWQgMCA9PT0gcHJldk1hdGNoID8gXCJtYXN0ZXJcIiA6IHByZXZNYXRjaC5kZWYgIT09IGVsZW1lbnQgJiYgITAgIT09IHByZXZNYXRjaC5zdGF0aWMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHZvaWQgMCAhPT0gb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sID8gZWxlbWVudCA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogKGVzY2FwZWQgPyBcIidcIiA6IFwiXCIpICsgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9KSwgZXNjYXBlZCA9ICExKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB2ZXJpZnlHcm91cE1hcmtlcihtYXNrVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBtYXNrVG9rZW4gJiYgbWFza1Rva2VuLm1hdGNoZXMgJiYgJC5lYWNoKG1hc2tUb2tlbi5tYXRjaGVzLCBmdW5jdGlvbihuZHgsIHRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0VG9rZW4gPSBtYXNrVG9rZW4ubWF0Y2hlc1tuZHggKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgKHZvaWQgMCA9PT0gbmV4dFRva2VuIHx8IHZvaWQgMCA9PT0gbmV4dFRva2VuLm1hdGNoZXMgfHwgITEgPT09IG5leHRUb2tlbi5pc1F1YW50aWZpZXIpICYmIHRva2VuICYmIHRva2VuLmlzR3JvdXAgJiYgKHRva2VuLmlzR3JvdXAgPSAhMSwgXG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4TWFzayB8fCAoaW5zZXJ0VGVzdERlZmluaXRpb24odG9rZW4sIG9wdHMuZ3JvdXBtYXJrZXJbMF0sIDApLCAhMCAhPT0gdG9rZW4ub3Blbkdyb3VwICYmIGluc2VydFRlc3REZWZpbml0aW9uKHRva2VuLCBvcHRzLmdyb3VwbWFya2VyWzFdKSkpLCBcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5R3JvdXBNYXJrZXIodG9rZW4pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGVmYXVsdENhc2UoKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPCBvcGVuZW5pbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSwgaW5zZXJ0VGVzdERlZmluaXRpb24oY3VycmVudE9wZW5pbmdUb2tlbiwgbSksIFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXAgJiYgKGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwID0gITEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgMCA8IG9wZW5lbmluZ3MubGVuZ3RoID8gKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcikpIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50VG9rZW4sIG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZVRva2VucyhtYXNrVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXZlcnNlU3RhdGljKHN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdCA9PT0gb3B0cy5vcHRpb25hbG1hcmtlclswXSA/IHN0ID0gb3B0cy5vcHRpb25hbG1hcmtlclsxXSA6IHN0ID09PSBvcHRzLm9wdGlvbmFsbWFya2VyWzFdID8gc3QgPSBvcHRzLm9wdGlvbmFsbWFya2VyWzBdIDogc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXJbMF0gPyBzdCA9IG9wdHMuZ3JvdXBtYXJrZXJbMV0gOiBzdCA9PT0gb3B0cy5ncm91cG1hcmtlclsxXSAmJiAoc3QgPSBvcHRzLmdyb3VwbWFya2VyWzBdKSwgXG4gICAgICAgICAgICAgICAgICAgIHN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtYXRjaCBpbiBtYXNrVG9rZW4ubWF0Y2hlcyA9IG1hc2tUb2tlbi5tYXRjaGVzLnJldmVyc2UoKSwgbWFza1Rva2VuLm1hdGNoZXMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFza1Rva2VuLm1hdGNoZXMsIG1hdGNoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW50TWF0Y2ggPSBwYXJzZUludChtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0uaXNRdWFudGlmaWVyICYmIG1hc2tUb2tlbi5tYXRjaGVzW2ludE1hdGNoICsgMV0gJiYgbWFza1Rva2VuLm1hdGNoZXNbaW50TWF0Y2ggKyAxXS5pc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXQgPSBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF07XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UobWF0Y2gsIDEpLCBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UoaW50TWF0Y2ggKyAxLCAwLCBxdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0ubWF0Y2hlcyA/IG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSA9IHJldmVyc2VUb2tlbnMobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdKSA6IG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSA9IHJldmVyc2VTdGF0aWMobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdyb3VwaWZ5KG1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXBUb2tlbiA9IG5ldyBNYXNrVG9rZW4oITApO1xuICAgICAgICAgICAgICAgIHJldHVybiBncm91cFRva2VuLm9wZW5Hcm91cCA9ICExLCBncm91cFRva2VuLm1hdGNoZXMgPSBtYXRjaGVzLCBncm91cFRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvc2VHcm91cCgpIHtcbiAgICAgICAgICAgICAgICBpZiAob3BlbmluZ1Rva2VuID0gb3BlbmVuaW5ncy5wb3AoKSwgb3BlbmluZ1Rva2VuLm9wZW5Hcm91cCA9ICExLCB2b2lkIDAgIT09IG9wZW5pbmdUb2tlbikgaWYgKDAgPCBvcGVuZW5pbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSwgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKSwgXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4uaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9ICExLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5hbHRlcm5hdG9yR3JvdXAgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIDAgPCBvcGVuZW5pbmdzLmxlbmd0aCA/IChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pOyBlbHNlIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBncm91cFF1YW50aWZpZXIobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0TWF0Y2ggPSBtYXRjaGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0TWF0Y2guaXNRdWFudGlmaWVyICYmIChsYXN0TWF0Y2ggPSBncm91cGlmeShbIG1hdGNoZXMucG9wKCksIGxhc3RNYXRjaCBdKSksIFxuICAgICAgICAgICAgICAgIGxhc3RNYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAocmVnZXhNYXNrICYmIChvcHRzLm9wdGlvbmFsbWFya2VyWzBdID0gdm9pZCAwLCBvcHRzLm9wdGlvbmFsbWFya2VyWzFdID0gdm9pZCAwKTsgbWF0Y2ggPSByZWdleE1hc2sgPyByZWdleFRva2VuaXplci5leGVjKG1hc2spIDogdG9rZW5pemVyLmV4ZWMobWFzayk7ICkge1xuICAgICAgICAgICAgICAgIGlmIChtID0gbWF0Y2hbMF0sIHJlZ2V4TWFzaykgc3dpdGNoIChtLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIj9cIjpcbiAgICAgICAgICAgICAgICAgICAgbSA9IFwiezAsMX1cIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgICAgICAgICBtID0gXCJ7XCIgKyBtICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwifFwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gb3BlbmVuaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRSZWdleEdyb3VwID0gZ3JvdXBpZnkoY3VycmVudFRva2VuLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0UmVnZXhHcm91cC5vcGVuR3JvdXAgPSAhMCwgb3BlbmVuaW5ncy5wdXNoKGFsdFJlZ2V4R3JvdXApLCBjdXJyZW50VG9rZW4ubWF0Y2hlcyA9IFtdLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlUmVnZXhHcm91cCA9ICEwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXNjYXBlZCkgZGVmYXVsdENhc2UoKTsgZWxzZSBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD89XCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD8hXCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD88PVwiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBcIig/PCFcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5lc2NhcGVDaGFyOlxuICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gITAsIHJlZ2V4TWFzayAmJiBkZWZhdWx0Q2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLm9wdGlvbmFsbWFya2VyWzFdOlxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyWzFdOlxuICAgICAgICAgICAgICAgICAgICBjbG9zZUdyb3VwKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXJbMF06XG4gICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKCExLCAhMCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyWzBdOlxuICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2gobmV3IE1hc2tUb2tlbighMCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLnF1YW50aWZpZXJtYXJrZXJbMF06XG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWFudGlmaWVyID0gbmV3IE1hc2tUb2tlbighMSwgITEsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgbSA9IG0ucmVwbGFjZSgvW3t9XS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1xaiA9IG0uc3BsaXQoXCJ8XCIpLCBtcSA9IG1xalswXS5zcGxpdChcIixcIiksIG1xMCA9IGlzTmFOKG1xWzBdKSA/IG1xWzBdIDogcGFyc2VJbnQobXFbMF0pLCBtcTEgPSAxID09PSBtcS5sZW5ndGggPyBtcTAgOiBpc05hTihtcVsxXSkgPyBtcVsxXSA6IHBhcnNlSW50KG1xWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgXCIqXCIgIT09IG1xMCAmJiBcIitcIiAhPT0gbXEwIHx8IChtcTAgPSBcIipcIiA9PT0gbXExID8gMCA6IDEpLCBxdWFudGlmaWVyLnF1YW50aWZpZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46IG1xMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogbXExLFxuICAgICAgICAgICAgICAgICAgICAgICAgaml0OiBtcWpbMV1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSAwIDwgb3BlbmVuaW5ncy5sZW5ndGggPyBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0ubWF0Y2hlcyA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBtYXRjaGVzLnBvcCgpLCBtYXRjaC5pc0FsdGVybmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoZXMgPSBtYXRjaC5tYXRjaGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwVG9rZW4gPSBuZXcgTWFza1Rva2VuKCEwKSwgdG1wTWF0Y2ggPSBtYXRjaGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGdyb3VwVG9rZW4pLCBtYXRjaGVzID0gZ3JvdXBUb2tlbi5tYXRjaGVzLCBtYXRjaCA9IHRtcE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoLmlzR3JvdXAgfHwgKG1hdGNoID0gZ3JvdXBpZnkoWyBtYXRjaCBdKSksIG1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoZXMucHVzaChxdWFudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5hbHRlcm5hdG9ybWFya2VyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoMCA8IG9wZW5lbmluZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlRva2VuID0gY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzW2N1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGN1cnJlbnRPcGVuaW5nVG9rZW4ub3Blbkdyb3VwICYmICh2b2lkIDAgPT09IHN1YlRva2VuLm1hdGNoZXMgfHwgITEgPT09IHN1YlRva2VuLmlzR3JvdXAgJiYgITEgPT09IHN1YlRva2VuLmlzQWx0ZXJuYXRvcikgPyBvcGVuZW5pbmdzLnBvcCgpIDogZ3JvdXBRdWFudGlmaWVyKGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBsYXN0TWF0Y2ggPSBncm91cFF1YW50aWZpZXIoY3VycmVudFRva2VuLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLmlzQWx0ZXJuYXRvcikgb3BlbmVuaW5ncy5wdXNoKGxhc3RNYXRjaCk7IGVsc2UgaWYgKGxhc3RNYXRjaC5hbHRlcm5hdG9yR3JvdXAgPyAoYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCksIFxuICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2guYWx0ZXJuYXRvckdyb3VwID0gITEpIDogYWx0ZXJuYXRvciA9IG5ldyBNYXNrVG9rZW4oITEsICExLCAhMSwgITApLCBhbHRlcm5hdG9yLm1hdGNoZXMucHVzaChsYXN0TWF0Y2gpLCBcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3IpLCBsYXN0TWF0Y2gub3Blbkdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2gub3Blbkdyb3VwID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ZXJuYXRvckdyb3VwID0gbmV3IE1hc2tUb2tlbighMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yR3JvdXAuYWx0ZXJuYXRvckdyb3VwID0gITAsIG9wZW5lbmluZ3MucHVzaChhbHRlcm5hdG9yR3JvdXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q2FzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY2xvc2VSZWdleEdyb3VwICYmIGNsb3NlR3JvdXAoKTsgMCA8IG9wZW5lbmluZ3MubGVuZ3RoOyApIG9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3MucG9wKCksIFxuICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xuICAgICAgICAgICAgcmV0dXJuIDAgPCBjdXJyZW50VG9rZW4ubWF0Y2hlcy5sZW5ndGggJiYgKHZlcmlmeUdyb3VwTWFya2VyKGN1cnJlbnRUb2tlbiksIG1hc2tUb2tlbnMucHVzaChjdXJyZW50VG9rZW4pKSwgXG4gICAgICAgICAgICAob3B0cy5udW1lcmljSW5wdXQgfHwgb3B0cy5pc1JUTCkgJiYgcmV2ZXJzZVRva2VucyhtYXNrVG9rZW5zWzBdKSwgbWFza1Rva2VucztcbiAgICAgICAgfVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgICAgIGdlbmVyYXRlTWFza1NldDogZ2VuZXJhdGVNYXNrU2V0LFxuICAgICAgICAgICAgYW5hbHlzZU1hc2s6IGFuYWx5c2VNYXNrXG4gICAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKSwgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIHZhciBJbnB1dG1hc2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuICAgICAgICBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMoe1xuICAgICAgICAgICAgQToge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLFxuICAgICAgICAgICAgICAgIGNhc2luZzogXCJ1cHBlclwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCImXCI6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixcbiAgICAgICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiI1wiOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLUZhLWZdXCIsXG4gICAgICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpcFZhbGlkYXRvclJlZ2V4ID0gbmV3IFJlZ0V4cChcIjI1WzAtNV18MlswLTRdWzAtOV18WzAxXVswLTldWzAtOV1cIik7XG4gICAgICAgIGZ1bmN0aW9uIGlwVmFsaWRhdG9yKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hycyA9IC0xIDwgcG9zIC0gMSAmJiBcIi5cIiAhPT0gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPyAoY2hycyA9IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdICsgY2hycywgXG4gICAgICAgICAgICAtMSA8IHBvcyAtIDIgJiYgXCIuXCIgIT09IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdID8gbWFza3NldC5idWZmZXJbcG9zIC0gMl0gKyBjaHJzIDogXCIwXCIgKyBjaHJzKSA6IFwiMDBcIiArIGNocnMsIFxuICAgICAgICAgICAgaXBWYWxpZGF0b3JSZWdleC50ZXN0KGNocnMpO1xuICAgICAgICB9XG4gICAgICAgIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcbiAgICAgICAgICAgIGNzc3VuaXQ6IHtcbiAgICAgICAgICAgICAgICByZWdleDogXCJbKy1dP1swLTldK1xcXFwuPyhbMC05XSspPyhweHxlbXxyZW18ZXh8JXxpbnxjbXxtbXxwdHxwYylcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVybDoge1xuICAgICAgICAgICAgICAgIHJlZ2V4OiBcIihodHRwcz98ZnRwKS8vLipcIixcbiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlwOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCJpW2lbaV1dLmpbaltqXV0ua1trW2tdXS5sW2xbbF1dXCIsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgaToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBpcFZhbGlkYXRvclxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBqOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGlwVmFsaWRhdG9yXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGs6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogaXBWYWxpZGF0b3JcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBpcFZhbGlkYXRvclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24gb25Vbk1hc2sobWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXRtb2RlOiBcIm51bWVyaWNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIqezEsNjR9Wy4qezEsNjR9XVsuKnsxLDY0fV1bLip7MSw2M31dQC17MSw2M30uLXsxLDYzfVsuLXsxLDYzfV1bLi17MSw2M31dXCIsXG4gICAgICAgICAgICAgICAgZ3JlZWR5OiAhMSxcbiAgICAgICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIixcbiAgICAgICAgICAgICAgICBvbkJlZm9yZVBhc3RlOiBmdW5jdGlvbiBvbkJlZm9yZVBhc3RlKHBhc3RlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXN0ZWRWYWx1ZSA9IHBhc3RlZFZhbHVlLnRvTG93ZXJDYXNlKCksIHBhc3RlZFZhbHVlLnJlcGxhY2UoXCJtYWlsdG86XCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCIqXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XFx1ZmYxMS1cXHVmZjE5QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1ISMkJSYnKisvPT9eX2B7fH1+LV1cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIi1cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXotXVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbiBvblVuTWFzayhtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFza2VkVmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnB1dG1vZGU6IFwiZW1haWxcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hYzoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiIyM6IyM6IyM6IyM6IyM6IyNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpbjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiVnsxM305ezR9XCIsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgVjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLUhKLU5QUi1aYS1oai1ucHItelxcXFxkXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xlYXJJbmNvbXBsZXRlOiAhMCxcbiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNzbjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiOTk5LTk5LTk5OTlcIixcbiAgICAgICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogZnVuY3Rpb24gcG9zdFZhbGlkYXRpb24oYnVmZmVyLCBwb3MsIGMsIGN1cnJlbnRSZXN1bHQsIG9wdHMsIG1hc2tzZXQsIHN0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gL14oPyEyMTktMDktOTk5OXwwNzgtMDUtMTEyMCkoPyE2NjZ8MDAwfDkuezJ9KS57M30tKD8hMDApLnsyfS0oPyEwezR9KS57NH0kLy50ZXN0KGJ1ZmZlci5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBtb2R1bGUuZXhwb3J0cyA9IElucHV0bWFzaztcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgICAgICAgICB9IDogZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgICAgICAgICAgfSwgX3R5cGVvZihvYmopO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSwgd2luZG93ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKSwgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsIHVhID0gd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBcIlwiLCBpZSA9IDAgPCB1YS5pbmRleE9mKFwiTVNJRSBcIikgfHwgMCA8IHVhLmluZGV4T2YoXCJUcmlkZW50L1wiKSwgbW9iaWxlID0gXCJvbnRvdWNoc3RhcnRcIiBpbiB3aW5kb3csIGllbW9iaWxlID0gL2llbW9iaWxlL2kudGVzdCh1YSksIGlwaG9uZSA9IC9pcGhvbmUvaS50ZXN0KHVhKSAmJiAhaWVtb2JpbGUsIGtleUNvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1hc2tTY29wZShhY3Rpb25PYmosIG1hc2tzZXQsIG9wdHMpIHtcbiAgICAgICAgICAgIG1hc2tzZXQgPSBtYXNrc2V0IHx8IHRoaXMubWFza3NldCwgb3B0cyA9IG9wdHMgfHwgdGhpcy5vcHRzO1xuICAgICAgICAgICAgdmFyIGlucHV0bWFzayA9IHRoaXMsIGVsID0gdGhpcy5lbCwgaXNSVEwgPSB0aGlzLmlzUlRMIHx8ICh0aGlzLmlzUlRMID0gb3B0cy5udW1lcmljSW5wdXQpLCB1bmRvVmFsdWUsICRlbCwgc2tpcEtleVByZXNzRXZlbnQgPSAhMSwgc2tpcElucHV0RXZlbnQgPSAhMSwgdmFsaWRhdGlvbkV2ZW50ID0gITEsIGlnbm9yYWJsZSA9ICExLCBtYXhMZW5ndGgsIG1vdXNlRW50ZXIgPSAhMSwgb3JpZ2luYWxQbGFjZWhvbGRlciA9IHZvaWQgMDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE1hc2tUZW1wbGF0ZShiYXNlT25JbnB1dCwgbWluaW1hbFBvcywgaW5jbHVkZU1vZGUsIG5vSml0LCBjbGVhck9wdGlvbmFsVGFpbCkge1xuICAgICAgICAgICAgICAgIHZhciBncmVlZHkgPSBvcHRzLmdyZWVkeTtcbiAgICAgICAgICAgICAgICBjbGVhck9wdGlvbmFsVGFpbCAmJiAob3B0cy5ncmVlZHkgPSAhMSksIG1pbmltYWxQb3MgPSBtaW5pbWFsUG9zIHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tUZW1wbGF0ZSA9IFtdLCBuZHhJbnRsenIsIHBvcyA9IDAsIHRlc3QsIHRlc3RQb3MsIGppdFJlbmRlclN0YXRpYztcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghMCA9PT0gYmFzZU9uSW5wdXQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdKSB0ZXN0UG9zID0gY2xlYXJPcHRpb25hbFRhaWwgJiYgITAgPT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5tYXRjaC5vcHRpb25hbGl0eSAmJiB2b2lkIDAgPT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zICsgMV0gJiYgKCEwID09PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uZ2VuZXJhdGVkSW5wdXQgfHwgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLmlucHV0ID09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciAmJiAwIDwgcG9zKSA/IGRldGVybWluZVRlc3RUZW1wbGF0ZShwb3MsIGdldFRlc3RzKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSkgOiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10sIFxuICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdGVzdFBvcy5tYXRjaCwgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCksIG1hc2tUZW1wbGF0ZS5wdXNoKCEwID09PSBpbmNsdWRlTW9kZSA/IHRlc3RQb3MuaW5wdXQgOiAhMSA9PT0gaW5jbHVkZU1vZGUgPyB0ZXN0Lm5hdGl2ZURlZiA6IGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCkpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpLCB0ZXN0ID0gdGVzdFBvcy5tYXRjaCwgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaml0TWFza2luZyA9ICEwICE9PSBub0ppdCAmJiAoITEgIT09IG9wdHMuaml0TWFza2luZyA/IG9wdHMuaml0TWFza2luZyA6IHRlc3Quaml0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGppdFJlbmRlclN0YXRpYyA9IGppdFJlbmRlclN0YXRpYyAmJiB0ZXN0LnN0YXRpYyAmJiB0ZXN0LmRlZiAhPT0gb3B0cy5ncm91cFNlcGFyYXRvciAmJiBudWxsID09PSB0ZXN0LmZuIHx8IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0gJiYgdGVzdC5zdGF0aWMgJiYgdGVzdC5kZWYgIT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgbnVsbCA9PT0gdGVzdC5mbiwgXG4gICAgICAgICAgICAgICAgICAgICAgICBqaXRSZW5kZXJTdGF0aWMgfHwgITEgPT09IGppdE1hc2tpbmcgfHwgdm9pZCAwID09PSBqaXRNYXNraW5nIHx8IFwibnVtYmVyXCIgPT0gdHlwZW9mIGppdE1hc2tpbmcgJiYgaXNGaW5pdGUoaml0TWFza2luZykgJiYgcG9zIDwgaml0TWFza2luZyA/IG1hc2tUZW1wbGF0ZS5wdXNoKCExID09PSBpbmNsdWRlTW9kZSA/IHRlc3QubmF0aXZlRGVmIDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSkgOiBqaXRSZW5kZXJTdGF0aWMgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICB9IHdoaWxlICgodm9pZCAwID09PSBtYXhMZW5ndGggfHwgcG9zIDwgbWF4TGVuZ3RoKSAmJiAoITAgIT09IHRlc3Quc3RhdGljIHx8IFwiXCIgIT09IHRlc3QuZGVmKSB8fCBwb3MgPCBtaW5pbWFsUG9zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIiA9PT0gbWFza1RlbXBsYXRlW21hc2tUZW1wbGF0ZS5sZW5ndGggLSAxXSAmJiBtYXNrVGVtcGxhdGUucG9wKCksICExID09PSBpbmNsdWRlTW9kZSAmJiB2b2lkIDAgIT09IG1hc2tzZXQubWFza0xlbmd0aCB8fCAobWFza3NldC5tYXNrTGVuZ3RoID0gcG9zIC0gMSksIFxuICAgICAgICAgICAgICAgIG9wdHMuZ3JlZWR5ID0gZ3JlZWR5LCBtYXNrVGVtcGxhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldE1hc2tTZXQoc29mdCkge1xuICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyID0gdm9pZCAwLCAhMCAhPT0gc29mdCAmJiAobWFza3NldC52YWxpZFBvc2l0aW9ucyA9IHt9LCBtYXNrc2V0LnAgPSAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExhc3RWYWxpZFBvc2l0aW9uKGNsb3Nlc3RUbywgc3RyaWN0LCB2YWxpZFBvc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBiZWZvcmUgPSAtMSwgYWZ0ZXIgPSAtMSwgdmFsaWRzID0gdmFsaWRQb3NpdGlvbnMgfHwgbWFza3NldC52YWxpZFBvc2l0aW9ucztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwb3NOZHggaW4gdm9pZCAwID09PSBjbG9zZXN0VG8gJiYgKGNsb3Nlc3RUbyA9IC0xKSwgdmFsaWRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwc05keCA9IHBhcnNlSW50KHBvc05keCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkc1twc05keF0gJiYgKHN0cmljdCB8fCAhMCAhPT0gdmFsaWRzW3BzTmR4XS5nZW5lcmF0ZWRJbnB1dCkgJiYgKHBzTmR4IDw9IGNsb3Nlc3RUbyAmJiAoYmVmb3JlID0gcHNOZHgpLCBcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VzdFRvIDw9IHBzTmR4ICYmIChhZnRlciA9IHBzTmR4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAtMSA9PT0gYmVmb3JlIHx8IGJlZm9yZSA9PSBjbG9zZXN0VG8gPyBhZnRlciA6IC0xID09IGFmdGVyID8gYmVmb3JlIDogY2xvc2VzdFRvIC0gYmVmb3JlIDwgYWZ0ZXIgLSBjbG9zZXN0VG8gPyBiZWZvcmUgOiBhZnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldERlY2lzaW9uVGFrZXIodHN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY2lzaW9uVGFrZXIgPSB0c3QubG9jYXRvclt0c3QuYWx0ZXJuYXRpb25dO1xuICAgICAgICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBkZWNpc2lvblRha2VyICYmIDAgPCBkZWNpc2lvblRha2VyLmxlbmd0aCAmJiAoZGVjaXNpb25UYWtlciA9IGRlY2lzaW9uVGFrZXIuc3BsaXQoXCIsXCIpWzBdKSwgXG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSBkZWNpc2lvblRha2VyID8gZGVjaXNpb25UYWtlci50b1N0cmluZygpIDogXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExvY2F0b3IodHN0LCBhbGlnbikge1xuICAgICAgICAgICAgICAgIHZhciBsb2NhdG9yID0gKG51bGwgIT0gdHN0LmFsdGVybmF0aW9uID8gdHN0Lm1sb2NbZ2V0RGVjaXNpb25UYWtlcih0c3QpXSA6IHRzdC5sb2NhdG9yKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChcIlwiICE9PSBsb2NhdG9yKSBmb3IgKDtsb2NhdG9yLmxlbmd0aCA8IGFsaWduOyApIGxvY2F0b3IgKz0gXCIwXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCB0ZXN0cykge1xuICAgICAgICAgICAgICAgIHBvcyA9IDAgPCBwb3MgPyBwb3MgLSAxIDogMDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhbHRUZXN0ID0gZ2V0VGVzdChwb3MpLCB0YXJnZXRMb2NhdG9yID0gZ2V0TG9jYXRvcihhbHRUZXN0KSwgdHN0TG9jYXRvciwgY2xvc2VzdCwgYmVzdE1hdGNoLCBuZHggPSAwOyBuZHggPCB0ZXN0cy5sZW5ndGg7IG5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0c3QgPSB0ZXN0c1tuZHhdO1xuICAgICAgICAgICAgICAgICAgICB0c3RMb2NhdG9yID0gZ2V0TG9jYXRvcih0c3QsIHRhcmdldExvY2F0b3IubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnModHN0TG9jYXRvciAtIHRhcmdldExvY2F0b3IpO1xuICAgICAgICAgICAgICAgICAgICAodm9pZCAwID09PSBjbG9zZXN0IHx8IFwiXCIgIT09IHRzdExvY2F0b3IgJiYgZGlzdGFuY2UgPCBjbG9zZXN0IHx8IGJlc3RNYXRjaCAmJiAhb3B0cy5ncmVlZHkgJiYgYmVzdE1hdGNoLm1hdGNoLm9wdGlvbmFsaXR5ICYmIFwibWFzdGVyXCIgPT09IGJlc3RNYXRjaC5tYXRjaC5uZXdCbG9ja01hcmtlciAmJiAoIXRzdC5tYXRjaC5vcHRpb25hbGl0eSB8fCAhdHN0Lm1hdGNoLm5ld0Jsb2NrTWFya2VyKSB8fCBiZXN0TWF0Y2ggJiYgYmVzdE1hdGNoLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiAhdHN0Lm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcikgJiYgKGNsb3Nlc3QgPSBkaXN0YW5jZSwgXG4gICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaCA9IHRzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiZXN0TWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSB8fCBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCBnZXRUZXN0cyhwb3MsIG5keEludGx6ciA/IG5keEludGx6ci5zbGljZSgpIDogbmR4SW50bHpyLCB0c3RQcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdChwb3MsIHRlc3RzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSA/IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSA6ICh0ZXN0cyB8fCBnZXRUZXN0cyhwb3MpKVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvcywgdGVzdERlZmluaXRpb24sIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB2YWxpZCA9ICExLCB0ZXN0cyA9IGdldFRlc3RzKHBvcyksIHRuZHggPSAwOyB0bmR4IDwgdGVzdHMubGVuZ3RoOyB0bmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RzW3RuZHhdLm1hdGNoICYmICghKHRlc3RzW3RuZHhdLm1hdGNoLm5hdGl2ZURlZiAhPT0gdGVzdERlZmluaXRpb24ubWF0Y2hbb3B0cy5zaGlmdFBvc2l0aW9ucyA/IFwiZGVmXCIgOiBcIm5hdGl2ZURlZlwiXSB8fCBvcHRzLnNoaWZ0UG9zaXRpb25zICYmIHRlc3REZWZpbml0aW9uLm1hdGNoLnN0YXRpYykgfHwgdGVzdHNbdG5keF0ubWF0Y2gubmF0aXZlRGVmID09PSB0ZXN0RGVmaW5pdGlvbi5tYXRjaC5uYXRpdmVEZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9ICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RzW3RuZHhdLm1hdGNoICYmIHRlc3RzW3RuZHhdLm1hdGNoLmRlZiA9PT0gdGVzdERlZmluaXRpb24ubWF0Y2gubmF0aXZlRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhMSA9PT0gdmFsaWQgJiYgdm9pZCAwICE9PSBtYXNrc2V0LmppdE9mZnNldFtwb3NdICYmICh2YWxpZCA9IHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvcyArIG1hc2tzZXQuaml0T2Zmc2V0W3Bvc10sIHRlc3REZWZpbml0aW9uLCBvcHRzKSksIFxuICAgICAgICAgICAgICAgIHZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tUb2tlbnMgPSBtYXNrc2V0Lm1hc2tUb2tlbiwgdGVzdFBvcyA9IG5keEludGx6ciA/IHRzdFBzIDogMCwgbmR4SW5pdGlhbGl6ZXIgPSBuZHhJbnRsenIgPyBuZHhJbnRsenIuc2xpY2UoKSA6IFsgMCBdLCBtYXRjaGVzID0gW10sIGluc2VydFN0b3AgPSAhMSwgbGF0ZXN0TWF0Y2gsIGNhY2hlRGVwZW5kZW5jeSA9IG5keEludGx6ciA/IG5keEludGx6ci5qb2luKFwiXCIpIDogXCJcIjtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlVGVzdEZyb21Ub2tlbihtYXNrVG9rZW4sIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVNYXRjaChtYXRjaCwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgdG9rZW5Hcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdE1hdGNoID0gMCA9PT0gJC5pbkFycmF5KGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdE1hdGNoIHx8ICQuZWFjaCh0b2tlbkdyb3VwLm1hdGNoZXMsIGZ1bmN0aW9uKG5keCwgbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwID09PSBtYXRjaC5pc1F1YW50aWZpZXIgPyBmaXJzdE1hdGNoID0gaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwLm1hdGNoZXNbbmR4IC0gMV0pIDogT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hdGNoLCBcIm1hdGNoZXNcIikgJiYgKGZpcnN0TWF0Y2ggPSBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIG1hdGNoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE1hdGNoKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZpcnN0TWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlTmR4SW5pdGlhbGl6ZXIocG9zLCBhbHRlcm5hdGVOZHgsIHRhcmdldEFsdGVybmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RNYXRjaCwgaW5kZXhQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChtYXNrc2V0LnRlc3RzW3Bvc10gfHwgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdKSAmJiAkLmVhY2gobWFza3NldC50ZXN0c1twb3NdIHx8IFsgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdIF0sIGZ1bmN0aW9uKG5keCwgbG1udCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG1udC5tbG9jW2FsdGVybmF0ZU5keF0pIHJldHVybiBiZXN0TWF0Y2ggPSBsbW50LCAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdGVybmF0aW9uID0gdm9pZCAwICE9PSB0YXJnZXRBbHRlcm5hdGlvbiA/IHRhcmdldEFsdGVybmF0aW9uIDogbG1udC5hbHRlcm5hdGlvbiwgbmR4UG9zID0gdm9pZCAwICE9PSBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dID8gbG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXS50b1N0cmluZygpLmluZGV4T2YoYWx0ZXJuYXRlTmR4KSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodm9pZCAwID09PSBpbmRleFBvcyB8fCBuZHhQb3MgPCBpbmRleFBvcykgJiYgLTEgIT09IG5keFBvcyAmJiAoYmVzdE1hdGNoID0gbG1udCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4UG9zID0gbmR4UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgYmVzdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0TWF0Y2hBbHRJbmRleCA9IGJlc3RNYXRjaC5sb2NhdG9yW2Jlc3RNYXRjaC5hbHRlcm5hdGlvbl0sIGxvY2F0b3IgPSBiZXN0TWF0Y2gubWxvY1thbHRlcm5hdGVOZHhdIHx8IGJlc3RNYXRjaC5tbG9jW2Jlc3RNYXRjaEFsdEluZGV4XSB8fCBiZXN0TWF0Y2gubG9jYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3Iuc2xpY2UoKHZvaWQgMCAhPT0gdGFyZ2V0QWx0ZXJuYXRpb24gPyB0YXJnZXRBbHRlcm5hdGlvbiA6IGJlc3RNYXRjaC5hbHRlcm5hdGlvbikgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdGFyZ2V0QWx0ZXJuYXRpb24gPyByZXNvbHZlTmR4SW5pdGlhbGl6ZXIocG9zLCBhbHRlcm5hdGVOZHgpIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNTdWJzZXRPZihzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV4cGFuZChwYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGV4cGFuZGVkID0gW10sIHN0YXJ0ID0gLTEsIGVuZCwgaSA9IDAsIGwgPSBwYXR0ZXJuLmxlbmd0aDsgaSA8IGw7IGkrKykgaWYgKFwiLVwiID09PSBwYXR0ZXJuLmNoYXJBdChpKSkgZm9yIChlbmQgPSBwYXR0ZXJuLmNoYXJDb2RlQXQoaSArIDEpOyArK3N0YXJ0IDwgZW5kOyApIGV4cGFuZGVkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShzdGFydCkpOyBlbHNlIHN0YXJ0ID0gcGF0dGVybi5jaGFyQ29kZUF0KGkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQucHVzaChwYXR0ZXJuLmNoYXJBdChpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBhbmRlZC5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlLm1hdGNoLmRlZiA9PT0gdGFyZ2V0Lm1hdGNoLm5hdGl2ZURlZiB8fCAhKCEob3B0cy5yZWdleCB8fCBzb3VyY2UubWF0Y2guZm4gaW5zdGFuY2VvZiBSZWdFeHAgJiYgdGFyZ2V0Lm1hdGNoLmZuIGluc3RhbmNlb2YgUmVnRXhwKSB8fCAhMCA9PT0gc291cmNlLm1hdGNoLnN0YXRpYyB8fCAhMCA9PT0gdGFyZ2V0Lm1hdGNoLnN0YXRpYykgJiYgLTEgIT09IGV4cGFuZCh0YXJnZXQubWF0Y2guZm4udG9TdHJpbmcoKS5yZXBsYWNlKC9bW1xcXS9dL2csIFwiXCIpKS5pbmRleE9mKGV4cGFuZChzb3VyY2UubWF0Y2guZm4udG9TdHJpbmcoKS5yZXBsYWNlKC9bW1xcXS9dL2csIFwiXCIpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdGF0aWNDYW5NYXRjaERlZmluaXRpb24oc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITAgPT09IHNvdXJjZS5tYXRjaC5zdGF0aWMgJiYgITAgIT09IHRhcmdldC5tYXRjaC5zdGF0aWMgJiYgdGFyZ2V0Lm1hdGNoLmZuLnRlc3Qoc291cmNlLm1hdGNoLmRlZiwgbWFza3NldCwgcG9zLCAhMSwgb3B0cywgITEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0TWVyZ2VMb2NhdG9ycyh0YXJnZXRNYXRjaCwgYWx0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ZXJuYXRpb25OZHggPSB0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbiwgc2hvdWxkTWVyZ2UgPSB2b2lkIDAgPT09IGFsdE1hdGNoIHx8IGFsdGVybmF0aW9uTmR4ID09PSBhbHRNYXRjaC5hbHRlcm5hdGlvbiAmJiAtMSA9PT0gdGFyZ2V0TWF0Y2gubG9jYXRvclthbHRlcm5hdGlvbk5keF0udG9TdHJpbmcoKS5pbmRleE9mKGFsdE1hdGNoLmxvY2F0b3JbYWx0ZXJuYXRpb25OZHhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3VsZE1lcmdlICYmIGFsdGVybmF0aW9uTmR4ID4gYWx0TWF0Y2guYWx0ZXJuYXRpb24pIGZvciAodmFyIGkgPSBhbHRNYXRjaC5hbHRlcm5hdGlvbjsgaSA8IGFsdGVybmF0aW9uTmR4OyBpKyspIGlmICh0YXJnZXRNYXRjaC5sb2NhdG9yW2ldICE9PSBhbHRNYXRjaC5sb2NhdG9yW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aW9uTmR4ID0gaSwgc2hvdWxkTWVyZ2UgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRNZXJnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaC5tbG9jID0gdGFyZ2V0TWF0Y2gubWxvYyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvY05keCA9IHRhcmdldE1hdGNoLmxvY2F0b3JbYWx0ZXJuYXRpb25OZHhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBsb2NOZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBsb2NOZHggJiYgKGxvY05keCA9IGxvY05keC5zcGxpdChcIixcIilbMF0pLCB2b2lkIDAgPT09IHRhcmdldE1hdGNoLm1sb2NbbG9jTmR4XSAmJiAodGFyZ2V0TWF0Y2gubWxvY1tsb2NOZHhdID0gdGFyZ2V0TWF0Y2gubG9jYXRvci5zbGljZSgpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGFsdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4IGluIGFsdE1hdGNoLm1sb2MpIFwic3RyaW5nXCIgPT0gdHlwZW9mIG5keCAmJiAobmR4ID0gbmR4LnNwbGl0KFwiLFwiKVswXSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gdGFyZ2V0TWF0Y2gubWxvY1tuZHhdICYmICh0YXJnZXRNYXRjaC5tbG9jW25keF0gPSBhbHRNYXRjaC5tbG9jW25keF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1hdGNoLmxvY2F0b3JbYWx0ZXJuYXRpb25OZHhdID0gT2JqZWN0LmtleXModGFyZ2V0TWF0Y2gubWxvYykuam9pbihcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWF0Y2guYWx0ZXJuYXRpb24gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2FtZUxldmVsKHRhcmdldE1hdGNoLCBhbHRNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNYXRjaC5sb2NhdG9yLmxlbmd0aCAhPT0gYWx0TWF0Y2gubG9jYXRvci5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsb2NOZHggPSB0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbiArIDE7IGxvY05keCA8IHRhcmdldE1hdGNoLmxvY2F0b3IubGVuZ3RoOyBsb2NOZHgrKykgaWYgKHRhcmdldE1hdGNoLmxvY2F0b3JbbG9jTmR4XSAhPT0gYWx0TWF0Y2gubG9jYXRvcltsb2NOZHhdKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPiBvcHRzLl9tYXhUZXN0UG9zICYmIHZvaWQgMCAhPT0gcXVhbnRpZmllclJlY3Vyc2UpIHRocm93IFwiSW5wdXRtYXNrOiBUaGVyZSBpcyBwcm9iYWJseSBhbiBlcnJvciBpbiB5b3VyIG1hc2sgZGVmaW5pdGlvbiBvciBpbiB0aGUgY29kZS4gQ3JlYXRlIGFuIGlzc3VlIG9uIGdpdGh1YiB3aXRoIGFuIGV4YW1wbGUgb2YgdGhlIG1hc2sgeW91IGFyZSB1c2luZy4gXCIgKyBtYXNrc2V0Lm1hc2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA9PT0gcG9zICYmIHZvaWQgMCA9PT0gbWF0Y2gubWF0Y2hlcykgcmV0dXJuIG1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IGxvb3BOZHgucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWxvYzoge31cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IG1hdGNoLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNHcm91cCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgKyAxXSwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsVG9rZW4gPSBtYXRjaCwgbXRjaHNOZHggPSBtYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQuZWFjaChtYXRjaGVzLCBmdW5jdGlvbihuZHgsIG10Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdGNoc05keCA8PSBuZHggJiYgKG10Y2gubWF0Y2gub3B0aW9uYWxpdHkgPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgbGF0ZXN0TWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ubWF0Y2gsIHZvaWQgMCAhPT0gcXVhbnRpZmllclJlY3Vyc2UgfHwgIWlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgb3B0aW9uYWxUb2tlbikpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSAhMCwgdGVzdFBvcyA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGVUb2tlbiA9IG1hdGNoLCBtYWx0ZXJuYXRlTWF0Y2hlcyA9IFtdLCBtYWx0TWF0Y2hlcywgY3VycmVudE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIGxvb3BOZHhDbnQgPSBsb29wTmR4Lmxlbmd0aCwgYWx0SW5kZXggPSAwIDwgbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgPT09IGFsdEluZGV4IHx8IFwic3RyaW5nXCIgPT0gdHlwZW9mIGFsdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvcyA9IHRlc3RQb3MsIG5keEluaXRpYWxpemVyQ2xvbmUgPSBuZHhJbml0aWFsaXplci5zbGljZSgpLCBhbHRJbmRleEFyciA9IFtdLCBhbW5keDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBhbHRJbmRleCkgYWx0SW5kZXhBcnIgPSBhbHRJbmRleC5zcGxpdChcIixcIik7IGVsc2UgZm9yIChhbW5keCA9IDA7IGFtbmR4IDwgYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IGFtbmR4KyspIGFsdEluZGV4QXJyLnB1c2goYW1uZHgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBtYXNrc2V0LmV4Y2x1ZGVzW3Bvc10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhbHRJbmRleEFyckNsb25lID0gYWx0SW5kZXhBcnIuc2xpY2UoKSwgaSA9IDAsIGV4bCA9IG1hc2tzZXQuZXhjbHVkZXNbcG9zXS5sZW5ndGg7IGkgPCBleGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhjbHVkZVNldCA9IG1hc2tzZXQuZXhjbHVkZXNbcG9zXVtpXS50b1N0cmluZygpLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcE5keC5sZW5ndGggPT0gZXhjbHVkZVNldFsxXSAmJiBhbHRJbmRleEFyci5zcGxpY2UoYWx0SW5kZXhBcnIuaW5kZXhPZihleGNsdWRlU2V0WzBdKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgPT09IGFsdEluZGV4QXJyLmxlbmd0aCAmJiAoZGVsZXRlIG1hc2tzZXQuZXhjbHVkZXNbcG9zXSwgYWx0SW5kZXhBcnIgPSBhbHRJbmRleEFyckNsb25lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICghMCA9PT0gb3B0cy5rZWVwU3RhdGljIHx8IGlzRmluaXRlKHBhcnNlSW50KG9wdHMua2VlcFN0YXRpYykpICYmIGN1cnJlbnRQb3MgPj0gb3B0cy5rZWVwU3RhdGljKSAmJiAoYWx0SW5kZXhBcnIgPSBhbHRJbmRleEFyci5zbGljZSgwLCAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB1bk1hdGNoZWRBbHRlcm5hdGlvbiA9ICExLCBuZHggPSAwOyBuZHggPCBhbHRJbmRleEFyci5sZW5ndGg7IG5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1uZHggPSBwYXJzZUludChhbHRJbmRleEFycltuZHhdKSwgbWF0Y2hlcyA9IFtdLCBuZHhJbml0aWFsaXplciA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGFsdEluZGV4ICYmIHJlc29sdmVOZHhJbml0aWFsaXplcih0ZXN0UG9zLCBhbW5keCwgbG9vcE5keENudCkgfHwgbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FtbmR4XSAmJiBoYW5kbGVNYXRjaChhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FtbmR4XSwgWyBhbW5keCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpID8gbWF0Y2ggPSAhMCA6IDAgPT09IG5keCAmJiAodW5NYXRjaGVkQWx0ZXJuYXRpb24gPSAhMCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgpLCB0ZXN0UG9zID0gY3VycmVudFBvcywgbWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDEgPSAwOyBuZHgxIDwgbWFsdE1hdGNoZXMubGVuZ3RoOyBuZHgxKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hdGNoID0gbWFsdE1hdGNoZXNbbmR4MV0sIGRyb3BNYXRjaCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXRjaC5tYXRjaC5qaXQgPSBhbHRNYXRjaC5tYXRjaC5qaXQgfHwgdW5NYXRjaGVkQWx0ZXJuYXRpb24sIGFsdE1hdGNoLmFsdGVybmF0aW9uID0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gfHwgbG9vcE5keENudCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHgyID0gMDsgbmR4MiA8IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aDsgbmR4MisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TWF0Y2gyID0gbWFsdGVybmF0ZU1hdGNoZXNbbmR4Ml07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgYWx0SW5kZXggfHwgdm9pZCAwICE9PSBhbHRNYXRjaC5hbHRlcm5hdGlvbiAmJiAtMSAhPT0gJC5pbkFycmF5KGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCksIGFsdEluZGV4QXJyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXRjaC5tYXRjaC5uYXRpdmVEZWYgPT09IGFsdE1hdGNoMi5tYXRjaC5uYXRpdmVEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gITAsIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLCBhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdWJzZXRPZihhbHRNYXRjaCwgYWx0TWF0Y2gyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoLCBhbHRNYXRjaDIpICYmIChkcm9wTWF0Y2ggPSAhMCwgbWFsdGVybmF0ZU1hdGNoZXMuc3BsaWNlKG1hbHRlcm5hdGVNYXRjaGVzLmluZGV4T2YoYWx0TWF0Y2gyKSwgMCwgYWx0TWF0Y2gpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1N1YnNldE9mKGFsdE1hdGNoMiwgYWx0TWF0Y2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLCBhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGljQ2FuTWF0Y2hEZWZpbml0aW9uKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2FtZUxldmVsKGFsdE1hdGNoLCBhbHRNYXRjaDIpIHx8IHZvaWQgMCAhPT0gZWwuaW5wdXRtYXNrLnVzZXJPcHRpb25zLmtlZXBTdGF0aWMgPyBzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoLCBhbHRNYXRjaDIpICYmIChkcm9wTWF0Y2ggPSAhMCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRlcm5hdGVNYXRjaGVzLnNwbGljZShtYWx0ZXJuYXRlTWF0Y2hlcy5pbmRleE9mKGFsdE1hdGNoMiksIDAsIGFsdE1hdGNoKSkgOiBvcHRzLmtlZXBTdGF0aWMgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BNYXRjaCB8fCBtYWx0ZXJuYXRlTWF0Y2hlcy5wdXNoKGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gY3VycmVudE1hdGNoZXMuY29uY2F0KG1hbHRlcm5hdGVNYXRjaGVzKSwgdGVzdFBvcyA9IHBvcywgaW5zZXJ0U3RvcCA9IDAgPCBtYXRjaGVzLmxlbmd0aCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IDAgPCBtYWx0ZXJuYXRlTWF0Y2hlcy5sZW5ndGgsIG5keEluaXRpYWxpemVyID0gbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbWF0Y2ggPSBoYW5kbGVNYXRjaChhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FsdEluZGV4XSB8fCBtYXNrVG9rZW4ubWF0Y2hlc1thbHRJbmRleF0sIFsgYWx0SW5kZXggXS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc1F1YW50aWZpZXIgJiYgcXVhbnRpZmllclJlY3Vyc2UgIT09IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV0pIGZvciAodmFyIHF0ID0gbWF0Y2gsIHFuZHggPSAwIDwgbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHFuZHggPCAoaXNOYU4ocXQucXVhbnRpZmllci5tYXgpID8gcW5keCArIDEgOiBxdC5xdWFudGlmaWVyLm1heCkgJiYgdGVzdFBvcyA8PSBwb3M7IHFuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5Hcm91cCA9IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShxdCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IGhhbmRsZU1hdGNoKHRva2VuR3JvdXAsIFsgcW5keCBdLmNvbmNhdChsb29wTmR4KSwgdG9rZW5Hcm91cCksIG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0TWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ubWF0Y2gsIGxhdGVzdE1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciA9IHFuZHggPj0gcXQucXVhbnRpZmllci5taW4sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0TWF0Y2guaml0ID0gKHFuZHggfHwgMSkgKiB0b2tlbkdyb3VwLm1hdGNoZXMuaW5kZXhPZihsYXRlc3RNYXRjaCkgPj0gcXQucXVhbnRpZmllci5qaXQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0TWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmIGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgdG9rZW5Hcm91cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gITAsIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGF0ZXN0TWF0Y2guaml0ICYmIChtYXNrc2V0LmppdE9mZnNldFtwb3NdID0gdG9rZW5Hcm91cC5tYXRjaGVzLmxlbmd0aCAtIHRva2VuR3JvdXAubWF0Y2hlcy5pbmRleE9mKGxhdGVzdE1hdGNoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGVzdFBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHRuZHggPSAwIDwgbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHRuZHggPCBtYXNrVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IHRuZHgrKykgaWYgKCEwICE9PSBtYXNrVG9rZW4ubWF0Y2hlc1t0bmR4XS5pc1F1YW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzW3RuZHhdLCBbIHRuZHggXS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiB0ZXN0UG9zID09PSBwb3MpIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPCB0ZXN0UG9zKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtZXJnZUxvY2F0b3JzKHBvcywgdGVzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0b3IgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuaXNBcnJheSh0ZXN0cykgfHwgKHRlc3RzID0gWyB0ZXN0cyBdKSwgMCA8IHRlc3RzLmxlbmd0aCAmJiAodm9pZCAwID09PSB0ZXN0c1swXS5hbHRlcm5hdGlvbiB8fCAhMCA9PT0gb3B0cy5rZWVwU3RhdGljID8gKGxvY2F0b3IgPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCB0ZXN0cy5zbGljZSgpKS5sb2NhdG9yLnNsaWNlKCksIFxuICAgICAgICAgICAgICAgICAgICAwID09PSBsb2NhdG9yLmxlbmd0aCAmJiAobG9jYXRvciA9IHRlc3RzWzBdLmxvY2F0b3Iuc2xpY2UoKSkpIDogJC5lYWNoKHRlc3RzLCBmdW5jdGlvbihuZHgsIHRzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiXCIgIT09IHRzdC5kZWYpIGlmICgwID09PSBsb2NhdG9yLmxlbmd0aCkgbG9jYXRvciA9IHRzdC5sb2NhdG9yLnNsaWNlKCk7IGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhdG9yLmxlbmd0aDsgaSsrKSB0c3QubG9jYXRvcltpXSAmJiAtMSA9PT0gbG9jYXRvcltpXS50b1N0cmluZygpLmluZGV4T2YodHN0LmxvY2F0b3JbaV0pICYmIChsb2NhdG9yW2ldICs9IFwiLFwiICsgdHN0LmxvY2F0b3JbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9KSksIGxvY2F0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgtMSA8IHBvcyAmJiAodm9pZCAwID09PSBtYXhMZW5ndGggfHwgcG9zIDwgbWF4TGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBuZHhJbnRsenIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByZXZpb3VzUG9zID0gcG9zIC0gMSwgdGVzdDsgdm9pZCAwID09PSAodGVzdCA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcHJldmlvdXNQb3NdIHx8IG1hc2tzZXQudGVzdHNbcHJldmlvdXNQb3NdKSAmJiAtMSA8IHByZXZpb3VzUG9zOyApIHByZXZpb3VzUG9zLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHRlc3QgJiYgLTEgPCBwcmV2aW91c1BvcyAmJiAobmR4SW5pdGlhbGl6ZXIgPSBtZXJnZUxvY2F0b3JzKHByZXZpb3VzUG9zLCB0ZXN0KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZURlcGVuZGVuY3kgPSBuZHhJbml0aWFsaXplci5qb2luKFwiXCIpLCB0ZXN0UG9zID0gcHJldmlvdXNQb3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXNrc2V0LnRlc3RzW3Bvc10gJiYgbWFza3NldC50ZXN0c1twb3NdWzBdLmNkID09PSBjYWNoZURlcGVuZGVuY3kpIHJldHVybiBtYXNrc2V0LnRlc3RzW3Bvc107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG10bmR4ID0gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKTsgbXRuZHggPCBtYXNrVG9rZW5zLmxlbmd0aDsgbXRuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWFza1Rva2Vuc1ttdG5keF0sIG5keEluaXRpYWxpemVyLCBbIG10bmR4IF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIHRlc3RQb3MgPT09IHBvcyB8fCBwb3MgPCB0ZXN0UG9zKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMCAhPT0gbWF0Y2hlcy5sZW5ndGggJiYgIWluc2VydFN0b3AgfHwgbWF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IFtdLFxuICAgICAgICAgICAgICAgICAgICBtbG9jOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgY2Q6IGNhY2hlRGVwZW5kZW5jeVxuICAgICAgICAgICAgICAgIH0pLCB2b2lkIDAgIT09IG5keEludGx6ciAmJiBtYXNrc2V0LnRlc3RzW3Bvc10gPyAkLmV4dGVuZCghMCwgW10sIG1hdGNoZXMpIDogKG1hc2tzZXQudGVzdHNbcG9zXSA9ICQuZXh0ZW5kKCEwLCBbXSwgbWF0Y2hlcyksIFxuICAgICAgICAgICAgICAgIG1hc2tzZXQudGVzdHNbcG9zXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXJUZW1wbGF0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBtYXNrc2V0Ll9idWZmZXIgJiYgKG1hc2tzZXQuX2J1ZmZlciA9IGdldE1hc2tUZW1wbGF0ZSghMSwgMSksIFxuICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gbWFza3NldC5idWZmZXIgJiYgKG1hc2tzZXQuYnVmZmVyID0gbWFza3NldC5fYnVmZmVyLnNsaWNlKCkpKSwgbWFza3NldC5fYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyKG5vQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBtYXNrc2V0LmJ1ZmZlciAmJiAhMCAhPT0gbm9DYWNoZSB8fCAobWFza3NldC5idWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUoITAsIGdldExhc3RWYWxpZFBvc2l0aW9uKCksICEwKSwgXG4gICAgICAgICAgICAgICAgdm9pZCAwID09PSBtYXNrc2V0Ll9idWZmZXIgJiYgKG1hc2tzZXQuX2J1ZmZlciA9IG1hc2tzZXQuYnVmZmVyLnNsaWNlKCkpKSwgbWFza3NldC5idWZmZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZWZyZXNoRnJvbUJ1ZmZlcihzdGFydCwgZW5kLCBidWZmZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSwgcCwgc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciA9IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciwgYmZmciA9IGlzUlRMID8gYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpIDogYnVmZmVyO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgPSBcIlwiLCAhMCA9PT0gc3RhcnQpIHJlc2V0TWFza1NldCgpLCBtYXNrc2V0LnRlc3RzID0ge30sIFxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gMCwgZW5kID0gYnVmZmVyLmxlbmd0aCwgcCA9IGRldGVybWluZU5ld0NhcmV0UG9zaXRpb24oe1xuICAgICAgICAgICAgICAgICAgICBiZWdpbjogMCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAwXG4gICAgICAgICAgICAgICAgfSwgITEpLmJlZ2luOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykgZGVsZXRlIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgIHAgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gYmZmcltpXS50b1N0cmluZygpLmNoYXJDb2RlQXQoMCksIGlnbm9yYWJsZSA9ICExO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsUmVzdWx0ID0gRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoZWwsIGtleXByZXNzLCAhMCwgITEsICExLCBwKTtcbiAgICAgICAgICAgICAgICAgICAgITEgIT09IHZhbFJlc3VsdCAmJiAocCA9IHZhbFJlc3VsdC5mb3J3YXJkUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgPSBza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY2FzaW5nKGVsZW0sIHRlc3QsIHBvcykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAob3B0cy5jYXNpbmcgfHwgdGVzdC5jYXNpbmcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1cHBlclwiOlxuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBcImxvd2VyXCI6XG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc0JlZm9yZSA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSAwID09PSBwb3MgfHwgcG9zQmVmb3JlICYmIHBvc0JlZm9yZS5pbnB1dCA9PT0gU3RyaW5nLmZyb21DaGFyQ29kZShrZXlDb2RlLlNQQUNFKSA/IGVsZW0udG9VcHBlckNhc2UoKSA6IGVsZW0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5jYXNpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2gobWFza3NldC52YWxpZFBvc2l0aW9ucyksIGVsZW0gPSBvcHRzLmNhc2luZy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrQWx0ZXJuYXRpb25NYXRjaChhbHRBcnIxLCBhbHRBcnIyLCBuYSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGFsdEFyckMgPSBvcHRzLmdyZWVkeSA/IGFsdEFycjIgOiBhbHRBcnIyLnNsaWNlKDAsIDEpLCBpc01hdGNoID0gITEsIG5hQXJyID0gdm9pZCAwICE9PSBuYSA/IG5hLnNwbGl0KFwiLFwiKSA6IFtdLCBuYU5keCwgaSA9IDA7IGkgPCBuYUFyci5sZW5ndGg7IGkrKykgLTEgIT09IChuYU5keCA9IGFsdEFycjEuaW5kZXhPZihuYUFycltpXSkpICYmIGFsdEFycjEuc3BsaWNlKG5hTmR4LCAxKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhbG5keCA9IDA7IGFsbmR4IDwgYWx0QXJyMS5sZW5ndGg7IGFsbmR4KyspIGlmICgtMSAhPT0gJC5pbkFycmF5KGFsdEFycjFbYWxuZHhdLCBhbHRBcnJDKSkge1xuICAgICAgICAgICAgICAgICAgICBpc01hdGNoID0gITA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNNYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFsdGVybmF0ZShtYXNrUG9zLCBjLCBzdHJpY3QsIGZyb21Jc1ZhbGlkLCByQWx0UG9zLCBzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsaWRQc0Nsb25lID0gJC5leHRlbmQoITAsIHt9LCBtYXNrc2V0LnZhbGlkUG9zaXRpb25zKSwgdHN0Q2xvbmUgPSAkLmV4dGVuZCghMCwge30sIG1hc2tzZXQudGVzdHMpLCBsYXN0QWx0LCBhbHRlcm5hdGlvbiwgaXNWYWxpZFJzbHQgPSAhMSwgcmV0dXJuUnNsdCA9ICExLCBhbHRQb3MsIHByZXZBbHRQb3MsIGksIHZhbGlkUG9zLCBkZWNpc2lvblBvcywgbEFsdFBvcyA9IHZvaWQgMCAhPT0gckFsdFBvcyA/IHJBbHRQb3MgOiBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBuZXh0UG9zLCBpbnB1dCwgYmVnaW4sIGVuZDtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uICYmIChiZWdpbiA9IHNlbGVjdGlvbi5iZWdpbiwgZW5kID0gc2VsZWN0aW9uLmVuZCwgc2VsZWN0aW9uLmJlZ2luID4gc2VsZWN0aW9uLmVuZCAmJiAoYmVnaW4gPSBzZWxlY3Rpb24uZW5kLCBcbiAgICAgICAgICAgICAgICBlbmQgPSBzZWxlY3Rpb24uYmVnaW4pKSwgLTEgPT09IGxBbHRQb3MgJiYgdm9pZCAwID09PSByQWx0UG9zKSBsYXN0QWx0ID0gMCwgcHJldkFsdFBvcyA9IGdldFRlc3QobGFzdEFsdCksIFxuICAgICAgICAgICAgICAgIGFsdGVybmF0aW9uID0gcHJldkFsdFBvcy5hbHRlcm5hdGlvbjsgZWxzZSBmb3IgKDswIDw9IGxBbHRQb3M7IGxBbHRQb3MtLSkgaWYgKGFsdFBvcyA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbbEFsdFBvc10sIFxuICAgICAgICAgICAgICAgIGFsdFBvcyAmJiB2b2lkIDAgIT09IGFsdFBvcy5hbHRlcm5hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldkFsdFBvcyAmJiBwcmV2QWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSAhPT0gYWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RBbHQgPSBsQWx0UG9zLCBhbHRlcm5hdGlvbiA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0uYWx0ZXJuYXRpb24sIHByZXZBbHRQb3MgPSBhbHRQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGFsdGVybmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uUG9zID0gcGFyc2VJbnQobGFzdEFsdCksIG1hc2tzZXQuZXhjbHVkZXNbZGVjaXNpb25Qb3NdID0gbWFza3NldC5leGNsdWRlc1tkZWNpc2lvblBvc10gfHwgW10sIFxuICAgICAgICAgICAgICAgICAgICAhMCAhPT0gbWFza1BvcyAmJiBtYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKGdldERlY2lzaW9uVGFrZXIocHJldkFsdFBvcykgKyBcIjpcIiArIHByZXZBbHRQb3MuYWx0ZXJuYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRJbnB1dHMgPSBbXSwgcmVzdWx0UG9zID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24odm9pZCAwLCAhMCkgKyAxOyBpKyspIC0xID09PSByZXN1bHRQb3MgJiYgbWFza1BvcyA8PSBpICYmIHZvaWQgMCAhPT0gYyAmJiAodmFsaWRJbnB1dHMucHVzaChjKSwgXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFBvcyA9IHZhbGlkSW5wdXRzLmxlbmd0aCAtIDEpLCB2YWxpZFBvcyA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbaV0sIHZhbGlkUG9zICYmICEwICE9PSB2YWxpZFBvcy5nZW5lcmF0ZWRJbnB1dCAmJiAodm9pZCAwID09PSBzZWxlY3Rpb24gfHwgaSA8IGJlZ2luIHx8IGVuZCA8PSBpKSAmJiB2YWxpZElucHV0cy5wdXNoKHZhbGlkUG9zLmlucHV0KSwgXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKC0xID09PSByZXN1bHRQb3MgJiYgdm9pZCAwICE9PSBjICYmICh2YWxpZElucHV0cy5wdXNoKGMpLCByZXN1bHRQb3MgPSB2YWxpZElucHV0cy5sZW5ndGggLSAxKTsgdm9pZCAwICE9PSBtYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSAmJiBtYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5sZW5ndGggPCAxMDsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG1hc2tzZXQudGVzdHMgPSB7fSwgcmVzZXRNYXNrU2V0KCEwKSwgaXNWYWxpZFJzbHQgPSAhMCwgaSA9IDA7IGkgPCB2YWxpZElucHV0cy5sZW5ndGggJiYgKG5leHRQb3MgPSBpc1ZhbGlkUnNsdC5jYXJldCB8fCBnZXRMYXN0VmFsaWRQb3NpdGlvbih2b2lkIDAsICEwKSArIDEsIFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSB2YWxpZElucHV0c1tpXSwgaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKG5leHRQb3MsIGlucHV0LCAhMSwgZnJvbUlzVmFsaWQsICEwKSk7IGkrKykgaSA9PT0gcmVzdWx0UG9zICYmIChyZXR1cm5Sc2x0ID0gaXNWYWxpZFJzbHQpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIDEgPT0gbWFza1BvcyAmJiBpc1ZhbGlkUnNsdCAmJiAocmV0dXJuUnNsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvczogaVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZFJzbHQpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc2V0TWFza1NldCgpLCBwcmV2QWx0UG9zID0gZ2V0VGVzdChkZWNpc2lvblBvcyksIG1hc2tzZXQudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHZhbGlkUHNDbG9uZSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC50ZXN0cyA9ICQuZXh0ZW5kKCEwLCB7fSwgdHN0Q2xvbmUpLCAhbWFza3NldC5leGNsdWRlc1tkZWNpc2lvblBvc10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Sc2x0ID0gYWx0ZXJuYXRlKG1hc2tQb3MsIGMsIHN0cmljdCwgZnJvbUlzVmFsaWQsIGRlY2lzaW9uUG9zIC0gMSwgc2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNpc2lvblRha2VyID0gZ2V0RGVjaXNpb25UYWtlcihwcmV2QWx0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtMSAhPT0gbWFza3NldC5leGNsdWRlc1tkZWNpc2lvblBvc10uaW5kZXhPZihkZWNpc2lvblRha2VyICsgXCI6XCIgKyBwcmV2QWx0UG9zLmFsdGVybmF0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblJzbHQgPSBhbHRlcm5hdGUobWFza1BvcywgYywgc3RyaWN0LCBmcm9tSXNWYWxpZCwgZGVjaXNpb25Qb3MgLSAxLCBzZWxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChtYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKGRlY2lzaW9uVGFrZXIgKyBcIjpcIiArIHByZXZBbHRQb3MuYWx0ZXJuYXRpb24pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBkZWNpc2lvblBvczsgaSA8IGdldExhc3RWYWxpZFBvc2l0aW9uKHZvaWQgMCwgITApICsgMTsgaSsrKSBkZWxldGUgbWFza3NldC52YWxpZFBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuUnNsdCAmJiAhMSA9PT0gb3B0cy5rZWVwU3RhdGljIHx8IGRlbGV0ZSBtYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSwgXG4gICAgICAgICAgICAgICAgcmV0dXJuUnNsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQocG9zLCBjLCBzdHJpY3QsIGZyb21Jc1ZhbGlkLCBmcm9tQWx0ZXJuYXRlLCB2YWxpZGF0ZU9ubHkpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc1NlbGVjdGlvbihwb3NPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzUlRMID8gMSA8IHBvc09iai5iZWdpbiAtIHBvc09iai5lbmQgfHwgcG9zT2JqLmJlZ2luIC0gcG9zT2JqLmVuZCA9PSAxIDogMSA8IHBvc09iai5lbmQgLSBwb3NPYmouYmVnaW4gfHwgcG9zT2JqLmVuZCAtIHBvc09iai5iZWdpbiA9PSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpY3QgPSAhMCA9PT0gc3RyaWN0O1xuICAgICAgICAgICAgICAgIHZhciBtYXNrUG9zID0gcG9zO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NDb21tYW5kT2JqZWN0KGNvbW1hbmRPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gY29tbWFuZE9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gY29tbWFuZE9iai5yZW1vdmUgJiYgKCQuaXNBcnJheShjb21tYW5kT2JqLnJlbW92ZSkgfHwgKGNvbW1hbmRPYmoucmVtb3ZlID0gWyBjb21tYW5kT2JqLnJlbW92ZSBdKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29tbWFuZE9iai5yZW1vdmUuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIucG9zIC0gYS5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZU1hc2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbG1udCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsbW50ICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGNvbW1hbmRPYmoucmVtb3ZlID0gdm9pZCAwKSwgdm9pZCAwICE9PSBjb21tYW5kT2JqLmluc2VydCAmJiAoJC5pc0FycmF5KGNvbW1hbmRPYmouaW5zZXJ0KSB8fCAoY29tbWFuZE9iai5pbnNlcnQgPSBbIGNvbW1hbmRPYmouaW5zZXJ0IF0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChjb21tYW5kT2JqLmluc2VydC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5wb3MgLSBiLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiICE9PSBsbW50LmMgJiYgaXNWYWxpZChsbW50LnBvcywgbG1udC5jLCB2b2lkIDAgPT09IGxtbnQuc3RyaWN0IHx8IGxtbnQuc3RyaWN0LCB2b2lkIDAgIT09IGxtbnQuZnJvbUlzVmFsaWQgPyBsbW50LmZyb21Jc1ZhbGlkIDogZnJvbUlzVmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGNvbW1hbmRPYmouaW5zZXJ0ID0gdm9pZCAwKSwgY29tbWFuZE9iai5yZWZyZXNoRnJvbUJ1ZmZlciAmJiBjb21tYW5kT2JqLmJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gY29tbWFuZE9iai5yZWZyZXNoRnJvbUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcighMCA9PT0gcmVmcmVzaCA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgY29tbWFuZE9iai5idWZmZXIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kT2JqLnJlZnJlc2hGcm9tQnVmZmVyID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBjb21tYW5kT2JqLnJld3JpdGVQb3NpdGlvbiAmJiAobWFza1BvcyA9IGNvbW1hbmRPYmoucmV3cml0ZVBvc2l0aW9uLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRPYmogPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRPYmo7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9pc1ZhbGlkKHBvc2l0aW9uLCBjLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJzbHQgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuZWFjaChnZXRUZXN0cyhwb3NpdGlvbiksIGZ1bmN0aW9uKG5keCwgdHN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdCA9IHRzdC5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRCdWZmZXIoITApLCByc2x0ID0gbnVsbCAhPSB0ZXN0LmZuID8gdGVzdC5mbi50ZXN0KGMsIG1hc2tzZXQsIHBvc2l0aW9uLCBzdHJpY3QsIG9wdHMsIGlzU2VsZWN0aW9uKHBvcykpIDogKGMgPT09IHRlc3QuZGVmIHx8IGMgPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcikgJiYgXCJcIiAhPT0gdGVzdC5kZWYgJiYge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IGdldFBsYWNlaG9sZGVyKHBvc2l0aW9uLCB0ZXN0LCAhMCkgfHwgdGVzdC5kZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgITEgIT09IHJzbHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IHZvaWQgMCAhPT0gcnNsdC5jID8gcnNsdC5jIDogYywgdmFsaWRhdGVkUG9zID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0gPSBlbGVtID09PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgJiYgITAgPT09IHRlc3Quc3RhdGljID8gZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24sIHRlc3QsICEwKSB8fCB0ZXN0LmRlZiA6IGVsZW0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzbHQgPSBwcm9jZXNzQ29tbWFuZE9iamVjdChyc2x0KSwgITAgIT09IHJzbHQgJiYgdm9pZCAwICE9PSByc2x0LnBvcyAmJiByc2x0LnBvcyAhPT0gcG9zaXRpb24gJiYgKHZhbGlkYXRlZFBvcyA9IHJzbHQucG9zKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITAgIT09IHJzbHQgJiYgdm9pZCAwID09PSByc2x0LnBvcyAmJiB2b2lkIDAgPT09IHJzbHQuYyA/ICExIDogKCExID09PSByZXZhbGlkYXRlTWFzayhwb3MsICQuZXh0ZW5kKHt9LCB0c3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGNhc2luZyhlbGVtLCB0ZXN0LCB2YWxpZGF0ZWRQb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZyb21Jc1ZhbGlkLCB2YWxpZGF0ZWRQb3MpICYmIChyc2x0ID0gITEpLCAhMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCByc2x0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHBvcy5iZWdpbiAmJiAobWFza1BvcyA9IGlzUlRMID8gcG9zLmVuZCA6IHBvcy5iZWdpbik7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICEwLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgbWFza3NldC52YWxpZFBvc2l0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKCExID09PSBvcHRzLmtlZXBTdGF0aWMgJiYgdm9pZCAwICE9PSBtYXNrc2V0LmV4Y2x1ZGVzW21hc2tQb3NdICYmICEwICE9PSBmcm9tQWx0ZXJuYXRlICYmICEwICE9PSBmcm9tSXNWYWxpZCkgZm9yICh2YXIgaSA9IG1hc2tQb3M7IGkgPCAoaXNSVEwgPyBwb3MuYmVnaW4gOiBwb3MuZW5kKTsgaSsrKSB2b2lkIDAgIT09IG1hc2tzZXQuZXhjbHVkZXNbaV0gJiYgKG1hc2tzZXQuZXhjbHVkZXNbaV0gPSB2b2lkIDAsIFxuICAgICAgICAgICAgICAgIGRlbGV0ZSBtYXNrc2V0LnRlc3RzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMucHJlVmFsaWRhdGlvbikgJiYgITAgIT09IGZyb21Jc1ZhbGlkICYmICEwICE9PSB2YWxpZGF0ZU9ubHkgJiYgKHJlc3VsdCA9IG9wdHMucHJlVmFsaWRhdGlvbi5jYWxsKGVsLCBnZXRCdWZmZXIoKSwgbWFza1BvcywgYywgaXNTZWxlY3Rpb24ocG9zKSwgb3B0cywgbWFza3NldCwgcG9zLCBzdHJpY3QgfHwgZnJvbUFsdGVybmF0ZSksIFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHByb2Nlc3NDb21tYW5kT2JqZWN0KHJlc3VsdCkpLCAhMCA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IG1heExlbmd0aCB8fCBtYXNrUG9zIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID0gX2lzVmFsaWQobWFza1BvcywgYywgc3RyaWN0KSwgKCFzdHJpY3QgfHwgITAgPT09IGZyb21Jc1ZhbGlkKSAmJiAhMSA9PT0gcmVzdWx0ICYmICEwICE9PSB2YWxpZGF0ZU9ubHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvc1ZhbGlkID0gbWFza3NldC52YWxpZFBvc2l0aW9uc1ttYXNrUG9zXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRQb3NWYWxpZCB8fCAhMCAhPT0gY3VycmVudFBvc1ZhbGlkLm1hdGNoLnN0YXRpYyB8fCBjdXJyZW50UG9zVmFsaWQubWF0Y2guZGVmICE9PSBjICYmIGMgIT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5pbnNlcnRNb2RlIHx8IHZvaWQgMCA9PT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1tzZWVrTmV4dChtYXNrUG9zKV0gfHwgcG9zLmVuZCA+IG1hc2tQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBza2lwID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza3NldC5qaXRPZmZzZXRbbWFza1Bvc10gJiYgdm9pZCAwID09PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3NlZWtOZXh0KG1hc2tQb3MpXSAmJiAocmVzdWx0ID0gaXNWYWxpZChtYXNrUG9zICsgbWFza3NldC5qaXRPZmZzZXRbbWFza1Bvc10sIGMsICEwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMSAhPT0gcmVzdWx0ICYmICghMCAhPT0gZnJvbUFsdGVybmF0ZSAmJiAocmVzdWx0LmNhcmV0ID0gbWFza1BvcyksIHNraXAgPSAhMCkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5lbmQgPiBtYXNrUG9zICYmIChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW21hc2tQb3NdID0gdm9pZCAwKSwgIXNraXAgJiYgIWlzTWFzayhtYXNrUG9zLCBvcHRzLmtlZXBTdGF0aWMpKSBmb3IgKHZhciBuUG9zID0gbWFza1BvcyArIDEsIHNuUG9zID0gc2Vla05leHQobWFza1Bvcyk7IG5Qb3MgPD0gc25Qb3M7IG5Qb3MrKykgaWYgKHJlc3VsdCA9IF9pc1ZhbGlkKG5Qb3MsIGMsIHN0cmljdCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITEgIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrYmFja1Bvc2l0aW9ucyhtYXNrUG9zLCB2b2lkIDAgIT09IHJlc3VsdC5wb3MgPyByZXN1bHQucG9zIDogblBvcykgfHwgcmVzdWx0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrUG9zID0gblBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBzZWVrTmV4dChtYXNrUG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXN1bHQgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgITEgIT09IHJlc3VsdCB8fCAhb3B0cy5rZWVwU3RhdGljIHx8ICFpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKSAmJiAwICE9PSBtYXNrUG9zIHx8IHN0cmljdCB8fCAhMCA9PT0gZnJvbUFsdGVybmF0ZSA/IGlzU2VsZWN0aW9uKHBvcykgJiYgbWFza3NldC50ZXN0c1ttYXNrUG9zXSAmJiAxIDwgbWFza3NldC50ZXN0c1ttYXNrUG9zXS5sZW5ndGggJiYgb3B0cy5rZWVwU3RhdGljICYmICFzdHJpY3QgJiYgITAgIT09IGZyb21BbHRlcm5hdGUgJiYgKHJlc3VsdCA9IGFsdGVybmF0ZSghMCkpIDogcmVzdWx0ID0gYWx0ZXJuYXRlKG1hc2tQb3MsIGMsIHN0cmljdCwgZnJvbUlzVmFsaWQsIHZvaWQgMCwgcG9zKSwgXG4gICAgICAgICAgICAgICAgICAgICEwID09PSByZXN1bHQgJiYgKHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWFza1Bvc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLnBvc3RWYWxpZGF0aW9uKSAmJiAhMCAhPT0gZnJvbUlzVmFsaWQgJiYgITAgIT09IHZhbGlkYXRlT25seSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdFJlc3VsdCA9IG9wdHMucG9zdFZhbGlkYXRpb24uY2FsbChlbCwgZ2V0QnVmZmVyKCEwKSwgdm9pZCAwICE9PSBwb3MuYmVnaW4gPyBpc1JUTCA/IHBvcy5lbmQgOiBwb3MuYmVnaW4gOiBwb3MsIGMsIHJlc3VsdCwgb3B0cywgbWFza3NldCwgc3RyaWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBwb3N0UmVzdWx0ICYmIChyZXN1bHQgPSAhMCA9PT0gcG9zdFJlc3VsdCA/IHJlc3VsdCA6IHBvc3RSZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgJiYgdm9pZCAwID09PSByZXN1bHQucG9zICYmIChyZXN1bHQucG9zID0gbWFza1BvcyksICExID09PSByZXN1bHQgfHwgITAgPT09IHZhbGlkYXRlT25seSA/IChyZXNldE1hc2tTZXQoITApLCBcbiAgICAgICAgICAgICAgICBtYXNrc2V0LnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQoITAsIHt9LCBwb3NpdGlvbnNDbG9uZSkpIDogdHJhY2tiYWNrUG9zaXRpb25zKHZvaWQgMCwgbWFza1BvcywgITApO1xuICAgICAgICAgICAgICAgIHZhciBlbmRSZXN1bHQgPSBwcm9jZXNzQ29tbWFuZE9iamVjdChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlbmRSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB0cmFja2JhY2tQb3NpdGlvbnMob3JpZ2luYWxQb3MsIG5ld1BvcywgZmlsbE9ubHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBvcmlnaW5hbFBvcykgZm9yIChvcmlnaW5hbFBvcyA9IG5ld1BvcyAtIDE7IDAgPCBvcmlnaW5hbFBvcyAmJiAhbWFza3NldC52YWxpZFBvc2l0aW9uc1tvcmlnaW5hbFBvc107IG9yaWdpbmFsUG9zLS0pIDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcyA9IG9yaWdpbmFsUG9zOyBwcyA8IG5ld1BvczsgcHMrKykgaWYgKHZvaWQgMCA9PT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twc10gJiYgIWlzTWFzayhwcywgITApKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2cCA9IDAgPT0gcHMgPyBnZXRUZXN0KHBzKSA6IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcHMgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwcykuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIgPT09IHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiAmJiB0ZXN0cy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0TWF0Y2ggPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocHMsIHRlc3RzKSwgbnA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmVzdE1hdGNoICYmICghMCAhPT0gYmVzdE1hdGNoLm1hdGNoLmppdCB8fCBcIm1hc3RlclwiID09PSBiZXN0TWF0Y2gubWF0Y2gubmV3QmxvY2tNYXJrZXIgJiYgKG5wID0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twcyArIDFdKSAmJiAhMCA9PT0gbnAubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyKSAmJiAoYmVzdE1hdGNoID0gJC5leHRlbmQoe30sIGJlc3RNYXRjaCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBnZXRQbGFjZWhvbGRlcihwcywgYmVzdE1hdGNoLm1hdGNoLCAhMCkgfHwgYmVzdE1hdGNoLm1hdGNoLmRlZlxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGJlc3RNYXRjaC5nZW5lcmF0ZWRJbnB1dCA9ICEwLCByZXZhbGlkYXRlTWFzayhwcywgYmVzdE1hdGNoLCAhMCksICEwICE9PSBmaWxsT25seSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3ZwSW5wdXQgPSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW25ld1Bvc10uaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbbmV3UG9zXSA9IHZvaWQgMCwgaXNWYWxpZChuZXdQb3MsIGN2cElucHV0LCAhMCwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcmV2YWxpZGF0ZU1hc2socG9zLCB2YWxpZFRlc3QsIGZyb21Jc1ZhbGlkLCB2YWxpZGF0ZWRQb3MpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBJc0VuY2xvc2VkU3RhdGljKHBvcywgdmFsaWRzLCBzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc01hdGNoID0gdmFsaWRzW3Bvc107XG4gICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHBvc01hdGNoIHx8ICEwICE9PSBwb3NNYXRjaC5tYXRjaC5zdGF0aWMgfHwgITAgPT09IHBvc01hdGNoLm1hdGNoLm9wdGlvbmFsaXR5IHx8IHZvaWQgMCAhPT0gdmFsaWRzWzBdICYmIHZvaWQgMCAhPT0gdmFsaWRzWzBdLmFsdGVybmF0aW9uKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2TWF0Y2ggPSBzZWxlY3Rpb24uYmVnaW4gPD0gcG9zIC0gMSA/IHZhbGlkc1twb3MgLSAxXSAmJiAhMCA9PT0gdmFsaWRzW3BvcyAtIDFdLm1hdGNoLnN0YXRpYyAmJiB2YWxpZHNbcG9zIC0gMV0gOiB2YWxpZHNbcG9zIC0gMV0sIG5leHRNYXRjaCA9IHNlbGVjdGlvbi5lbmQgPiBwb3MgKyAxID8gdmFsaWRzW3BvcyArIDFdICYmICEwID09PSB2YWxpZHNbcG9zICsgMV0ubWF0Y2guc3RhdGljICYmIHZhbGlkc1twb3MgKyAxXSA6IHZhbGlkc1twb3MgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZNYXRjaCAmJiBuZXh0TWF0Y2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAwLCBiZWdpbiA9IHZvaWQgMCAhPT0gcG9zLmJlZ2luID8gcG9zLmJlZ2luIDogcG9zLCBlbmQgPSB2b2lkIDAgIT09IHBvcy5lbmQgPyBwb3MuZW5kIDogcG9zO1xuICAgICAgICAgICAgICAgIGlmIChwb3MuYmVnaW4gPiBwb3MuZW5kICYmIChiZWdpbiA9IHBvcy5lbmQsIGVuZCA9IHBvcy5iZWdpbiksIHZhbGlkYXRlZFBvcyA9IHZvaWQgMCAhPT0gdmFsaWRhdGVkUG9zID8gdmFsaWRhdGVkUG9zIDogYmVnaW4sIFxuICAgICAgICAgICAgICAgIGJlZ2luICE9PSBlbmQgfHwgb3B0cy5pbnNlcnRNb2RlICYmIHZvaWQgMCAhPT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1t2YWxpZGF0ZWRQb3NdICYmIHZvaWQgMCA9PT0gZnJvbUlzVmFsaWQgfHwgdm9pZCAwID09PSB2YWxpZFRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQoITAsIHt9LCBtYXNrc2V0LnZhbGlkUG9zaXRpb25zKSwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24odm9pZCAwLCAhMCksIGk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobWFza3NldC5wID0gYmVnaW4sIGkgPSBsdnA7IGJlZ2luIDw9IGk7IGktLSkgZGVsZXRlIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbaV0sIFxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IHZhbGlkVGVzdCAmJiBkZWxldGUgbWFza3NldC50ZXN0c1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZCA9ICEwLCBqID0gdmFsaWRhdGVkUG9zLCBwb3NNYXRjaCA9IGosIHQsIGNhbk1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhbGlkVGVzdCAmJiAobWFza3NldC52YWxpZFBvc2l0aW9uc1t2YWxpZGF0ZWRQb3NdID0gJC5leHRlbmQoITAsIHt9LCB2YWxpZFRlc3QpLCBcbiAgICAgICAgICAgICAgICAgICAgcG9zTWF0Y2grKywgaisrKSwgaSA9IHZhbGlkVGVzdCA/IGVuZCA6IGVuZCAtIDE7IGkgPD0gbHZwOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09ICh0ID0gcG9zaXRpb25zQ2xvbmVbaV0pICYmICEwICE9PSB0LmdlbmVyYXRlZElucHV0ICYmIChlbmQgPD0gaSB8fCBiZWdpbiA8PSBpICYmIElzRW5jbG9zZWRTdGF0aWMoaSwgcG9zaXRpb25zQ2xvbmUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoO1wiXCIgIT09IGdldFRlc3QocG9zTWF0Y2gpLm1hdGNoLmRlZjsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMSAhPT0gKGNhbk1hdGNoID0gcG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24ocG9zTWF0Y2gsIHQsIG9wdHMpKSB8fCBcIitcIiA9PT0gdC5tYXRjaC5kZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiK1wiID09PSB0Lm1hdGNoLmRlZiAmJiBnZXRCdWZmZXIoITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGlzVmFsaWQocG9zTWF0Y2gsIHQuaW5wdXQsIFwiK1wiICE9PSB0Lm1hdGNoLmRlZiwgXCIrXCIgIT09IHQubWF0Y2guZGVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCA9ICExICE9PSByZXN1bHQsIGogPSAocmVzdWx0LnBvcyB8fCBwb3NNYXRjaCkgKyAxLCAhdmFsaWQgJiYgY2FuTWF0Y2gpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdmFsaWQgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IHZhbGlkVGVzdCAmJiB0Lm1hdGNoLnN0YXRpYyAmJiBpID09PSBwb3MuYmVnaW4gJiYgb2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkICYmIHBvc01hdGNoID4gbWFza3NldC5tYXNrTGVuZ3RoKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zTWF0Y2grKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIiA9PSBnZXRUZXN0KHBvc01hdGNoKS5tYXRjaC5kZWYgJiYgKHZhbGlkID0gITEpLCBwb3NNYXRjaCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm4gbWFza3NldC52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKCEwLCB7fSwgcG9zaXRpb25zQ2xvbmUpLCByZXNldE1hc2tTZXQoITApLCBcbiAgICAgICAgICAgICAgICAgICAgITE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHZhbGlkVGVzdCAmJiBnZXRUZXN0KHZhbGlkYXRlZFBvcykubWF0Y2guY2QgPT09IHZhbGlkVGVzdC5tYXRjaC5jZCAmJiAobWFza3NldC52YWxpZFBvc2l0aW9uc1t2YWxpZGF0ZWRQb3NdID0gJC5leHRlbmQoITAsIHt9LCB2YWxpZFRlc3QpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzZXRNYXNrU2V0KCEwKSwgb2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNNYXNrKHBvcywgc3RyaWN0LCBmdXp6eSkge1xuICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKHBvcykubWF0Y2g7XG4gICAgICAgICAgICAgICAgaWYgKFwiXCIgPT09IHRlc3QuZGVmICYmICh0ZXN0ID0gZ2V0VGVzdChwb3MpLm1hdGNoKSwgITAgIT09IHRlc3Quc3RhdGljKSByZXR1cm4gdGVzdC5mbjtcbiAgICAgICAgICAgICAgICBpZiAoITAgPT09IGZ1enp5ICYmIHZvaWQgMCAhPT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICYmICEwICE9PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uZ2VuZXJhdGVkSW5wdXQpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICBpZiAoITAgIT09IHN0cmljdCAmJiAtMSA8IHBvcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnV6enkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0cyA9IGdldFRlc3RzKHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdHMubGVuZ3RoID4gMSArIChcIlwiID09PSB0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPyAxIDogMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RUZW1wbGF0ZSA9IGRldGVybWluZVRlc3RUZW1wbGF0ZShwb3MsIGdldFRlc3RzKHBvcykpLCB0ZXN0UGxhY2VIb2xkZXIgPSBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3RUZW1wbGF0ZS5tYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0VGVtcGxhdGUubWF0Y2guZGVmICE9PSB0ZXN0UGxhY2VIb2xkZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNlZWtOZXh0KHBvcywgbmV3QmxvY2ssIGZ1enp5KSB7XG4gICAgICAgICAgICAgICAgdm9pZCAwID09PSBmdXp6eSAmJiAoZnV6enkgPSAhMCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcG9zaXRpb24gPSBwb3MgKyAxOyBcIlwiICE9PSBnZXRUZXN0KHBvc2l0aW9uKS5tYXRjaC5kZWYgJiYgKCEwID09PSBuZXdCbG9jayAmJiAoITAgIT09IGdldFRlc3QocG9zaXRpb24pLm1hdGNoLm5ld0Jsb2NrTWFya2VyIHx8ICFpc01hc2socG9zaXRpb24sIHZvaWQgMCwgITApKSB8fCAhMCAhPT0gbmV3QmxvY2sgJiYgIWlzTWFzayhwb3NpdGlvbiwgdm9pZCAwLCBmdXp6eSkpOyApIHBvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2Vla1ByZXZpb3VzKHBvcywgbmV3QmxvY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3MsIHRlc3RzO1xuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8PSAwKSByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBmb3IgKDswIDwgLS1wb3NpdGlvbiAmJiAoITAgPT09IG5ld0Jsb2NrICYmICEwICE9PSBnZXRUZXN0KHBvc2l0aW9uKS5tYXRjaC5uZXdCbG9ja01hcmtlciB8fCAhMCAhPT0gbmV3QmxvY2sgJiYgIWlzTWFzayhwb3NpdGlvbiwgdm9pZCAwLCAhMCkgJiYgKHRlc3RzID0gZ2V0VGVzdHMocG9zaXRpb24pLCBcbiAgICAgICAgICAgICAgICB0ZXN0cy5sZW5ndGggPCAyIHx8IDIgPT09IHRlc3RzLmxlbmd0aCAmJiBcIlwiID09PSB0ZXN0c1sxXS5tYXRjaC5kZWYpKTsgKSA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgY2FyZXRQb3MsIGV2ZW50LCB0cmlnZ2VyRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlV3JpdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbChpbnB1dG1hc2ssIGV2ZW50LCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKCEwID09PSByZWZyZXNoID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCByZXN1bHQuYnVmZmVyIHx8IGJ1ZmZlciksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGdldEJ1ZmZlcighMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGNhcmV0UG9zICYmIChjYXJldFBvcyA9IHZvaWQgMCAhPT0gcmVzdWx0LmNhcmV0ID8gcmVzdWx0LmNhcmV0IDogY2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGlucHV0ICYmIChpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGJ1ZmZlci5qb2luKFwiXCIpKSwgdm9pZCAwID09PSBjYXJldFBvcyB8fCB2b2lkIDAgIT09IGV2ZW50ICYmIFwiYmx1clwiID09PSBldmVudC50eXBlIHx8IGNhcmV0KGlucHV0LCBjYXJldFBvcywgdm9pZCAwLCB2b2lkIDAsIHZvaWQgMCAhPT0gZXZlbnQgJiYgXCJrZXlkb3duXCIgPT09IGV2ZW50LnR5cGUgJiYgKGV2ZW50LmtleUNvZGUgPT09IGtleUNvZGUuREVMRVRFIHx8IGV2ZW50LmtleUNvZGUgPT09IGtleUNvZGUuQkFDS1NQQUNFKSksIFxuICAgICAgICAgICAgICAgICEwID09PSB0cmlnZ2VyRXZlbnRzKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJChpbnB1dCksIG5wdFZhbCA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSAhMCwgJGlucHV0LnRyaWdnZXIoXCJpbnB1dFwiKSwgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5wdFZhbCA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpID8gJGlucHV0LnRyaWdnZXIoXCJjbGVhcmVkXCIpIDogITAgPT09IGlzQ29tcGxldGUoYnVmZmVyKSAmJiAkaW5wdXQudHJpZ2dlcihcImNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QsIHJldHVyblBMKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlc3QgPSB0ZXN0IHx8IGdldFRlc3QocG9zKS5tYXRjaCwgdm9pZCAwICE9PSB0ZXN0LnBsYWNlaG9sZGVyIHx8ICEwID09PSByZXR1cm5QTCkgcmV0dXJuICQuaXNGdW5jdGlvbih0ZXN0LnBsYWNlaG9sZGVyKSA/IHRlc3QucGxhY2Vob2xkZXIob3B0cykgOiB0ZXN0LnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgICAgIGlmICghMCAhPT0gdGVzdC5zdGF0aWMpIHJldHVybiBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdChwb3MgJSBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKC0xIDwgcG9zICYmIHZvaWQgMCA9PT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0cyA9IGdldFRlc3RzKHBvcyksIHN0YXRpY0FsdGVybmF0aW9ucyA9IFtdLCBwcmV2VGVzdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RzLmxlbmd0aCA+IDEgKyAoXCJcIiA9PT0gdGVzdHNbdGVzdHMubGVuZ3RoIC0gMV0ubWF0Y2guZGVmID8gMSA6IDApKSBmb3IgKHZhciBpID0gMDsgaSA8IHRlc3RzLmxlbmd0aDsgaSsrKSBpZiAoXCJcIiAhPT0gdGVzdHNbaV0ubWF0Y2guZGVmICYmICEwICE9PSB0ZXN0c1tpXS5tYXRjaC5vcHRpb25hbGl0eSAmJiAhMCAhPT0gdGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmICghMCA9PT0gdGVzdHNbaV0ubWF0Y2guc3RhdGljIHx8IHZvaWQgMCA9PT0gcHJldlRlc3QgfHwgITEgIT09IHRlc3RzW2ldLm1hdGNoLmZuLnRlc3QocHJldlRlc3QubWF0Y2guZGVmLCBtYXNrc2V0LCBwb3MsICEwLCBvcHRzKSkgJiYgKHN0YXRpY0FsdGVybmF0aW9ucy5wdXNoKHRlc3RzW2ldKSwgXG4gICAgICAgICAgICAgICAgICAgICEwID09PSB0ZXN0c1tpXS5tYXRjaC5zdGF0aWMgJiYgKHByZXZUZXN0ID0gdGVzdHNbaV0pLCAxIDwgc3RhdGljQWx0ZXJuYXRpb25zLmxlbmd0aCAmJiAvWzAtOWEtYkEtWl0vLnRlc3Qoc3RhdGljQWx0ZXJuYXRpb25zWzBdLm1hdGNoLmRlZikpKSByZXR1cm4gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQocG9zICUgb3B0cy5wbGFjZWhvbGRlci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGVzdC5kZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBIYW5kbGVOYXRpdmVQbGFjZWhvbGRlcihucHQsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGllKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChucHQuaW5wdXRtYXNrLl92YWx1ZUdldCgpICE9PSB2YWx1ZSAmJiAobnB0LnBsYWNlaG9sZGVyICE9PSB2YWx1ZSB8fCBcIlwiID09PSBucHQucGxhY2Vob2xkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKSwgbnB0VmFsdWUgPSBucHQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5wdFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xID09PSBsdnAgJiYgbnB0VmFsdWUgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSA/IGJ1ZmZlciA9IFtdIDogLTEgIT09IGx2cCAmJiBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihucHQsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgbnB0LnBsYWNlaG9sZGVyICE9PSB2YWx1ZSAmJiAobnB0LnBsYWNlaG9sZGVyID0gdmFsdWUsIFwiXCIgPT09IG5wdC5wbGFjZWhvbGRlciAmJiBucHQucmVtb3ZlQXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lTmV3Q2FyZXRQb3NpdGlvbihzZWxlY3RlZENhcmV0LCB0YWJiZWQpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb1JhZGl4Rm9jdXMoY2xpY2tQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiAwICE9PSBvcHRzLmRpZ2l0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZwcyA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB2cHNbY2xpY2tQb3NdIHx8IHZwc1tjbGlja1Bvc10uaW5wdXQgPT09IGdldFBsYWNlaG9sZGVyKGNsaWNrUG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1BvcyA8IHNlZWtOZXh0KC0xKSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvcyA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGdldEJ1ZmZlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT09IHJhZGl4UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHZwIGluIHZwcykgaWYgKHZwc1t2cF0gJiYgcmFkaXhQb3MgPCB2cCAmJiB2cHNbdnBdLmlucHV0ICE9PSBnZXRQbGFjZWhvbGRlcih2cCkpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0YWJiZWQgJiYgKGlzUlRMID8gc2VsZWN0ZWRDYXJldC5lbmQgPSBzZWxlY3RlZENhcmV0LmJlZ2luIDogc2VsZWN0ZWRDYXJldC5iZWdpbiA9IHNlbGVjdGVkQ2FyZXQuZW5kKSwgXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXJldC5iZWdpbiA9PT0gc2VsZWN0ZWRDYXJldC5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXJldCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGdldEJ1ZmZlcigpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImlnbm9yZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXJldC5lbmQgPSBzZWxlY3RlZENhcmV0LmJlZ2luID0gc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyYWRpeEZvY3VzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9SYWRpeEZvY3VzKHNlbGVjdGVkQ2FyZXQuYmVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXJldC5lbmQgPSBzZWxlY3RlZENhcmV0LmJlZ2luID0gb3B0cy5udW1lcmljSW5wdXQgPyBzZWVrTmV4dChyYWRpeFBvcykgOiByYWRpeFBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xpY2tQb3NpdGlvbiA9IHNlbGVjdGVkQ2FyZXQuYmVnaW4sIGx2Y2xpY2tQb3NpdGlvbiA9IGdldExhc3RWYWxpZFBvc2l0aW9uKGNsaWNrUG9zaXRpb24sICEwKSwgbGFzdFBvc2l0aW9uID0gc2Vla05leHQoLTEgIT09IGx2Y2xpY2tQb3NpdGlvbiB8fCBpc01hc2soMCkgPyBsdmNsaWNrUG9zaXRpb24gOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1Bvc2l0aW9uIDwgbGFzdFBvc2l0aW9uKSBzZWxlY3RlZENhcmV0LmVuZCA9IHNlbGVjdGVkQ2FyZXQuYmVnaW4gPSBpc01hc2soY2xpY2tQb3NpdGlvbiwgITApIHx8IGlzTWFzayhjbGlja1Bvc2l0aW9uIC0gMSwgITApID8gY2xpY2tQb3NpdGlvbiA6IHNlZWtOZXh0KGNsaWNrUG9zaXRpb24pOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gbWFza3NldC52YWxpZFBvc2l0aW9uc1tsdmNsaWNrUG9zaXRpb25dLCB0dCA9IGdldFRlc3RUZW1wbGF0ZShsYXN0UG9zaXRpb24sIGx2cCA/IGx2cC5tYXRjaC5sb2NhdG9yIDogdm9pZCAwLCBsdnApLCBwbGFjZWhvbGRlciA9IGdldFBsYWNlaG9sZGVyKGxhc3RQb3NpdGlvbiwgdHQubWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIlwiICE9PSBwbGFjZWhvbGRlciAmJiBnZXRCdWZmZXIoKVtsYXN0UG9zaXRpb25dICE9PSBwbGFjZWhvbGRlciAmJiAhMCAhPT0gdHQubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmICEwICE9PSB0dC5tYXRjaC5uZXdCbG9ja01hcmtlciB8fCAhaXNNYXNrKGxhc3RQb3NpdGlvbiwgb3B0cy5rZWVwU3RhdGljKSAmJiB0dC5tYXRjaC5kZWYgPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdQb3MgPSBzZWVrTmV4dChsYXN0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3UG9zIDw9IGNsaWNrUG9zaXRpb24gfHwgY2xpY2tQb3NpdGlvbiA9PT0gbGFzdFBvc2l0aW9uKSAmJiAobGFzdFBvc2l0aW9uID0gbmV3UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXJldC5lbmQgPSBzZWxlY3RlZENhcmV0LmJlZ2luID0gbGFzdFBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZENhcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBFdmVudFJ1bGVyID0ge1xuICAgICAgICAgICAgICAgIG9uOiBmdW5jdGlvbiBvbihpbnB1dCwgZXZlbnROYW1lLCBldmVudEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ID0gZnVuY3Rpb24gZXYoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50ICYmIChlID0gZS5vcmlnaW5hbEV2ZW50IHx8IGUsIGFyZ3VtZW50c1swXSA9IGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLCBhcmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gdGhhdC5pbnB1dG1hc2sgJiYgXCJGT1JNXCIgIT09IHRoaXMubm9kZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1PcHRzID0gJC5kYXRhKHRoYXQsIFwiX2lucHV0bWFza19vcHRzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltT3B0cyA/IG5ldyBJbnB1dG1hc2soaW1PcHRzKS5tYXNrKHRoYXQpIDogRXZlbnRSdWxlci5vZmYodGhhdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInNldHZhbHVlXCIgPT09IGUudHlwZSB8fCBcIkZPUk1cIiA9PT0gdGhpcy5ub2RlTmFtZSB8fCAhKHRoYXQuZGlzYWJsZWQgfHwgdGhhdC5yZWFkT25seSAmJiAhKFwia2V5ZG93blwiID09PSBlLnR5cGUgJiYgZS5jdHJsS2V5ICYmIDY3ID09PSBlLmtleUNvZGUgfHwgITEgPT09IG9wdHMudGFiVGhyb3VnaCAmJiBlLmtleUNvZGUgPT09IGtleUNvZGUuVEFCKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMCA9PT0gc2tpcElucHV0RXZlbnQgfHwgZS5pbnB1dFR5cGUgJiYgXCJpbnNlcnRDb21wb3NpdGlvblRleHRcIiA9PT0gZS5pbnB1dFR5cGUpIHJldHVybiBza2lwSW5wdXRFdmVudCA9ICExLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gITEsIHNraXBJbnB1dEV2ZW50ID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwID09PSBza2lwS2V5UHJlc3NFdmVudCkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjbGlja1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmb2N1c1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25FdmVudCA/ICh2YWxpZGF0aW9uRXZlbnQgPSAhMSwgaW5wdXQuYmx1cigpLCBIYW5kbGVOYXRpdmVQbGFjZWhvbGRlcihpbnB1dCwgKGlzUlRMID8gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLmpvaW4oXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDNlMykpIDogKGFyZ3MgPSBhcmd1bWVudHMsIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrICYmIGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApKSwgITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITEgPT09IHJldHVyblZhbCAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpKSwgcmV0dXJuVmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXSA9IGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXSB8fCBbXSwgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdLnB1c2goZXYpLCBcbiAgICAgICAgICAgICAgICAgICAgLTEgIT09ICQuaW5BcnJheShldmVudE5hbWUsIFsgXCJzdWJtaXRcIiwgXCJyZXNldFwiIF0pID8gbnVsbCAhPT0gaW5wdXQuZm9ybSAmJiAkKGlucHV0LmZvcm0pLm9uKGV2ZW50TmFtZSwgZXYpIDogJChpbnB1dCkub24oZXZlbnROYW1lLCBldik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvZmY6IGZ1bmN0aW9uIG9mZihpbnB1dCwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrICYmIGlucHV0LmlucHV0bWFzay5ldmVudHMgJiYgKGV2ZW50ID8gKGV2ZW50cyA9IFtdLCBldmVudHNbZXZlbnRdID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudF0pIDogZXZlbnRzID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50cywgXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChldmVudHMsIGZ1bmN0aW9uKGV2ZW50TmFtZSwgZXZBcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOzAgPCBldkFyci5sZW5ndGg7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldiA9IGV2QXJyLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xICE9PSAkLmluQXJyYXkoZXZlbnROYW1lLCBbIFwic3VibWl0XCIsIFwicmVzZXRcIiBdKSA/IG51bGwgIT09IGlucHV0LmZvcm0gJiYgJChpbnB1dC5mb3JtKS5vZmYoZXZlbnROYW1lLCBldikgOiAkKGlucHV0KS5vZmYoZXZlbnROYW1lLCBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgICAgICAgICAgICBrZXlkb3duRXZlbnQ6IGZ1bmN0aW9uIGtleWRvd25FdmVudChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBrID0gZS5rZXlDb2RlLCBwb3MgPSBjYXJldChpbnB1dCksIGtkUmVzdWx0ID0gb3B0cy5vbktleURvd24uY2FsbCh0aGlzLCBlLCBnZXRCdWZmZXIoKSwgcG9zLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0ga2RSZXN1bHQpIHJldHVybiBrZFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IGtleUNvZGUuQkFDS1NQQUNFIHx8IGsgPT09IGtleUNvZGUuREVMRVRFIHx8IGlwaG9uZSAmJiBrID09PSBrZXlDb2RlLkJBQ0tTUEFDRV9TQUZBUkkgfHwgZS5jdHJsS2V5ICYmIGsgPT09IGtleUNvZGUuWCAmJiAhKFwib25jdXRcIiBpbiBpbnB1dCkpIGUucHJldmVudERlZmF1bHQoKSwgXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zKSwgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcighMCksIG1hc2tzZXQucCwgZSwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKTsgZWxzZSBpZiAoayA9PT0ga2V5Q29kZS5FTkQgfHwgayA9PT0ga2V5Q29kZS5QQUdFX0RPV04pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiBjYXJldFBvcywgY2FyZXRQb3MsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGsgPT09IGtleUNvZGUuSE9NRSAmJiAhZS5zaGlmdEtleSB8fCBrID09PSBrZXlDb2RlLlBBR0VfVVAgPyAoZS5wcmV2ZW50RGVmYXVsdCgpLCBcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiAwLCAhMCkpIDogKG9wdHMudW5kb09uRXNjYXBlICYmIGsgPT09IGtleUNvZGUuRVNDQVBFIHx8IDkwID09PSBrICYmIGUuY3RybEtleSkgJiYgITAgIT09IGUuYWx0S2V5ID8gKGNoZWNrVmFsKGlucHV0LCAhMCwgITEsIHVuZG9WYWx1ZS5zcGxpdChcIlwiKSksIFxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNsaWNrXCIpKSA6ICEwID09PSBvcHRzLnRhYlRocm91Z2ggJiYgayA9PT0ga2V5Q29kZS5UQUIgPyAoITAgPT09IGUuc2hpZnRLZXkgPyAoITAgPT09IGdldFRlc3QocG9zLmJlZ2luKS5tYXRjaC5zdGF0aWMgJiYgKHBvcy5iZWdpbiA9IHNlZWtOZXh0KHBvcy5iZWdpbikpLCBcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHNlZWtQcmV2aW91cyhwb3MuYmVnaW4sICEwKSwgcG9zLmJlZ2luID0gc2Vla1ByZXZpb3VzKHBvcy5lbmQsICEwKSkgOiAocG9zLmJlZ2luID0gc2Vla05leHQocG9zLmJlZ2luLCAhMCksIFxuICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gc2Vla05leHQocG9zLmJlZ2luLCAhMCksIHBvcy5lbmQgPCBtYXNrc2V0Lm1hc2tMZW5ndGggJiYgcG9zLmVuZC0tKSwgcG9zLmJlZ2luIDwgbWFza3NldC5tYXNrTGVuZ3RoICYmIChlLnByZXZlbnREZWZhdWx0KCksIFxuICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgcG9zLmJlZ2luLCBwb3MuZW5kKSkpIDogZS5zaGlmdEtleSB8fCBvcHRzLmluc2VydE1vZGVWaXN1YWwgJiYgITEgPT09IG9wdHMuaW5zZXJ0TW9kZSAmJiAoayA9PT0ga2V5Q29kZS5SSUdIVCA/IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgY2FyZXRQb3MuYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKSA6IGsgPT09IGtleUNvZGUuTEVGVCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zX2JlZ2luID0gdHJhbnNsYXRlUG9zaXRpb24oaW5wdXQuaW5wdXRtYXNrLmNhcmV0UG9zLmJlZ2luKSwgY2FyZXRQb3NfZW5kID0gdHJhbnNsYXRlUG9zaXRpb24oaW5wdXQuaW5wdXRtYXNrLmNhcmV0UG9zLmVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgaXNSVEwgPyBjYXJldFBvc19iZWdpbiArIChjYXJldFBvc19iZWdpbiA9PT0gbWFza3NldC5tYXNrTGVuZ3RoID8gMCA6IDEpIDogY2FyZXRQb3NfYmVnaW4gLSAoMCA9PT0gY2FyZXRQb3NfYmVnaW4gPyAwIDogMSkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKSk7XG4gICAgICAgICAgICAgICAgICAgIGlnbm9yYWJsZSA9IC0xICE9PSAkLmluQXJyYXkoaywgb3B0cy5pZ25vcmFibGVzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGtleXByZXNzRXZlbnQ6IGZ1bmN0aW9uIGtleXByZXNzRXZlbnQoZSwgY2hlY2t2YWwsIHdyaXRlT3V0LCBzdHJpY3QsIG5keCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUud2hpY2ggfHwgZS5jaGFyQ29kZSB8fCBlLmtleUNvZGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKCEwID09PSBjaGVja3ZhbCB8fCBlLmN0cmxLZXkgJiYgZS5hbHRLZXkpICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGlnbm9yYWJsZSkpIHJldHVybiBrID09PSBrZXlDb2RlLkVOVEVSICYmIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiAodW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCkpLCBza2lwSW5wdXRFdmVudCA9ICEwLCAhMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIDQ0ICE9PSBrICYmIDQ2ICE9PSBrIHx8IDMgIT09IGUubG9jYXRpb24gfHwgXCJcIiA9PT0gb3B0cy5yYWRpeFBvaW50IHx8IChrID0gb3B0cy5yYWRpeFBvaW50LmNoYXJDb2RlQXQoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGNoZWNrdmFsID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBuZHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBuZHhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBjYXJldChpbnB1dCksIGZvcndhcmRQb3NpdGlvbiwgYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LndyaXRlT3V0QnVmZmVyID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsUmVzdWx0ID0gaXNWYWxpZChwb3MsIGMsIHN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoITEgIT09IHZhbFJlc3VsdCAmJiAocmVzZXRNYXNrU2V0KCEwKSwgZm9yd2FyZFBvc2l0aW9uID0gdm9pZCAwICE9PSB2YWxSZXN1bHQuY2FyZXQgPyB2YWxSZXN1bHQuY2FyZXQgOiBzZWVrTmV4dCh2YWxSZXN1bHQucG9zLmJlZ2luID8gdmFsUmVzdWx0LnBvcy5iZWdpbiA6IHZhbFJlc3VsdC5wb3MpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQucCA9IGZvcndhcmRQb3NpdGlvbiksIGZvcndhcmRQb3NpdGlvbiA9IG9wdHMubnVtZXJpY0lucHV0ICYmIHZvaWQgMCA9PT0gdmFsUmVzdWx0LmNhcmV0ID8gc2Vla1ByZXZpb3VzKGZvcndhcmRQb3NpdGlvbikgOiBmb3J3YXJkUG9zaXRpb24sIFxuICAgICAgICAgICAgICAgICAgICAgICAgITEgIT09IHdyaXRlT3V0ICYmIChzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMub25LZXlWYWxpZGF0aW9uLmNhbGwoaW5wdXQsIGssIHZhbFJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKSwgbWFza3NldC53cml0ZU91dEJ1ZmZlciAmJiAhMSAhPT0gdmFsUmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCBmb3J3YXJkUG9zaXRpb24sIGUsICEwICE9PSBjaGVja3ZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBjaGVja3ZhbCkgcmV0dXJuICExICE9PSB2YWxSZXN1bHQgJiYgKHZhbFJlc3VsdC5mb3J3YXJkUG9zaXRpb24gPSBmb3J3YXJkUG9zaXRpb24pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGFzdGVFdmVudDogZnVuY3Rpb24gcGFzdGVFdmVudChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIGlucHV0VmFsdWUgPSB0aGlzLmlucHV0bWFzay5fdmFsdWVHZXQoITApLCBjYXJldFBvcyA9IGNhcmV0KHRoaXMpLCB0ZW1wVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlzUlRMICYmICh0ZW1wVmFsdWUgPSBjYXJldFBvcy5lbmQsIGNhcmV0UG9zLmVuZCA9IGNhcmV0UG9zLmJlZ2luLCBjYXJldFBvcy5iZWdpbiA9IHRlbXBWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUJlZm9yZUNhcmV0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4pLCB2YWx1ZUFmdGVyQ2FyZXQgPSBpbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5lbmQsIGlucHV0VmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlQmVmb3JlQ2FyZXQgPT0gKGlzUlRMID8gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKDAsIGNhcmV0UG9zLmJlZ2luKS5qb2luKFwiXCIpICYmICh2YWx1ZUJlZm9yZUNhcmV0ID0gXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZUFmdGVyQ2FyZXQgPT0gKGlzUlRMID8gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKGNhcmV0UG9zLmVuZCkuam9pbihcIlwiKSAmJiAodmFsdWVBZnRlckNhcmV0ID0gXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YSAmJiB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpICsgdmFsdWVBZnRlckNhcmV0OyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZS5jbGlwYm9hcmREYXRhIHx8ICFlLmNsaXBib2FyZERhdGEuZ2V0RGF0YSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHZhbHVlQmVmb3JlQ2FyZXQgKyBlLmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgKyB2YWx1ZUFmdGVyQ2FyZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhc3RlVmFsdWUgPSBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVQYXN0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXN0ZVZhbHVlID0gb3B0cy5vbkJlZm9yZVBhc3RlLmNhbGwoaW5wdXRtYXNrLCBpbnB1dFZhbHVlLCBvcHRzKSwgITEgPT09IHBhc3RlVmFsdWUpIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXN0ZVZhbHVlID0gcGFzdGVWYWx1ZSB8fCBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGVja1ZhbCh0aGlzLCAhMSwgITEsIHBhc3RlVmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIlwiKSksIHdyaXRlQnVmZmVyKHRoaXMsIGdldEJ1ZmZlcigpLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0RmFsbEJhY2tFdmVudDogZnVuY3Rpb24gaW5wdXRGYWxsQmFja0V2ZW50KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaWVNb2JpbGVIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGllbW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0Q2hhciA9IGlucHV0VmFsdWUucmVwbGFjZShnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gaW5wdXRDaGFyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXYgPSBpbnB1dFZhbHVlLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdi5zcGxpY2UoY2FyZXRQb3MuYmVnaW4sIDAsIGlucHV0Q2hhciksIGlucHV0VmFsdWUgPSBpdi5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFuYWx5c2VDaGFuZ2VzKGlucHV0VmFsdWUsIGJ1ZmZlciwgY2FyZXRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGZyb250UGFydCA9IGlucHV0VmFsdWUuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKS5zcGxpdChcIlwiKSwgYmFja1BhcnQgPSBpbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5iZWdpbikuc3BsaXQoXCJcIiksIGZyb250QnVmZmVyUGFydCA9IGJ1ZmZlci5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4pLnNwbGl0KFwiXCIpLCBiYWNrQnVmZmVyUGFydCA9IGJ1ZmZlci5zdWJzdHIoY2FyZXRQb3MuYmVnaW4pLnNwbGl0KFwiXCIpLCBmcGwgPSBmcm9udFBhcnQubGVuZ3RoID49IGZyb250QnVmZmVyUGFydC5sZW5ndGggPyBmcm9udFBhcnQubGVuZ3RoIDogZnJvbnRCdWZmZXJQYXJ0Lmxlbmd0aCwgYnBsID0gYmFja1BhcnQubGVuZ3RoID49IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCA/IGJhY2tQYXJ0Lmxlbmd0aCA6IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCwgYmwsIGksIGFjdGlvbiA9IFwiXCIsIGRhdGEgPSBbXSwgbWFya2VyID0gXCJ+XCIsIHBsYWNlaG9sZGVyOyBmcm9udFBhcnQubGVuZ3RoIDwgZnBsOyApIGZyb250UGFydC5wdXNoKFwiflwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoO2Zyb250QnVmZmVyUGFydC5sZW5ndGggPCBmcGw7ICkgZnJvbnRCdWZmZXJQYXJ0LnB1c2goXCJ+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7YmFja1BhcnQubGVuZ3RoIDwgYnBsOyApIGJhY2tQYXJ0LnVuc2hpZnQoXCJ+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7YmFja0J1ZmZlclBhcnQubGVuZ3RoIDwgYnBsOyApIGJhY2tCdWZmZXJQYXJ0LnVuc2hpZnQoXCJ+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0J1ZmZlciA9IGZyb250UGFydC5jb25jYXQoYmFja1BhcnQpLCBvbGRCdWZmZXIgPSBmcm9udEJ1ZmZlclBhcnQuY29uY2F0KGJhY2tCdWZmZXJQYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGJsID0gbmV3QnVmZmVyLmxlbmd0aDsgaSA8IGJsOyBpKyspIHN3aXRjaCAocGxhY2Vob2xkZXIgPSBnZXRQbGFjZWhvbGRlcih0cmFuc2xhdGVQb3NpdGlvbihpKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnNlcnRUZXh0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkQnVmZmVyW2kgLSAxXSA9PT0gbmV3QnVmZmVyW2ldICYmIGNhcmV0UG9zLmJlZ2luID09IG5ld0J1ZmZlci5sZW5ndGggLSAxICYmIGRhdGEucHVzaChuZXdCdWZmZXJbaV0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gYmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImluc2VydFJlcGxhY2VtZW50VGV4dFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiflwiID09PSBuZXdCdWZmZXJbaV0gPyBjYXJldFBvcy5lbmQrKyA6IGkgPSBibDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ+XCIgPT09IG5ld0J1ZmZlcltpXSA/IGNhcmV0UG9zLmVuZCsrIDogaSA9IGJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QnVmZmVyW2ldICE9PSBvbGRCdWZmZXJbaV0gJiYgKFwiflwiICE9PSBuZXdCdWZmZXJbaSArIDFdICYmIG5ld0J1ZmZlcltpICsgMV0gIT09IHBsYWNlaG9sZGVyICYmIHZvaWQgMCAhPT0gbmV3QnVmZmVyW2kgKyAxXSB8fCAob2xkQnVmZmVyW2ldICE9PSBwbGFjZWhvbGRlciB8fCBcIn5cIiAhPT0gb2xkQnVmZmVyW2kgKyAxXSkgJiYgXCJ+XCIgIT09IG9sZEJ1ZmZlcltpXSA/IFwiflwiID09PSBvbGRCdWZmZXJbaSArIDFdICYmIG9sZEJ1ZmZlcltpXSA9PT0gbmV3QnVmZmVyW2kgKyAxXSA/IChhY3Rpb24gPSBcImluc2VydFRleHRcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKG5ld0J1ZmZlcltpXSksIGNhcmV0UG9zLmJlZ2luLS0sIGNhcmV0UG9zLmVuZC0tKSA6IG5ld0J1ZmZlcltpXSAhPT0gcGxhY2Vob2xkZXIgJiYgXCJ+XCIgIT09IG5ld0J1ZmZlcltpXSAmJiAoXCJ+XCIgPT09IG5ld0J1ZmZlcltpICsgMV0gfHwgb2xkQnVmZmVyW2ldICE9PSBuZXdCdWZmZXJbaV0gJiYgb2xkQnVmZmVyW2kgKyAxXSA9PT0gbmV3QnVmZmVyW2kgKyAxXSkgPyAoYWN0aW9uID0gXCJpbnNlcnRSZXBsYWNlbWVudFRleHRcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKG5ld0J1ZmZlcltpXSksIGNhcmV0UG9zLmJlZ2luLS0pIDogXCJ+XCIgPT09IG5ld0J1ZmZlcltpXSA/IChhY3Rpb24gPSBcImRlbGV0ZUNvbnRlbnRCYWNrd2FyZFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaXNNYXNrKHRyYW5zbGF0ZVBvc2l0aW9uKGkpLCAhMCkgJiYgb2xkQnVmZmVyW2ldICE9PSBvcHRzLnJhZGl4UG9pbnQgfHwgY2FyZXRQb3MuZW5kKyspIDogaSA9IGJsIDogKGFjdGlvbiA9IFwiaW5zZXJ0VGV4dFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2gobmV3QnVmZmVyW2ldKSwgY2FyZXRQb3MuYmVnaW4tLSwgY2FyZXRQb3MuZW5kLS0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgaW5wdXRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoITApLCBidWZmZXIgPSAoaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlcigpKS5qb2luKFwiXCIpLCBjYXJldFBvcyA9IGNhcmV0KGlucHV0LCB2b2lkIDAsIHZvaWQgMCwgITApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyICE9PSBpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gaWVNb2JpbGVIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlcyA9IGFuYWx5c2VDaGFuZ2VzKGlucHV0VmFsdWUsIGJ1ZmZlciwgY2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgoaW5wdXQuaW5wdXRtYXNrLnNoYWRvd1Jvb3QgfHwgZG9jdW1lbnQpLmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0ICYmIGlucHV0LmZvY3VzKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpKSwgY2FyZXQoaW5wdXQsIGNhcmV0UG9zLmJlZ2luLCBjYXJldFBvcy5lbmQsICEwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLmFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5zZXJ0VGV4dFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5zZXJ0UmVwbGFjZW1lbnRUZXh0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNoYW5nZXMuZGF0YSwgZnVuY3Rpb24obmR4LCBlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGVudHJ5LmNoYXJDb2RlQXQoMCksIGlnbm9yYWJsZSA9ICExLCBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWwudHJpZ2dlcihcImtleXVwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWxldGVDb250ZW50QmFja3dhcmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZG93biA9IG5ldyAkLkV2ZW50KFwia2V5ZG93blwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBrZXlDb2RlLkJBQ0tTUEFDRSwgRXZlbnRIYW5kbGVycy5rZXlkb3duRXZlbnQuY2FsbChpbnB1dCwga2V5ZG93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseUlucHV0VmFsdWUoaW5wdXQsIGlucHV0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wb3NpdGlvbmVuZEV2ZW50OiBmdW5jdGlvbiBjb21wb3NpdGlvbmVuZEV2ZW50KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldFZhbHVlRXZlbnQ6IGZ1bmN0aW9uIHNldFZhbHVlRXZlbnQoZSwgYXJndW1lbnRfMSwgYXJndW1lbnRfMikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCB2YWx1ZSA9IGUgJiYgZS5kZXRhaWwgPyBlLmRldGFpbFswXSA6IGFyZ3VtZW50XzE7XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gdmFsdWUgJiYgKHZhbHVlID0gdGhpcy5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSksIGFwcGx5SW5wdXRWYWx1ZSh0aGlzLCB2YWx1ZSksIFxuICAgICAgICAgICAgICAgICAgICAoZS5kZXRhaWwgJiYgdm9pZCAwICE9PSBlLmRldGFpbFsxXSB8fCB2b2lkIDAgIT09IGFyZ3VtZW50XzIpICYmIGNhcmV0KHRoaXMsIGUuZGV0YWlsID8gZS5kZXRhaWxbMV0gOiBhcmd1bWVudF8yKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvY3VzRXZlbnQ6IGZ1bmN0aW9uIGZvY3VzRXZlbnQoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBucHRWYWx1ZSA9IHRoaXMuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnNob3dNYXNrT25Gb2N1cyAmJiBucHRWYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiB3cml0ZUJ1ZmZlcih0aGlzLCBnZXRCdWZmZXIoKSwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpLCBcbiAgICAgICAgICAgICAgICAgICAgITAgIT09IG9wdHMucG9zaXRpb25DYXJldE9uVGFiIHx8ICExICE9PSBtb3VzZUVudGVyIHx8IGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpICYmIC0xICE9PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIHx8IEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudC5hcHBseSh0aGlzLCBbIGUsICEwIF0pLCBcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGludmFsaWRFdmVudDogZnVuY3Rpb24gaW52YWxpZEV2ZW50KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkV2ZW50ID0gITA7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3VzZWxlYXZlRXZlbnQ6IGZ1bmN0aW9uIG1vdXNlbGVhdmVFdmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgbW91c2VFbnRlciA9ICExLCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmICh0aGlzLmlucHV0bWFzay5zaGFkb3dSb290IHx8IGRvY3VtZW50KS5hY3RpdmVFbGVtZW50ICE9PSB0aGlzICYmIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKHRoaXMsIG9yaWdpbmFsUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xpY2tFdmVudDogZnVuY3Rpb24gY2xpY2tFdmVudChlLCB0YWJiZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0aGlzLmlucHV0bWFzay5zaGFkb3dSb290IHx8IGRvY3VtZW50KS5hY3RpdmVFbGVtZW50ID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2FyZXRQb3NpdGlvbiA9IGRldGVybWluZU5ld0NhcmV0UG9zaXRpb24oY2FyZXQodGhpcyksIHRhYmJlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IG5ld0NhcmV0UG9zaXRpb24gJiYgY2FyZXQodGhpcywgbmV3Q2FyZXRQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGN1dEV2ZW50OiBmdW5jdGlvbiBjdXRFdmVudChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIHBvcyA9IGNhcmV0KHRoaXMpLCBjbGlwYm9hcmREYXRhID0gd2luZG93LmNsaXBib2FyZERhdGEgfHwgZS5jbGlwYm9hcmREYXRhLCBjbGlwRGF0YSA9IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmVuZCwgcG9zLmJlZ2luKSA6IGdldEJ1ZmZlcigpLnNsaWNlKHBvcy5iZWdpbiwgcG9zLmVuZCk7XG4gICAgICAgICAgICAgICAgICAgIGNsaXBib2FyZERhdGEuc2V0RGF0YShcInRleHRcIiwgaXNSVEwgPyBjbGlwRGF0YS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGNsaXBEYXRhLmpvaW4oXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQgJiYgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpLCBoYW5kbGVSZW1vdmUodGhpcywga2V5Q29kZS5ERUxFVEUsIHBvcyksIFxuICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcih0aGlzLCBnZXRCdWZmZXIoKSwgbWFza3NldC5wLCBlLCB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmx1ckV2ZW50OiBmdW5jdGlvbiBibHVyRXZlbnQoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKHRoaXMsIG9yaWdpbmFsUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5wdFZhbHVlID0gdGhpcy5pbnB1dG1hc2suX3ZhbHVlR2V0KCksIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIlwiICE9PSBucHRWYWx1ZSAmJiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiAoLTEgPT09IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgJiYgbnB0VmFsdWUgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSA/IGJ1ZmZlciA9IFtdIDogY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgITEgPT09IGlzQ29tcGxldGUoYnVmZmVyKSAmJiAoc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImluY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKSwgb3B0cy5jbGVhckluY29tcGxldGUgJiYgKHJlc2V0TWFza1NldCgpLCBidWZmZXIgPSBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID8gW10gOiBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKCkpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcih0aGlzLCBidWZmZXIsIHZvaWQgMCwgZSkpLCB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgJiYgKHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3VzZWVudGVyRXZlbnQ6IGZ1bmN0aW9uIG1vdXNlZW50ZXJFdmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgbW91c2VFbnRlciA9ICEwLCAodGhpcy5pbnB1dG1hc2suc2hhZG93Um9vdCB8fCBkb2N1bWVudCkuYWN0aXZlRWxlbWVudCAhPT0gdGhpcyAmJiAobnVsbCA9PSBvcmlnaW5hbFBsYWNlaG9sZGVyICYmIHRoaXMucGxhY2Vob2xkZXIgIT09IG9yaWdpbmFsUGxhY2Vob2xkZXIgJiYgKG9yaWdpbmFsUGxhY2Vob2xkZXIgPSB0aGlzLnBsYWNlaG9sZGVyKSwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuc2hvd01hc2tPbkhvdmVyICYmIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKHRoaXMsIChpc1JUTCA/IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoKS5yZXZlcnNlKCkgOiBnZXRCdWZmZXJUZW1wbGF0ZSgpKS5qb2luKFwiXCIpKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWJtaXRFdmVudDogZnVuY3Rpb24gc3VibWl0RXZlbnQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiAkZWwudHJpZ2dlcihcImNoYW5nZVwiKSwgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiAtMSA9PT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSAmJiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0ICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpICYmIGVsLmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLmNsZWFySW5jb21wbGV0ZSAmJiAhMSA9PT0gaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkgJiYgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMucmVtb3ZlTWFza09uU3VibWl0ICYmIChlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KGVsLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCksICEwKSwgXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihlbCwgZ2V0QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNldEV2ZW50OiBmdW5jdGlvbiByZXNldEV2ZW50KCkge1xuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sucmVmcmVzaFZhbHVlID0gITAsIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBseUlucHV0VmFsdWUoZWwsIGVsLmlucHV0bWFzay5fdmFsdWVHZXQoITApKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdmFsdWVCdWZmZXI7XG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja1ZhbChpbnB1dCwgd3JpdGVPdXQsIHN0cmljdCwgbnB0dmwsIGluaXRpYXRpbmdFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dG1hc2sgPSB0aGlzIHx8IGlucHV0LmlucHV0bWFzaywgaW5wdXRWYWx1ZSA9IG5wdHZsLnNsaWNlKCksIGNoYXJDb2RlcyA9IFwiXCIsIGluaXRpYWxOZHggPSAtMSwgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzVGVtcGxhdGVNYXRjaChuZHgsIGNoYXJDb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0YXJnZXRUZW1wbGF0ZSA9IGdldE1hc2tUZW1wbGF0ZSghMCwgMCkuc2xpY2UobmR4LCBzZWVrTmV4dChuZHgpKS5qb2luKFwiXCIpLnJlcGxhY2UoLycvZywgXCJcIiksIGNoYXJDb2RlTmR4ID0gdGFyZ2V0VGVtcGxhdGUuaW5kZXhPZihjaGFyQ29kZXMpOyAwIDwgY2hhckNvZGVOZHggJiYgXCIgXCIgPT09IHRhcmdldFRlbXBsYXRlW2NoYXJDb2RlTmR4IC0gMV07ICkgY2hhckNvZGVOZHgtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gMCA9PT0gY2hhckNvZGVOZHggJiYgIWlzTWFzayhuZHgpICYmIChnZXRUZXN0KG5keCkubWF0Y2gubmF0aXZlRGVmID09PSBjaGFyQ29kZXMuY2hhckF0KDApIHx8ICEwID09PSBnZXRUZXN0KG5keCkubWF0Y2guc3RhdGljICYmIGdldFRlc3QobmR4KS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiJ1wiICsgY2hhckNvZGVzLmNoYXJBdCgwKSB8fCBcIiBcIiA9PT0gZ2V0VGVzdChuZHgpLm1hdGNoLm5hdGl2ZURlZiAmJiAoZ2V0VGVzdChuZHggKyAxKS5tYXRjaC5uYXRpdmVEZWYgPT09IGNoYXJDb2Rlcy5jaGFyQXQoMCkgfHwgITAgPT09IGdldFRlc3QobmR4ICsgMSkubWF0Y2guc3RhdGljICYmIGdldFRlc3QobmR4ICsgMSkubWF0Y2gubmF0aXZlRGVmID09PSBcIidcIiArIGNoYXJDb2Rlcy5jaGFyQXQoMCkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaCAmJiAwIDwgY2hhckNvZGVOZHggJiYgIWlzTWFzayhuZHgsICExLCAhMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0UG9zID0gc2Vla05leHQobmR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bWFzay5jYXJldFBvcy5iZWdpbiA8IG5leHRQb3MgJiYgKGlucHV0bWFzay5jYXJldFBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbmV4dFBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKSwgbWFza3NldC50ZXN0cyA9IHt9LCBpbml0aWFsTmR4ID0gb3B0cy5yYWRpeFBvaW50ID8gZGV0ZXJtaW5lTmV3Q2FyZXRQb3NpdGlvbih7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IDBcbiAgICAgICAgICAgICAgICB9KS5iZWdpbiA6IDAsIG1hc2tzZXQucCA9IGluaXRpYWxOZHgsIGlucHV0bWFzay5jYXJldFBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IGluaXRpYWxOZHhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBzdGF0aWNNYXRjaGVzID0gW10sIHByZXZDYXJldFBvcyA9IGlucHV0bWFzay5jYXJldFBvcztcbiAgICAgICAgICAgICAgICBpZiAoJC5lYWNoKGlucHV0VmFsdWUsIGZ1bmN0aW9uKG5keCwgY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gY2hhckNvZGUpIGlmICh2b2lkIDAgPT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbbmR4XSAmJiBpbnB1dFZhbHVlW25keF0gPT09IGdldFBsYWNlaG9sZGVyKG5keCkgJiYgaXNNYXNrKG5keCwgITApICYmICExID09PSBpc1ZhbGlkKG5keCwgaW5wdXRWYWx1ZVtuZHhdLCAhMCwgdm9pZCAwLCB2b2lkIDAsICEwKSkgbWFza3NldC5wKys7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJfY2hlY2t2YWxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGNoYXJDb2RlLnRvU3RyaW5nKCkuY2hhckNvZGVBdCgwKSwgY2hhckNvZGVzICs9IGNoYXJDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHZvaWQgMCwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNUZW1wbGF0ZU1hdGNoKGluaXRpYWxOZHgsIGNoYXJDb2RlcykgPyByZXN1bHQgPSBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgc3RyaWN0LCBsdnAgKyAxKSA6IChyZXN1bHQgPSBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgc3RyaWN0LCBpbnB1dG1hc2suY2FyZXRQb3MuYmVnaW4pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCAmJiAoaW5pdGlhbE5keCA9IGlucHV0bWFzay5jYXJldFBvcy5iZWdpbiArIDEsIGNoYXJDb2RlcyA9IFwiXCIpKSwgcmVzdWx0ID8gKHZvaWQgMCAhPT0gcmVzdWx0LnBvcyAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Jlc3VsdC5wb3NdICYmICEwID09PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Jlc3VsdC5wb3NdLm1hdGNoLnN0YXRpYyAmJiB2b2lkIDAgPT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmVzdWx0LnBvc10uYWx0ZXJuYXRpb24gJiYgKHN0YXRpY01hdGNoZXMucHVzaChyZXN1bHQucG9zKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1JUTCB8fCAocmVzdWx0LmZvcndhcmRQb3NpdGlvbiA9IHJlc3VsdC5wb3MgKyAxKSksIHdyaXRlQnVmZmVyKHZvaWQgMCwgZ2V0QnVmZmVyKCksIHJlc3VsdC5mb3J3YXJkUG9zaXRpb24sIGtleXByZXNzLCAhMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRtYXNrLmNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiByZXN1bHQuZm9yd2FyZFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcmVzdWx0LmZvcndhcmRQb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgcHJldkNhcmV0UG9zID0gaW5wdXRtYXNrLmNhcmV0UG9zKSA6IGlucHV0bWFzay5jYXJldFBvcyA9IHByZXZDYXJldFBvcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLCAwIDwgc3RhdGljTWF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNuZHgsIHZhbGlkUG9zLCBuZXh0VmFsaWQgPSBzZWVrTmV4dCgtMSwgdm9pZCAwLCAhMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkgJiYgc3RhdGljTWF0Y2hlcy5sZW5ndGggPD0gbmV4dFZhbGlkIHx8IGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpICYmIDAgPCBzdGF0aWNNYXRjaGVzLmxlbmd0aCAmJiBzdGF0aWNNYXRjaGVzLmxlbmd0aCAhPT0gbmV4dFZhbGlkICYmIDAgPT09IHN0YXRpY01hdGNoZXNbMF0pIGZvciAodmFyIG5leHRTbmR4ID0gbmV4dFZhbGlkOyB2b2lkIDAgIT09IChzbmR4ID0gc3RhdGljTWF0Y2hlcy5zaGlmdCgpKTsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcIl9jaGVja3ZhbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZFBvcyA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbc25keF0sIHZhbGlkUG9zLmdlbmVyYXRlZElucHV0ID0gITAsIGtleXByZXNzLndoaWNoID0gdmFsaWRQb3MuaW5wdXQuY2hhckNvZGVBdCgwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgc3RyaWN0LCBuZXh0U25keCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICYmIHZvaWQgMCAhPT0gcmVzdWx0LnBvcyAmJiByZXN1bHQucG9zICE9PSBzbmR4ICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmVzdWx0LnBvc10gJiYgITAgPT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmVzdWx0LnBvc10ubWF0Y2guc3RhdGljKSBzdGF0aWNNYXRjaGVzLnB1c2gocmVzdWx0LnBvcyk7IGVsc2UgaWYgKCFyZXN1bHQpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNuZHgrKztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGZvciAoO3NuZHggPSBzdGF0aWNNYXRjaGVzLnBvcCgpOyApIHZhbGlkUG9zID0gbWFza3NldC52YWxpZFBvc2l0aW9uc1tzbmR4XSwgXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zICYmICh2YWxpZFBvcy5nZW5lcmF0ZWRJbnB1dCA9ICEwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHdyaXRlT3V0KSBmb3IgKHZhciB2bmR4IGluIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgcmVzdWx0ID8gcmVzdWx0LmZvcndhcmRQb3NpdGlvbiA6IHZvaWQgMCwgaW5pdGlhdGluZ0V2ZW50IHx8IG5ldyAkLkV2ZW50KFwiY2hlY2t2YWxcIiksIGluaXRpYXRpbmdFdmVudCAmJiBcImlucHV0XCIgPT09IGluaXRpYXRpbmdFdmVudC50eXBlKSwgXG4gICAgICAgICAgICAgICAgbWFza3NldC52YWxpZFBvc2l0aW9ucykgITAgIT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbdm5keF0ubWF0Y2guZ2VuZXJhdGVkICYmIGRlbGV0ZSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3ZuZHhdLmdlbmVyYXRlZElucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdW5tYXNrZWR2YWx1ZShpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBpbnB1dC5pbnB1dG1hc2spIHJldHVybiBpbnB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrICYmIGlucHV0LmlucHV0bWFzay5yZWZyZXNoVmFsdWUgJiYgYXBwbHlJbnB1dFZhbHVlKGlucHV0LCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB1bVZhbHVlID0gW10sIHZwcyA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcG5keCBpbiB2cHMpIHZwc1twbmR4XSAmJiB2cHNbcG5keF0ubWF0Y2ggJiYgKDEgIT0gdnBzW3BuZHhdLm1hdGNoLnN0YXRpYyB8fCAhMCAhPT0gdnBzW3BuZHhdLmdlbmVyYXRlZElucHV0KSAmJiB1bVZhbHVlLnB1c2godnBzW3BuZHhdLmlucHV0KTtcbiAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWRWYWx1ZSA9IDAgPT09IHVtVmFsdWUubGVuZ3RoID8gXCJcIiA6IChpc1JUTCA/IHVtVmFsdWUucmV2ZXJzZSgpIDogdW1WYWx1ZSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25Vbk1hc2spKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJWYWx1ZSA9IChpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyKCkpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHVubWFza2VkVmFsdWUgPSBvcHRzLm9uVW5NYXNrLmNhbGwoaW5wdXRtYXNrLCBidWZmZXJWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdHJhbnNsYXRlUG9zaXRpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFpc1JUTCB8fCBcIm51bWJlclwiICE9IHR5cGVvZiBwb3MgfHwgb3B0cy5ncmVlZHkgJiYgXCJcIiA9PT0gb3B0cy5wbGFjZWhvbGRlciB8fCAhZWwgfHwgKHBvcyA9IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggLSBwb3MpLCBcbiAgICAgICAgICAgICAgICBwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjYXJldChpbnB1dCwgYmVnaW4sIGVuZCwgbm90cmFuc2xhdGUsIGlzRGVsZXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGJlZ2luKSByZXR1cm4gXCJzZWxlY3Rpb25TdGFydFwiIGluIGlucHV0ICYmIFwic2VsZWN0aW9uRW5kXCIgaW4gaW5wdXQgPyAoYmVnaW4gPSBpbnB1dC5zZWxlY3Rpb25TdGFydCwgXG4gICAgICAgICAgICAgICAgZW5kID0gaW5wdXQuc2VsZWN0aW9uRW5kKSA6IHdpbmRvdy5nZXRTZWxlY3Rpb24gPyAocmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSwgXG4gICAgICAgICAgICAgICAgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZSAhPT0gaW5wdXQgJiYgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIgIT09IGlucHV0IHx8IChiZWdpbiA9IHJhbmdlLnN0YXJ0T2Zmc2V0LCBcbiAgICAgICAgICAgICAgICBlbmQgPSByYW5nZS5lbmRPZmZzZXQpKSA6IGRvY3VtZW50LnNlbGVjdGlvbiAmJiBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UgJiYgKHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCksIFxuICAgICAgICAgICAgICAgIGJlZ2luID0gMCAtIHJhbmdlLmR1cGxpY2F0ZSgpLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCAtaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCksIFxuICAgICAgICAgICAgICAgIGVuZCA9IGJlZ2luICsgcmFuZ2UudGV4dC5sZW5ndGgpLCB7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiBub3RyYW5zbGF0ZSA/IGJlZ2luIDogdHJhbnNsYXRlUG9zaXRpb24oYmVnaW4pLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG5vdHJhbnNsYXRlID8gZW5kIDogdHJhbnNsYXRlUG9zaXRpb24oZW5kKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNBcnJheShiZWdpbikgJiYgKGVuZCA9IGlzUlRMID8gYmVnaW5bMF0gOiBiZWdpblsxXSwgYmVnaW4gPSBpc1JUTCA/IGJlZ2luWzFdIDogYmVnaW5bMF0pLCBcbiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGJlZ2luLmJlZ2luICYmIChlbmQgPSBpc1JUTCA/IGJlZ2luLmJlZ2luIDogYmVnaW4uZW5kLCBiZWdpbiA9IGlzUlRMID8gYmVnaW4uZW5kIDogYmVnaW4uYmVnaW4pLCBcbiAgICAgICAgICAgICAgICBcIm51bWJlclwiID09IHR5cGVvZiBiZWdpbikge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IG5vdHJhbnNsYXRlID8gYmVnaW4gOiB0cmFuc2xhdGVQb3NpdGlvbihiZWdpbiksIGVuZCA9IG5vdHJhbnNsYXRlID8gZW5kIDogdHJhbnNsYXRlUG9zaXRpb24oZW5kKSwgXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIGVuZCA/IGVuZCA6IGJlZ2luO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQ2FsYyA9IHBhcnNlSW50KCgoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUgPyAoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUoaW5wdXQsIG51bGwpIDogaW5wdXQuY3VycmVudFN0eWxlKS5mb250U2l6ZSkgKiBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zY3JvbGxMZWZ0ID0gc2Nyb2xsQ2FsYyA+IGlucHV0LnNjcm9sbFdpZHRoID8gc2Nyb2xsQ2FsYyA6IDAsIGlucHV0LmlucHV0bWFzay5jYXJldFBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBiZWdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdHMuaW5zZXJ0TW9kZVZpc3VhbCAmJiAhMSA9PT0gb3B0cy5pbnNlcnRNb2RlICYmIGJlZ2luID09PSBlbmQgJiYgKGlzRGVsZXRlIHx8IGVuZCsrKSwgXG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID09PSAoaW5wdXQuaW5wdXRtYXNrLnNoYWRvd1Jvb3QgfHwgZG9jdW1lbnQpLmFjdGl2ZUVsZW1lbnQpIGlmIChcInNldFNlbGVjdGlvblJhbmdlXCIgaW4gaW5wdXQpIGlucHV0LnNldFNlbGVjdGlvblJhbmdlKGJlZ2luLCBlbmQpOyBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLCB2b2lkIDAgPT09IGlucHV0LmZpcnN0Q2hpbGQgfHwgbnVsbCA9PT0gaW5wdXQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKHRleHROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGlucHV0LmZpcnN0Q2hpbGQsIGJlZ2luIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGJlZ2luIDogaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGlucHV0LmZpcnN0Q2hpbGQsIGVuZCA8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggPyBlbmQgOiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSghMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpLCBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaW5wdXQuY3JlYXRlVGV4dFJhbmdlICYmIChyYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpLCByYW5nZS5jb2xsYXBzZSghMCksIFxuICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsIGVuZCksIHJhbmdlLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCBiZWdpbiksIHJhbmdlLnNlbGVjdCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbihyZXR1cm5EZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldE1hc2tUZW1wbGF0ZSghMCwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgITAsICEwKSwgYmwgPSBidWZmZXIubGVuZ3RoLCBwb3MsIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHBvc2l0aW9ucyA9IHt9LCBsdlRlc3QgPSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW2x2cF0sIG5keEludGx6ciA9IHZvaWQgMCAhPT0gbHZUZXN0ID8gbHZUZXN0LmxvY2F0b3Iuc2xpY2UoKSA6IHZvaWQgMCwgdGVzdFBvcztcbiAgICAgICAgICAgICAgICBmb3IgKHBvcyA9IGx2cCArIDE7IHBvcyA8IGJ1ZmZlci5sZW5ndGg7IHBvcysrKSB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSwgXG4gICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCksIHBvc2l0aW9uc1twb3NdID0gJC5leHRlbmQoITAsIHt9LCB0ZXN0UG9zKTtcbiAgICAgICAgICAgICAgICB2YXIgbHZUZXN0QWx0ID0gbHZUZXN0ICYmIHZvaWQgMCAhPT0gbHZUZXN0LmFsdGVybmF0aW9uID8gbHZUZXN0LmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBmb3IgKHBvcyA9IGJsIC0gMTsgbHZwIDwgcG9zICYmICh0ZXN0UG9zID0gcG9zaXRpb25zW3Bvc10sICh0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsaXR5IHx8IHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmIHRlc3RQb3MubWF0Y2gubmV3QmxvY2tNYXJrZXIgfHwgbHZUZXN0QWx0ICYmIChsdlRlc3RBbHQgIT09IHBvc2l0aW9uc1twb3NdLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiAxICE9IHRlc3RQb3MubWF0Y2guc3RhdGljIHx8ICEwID09PSB0ZXN0UG9zLm1hdGNoLnN0YXRpYyAmJiB0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiBjaGVja0FsdGVybmF0aW9uTWF0Y2godGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIiksIGx2VGVzdEFsdC50b1N0cmluZygpLnNwbGl0KFwiLFwiKSkgJiYgXCJcIiAhPT0gZ2V0VGVzdHMocG9zKVswXS5kZWYpKSAmJiBidWZmZXJbcG9zXSA9PT0gZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0UG9zLm1hdGNoKSk7IHBvcy0tKSBibC0tO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5EZWZpbml0aW9uID8ge1xuICAgICAgICAgICAgICAgICAgICBsOiBibCxcbiAgICAgICAgICAgICAgICAgICAgZGVmOiBwb3NpdGlvbnNbYmxdID8gcG9zaXRpb25zW2JsXS5tYXRjaCA6IHZvaWQgMFxuICAgICAgICAgICAgICAgIH0gOiBibDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHRlbXBsYXRlID0gZ2V0TWFza1RlbXBsYXRlKCEwLCAwLCAhMCwgdm9pZCAwLCAhMCksIGxtbnQ7IHZvaWQgMCAhPT0gKGxtbnQgPSB0ZW1wbGF0ZS5zaGlmdCgpKTsgKSBidWZmZXIucHVzaChsbW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNDb21wbGV0ZShidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMuaXNDb21wbGV0ZSkpIHJldHVybiBvcHRzLmlzQ29tcGxldGUoYnVmZmVyLCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAoXCIqXCIgIT09IG9wdHMucmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9ICExLCBscnAgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbighMCksIGFtbCA9IHNlZWtQcmV2aW91cyhscnAubCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGxycC5kZWYgfHwgbHJwLmRlZi5uZXdCbG9ja01hcmtlciB8fCBscnAuZGVmLm9wdGlvbmFsaXR5IHx8IGxycC5kZWYub3B0aW9uYWxRdWFudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9ICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gYW1sOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdCA9IGdldFRlc3RUZW1wbGF0ZShpKS5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgIT09IHRlc3Quc3RhdGljICYmIHZvaWQgMCA9PT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1tpXSAmJiAhMCAhPT0gdGVzdC5vcHRpb25hbGl0eSAmJiAhMCAhPT0gdGVzdC5vcHRpb25hbFF1YW50aWZpZXIgfHwgITAgPT09IHRlc3Quc3RhdGljICYmIGJ1ZmZlcltpXSAhPT0gZ2V0UGxhY2Vob2xkZXIoaSwgdGVzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVSZW1vdmUoaW5wdXQsIGssIHBvcywgc3RyaWN0LCBmcm9tSXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIGlmICgob3B0cy5udW1lcmljSW5wdXQgfHwgaXNSVEwpICYmIChrID09PSBrZXlDb2RlLkJBQ0tTUEFDRSA/IGsgPSBrZXlDb2RlLkRFTEVURSA6IGsgPT09IGtleUNvZGUuREVMRVRFICYmIChrID0ga2V5Q29kZS5CQUNLU1BBQ0UpLCBcbiAgICAgICAgICAgICAgICBpc1JUTCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlbmQgPSBwb3MuZW5kO1xuICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gcG9zLmJlZ2luLCBwb3MuYmVnaW4gPSBwZW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24odm9pZCAwLCAhMCksIG9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAocG9zLmVuZCA+PSBnZXRCdWZmZXIoKS5sZW5ndGggJiYgbHZwID49IHBvcy5lbmQgJiYgKHBvcy5lbmQgPSBsdnAgKyAxKSwgayA9PT0ga2V5Q29kZS5CQUNLU1BBQ0UgPyBwb3MuZW5kIC0gcG9zLmJlZ2luIDwgMSAmJiAocG9zLmJlZ2luID0gc2Vla1ByZXZpb3VzKHBvcy5iZWdpbikpIDogayA9PT0ga2V5Q29kZS5ERUxFVEUgJiYgcG9zLmJlZ2luID09PSBwb3MuZW5kICYmIChwb3MuZW5kID0gaXNNYXNrKHBvcy5lbmQsICEwLCAhMCkgPyBwb3MuZW5kICsgMSA6IHNlZWtOZXh0KHBvcy5lbmQpICsgMSksIFxuICAgICAgICAgICAgICAgICExICE9PSAob2Zmc2V0ID0gcmV2YWxpZGF0ZU1hc2socG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEwICE9PSBzdHJpY3QgJiYgITEgIT09IG9wdHMua2VlcFN0YXRpYyB8fCBudWxsICE9PSBvcHRzLnJlZ2V4ICYmIC0xICE9PSBnZXRUZXN0KHBvcy5iZWdpbikubWF0Y2guZGVmLmluZGV4T2YoXCJ8XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYWx0ZXJuYXRlKCEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gdm9pZCAwICE9PSByZXN1bHQuY2FyZXQgPyByZXN1bHQuY2FyZXQgOiByZXN1bHQucG9zID8gc2Vla05leHQocmVzdWx0LnBvcy5iZWdpbiA/IHJlc3VsdC5wb3MuYmVnaW4gOiByZXN1bHQucG9zKSA6IGdldExhc3RWYWxpZFBvc2l0aW9uKC0xLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGsgIT09IGtleUNvZGUuREVMRVRFIHx8IHBvcy5iZWdpbiA+IG5ld1BvcykgJiYgcG9zLmJlZ2luO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICEwICE9PSBzdHJpY3QgJiYgKG1hc2tzZXQucCA9IGsgPT09IGtleUNvZGUuREVMRVRFID8gcG9zLmJlZ2luICsgb2Zmc2V0IDogcG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhcHBseUlucHV0VmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSA9ICExLCAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spICYmICh2YWx1ZSA9IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCB2YWx1ZSwgb3B0cykgfHwgdmFsdWUpLCBcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIiksIGNoZWNrVmFsKGlucHV0LCAhMCwgITEsIHZhbHVlKSwgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgXG4gICAgICAgICAgICAgICAgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgb3B0cy5jbGVhckluY29tcGxldGUpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpICYmIC0xID09PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtYXNrKGVsZW0pIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0VsZW1lbnRUeXBlU3VwcG9ydGVkKGlucHV0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBhdGNoVmFsdWVQcm9wZXJ0eShucHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUdldCwgdmFsdWVTZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXRjaFZhbGhvb2sodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLnZhbEhvb2tzICYmICh2b2lkIDAgPT09ICQudmFsSG9va3NbdHlwZV0gfHwgITAgIT09ICQudmFsSG9va3NbdHlwZV0uaW5wdXRtYXNrcGF0Y2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxob29rR2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLmdldCA/ICQudmFsSG9va3NbdHlwZV0uZ2V0IDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHZhbGhvb2tTZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uc2V0ID8gJC52YWxIb29rc1t0eXBlXS5zZXQgOiBmdW5jdGlvbihlbGVtLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udmFsdWUgPSB2YWx1ZSwgZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC52YWxIb29rc1t0eXBlXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzaykgcmV0dXJuIGVsZW0uaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbGhvb2tHZXQoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMSAhPT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24odm9pZCAwLCB2b2lkIDAsIGVsZW0uaW5wdXRtYXNrLm1hc2tzZXQudmFsaWRQb3NpdGlvbnMpIHx8ICEwICE9PSBvcHRzLm51bGxhYmxlID8gcmVzdWx0IDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbGhvb2tHZXQoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoZWxlbSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsaG9va1NldChlbGVtLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0uaW5wdXRtYXNrICYmIGFwcGx5SW5wdXRWYWx1ZShlbGVtLCB2YWx1ZSksIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dG1hc2twYXRjaDogITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrID8gdGhpcy5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrID8gdGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpIDogLTEgIT09IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgfHwgITAgIT09IG9wdHMubnVsbGFibGUgPyAodGhpcy5pbnB1dG1hc2suc2hhZG93Um9vdCB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSA9PT0gdGhpcyAmJiBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID8gKGlzUlRMID8gY2xlYXJPcHRpb25hbFRhaWwoZ2V0QnVmZmVyKCkuc2xpY2UoKSkucmV2ZXJzZSgpIDogY2xlYXJPcHRpb25hbFRhaWwoZ2V0QnVmZmVyKCkuc2xpY2UoKSkpLmpvaW4oXCJcIikgOiB2YWx1ZUdldC5jYWxsKHRoaXMpIDogXCJcIiA6IHZhbHVlR2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXR0ZXIodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMsIHZhbHVlKSwgdGhpcy5pbnB1dG1hc2sgJiYgYXBwbHlJbnB1dFZhbHVlKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrKG5wdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24obnB0LCBcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIHZhbHVlID0gdGhpcy5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgIT09IChpc1JUTCA/IGdldEJ1ZmZlcigpLnJldmVyc2UoKSA6IGdldEJ1ZmZlcigpKS5qb2luKFwiXCIpICYmIGFwcGx5SW5wdXRWYWx1ZSh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5wdC5pbnB1dG1hc2suX192YWx1ZUdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMCAhPT0gb3B0cy5ub1ZhbHVlUGF0Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBcIm9iamVjdFwiID09PSBfdHlwZW9mKFwidGVzdFwiLl9fcHJvdG9fXykgPyBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0Ll9fcHJvdG9fXztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHkgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihucHQpLCBcInZhbHVlXCIpIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVQcm9wZXJ0eSAmJiB2YWx1ZVByb3BlcnR5LmdldCAmJiB2YWx1ZVByb3BlcnR5LnNldCA/ICh2YWx1ZUdldCA9IHZhbHVlUHJvcGVydHkuZ2V0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0ID0gdmFsdWVQcm9wZXJ0eS5zZXQsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucHQsIFwidmFsdWVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZ2V0dGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogc2V0dGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSA6IFwiaW5wdXRcIiAhPT0gbnB0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSAmJiAodmFsdWVHZXQgPSBmdW5jdGlvbiB2YWx1ZUdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHZhbHVlU2V0ID0gZnVuY3Rpb24gdmFsdWVTZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIG5wdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikgJiYgKHZhbHVlR2V0ID0gbnB0Ll9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0ID0gbnB0Ll9fbG9va3VwU2V0dGVyX18oXCJ2YWx1ZVwiKSwgbnB0Ll9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLCBnZXR0ZXIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0Ll9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLCBzZXR0ZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fX3ZhbHVlR2V0ID0gdmFsdWVHZXQsIG5wdC5pbnB1dG1hc2suX192YWx1ZVNldCA9IHZhbHVlU2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl92YWx1ZUdldCA9IGZ1bmN0aW9uKG92ZXJydWxlUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1JUTCAmJiAhMCAhPT0gb3ZlcnJ1bGVSVEwgPyB2YWx1ZUdldC5jYWxsKHRoaXMuZWwpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzLmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBucHQuaW5wdXRtYXNrLl92YWx1ZVNldCA9IGZ1bmN0aW9uKHZhbHVlLCBvdmVycnVsZVJUTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMuZWwsIG51bGwgPT0gdmFsdWUgPyBcIlwiIDogITAgIT09IG92ZXJydWxlUlRMICYmIGlzUlRMID8gdmFsdWUuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwID09PSB2YWx1ZUdldCAmJiAodmFsdWVHZXQgPSBmdW5jdGlvbiB2YWx1ZUdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdmFsdWVTZXQgPSBmdW5jdGlvbiB2YWx1ZVNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcGF0Y2hWYWxob29rKG5wdC50eXBlKSwgaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0YXJlYVwiICE9PSBpbnB1dC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgJiYgb3B0cy5pZ25vcmFibGVzLnB1c2goa2V5Q29kZS5FTlRFUik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50VHlwZSA9IGlucHV0LmdldEF0dHJpYnV0ZShcInR5cGVcIiksIGlzU3VwcG9ydGVkID0gXCJpbnB1dFwiID09PSBpbnB1dC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgJiYgLTEgIT09ICQuaW5BcnJheShlbGVtZW50VHlwZSwgb3B0cy5zdXBwb3J0c0lucHV0VHlwZSkgfHwgaW5wdXQuaXNDb250ZW50RWRpdGFibGUgfHwgXCJ0ZXh0YXJlYVwiID09PSBpbnB1dC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNTdXBwb3J0ZWQpIGlmIChcImlucHV0XCIgPT09IGlucHV0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBlbGVtZW50VHlwZSksIGlzU3VwcG9ydGVkID0gXCJ0ZXh0XCIgPT09IGVsLnR5cGUsIGVsID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlzU3VwcG9ydGVkID0gXCJwYXJ0aWFsXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMSAhPT0gaXNTdXBwb3J0ZWQgPyBwYXRjaFZhbHVlUHJvcGVydHkoaW5wdXQpIDogaW5wdXQuaW5wdXRtYXNrID0gdm9pZCAwLCBcbiAgICAgICAgICAgICAgICAgICAgaXNTdXBwb3J0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub2ZmKGVsZW0pO1xuICAgICAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGlzRWxlbWVudFR5cGVTdXBwb3J0ZWQoZWxlbSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKCExICE9PSBpc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBlbCA9IGVsZW0sICRlbCA9ICQoZWwpLCBvcmlnaW5hbFBsYWNlaG9sZGVyID0gZWwucGxhY2Vob2xkZXIsIG1heExlbmd0aCA9IHZvaWQgMCAhPT0gZWwgPyBlbC5tYXhMZW5ndGggOiB2b2lkIDAsIFxuICAgICAgICAgICAgICAgICAgICAtMSA9PT0gbWF4TGVuZ3RoICYmIChtYXhMZW5ndGggPSB2b2lkIDApLCBcImlucHV0TW9kZVwiIGluIGVsICYmIG51bGwgPT09IGVsLmdldEF0dHJpYnV0ZShcImlucHV0bW9kZVwiKSAmJiAoZWwuaW5wdXRNb2RlID0gb3B0cy5pbnB1dG1vZGUsIFxuICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpbnB1dG1vZGVcIiwgb3B0cy5pbnB1dG1vZGUpKSwgITAgPT09IGlzU3VwcG9ydGVkICYmIChvcHRzLnNob3dNYXNrT25Gb2N1cyA9IG9wdHMuc2hvd01hc2tPbkZvY3VzICYmIC0xID09PSBbIFwiY2MtbnVtYmVyXCIsIFwiY2MtZXhwXCIgXS5pbmRleE9mKGVsLmF1dG9jb21wbGV0ZSksIFxuICAgICAgICAgICAgICAgICAgICBpcGhvbmUgJiYgKG9wdHMuaW5zZXJ0TW9kZVZpc3VhbCA9ICExKSwgRXZlbnRSdWxlci5vbihlbCwgXCJzdWJtaXRcIiwgRXZlbnRIYW5kbGVycy5zdWJtaXRFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInJlc2V0XCIsIEV2ZW50SGFuZGxlcnMucmVzZXRFdmVudCksIEV2ZW50UnVsZXIub24oZWwsIFwiYmx1clwiLCBFdmVudEhhbmRsZXJzLmJsdXJFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImZvY3VzXCIsIEV2ZW50SGFuZGxlcnMuZm9jdXNFdmVudCksIEV2ZW50UnVsZXIub24oZWwsIFwiaW52YWxpZFwiLCBFdmVudEhhbmRsZXJzLmludmFsaWRFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImNsaWNrXCIsIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudCksIEV2ZW50UnVsZXIub24oZWwsIFwibW91c2VsZWF2ZVwiLCBFdmVudEhhbmRsZXJzLm1vdXNlbGVhdmVFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcIm1vdXNlZW50ZXJcIiwgRXZlbnRIYW5kbGVycy5tb3VzZWVudGVyRXZlbnQpLCBFdmVudFJ1bGVyLm9uKGVsLCBcInBhc3RlXCIsIEV2ZW50SGFuZGxlcnMucGFzdGVFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImN1dFwiLCBFdmVudEhhbmRsZXJzLmN1dEV2ZW50KSwgRXZlbnRSdWxlci5vbihlbCwgXCJjb21wbGV0ZVwiLCBvcHRzLm9uY29tcGxldGUpLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJpbmNvbXBsZXRlXCIsIG9wdHMub25pbmNvbXBsZXRlKSwgRXZlbnRSdWxlci5vbihlbCwgXCJjbGVhcmVkXCIsIG9wdHMub25jbGVhcmVkKSwgXG4gICAgICAgICAgICAgICAgICAgIG1vYmlsZSB8fCAhMCA9PT0gb3B0cy5pbnB1dEV2ZW50T25seSA/IGVsLnJlbW92ZUF0dHJpYnV0ZShcIm1heExlbmd0aFwiKSA6IChFdmVudFJ1bGVyLm9uKGVsLCBcImtleWRvd25cIiwgRXZlbnRIYW5kbGVycy5rZXlkb3duRXZlbnQpLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJrZXlwcmVzc1wiLCBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQpKSwgRXZlbnRSdWxlci5vbihlbCwgXCJpbnB1dFwiLCBFdmVudEhhbmRsZXJzLmlucHV0RmFsbEJhY2tFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImNvbXBvc2l0aW9uZW5kXCIsIEV2ZW50SGFuZGxlcnMuY29tcG9zaXRpb25lbmRFdmVudCkpLCBFdmVudFJ1bGVyLm9uKGVsLCBcInNldHZhbHVlXCIsIEV2ZW50SGFuZGxlcnMuc2V0VmFsdWVFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gKGVsLmlucHV0bWFzay5zaGFkb3dSb290IHx8IGRvY3VtZW50KS5hY3RpdmVFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJcIiAhPT0gZWwuaW5wdXRtYXNrLl92YWx1ZUdldCghMCkgfHwgITEgPT09IG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgYWN0aXZlRWxlbWVudCA9PT0gZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5SW5wdXRWYWx1ZShlbCwgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCghMCksIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAhMSA9PT0gaXNDb21wbGV0ZShidWZmZXIpICYmIG9wdHMuY2xlYXJJbmNvbXBsZXRlICYmIHJlc2V0TWFza1NldCgpLCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGFjdGl2ZUVsZW1lbnQgIT09IGVsICYmICgtMSA9PT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSA/IGJ1ZmZlciA9IFtdIDogY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgKCExID09PSBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzIHx8IG9wdHMuc2hvd01hc2tPbkZvY3VzICYmIGFjdGl2ZUVsZW1lbnQgPT09IGVsIHx8IFwiXCIgIT09IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoITApKSAmJiB3cml0ZUJ1ZmZlcihlbCwgYnVmZmVyKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50ID09PSBlbCAmJiBjYXJldChlbCwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gYWN0aW9uT2JqKSBzd2l0Y2ggKGFjdGlvbk9iai5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgY2FzZSBcImlzQ29tcGxldGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwgPSBhY3Rpb25PYmouZWwsIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJ1bm1hc2tlZHZhbHVlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gZWwgJiYgdm9pZCAwID09PSBhY3Rpb25PYmoudmFsdWUgfHwgKHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlLCBcbiAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9ICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spICYmIG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCB2YWx1ZUJ1ZmZlciwgb3B0cykgfHwgdmFsdWVCdWZmZXIpLnNwbGl0KFwiXCIpLCBcbiAgICAgICAgICAgICAgICBjaGVja1ZhbC5jYWxsKHRoaXMsIHZvaWQgMCwgITEsICExLCB2YWx1ZUJ1ZmZlciksICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlV3JpdGUpICYmIG9wdHMub25CZWZvcmVXcml0ZS5jYWxsKGlucHV0bWFzaywgdm9pZCAwLCBnZXRCdWZmZXIoKSwgMCwgb3B0cykpLCBcbiAgICAgICAgICAgICAgICB1bm1hc2tlZHZhbHVlKGVsKTtcblxuICAgICAgICAgICAgICBjYXNlIFwibWFza1wiOlxuICAgICAgICAgICAgICAgIG1hc2soZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJmb3JtYXRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVCdWZmZXIgPSAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSAmJiBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgYWN0aW9uT2JqLnZhbHVlLCBvcHRzKSB8fCBhY3Rpb25PYmoudmFsdWUpLnNwbGl0KFwiXCIpLCBcbiAgICAgICAgICAgICAgICBjaGVja1ZhbC5jYWxsKHRoaXMsIHZvaWQgMCwgITAsICExLCB2YWx1ZUJ1ZmZlciksIGFjdGlvbk9iai5tZXRhZGF0YSA/IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxuICAgICAgICAgICAgICAgICAgICB9LCBtYXNrc2V0LCBvcHRzKVxuICAgICAgICAgICAgICAgIH0gOiBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJpc1ZhbGlkXCI6XG4gICAgICAgICAgICAgICAgYWN0aW9uT2JqLnZhbHVlID8gKHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgJiYgb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIGFjdGlvbk9iai52YWx1ZSwgb3B0cykgfHwgYWN0aW9uT2JqLnZhbHVlKS5zcGxpdChcIlwiKSwgXG4gICAgICAgICAgICAgICAgY2hlY2tWYWwuY2FsbCh0aGlzLCB2b2lkIDAsICEwLCAhMSwgdmFsdWVCdWZmZXIpKSA6IGFjdGlvbk9iai52YWx1ZSA9IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCksIHJsID0gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24oKSwgbG1pYiA9IGJ1ZmZlci5sZW5ndGggLSAxOyBybCA8IGxtaWIgJiYgIWlzTWFzayhsbWliKTsgbG1pYi0tKSA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zcGxpY2UocmwsIGxtaWIgKyAxIC0gcmwpLCBpc0NvbXBsZXRlKGJ1ZmZlcikgJiYgYWN0aW9uT2JqLnZhbHVlID09PSAoaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogZ2V0QnVmZmVyKCkuam9pbihcIlwiKSk7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImdldGVtcHR5bWFza1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIik7XG5cbiAgICAgICAgICAgICAgY2FzZSBcInJlbW92ZVwiOlxuICAgICAgICAgICAgICAgIGlmIChlbCAmJiBlbC5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgJC5kYXRhKGVsLCBcIl9pbnB1dG1hc2tfb3B0c1wiLCBudWxsKSwgJGVsID0gJChlbCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdiA9IG9wdHMuYXV0b1VubWFzayA/IHVubWFza2VkdmFsdWUoZWwpIDogZWwuaW5wdXRtYXNrLl92YWx1ZUdldChvcHRzLmF1dG9Vbm1hc2spLCB2YWx1ZVByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICBjdiAhPT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpID8gZWwuaW5wdXRtYXNrLl92YWx1ZVNldChjdiwgb3B0cy5hdXRvVW5tYXNrKSA6IGVsLmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9mZihlbCksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKHZhbHVlUHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihlbCksIFwidmFsdWVcIiksIFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVByb3BlcnR5ICYmIGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0ICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBlbC5pbnB1dG1hc2suX192YWx1ZVNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICAgICAgICAgICAgICAgICAgfSkpIDogZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBlbC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikgJiYgZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQgJiYgKGVsLl9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLCBlbC5pbnB1dG1hc2suX192YWx1ZUdldCksIFxuICAgICAgICAgICAgICAgICAgICBlbC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIiwgZWwuaW5wdXRtYXNrLl9fdmFsdWVTZXQpKSwgZWwuaW5wdXRtYXNrID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZWw7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImdldG1ldGFkYXRhXCI6XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNBcnJheShtYXNrc2V0Lm1ldGFkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza1RhcmdldCA9IGdldE1hc2tUZW1wbGF0ZSghMCwgMCwgITEpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmVhY2gobWFza3NldC5tZXRhZGF0YSwgZnVuY3Rpb24obmR4LCBtdGR0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXRkdC5tYXNrID09PSBtYXNrVGFyZ2V0KSByZXR1cm4gbWFza1RhcmdldCA9IG10ZHQsICExO1xuICAgICAgICAgICAgICAgICAgICB9KSwgbWFza1RhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQubWV0YWRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICAgICAgICAgIH0sIF90eXBlb2Yob2JqKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgSW5wdXRtYXNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKSwgJCA9IElucHV0bWFzay5kZXBlbmRlbmN5TGliLCBrZXlDb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKSwgZm9ybWF0Q29kZSA9IHtcbiAgICAgICAgICAgIGQ6IFsgXCJbMS05XXxbMTJdWzAtOV18M1swMV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSwgXCJkYXlcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSBdLFxuICAgICAgICAgICAgZGQ6IFsgXCIwWzEtOV18WzEyXVswLTldfDNbMDFdXCIsIERhdGUucHJvdG90eXBlLnNldERhdGUsIFwiZGF5XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZS5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgICAgIH0gXSxcbiAgICAgICAgICAgIGRkZDogWyBcIlwiIF0sXG4gICAgICAgICAgICBkZGRkOiBbIFwiXCIgXSxcbiAgICAgICAgICAgIG06IFsgXCJbMS05XXwxWzAxMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TW9udGgsIFwibW9udGhcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGUucHJvdG90eXBlLmdldE1vbnRoLmNhbGwodGhpcykgKyAxO1xuICAgICAgICAgICAgfSBdLFxuICAgICAgICAgICAgbW06IFsgXCIwWzEtOV18MVswMTJdXCIsIERhdGUucHJvdG90eXBlLnNldE1vbnRoLCBcIm1vbnRoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TW9udGguY2FsbCh0aGlzKSArIDEsIDIpO1xuICAgICAgICAgICAgfSBdLFxuICAgICAgICAgICAgbW1tOiBbIFwiXCIgXSxcbiAgICAgICAgICAgIG1tbW06IFsgXCJcIiBdLFxuICAgICAgICAgICAgeXk6IFsgXCJbMC05XXsyfVwiLCBEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhciwgXCJ5ZWFyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICB5eXl5OiBbIFwiWzAtOV17NH1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXIsIFwieWVhclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyLmNhbGwodGhpcyksIDQpO1xuICAgICAgICAgICAgfSBdLFxuICAgICAgICAgICAgaDogWyBcIlsxLTldfDFbMC0yXVwiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRIb3VycyBdLFxuICAgICAgICAgICAgaGg6IFsgXCIwWzEtOV18MVswLTJdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICBoeDogWyBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiWzAtOV17XCIuY29uY2F0KHgsIFwifVwiKTtcbiAgICAgICAgICAgIH0sIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnM7XG4gICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICBIOiBbIFwiMT9bMC05XXwyWzAtM11cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcbiAgICAgICAgICAgIEhIOiBbIFwiMFswLTldfDFbMC05XXwyWzAtM11cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgICAgIH0gXSxcbiAgICAgICAgICAgIEh4OiBbIGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbMC05XXtcIi5jb25jYXQoeCwgXCJ9XCIpO1xuICAgICAgICAgICAgfSwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLCB4KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBdLFxuICAgICAgICAgICAgTTogWyBcIlsxLTVdP1swLTldXCIsIERhdGUucHJvdG90eXBlLnNldE1pbnV0ZXMsIFwibWludXRlc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRNaW51dGVzIF0sXG4gICAgICAgICAgICBNTTogWyBcIjBbMC05XXwxWzAtOV18MlswLTldfDNbMC05XXw0WzAtOV18NVswLTldXCIsIERhdGUucHJvdG90eXBlLnNldE1pbnV0ZXMsIFwibWludXRlc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1pbnV0ZXMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICBzOiBbIFwiWzEtNV0/WzAtOV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0U2Vjb25kcywgXCJzZWNvbmRzXCIsIERhdGUucHJvdG90eXBlLmdldFNlY29uZHMgXSxcbiAgICAgICAgICAgIHNzOiBbIFwiMFswLTldfDFbMC05XXwyWzAtOV18M1swLTldfDRbMC05XXw1WzAtOV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0U2Vjb25kcywgXCJzZWNvbmRzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0U2Vjb25kcy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgICAgIH0gXSxcbiAgICAgICAgICAgIGw6IFsgXCJbMC05XXszfVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaWxsaXNlY29uZHMsIFwibWlsbGlzZWNvbmRzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TWlsbGlzZWNvbmRzLmNhbGwodGhpcyksIDMpO1xuICAgICAgICAgICAgfSBdLFxuICAgICAgICAgICAgTDogWyBcIlswLTldezJ9XCIsIERhdGUucHJvdG90eXBlLnNldE1pbGxpc2Vjb25kcywgXCJtaWxsaXNlY29uZHNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNaWxsaXNlY29uZHMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICB0OiBbIFwiW2FwXVwiIF0sXG4gICAgICAgICAgICB0dDogWyBcIlthcF1tXCIgXSxcbiAgICAgICAgICAgIFQ6IFsgXCJbQVBdXCIgXSxcbiAgICAgICAgICAgIFRUOiBbIFwiW0FQXU1cIiBdLFxuICAgICAgICAgICAgWjogWyBcIlwiIF0sXG4gICAgICAgICAgICBvOiBbIFwiXCIgXSxcbiAgICAgICAgICAgIFM6IFsgXCJcIiBdXG4gICAgICAgIH0sIGZvcm1hdEFsaWFzID0ge1xuICAgICAgICAgICAgaXNvRGF0ZTogXCJ5eXl5LW1tLWRkXCIsXG4gICAgICAgICAgICBpc29UaW1lOiBcIkhIOk1NOnNzXCIsXG4gICAgICAgICAgICBpc29EYXRlVGltZTogXCJ5eXl5LW1tLWRkJ1QnSEg6TU06c3NcIixcbiAgICAgICAgICAgIGlzb1V0Y0RhdGVUaW1lOiBcIlVUQzp5eXl5LW1tLWRkJ1QnSEg6TU06c3MnWidcIlxuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBmb3JtYXRjb2RlKG1hdGNoKSB7XG4gICAgICAgICAgICB2YXIgZHluTWF0Y2hlcyA9IG5ldyBSZWdFeHAoXCJcXFxcZCskXCIpLmV4ZWMobWF0Y2hbMF0pO1xuICAgICAgICAgICAgaWYgKGR5bk1hdGNoZXMgJiYgdm9pZCAwICE9PSBkeW5NYXRjaGVzWzBdKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZjb2RlID0gZm9ybWF0Q29kZVttYXRjaFswXVswXSArIFwieFwiXS5zbGljZShcIlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmNvZGVbMF0gPSBmY29kZVswXShkeW5NYXRjaGVzWzBdKSwgZmNvZGVbM10gPSBmY29kZVszXShkeW5NYXRjaGVzWzBdKSwgZmNvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9ybWF0Q29kZVttYXRjaFswXV0pIHJldHVybiBmb3JtYXRDb2RlW21hdGNoWzBdXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRUb2tlbml6ZXIob3B0cykge1xuICAgICAgICAgICAgaWYgKCFvcHRzLnRva2VuaXplcikge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbnMgPSBbXSwgZHludG9rZW5zID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4IGluIGZvcm1hdENvZGUpIGlmICgvXFwuKngkLy50ZXN0KG5keCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR5blRva2VuID0gbmR4WzBdICsgXCJcXFxcZCtcIjtcbiAgICAgICAgICAgICAgICAgICAgLTEgPT09IGR5bnRva2Vucy5pbmRleE9mKGR5blRva2VuKSAmJiBkeW50b2tlbnMucHVzaChkeW5Ub2tlbik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIC0xID09PSB0b2tlbnMuaW5kZXhPZihuZHhbMF0pICYmIHRva2Vucy5wdXNoKG5keFswXSk7XG4gICAgICAgICAgICAgICAgb3B0cy50b2tlbml6ZXIgPSBcIihcIiArICgwIDwgZHludG9rZW5zLmxlbmd0aCA/IGR5bnRva2Vucy5qb2luKFwifFwiKSArIFwifFwiIDogXCJcIikgKyB0b2tlbnMuam9pbihcIit8XCIpICsgXCIpKz98LlwiLCBcbiAgICAgICAgICAgICAgICBvcHRzLnRva2VuaXplciA9IG5ldyBSZWdFeHAob3B0cy50b2tlbml6ZXIsIFwiZ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcHRzLnRva2VuaXplcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlUGFydHMsIGN1cnJlbnRSZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiAoIWlzRmluaXRlKGRhdGVQYXJ0cy5yYXdkYXkpIHx8IFwiMjlcIiA9PSBkYXRlUGFydHMuZGF5ICYmICFpc0Zpbml0ZShkYXRlUGFydHMucmF3eWVhcikgfHwgbmV3IERhdGUoZGF0ZVBhcnRzLmRhdGUuZ2V0RnVsbFllYXIoKSwgaXNGaW5pdGUoZGF0ZVBhcnRzLnJhd21vbnRoKSA/IGRhdGVQYXJ0cy5tb250aCA6IGRhdGVQYXJ0cy5kYXRlLmdldE1vbnRoKCkgKyAxLCAwKS5nZXREYXRlKCkgPj0gZGF0ZVBhcnRzLmRheSkgJiYgY3VycmVudFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0RhdGVJblJhbmdlKGRhdGVQYXJ0cywgb3B0cykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICEwO1xuICAgICAgICAgICAgaWYgKG9wdHMubWluKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGVQYXJ0cy5yYXd5ZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdZZWFyID0gZGF0ZVBhcnRzLnJhd3llYXIucmVwbGFjZSgvW14wLTldL2csIFwiXCIpLCBtaW5ZZWFyID0gb3B0cy5taW4ueWVhci5zdWJzdHIoMCwgcmF3WWVhci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBtaW5ZZWFyIDw9IHJhd1llYXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGVQYXJ0cy55ZWFyID09PSBkYXRlUGFydHMucmF3eWVhciAmJiBvcHRzLm1pbi5kYXRlLmdldFRpbWUoKSA9PSBvcHRzLm1pbi5kYXRlLmdldFRpbWUoKSAmJiAocmVzdWx0ID0gb3B0cy5taW4uZGF0ZS5nZXRUaW1lKCkgPD0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgJiYgb3B0cy5tYXggJiYgb3B0cy5tYXguZGF0ZS5nZXRUaW1lKCkgPT0gb3B0cy5tYXguZGF0ZS5nZXRUaW1lKCkgJiYgKHJlc3VsdCA9IG9wdHMubWF4LmRhdGUuZ2V0VGltZSgpID49IGRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKSksIFxuICAgICAgICAgICAgcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlKGZvcm1hdCwgZGF0ZU9ialZhbHVlLCBvcHRzLCByYXcpIHtcbiAgICAgICAgICAgIHZhciBtYXNrID0gXCJcIiwgbWF0Y2gsIGZjb2RlO1xuICAgICAgICAgICAgZm9yIChnZXRUb2tlbml6ZXIob3B0cykubGFzdEluZGV4ID0gMDsgbWF0Y2ggPSBnZXRUb2tlbml6ZXIob3B0cykuZXhlYyhmb3JtYXQpOyApIGlmICh2b2lkIDAgPT09IGRhdGVPYmpWYWx1ZSkgaWYgKGZjb2RlID0gZm9ybWF0Y29kZShtYXRjaCkpIG1hc2sgKz0gXCIoXCIgKyBmY29kZVswXSArIFwiKVwiOyBlbHNlIHN3aXRjaCAobWF0Y2hbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgICAgICAgICBtYXNrICs9IFwiKFwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJdXCI6XG4gICAgICAgICAgICAgICAgbWFzayArPSBcIik/XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBtYXNrICs9IElucHV0bWFzay5lc2NhcGVSZWdleChtYXRjaFswXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZjb2RlID0gZm9ybWF0Y29kZShtYXRjaCkpIGlmICghMCAhPT0gcmF3ICYmIGZjb2RlWzNdKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdldEZuID0gZmNvZGVbM107XG4gICAgICAgICAgICAgICAgbWFzayArPSBnZXRGbi5jYWxsKGRhdGVPYmpWYWx1ZS5kYXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSBmY29kZVsyXSA/IG1hc2sgKz0gZGF0ZU9ialZhbHVlW1wicmF3XCIgKyBmY29kZVsyXV0gOiBtYXNrICs9IG1hdGNoWzBdOyBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICByZXR1cm4gbWFzaztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwYWQodmFsLCBsZW4pIHtcbiAgICAgICAgICAgIGZvciAodmFsID0gU3RyaW5nKHZhbCksIGxlbiA9IGxlbiB8fCAyOyB2YWwubGVuZ3RoIDwgbGVuOyApIHZhbCA9IFwiMFwiICsgdmFsO1xuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhbmFseXNlTWFzayhtYXNrU3RyaW5nLCBmb3JtYXQsIG9wdHMpIHtcbiAgICAgICAgICAgIHZhciBkYXRlT2JqID0ge1xuICAgICAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKDEsIDAsIDEpXG4gICAgICAgICAgICB9LCB0YXJnZXRQcm9wLCBtYXNrID0gbWFza1N0cmluZywgbWF0Y2gsIGRhdGVPcGVyYXRpb247XG4gICAgICAgICAgICBmdW5jdGlvbiBleHRlbmRQcm9wZXJ0eSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb3JyZWN0ZWRWYWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvcnJlY3RlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0VmFsdWUoZGF0ZU9iaiwgdmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBkYXRlT2JqW3RhcmdldFByb3BdID0gZXh0ZW5kUHJvcGVydHkodmFsdWUpLCBkYXRlT2JqW1wicmF3XCIgKyB0YXJnZXRQcm9wXSA9IHZhbHVlLCBcbiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGRhdGVPcGVyYXRpb24gJiYgZGF0ZU9wZXJhdGlvbi5jYWxsKGRhdGVPYmouZGF0ZSwgXCJtb250aFwiID09IHRhcmdldFByb3AgPyBwYXJzZUludChkYXRlT2JqW3RhcmdldFByb3BdKSAtIDEgOiBkYXRlT2JqW3RhcmdldFByb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBtYXNrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChnZXRUb2tlbml6ZXIob3B0cykubGFzdEluZGV4ID0gMDsgbWF0Y2ggPSBnZXRUb2tlbml6ZXIob3B0cykuZXhlYyhmb3JtYXQpOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbWFzay5zbGljZSgwLCBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXRDb2RlLmhhc093blByb3BlcnR5KG1hdGNoWzBdKSAmJiAodGFyZ2V0UHJvcCA9IGZvcm1hdENvZGVbbWF0Y2hbMF1dWzJdLCBkYXRlT3BlcmF0aW9uID0gZm9ybWF0Q29kZVttYXRjaFswXV1bMV0sIFxuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlT2JqLCB2YWx1ZSwgb3B0cykpLCBtYXNrID0gbWFzay5zbGljZSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZU9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXNrICYmIFwib2JqZWN0XCIgPT09IF90eXBlb2YobWFzaykgJiYgbWFzay5oYXNPd25Qcm9wZXJ0eShcImRhdGVcIikpIHJldHVybiBtYXNrO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGltcG9ydERhdGUoZGF0ZU9iaiwgb3B0cykge1xuICAgICAgICAgICAgdmFyIG1hdGNoLCBkYXRlID0gXCJcIjtcbiAgICAgICAgICAgIGZvciAoZ2V0VG9rZW5pemVyKG9wdHMpLmxhc3RJbmRleCA9IDA7IG1hdGNoID0gZ2V0VG9rZW5pemVyKG9wdHMpLmV4ZWMob3B0cy5pbnB1dEZvcm1hdCk7ICkgXCJkXCIgPT09IG1hdGNoWzBdLmNoYXJBdCgwKSA/IGRhdGUgKz0gcGFkKGRhdGVPYmouZ2V0RGF0ZSgpLCBtYXRjaFswXS5sZW5ndGgpIDogXCJtXCIgPT09IG1hdGNoWzBdLmNoYXJBdCgwKSA/IGRhdGUgKz0gcGFkKGRhdGVPYmouZ2V0TW9udGgoKSArIDEsIG1hdGNoWzBdLmxlbmd0aCkgOiBcInl5eXlcIiA9PT0gbWF0Y2hbMF0gPyBkYXRlICs9IGRhdGVPYmouZ2V0RnVsbFllYXIoKS50b1N0cmluZygpIDogXCJ5XCIgPT09IG1hdGNoWzBdLmNoYXJBdCgwKSAmJiAoZGF0ZSArPSBwYWQoZGF0ZU9iai5nZXRZZWFyKCksIG1hdGNoWzBdLmxlbmd0aCkpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VG9rZW5NYXRjaChwb3MsIG9wdHMpIHtcbiAgICAgICAgICAgIHZhciBjYWxjUG9zID0gMCwgdGFyZ2V0TWF0Y2gsIG1hdGNoLCBtYXRjaExlbmd0aCA9IDA7XG4gICAgICAgICAgICBmb3IgKGdldFRva2VuaXplcihvcHRzKS5sYXN0SW5kZXggPSAwOyBtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKG9wdHMuaW5wdXRGb3JtYXQpOyApIHtcbiAgICAgICAgICAgICAgICB2YXIgZHluTWF0Y2hlcyA9IG5ldyBSZWdFeHAoXCJcXFxcZCskXCIpLmV4ZWMobWF0Y2hbMF0pO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaExlbmd0aCA9IGR5bk1hdGNoZXMgPyBwYXJzZUludChkeW5NYXRjaGVzWzBdKSA6IG1hdGNoWzBdLmxlbmd0aCwgY2FsY1BvcyArPSBtYXRjaExlbmd0aCwgXG4gICAgICAgICAgICAgICAgcG9zIDw9IGNhbGNQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWF0Y2ggPSBtYXRjaCwgbWF0Y2ggPSBnZXRUb2tlbml6ZXIob3B0cykuZXhlYyhvcHRzLmlucHV0Rm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaEluZGV4OiBjYWxjUG9zIC0gbWF0Y2hMZW5ndGgsXG4gICAgICAgICAgICAgICAgbmV4dE1hdGNoOiBtYXRjaCxcbiAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaDogdGFyZ2V0TWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICAgICAgZGF0ZXRpbWU6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBmdW5jdGlvbiBtYXNrKG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMubnVtZXJpY0lucHV0ID0gITEsIGZvcm1hdENvZGUuUyA9IG9wdHMuaTE4bi5vcmRpbmFsU3VmZml4LmpvaW4oXCJ8XCIpLCBcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnB1dEZvcm1hdCA9IGZvcm1hdEFsaWFzW29wdHMuaW5wdXRGb3JtYXRdIHx8IG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMuZGlzcGxheUZvcm1hdCA9IGZvcm1hdEFsaWFzW29wdHMuZGlzcGxheUZvcm1hdF0gfHwgb3B0cy5kaXNwbGF5Rm9ybWF0IHx8IG9wdHMuaW5wdXRGb3JtYXQsIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLm91dHB1dEZvcm1hdCA9IGZvcm1hdEFsaWFzW29wdHMub3V0cHV0Rm9ybWF0XSB8fCBvcHRzLm91dHB1dEZvcm1hdCB8fCBvcHRzLmlucHV0Rm9ybWF0LCBcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5wbGFjZWhvbGRlciA9IFwiXCIgIT09IG9wdHMucGxhY2Vob2xkZXIgPyBvcHRzLnBsYWNlaG9sZGVyIDogb3B0cy5pbnB1dEZvcm1hdC5yZXBsYWNlKC9bW1xcXV0vLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMucmVnZXggPSBwYXJzZShvcHRzLmlucHV0Rm9ybWF0LCB2b2lkIDAsIG9wdHMpLCBvcHRzLm1pbiA9IGFuYWx5c2VNYXNrKG9wdHMubWluLCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKSwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMubWF4ID0gYW5hbHlzZU1hc2sob3B0cy5tYXgsIG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMpLCBudWxsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCIsXG4gICAgICAgICAgICAgICAgaW5wdXRGb3JtYXQ6IFwiaXNvRGF0ZVRpbWVcIixcbiAgICAgICAgICAgICAgICBkaXNwbGF5Rm9ybWF0OiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgb3V0cHV0Rm9ybWF0OiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgbWluOiBudWxsLFxuICAgICAgICAgICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgICAgICAgICBza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyOiBcIlwiLFxuICAgICAgICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5TmFtZXM6IFsgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiwgXCJTdW5cIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiLCBcIlN1bmRheVwiIF0sXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoTmFtZXM6IFsgXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIiwgXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiIF0sXG4gICAgICAgICAgICAgICAgICAgIG9yZGluYWxTdWZmaXg6IFsgXCJzdFwiLCBcIm5kXCIsIFwicmRcIiwgXCJ0aFwiIF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByZVZhbGlkYXRpb246IGZ1bmN0aW9uIHByZVZhbGlkYXRpb24oYnVmZmVyLCBwb3MsIGMsIGlzU2VsZWN0aW9uLCBvcHRzLCBtYXNrc2V0LCBjYXJldFBvcywgc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpY3QpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGMpICYmIGJ1ZmZlcltwb3NdICE9PSBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5NYXRjaCA9IGdldFRva2VuTWF0Y2gocG9zLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbk1hdGNoLm5leHRNYXRjaCAmJiB0b2tlbk1hdGNoLm5leHRNYXRjaFswXSA9PT0gYyAmJiAxIDwgdG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRhdG9yID0gZm9ybWF0Q29kZVt0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3IFJlZ0V4cCh2YWxpZGF0b3IpLnRlc3QoXCIwXCIgKyBidWZmZXJbcG9zIC0gMV0pKSByZXR1cm4gYnVmZmVyW3Bvc10gPSBidWZmZXJbcG9zIC0gMV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1enp5OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBmdW5jdGlvbiBwb3N0VmFsaWRhdGlvbihidWZmZXIsIHBvcywgYywgY3VycmVudFJlc3VsdCwgb3B0cywgbWFza3NldCwgc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpY3QpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuTWF0Y2gsIHZhbGlkYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCExID09PSBjdXJyZW50UmVzdWx0KSByZXR1cm4gdG9rZW5NYXRjaCA9IGdldFRva2VuTWF0Y2gocG9zICsgMSwgb3B0cyksIHRva2VuTWF0Y2gudGFyZ2V0TWF0Y2ggJiYgdG9rZW5NYXRjaC50YXJnZXRNYXRjaEluZGV4ID09PSBwb3MgJiYgMSA8IHRva2VuTWF0Y2gudGFyZ2V0TWF0Y2hbMF0ubGVuZ3RoICYmIHZvaWQgMCAhPT0gZm9ybWF0Q29kZVt0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdXSAmJiAodmFsaWRhdG9yID0gZm9ybWF0Q29kZVt0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdXVswXSwgXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAodmFsaWRhdG9yKS50ZXN0KFwiMFwiICsgYykpID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0OiBbIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBcIjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBjXG4gICAgICAgICAgICAgICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIDFcbiAgICAgICAgICAgICAgICAgICAgfSA6IGN1cnJlbnRSZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmVzdWx0LmZ1enp5ICYmIChidWZmZXIgPSBjdXJyZW50UmVzdWx0LmJ1ZmZlciwgcG9zID0gY3VycmVudFJlc3VsdC5wb3MpLCBcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5NYXRjaCA9IGdldFRva2VuTWF0Y2gocG9zLCBvcHRzKSwgdG9rZW5NYXRjaC50YXJnZXRNYXRjaCAmJiB0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdICYmIHZvaWQgMCAhPT0gZm9ybWF0Q29kZVt0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yID0gZm9ybWF0Q29kZVt0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gYnVmZmVyLnNsaWNlKHRva2VuTWF0Y2gudGFyZ2V0TWF0Y2hJbmRleCwgdG9rZW5NYXRjaC50YXJnZXRNYXRjaEluZGV4ICsgdG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgITEgPT09IG5ldyBSZWdFeHAodmFsaWRhdG9yKS50ZXN0KHBhcnQuam9pbihcIlwiKSkgJiYgMiA9PT0gdG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXS5sZW5ndGggJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1t0b2tlbk1hdGNoLnRhcmdldE1hdGNoSW5kZXhdICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbdG9rZW5NYXRjaC50YXJnZXRNYXRjaEluZGV4ICsgMV0gJiYgKG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbdG9rZW5NYXRjaC50YXJnZXRNYXRjaEluZGV4ICsgMV0uaW5wdXQgPSBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1cnJlbnRSZXN1bHQsIGRhdGVQYXJ0cyA9IGFuYWx5c2VNYXNrKGJ1ZmZlci5qb2luKFwiXCIpLCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCAmJiBkYXRlUGFydHMuZGF0ZS5nZXRUaW1lKCkgPT0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpICYmIChyZXN1bHQgPSBpc1ZhbGlkRGF0ZShkYXRlUGFydHMsIHJlc3VsdCksIFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgaXNEYXRlSW5SYW5nZShkYXRlUGFydHMsIG9wdHMpKSwgcG9zICYmIHJlc3VsdCAmJiBjdXJyZW50UmVzdWx0LnBvcyAhPT0gcG9zID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBwYXJzZShvcHRzLmlucHV0Rm9ybWF0LCBkYXRlUGFydHMsIG9wdHMpLnNwbGl0KFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogY3VycmVudFJlc3VsdC5wb3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSA6IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0ga2V5Q29kZS5SSUdIVCAmJiAodGhpcy5pbnB1dG1hc2suX3ZhbHVlU2V0KGltcG9ydERhdGUobmV3IERhdGUoKSwgb3B0cykpLCBcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VyKFwic2V0dmFsdWVcIikpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uIG9uVW5NYXNrKG1hc2tlZFZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZFZhbHVlID8gcGFyc2Uob3B0cy5vdXRwdXRGb3JtYXQsIGFuYWx5c2VNYXNrKG1hc2tlZFZhbHVlLCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKSwgb3B0cywgITApIDogdW5tYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhc2luZzogZnVuY3Rpb24gY2FzaW5nKGVsZW0sIHRlc3QsIHBvcywgdmFsaWRQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgPT0gdGVzdC5uYXRpdmVEZWYuaW5kZXhPZihcIlthcF1cIikgPyBlbGVtLnRvTG93ZXJDYXNlKCkgOiAwID09IHRlc3QubmF0aXZlRGVmLmluZGV4T2YoXCJbQVBdXCIpID8gZWxlbS50b1VwcGVyQ2FzZSgpIDogZWxlbTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlTWFzazogZnVuY3Rpb24gb25CZWZvcmVNYXNrKGluaXRpYWxWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IERhdGVdXCIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbml0aWFsVmFsdWUpICYmIChpbml0aWFsVmFsdWUgPSBpbXBvcnREYXRlKGluaXRpYWxWYWx1ZSwgb3B0cykpLCBcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogITEsXG4gICAgICAgICAgICAgICAgc2hpZnRQb3NpdGlvbnM6ICExLFxuICAgICAgICAgICAgICAgIGtlZXBTdGF0aWM6ICExLFxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJudW1lcmljXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIG1vZHVsZS5leHBvcnRzID0gSW5wdXRtYXNrO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgdmFyIElucHV0bWFzayA9IF9fd2VicGFja19yZXF1aXJlX18oMSksICQgPSBJbnB1dG1hc2suZGVwZW5kZW5jeUxpYiwga2V5Q29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4gICAgICAgIGZ1bmN0aW9uIGF1dG9Fc2NhcGUodHh0LCBvcHRzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBlc2NhcGVkVHh0ID0gXCJcIiwgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyBpKyspIElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV0gfHwgb3B0cy5kZWZpbml0aW9uc1t0eHQuY2hhckF0KGkpXSB8fCBvcHRzLm9wdGlvbmFsbWFya2VyWzBdID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMub3B0aW9uYWxtYXJrZXJbMV0gPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5xdWFudGlmaWVybWFya2VyWzBdID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMucXVhbnRpZmllcm1hcmtlclsxXSA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLmdyb3VwbWFya2VyWzBdID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuZ3JvdXBtYXJrZXJbMV0gPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5hbHRlcm5hdG9ybWFya2VyID09PSB0eHQuY2hhckF0KGkpID8gZXNjYXBlZFR4dCArPSBcIlxcXFxcIiArIHR4dC5jaGFyQXQoaSkgOiBlc2NhcGVkVHh0ICs9IHR4dC5jaGFyQXQoaSk7XG4gICAgICAgICAgICByZXR1cm4gZXNjYXBlZFR4dDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhbGlnbkRpZ2l0cyhidWZmZXIsIGRpZ2l0cywgb3B0cywgZm9yY2UpIHtcbiAgICAgICAgICAgIGlmICgwIDwgYnVmZmVyLmxlbmd0aCAmJiAwIDwgZGlnaXRzICYmICghb3B0cy5kaWdpdHNPcHRpb25hbCB8fCBmb3JjZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgLTEgPT09IHJhZGl4UG9zaXRpb24gJiYgKGJ1ZmZlci5wdXNoKG9wdHMucmFkaXhQb2ludCksIHJhZGl4UG9zaXRpb24gPSBidWZmZXIubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gZGlnaXRzOyBpKyspIGlzRmluaXRlKGJ1ZmZlcltyYWRpeFBvc2l0aW9uICsgaV0pIHx8IChidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldID0gXCIwXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmaW5kVmFsaWRhdG9yKHN5bWJvbCwgbWFza3NldCkge1xuICAgICAgICAgICAgdmFyIHBvc05keCA9IDA7XG4gICAgICAgICAgICBpZiAoXCIrXCIgPT09IHN5bWJvbCkge1xuICAgICAgICAgICAgICAgIGZvciAocG9zTmR4IGluIG1hc2tzZXQudmFsaWRQb3NpdGlvbnMpIDtcbiAgICAgICAgICAgICAgICBwb3NOZHggPSBwYXJzZUludChwb3NOZHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgdHN0TmR4IGluIG1hc2tzZXQudGVzdHMpIGlmICh0c3ROZHggPSBwYXJzZUludCh0c3ROZHgpLCBwb3NOZHggPD0gdHN0TmR4KSBmb3IgKHZhciBuZHggPSAwLCBuZHhsID0gbWFza3NldC50ZXN0c1t0c3ROZHhdLmxlbmd0aDsgbmR4IDwgbmR4bDsgbmR4KyspIGlmICgodm9pZCAwID09PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3RzdE5keF0gfHwgXCItXCIgPT09IHN5bWJvbCkgJiYgbWFza3NldC50ZXN0c1t0c3ROZHhdW25keF0ubWF0Y2guZGVmID09PSBzeW1ib2wpIHJldHVybiB0c3ROZHggKyAodm9pZCAwICE9PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3RzdE5keF0gJiYgXCItXCIgIT09IHN5bWJvbCA/IDEgOiAwKTtcbiAgICAgICAgICAgIHJldHVybiBwb3NOZHg7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZmluZFZhbGlkKHN5bWJvbCwgbWFza3NldCkge1xuICAgICAgICAgICAgdmFyIHJldCA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuICQuZWFjaChtYXNrc2V0LnZhbGlkUG9zaXRpb25zLCBmdW5jdGlvbihuZHgsIHRzdCkge1xuICAgICAgICAgICAgICAgIGlmICh0c3QgJiYgdHN0Lm1hdGNoLmRlZiA9PT0gc3ltYm9sKSByZXR1cm4gcmV0ID0gcGFyc2VJbnQobmR4KSwgITE7XG4gICAgICAgICAgICB9KSwgcmV0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlTWluTWF4T3B0aW9ucyhvcHRzKSB7XG4gICAgICAgICAgICB2b2lkIDAgPT09IG9wdHMucGFyc2VNaW5NYXhPcHRpb25zICYmIChudWxsICE9PSBvcHRzLm1pbiAmJiAob3B0cy5taW4gPSBvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIiksIFxuICAgICAgICAgICAgXCIsXCIgPT09IG9wdHMucmFkaXhQb2ludCAmJiAob3B0cy5taW4gPSBvcHRzLm1pbi5yZXBsYWNlKG9wdHMucmFkaXhQb2ludCwgXCIuXCIpKSwgXG4gICAgICAgICAgICBvcHRzLm1pbiA9IGlzRmluaXRlKG9wdHMubWluKSA/IHBhcnNlRmxvYXQob3B0cy5taW4pIDogTmFOLCBpc05hTihvcHRzLm1pbikgJiYgKG9wdHMubWluID0gTnVtYmVyLk1JTl9WQUxVRSkpLCBcbiAgICAgICAgICAgIG51bGwgIT09IG9wdHMubWF4ICYmIChvcHRzLm1heCA9IG9wdHMubWF4LnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChvcHRzLm1heCA9IG9wdHMubWF4LnJlcGxhY2Uob3B0cy5yYWRpeFBvaW50LCBcIi5cIikpLCBcbiAgICAgICAgICAgIG9wdHMubWF4ID0gaXNGaW5pdGUob3B0cy5tYXgpID8gcGFyc2VGbG9hdChvcHRzLm1heCkgOiBOYU4sIGlzTmFOKG9wdHMubWF4KSAmJiAob3B0cy5tYXggPSBOdW1iZXIuTUFYX1ZBTFVFKSksIFxuICAgICAgICAgICAgb3B0cy5wYXJzZU1pbk1heE9wdGlvbnMgPSBcImRvbmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2VuTWFzayhvcHRzKSB7XG4gICAgICAgICAgICBvcHRzLnJlcGVhdCA9IDAsIG9wdHMuZ3JvdXBTZXBhcmF0b3IgPT09IG9wdHMucmFkaXhQb2ludCAmJiBvcHRzLmRpZ2l0cyAmJiBcIjBcIiAhPT0gb3B0cy5kaWdpdHMgJiYgKFwiLlwiID09PSBvcHRzLnJhZGl4UG9pbnQgPyBvcHRzLmdyb3VwU2VwYXJhdG9yID0gXCIsXCIgOiBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ID8gb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLlwiIDogb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiXCIpLCBcbiAgICAgICAgICAgIFwiIFwiID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yICYmIChvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgPSB2b2lkIDApLCAxIDwgb3B0cy5wbGFjZWhvbGRlci5sZW5ndGggJiYgKG9wdHMucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSksIFxuICAgICAgICAgICAgXCJyYWRpeEZvY3VzXCIgPT09IG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgJiYgXCJcIiA9PT0gb3B0cy5wbGFjZWhvbGRlciAmJiAob3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9IFwibHZwXCIpO1xuICAgICAgICAgICAgdmFyIGRlY2ltYWxEZWYgPSBcIjBcIiwgcmFkaXhQb2ludERlZiA9IG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICEwID09PSBvcHRzLm51bWVyaWNJbnB1dCAmJiB2b2lkIDAgPT09IG9wdHMuX19maW5hbmNlSW5wdXQgPyAoZGVjaW1hbERlZiA9IFwiMVwiLCBcbiAgICAgICAgICAgIG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPSBcInJhZGl4Rm9jdXNcIiA9PT0gb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA/IFwibHZwXCIgOiBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrLCBcbiAgICAgICAgICAgIG9wdHMuZGlnaXRzT3B0aW9uYWwgPSAhMSwgaXNOYU4ob3B0cy5kaWdpdHMpICYmIChvcHRzLmRpZ2l0cyA9IDIpLCBvcHRzLl9yYWRpeERhbmNlID0gITEsIFxuICAgICAgICAgICAgcmFkaXhQb2ludERlZiA9IFwiLFwiID09PSBvcHRzLnJhZGl4UG9pbnQgPyBcIj9cIiA6IFwiIVwiLCBcIlwiICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgdm9pZCAwID09PSBvcHRzLmRlZmluaXRpb25zW3JhZGl4UG9pbnREZWZdICYmIChvcHRzLmRlZmluaXRpb25zW3JhZGl4UG9pbnREZWZdID0ge30sIFxuICAgICAgICAgICAgb3B0cy5kZWZpbml0aW9uc1tyYWRpeFBvaW50RGVmXS52YWxpZGF0b3IgPSBcIltcIiArIG9wdHMucmFkaXhQb2ludCArIFwiXVwiLCBvcHRzLmRlZmluaXRpb25zW3JhZGl4UG9pbnREZWZdLnBsYWNlaG9sZGVyID0gb3B0cy5yYWRpeFBvaW50LCBcbiAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnNbcmFkaXhQb2ludERlZl0uc3RhdGljID0gITAsIG9wdHMuZGVmaW5pdGlvbnNbcmFkaXhQb2ludERlZl0uZ2VuZXJhdGVkID0gITApKSA6IChvcHRzLl9fZmluYW5jZUlucHV0ID0gITEsIFxuICAgICAgICAgICAgb3B0cy5udW1lcmljSW5wdXQgPSAhMCk7XG4gICAgICAgICAgICB2YXIgbWFzayA9IFwiWytdXCIsIGFsdE1hc2s7XG4gICAgICAgICAgICBpZiAobWFzayArPSBhdXRvRXNjYXBlKG9wdHMucHJlZml4LCBvcHRzKSwgXCJcIiAhPT0gb3B0cy5ncm91cFNlcGFyYXRvciA/ICh2b2lkIDAgPT09IG9wdHMuZGVmaW5pdGlvbnNbb3B0cy5ncm91cFNlcGFyYXRvcl0gJiYgKG9wdHMuZGVmaW5pdGlvbnNbb3B0cy5ncm91cFNlcGFyYXRvcl0gPSB7fSwgXG4gICAgICAgICAgICBvcHRzLmRlZmluaXRpb25zW29wdHMuZ3JvdXBTZXBhcmF0b3JdLnZhbGlkYXRvciA9IFwiW1wiICsgb3B0cy5ncm91cFNlcGFyYXRvciArIFwiXVwiLCBcbiAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnNbb3B0cy5ncm91cFNlcGFyYXRvcl0ucGxhY2Vob2xkZXIgPSBvcHRzLmdyb3VwU2VwYXJhdG9yLCBvcHRzLmRlZmluaXRpb25zW29wdHMuZ3JvdXBTZXBhcmF0b3JdLnN0YXRpYyA9ICEwLCBcbiAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnNbb3B0cy5ncm91cFNlcGFyYXRvcl0uZ2VuZXJhdGVkID0gITApLCBtYXNrICs9IG9wdHMuX21hc2sob3B0cykpIDogbWFzayArPSBcIjl7K31cIiwgXG4gICAgICAgICAgICB2b2lkIDAgIT09IG9wdHMuZGlnaXRzICYmIDAgIT09IG9wdHMuZGlnaXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRxID0gb3B0cy5kaWdpdHMudG9TdHJpbmcoKS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgaXNGaW5pdGUoZHFbMF0pICYmIGRxWzFdICYmIGlzRmluaXRlKGRxWzFdKSA/IG1hc2sgKz0gcmFkaXhQb2ludERlZiArIGRlY2ltYWxEZWYgKyBcIntcIiArIG9wdHMuZGlnaXRzICsgXCJ9XCIgOiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IDAgPCBwYXJzZUludChvcHRzLmRpZ2l0cykpICYmIChvcHRzLmRpZ2l0c09wdGlvbmFsID8gKGFsdE1hc2sgPSBtYXNrICsgcmFkaXhQb2ludERlZiArIGRlY2ltYWxEZWYgKyBcInswLFwiICsgb3B0cy5kaWdpdHMgKyBcIn1cIiwgXG4gICAgICAgICAgICAgICAgb3B0cy5rZWVwU3RhdGljID0gITApIDogbWFzayArPSByYWRpeFBvaW50RGVmICsgZGVjaW1hbERlZiArIFwie1wiICsgb3B0cy5kaWdpdHMgKyBcIn1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFzayArPSBhdXRvRXNjYXBlKG9wdHMuc3VmZml4LCBvcHRzKSwgbWFzayArPSBcIlstXVwiLCBhbHRNYXNrICYmIChtYXNrID0gWyBhbHRNYXNrICsgYXV0b0VzY2FwZShvcHRzLnN1ZmZpeCwgb3B0cykgKyBcIlstXVwiLCBtYXNrIF0pLCBcbiAgICAgICAgICAgIG9wdHMuZ3JlZWR5ID0gITEsIHBhcnNlTWluTWF4T3B0aW9ucyhvcHRzKSwgbWFzaztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYW5uZGxlUmFkaXhEYW5jZShwb3MsIGMsIHJhZGl4UG9zLCBtYXNrc2V0LCBvcHRzKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0cy5fcmFkaXhEYW5jZSAmJiBvcHRzLm51bWVyaWNJbnB1dCAmJiBjICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2sgJiYgcG9zIDw9IHJhZGl4UG9zICYmICgwIDwgcmFkaXhQb3MgfHwgYyA9PSBvcHRzLnJhZGl4UG9pbnQpICYmICh2b2lkIDAgPT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0gfHwgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3MgLSAxXS5pbnB1dCAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSAmJiAocG9zIC09IDEpLCBcbiAgICAgICAgICAgIHBvcztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZWNpbWFsVmFsaWRhdG9yKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSBtYXNrc2V0LmJ1ZmZlciA/IG1hc2tzZXQuYnVmZmVyLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KSA6IC0xLCByZXN1bHQgPSAtMSAhPT0gcmFkaXhQb3MgJiYgbmV3IFJlZ0V4cChcIlswLTlcXHVmZjExLVxcdWZmMTldXCIpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICByZXR1cm4gb3B0cy5fcmFkaXhEYW5jZSAmJiByZXN1bHQgJiYgbnVsbCA9PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3JhZGl4UG9zXSA/IHtcbiAgICAgICAgICAgICAgICBpbnNlcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zOiByYWRpeFBvcyA9PT0gcG9zID8gcmFkaXhQb3MgKyAxIDogcmFkaXhQb3MsXG4gICAgICAgICAgICAgICAgICAgIGM6IG9wdHMucmFkaXhQb2ludFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgICAgIH0gOiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tGb3JMZWFkaW5nWmVyb2VzKGJ1ZmZlciwgb3B0cykge1xuICAgICAgICAgICAgdmFyIG51bWJlck1hdGNoZXMgPSBuZXcgUmVnRXhwKFwiKF5cIiArIChcIlwiICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ID8gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCI/XCIgOiBcIlwiKSArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnByZWZpeCkgKyBcIikoLiopKFwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuc3VmZml4KSArIChcIlwiICE9IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayA/IElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCI/XCIgOiBcIlwiKSArIFwiJClcIikuZXhlYyhidWZmZXIuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSksIG51bWJlciA9IG51bWJlck1hdGNoZXMgPyBudW1iZXJNYXRjaGVzWzJdIDogXCJcIiwgbGVhZGluZ3plcm9lcyA9ICExO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciAmJiAobnVtYmVyID0gbnVtYmVyLnNwbGl0KG9wdHMucmFkaXhQb2ludC5jaGFyQXQoMCkpWzBdLCBsZWFkaW5nemVyb2VzID0gbmV3IFJlZ0V4cChcIl5bMFwiICsgb3B0cy5ncm91cFNlcGFyYXRvciArIFwiXSpcIikuZXhlYyhudW1iZXIpKSwgXG4gICAgICAgICAgICAhKCFsZWFkaW5nemVyb2VzIHx8ICEoMSA8IGxlYWRpbmd6ZXJvZXNbMF0ubGVuZ3RoIHx8IDAgPCBsZWFkaW5nemVyb2VzWzBdLmxlbmd0aCAmJiBsZWFkaW5nemVyb2VzWzBdLmxlbmd0aCA8IG51bWJlci5sZW5ndGgpKSAmJiBsZWFkaW5nemVyb2VzO1xuICAgICAgICB9XG4gICAgICAgIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcbiAgICAgICAgICAgIG51bWVyaWM6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBnZW5NYXNrLFxuICAgICAgICAgICAgICAgIF9tYXNrOiBmdW5jdGlvbiBfbWFzayhvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIihcIiArIG9wdHMuZ3JvdXBTZXBhcmF0b3IgKyBcIjk5OSl7K3wxfVwiO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGlnaXRzOiBcIipcIixcbiAgICAgICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogITAsXG4gICAgICAgICAgICAgICAgZW5mb3JjZURpZ2l0c09uQmx1cjogITEsXG4gICAgICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXG4gICAgICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uQ2xpY2s6IFwicmFkaXhGb2N1c1wiLFxuICAgICAgICAgICAgICAgIF9yYWRpeERhbmNlOiAhMCxcbiAgICAgICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgICAgICBhbGxvd01pbnVzOiAhMCxcbiAgICAgICAgICAgICAgICBuZWdhdGlvblN5bWJvbDoge1xuICAgICAgICAgICAgICAgICAgICBmcm9udDogXCItXCIsXG4gICAgICAgICAgICAgICAgICAgIGJhY2s6IFwiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByZWZpeDogXCJcIixcbiAgICAgICAgICAgICAgICBzdWZmaXg6IFwiXCIsXG4gICAgICAgICAgICAgICAgbWluOiBudWxsLFxuICAgICAgICAgICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgICAgICAgICBzdGVwOiAxLFxuICAgICAgICAgICAgICAgIHVubWFza0FzTnVtYmVyOiAhMSxcbiAgICAgICAgICAgICAgICByb3VuZGluZ0ZOOiBNYXRoLnJvdW5kLFxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJudW1lcmljXCIsXG4gICAgICAgICAgICAgICAgc2hvcnRjdXRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGs6IFwiMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgIG06IFwiMDAwMDAwXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIjBcIixcbiAgICAgICAgICAgICAgICBncmVlZHk6ICExLFxuICAgICAgICAgICAgICAgIHJpZ2h0QWxpZ246ICEwLFxuICAgICAgICAgICAgICAgIGluc2VydE1vZGU6ICEwLFxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExLFxuICAgICAgICAgICAgICAgIHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6IFwiXCIsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgMDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBkZWNpbWFsVmFsaWRhdG9yXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIDE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZGVjaW1hbFZhbGlkYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6IFwiOVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiK1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmFsbG93TWludXMgJiYgKFwiLVwiID09PSBjaHJzIHx8IGNocnMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIi1cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIGNocnMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHJlVmFsaWRhdGlvbjogZnVuY3Rpb24gcHJlVmFsaWRhdGlvbihidWZmZXIsIHBvcywgYywgaXNTZWxlY3Rpb24sIG9wdHMsIG1hc2tzZXQsIGNhcmV0UG9zLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCExICE9PSBvcHRzLl9fZmluYW5jZUlucHV0ICYmIGMgPT09IG9wdHMucmFkaXhQb2ludCkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGF0dGVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHRlcm4gPSBvcHRzLnNob3J0Y3V0cyAmJiBvcHRzLnNob3J0Y3V0c1tjXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPCBwYXR0ZXJuLmxlbmd0aCkgZm9yICh2YXIgaW5zZXJ0cyA9IFtdLCBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyBpKyspIGluc2VydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MgKyBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IHBhdHRlcm5baV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWN0OiAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydDogaW5zZXJ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpLCBpbml0UG9zID0gcG9zO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zID0gaGFubmRsZVJhZGl4RGFuY2UocG9zLCBjLCByYWRpeFBvcywgbWFza3NldCwgb3B0cyksIFwiLVwiID09PSBjIHx8IGMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMCAhPT0gb3B0cy5hbGxvd01pbnVzKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNOZWdhdGl2ZSA9ICExLCBmcm9udCA9IGZpbmRWYWxpZChcIitcIiwgbWFza3NldCksIGJhY2sgPSBmaW5kVmFsaWQoXCItXCIsIG1hc2tzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xICE9PSBmcm9udCAmJiAoaXNOZWdhdGl2ZSA9IFsgZnJvbnQsIGJhY2sgXSksICExICE9PSBpc05lZ2F0aXZlID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogaXNOZWdhdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogaW5pdFBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IFsge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IGZpbmRWYWxpZGF0b3IoXCIrXCIsIG1hc2tzZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tSXNWYWxpZDogITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogZmluZFZhbGlkYXRvcihcIi1cIiwgbWFza3NldCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUlzVmFsaWQ6IHZvaWQgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogaW5pdFBvcyArIG9wdHMubmVnYXRpb25TeW1ib2wuYmFjay5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmljdCkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT09IHJhZGl4UG9zICYmICEwID09PSBvcHRzLl9yYWRpeERhbmNlICYmICExID09PSBpc1NlbGVjdGlvbiAmJiBjID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgdm9pZCAwICE9PSBvcHRzLmRpZ2l0cyAmJiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IDAgPCBwYXJzZUludChvcHRzLmRpZ2l0cykpICYmIHJhZGl4UG9zICE9PSBwb3MpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogb3B0cy5fcmFkaXhEYW5jZSAmJiBwb3MgPT09IHJhZGl4UG9zIC0gMSA/IHJhZGl4UG9zICsgMSA6IHJhZGl4UG9zXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmICghMSA9PT0gb3B0cy5fX2ZpbmFuY2VJbnB1dCkgaWYgKGlzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHNPcHRpb25hbCkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXdyaXRlUG9zaXRpb246IGNhcmV0UG9zLmVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5kaWdpdHNPcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYXJldFBvcy5iZWdpbiA+IHJhZGl4UG9zICYmIGNhcmV0UG9zLmVuZCA8PSByYWRpeFBvcykgcmV0dXJuIGMgPT09IG9wdHMucmFkaXhQb2ludCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHJhZGl4UG9zICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUlzVmFsaWQ6ICEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld3JpdGVQb3NpdGlvbjogcmFkaXhQb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXdyaXRlUG9zaXRpb246IHJhZGl4UG9zICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zLmJlZ2luIDwgcmFkaXhQb3MpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld3JpdGVQb3NpdGlvbjogY2FyZXRQb3MuYmVnaW4gLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghb3B0cy5zaG93TWFza09uSG92ZXIgJiYgIW9wdHMuc2hvd01hc2tPbkZvY3VzICYmICFvcHRzLmRpZ2l0c09wdGlvbmFsICYmIDAgPCBvcHRzLmRpZ2l0cyAmJiBcIlwiID09PSB0aGlzLmlucHV0bWFzay5fX3ZhbHVlR2V0LmNhbGwodGhpcykpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXdyaXRlUG9zaXRpb246IHJhZGl4UG9zXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXdyaXRlUG9zaXRpb246IHBvc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcG9zdFZhbGlkYXRpb246IGZ1bmN0aW9uIHBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgcG9zLCBjLCBjdXJyZW50UmVzdWx0LCBvcHRzLCBtYXNrc2V0LCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCExID09PSBjdXJyZW50UmVzdWx0KSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmljdCkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gb3B0cy5taW4gfHwgbnVsbCAhPT0gb3B0cy5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bm1hc2tlZCA9IG9wdHMub25Vbk1hc2soYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIiksIHZvaWQgMCwgJC5leHRlbmQoe30sIG9wdHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hc2tBc051bWJlcjogITBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBvcHRzLm1pbiAmJiB1bm1hc2tlZCA8IG9wdHMubWluICYmICh1bm1hc2tlZC50b1N0cmluZygpLmxlbmd0aCA+PSBvcHRzLm1pbi50b1N0cmluZygpLmxlbmd0aCB8fCB1bm1hc2tlZCA8IDApKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gb3B0cy5tYXggJiYgdW5tYXNrZWQgPiBvcHRzLm1heCkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50UmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uIG9uVW5NYXNrKG1hc2tlZFZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcIlwiID09PSB1bm1hc2tlZFZhbHVlICYmICEwID09PSBvcHRzLm51bGxhYmxlKSByZXR1cm4gdW5tYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uob3B0cy5zdWZmaXgsIFwiXCIpLCBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIFwiXCIgIT09IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApICYmIChwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApLCBcImdcIiksIFwiMFwiKSksIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLnVubWFza0FzTnVtYmVyID8gKFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiAtMSAhPT0gcHJvY2Vzc1ZhbHVlLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KSAmJiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgb3B0cy5yYWRpeFBvaW50KSwgXCIuXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkpLCBcIi1cIiksIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIE51bWJlcihwcm9jZXNzVmFsdWUpKSA6IHByb2Nlc3NWYWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlzQ29tcGxldGU6IGZ1bmN0aW9uIGlzQ29tcGxldGUoYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrZWRWYWx1ZSA9IChvcHRzLm51bWVyaWNJbnB1dCA/IGJ1ZmZlci5zbGljZSgpLnJldmVyc2UoKSA6IGJ1ZmZlcikuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpKSwgXCItXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKSwgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMuc3VmZml4LCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIFwiKFswLTldezN9KVwiLCBcImdcIiksIFwiJDFcIiksIFxuICAgICAgICAgICAgICAgICAgICBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucmFkaXhQb2ludCksIFwiLlwiKSksIFxuICAgICAgICAgICAgICAgICAgICBpc0Zpbml0ZShtYXNrZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkJlZm9yZU1hc2s6IGZ1bmN0aW9uIG9uQmVmb3JlTWFzayhpbml0aWFsVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9pbnQgPSBvcHRzLnJhZGl4UG9pbnQgfHwgXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgIGlzRmluaXRlKG9wdHMuZGlnaXRzKSAmJiAob3B0cy5kaWdpdHMgPSBwYXJzZUludChvcHRzLmRpZ2l0cykpLCBcIm51bWJlclwiICE9IHR5cGVvZiBpbml0aWFsVmFsdWUgJiYgXCJudW1iZXJcIiAhPT0gb3B0cy5pbnB1dFR5cGUgfHwgXCJcIiA9PT0gcmFkaXhQb2ludCB8fCAoaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgcmFkaXhQb2ludCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVQYXJ0cyA9IGluaXRpYWxWYWx1ZS5zcGxpdChyYWRpeFBvaW50KSwgaW50ZWdlclBhcnQgPSB2YWx1ZVBhcnRzWzBdLnJlcGxhY2UoL1teXFwtMC05XS9nLCBcIlwiKSwgZGVjaW1hbFBhcnQgPSAxIDwgdmFsdWVQYXJ0cy5sZW5ndGggPyB2YWx1ZVBhcnRzWzFdLnJlcGxhY2UoL1teMC05XS9nLCBcIlwiKSA6IFwiXCIsIGZvcmNlRGlnaXRzID0gMSA8IHZhbHVlUGFydHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbnRlZ2VyUGFydCArIChcIlwiICE9PSBkZWNpbWFsUGFydCA/IHJhZGl4UG9pbnQgKyBkZWNpbWFsUGFydCA6IGRlY2ltYWxQYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpZ2l0cyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcIlwiICE9PSByYWRpeFBvaW50ICYmIChkaWdpdHMgPSBvcHRzLmRpZ2l0c09wdGlvbmFsID8gb3B0cy5kaWdpdHMgPCBkZWNpbWFsUGFydC5sZW5ndGggPyBvcHRzLmRpZ2l0cyA6IGRlY2ltYWxQYXJ0Lmxlbmd0aCA6IG9wdHMuZGlnaXRzLCBcbiAgICAgICAgICAgICAgICAgICAgXCJcIiAhPT0gZGVjaW1hbFBhcnQgfHwgIW9wdHMuZGlnaXRzT3B0aW9uYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyB8fCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChyYWRpeFBvaW50KSwgXCIuXCIpLCBpc05hTihwYXJzZUZsb2F0KGluaXRpYWxWYWx1ZSkpIHx8IChpbml0aWFsVmFsdWUgPSAob3B0cy5yb3VuZGluZ0ZOKHBhcnNlRmxvYXQoaW5pdGlhbFZhbHVlKSAqIGRpZ2l0c0ZhY3RvcikgLyBkaWdpdHNGYWN0b3IpLnRvRml4ZWQoZGlnaXRzKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgcmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG9wdHMuZGlnaXRzICYmIC0xICE9PSBpbml0aWFsVmFsdWUuaW5kZXhPZihyYWRpeFBvaW50KSAmJiAoaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnN1YnN0cmluZygwLCBpbml0aWFsVmFsdWUuaW5kZXhPZihyYWRpeFBvaW50KSkpLCBcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gb3B0cy5taW4gfHwgbnVsbCAhPT0gb3B0cy5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudW1iZXJWYWx1ZSA9IGluaXRpYWxWYWx1ZS50b1N0cmluZygpLnJlcGxhY2UocmFkaXhQb2ludCwgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gb3B0cy5taW4gJiYgbnVtYmVyVmFsdWUgPCBvcHRzLm1pbiA/IGluaXRpYWxWYWx1ZSA9IG9wdHMubWluLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgcmFkaXhQb2ludCkgOiBudWxsICE9PSBvcHRzLm1heCAmJiBudW1iZXJWYWx1ZSA+IG9wdHMubWF4ICYmIChpbml0aWFsVmFsdWUgPSBvcHRzLm1heC50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIHJhZGl4UG9pbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxpZ25EaWdpdHMoaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIiksIGRpZ2l0cywgb3B0cywgZm9yY2VEaWdpdHMpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkJlZm9yZVdyaXRlOiBmdW5jdGlvbiBvbkJlZm9yZVdyaXRlKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3RyaXBCdWZmZXIoYnVmZmVyLCBzdHJpcFJhZGl4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoITEgIT09IG9wdHMuX19maW5hbmNlSW5wdXQgfHwgc3RyaXBSYWRpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgIT09IHBvc2l0aW9uICYmIGJ1ZmZlci5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiXCIgIT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IpIGZvciAoOy0xICE9PSAocG9zaXRpb24gPSBidWZmZXIuaW5kZXhPZihvcHRzLmdyb3VwU2VwYXJhdG9yKSk7ICkgYnVmZmVyLnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQsIGxlYWRpbmd6ZXJvZXMgPSBjaGVja0ZvckxlYWRpbmdaZXJvZXMoYnVmZmVyLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlYWRpbmd6ZXJvZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWYgPSBidWZmZXIuc2xpY2UoKS5yZXZlcnNlKCksIGNhcmV0TmR4ID0gYnVmLmpvaW4oXCJcIikuaW5kZXhPZihsZWFkaW5nemVyb2VzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Zi5zcGxpY2UoY2FyZXROZHgsIGxlYWRpbmd6ZXJvZXNbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdDYXJldFBvcyA9IGJ1Zi5sZW5ndGggLSBjYXJldE5keDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwQnVmZmVyKGJ1ZiksIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBidWYucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvcyA8IG5ld0NhcmV0UG9zID8gY2FyZXRQb3MgOiBuZXdDYXJldFBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZSkgc3dpdGNoIChlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjaGVja3ZhbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IG9wdHMubWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVubWFza2VkID0gb3B0cy5vblVuTWFzayhidWZmZXIuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSwgdm9pZCAwLCAkLmV4dGVuZCh7fSwgb3B0cywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hc2tBc051bWJlcjogITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IG9wdHMubWluICYmIHVubWFza2VkIDwgb3B0cy5taW4pIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBhbGlnbkRpZ2l0cyhvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkuc3BsaXQoXCJcIiksIG9wdHMuZGlnaXRzLCBvcHRzKS5yZXZlcnNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gMV0gPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm1ick10Y2hzID0gbmV3IFJlZ0V4cChcIiheXCIgKyAoXCJcIiAhPSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ID8gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCI/XCIgOiBcIlwiKSArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnByZWZpeCkgKyBcIikoLiopKFwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuc3VmZml4KSArIChcIlwiICE9IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayA/IElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCI/XCIgOiBcIlwiKSArIFwiJClcIikuZXhlYyhzdHJpcEJ1ZmZlcihidWZmZXIuc2xpY2UoKSwgITApLnJldmVyc2UoKS5qb2luKFwiXCIpKSwgbnVtYmVyID0gbm1ick10Y2hzID8gbm1ick10Y2hzWzJdIDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwID09IG51bWJlciAmJiAocmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogWyAwIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBcIlwiICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgYnVmZmVyWzBdID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKHJlc3VsdCAmJiByZXN1bHQuYnVmZmVyID8gcmVzdWx0LmJ1ZmZlci5zaGlmdCgpIDogKGJ1ZmZlci5zaGlmdCgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBzdHJpcEJ1ZmZlcihidWZmZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5lbmZvcmNlRGlnaXRzT25CbHVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZmZyID0gcmVzdWx0ICYmIHJlc3VsdC5idWZmZXIgfHwgYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlciA9ICEwLCByZXN1bHQuYnVmZmVyID0gYWxpZ25EaWdpdHMoYmZmciwgb3B0cy5kaWdpdHMsIG9wdHMsICEwKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIGJmZnI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBrZXlDb2RlLlVQOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLl9fdmFsdWVTZXQuY2FsbCh0aGlzLCBwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgKyBwYXJzZUludChvcHRzLnN0ZXApKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpLCAhMTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2Uga2V5Q29kZS5ET1dOOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLl9fdmFsdWVTZXQuY2FsbCh0aGlzLCBwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgLSBwYXJzZUludChvcHRzLnN0ZXApKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpLCAhMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUuc2hpZnRLZXkgJiYgKGUua2V5Q29kZSA9PT0ga2V5Q29kZS5ERUxFVEUgfHwgZS5rZXlDb2RlID09PSBrZXlDb2RlLkJBQ0tTUEFDRSB8fCBlLmtleUNvZGUgPT09IGtleUNvZGUuQkFDS1NQQUNFX1NBRkFSSSkgJiYgY2FyZXRQb3MuYmVnaW4gIT09IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJbZS5rZXlDb2RlID09PSBrZXlDb2RlLkRFTEVURSA/IGNhcmV0UG9zLmJlZ2luIC0gMSA6IGNhcmV0UG9zLmVuZF0gPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpIHJldHVybiBiZmZyID0gYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgJiYgYmZmci5zaGlmdCgpLCBcIlwiICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2sgJiYgYmZmci5wb3AoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIsIFsgYmZmci5qb2luKFwiXCIpLCBjYXJldFBvcy5iZWdpbiBdKSwgITE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgPT09IG9wdHMuX3JhZGl4RGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpZ2l0c09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSByYWRpeFBvcykgcmV0dXJuIGJmZnIgPSBidWZmZXIuc2xpY2UoKS5yZXZlcnNlKCksIGJmZnIucG9wKCksICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIiwgWyBiZmZyLmpvaW4oXCJcIiksIGNhcmV0UG9zLmJlZ2luID49IGJmZnIubGVuZ3RoID8gYmZmci5sZW5ndGggOiBjYXJldFBvcy5iZWdpbiBdKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoLTEgIT09IHJhZGl4UG9zICYmIChjYXJldFBvcy5iZWdpbiA8IHJhZGl4UG9zIHx8IGNhcmV0UG9zLmVuZCA8IHJhZGl4UG9zIHx8IGUua2V5Q29kZSA9PT0ga2V5Q29kZS5ERUxFVEUgJiYgY2FyZXRQb3MuYmVnaW4gPT09IHJhZGl4UG9zKSkgcmV0dXJuIGNhcmV0UG9zLmJlZ2luICE9PSBjYXJldFBvcy5lbmQgfHwgZS5rZXlDb2RlICE9PSBrZXlDb2RlLkJBQ0tTUEFDRSAmJiBlLmtleUNvZGUgIT09IGtleUNvZGUuQkFDS1NQQUNFX1NBRkFSSSB8fCBjYXJldFBvcy5iZWdpbisrLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZmZyID0gYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpLCBiZmZyLnNwbGljZShiZmZyLmxlbmd0aCAtIGNhcmV0UG9zLmJlZ2luLCBjYXJldFBvcy5iZWdpbiAtIGNhcmV0UG9zLmVuZCArIDEpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZmZyID0gYWxpZ25EaWdpdHMoYmZmciwgb3B0cy5kaWdpdHMsIG9wdHMpLmpvaW4oXCJcIiksICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIiwgWyBiZmZyLCBjYXJldFBvcy5iZWdpbiA+PSBiZmZyLmxlbmd0aCA/IHJhZGl4UG9zICsgMSA6IGNhcmV0UG9zLmJlZ2luIF0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXJyZW5jeToge1xuICAgICAgICAgICAgICAgIHByZWZpeDogXCJcIixcbiAgICAgICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCIsXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgICAgIGRpZ2l0czogMixcbiAgICAgICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogITFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWNpbWFsOiB7XG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW50ZWdlcjoge1xuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgICAgICBkaWdpdHM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZXJjZW50YWdlOiB7XG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDEwMCxcbiAgICAgICAgICAgICAgICBzdWZmaXg6IFwiICVcIixcbiAgICAgICAgICAgICAgICBkaWdpdHM6IDAsXG4gICAgICAgICAgICAgICAgYWxsb3dNaW51czogITFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmRpYW5uczoge1xuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgICAgICBfbWFzazogZnVuY3Rpb24gX21hc2sob3B0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIoXCIgKyBvcHRzLmdyb3VwU2VwYXJhdG9yICsgXCI5OSl7KnwxfShcIiArIG9wdHMuZ3JvdXBTZXBhcmF0b3IgKyBcIjk5OSl7MXwxfVwiO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiLFwiLFxuICAgICAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiLlwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIjBcIixcbiAgICAgICAgICAgICAgICBkaWdpdHM6IDIsXG4gICAgICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6ICExXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBtb2R1bGUuZXhwb3J0cyA9IElucHV0bWFzaztcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIHZhciBfaW5wdXRtYXNrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbiAgICAgICAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgICAgICAgICB9LCBfdHlwZW9mKG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgICAgICAgICAgcmV0dXJuICFjYWxsIHx8IFwib2JqZWN0XCIgIT09IF90eXBlb2YoY2FsbCkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBjYWxsID8gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSA6IGNhbGw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSBzZWxmKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHN1cGVyQ2xhc3MgJiYgbnVsbCAhPT0gc3VwZXJDbGFzcykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICAgICAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogITAsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgc3VwZXJDbGFzcyAmJiBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICAgICAgICAgIHZhciBfY2FjaGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIE1hcCA/IG5ldyBNYXAoKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSBDbGFzcyB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG4gICAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgQ2xhc3MpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgX2NhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgICAgICAgICAgIH0sIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBSZWZsZWN0IHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuICExO1xuICAgICAgICAgICAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiAhMTtcbiAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFByb3h5KSByZXR1cm4gITA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbigpIHt9KSksIFxuICAgICAgICAgICAgICAgICEwO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBfY29uc3RydWN0ID0gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdCA6IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgICAgICAgICAgIHZhciBhID0gWyBudWxsIF07XG4gICAgICAgICAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKSwgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2xhc3MgJiYgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpLCBpbnN0YW5jZTtcbiAgICAgICAgICAgIH0sIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICAgICAgICAgICAgcmV0dXJuIC0xICE9PSBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvLl9fcHJvdG9fXyA9IHAsIG87XG4gICAgICAgICAgICB9LCBfc2V0UHJvdG90eXBlT2YobywgcCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICAgICAgICAgIHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gICAgICAgICAgICB9LCBfZ2V0UHJvdG90eXBlT2Yobyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb2N1bWVudC5oZWFkLmNyZWF0ZVNoYWRvd1Jvb3QgfHwgZG9jdW1lbnQuaGVhZC5hdHRhY2hTaGFkb3cpIHtcbiAgICAgICAgICAgIHZhciBJbnB1dG1hc2tFbGVtZW50ID0gZnVuY3Rpb24oX0hUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gSW5wdXRtYXNrRWxlbWVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzO1xuICAgICAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXRtYXNrRWxlbWVudCksIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKElucHV0bWFza0VsZW1lbnQpLmNhbGwodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlTmFtZXMgPSBfdGhpcy5nZXRBdHRyaWJ1dGVOYW1lcygpLCBzaGFkb3cgPSBfdGhpcy5hdHRhY2hTaGFkb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjbG9zZWRcIlxuICAgICAgICAgICAgICAgICAgICB9KSwgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGF0dHIgaW4gaW5wdXQudHlwZSA9IFwidGV4dFwiLCBzaGFkb3cuYXBwZW5kQ2hpbGQoaW5wdXQpLCBhdHRyaWJ1dGVOYW1lcykgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJpYnV0ZU5hbWVzLCBhdHRyKSAmJiBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlucHV0bWFzay1cIiArIGF0dHJpYnV0ZU5hbWVzW2F0dHJdLCBfdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZXNbYXR0cl0pKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfaW5wdXRtYXNrLmRlZmF1bHQoKS5tYXNrKGlucHV0KSwgaW5wdXQuaW5wdXRtYXNrLnNoYWRvd1Jvb3QgPSBzaGFkb3csIFxuICAgICAgICAgICAgICAgICAgICBfdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9pbmhlcml0cyhJbnB1dG1hc2tFbGVtZW50LCBfSFRNTEVsZW1lbnQpLCBJbnB1dG1hc2tFbGVtZW50O1xuICAgICAgICAgICAgfShfd3JhcE5hdGl2ZVN1cGVyKEhUTUxFbGVtZW50KSk7XG4gICAgICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJpbnB1dC1tYXNrXCIsIElucHV0bWFza0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfSBdLCBpbnN0YWxsZWRNb2R1bGVzID0ge30sIF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXMsIF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXMsIFxuICAgIF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkgfHwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICAgICAgZ2V0OiBnZXR0ZXJcbiAgICAgICAgfSk7XG4gICAgfSwgX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuICAgICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHtcbiAgICAgICAgICAgIHZhbHVlOiBcIk1vZHVsZVwiXG4gICAgICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiAhMFxuICAgICAgICB9KTtcbiAgICB9LCBfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuICAgICAgICBpZiAoMSAmIG1vZGUgJiYgKHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSkpLCA4ICYgbW9kZSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICBpZiAoNCAmIG1vZGUgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCBcImRlZmF1bHRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSksIDIgJiBtb2RlICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIHZhbHVlKSBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVtrZXldO1xuICAgICAgICB9LmJpbmQobnVsbCwga2V5KSk7XG4gICAgICAgIHJldHVybiBucztcbiAgICB9LCBfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgICAgdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/IGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlLmRlZmF1bHQ7XG4gICAgICAgIH0gOiBmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkge1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIFwiYVwiLCBnZXR0ZXIpLCBnZXR0ZXI7XG4gICAgfSwgX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpO1xuICAgIH0sIF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCIsIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNSk7XG4gICAgZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuICAgICAgICBpZiAoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuICAgICAgICB2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gICAgICAgICAgICBpOiBtb2R1bGVJZCxcbiAgICAgICAgICAgIGw6ICExLFxuICAgICAgICAgICAgZXhwb3J0czoge31cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pLCBcbiAgICAgICAgbW9kdWxlLmwgPSAhMCwgbW9kdWxlLmV4cG9ydHM7XG4gICAgfVxuICAgIHZhciBtb2R1bGVzLCBpbnN0YWxsZWRNb2R1bGVzO1xufSk7IiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRyYW5zaXRpb24uanMgdjMuNC4xXG4gKiBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy8zLjQvamF2YXNjcmlwdC8jdHJhbnNpdGlvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDU1MgVFJBTlNJVElPTiBTVVBQT1JUIChTaG91dG91dDogaHR0cHM6Ly9tb2Rlcm5penIuY29tLylcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKVxuXG4gICAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcbiAgICAgIFdlYmtpdFRyYW5zaXRpb24gOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICBNb3pUcmFuc2l0aW9uICAgIDogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgT1RyYW5zaXRpb24gICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXG4gICAgICB0cmFuc2l0aW9uICAgICAgIDogJ3RyYW5zaXRpb25lbmQnXG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcbiAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7IGVuZDogdHJhbnNFbmRFdmVudE5hbWVzW25hbWVdIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2UgLy8gZXhwbGljaXQgZm9yIGllOCAoICAuXy4pXG4gIH1cblxuICAvLyBodHRwczovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zXG4gICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2VcbiAgICB2YXIgJGVsID0gdGhpc1xuICAgICQodGhpcykub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWUgfSlcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IGlmICghY2FsbGVkKSAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpIH1cbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkdXJhdGlvbilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgJChmdW5jdGlvbiAoKSB7XG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kKClcblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVyblxuXG4gICAgJC5ldmVudC5zcGVjaWFsLmJzVHJhbnNpdGlvbkVuZCA9IHtcbiAgICAgIGJpbmRUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoaXMpKSByZXR1cm4gZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdGFiLmpzIHYzLjQuMVxuICogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvMy40L2phdmFzY3JpcHQvI3RhYnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUQUIgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUYWIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIC8vIGpzY3M6ZGlzYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudClcbiAgICAvLyBqc2NzOmVuYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICB9XG5cbiAgVGFiLlZFUlNJT04gPSAnMy40LjEnXG5cbiAgVGFiLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUYWIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aGlzICAgID0gdGhpcy5lbGVtZW50XG4gICAgdmFyICR1bCAgICAgID0gJHRoaXMuY2xvc2VzdCgndWw6bm90KC5kcm9wZG93bi1tZW51KScpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuZGF0YSgndGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgaWYgKCR0aGlzLnBhcmVudCgnbGknKS5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVyblxuXG4gICAgdmFyICRwcmV2aW91cyA9ICR1bC5maW5kKCcuYWN0aXZlOmxhc3QgYScpXG4gICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMudGFiJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICB9KVxuICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgIH0pXG5cbiAgICAkcHJldmlvdXMudHJpZ2dlcihoaWRlRXZlbnQpXG4gICAgJHRoaXMudHJpZ2dlcihzaG93RXZlbnQpXG5cbiAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRhcmdldCA9ICQoZG9jdW1lbnQpLmZpbmQoc2VsZWN0b3IpXG5cbiAgICB0aGlzLmFjdGl2YXRlKCR0aGlzLmNsb3Nlc3QoJ2xpJyksICR1bClcbiAgICB0aGlzLmFjdGl2YXRlKCR0YXJnZXQsICR0YXJnZXQucGFyZW50KCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICRwcmV2aW91cy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2hpZGRlbi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxuICAgICAgfSlcbiAgICAgICR0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnc2hvd24uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHByZXZpb3VzWzBdXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBUYWIucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICB2YXIgJGFjdGl2ZSAgICA9IGNvbnRhaW5lci5maW5kKCc+IC5hY3RpdmUnKVxuICAgIHZhciB0cmFuc2l0aW9uID0gY2FsbGJhY2tcbiAgICAgICYmICQuc3VwcG9ydC50cmFuc2l0aW9uXG4gICAgICAmJiAoJGFjdGl2ZS5sZW5ndGggJiYgJGFjdGl2ZS5oYXNDbGFzcygnZmFkZScpIHx8ICEhY29udGFpbmVyLmZpbmQoJz4gLmZhZGUnKS5sZW5ndGgpXG5cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCc+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZScpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmVuZCgpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgICBlbGVtZW50XG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyByZWZsb3cgZm9yIHRyYW5zaXRpb25cbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmFkZScpXG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKS5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudFxuICAgICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgICRhY3RpdmUubGVuZ3RoICYmIHRyYW5zaXRpb24gP1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBuZXh0KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVGFiLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIG5leHQoKVxuXG4gICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnaW4nKVxuICB9XG5cblxuICAvLyBUQUIgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMudGFiJylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50YWInLCAoZGF0YSA9IG5ldyBUYWIodGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnRhYlxuXG4gICQuZm4udGFiICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4udGFiLkNvbnN0cnVjdG9yID0gVGFiXG5cblxuICAvLyBUQUIgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09XG5cbiAgJC5mbi50YWIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRhYiA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIFRBQiBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT1cblxuICB2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBQbHVnaW4uY2FsbCgkKHRoaXMpLCAnc2hvdycpXG4gIH1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScsIGNsaWNrSGFuZGxlcilcbiAgICAub24oJ2NsaWNrLmJzLnRhYi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJwaWxsXCJdJywgY2xpY2tIYW5kbGVyKVxuXG59KGpRdWVyeSk7XG4iLCIkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG4gICAgLy8gSW5wdXRtYXNrXG4gICAgSW5wdXRtYXNrKHtcbiAgICAgICAgbWFzazogJyszOCAoOTk5KSA5OTktOTktOTknLFxuICAgICAgICBjbGVhck1hc2tPbkxvc3RGb2N1czogdHJ1ZSxcbiAgICAgICAgY2xlYXJJbmNvbXBsZXRlOiB0cnVlLFxuICAgICAgICBzaG93TWFza09uSG92ZXI6IGZhbHNlLFxuICAgIH0pLm1hc2soJ2lucHV0W3R5cGU9dGVsXScpO1xuXG4gICAgLy8gdmFsaWRhdGUgZm9ybSByZXZpZXcgc3RhcnRcbiAgICAkKCcuaW5wdXQtZmlsZScpLmNoYW5nZShmdW5jdGlvbihlKSB7XG4gICAgICAgICQoJy5lcnJvci1maWxlLWluZm8nKS5oaWRlKCk7XG4gICAgICAgICQoJy5tYXgtc2l6ZScpLmhpZGUoKTtcbiAgICAgICAgdmFyIG1heEZpbGVTaXplID0gNSAqIDEwMjQgKiAxMDI0O1xuICAgICAgICB2YXIgZmlsZUlucHV0U2l6ZSA9IGUudGFyZ2V0LmZpbGVzWzBdLnNpemU7XG4gICAgICAgIHZhciBmaWxlSW5wdXQgPSAkKHRoaXMpLmNsb3Nlc3QoJy5pbnB1dC1maWxlLWlubmVyLXdyYXAnKS5maW5kKCcuaW5wdXQtZmlsZScpO1xuICAgICAgICB2YXIgbGFiZWxUZXh0ID0gJCh0aGlzKS5jbG9zZXN0KCcuaW5wdXQtZmlsZS1pbm5lci13cmFwJykuZmluZCgnLmxhYmVsLXRleHQnKTtcbiAgICAgICAgdmFyIGxhYmVsUmVtb3ZlID0gJCh0aGlzKS5jbG9zZXN0KCcuaW5wdXQtZmlsZS1pbm5lci13cmFwJykuZmluZCgnLmxhYmVsLXJlbW92ZScpO1xuICAgICAgICB2YXIgcGFyZW50ID0gJCh0aGlzKS5jbG9zZXN0KCcuaW5wdXQtZmlsZS1pbm5lci13cmFwJyk7XG4gICAgICAgIGlmICgkKHRoaXMpLnZhbCgpICE9ICcnKSB7XG4gICAgICAgICAgICBpZiAoZmlsZUlucHV0U2l6ZSA+IG1heEZpbGVTaXplKSB7XG4gICAgICAgICAgICAgICAgJCgnLmVycm9yLWZpbGUtaW5mbycpLnNob3coKTtcbiAgICAgICAgICAgICAgICAkKCcubWF4LXNpemUnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgZmlsZUlucHV0LnZhbCgnJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IGUudGFyZ2V0LmZpbGVzWzBdLm5hbWU7XG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0LnRleHQoZmlsZU5hbWUpO1xuICAgICAgICAgICAgICAgIGxhYmVsUmVtb3ZlLnNob3coKTtcbiAgICAgICAgICAgICAgICBwYXJlbnQubmV4dCgnLmlucHV0LWZpbGUtaW5uZXItd3JhcCcpLmNzcygnZGlzcGxheScsICdmbGV4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoJCgnaHRtbCcpLmF0dHIoJ2xhbmcnKT09J3J1Jykge1xuICAgICAgICAgICAgICAgIGxhYmVsVGV4dC50ZXh0KCfQl9Cw0LPRgNGD0LfQuNGC0Ywg0YTQvtGC0L4nKTtcbiAgICAgICAgICAgICAgICBsYWJlbFJlbW92ZS5oaWRlKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCQoJ2h0bWwnKS5hdHRyKCdsYW5nJyk9PSd1aycpIHtcbiAgICAgICAgICAgICAgICBsYWJlbFRleHQudGV4dCgn0JfQsNCy0LDQvdGC0LDQttC40YLQuCDRhNC+0YLQvicpO1xuICAgICAgICAgICAgICAgIGxhYmVsUmVtb3ZlLmhpZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0LnRleHQoJ1VwbG9hZCBhIHBob3RvJyk7XG4gICAgICAgICAgICAgICAgbGFiZWxSZW1vdmUuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKCcubGFiZWwtcmVtb3ZlJykuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbGFiZWxUZXh0ID0gJCh0aGlzKS5jbG9zZXN0KCcuaW5wdXQtZmlsZS1pbm5lci13cmFwJykuZmluZCgnLmxhYmVsLXRleHQnKTtcbiAgICAgICAgdmFyIGxhYmVsUmVtb3ZlID0gJCh0aGlzKS5jbG9zZXN0KCcuaW5wdXQtZmlsZS1pbm5lci13cmFwJykuZmluZCgnLmxhYmVsLXJlbW92ZScpO1xuICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpLmNsb3Nlc3QoJy5pbnB1dC1maWxlLWlubmVyLXdyYXAnKS5maW5kKCcuaW5wdXQtZmlsZScpO1xuICAgICAgICBpZiAoJCgnaHRtbCcpLmF0dHIoJ2xhbmcnKT09J3J1Jykge1xuICAgICAgICAgICAgbGFiZWxUZXh0LnRleHQoJ9CX0LDQs9GA0YPQt9C40YLRjCDRhNC+0YLQvicpO1xuICAgICAgICB9IGVsc2UgaWYgKCQoJ2h0bWwnKS5hdHRyKCdsYW5nJyk9PSd1aycpIHtcbiAgICAgICAgICAgIGxhYmVsVGV4dC50ZXh0KCfQl9Cw0LLQsNC90YLQsNC20LjRgtC4INGE0L7RgtC+Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYWJlbFRleHQudGV4dCgnVXBsb2FkIGEgcGhvdG8nKTtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbFJlbW92ZS5oaWRlKCk7XG4gICAgICAgIGlucHV0LnZhbCgnJyk7XG4gICAgICAgIGlmKCEkKHRoaXMpLnBhcmVudCgpLm5leHQoJy5pbnB1dC1maWxlLWlubmVyLXdyYXAnKS5maW5kKCcuaW5wdXQtZmlsZScpLnZhbCgpICkge1xuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5uZXh0KCcuaW5wdXQtZmlsZS1pbm5lci13cmFwJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgfVxuICAgIH0pXG5cblxuICAgIHZhciBpdGVtID0gJCgnLnJldmlld19mb3JtJyk7XG4gICAgZnVuY3Rpb24gc2VuZFRleHRGaWVsZHMoaXRlbSwgZm9ybWRhdGEsIGZpbGUgPSAnJykge1xuICAgICAgICB2YXIgY3NyZl90b2tlbiA9ICQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50Jyk7XG4gICAgICAgIHZhciBkYXRhRm9ybTtcbiAgICAgICAgaWYgKGZpbGUgIT0gJycpIHtcbiAgICAgICAgICAgIGRhdGFGb3JtID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1kYXRhLFxuICAgICAgICAgICAgICAgIGZpbGU6IGZpbGUsXG4gICAgICAgICAgICAgICAgX3Rva2VuIDogY3NyZl90b2tlbixcbiAgICAgICAgICAgICAgICBzdWJqOiAncmV2aWV3JyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFGb3JtID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1kYXRhLFxuICAgICAgICAgICAgICAgIF90b2tlbiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgc3ViajogJ3JldmlldycsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiByb3V0ZXMucG9zdFNlbmQsXG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICBkYXRhOiBkYXRhRm9ybSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkKGl0ZW0pWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCQoJ2h0bWwnKS5hdHRyKCdsYW5nJyk9PSdydScpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmxhYmVsLXRleHQnKS50ZXh0KCfQl9Cw0LPRgNGD0LfQuNGC0Ywg0YTQvtGC0L4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCQoJ2h0bWwnKS5hdHRyKCdsYW5nJyk9PSd1aycpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmxhYmVsLXRleHQnKS50ZXh0KCfQl9Cw0LLQsNC90YLQsNC20LjRgtC4INGE0L7RgtC+Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmxhYmVsLXRleHQnKS50ZXh0KCdVcGxvYWQgYSBwaG90bycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKCcuaW5wdXQtZmlsZS1pbm5lci13cmFwJykubm90KCc6ZXEoMCknKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICQoJy5sYWJlbC1yZW1vdmUnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJCgnLmZvcm0tdGhhbmtzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dGb3JtKCl7XG4gICAgICAgICAgICAgICAgICAgICQoJy5mb3JtLXRoYW5rcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggc2hvd0Zvcm0gLDUwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBmb3JtUmV2aWV3VmFsaWRhdGUoZm9ybSkge1xuICAgICAgICBmb3JtLnZhbGlkYXRlKHtcbiAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgICAgICAgICB2YXIgY3NyZl90b2tlbiA9ICQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1kYXRhID0gJChmb3JtKS5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LWZpbGUtMScpLmZpbGVzLmxlbmd0aCB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtZmlsZS0yJykuZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dHMgPSAkKCcuaW5wdXQtZmlsZScpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgJGRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gaW5wdXRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRfZWwgPSAoaW5wdXRzW2kgKyAxXSkgPyAoaW5wdXRzW2kgKyAxXSkgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT0gbnVsbCAmJiBlbGVtZW50LmZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBrZXkgPSAnZmlsZV8nICsgaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcmVhZGVyLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dF9lbCA9PSBudWxsIHx8ICFuZXh0X2VsLmZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHJvdXRlcy5wb3N0TG9hZEZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Rva2VuXCI6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRhdGFcIjogJGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwbG9hZGVkRmlsZSA9IHJlc3BvbnNlLmZpbGVfbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRUZXh0RmllbGRzKGl0ZW0sIGZvcm1kYXRhLCB1cGxvYWRlZEZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHJlc3BvbnNlKSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGlucHV0c1tpXS5maWxlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZW5kVGV4dEZpZWxkcyhpdGVtLCBmb3JtZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAkKFwiLmRvX3Jldmlld19mb3JtXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHZhciBmb3JtVmFsID0gJCh0aGlzKS5jbG9zZXN0KCcucmV2aWV3X2Zvcm0nKTtcbiAgICAgICAgZm9ybVJldmlld1ZhbGlkYXRlKGZvcm1WYWwpO1xuICAgICAgICBmb3JtVmFsLnN1Ym1pdCgpO1xuICAgIH0pO1xuICAgIC8vIHZhbGlkYXRlIGZvcm0gcmV2aWV3IGVuZFxuXG4gICAgLy8gdmFsaWRhdGUgZm9ybSBjYWxsYmFja1xuICAgICQoXCIuZG9fY2FsbGJhY2tfZm9ybVwiKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGZvcm1WYWwgPSAkKHRoaXMpLmNsb3Nlc3QoJy5jYWxsYmFja19mb3JtJyk7XG4gICAgICAgIGZvcm1DYWxsYmFja1ZhbGlkYXRlKGZvcm1WYWwpO1xuICAgICAgICBmb3JtVmFsLnN1Ym1pdCgpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGZvcm1DYWxsYmFja1ZhbGlkYXRlKGZvcm0pIHtcbiAgICAgICAgZm9ybS52YWxpZGF0ZSh7XG4gICAgICAgICAgICBzdWJtaXRIYW5kbGVyOiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICAgICAgICAgIHZhciBjc3JmX3Rva2VuID0gJCgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgICAgdmFyIGZvcm1kYXRhID0gJChmb3JtKS5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgICAgJChmb3JtKVswXS5yZXNldCgpO1xuICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogcm91dGVzLnBvc3RTZW5kLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiX3Rva2VuXCIgOiBjc3JmX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBcImRhdGFcIjogZm9ybWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIFwic3VialwiOiBcImNhbGxiYWNrXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoZm9ybSkubmV4dCgnLmZvcm0tdGhhbmtzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBoaWRlUG9wdXAoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQubWFnbmlmaWNQb3B1cC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dGb3JtKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLm5leHQoJy5mb3JtLXRoYW5rcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGhpZGVQb3B1cCAsNTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIHNob3dGb3JtICw1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSBmb3JtIGZlZWRiYWNrXG4gICAgJChcIi5kb19mZWVkYmFja19mb3JtXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgZm9ybVZhbCA9ICQodGhpcykuY2xvc2VzdCgnLmZlZWRiYWNrX2Zvcm0nKTtcbiAgICAgICAgZm9ybUZlZWRiYWNrVmFsaWRhdGUoZm9ybVZhbCk7XG4gICAgICAgIGZvcm1WYWwuc3VibWl0KCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZm9ybUZlZWRiYWNrVmFsaWRhdGUoZm9ybSkge1xuICAgICAgICBmb3JtLnZhbGlkYXRlKHtcbiAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgICAgICAgdmFyIGNzcmZfdG9rZW4gPSAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpO1xuICAgICAgICAgICAgICB2YXIgZm9ybWRhdGEgPSAkKGZvcm0pLnNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgICAkKGZvcm0pWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiByb3V0ZXMucG9zdFNlbmQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdWJqXCI6IFwiZmVlZGJhY2tcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5uZXh0KCcuZm9ybS10aGFua3MnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dGb3JtKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLm5leHQoJy5mb3JtLXRoYW5rcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIHNob3dGb3JtICw1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBuZXctcG9zdC1mb3JtIHN0YXJ0XG4gICAgZnVuY3Rpb24gZm9ybVZhbGlkYXRlTmV3UG9zdChmb3JtKSB7XG4gICAgICAgIGZvcm0udmFsaWRhdGUoe1xuICAgICAgICAgICAgc3VibWl0SGFuZGxlcjogZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICAgICAgICAgIHZhciBjc3JmX3Rva2VuID0gJCgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybWRhdGEgPSAkKGZvcm0pLnNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgICAgICQoZm9ybSlbMF0ucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHJvdXRlcy5wb3N0U2VuZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIl90b2tlblwiIDogY3NyZl90b2tlbixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3VialwiOiBcInN1YnNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5uZXh0KCcuZm9ybS10aGFua3MnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93Rm9ybSgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkubmV4dCgnLmZvcm0tdGhhbmtzJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggc2hvd0Zvcm0gLDUwMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAkKFwiLmRvLW5ldy1wb3N0LWZvcm1cIikuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBmb3JtVmFsID0gJCh0aGlzKS5jbG9zZXN0KCcubmV3LXBvc3QtZm9ybScpO1xuICAgICAgICBmb3JtVmFsaWRhdGVOZXdQb3N0KGZvcm1WYWwpO1xuICAgICAgICBmb3JtVmFsLnN1Ym1pdCgpO1xuICAgIH0pO1xuICAgIC8vIG5ldy1wb3N0LWZvcm0gZW5kXG5cbiAgICAvLyBSZWdpc3RyYXRpb24gZm9yIGEgc2VydmljZVxuICAgICQoXCIuZG9fYXBwb2ludG1lbnRfZm9ybVwiKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGZvcm1WYWwgPSAkKHRoaXMpLmNsb3Nlc3QoJy5hcHBvaW50bWVudF9mb3JtJyk7XG4gICAgICAgIGZvcm1BcHBvaW50bWVudFZhbGlkYXRlKGZvcm1WYWwpO1xuICAgICAgICBmb3JtVmFsLnN1Ym1pdCgpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGZvcm1BcHBvaW50bWVudFZhbGlkYXRlKGZvcm0pIHtcbiAgICAgICAgZm9ybS52YWxpZGF0ZSh7XG4gICAgICAgICAgICBzdWJtaXRIYW5kbGVyOiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICAgICAgICAgIHZhciBjc3JmX3Rva2VuID0gJCgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgICAgdmFyIGZvcm1kYXRhID0gJChmb3JtKS5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgICAgJChmb3JtKVswXS5yZXNldCgpO1xuICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogcm91dGVzLnBvc3RTZW5kLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiX3Rva2VuXCIgOiBjc3JmX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBcImRhdGFcIjogZm9ybWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIFwic3VialwiOiBcImFwcG9pbnRtZW50XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoZm9ybSkubmV4dCgnLmZvcm0tdGhhbmtzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBoaWRlUG9wdXAoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQubWFnbmlmaWNQb3B1cC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dGb3JtKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLm5leHQoJy5mb3JtLXRoYW5rcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGhpZGVQb3B1cCAsNTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIHNob3dGb3JtICw1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gUmVnaXN0cmF0aW9uIGZvciBhIHNlcnZpY2VcbiAgICAkKFwiLmRvX3JlZ2lzdHJhdGlvbl9mb3JtXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgZm9ybVZhbCA9ICQodGhpcykuY2xvc2VzdCgnLnJlZ2lzdHJhdGlvbl9mb3JtJyk7XG4gICAgICAgIGZvcm1SZWdpc3RyYXRpb25WYWxpZGF0ZShmb3JtVmFsKTtcbiAgICAgICAgZm9ybVZhbC5zdWJtaXQoKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBmb3JtUmVnaXN0cmF0aW9uVmFsaWRhdGUoZm9ybSkge1xuICAgICAgICBmb3JtLnZhbGlkYXRlKHtcbiAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgICAgICAgdmFyIGNzcmZfdG9rZW4gPSAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpO1xuICAgICAgICAgICAgICB2YXIgZm9ybWRhdGEgPSAkKGZvcm0pLnNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgICAkKGZvcm0pWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiByb3V0ZXMucG9zdFNlbmQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdWJqXCI6IFwiYXBwb2ludG1lbnRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjYXBwb2ludG1lbnQnKS5maW5kKCcucG9wdXAtc3ViLW5hbWUnKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNhcHBvaW50bWVudCcpLmZpbmQoJ2lucHV0W25hbWU9YXBwb2ludG1lbnRdJykudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2FwcG9pbnRtZW50JykuZmluZCgnaW5wdXRbbmFtZT1zcGVjaWFsaXN0XScpLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5zZWxlY3QtYXBwb2ludG1lbnQtc3BlY2lhbGlzdCcpLnByb3AoJ3NlbGVjdGVkSW5kZXgnLCAwKS5zZWxlY3RyaWMoJ3JlZnJlc2gnKTtcbiAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoZm9ybSkubmV4dCgnLmZvcm0tdGhhbmtzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBoaWRlUG9wdXAoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQubWFnbmlmaWNQb3B1cC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dGb3JtKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLm5leHQoJy5mb3JtLXRoYW5rcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGhpZGVQb3B1cCAsNTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIHNob3dGb3JtICw1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG5cblxuICAgIC8vIFJlZ2lzdHJhdGlvbiBmb3Igc3BlY2lhbGlzdFxuICAgICQoXCIuZG9fc3BlY2lhbGlzdF9mb3JtXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgZm9ybVZhbCA9ICQodGhpcykuY2xvc2VzdCgnLnNwZWNpYWxpc3RfZm9ybScpO1xuICAgICAgICBmb3JtUmVnaXN0cmF0aW9uU3BlY2lhbGlzdFZhbGlkYXRlKGZvcm1WYWwpO1xuICAgICAgICBmb3JtVmFsLnN1Ym1pdCgpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGZvcm1SZWdpc3RyYXRpb25TcGVjaWFsaXN0VmFsaWRhdGUoZm9ybSkge1xuICAgICAgICBmb3JtLnZhbGlkYXRlKHtcbiAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgICAgICAgdmFyIGNzcmZfdG9rZW4gPSAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpO1xuICAgICAgICAgICAgICB2YXIgZm9ybWRhdGEgPSAkKGZvcm0pLnNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgICAkKGZvcm0pWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiByb3V0ZXMucG9zdFNlbmQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdWJqXCI6IFwic3BlY2lhbGlzdFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICQoZm9ybSkuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLm5leHQoJy5mb3JtLXRoYW5rcycpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaGlkZVBvcHVwKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLm1hZ25pZmljUG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93Rm9ybSgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5uZXh0KCcuZm9ybS10aGFua3MnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBoaWRlUG9wdXAgLDUwMDApO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBzaG93Rm9ybSAsNTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIHZhbGlkYXRlIHF1ZXN0aW9uX3NlcnZpY2VfZm9ybVxuICAgICQoXCIuZG9fcXVlc3Rpb25fZm9ybVwiKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGZvcm1WYWwgPSAkKHRoaXMpLmNsb3Nlc3QoJy5xdWVzdGlvbl9mb3JtJyk7XG4gICAgICAgIGZvcm1RdWVzdGlvblNlcnZpY2VWYWxpZGF0ZShmb3JtVmFsKTtcbiAgICAgICAgZm9ybVZhbC5zdWJtaXQoKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBmb3JtUXVlc3Rpb25TZXJ2aWNlVmFsaWRhdGUoZm9ybSkge1xuICAgICAgICBmb3JtLnZhbGlkYXRlKHtcbiAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgICAgICAgdmFyIGNzcmZfdG9rZW4gPSAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpO1xuICAgICAgICAgICAgICB2YXIgZm9ybWRhdGEgPSAkKGZvcm0pLnNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgICAkKGZvcm0pWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiByb3V0ZXMucG9zdFNlbmQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdWJqXCI6IFwicXVlc3Rpb25cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjcXVlc3Rpb24nKS5maW5kKCcucG9wdXAtc3ViLW5hbWUnKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNxdWVzdGlvbicpLmZpbmQoJ2lucHV0W25hbWU9YXBwb2ludG1lbnRdJykudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnNlbGVjdC1xdWVzdGlvbicpLnByb3AoJ3NlbGVjdGVkSW5kZXgnLCAwKS5zZWxlY3RyaWMoJ3JlZnJlc2gnKTtcbiAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoZm9ybSkubmV4dCgnLmZvcm0tdGhhbmtzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBoaWRlUG9wdXAoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQubWFnbmlmaWNQb3B1cC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dGb3JtKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLm5leHQoJy5mb3JtLXRoYW5rcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGhpZGVQb3B1cCAsNTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIHNob3dGb3JtICw1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAkKFwiLmRvX2NoZWt1cF9mb3JtXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgZm9ybVZhbCA9ICQodGhpcykuY2xvc2VzdCgnLmNoZWt1cF9mb3JtJyk7XG4gICAgICAgIGZvcm1DaGVrdXBWYWxpZGF0ZShmb3JtVmFsKTtcbiAgICAgICAgZm9ybVZhbC5zdWJtaXQoKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBmb3JtQ2hla3VwVmFsaWRhdGUoZm9ybSkge1xuICAgICAgICBmb3JtLnZhbGlkYXRlKHtcbiAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgICAgICAgdmFyIGNzcmZfdG9rZW4gPSAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpO1xuICAgICAgICAgICAgICB2YXIgZm9ybWRhdGEgPSAkKGZvcm0pLnNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgICAkKGZvcm0pWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiByb3V0ZXMucG9zdFNlbmQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdWJqXCI6IFwiY2hla3VwXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoZm9ybSkubmV4dCgnLmZvcm0tdGhhbmtzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBoaWRlUG9wdXAoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQubWFnbmlmaWNQb3B1cC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dGb3JtKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLm5leHQoJy5mb3JtLXRoYW5rcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGhpZGVQb3B1cCAsNTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIHNob3dGb3JtICw1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJChcIi5kb19jb25zdWx0YXRpb25fZm9ybVwiKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGZvcm1WYWwgPSAkKHRoaXMpLmNsb3Nlc3QoJy5jb25zdWx0YXRpb25fZm9ybScpO1xuICAgICAgICBmb3JtQ2hla3VwVmFsaWRhdGUoZm9ybVZhbCk7XG4gICAgICAgIGZvcm1WYWwuc3VibWl0KCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZm9ybUNoZWt1cFZhbGlkYXRlKGZvcm0pIHtcbiAgICAgICAgZm9ybS52YWxpZGF0ZSh7XG4gICAgICAgICAgICBzdWJtaXRIYW5kbGVyOiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICAgICAgICAgIHZhciBjc3JmX3Rva2VuID0gJCgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgICAgdmFyIGZvcm1kYXRhID0gJChmb3JtKS5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgICAgJChmb3JtKVswXS5yZXNldCgpO1xuICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogcm91dGVzLnBvc3RTZW5kLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiX3Rva2VuXCIgOiBjc3JmX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBcImRhdGFcIjogZm9ybWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIFwic3VialwiOiBcImNvbnN1bHRhdGlvblwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICQoZm9ybSkuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLm5leHQoJy5mb3JtLXRoYW5rcycpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaGlkZVBvcHVwKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLm1hZ25pZmljUG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93Rm9ybSgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJChmb3JtKS5uZXh0KCcuZm9ybS10aGFua3MnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGZvcm0pLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBoaWRlUG9wdXAgLDUwMDApO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBzaG93Rm9ybSAsNTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuXG5cbiAgICAkKCcub25saW5lLWNvbnN1bHRhdGlvbi1mb3JtJykudmFsaWRhdGUoe1xuICAgICAgICBzdWJtaXRIYW5kbGVyOiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICAgICAgICB2YXIgY3NyZl90b2tlbiA9ICQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50Jyk7XG4gICAgICAgICAgICB2YXIgZm9ybWRhdGEgPSAkKCcub25saW5lLWNvbnN1bHRhdGlvbi1mb3JtJykuc2VyaWFsaXplKCk7XG4gICAgICAgICAgICAkKCcub25saW5lLWNvbnN1bHRhdGlvbi1mb3JtJylbMF0ucmVzZXQoKTtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiByb3V0ZXMucG9zdFNlbmQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdWJqXCI6IFwib25saW5lcmV2aWV3XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLm9ubGluZS1jb25zdWx0YXRpb24tZm9ybScpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLm9ubGluZS1jb25zdWx0YXRpb24tZm9ybScpLm5leHQoJy5mb3JtLXRoYW5rcycpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2hvd0Zvcm0oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5vbmxpbmUtY29uc3VsdGF0aW9uLWZvcm0nKS5uZXh0KCcuZm9ybS10aGFua3MnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcub25saW5lLWNvbnN1bHRhdGlvbi1mb3JtJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIHNob3dGb3JtICw1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKFwiLmRvLW9ubGluZS1jb25zdWx0YXRpb25cIikuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBmb3JtVmFsID0gJCh0aGlzKS5jbG9zZXN0KCcub25saW5lLWNvbnN1bHRhdGlvbi1mb3JtJyk7XG4gICAgICAgIGZvcm1WYWxpZGF0ZU5ld1Bvc3QoZm9ybVZhbCk7XG4gICAgICAgIGZvcm1WYWwuc3VibWl0KCk7XG4gICAgfSk7XG5cbiAgICAvLyBjYWJpbmV0XG4gICAgJChcIi5yZWdpc3RyYXRpb24tZm9ybVwiKS52YWxpZGF0ZSh7XG4gICAgICAgICAgc3VibWl0SGFuZGxlcjogZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICAgICAgICB2YXIgY3NyZl90b2tlbiA9ICQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50Jyk7XG4gICAgICAgICAgICAgIHZhciBmb3JtZGF0YSA9ICQoXCIucmVnaXN0cmF0aW9uLWZvcm1cIikuc2VyaWFsaXplKCk7XG4gICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICB1cmw6IHJvdXRlcy5wb3N0UmVnaXN0ZXIsXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgXCJkYXRhXCI6IGZvcm1kYXRhLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbWFpbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucmVnaXN0cmF0aW9uLWZvcm0gLmF1dGgtZXJyb3JcIikuc2xpZGVEb3duKDIwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucmVnaXN0cmF0aW9uLWZvcm0gLmF1dGgtZGVsXCIpLnNsaWRlRG93bigyMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN1Y2Nlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyBcIi9jYWJpbmV0L1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICB9KTtcbiAgICAkKCcuZG9fcmVnaXN0cmF0aW9uLWZvcm0nKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgJChcIi5yZWdpc3RyYXRpb24tZm9ybVwiKS5zdWJtaXQoKVxuICAgIH0pO1xuXG4gICAgJChcIi5yZXNldC1mb3JtXCIpLnZhbGlkYXRlKHtcbiAgICAgICAgc3VibWl0SGFuZGxlcjogZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICAgICAgdmFyIGNzcmZfdG9rZW4gPSAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpO1xuICAgICAgICAgICAgdmFyIGZvcm1kYXRhID0gJChcIi5yZXNldC1mb3JtXCIpLnNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6IHJvdXRlcy5wb3N0UGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtZGF0YSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm9fZW1haWxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiLnJlc2V0LWZvcm0gLmF1dGgtZXJyb3JcIikuc2xpZGVEb3duKDIwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5yZXNldC1mb3JtIC5hdXRoLXJlc3RvcmVkXCIpLnNsaWRlVXAoMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdWNjZXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5yZXNldC1mb3JtIC5hdXRoLXJlc3RvcmVkXCIpLnNsaWRlRG93bigyMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucmVzZXQtZm9ybS5hdXRoLWVycm9yXCIpLnNsaWRlVXAoMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAkKFwiLmRvX3Jlc2V0LWZvcm1cIikuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICQoXCIucmVzZXQtZm9ybVwiKS5zdWJtaXQoKVxuICAgIH0pO1xuXG5cbiAgICAkKFwiLmxvZ2luLWZvcm1cIikudmFsaWRhdGUoe1xuICAgICAgICBzdWJtaXRIYW5kbGVyOiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICAgICAgICB2YXIgY3NyZl90b2tlbiA9ICQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50Jyk7XG4gICAgICAgICAgICB2YXIgZm9ybWRhdGEgPSAkKFwiLmxvZ2luLWZvcm1cIikuc2VyaWFsaXplKCk7XG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogcm91dGVzLnBvc3RMb2dpbixcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBcIl90b2tlblwiIDogY3NyZl90b2tlbixcbiAgICAgICAgICAgICAgICAgICAgXCJkYXRhXCI6IGZvcm1kYXRhLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ3cm9uZ19wYXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5sb2dpbi1mb3JtIC5hdXRoLWVycm9yXCIpLnNsaWRlRG93bigyMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN1Y2Nlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJChcIi5kb19sb2dpbi1mb3JtXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAkKFwiLmxvZ2luLWZvcm1cIikuc3VibWl0KCk7XG4gICAgfSk7XG5cbiAgICAkKFwiLmEtbG9nb3V0XCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgY3NyZl90b2tlbiA9ICQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50Jyk7XG4gICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogcm91dGVzLnBvc3RMb2dvdXQsXG4gICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgXCJfdG9rZW5cIiA6IGNzcmZfdG9rZW4sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInN1Y2Nlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVybl9ocmVmID0gaHJlZi5zcGxpdCgnIycpWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSByZXR1cm5faHJlZjtcbiAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbn0pO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHBvcG92ZXIuanMgdjMuNC4xXG4gKiBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy8zLjQvamF2YXNjcmlwdC8jcG9wb3ZlcnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBQT1BPVkVSIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgUG9wb3ZlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5pbml0KCdwb3BvdmVyJywgZWxlbWVudCwgb3B0aW9ucylcbiAgfVxuXG4gIGlmICghJC5mbi50b29sdGlwKSB0aHJvdyBuZXcgRXJyb3IoJ1BvcG92ZXIgcmVxdWlyZXMgdG9vbHRpcC5qcycpXG5cbiAgUG9wb3Zlci5WRVJTSU9OICA9ICczLjQuMSdcblxuICBQb3BvdmVyLkRFRkFVTFRTID0gJC5leHRlbmQoe30sICQuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5ERUZBVUxUUywge1xuICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICB0cmlnZ2VyOiAnY2xpY2snLFxuICAgIGNvbnRlbnQ6ICcnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItdGl0bGVcIj48L2gzPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWNvbnRlbnRcIj48L2Rpdj48L2Rpdj4nXG4gIH0pXG5cblxuICAvLyBOT1RFOiBQT1BPVkVSIEVYVEVORFMgdG9vbHRpcC5qc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFBvcG92ZXIucHJvdG90eXBlID0gJC5leHRlbmQoe30sICQuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5wcm90b3R5cGUpXG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb3BvdmVyXG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFBvcG92ZXIuREVGQVVMVFNcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aXAgICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHRpdGxlICAgPSB0aGlzLmdldFRpdGxlKClcbiAgICB2YXIgY29udGVudCA9IHRoaXMuZ2V0Q29udGVudCgpXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmh0bWwpIHtcbiAgICAgIHZhciB0eXBlQ29udGVudCA9IHR5cGVvZiBjb250ZW50XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2FuaXRpemUpIHtcbiAgICAgICAgdGl0bGUgPSB0aGlzLnNhbml0aXplSHRtbCh0aXRsZSlcblxuICAgICAgICBpZiAodHlwZUNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29udGVudCA9IHRoaXMuc2FuaXRpemVIdG1sKGNvbnRlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpLmh0bWwodGl0bGUpXG4gICAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpW1xuICAgICAgICB0eXBlQ29udGVudCA9PT0gJ3N0cmluZycgPyAnaHRtbCcgOiAnYXBwZW5kJ1xuICAgICAgXShjb250ZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykudGV4dCh0aXRsZSlcbiAgICAgICR0aXAuZmluZCgnLnBvcG92ZXItY29udGVudCcpLmNoaWxkcmVuKCkuZGV0YWNoKCkuZW5kKCkudGV4dChjb250ZW50KVxuICAgIH1cblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJylcblxuICAgIC8vIElFOCBkb2Vzbid0IGFjY2VwdCBoaWRpbmcgdmlhIHRoZSBgOmVtcHR5YCBwc2V1ZG8gc2VsZWN0b3IsIHdlIGhhdmUgdG8gZG9cbiAgICAvLyB0aGlzIG1hbnVhbGx5IGJ5IGNoZWNraW5nIHRoZSBjb250ZW50cy5cbiAgICBpZiAoISR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5odG1sKCkpICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5oaWRlKClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLmdldENvbnRlbnQoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICByZXR1cm4gJGUuYXR0cignZGF0YS1jb250ZW50JylcbiAgICAgIHx8ICh0eXBlb2Ygby5jb250ZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICBvLmNvbnRlbnQuY2FsbCgkZVswXSkgOlxuICAgICAgICBvLmNvbnRlbnQpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcuYXJyb3cnKSlcbiAgfVxuXG5cbiAgLy8gUE9QT1ZFUiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLnBvcG92ZXInKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChvcHRpb24pKSByZXR1cm5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicsIChkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnBvcG92ZXJcblxuICAkLmZuLnBvcG92ZXIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5wb3BvdmVyLkNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG5cbiAgLy8gUE9QT1ZFUiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5wb3BvdmVyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5wb3BvdmVyID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG59KGpRdWVyeSk7XG4iLCIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGRyb3Bkb3duLmpzIHYzLjQuMVxuICogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvMy40L2phdmFzY3JpcHQvI2Ryb3Bkb3duc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIERST1BET1dOIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBiYWNrZHJvcCA9ICcuZHJvcGRvd24tYmFja2Ryb3AnXG4gIHZhciB0b2dnbGUgICA9ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSdcbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLm9uKCdjbGljay5icy5kcm9wZG93bicsIHRoaXMudG9nZ2xlKVxuICB9XG5cbiAgRHJvcGRvd24uVkVSU0lPTiA9ICczLjQuMSdcblxuICBmdW5jdGlvbiBnZXRQYXJlbnQoJHRoaXMpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiAvI1tBLVphLXpdLy50ZXN0KHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gc2VsZWN0b3IgIT09ICcjJyA/ICQoZG9jdW1lbnQpLmZpbmQoc2VsZWN0b3IpIDogbnVsbFxuXG4gICAgcmV0dXJuICRwYXJlbnQgJiYgJHBhcmVudC5sZW5ndGggPyAkcGFyZW50IDogJHRoaXMucGFyZW50KClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyTWVudXMoZSkge1xuICAgIGlmIChlICYmIGUud2hpY2ggPT09IDMpIHJldHVyblxuICAgICQoYmFja2Ryb3ApLnJlbW92ZSgpXG4gICAgJCh0b2dnbGUpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgICAgICAgPSAkKHRoaXMpXG4gICAgICB2YXIgJHBhcmVudCAgICAgICA9IGdldFBhcmVudCgkdGhpcylcbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cblxuICAgICAgaWYgKCEkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJykpIHJldHVyblxuXG4gICAgICBpZiAoZSAmJiBlLnR5cGUgPT0gJ2NsaWNrJyAmJiAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpICYmICQuY29udGFpbnMoJHBhcmVudFswXSwgZS50YXJnZXQpKSByZXR1cm5cblxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdoaWRlLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuJykudHJpZ2dlcigkLkV2ZW50KCdoaWRkZW4uYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcbiAgICB9KVxuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cblxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcblxuICAgIGNsZWFyTWVudXMoKVxuXG4gICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhJHBhcmVudC5jbG9zZXN0KCcubmF2YmFyLW5hdicpLmxlbmd0aCkge1xuICAgICAgICAvLyBpZiBtb2JpbGUgd2UgdXNlIGEgYmFja2Ryb3AgYmVjYXVzZSBjbGljayBldmVudHMgZG9uJ3QgZGVsZWdhdGVcbiAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJhY2tkcm9wJylcbiAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoJCh0aGlzKSlcbiAgICAgICAgICAub24oJ2NsaWNrJywgY2xlYXJNZW51cylcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdzaG93LmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXNcbiAgICAgICAgLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXG5cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLnRvZ2dsZUNsYXNzKCdvcGVuJylcbiAgICAgICAgLnRyaWdnZXIoJC5FdmVudCgnc2hvd24uYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIS8oMzh8NDB8Mjd8MzIpLy50ZXN0KGUud2hpY2gpIHx8IC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVyblxuXG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cblxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcblxuICAgIGlmICghaXNBY3RpdmUgJiYgZS53aGljaCAhPSAyNyB8fCBpc0FjdGl2ZSAmJiBlLndoaWNoID09IDI3KSB7XG4gICAgICBpZiAoZS53aGljaCA9PSAyNykgJHBhcmVudC5maW5kKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgcmV0dXJuICR0aGlzLnRyaWdnZXIoJ2NsaWNrJylcbiAgICB9XG5cbiAgICB2YXIgZGVzYyA9ICcgbGk6bm90KC5kaXNhYmxlZCk6dmlzaWJsZSBhJ1xuICAgIHZhciAkaXRlbXMgPSAkcGFyZW50LmZpbmQoJy5kcm9wZG93bi1tZW51JyArIGRlc2MpXG5cbiAgICBpZiAoISRpdGVtcy5sZW5ndGgpIHJldHVyblxuXG4gICAgdmFyIGluZGV4ID0gJGl0ZW1zLmluZGV4KGUudGFyZ2V0KVxuXG4gICAgaWYgKGUud2hpY2ggPT0gMzggJiYgaW5kZXggPiAwKSAgICAgICAgICAgICAgICAgaW5kZXgtLSAgICAgICAgIC8vIHVwXG4gICAgaWYgKGUud2hpY2ggPT0gNDAgJiYgaW5kZXggPCAkaXRlbXMubGVuZ3RoIC0gMSkgaW5kZXgrKyAgICAgICAgIC8vIGRvd25cbiAgICBpZiAoIX5pbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDBcblxuICAgICRpdGVtcy5lcShpbmRleCkudHJpZ2dlcignZm9jdXMnKVxuICB9XG5cblxuICAvLyBEUk9QRE9XTiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicsIChkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uZHJvcGRvd25cblxuICAkLmZuLmRyb3Bkb3duICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uZHJvcGRvd24uQ29uc3RydWN0b3IgPSBEcm9wZG93blxuXG5cbiAgLy8gRFJPUERPV04gTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmRyb3Bkb3duLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5kcm9wZG93biA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFQUExZIFRPIFNUQU5EQVJEIERST1BET1dOIEVMRU1FTlRTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgY2xlYXJNZW51cylcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93biBmb3JtJywgZnVuY3Rpb24gKGUpIHsgZS5zdG9wUHJvcGFnYXRpb24oKSB9KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUsIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUpXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duLW1lbnUnLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFtdLmZvckVhY2ggIT0gZm9yRWFjaCB9LCB7XG4gIGZvckVhY2g6IGZvckVhY2hcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIG1hdGNoZXIgPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBtYXRjaGVyICE9PSB1bmRlZmluZWQgPyBtYXRjaGVyLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG5cbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gIVN0cmluZyhTeW1ib2woKSk7XG59KTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSwgcmVhc29uKSB7XG4gIHZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IHJlYXNvbi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTtcbiAgdmFyIFJFUExBQ0VfS0VFUFNfJDAgPSByZWFzb24uUkVQTEFDRV9LRUVQU18kMDtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgcmVwbGFjZXIgPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiByZXBsYWNlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gcmVwbGFjZXIuY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6IG5hdGl2ZVJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKCFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSAmJiBSRVBMQUNFX0tFRVBTXyQwKSB8fFxuICAgICAgICAodHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ3N0cmluZycgJiYgcmVwbGFjZVZhbHVlLmluZGV4T2YoVU5TQUZFX1NVQlNUSVRVVEUpID09PSAtMSlcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcblxuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuXG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuIG5hdGl2ZVJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuNi41JyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiIWZ1bmN0aW9uKGkpe1widXNlIHN0cmljdFwiO1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wianF1ZXJ5XCJdLGkpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWkocmVxdWlyZShcImpxdWVyeVwiKSk6aShqUXVlcnkpfShmdW5jdGlvbihpKXtcInVzZSBzdHJpY3RcIjt2YXIgZT13aW5kb3cuU2xpY2t8fHt9OyhlPWZ1bmN0aW9uKCl7dmFyIGU9MDtyZXR1cm4gZnVuY3Rpb24odCxvKXt2YXIgcyxuPXRoaXM7bi5kZWZhdWx0cz17YWNjZXNzaWJpbGl0eTohMCxhZGFwdGl2ZUhlaWdodDohMSxhcHBlbmRBcnJvd3M6aSh0KSxhcHBlbmREb3RzOmkodCksYXJyb3dzOiEwLGFzTmF2Rm9yOm51bGwscHJldkFycm93Oic8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsbmV4dEFycm93Oic8YnV0dG9uIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdHlwZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLGF1dG9wbGF5OiExLGF1dG9wbGF5U3BlZWQ6M2UzLGNlbnRlck1vZGU6ITEsY2VudGVyUGFkZGluZzpcIjUwcHhcIixjc3NFYXNlOlwiZWFzZVwiLGN1c3RvbVBhZ2luZzpmdW5jdGlvbihlLHQpe3JldHVybiBpKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAvPicpLnRleHQodCsxKX0sZG90czohMSxkb3RzQ2xhc3M6XCJzbGljay1kb3RzXCIsZHJhZ2dhYmxlOiEwLGVhc2luZzpcImxpbmVhclwiLGVkZ2VGcmljdGlvbjouMzUsZmFkZTohMSxmb2N1c09uU2VsZWN0OiExLGZvY3VzT25DaGFuZ2U6ITEsaW5maW5pdGU6ITAsaW5pdGlhbFNsaWRlOjAsbGF6eUxvYWQ6XCJvbmRlbWFuZFwiLG1vYmlsZUZpcnN0OiExLHBhdXNlT25Ib3ZlcjohMCxwYXVzZU9uRm9jdXM6ITAscGF1c2VPbkRvdHNIb3ZlcjohMSxyZXNwb25kVG86XCJ3aW5kb3dcIixyZXNwb25zaXZlOm51bGwscm93czoxLHJ0bDohMSxzbGlkZTpcIlwiLHNsaWRlc1BlclJvdzoxLHNsaWRlc1RvU2hvdzoxLHNsaWRlc1RvU2Nyb2xsOjEsc3BlZWQ6NTAwLHN3aXBlOiEwLHN3aXBlVG9TbGlkZTohMSx0b3VjaE1vdmU6ITAsdG91Y2hUaHJlc2hvbGQ6NSx1c2VDU1M6ITAsdXNlVHJhbnNmb3JtOiEwLHZhcmlhYmxlV2lkdGg6ITEsdmVydGljYWw6ITEsdmVydGljYWxTd2lwaW5nOiExLHdhaXRGb3JBbmltYXRlOiEwLHpJbmRleDoxZTN9LG4uaW5pdGlhbHM9e2FuaW1hdGluZzohMSxkcmFnZ2luZzohMSxhdXRvUGxheVRpbWVyOm51bGwsY3VycmVudERpcmVjdGlvbjowLGN1cnJlbnRMZWZ0Om51bGwsY3VycmVudFNsaWRlOjAsZGlyZWN0aW9uOjEsJGRvdHM6bnVsbCxsaXN0V2lkdGg6bnVsbCxsaXN0SGVpZ2h0Om51bGwsbG9hZEluZGV4OjAsJG5leHRBcnJvdzpudWxsLCRwcmV2QXJyb3c6bnVsbCxzY3JvbGxpbmc6ITEsc2xpZGVDb3VudDpudWxsLHNsaWRlV2lkdGg6bnVsbCwkc2xpZGVUcmFjazpudWxsLCRzbGlkZXM6bnVsbCxzbGlkaW5nOiExLHNsaWRlT2Zmc2V0OjAsc3dpcGVMZWZ0Om51bGwsc3dpcGluZzohMSwkbGlzdDpudWxsLHRvdWNoT2JqZWN0Ont9LHRyYW5zZm9ybXNFbmFibGVkOiExLHVuc2xpY2tlZDohMX0saS5leHRlbmQobixuLmluaXRpYWxzKSxuLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxuLmFuaW1UeXBlPW51bGwsbi5hbmltUHJvcD1udWxsLG4uYnJlYWtwb2ludHM9W10sbi5icmVha3BvaW50U2V0dGluZ3M9W10sbi5jc3NUcmFuc2l0aW9ucz0hMSxuLmZvY3Vzc2VkPSExLG4uaW50ZXJydXB0ZWQ9ITEsbi5oaWRkZW49XCJoaWRkZW5cIixuLnBhdXNlZD0hMCxuLnBvc2l0aW9uUHJvcD1udWxsLG4ucmVzcG9uZFRvPW51bGwsbi5yb3dDb3VudD0xLG4uc2hvdWxkQ2xpY2s9ITAsbi4kc2xpZGVyPWkodCksbi4kc2xpZGVzQ2FjaGU9bnVsbCxuLnRyYW5zZm9ybVR5cGU9bnVsbCxuLnRyYW5zaXRpb25UeXBlPW51bGwsbi52aXNpYmlsaXR5Q2hhbmdlPVwidmlzaWJpbGl0eWNoYW5nZVwiLG4ud2luZG93V2lkdGg9MCxuLndpbmRvd1RpbWVyPW51bGwscz1pKHQpLmRhdGEoXCJzbGlja1wiKXx8e30sbi5vcHRpb25zPWkuZXh0ZW5kKHt9LG4uZGVmYXVsdHMsbyxzKSxuLmN1cnJlbnRTbGlkZT1uLm9wdGlvbnMuaW5pdGlhbFNsaWRlLG4ub3JpZ2luYWxTZXR0aW5ncz1uLm9wdGlvbnMsdm9pZCAwIT09ZG9jdW1lbnQubW96SGlkZGVuPyhuLmhpZGRlbj1cIm1vekhpZGRlblwiLG4udmlzaWJpbGl0eUNoYW5nZT1cIm1venZpc2liaWxpdHljaGFuZ2VcIik6dm9pZCAwIT09ZG9jdW1lbnQud2Via2l0SGlkZGVuJiYobi5oaWRkZW49XCJ3ZWJraXRIaWRkZW5cIixuLnZpc2liaWxpdHlDaGFuZ2U9XCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCIpLG4uYXV0b1BsYXk9aS5wcm94eShuLmF1dG9QbGF5LG4pLG4uYXV0b1BsYXlDbGVhcj1pLnByb3h5KG4uYXV0b1BsYXlDbGVhcixuKSxuLmF1dG9QbGF5SXRlcmF0b3I9aS5wcm94eShuLmF1dG9QbGF5SXRlcmF0b3Isbiksbi5jaGFuZ2VTbGlkZT1pLnByb3h5KG4uY2hhbmdlU2xpZGUsbiksbi5jbGlja0hhbmRsZXI9aS5wcm94eShuLmNsaWNrSGFuZGxlcixuKSxuLnNlbGVjdEhhbmRsZXI9aS5wcm94eShuLnNlbGVjdEhhbmRsZXIsbiksbi5zZXRQb3NpdGlvbj1pLnByb3h5KG4uc2V0UG9zaXRpb24sbiksbi5zd2lwZUhhbmRsZXI9aS5wcm94eShuLnN3aXBlSGFuZGxlcixuKSxuLmRyYWdIYW5kbGVyPWkucHJveHkobi5kcmFnSGFuZGxlcixuKSxuLmtleUhhbmRsZXI9aS5wcm94eShuLmtleUhhbmRsZXIsbiksbi5pbnN0YW5jZVVpZD1lKyssbi5odG1sRXhwcj0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC8sbi5yZWdpc3RlckJyZWFrcG9pbnRzKCksbi5pbml0KCEwKX19KCkpLnByb3RvdHlwZS5hY3RpdmF0ZUFEQT1mdW5jdGlvbigpe3RoaXMuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1hY3RpdmVcIikuYXR0cih7XCJhcmlhLWhpZGRlblwiOlwiZmFsc2VcIn0pLmZpbmQoXCJhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3RcIikuYXR0cih7dGFiaW5kZXg6XCIwXCJ9KX0sZS5wcm90b3R5cGUuYWRkU2xpZGU9ZS5wcm90b3R5cGUuc2xpY2tBZGQ9ZnVuY3Rpb24oZSx0LG8pe3ZhciBzPXRoaXM7aWYoXCJib29sZWFuXCI9PXR5cGVvZiB0KW89dCx0PW51bGw7ZWxzZSBpZih0PDB8fHQ+PXMuc2xpZGVDb3VudClyZXR1cm4hMTtzLnVubG9hZCgpLFwibnVtYmVyXCI9PXR5cGVvZiB0PzA9PT10JiYwPT09cy4kc2xpZGVzLmxlbmd0aD9pKGUpLmFwcGVuZFRvKHMuJHNsaWRlVHJhY2spOm8/aShlKS5pbnNlcnRCZWZvcmUocy4kc2xpZGVzLmVxKHQpKTppKGUpLmluc2VydEFmdGVyKHMuJHNsaWRlcy5lcSh0KSk6ITA9PT1vP2koZSkucHJlcGVuZFRvKHMuJHNsaWRlVHJhY2spOmkoZSkuYXBwZW5kVG8ocy4kc2xpZGVUcmFjaykscy4kc2xpZGVzPXMuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKSxzLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCkscy4kc2xpZGVUcmFjay5hcHBlbmQocy4kc2xpZGVzKSxzLiRzbGlkZXMuZWFjaChmdW5jdGlvbihlLHQpe2kodCkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixlKX0pLHMuJHNsaWRlc0NhY2hlPXMuJHNsaWRlcyxzLnJlaW5pdCgpfSxlLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpZigxPT09aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmITA9PT1pLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQmJiExPT09aS5vcHRpb25zLnZlcnRpY2FsKXt2YXIgZT1pLiRzbGlkZXMuZXEoaS5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KCEwKTtpLiRsaXN0LmFuaW1hdGUoe2hlaWdodDplfSxpLm9wdGlvbnMuc3BlZWQpfX0sZS5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlPWZ1bmN0aW9uKGUsdCl7dmFyIG89e30scz10aGlzO3MuYW5pbWF0ZUhlaWdodCgpLCEwPT09cy5vcHRpb25zLnJ0bCYmITE9PT1zLm9wdGlvbnMudmVydGljYWwmJihlPS1lKSwhMT09PXMudHJhbnNmb3Jtc0VuYWJsZWQ/ITE9PT1zLm9wdGlvbnMudmVydGljYWw/cy4kc2xpZGVUcmFjay5hbmltYXRlKHtsZWZ0OmV9LHMub3B0aW9ucy5zcGVlZCxzLm9wdGlvbnMuZWFzaW5nLHQpOnMuJHNsaWRlVHJhY2suYW5pbWF0ZSh7dG9wOmV9LHMub3B0aW9ucy5zcGVlZCxzLm9wdGlvbnMuZWFzaW5nLHQpOiExPT09cy5jc3NUcmFuc2l0aW9ucz8oITA9PT1zLm9wdGlvbnMucnRsJiYocy5jdXJyZW50TGVmdD0tcy5jdXJyZW50TGVmdCksaSh7YW5pbVN0YXJ0OnMuY3VycmVudExlZnR9KS5hbmltYXRlKHthbmltU3RhcnQ6ZX0se2R1cmF0aW9uOnMub3B0aW9ucy5zcGVlZCxlYXNpbmc6cy5vcHRpb25zLmVhc2luZyxzdGVwOmZ1bmN0aW9uKGkpe2k9TWF0aC5jZWlsKGkpLCExPT09cy5vcHRpb25zLnZlcnRpY2FsPyhvW3MuYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2krXCJweCwgMHB4KVwiLHMuJHNsaWRlVHJhY2suY3NzKG8pKToob1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZSgwcHgsXCIraStcInB4KVwiLHMuJHNsaWRlVHJhY2suY3NzKG8pKX0sY29tcGxldGU6ZnVuY3Rpb24oKXt0JiZ0LmNhbGwoKX19KSk6KHMuYXBwbHlUcmFuc2l0aW9uKCksZT1NYXRoLmNlaWwoZSksITE9PT1zLm9wdGlvbnMudmVydGljYWw/b1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKFwiK2UrXCJweCwgMHB4LCAwcHgpXCI6b1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKDBweCxcIitlK1wicHgsIDBweClcIixzLiRzbGlkZVRyYWNrLmNzcyhvKSx0JiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cy5kaXNhYmxlVHJhbnNpdGlvbigpLHQuY2FsbCgpfSxzLm9wdGlvbnMuc3BlZWQpKX0sZS5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUub3B0aW9ucy5hc05hdkZvcjtyZXR1cm4gdCYmbnVsbCE9PXQmJih0PWkodCkubm90KGUuJHNsaWRlcikpLHR9LGUucHJvdG90eXBlLmFzTmF2Rm9yPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0TmF2VGFyZ2V0KCk7bnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0LmVhY2goZnVuY3Rpb24oKXt2YXIgdD1pKHRoaXMpLnNsaWNrKFwiZ2V0U2xpY2tcIik7dC51bnNsaWNrZWR8fHQuc2xpZGVIYW5kbGVyKGUsITApfSl9LGUucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbj1mdW5jdGlvbihpKXt2YXIgZT10aGlzLHQ9e307ITE9PT1lLm9wdGlvbnMuZmFkZT90W2UudHJhbnNpdGlvblR5cGVdPWUudHJhbnNmb3JtVHlwZStcIiBcIitlLm9wdGlvbnMuc3BlZWQrXCJtcyBcIitlLm9wdGlvbnMuY3NzRWFzZTp0W2UudHJhbnNpdGlvblR5cGVdPVwib3BhY2l0eSBcIitlLm9wdGlvbnMuc3BlZWQrXCJtcyBcIitlLm9wdGlvbnMuY3NzRWFzZSwhMT09PWUub3B0aW9ucy5mYWRlP2UuJHNsaWRlVHJhY2suY3NzKHQpOmUuJHNsaWRlcy5lcShpKS5jc3ModCl9LGUucHJvdG90eXBlLmF1dG9QbGF5PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmF1dG9QbGF5Q2xlYXIoKSxpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuYXV0b1BsYXlUaW1lcj1zZXRJbnRlcnZhbChpLmF1dG9QbGF5SXRlcmF0b3IsaS5vcHRpb25zLmF1dG9wbGF5U3BlZWQpKX0sZS5wcm90b3R5cGUuYXV0b1BsYXlDbGVhcj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheVRpbWVyJiZjbGVhckludGVydmFsKGkuYXV0b1BsYXlUaW1lcil9LGUucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3I9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9aS5jdXJyZW50U2xpZGUraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO2kucGF1c2VkfHxpLmludGVycnVwdGVkfHxpLmZvY3Vzc2VkfHwoITE9PT1pLm9wdGlvbnMuaW5maW5pdGUmJigxPT09aS5kaXJlY3Rpb24mJmkuY3VycmVudFNsaWRlKzE9PT1pLnNsaWRlQ291bnQtMT9pLmRpcmVjdGlvbj0wOjA9PT1pLmRpcmVjdGlvbiYmKGU9aS5jdXJyZW50U2xpZGUtaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLGkuY3VycmVudFNsaWRlLTE9PTAmJihpLmRpcmVjdGlvbj0xKSkpLGkuc2xpZGVIYW5kbGVyKGUpKX0sZS5wcm90b3R5cGUuYnVpbGRBcnJvd3M9ZnVuY3Rpb24oKXt2YXIgZT10aGlzOyEwPT09ZS5vcHRpb25zLmFycm93cyYmKGUuJHByZXZBcnJvdz1pKGUub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKFwic2xpY2stYXJyb3dcIiksZS4kbmV4dEFycm93PWkoZS5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1hcnJvd1wiKSxlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdz8oZS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiB0YWJpbmRleFwiKSxlLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIHRhYmluZGV4XCIpLGUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMucHJldkFycm93KSYmZS4kcHJldkFycm93LnByZXBlbmRUbyhlLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSxlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLm5leHRBcnJvdykmJmUuJG5leHRBcnJvdy5hcHBlbmRUbyhlLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSwhMCE9PWUub3B0aW9ucy5pbmZpbml0ZSYmZS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIikpOmUuJHByZXZBcnJvdy5hZGQoZS4kbmV4dEFycm93KS5hZGRDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5hdHRyKHtcImFyaWEtZGlzYWJsZWRcIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KSl9LGUucHJvdG90eXBlLmJ1aWxkRG90cz1mdW5jdGlvbigpe3ZhciBlLHQsbz10aGlzO2lmKCEwPT09by5vcHRpb25zLmRvdHMpe2ZvcihvLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1kb3R0ZWRcIiksdD1pKFwiPHVsIC8+XCIpLmFkZENsYXNzKG8ub3B0aW9ucy5kb3RzQ2xhc3MpLGU9MDtlPD1vLmdldERvdENvdW50KCk7ZSs9MSl0LmFwcGVuZChpKFwiPGxpIC8+XCIpLmFwcGVuZChvLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcyxvLGUpKSk7by4kZG90cz10LmFwcGVuZFRvKG8ub3B0aW9ucy5hcHBlbmREb3RzKSxvLiRkb3RzLmZpbmQoXCJsaVwiKS5maXJzdCgpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpfX0sZS5wcm90b3R5cGUuYnVpbGRPdXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlcz1lLiRzbGlkZXIuY2hpbGRyZW4oZS5vcHRpb25zLnNsaWRlK1wiOm5vdCguc2xpY2stY2xvbmVkKVwiKS5hZGRDbGFzcyhcInNsaWNrLXNsaWRlXCIpLGUuc2xpZGVDb3VudD1lLiRzbGlkZXMubGVuZ3RoLGUuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGUsdCl7aSh0KS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLGUpLmRhdGEoXCJvcmlnaW5hbFN0eWxpbmdcIixpKHQpLmF0dHIoXCJzdHlsZVwiKXx8XCJcIil9KSxlLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1zbGlkZXJcIiksZS4kc2xpZGVUcmFjaz0wPT09ZS5zbGlkZUNvdW50P2koJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhlLiRzbGlkZXIpOmUuJHNsaWRlcy53cmFwQWxsKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykucGFyZW50KCksZS4kbGlzdD1lLiRzbGlkZVRyYWNrLndyYXAoJzxkaXYgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpLGUuJHNsaWRlVHJhY2suY3NzKFwib3BhY2l0eVwiLDApLCEwIT09ZS5vcHRpb25zLmNlbnRlck1vZGUmJiEwIT09ZS5vcHRpb25zLnN3aXBlVG9TbGlkZXx8KGUub3B0aW9ucy5zbGlkZXNUb1Njcm9sbD0xKSxpKFwiaW1nW2RhdGEtbGF6eV1cIixlLiRzbGlkZXIpLm5vdChcIltzcmNdXCIpLmFkZENsYXNzKFwic2xpY2stbG9hZGluZ1wiKSxlLnNldHVwSW5maW5pdGUoKSxlLmJ1aWxkQXJyb3dzKCksZS5idWlsZERvdHMoKSxlLnVwZGF0ZURvdHMoKSxlLnNldFNsaWRlQ2xhc3NlcyhcIm51bWJlclwiPT10eXBlb2YgZS5jdXJyZW50U2xpZGU/ZS5jdXJyZW50U2xpZGU6MCksITA9PT1lLm9wdGlvbnMuZHJhZ2dhYmxlJiZlLiRsaXN0LmFkZENsYXNzKFwiZHJhZ2dhYmxlXCIpfSxlLnByb3RvdHlwZS5idWlsZFJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlLHQsbyxzLG4scixsPXRoaXM7aWYobz1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksbj1sLiRzbGlkZXIuY2hpbGRyZW4oKSxsLm9wdGlvbnMucm93cz4xKXtmb3Iocj1sLm9wdGlvbnMuc2xpZGVzUGVyUm93Kmwub3B0aW9ucy5yb3dzLHM9TWF0aC5jZWlsKG4ubGVuZ3RoL3IpLGk9MDtpPHM7aSsrKXt2YXIgZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2ZvcihlPTA7ZTxsLm9wdGlvbnMucm93cztlKyspe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKHQ9MDt0PGwub3B0aW9ucy5zbGlkZXNQZXJSb3c7dCsrKXt2YXIgYz1pKnIrKGUqbC5vcHRpb25zLnNsaWRlc1BlclJvdyt0KTtuLmdldChjKSYmYS5hcHBlbmRDaGlsZChuLmdldChjKSl9ZC5hcHBlbmRDaGlsZChhKX1vLmFwcGVuZENoaWxkKGQpfWwuJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvKSxsLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY3NzKHt3aWR0aDoxMDAvbC5vcHRpb25zLnNsaWRlc1BlclJvdytcIiVcIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9KX19LGUucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZT1mdW5jdGlvbihlLHQpe3ZhciBvLHMsbixyPXRoaXMsbD0hMSxkPXIuJHNsaWRlci53aWR0aCgpLGE9d2luZG93LmlubmVyV2lkdGh8fGkod2luZG93KS53aWR0aCgpO2lmKFwid2luZG93XCI9PT1yLnJlc3BvbmRUbz9uPWE6XCJzbGlkZXJcIj09PXIucmVzcG9uZFRvP249ZDpcIm1pblwiPT09ci5yZXNwb25kVG8mJihuPU1hdGgubWluKGEsZCkpLHIub3B0aW9ucy5yZXNwb25zaXZlJiZyLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgmJm51bGwhPT1yLm9wdGlvbnMucmVzcG9uc2l2ZSl7cz1udWxsO2ZvcihvIGluIHIuYnJlYWtwb2ludHMpci5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShvKSYmKCExPT09ci5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0P248ci5icmVha3BvaW50c1tvXSYmKHM9ci5icmVha3BvaW50c1tvXSk6bj5yLmJyZWFrcG9pbnRzW29dJiYocz1yLmJyZWFrcG9pbnRzW29dKSk7bnVsbCE9PXM/bnVsbCE9PXIuYWN0aXZlQnJlYWtwb2ludD8ocyE9PXIuYWN0aXZlQnJlYWtwb2ludHx8dCkmJihyLmFjdGl2ZUJyZWFrcG9pbnQ9cyxcInVuc2xpY2tcIj09PXIuYnJlYWtwb2ludFNldHRpbmdzW3NdP3IudW5zbGljayhzKTooci5vcHRpb25zPWkuZXh0ZW5kKHt9LHIub3JpZ2luYWxTZXR0aW5ncyxyLmJyZWFrcG9pbnRTZXR0aW5nc1tzXSksITA9PT1lJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKGUpKSxsPXMpOihyLmFjdGl2ZUJyZWFrcG9pbnQ9cyxcInVuc2xpY2tcIj09PXIuYnJlYWtwb2ludFNldHRpbmdzW3NdP3IudW5zbGljayhzKTooci5vcHRpb25zPWkuZXh0ZW5kKHt9LHIub3JpZ2luYWxTZXR0aW5ncyxyLmJyZWFrcG9pbnRTZXR0aW5nc1tzXSksITA9PT1lJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKGUpKSxsPXMpOm51bGwhPT1yLmFjdGl2ZUJyZWFrcG9pbnQmJihyLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxyLm9wdGlvbnM9ci5vcmlnaW5hbFNldHRpbmdzLCEwPT09ZSYmKHIuY3VycmVudFNsaWRlPXIub3B0aW9ucy5pbml0aWFsU2xpZGUpLHIucmVmcmVzaChlKSxsPXMpLGV8fCExPT09bHx8ci4kc2xpZGVyLnRyaWdnZXIoXCJicmVha3BvaW50XCIsW3IsbF0pfX0sZS5wcm90b3R5cGUuY2hhbmdlU2xpZGU9ZnVuY3Rpb24oZSx0KXt2YXIgbyxzLG4scj10aGlzLGw9aShlLmN1cnJlbnRUYXJnZXQpO3N3aXRjaChsLmlzKFwiYVwiKSYmZS5wcmV2ZW50RGVmYXVsdCgpLGwuaXMoXCJsaVwiKXx8KGw9bC5jbG9zZXN0KFwibGlcIikpLG49ci5zbGlkZUNvdW50JXIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9MCxvPW4/MDooci5zbGlkZUNvdW50LXIuY3VycmVudFNsaWRlKSVyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsZS5kYXRhLm1lc3NhZ2Upe2Nhc2VcInByZXZpb3VzXCI6cz0wPT09bz9yLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6ci5vcHRpb25zLnNsaWRlc1RvU2hvdy1vLHIuc2xpZGVDb3VudD5yLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZyLnNsaWRlSGFuZGxlcihyLmN1cnJlbnRTbGlkZS1zLCExLHQpO2JyZWFrO2Nhc2VcIm5leHRcIjpzPTA9PT1vP3Iub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDpvLHIuc2xpZGVDb3VudD5yLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZyLnNsaWRlSGFuZGxlcihyLmN1cnJlbnRTbGlkZStzLCExLHQpO2JyZWFrO2Nhc2VcImluZGV4XCI6dmFyIGQ9MD09PWUuZGF0YS5pbmRleD8wOmUuZGF0YS5pbmRleHx8bC5pbmRleCgpKnIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtyLnNsaWRlSGFuZGxlcihyLmNoZWNrTmF2aWdhYmxlKGQpLCExLHQpLGwuY2hpbGRyZW4oKS50cmlnZ2VyKFwiZm9jdXNcIik7YnJlYWs7ZGVmYXVsdDpyZXR1cm59fSxlLnByb3RvdHlwZS5jaGVja05hdmlnYWJsZT1mdW5jdGlvbihpKXt2YXIgZSx0O2lmKGU9dGhpcy5nZXROYXZpZ2FibGVJbmRleGVzKCksdD0wLGk+ZVtlLmxlbmd0aC0xXSlpPWVbZS5sZW5ndGgtMV07ZWxzZSBmb3IodmFyIG8gaW4gZSl7aWYoaTxlW29dKXtpPXQ7YnJlYWt9dD1lW29dfXJldHVybiBpfSxlLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLm9wdGlvbnMuZG90cyYmbnVsbCE9PWUuJGRvdHMmJihpKFwibGlcIixlLiRkb3RzKS5vZmYoXCJjbGljay5zbGlja1wiLGUuY2hhbmdlU2xpZGUpLm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKS5vZmYoXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSksITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmZS4kZG90cy5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSksZS4kc2xpZGVyLm9mZihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIiksITA9PT1lLm9wdGlvbnMuYXJyb3dzJiZlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuJHByZXZBcnJvdyYmZS4kcHJldkFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIsZS5jaGFuZ2VTbGlkZSksZS4kbmV4dEFycm93JiZlLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNoYW5nZVNsaWRlKSwhMD09PWUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYoZS4kcHJldkFycm93JiZlLiRwcmV2QXJyb3cub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlciksZS4kbmV4dEFycm93JiZlLiRuZXh0QXJyb3cub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlcikpKSxlLiRsaXN0Lm9mZihcInRvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwidG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGlja1wiLGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9mZihcInRvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2tcIixlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vZmYoXCJ0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNsaWNrSGFuZGxlciksaShkb2N1bWVudCkub2ZmKGUudmlzaWJpbGl0eUNoYW5nZSxlLnZpc2liaWxpdHkpLGUuY2xlYW5VcFNsaWRlRXZlbnRzKCksITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmZS4kbGlzdC5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSwhMD09PWUub3B0aW9ucy5mb2N1c09uU2VsZWN0JiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGkod2luZG93KS5vZmYoXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGUub3JpZW50YXRpb25DaGFuZ2UpLGkod2luZG93KS5vZmYoXCJyZXNpemUuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnJlc2l6ZSksaShcIltkcmFnZ2FibGUhPXRydWVdXCIsZS4kc2xpZGVUcmFjaykub2ZmKFwiZHJhZ3N0YXJ0XCIsZS5wcmV2ZW50RGVmYXVsdCksaSh3aW5kb3cpLm9mZihcImxvYWQuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnNldFBvc2l0aW9uKX0sZS5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRsaXN0Lm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKSxlLiRsaXN0Lm9mZihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKX0sZS5wcm90b3R5cGUuY2xlYW5VcFJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXM7ZS5vcHRpb25zLnJvd3M+MSYmKChpPWUuJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCkpLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSxlLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQoaSkpfSxlLnByb3RvdHlwZS5jbGlja0hhbmRsZXI9ZnVuY3Rpb24oaSl7ITE9PT10aGlzLnNob3VsZENsaWNrJiYoaS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxpLnN0b3BQcm9wYWdhdGlvbigpLGkucHJldmVudERlZmF1bHQoKSl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LmF1dG9QbGF5Q2xlYXIoKSx0LnRvdWNoT2JqZWN0PXt9LHQuY2xlYW5VcEV2ZW50cygpLGkoXCIuc2xpY2stY2xvbmVkXCIsdC4kc2xpZGVyKS5kZXRhY2goKSx0LiRkb3RzJiZ0LiRkb3RzLnJlbW92ZSgpLHQuJHByZXZBcnJvdyYmdC4kcHJldkFycm93Lmxlbmd0aCYmKHQuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleFwiKS5jc3MoXCJkaXNwbGF5XCIsXCJcIiksdC5odG1sRXhwci50ZXN0KHQub3B0aW9ucy5wcmV2QXJyb3cpJiZ0LiRwcmV2QXJyb3cucmVtb3ZlKCkpLHQuJG5leHRBcnJvdyYmdC4kbmV4dEFycm93Lmxlbmd0aCYmKHQuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleFwiKS5jc3MoXCJkaXNwbGF5XCIsXCJcIiksdC5odG1sRXhwci50ZXN0KHQub3B0aW9ucy5uZXh0QXJyb3cpJiZ0LiRuZXh0QXJyb3cucmVtb3ZlKCkpLHQuJHNsaWRlcyYmKHQuJHNsaWRlcy5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50XCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiZGF0YS1zbGljay1pbmRleFwiKS5lYWNoKGZ1bmN0aW9uKCl7aSh0aGlzKS5hdHRyKFwic3R5bGVcIixpKHRoaXMpLmRhdGEoXCJvcmlnaW5hbFN0eWxpbmdcIikpfSksdC4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLHQuJHNsaWRlVHJhY2suZGV0YWNoKCksdC4kbGlzdC5kZXRhY2goKSx0LiRzbGlkZXIuYXBwZW5kKHQuJHNsaWRlcykpLHQuY2xlYW5VcFJvd3MoKSx0LiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZXJcIiksdC4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIiksdC4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stZG90dGVkXCIpLHQudW5zbGlja2VkPSEwLGV8fHQuJHNsaWRlci50cmlnZ2VyKFwiZGVzdHJveVwiLFt0XSl9LGUucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXMsdD17fTt0W2UudHJhbnNpdGlvblR5cGVdPVwiXCIsITE9PT1lLm9wdGlvbnMuZmFkZT9lLiRzbGlkZVRyYWNrLmNzcyh0KTplLiRzbGlkZXMuZXEoaSkuY3NzKHQpfSxlLnByb3RvdHlwZS5mYWRlU2xpZGU9ZnVuY3Rpb24oaSxlKXt2YXIgdD10aGlzOyExPT09dC5jc3NUcmFuc2l0aW9ucz8odC4kc2xpZGVzLmVxKGkpLmNzcyh7ekluZGV4OnQub3B0aW9ucy56SW5kZXh9KSx0LiRzbGlkZXMuZXEoaSkuYW5pbWF0ZSh7b3BhY2l0eToxfSx0Lm9wdGlvbnMuc3BlZWQsdC5vcHRpb25zLmVhc2luZyxlKSk6KHQuYXBwbHlUcmFuc2l0aW9uKGkpLHQuJHNsaWRlcy5lcShpKS5jc3Moe29wYWNpdHk6MSx6SW5kZXg6dC5vcHRpb25zLnpJbmRleH0pLGUmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LmRpc2FibGVUcmFuc2l0aW9uKGkpLGUuY2FsbCgpfSx0Lm9wdGlvbnMuc3BlZWQpKX0sZS5wcm90b3R5cGUuZmFkZVNsaWRlT3V0PWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7ITE9PT1lLmNzc1RyYW5zaXRpb25zP2UuJHNsaWRlcy5lcShpKS5hbmltYXRlKHtvcGFjaXR5OjAsekluZGV4OmUub3B0aW9ucy56SW5kZXgtMn0sZS5vcHRpb25zLnNwZWVkLGUub3B0aW9ucy5lYXNpbmcpOihlLmFwcGx5VHJhbnNpdGlvbihpKSxlLiRzbGlkZXMuZXEoaSkuY3NzKHtvcGFjaXR5OjAsekluZGV4OmUub3B0aW9ucy56SW5kZXgtMn0pKX0sZS5wcm90b3R5cGUuZmlsdGVyU2xpZGVzPWUucHJvdG90eXBlLnNsaWNrRmlsdGVyPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7bnVsbCE9PWkmJihlLiRzbGlkZXNDYWNoZT1lLiRzbGlkZXMsZS51bmxvYWQoKSxlLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksZS4kc2xpZGVzQ2FjaGUuZmlsdGVyKGkpLmFwcGVuZFRvKGUuJHNsaWRlVHJhY2spLGUucmVpbml0KCkpfSxlLnByb3RvdHlwZS5mb2N1c0hhbmRsZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlci5vZmYoXCJmb2N1cy5zbGljayBibHVyLnNsaWNrXCIpLm9uKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiLFwiKlwiLGZ1bmN0aW9uKHQpe3Quc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7dmFyIG89aSh0aGlzKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5vcHRpb25zLnBhdXNlT25Gb2N1cyYmKGUuZm9jdXNzZWQ9by5pcyhcIjpmb2N1c1wiKSxlLmF1dG9QbGF5KCkpfSwwKX0pfSxlLnByb3RvdHlwZS5nZXRDdXJyZW50PWUucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudFNsaWRlfSxlLnByb3RvdHlwZS5nZXREb3RDb3VudD1mdW5jdGlvbigpe3ZhciBpPXRoaXMsZT0wLHQ9MCxvPTA7aWYoITA9PT1pLm9wdGlvbnMuaW5maW5pdGUpaWYoaS5zbGlkZUNvdW50PD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93KSsrbztlbHNlIGZvcig7ZTxpLnNsaWRlQ291bnQ7KSsrbyxlPXQraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLHQrPWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdz9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6aS5vcHRpb25zLnNsaWRlc1RvU2hvdztlbHNlIGlmKCEwPT09aS5vcHRpb25zLmNlbnRlck1vZGUpbz1pLnNsaWRlQ291bnQ7ZWxzZSBpZihpLm9wdGlvbnMuYXNOYXZGb3IpZm9yKDtlPGkuc2xpZGVDb3VudDspKytvLGU9dCtpLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsdCs9aS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93P2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDppLm9wdGlvbnMuc2xpZGVzVG9TaG93O2Vsc2Ugbz0xK01hdGguY2VpbCgoaS5zbGlkZUNvdW50LWkub3B0aW9ucy5zbGlkZXNUb1Nob3cpL2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7cmV0dXJuIG8tMX0sZS5wcm90b3R5cGUuZ2V0TGVmdD1mdW5jdGlvbihpKXt2YXIgZSx0LG8scyxuPXRoaXMscj0wO3JldHVybiBuLnNsaWRlT2Zmc2V0PTAsdD1uLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCksITA9PT1uLm9wdGlvbnMuaW5maW5pdGU/KG4uc2xpZGVDb3VudD5uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYobi5zbGlkZU9mZnNldD1uLnNsaWRlV2lkdGgqbi5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSxzPS0xLCEwPT09bi5vcHRpb25zLnZlcnRpY2FsJiYhMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiYoMj09PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/cz0tMS41OjE9PT1uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYocz0tMikpLHI9dCpuLm9wdGlvbnMuc2xpZGVzVG9TaG93KnMpLG4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPTAmJmkrbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPm4uc2xpZGVDb3VudCYmbi5zbGlkZUNvdW50Pm4ub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpPm4uc2xpZGVDb3VudD8obi5zbGlkZU9mZnNldD0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy0oaS1uLnNsaWRlQ291bnQpKSpuLnNsaWRlV2lkdGgqLTEscj0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy0oaS1uLnNsaWRlQ291bnQpKSp0Ki0xKToobi5zbGlkZU9mZnNldD1uLnNsaWRlQ291bnQlbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKm4uc2xpZGVXaWR0aCotMSxyPW4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwqdCotMSkpKTppK24ub3B0aW9ucy5zbGlkZXNUb1Nob3c+bi5zbGlkZUNvdW50JiYobi5zbGlkZU9mZnNldD0oaStuLm9wdGlvbnMuc2xpZGVzVG9TaG93LW4uc2xpZGVDb3VudCkqbi5zbGlkZVdpZHRoLHI9KGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdy1uLnNsaWRlQ291bnQpKnQpLG4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKG4uc2xpZGVPZmZzZXQ9MCxyPTApLCEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJm4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdz9uLnNsaWRlT2Zmc2V0PW4uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLzItbi5zbGlkZVdpZHRoKm4uc2xpZGVDb3VudC8yOiEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJiEwPT09bi5vcHRpb25zLmluZmluaXRlP24uc2xpZGVPZmZzZXQrPW4uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiktbi5zbGlkZVdpZHRoOiEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJihuLnNsaWRlT2Zmc2V0PTAsbi5zbGlkZU9mZnNldCs9bi5zbGlkZVdpZHRoKk1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSksZT0hMT09PW4ub3B0aW9ucy52ZXJ0aWNhbD9pKm4uc2xpZGVXaWR0aCotMStuLnNsaWRlT2Zmc2V0OmkqdCotMStyLCEwPT09bi5vcHRpb25zLnZhcmlhYmxlV2lkdGgmJihvPW4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvd3x8ITE9PT1uLm9wdGlvbnMuaW5maW5pdGU/bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpKTpuLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdyksZT0hMD09PW4ub3B0aW9ucy5ydGw/b1swXT8tMSoobi4kc2xpZGVUcmFjay53aWR0aCgpLW9bMF0ub2Zmc2V0TGVmdC1vLndpZHRoKCkpOjA6b1swXT8tMSpvWzBdLm9mZnNldExlZnQ6MCwhMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiYobz1uLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3d8fCExPT09bi5vcHRpb25zLmluZmluaXRlP24uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoaSk6bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3crMSksZT0hMD09PW4ub3B0aW9ucy5ydGw/b1swXT8tMSoobi4kc2xpZGVUcmFjay53aWR0aCgpLW9bMF0ub2Zmc2V0TGVmdC1vLndpZHRoKCkpOjA6b1swXT8tMSpvWzBdLm9mZnNldExlZnQ6MCxlKz0obi4kbGlzdC53aWR0aCgpLW8ub3V0ZXJXaWR0aCgpKS8yKSksZX0sZS5wcm90b3R5cGUuZ2V0T3B0aW9uPWUucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uPWZ1bmN0aW9uKGkpe3JldHVybiB0aGlzLm9wdGlvbnNbaV19LGUucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXM9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXMsdD0wLG89MCxzPVtdO2ZvcighMT09PWUub3B0aW9ucy5pbmZpbml0ZT9pPWUuc2xpZGVDb3VudDoodD0tMSplLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsbz0tMSplLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsaT0yKmUuc2xpZGVDb3VudCk7dDxpOylzLnB1c2godCksdD1vK2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxvKz1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWUub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmUub3B0aW9ucy5zbGlkZXNUb1Nob3c7cmV0dXJuIHN9LGUucHJvdG90eXBlLmdldFNsaWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGUucHJvdG90eXBlLmdldFNsaWRlQ291bnQ9ZnVuY3Rpb24oKXt2YXIgZSx0LG89dGhpcztyZXR1cm4gdD0hMD09PW8ub3B0aW9ucy5jZW50ZXJNb2RlP28uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG8ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMik6MCwhMD09PW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/KG8uJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1zbGlkZVwiKS5lYWNoKGZ1bmN0aW9uKHMsbil7aWYobi5vZmZzZXRMZWZ0LXQraShuKS5vdXRlcldpZHRoKCkvMj4tMSpvLnN3aXBlTGVmdClyZXR1cm4gZT1uLCExfSksTWF0aC5hYnMoaShlKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiKS1vLmN1cnJlbnRTbGlkZSl8fDEpOm8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbH0sZS5wcm90b3R5cGUuZ29Ubz1lLnByb3RvdHlwZS5zbGlja0dvVG89ZnVuY3Rpb24oaSxlKXt0aGlzLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwiaW5kZXhcIixpbmRleDpwYXJzZUludChpKX19LGUpfSxlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aSh0LiRzbGlkZXIpLmhhc0NsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIil8fChpKHQuJHNsaWRlcikuYWRkQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKSx0LmJ1aWxkUm93cygpLHQuYnVpbGRPdXQoKSx0LnNldFByb3BzKCksdC5zdGFydExvYWQoKSx0LmxvYWRTbGlkZXIoKSx0LmluaXRpYWxpemVFdmVudHMoKSx0LnVwZGF0ZUFycm93cygpLHQudXBkYXRlRG90cygpLHQuY2hlY2tSZXNwb25zaXZlKCEwKSx0LmZvY3VzSGFuZGxlcigpKSxlJiZ0LiRzbGlkZXIudHJpZ2dlcihcImluaXRcIixbdF0pLCEwPT09dC5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJnQuaW5pdEFEQSgpLHQub3B0aW9ucy5hdXRvcGxheSYmKHQucGF1c2VkPSExLHQuYXV0b1BsYXkoKSl9LGUucHJvdG90eXBlLmluaXRBREE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9TWF0aC5jZWlsKGUuc2xpZGVDb3VudC9lLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxvPWUuZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbihpKXtyZXR1cm4gaT49MCYmaTxlLnNsaWRlQ291bnR9KTtlLiRzbGlkZXMuYWRkKGUuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1jbG9uZWRcIikpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KS5maW5kKFwiYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0XCIpLmF0dHIoe3RhYmluZGV4OlwiLTFcIn0pLG51bGwhPT1lLiRkb3RzJiYoZS4kc2xpZGVzLm5vdChlLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpKS5lYWNoKGZ1bmN0aW9uKHQpe3ZhciBzPW8uaW5kZXhPZih0KTtpKHRoaXMpLmF0dHIoe3JvbGU6XCJ0YWJwYW5lbFwiLGlkOlwic2xpY2stc2xpZGVcIitlLmluc3RhbmNlVWlkK3QsdGFiaW5kZXg6LTF9KSwtMSE9PXMmJmkodGhpcykuYXR0cih7XCJhcmlhLWRlc2NyaWJlZGJ5XCI6XCJzbGljay1zbGlkZS1jb250cm9sXCIrZS5pbnN0YW5jZVVpZCtzfSl9KSxlLiRkb3RzLmF0dHIoXCJyb2xlXCIsXCJ0YWJsaXN0XCIpLmZpbmQoXCJsaVwiKS5lYWNoKGZ1bmN0aW9uKHMpe3ZhciBuPW9bc107aSh0aGlzKS5hdHRyKHtyb2xlOlwicHJlc2VudGF0aW9uXCJ9KSxpKHRoaXMpLmZpbmQoXCJidXR0b25cIikuZmlyc3QoKS5hdHRyKHtyb2xlOlwidGFiXCIsaWQ6XCJzbGljay1zbGlkZS1jb250cm9sXCIrZS5pbnN0YW5jZVVpZCtzLFwiYXJpYS1jb250cm9sc1wiOlwic2xpY2stc2xpZGVcIitlLmluc3RhbmNlVWlkK24sXCJhcmlhLWxhYmVsXCI6cysxK1wiIG9mIFwiK3QsXCJhcmlhLXNlbGVjdGVkXCI6bnVsbCx0YWJpbmRleDpcIi0xXCJ9KX0pLmVxKGUuY3VycmVudFNsaWRlKS5maW5kKFwiYnV0dG9uXCIpLmF0dHIoe1wiYXJpYS1zZWxlY3RlZFwiOlwidHJ1ZVwiLHRhYmluZGV4OlwiMFwifSkuZW5kKCkpO2Zvcih2YXIgcz1lLmN1cnJlbnRTbGlkZSxuPXMrZS5vcHRpb25zLnNsaWRlc1RvU2hvdztzPG47cysrKWUuJHNsaWRlcy5lcShzKS5hdHRyKFwidGFiaW5kZXhcIiwwKTtlLmFjdGl2YXRlQURBKCl9LGUucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7ITA9PT1pLm9wdGlvbnMuYXJyb3dzJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiKS5vbihcImNsaWNrLnNsaWNrXCIse21lc3NhZ2U6XCJwcmV2aW91c1wifSxpLmNoYW5nZVNsaWRlKSxpLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIikub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwibmV4dFwifSxpLmNoYW5nZVNsaWRlKSwhMD09PWkub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYoaS4kcHJldkFycm93Lm9uKFwia2V5ZG93bi5zbGlja1wiLGkua2V5SGFuZGxlciksaS4kbmV4dEFycm93Lm9uKFwia2V5ZG93bi5zbGlja1wiLGkua2V5SGFuZGxlcikpKX0sZS5wcm90b3R5cGUuaW5pdERvdEV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ITA9PT1lLm9wdGlvbnMuZG90cyYmKGkoXCJsaVwiLGUuJGRvdHMpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcImluZGV4XCJ9LGUuY2hhbmdlU2xpZGUpLCEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJmUuJGRvdHMub24oXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSksITA9PT1lLm9wdGlvbnMuZG90cyYmITA9PT1lLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciYmaShcImxpXCIsZS4kZG90cykub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCEwKSkub24oXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSl9LGUucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5vcHRpb25zLnBhdXNlT25Ib3ZlciYmKGUuJGxpc3Qub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCEwKSksZS4kbGlzdC5vbihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKSl9LGUucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuaW5pdEFycm93RXZlbnRzKCksZS5pbml0RG90RXZlbnRzKCksZS5pbml0U2xpZGVFdmVudHMoKSxlLiRsaXN0Lm9uKFwidG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2tcIix7YWN0aW9uOlwic3RhcnRcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJ0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrXCIse2FjdGlvbjpcIm1vdmVcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJ0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrXCIse2FjdGlvbjpcImVuZFwifSxlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vbihcInRvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2tcIix7YWN0aW9uOlwiZW5kXCJ9LGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9uKFwiY2xpY2suc2xpY2tcIixlLmNsaWNrSGFuZGxlciksaShkb2N1bWVudCkub24oZS52aXNpYmlsaXR5Q2hhbmdlLGkucHJveHkoZS52aXNpYmlsaXR5LGUpKSwhMD09PWUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiZlLiRsaXN0Lm9uKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlciksITA9PT1lLm9wdGlvbnMuZm9jdXNPblNlbGVjdCYmaShlLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGkod2luZG93KS5vbihcIm9yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsaS5wcm94eShlLm9yaWVudGF0aW9uQ2hhbmdlLGUpKSxpKHdpbmRvdykub24oXCJyZXNpemUuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxpLnByb3h5KGUucmVzaXplLGUpKSxpKFwiW2RyYWdnYWJsZSE9dHJ1ZV1cIixlLiRzbGlkZVRyYWNrKS5vbihcImRyYWdzdGFydFwiLGUucHJldmVudERlZmF1bHQpLGkod2luZG93KS5vbihcImxvYWQuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnNldFBvc2l0aW9uKSxpKGUuc2V0UG9zaXRpb24pfSxlLnByb3RvdHlwZS5pbml0VUk9ZnVuY3Rpb24oKXt2YXIgaT10aGlzOyEwPT09aS5vcHRpb25zLmFycm93cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpLiRwcmV2QXJyb3cuc2hvdygpLGkuJG5leHRBcnJvdy5zaG93KCkpLCEwPT09aS5vcHRpb25zLmRvdHMmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZpLiRkb3RzLnNob3coKX0sZS5wcm90b3R5cGUua2V5SGFuZGxlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2kudGFyZ2V0LnRhZ05hbWUubWF0Y2goXCJURVhUQVJFQXxJTlBVVHxTRUxFQ1RcIil8fCgzNz09PWkua2V5Q29kZSYmITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT9lLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOiEwPT09ZS5vcHRpb25zLnJ0bD9cIm5leHRcIjpcInByZXZpb3VzXCJ9fSk6Mzk9PT1pLmtleUNvZGUmJiEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJmUuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6ITA9PT1lLm9wdGlvbnMucnRsP1wicHJldmlvdXNcIjpcIm5leHRcIn19KSl9LGUucHJvdG90eXBlLmxhenlMb2FkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtpKFwiaW1nW2RhdGEtbGF6eV1cIixlKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9aSh0aGlzKSx0PWkodGhpcykuYXR0cihcImRhdGEtbGF6eVwiKSxvPWkodGhpcykuYXR0cihcImRhdGEtc3Jjc2V0XCIpLHM9aSh0aGlzKS5hdHRyKFwiZGF0YS1zaXplc1wiKXx8bi4kc2xpZGVyLmF0dHIoXCJkYXRhLXNpemVzXCIpLHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtyLm9ubG9hZD1mdW5jdGlvbigpe2UuYW5pbWF0ZSh7b3BhY2l0eTowfSwxMDAsZnVuY3Rpb24oKXtvJiYoZS5hdHRyKFwic3Jjc2V0XCIsbykscyYmZS5hdHRyKFwic2l6ZXNcIixzKSksZS5hdHRyKFwic3JjXCIsdCkuYW5pbWF0ZSh7b3BhY2l0eToxfSwyMDAsZnVuY3Rpb24oKXtlLnJlbW92ZUF0dHIoXCJkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplc1wiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9KSxuLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbbixlLHRdKX0pfSxyLm9uZXJyb3I9ZnVuY3Rpb24oKXtlLnJlbW92ZUF0dHIoXCJkYXRhLWxhenlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLmFkZENsYXNzKFwic2xpY2stbGF6eWxvYWQtZXJyb3JcIiksbi4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZEVycm9yXCIsW24sZSx0XSl9LHIuc3JjPXR9KX12YXIgdCxvLHMsbj10aGlzO2lmKCEwPT09bi5vcHRpb25zLmNlbnRlck1vZGU/ITA9PT1uLm9wdGlvbnMuaW5maW5pdGU/cz0obz1uLmN1cnJlbnRTbGlkZSsobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpKStuLm9wdGlvbnMuc2xpZGVzVG9TaG93KzI6KG89TWF0aC5tYXgoMCxuLmN1cnJlbnRTbGlkZS0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpKSxzPW4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKzIrbi5jdXJyZW50U2xpZGUpOihvPW4ub3B0aW9ucy5pbmZpbml0ZT9uLm9wdGlvbnMuc2xpZGVzVG9TaG93K24uY3VycmVudFNsaWRlOm4uY3VycmVudFNsaWRlLHM9TWF0aC5jZWlsKG8rbi5vcHRpb25zLnNsaWRlc1RvU2hvdyksITA9PT1uLm9wdGlvbnMuZmFkZSYmKG8+MCYmby0tLHM8PW4uc2xpZGVDb3VudCYmcysrKSksdD1uLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKS5zbGljZShvLHMpLFwiYW50aWNpcGF0ZWRcIj09PW4ub3B0aW9ucy5sYXp5TG9hZClmb3IodmFyIHI9by0xLGw9cyxkPW4uJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLGE9MDthPG4ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDthKyspcjwwJiYocj1uLnNsaWRlQ291bnQtMSksdD0odD10LmFkZChkLmVxKHIpKSkuYWRkKGQuZXEobCkpLHItLSxsKys7ZSh0KSxuLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZShuLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKSk6bi5jdXJyZW50U2xpZGU+PW4uc2xpZGVDb3VudC1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Uobi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpLnNsaWNlKDAsbi5vcHRpb25zLnNsaWRlc1RvU2hvdykpOjA9PT1uLmN1cnJlbnRTbGlkZSYmZShuLiRzbGlkZXIuZmluZChcIi5zbGljay1jbG9uZWRcIikuc2xpY2UoLTEqbi5vcHRpb25zLnNsaWRlc1RvU2hvdykpfSxlLnByb3RvdHlwZS5sb2FkU2xpZGVyPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLnNldFBvc2l0aW9uKCksaS4kc2xpZGVUcmFjay5jc3Moe29wYWNpdHk6MX0pLGkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksaS5pbml0VUkoKSxcInByb2dyZXNzaXZlXCI9PT1pLm9wdGlvbnMubGF6eUxvYWQmJmkucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpfSxlLnByb3RvdHlwZS5uZXh0PWUucHJvdG90eXBlLnNsaWNrTmV4dD1mdW5jdGlvbigpe3RoaXMuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJuZXh0XCJ9fSl9LGUucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmNoZWNrUmVzcG9uc2l2ZSgpLGkuc2V0UG9zaXRpb24oKX0sZS5wcm90b3R5cGUucGF1c2U9ZS5wcm90b3R5cGUuc2xpY2tQYXVzZT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheUNsZWFyKCksaS5wYXVzZWQ9ITB9LGUucHJvdG90eXBlLnBsYXk9ZS5wcm90b3R5cGUuc2xpY2tQbGF5PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmF1dG9QbGF5KCksaS5vcHRpb25zLmF1dG9wbGF5PSEwLGkucGF1c2VkPSExLGkuZm9jdXNzZWQ9ITEsaS5pbnRlcnJ1cHRlZD0hMX0sZS5wcm90b3R5cGUucG9zdFNsaWRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC51bnNsaWNrZWR8fCh0LiRzbGlkZXIudHJpZ2dlcihcImFmdGVyQ2hhbmdlXCIsW3QsZV0pLHQuYW5pbWF0aW5nPSExLHQuc2xpZGVDb3VudD50Lm9wdGlvbnMuc2xpZGVzVG9TaG93JiZ0LnNldFBvc2l0aW9uKCksdC5zd2lwZUxlZnQ9bnVsbCx0Lm9wdGlvbnMuYXV0b3BsYXkmJnQuYXV0b1BsYXkoKSwhMD09PXQub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYodC5pbml0QURBKCksdC5vcHRpb25zLmZvY3VzT25DaGFuZ2UmJmkodC4kc2xpZGVzLmdldCh0LmN1cnJlbnRTbGlkZSkpLmF0dHIoXCJ0YWJpbmRleFwiLDApLmZvY3VzKCkpKX0sZS5wcm90b3R5cGUucHJldj1lLnByb3RvdHlwZS5zbGlja1ByZXY9ZnVuY3Rpb24oKXt0aGlzLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwicHJldmlvdXNcIn19KX0sZS5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oaSl7aS5wcmV2ZW50RGVmYXVsdCgpfSxlLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkPWZ1bmN0aW9uKGUpe2U9ZXx8MTt2YXIgdCxvLHMsbixyLGw9dGhpcyxkPWkoXCJpbWdbZGF0YS1sYXp5XVwiLGwuJHNsaWRlcik7ZC5sZW5ndGg/KHQ9ZC5maXJzdCgpLG89dC5hdHRyKFwiZGF0YS1sYXp5XCIpLHM9dC5hdHRyKFwiZGF0YS1zcmNzZXRcIiksbj10LmF0dHIoXCJkYXRhLXNpemVzXCIpfHxsLiRzbGlkZXIuYXR0cihcImRhdGEtc2l6ZXNcIiksKHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSkub25sb2FkPWZ1bmN0aW9uKCl7cyYmKHQuYXR0cihcInNyY3NldFwiLHMpLG4mJnQuYXR0cihcInNpemVzXCIsbikpLHQuYXR0cihcInNyY1wiLG8pLnJlbW92ZUF0dHIoXCJkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplc1wiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksITA9PT1sLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQmJmwuc2V0UG9zaXRpb24oKSxsLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbbCx0LG9dKSxsLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sci5vbmVycm9yPWZ1bmN0aW9uKCl7ZTwzP3NldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnByb2dyZXNzaXZlTGF6eUxvYWQoZSsxKX0sNTAwKToodC5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKS5hZGRDbGFzcyhcInNsaWNrLWxhenlsb2FkLWVycm9yXCIpLGwuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRFcnJvclwiLFtsLHQsb10pLGwucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpKX0sci5zcmM9byk6bC4kc2xpZGVyLnRyaWdnZXIoXCJhbGxJbWFnZXNMb2FkZWRcIixbbF0pfSxlLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKGUpe3ZhciB0LG8scz10aGlzO289cy5zbGlkZUNvdW50LXMub3B0aW9ucy5zbGlkZXNUb1Nob3csIXMub3B0aW9ucy5pbmZpbml0ZSYmcy5jdXJyZW50U2xpZGU+byYmKHMuY3VycmVudFNsaWRlPW8pLHMuc2xpZGVDb3VudDw9cy5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKHMuY3VycmVudFNsaWRlPTApLHQ9cy5jdXJyZW50U2xpZGUscy5kZXN0cm95KCEwKSxpLmV4dGVuZChzLHMuaW5pdGlhbHMse2N1cnJlbnRTbGlkZTp0fSkscy5pbml0KCksZXx8cy5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcImluZGV4XCIsaW5kZXg6dH19LCExKX0sZS5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cz1mdW5jdGlvbigpe3ZhciBlLHQsbyxzPXRoaXMsbj1zLm9wdGlvbnMucmVzcG9uc2l2ZXx8bnVsbDtpZihcImFycmF5XCI9PT1pLnR5cGUobikmJm4ubGVuZ3RoKXtzLnJlc3BvbmRUbz1zLm9wdGlvbnMucmVzcG9uZFRvfHxcIndpbmRvd1wiO2ZvcihlIGluIG4paWYobz1zLmJyZWFrcG9pbnRzLmxlbmd0aC0xLG4uaGFzT3duUHJvcGVydHkoZSkpe2Zvcih0PW5bZV0uYnJlYWtwb2ludDtvPj0wOylzLmJyZWFrcG9pbnRzW29dJiZzLmJyZWFrcG9pbnRzW29dPT09dCYmcy5icmVha3BvaW50cy5zcGxpY2UobywxKSxvLS07cy5icmVha3BvaW50cy5wdXNoKHQpLHMuYnJlYWtwb2ludFNldHRpbmdzW3RdPW5bZV0uc2V0dGluZ3N9cy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGksZSl7cmV0dXJuIHMub3B0aW9ucy5tb2JpbGVGaXJzdD9pLWU6ZS1pfSl9fSxlLnByb3RvdHlwZS5yZWluaXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlcz1lLiRzbGlkZVRyYWNrLmNoaWxkcmVuKGUub3B0aW9ucy5zbGlkZSkuYWRkQ2xhc3MoXCJzbGljay1zbGlkZVwiKSxlLnNsaWRlQ291bnQ9ZS4kc2xpZGVzLmxlbmd0aCxlLmN1cnJlbnRTbGlkZT49ZS5zbGlkZUNvdW50JiYwIT09ZS5jdXJyZW50U2xpZGUmJihlLmN1cnJlbnRTbGlkZT1lLmN1cnJlbnRTbGlkZS1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpLGUuc2xpZGVDb3VudDw9ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuY3VycmVudFNsaWRlPTApLGUucmVnaXN0ZXJCcmVha3BvaW50cygpLGUuc2V0UHJvcHMoKSxlLnNldHVwSW5maW5pdGUoKSxlLmJ1aWxkQXJyb3dzKCksZS51cGRhdGVBcnJvd3MoKSxlLmluaXRBcnJvd0V2ZW50cygpLGUuYnVpbGREb3RzKCksZS51cGRhdGVEb3RzKCksZS5pbml0RG90RXZlbnRzKCksZS5jbGVhblVwU2xpZGVFdmVudHMoKSxlLmluaXRTbGlkZUV2ZW50cygpLGUuY2hlY2tSZXNwb25zaXZlKCExLCEwKSwhMD09PWUub3B0aW9ucy5mb2N1c09uU2VsZWN0JiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oXCJjbGljay5zbGlja1wiLGUuc2VsZWN0SGFuZGxlciksZS5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIGUuY3VycmVudFNsaWRlP2UuY3VycmVudFNsaWRlOjApLGUuc2V0UG9zaXRpb24oKSxlLmZvY3VzSGFuZGxlcigpLGUucGF1c2VkPSFlLm9wdGlvbnMuYXV0b3BsYXksZS5hdXRvUGxheSgpLGUuJHNsaWRlci50cmlnZ2VyKFwicmVJbml0XCIsW2VdKX0sZS5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpKHdpbmRvdykud2lkdGgoKSE9PWUud2luZG93V2lkdGgmJihjbGVhclRpbWVvdXQoZS53aW5kb3dEZWxheSksZS53aW5kb3dEZWxheT13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2Uud2luZG93V2lkdGg9aSh3aW5kb3cpLndpZHRoKCksZS5jaGVja1Jlc3BvbnNpdmUoKSxlLnVuc2xpY2tlZHx8ZS5zZXRQb3NpdGlvbigpfSw1MCkpfSxlLnByb3RvdHlwZS5yZW1vdmVTbGlkZT1lLnByb3RvdHlwZS5zbGlja1JlbW92ZT1mdW5jdGlvbihpLGUsdCl7dmFyIG89dGhpcztpZihpPVwiYm9vbGVhblwiPT10eXBlb2YgaT8hMD09PShlPWkpPzA6by5zbGlkZUNvdW50LTE6ITA9PT1lPy0taTppLG8uc2xpZGVDb3VudDwxfHxpPDB8fGk+by5zbGlkZUNvdW50LTEpcmV0dXJuITE7by51bmxvYWQoKSwhMD09PXQ/by4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpOm8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpKS5yZW1vdmUoKSxvLiRzbGlkZXM9by4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLG8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxvLiRzbGlkZVRyYWNrLmFwcGVuZChvLiRzbGlkZXMpLG8uJHNsaWRlc0NhY2hlPW8uJHNsaWRlcyxvLnJlaW5pdCgpfSxlLnByb3RvdHlwZS5zZXRDU1M9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvPXRoaXMscz17fTshMD09PW8ub3B0aW9ucy5ydGwmJihpPS1pKSxlPVwibGVmdFwiPT1vLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoaSkrXCJweFwiOlwiMHB4XCIsdD1cInRvcFwiPT1vLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoaSkrXCJweFwiOlwiMHB4XCIsc1tvLnBvc2l0aW9uUHJvcF09aSwhMT09PW8udHJhbnNmb3Jtc0VuYWJsZWQ/by4kc2xpZGVUcmFjay5jc3Mocyk6KHM9e30sITE9PT1vLmNzc1RyYW5zaXRpb25zPyhzW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2UrXCIsIFwiK3QrXCIpXCIsby4kc2xpZGVUcmFjay5jc3MocykpOihzW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlM2QoXCIrZStcIiwgXCIrdCtcIiwgMHB4KVwiLG8uJHNsaWRlVHJhY2suY3NzKHMpKSl9LGUucHJvdG90eXBlLnNldERpbWVuc2lvbnM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzOyExPT09aS5vcHRpb25zLnZlcnRpY2FsPyEwPT09aS5vcHRpb25zLmNlbnRlck1vZGUmJmkuJGxpc3QuY3NzKHtwYWRkaW5nOlwiMHB4IFwiK2kub3B0aW9ucy5jZW50ZXJQYWRkaW5nfSk6KGkuJGxpc3QuaGVpZ2h0KGkuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSppLm9wdGlvbnMuc2xpZGVzVG9TaG93KSwhMD09PWkub3B0aW9ucy5jZW50ZXJNb2RlJiZpLiRsaXN0LmNzcyh7cGFkZGluZzppLm9wdGlvbnMuY2VudGVyUGFkZGluZytcIiAwcHhcIn0pKSxpLmxpc3RXaWR0aD1pLiRsaXN0LndpZHRoKCksaS5saXN0SGVpZ2h0PWkuJGxpc3QuaGVpZ2h0KCksITE9PT1pLm9wdGlvbnMudmVydGljYWwmJiExPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGg/KGkuc2xpZGVXaWR0aD1NYXRoLmNlaWwoaS5saXN0V2lkdGgvaS5vcHRpb25zLnNsaWRlc1RvU2hvdyksaS4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoaS5zbGlkZVdpZHRoKmkuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikubGVuZ3RoKSkpOiEwPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGg/aS4kc2xpZGVUcmFjay53aWR0aCg1ZTMqaS5zbGlkZUNvdW50KTooaS5zbGlkZVdpZHRoPU1hdGguY2VpbChpLmxpc3RXaWR0aCksaS4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKGkuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSppLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmxlbmd0aCkpKTt2YXIgZT1pLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKCEwKS1pLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpOyExPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGgmJmkuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikud2lkdGgoaS5zbGlkZVdpZHRoLWUpfSxlLnByb3RvdHlwZS5zZXRGYWRlPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzO3QuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKG8scyl7ZT10LnNsaWRlV2lkdGgqbyotMSwhMD09PXQub3B0aW9ucy5ydGw/aShzKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixyaWdodDplLHRvcDowLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4LTIsb3BhY2l0eTowfSk6aShzKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixsZWZ0OmUsdG9wOjAsekluZGV4OnQub3B0aW9ucy56SW5kZXgtMixvcGFjaXR5OjB9KX0pLHQuJHNsaWRlcy5lcSh0LmN1cnJlbnRTbGlkZSkuY3NzKHt6SW5kZXg6dC5vcHRpb25zLnpJbmRleC0xLG9wYWNpdHk6MX0pfSxlLnByb3RvdHlwZS5zZXRIZWlnaHQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2lmKDE9PT1pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYhMD09PWkub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCYmITE9PT1pLm9wdGlvbnMudmVydGljYWwpe3ZhciBlPWkuJHNsaWRlcy5lcShpLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQoITApO2kuJGxpc3QuY3NzKFwiaGVpZ2h0XCIsZSl9fSxlLnByb3RvdHlwZS5zZXRPcHRpb249ZS5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb249ZnVuY3Rpb24oKXt2YXIgZSx0LG8scyxuLHI9dGhpcyxsPSExO2lmKFwib2JqZWN0XCI9PT1pLnR5cGUoYXJndW1lbnRzWzBdKT8obz1hcmd1bWVudHNbMF0sbD1hcmd1bWVudHNbMV0sbj1cIm11bHRpcGxlXCIpOlwic3RyaW5nXCI9PT1pLnR5cGUoYXJndW1lbnRzWzBdKSYmKG89YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLGw9YXJndW1lbnRzWzJdLFwicmVzcG9uc2l2ZVwiPT09YXJndW1lbnRzWzBdJiZcImFycmF5XCI9PT1pLnR5cGUoYXJndW1lbnRzWzFdKT9uPVwicmVzcG9uc2l2ZVwiOnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmKG49XCJzaW5nbGVcIikpLFwic2luZ2xlXCI9PT1uKXIub3B0aW9uc1tvXT1zO2Vsc2UgaWYoXCJtdWx0aXBsZVwiPT09bilpLmVhY2gobyxmdW5jdGlvbihpLGUpe3Iub3B0aW9uc1tpXT1lfSk7ZWxzZSBpZihcInJlc3BvbnNpdmVcIj09PW4pZm9yKHQgaW4gcylpZihcImFycmF5XCIhPT1pLnR5cGUoci5vcHRpb25zLnJlc3BvbnNpdmUpKXIub3B0aW9ucy5yZXNwb25zaXZlPVtzW3RdXTtlbHNle2ZvcihlPXIub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO2U+PTA7KXIub3B0aW9ucy5yZXNwb25zaXZlW2VdLmJyZWFrcG9pbnQ9PT1zW3RdLmJyZWFrcG9pbnQmJnIub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShlLDEpLGUtLTtyLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKHNbdF0pfWwmJihyLnVubG9hZCgpLHIucmVpbml0KCkpfSxlLnByb3RvdHlwZS5zZXRQb3NpdGlvbj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5zZXREaW1lbnNpb25zKCksaS5zZXRIZWlnaHQoKSwhMT09PWkub3B0aW9ucy5mYWRlP2kuc2V0Q1NTKGkuZ2V0TGVmdChpLmN1cnJlbnRTbGlkZSkpOmkuc2V0RmFkZSgpLGkuJHNsaWRlci50cmlnZ2VyKFwic2V0UG9zaXRpb25cIixbaV0pfSxlLnByb3RvdHlwZS5zZXRQcm9wcz1mdW5jdGlvbigpe3ZhciBpPXRoaXMsZT1kb2N1bWVudC5ib2R5LnN0eWxlO2kucG9zaXRpb25Qcm9wPSEwPT09aS5vcHRpb25zLnZlcnRpY2FsP1widG9wXCI6XCJsZWZ0XCIsXCJ0b3BcIj09PWkucG9zaXRpb25Qcm9wP2kuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpOmkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpLHZvaWQgMD09PWUuV2Via2l0VHJhbnNpdGlvbiYmdm9pZCAwPT09ZS5Nb3pUcmFuc2l0aW9uJiZ2b2lkIDA9PT1lLm1zVHJhbnNpdGlvbnx8ITA9PT1pLm9wdGlvbnMudXNlQ1NTJiYoaS5jc3NUcmFuc2l0aW9ucz0hMCksaS5vcHRpb25zLmZhZGUmJihcIm51bWJlclwiPT10eXBlb2YgaS5vcHRpb25zLnpJbmRleD9pLm9wdGlvbnMuekluZGV4PDMmJihpLm9wdGlvbnMuekluZGV4PTMpOmkub3B0aW9ucy56SW5kZXg9aS5kZWZhdWx0cy56SW5kZXgpLHZvaWQgMCE9PWUuT1RyYW5zZm9ybSYmKGkuYW5pbVR5cGU9XCJPVHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW8tdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIk9UcmFuc2l0aW9uXCIsdm9pZCAwPT09ZS5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT1lLndlYmtpdFBlcnNwZWN0aXZlJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUuTW96VHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIk1velRyYW5zZm9ybVwiLGkudHJhbnNmb3JtVHlwZT1cIi1tb3otdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIk1velRyYW5zaXRpb25cIix2b2lkIDA9PT1lLnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PWUuTW96UGVyc3BlY3RpdmUmJihpLmFuaW1UeXBlPSExKSksdm9pZCAwIT09ZS53ZWJraXRUcmFuc2Zvcm0mJihpLmFuaW1UeXBlPVwid2Via2l0VHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLXdlYmtpdC10cmFuc2Zvcm1cIixpLnRyYW5zaXRpb25UeXBlPVwid2Via2l0VHJhbnNpdGlvblwiLHZvaWQgMD09PWUucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09ZS53ZWJraXRQZXJzcGVjdGl2ZSYmKGkuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1lLm1zVHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIm1zVHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW1zLXRyYW5zZm9ybVwiLGkudHJhbnNpdGlvblR5cGU9XCJtc1RyYW5zaXRpb25cIix2b2lkIDA9PT1lLm1zVHJhbnNmb3JtJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUudHJhbnNmb3JtJiYhMSE9PWkuYW5pbVR5cGUmJihpLmFuaW1UeXBlPVwidHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwidHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cInRyYW5zaXRpb25cIiksaS50cmFuc2Zvcm1zRW5hYmxlZD1pLm9wdGlvbnMudXNlVHJhbnNmb3JtJiZudWxsIT09aS5hbmltVHlwZSYmITEhPT1pLmFuaW1UeXBlfSxlLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXM9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvLHMsbj10aGlzO2lmKHQ9bi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLG4uJHNsaWRlcy5lcShpKS5hZGRDbGFzcyhcInNsaWNrLWN1cnJlbnRcIiksITA9PT1uLm9wdGlvbnMuY2VudGVyTW9kZSl7dmFyIHI9bi5vcHRpb25zLnNsaWRlc1RvU2hvdyUyPT0wPzE6MDtlPU1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSwhMD09PW4ub3B0aW9ucy5pbmZpbml0ZSYmKGk+PWUmJmk8PW4uc2xpZGVDb3VudC0xLWU/bi4kc2xpZGVzLnNsaWNlKGktZStyLGkrZSsxKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpOihvPW4ub3B0aW9ucy5zbGlkZXNUb1Nob3craSx0LnNsaWNlKG8tZSsxK3IsbytlKzIpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIikpLDA9PT1pP3QuZXEodC5sZW5ndGgtMS1uLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKTppPT09bi5zbGlkZUNvdW50LTEmJnQuZXEobi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIikpLG4uJHNsaWRlcy5lcShpKS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKX1lbHNlIGk+PTAmJmk8PW4uc2xpZGVDb3VudC1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P24uJHNsaWRlcy5zbGljZShpLGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTp0Lmxlbmd0aDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdz90LmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6KHM9bi5zbGlkZUNvdW50JW4ub3B0aW9ucy5zbGlkZXNUb1Nob3csbz0hMD09PW4ub3B0aW9ucy5pbmZpbml0ZT9uLm9wdGlvbnMuc2xpZGVzVG9TaG93K2k6aSxuLm9wdGlvbnMuc2xpZGVzVG9TaG93PT1uLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwmJm4uc2xpZGVDb3VudC1pPG4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/dC5zbGljZShvLShuLm9wdGlvbnMuc2xpZGVzVG9TaG93LXMpLG8rcykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTp0LnNsaWNlKG8sbytuLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKTtcIm9uZGVtYW5kXCIhPT1uLm9wdGlvbnMubGF6eUxvYWQmJlwiYW50aWNpcGF0ZWRcIiE9PW4ub3B0aW9ucy5sYXp5TG9hZHx8bi5sYXp5TG9hZCgpfSxlLnByb3RvdHlwZS5zZXR1cEluZmluaXRlPWZ1bmN0aW9uKCl7dmFyIGUsdCxvLHM9dGhpcztpZighMD09PXMub3B0aW9ucy5mYWRlJiYocy5vcHRpb25zLmNlbnRlck1vZGU9ITEpLCEwPT09cy5vcHRpb25zLmluZmluaXRlJiYhMT09PXMub3B0aW9ucy5mYWRlJiYodD1udWxsLHMuc2xpZGVDb3VudD5zLm9wdGlvbnMuc2xpZGVzVG9TaG93KSl7Zm9yKG89ITA9PT1zLm9wdGlvbnMuY2VudGVyTW9kZT9zLm9wdGlvbnMuc2xpZGVzVG9TaG93KzE6cy5vcHRpb25zLnNsaWRlc1RvU2hvdyxlPXMuc2xpZGVDb3VudDtlPnMuc2xpZGVDb3VudC1vO2UtPTEpdD1lLTEsaShzLiRzbGlkZXNbdF0pLmNsb25lKCEwKS5hdHRyKFwiaWRcIixcIlwiKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLHQtcy5zbGlkZUNvdW50KS5wcmVwZW5kVG8ocy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7Zm9yKGU9MDtlPG8rcy5zbGlkZUNvdW50O2UrPTEpdD1lLGkocy4kc2xpZGVzW3RdKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIix0K3Muc2xpZGVDb3VudCkuYXBwZW5kVG8ocy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7cy4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5maW5kKFwiW2lkXVwiKS5lYWNoKGZ1bmN0aW9uKCl7aSh0aGlzKS5hdHRyKFwiaWRcIixcIlwiKX0pfX0sZS5wcm90b3R5cGUuaW50ZXJydXB0PWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7aXx8ZS5hdXRvUGxheSgpLGUuaW50ZXJydXB0ZWQ9aX0sZS5wcm90b3R5cGUuc2VsZWN0SGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG89aShlLnRhcmdldCkuaXMoXCIuc2xpY2stc2xpZGVcIik/aShlLnRhcmdldCk6aShlLnRhcmdldCkucGFyZW50cyhcIi5zbGljay1zbGlkZVwiKSxzPXBhcnNlSW50KG8uYXR0cihcImRhdGEtc2xpY2staW5kZXhcIikpO3N8fChzPTApLHQuc2xpZGVDb3VudDw9dC5vcHRpb25zLnNsaWRlc1RvU2hvdz90LnNsaWRlSGFuZGxlcihzLCExLCEwKTp0LnNsaWRlSGFuZGxlcihzKX0sZS5wcm90b3R5cGUuc2xpZGVIYW5kbGVyPWZ1bmN0aW9uKGksZSx0KXt2YXIgbyxzLG4scixsLGQ9bnVsbCxhPXRoaXM7aWYoZT1lfHwhMSwhKCEwPT09YS5hbmltYXRpbmcmJiEwPT09YS5vcHRpb25zLndhaXRGb3JBbmltYXRlfHwhMD09PWEub3B0aW9ucy5mYWRlJiZhLmN1cnJlbnRTbGlkZT09PWkpKWlmKCExPT09ZSYmYS5hc05hdkZvcihpKSxvPWksZD1hLmdldExlZnQobykscj1hLmdldExlZnQoYS5jdXJyZW50U2xpZGUpLGEuY3VycmVudExlZnQ9bnVsbD09PWEuc3dpcGVMZWZ0P3I6YS5zd2lwZUxlZnQsITE9PT1hLm9wdGlvbnMuaW5maW5pdGUmJiExPT09YS5vcHRpb25zLmNlbnRlck1vZGUmJihpPDB8fGk+YS5nZXREb3RDb3VudCgpKmEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpITE9PT1hLm9wdGlvbnMuZmFkZSYmKG89YS5jdXJyZW50U2xpZGUsITAhPT10P2EuYW5pbWF0ZVNsaWRlKHIsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShvKX0pOmEucG9zdFNsaWRlKG8pKTtlbHNlIGlmKCExPT09YS5vcHRpb25zLmluZmluaXRlJiYhMD09PWEub3B0aW9ucy5jZW50ZXJNb2RlJiYoaTwwfHxpPmEuc2xpZGVDb3VudC1hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSExPT09YS5vcHRpb25zLmZhZGUmJihvPWEuY3VycmVudFNsaWRlLCEwIT09dD9hLmFuaW1hdGVTbGlkZShyLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUobyl9KTphLnBvc3RTbGlkZShvKSk7ZWxzZXtpZihhLm9wdGlvbnMuYXV0b3BsYXkmJmNsZWFySW50ZXJ2YWwoYS5hdXRvUGxheVRpbWVyKSxzPW88MD9hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT0wP2Euc2xpZGVDb3VudC1hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmEuc2xpZGVDb3VudCtvOm8+PWEuc2xpZGVDb3VudD9hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT0wPzA6by1hLnNsaWRlQ291bnQ6byxhLmFuaW1hdGluZz0hMCxhLiRzbGlkZXIudHJpZ2dlcihcImJlZm9yZUNoYW5nZVwiLFthLGEuY3VycmVudFNsaWRlLHNdKSxuPWEuY3VycmVudFNsaWRlLGEuY3VycmVudFNsaWRlPXMsYS5zZXRTbGlkZUNsYXNzZXMoYS5jdXJyZW50U2xpZGUpLGEub3B0aW9ucy5hc05hdkZvciYmKGw9KGw9YS5nZXROYXZUYXJnZXQoKSkuc2xpY2soXCJnZXRTbGlja1wiKSkuc2xpZGVDb3VudDw9bC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmbC5zZXRTbGlkZUNsYXNzZXMoYS5jdXJyZW50U2xpZGUpLGEudXBkYXRlRG90cygpLGEudXBkYXRlQXJyb3dzKCksITA9PT1hLm9wdGlvbnMuZmFkZSlyZXR1cm4hMCE9PXQ/KGEuZmFkZVNsaWRlT3V0KG4pLGEuZmFkZVNsaWRlKHMsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShzKX0pKTphLnBvc3RTbGlkZShzKSx2b2lkIGEuYW5pbWF0ZUhlaWdodCgpOyEwIT09dD9hLmFuaW1hdGVTbGlkZShkLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUocyl9KTphLnBvc3RTbGlkZShzKX19LGUucHJvdG90eXBlLnN0YXJ0TG9hZD1mdW5jdGlvbigpe3ZhciBpPXRoaXM7ITA9PT1pLm9wdGlvbnMuYXJyb3dzJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5oaWRlKCksaS4kbmV4dEFycm93LmhpZGUoKSksITA9PT1pLm9wdGlvbnMuZG90cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmkuJGRvdHMuaGlkZSgpLGkuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9LGUucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGksZSx0LG8scz10aGlzO3JldHVybiBpPXMudG91Y2hPYmplY3Quc3RhcnRYLXMudG91Y2hPYmplY3QuY3VyWCxlPXMudG91Y2hPYmplY3Quc3RhcnRZLXMudG91Y2hPYmplY3QuY3VyWSx0PU1hdGguYXRhbjIoZSxpKSwobz1NYXRoLnJvdW5kKDE4MCp0L01hdGguUEkpKTwwJiYobz0zNjAtTWF0aC5hYnMobykpLG88PTQ1JiZvPj0wPyExPT09cy5vcHRpb25zLnJ0bD9cImxlZnRcIjpcInJpZ2h0XCI6bzw9MzYwJiZvPj0zMTU/ITE9PT1zLm9wdGlvbnMucnRsP1wibGVmdFwiOlwicmlnaHRcIjpvPj0xMzUmJm88PTIyNT8hMT09PXMub3B0aW9ucy5ydGw/XCJyaWdodFwiOlwibGVmdFwiOiEwPT09cy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz9vPj0zNSYmbzw9MTM1P1wiZG93blwiOlwidXBcIjpcInZlcnRpY2FsXCJ9LGUucHJvdG90eXBlLnN3aXBlRW5kPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbz10aGlzO2lmKG8uZHJhZ2dpbmc9ITEsby5zd2lwaW5nPSExLG8uc2Nyb2xsaW5nKXJldHVybiBvLnNjcm9sbGluZz0hMSwhMTtpZihvLmludGVycnVwdGVkPSExLG8uc2hvdWxkQ2xpY2s9IShvLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjEwKSx2b2lkIDA9PT1vLnRvdWNoT2JqZWN0LmN1clgpcmV0dXJuITE7aWYoITA9PT1vLnRvdWNoT2JqZWN0LmVkZ2VIaXQmJm8uJHNsaWRlci50cmlnZ2VyKFwiZWRnZVwiLFtvLG8uc3dpcGVEaXJlY3Rpb24oKV0pLG8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+PW8udG91Y2hPYmplY3QubWluU3dpcGUpe3N3aXRjaCh0PW8uc3dpcGVEaXJlY3Rpb24oKSl7Y2FzZVwibGVmdFwiOmNhc2VcImRvd25cIjplPW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/by5jaGVja05hdmlnYWJsZShvLmN1cnJlbnRTbGlkZStvLmdldFNsaWRlQ291bnQoKSk6by5jdXJyZW50U2xpZGUrby5nZXRTbGlkZUNvdW50KCksby5jdXJyZW50RGlyZWN0aW9uPTA7YnJlYWs7Y2FzZVwicmlnaHRcIjpjYXNlXCJ1cFwiOmU9by5vcHRpb25zLnN3aXBlVG9TbGlkZT9vLmNoZWNrTmF2aWdhYmxlKG8uY3VycmVudFNsaWRlLW8uZ2V0U2xpZGVDb3VudCgpKTpvLmN1cnJlbnRTbGlkZS1vLmdldFNsaWRlQ291bnQoKSxvLmN1cnJlbnREaXJlY3Rpb249MX1cInZlcnRpY2FsXCIhPXQmJihvLnNsaWRlSGFuZGxlcihlKSxvLnRvdWNoT2JqZWN0PXt9LG8uJHNsaWRlci50cmlnZ2VyKFwic3dpcGVcIixbbyx0XSkpfWVsc2Ugby50b3VjaE9iamVjdC5zdGFydFghPT1vLnRvdWNoT2JqZWN0LmN1clgmJihvLnNsaWRlSGFuZGxlcihvLmN1cnJlbnRTbGlkZSksby50b3VjaE9iamVjdD17fSl9LGUucHJvdG90eXBlLnN3aXBlSGFuZGxlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2lmKCEoITE9PT1lLm9wdGlvbnMuc3dpcGV8fFwib250b3VjaGVuZFwiaW4gZG9jdW1lbnQmJiExPT09ZS5vcHRpb25zLnN3aXBlfHwhMT09PWUub3B0aW9ucy5kcmFnZ2FibGUmJi0xIT09aS50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSkpc3dpdGNoKGUudG91Y2hPYmplY3QuZmluZ2VyQ291bnQ9aS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlcz9pLm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGg6MSxlLnRvdWNoT2JqZWN0Lm1pblN3aXBlPWUubGlzdFdpZHRoL2Uub3B0aW9ucy50b3VjaFRocmVzaG9sZCwhMD09PWUub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcmJihlLnRvdWNoT2JqZWN0Lm1pblN3aXBlPWUubGlzdEhlaWdodC9lLm9wdGlvbnMudG91Y2hUaHJlc2hvbGQpLGkuZGF0YS5hY3Rpb24pe2Nhc2VcInN0YXJ0XCI6ZS5zd2lwZVN0YXJ0KGkpO2JyZWFrO2Nhc2VcIm1vdmVcIjplLnN3aXBlTW92ZShpKTticmVhaztjYXNlXCJlbmRcIjplLnN3aXBlRW5kKGkpfX0sZS5wcm90b3R5cGUuc3dpcGVNb3ZlPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbyxzLG4scixsPXRoaXM7cmV0dXJuIG49dm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50P2kub3JpZ2luYWxFdmVudC50b3VjaGVzOm51bGwsISghbC5kcmFnZ2luZ3x8bC5zY3JvbGxpbmd8fG4mJjEhPT1uLmxlbmd0aCkmJihlPWwuZ2V0TGVmdChsLmN1cnJlbnRTbGlkZSksbC50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PW4/blswXS5wYWdlWDppLmNsaWVudFgsbC50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PW4/blswXS5wYWdlWTppLmNsaWVudFksbC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhsLnRvdWNoT2JqZWN0LmN1clgtbC50b3VjaE9iamVjdC5zdGFydFgsMikpKSxyPU1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KGwudG91Y2hPYmplY3QuY3VyWS1sLnRvdWNoT2JqZWN0LnN0YXJ0WSwyKSkpLCFsLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYhbC5zd2lwaW5nJiZyPjQ/KGwuc2Nyb2xsaW5nPSEwLCExKTooITA9PT1sLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYobC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1yKSx0PWwuc3dpcGVEaXJlY3Rpb24oKSx2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQmJmwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+NCYmKGwuc3dpcGluZz0hMCxpLnByZXZlbnREZWZhdWx0KCkpLHM9KCExPT09bC5vcHRpb25zLnJ0bD8xOi0xKSoobC50b3VjaE9iamVjdC5jdXJYPmwudG91Y2hPYmplY3Quc3RhcnRYPzE6LTEpLCEwPT09bC5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyYmKHM9bC50b3VjaE9iamVjdC5jdXJZPmwudG91Y2hPYmplY3Quc3RhcnRZPzE6LTEpLG89bC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCxsLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITEsITE9PT1sLm9wdGlvbnMuaW5maW5pdGUmJigwPT09bC5jdXJyZW50U2xpZGUmJlwicmlnaHRcIj09PXR8fGwuY3VycmVudFNsaWRlPj1sLmdldERvdENvdW50KCkmJlwibGVmdFwiPT09dCkmJihvPWwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgqbC5vcHRpb25zLmVkZ2VGcmljdGlvbixsLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITApLCExPT09bC5vcHRpb25zLnZlcnRpY2FsP2wuc3dpcGVMZWZ0PWUrbypzOmwuc3dpcGVMZWZ0PWUrbyoobC4kbGlzdC5oZWlnaHQoKS9sLmxpc3RXaWR0aCkqcywhMD09PWwub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcmJihsLnN3aXBlTGVmdD1lK28qcyksITAhPT1sLm9wdGlvbnMuZmFkZSYmITEhPT1sLm9wdGlvbnMudG91Y2hNb3ZlJiYoITA9PT1sLmFuaW1hdGluZz8obC5zd2lwZUxlZnQ9bnVsbCwhMSk6dm9pZCBsLnNldENTUyhsLnN3aXBlTGVmdCkpKSl9LGUucHJvdG90eXBlLnN3aXBlU3RhcnQ9ZnVuY3Rpb24oaSl7dmFyIGUsdD10aGlzO2lmKHQuaW50ZXJydXB0ZWQ9ITAsMSE9PXQudG91Y2hPYmplY3QuZmluZ2VyQ291bnR8fHQuc2xpZGVDb3VudDw9dC5vcHRpb25zLnNsaWRlc1RvU2hvdylyZXR1cm4gdC50b3VjaE9iamVjdD17fSwhMTt2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQmJnZvaWQgMCE9PWkub3JpZ2luYWxFdmVudC50b3VjaGVzJiYoZT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXSksdC50b3VjaE9iamVjdC5zdGFydFg9dC50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PWU/ZS5wYWdlWDppLmNsaWVudFgsdC50b3VjaE9iamVjdC5zdGFydFk9dC50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PWU/ZS5wYWdlWTppLmNsaWVudFksdC5kcmFnZ2luZz0hMH0sZS5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXM9ZS5wcm90b3R5cGUuc2xpY2tVbmZpbHRlcj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7bnVsbCE9PWkuJHNsaWRlc0NhY2hlJiYoaS51bmxvYWQoKSxpLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksaS4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oaS4kc2xpZGVUcmFjayksaS5yZWluaXQoKSl9LGUucHJvdG90eXBlLnVubG9hZD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aShcIi5zbGljay1jbG9uZWRcIixlLiRzbGlkZXIpLnJlbW92ZSgpLGUuJGRvdHMmJmUuJGRvdHMucmVtb3ZlKCksZS4kcHJldkFycm93JiZlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLnByZXZBcnJvdykmJmUuJHByZXZBcnJvdy5yZW1vdmUoKSxlLiRuZXh0QXJyb3cmJmUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMubmV4dEFycm93KSYmZS4kbmV4dEFycm93LnJlbW92ZSgpLGUuJHNsaWRlcy5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLmNzcyhcIndpZHRoXCIsXCJcIil9LGUucHJvdG90eXBlLnVuc2xpY2s9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztlLiRzbGlkZXIudHJpZ2dlcihcInVuc2xpY2tcIixbZSxpXSksZS5kZXN0cm95KCl9LGUucHJvdG90eXBlLnVwZGF0ZUFycm93cz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7TWF0aC5mbG9vcihpLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLCEwPT09aS5vcHRpb25zLmFycm93cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiFpLm9wdGlvbnMuaW5maW5pdGUmJihpLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIiksaS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLDA9PT1pLmN1cnJlbnRTbGlkZT8oaS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksaS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKTppLmN1cnJlbnRTbGlkZT49aS5zbGlkZUNvdW50LWkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiExPT09aS5vcHRpb25zLmNlbnRlck1vZGU/KGkuJG5leHRBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGkuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSk6aS5jdXJyZW50U2xpZGU+PWkuc2xpZGVDb3VudC0xJiYhMD09PWkub3B0aW9ucy5jZW50ZXJNb2RlJiYoaS4kbmV4dEFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksaS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKSl9LGUucHJvdG90eXBlLnVwZGF0ZURvdHM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO251bGwhPT1pLiRkb3RzJiYoaS4kZG90cy5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuZW5kKCksaS4kZG90cy5maW5kKFwibGlcIikuZXEoTWF0aC5mbG9vcihpLmN1cnJlbnRTbGlkZS9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKSl9LGUucHJvdG90eXBlLnZpc2liaWxpdHk9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kub3B0aW9ucy5hdXRvcGxheSYmKGRvY3VtZW50W2kuaGlkZGVuXT9pLmludGVycnVwdGVkPSEwOmkuaW50ZXJydXB0ZWQ9ITEpfSxpLmZuLnNsaWNrPWZ1bmN0aW9uKCl7dmFyIGksdCxvPXRoaXMscz1hcmd1bWVudHNbMF0sbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkscj1vLmxlbmd0aDtmb3IoaT0wO2k8cjtpKyspaWYoXCJvYmplY3RcIj09dHlwZW9mIHN8fHZvaWQgMD09PXM/b1tpXS5zbGljaz1uZXcgZShvW2ldLHMpOnQ9b1tpXS5zbGlja1tzXS5hcHBseShvW2ldLnNsaWNrLG4pLHZvaWQgMCE9PXQpcmV0dXJuIHQ7cmV0dXJuIG99fSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogY29sbGFwc2UuanMgdjMuNC4xXG4gKiBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy8zLjQvamF2YXNjcmlwdC8jY29sbGFwc2VcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qIGpzaGludCBsYXRlZGVmOiBmYWxzZSAqL1xuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuJHRyaWdnZXIgICAgICA9ICQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdLCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXScpXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gbnVsbFxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy4kZWxlbWVudCwgdGhpcy4kdHJpZ2dlcilcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRvZ2dsZSkgdGhpcy50b2dnbGUoKVxuICB9XG5cbiAgQ29sbGFwc2UuVkVSU0lPTiAgPSAnMy40LjEnXG5cbiAgQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTiA9IDM1MFxuXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xuICAgIHRvZ2dsZTogdHJ1ZVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIGFjdGl2ZXNEYXRhXG4gICAgdmFyIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmNoaWxkcmVuKCcucGFuZWwnKS5jaGlsZHJlbignLmluLCAuY29sbGFwc2luZycpXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgYWN0aXZlc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS50cmFuc2l0aW9uaW5nKSByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBQbHVnaW4uY2FsbChhY3RpdmVzLCAnaGlkZScpXG4gICAgICBhY3RpdmVzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbClcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLiR0cmlnZ2VyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8ICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy5jb2xsYXBzZScpXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZSBpbicpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICBbZGltZW5zaW9uXSgwKVxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkKGRvY3VtZW50KS5maW5kKHRoaXMub3B0aW9ucy5wYXJlbnQpXG4gICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgdGhpcy5vcHRpb25zLnBhcmVudCArICdcIl0nKVxuICAgICAgLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGdldFRhcmdldEZyb21UcmlnZ2VyKCRlbGVtZW50KSwgJGVsZW1lbnQpXG4gICAgICB9LCB0aGlzKSlcbiAgICAgIC5lbmQoKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJHRyaWdnZXIpIHtcbiAgICB2YXIgaXNPcGVuID0gJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJylcblxuICAgICRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgJHRyaWdnZXJcbiAgICAgIC50b2dnbGVDbGFzcygnY29sbGFwc2VkJywgIWlzT3BlbilcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRyaWdnZXIpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpXG4gICAgICB8fCAoaHJlZiA9ICR0cmlnZ2VyLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuXG4gICAgcmV0dXJuICQoZG9jdW1lbnQpLmZpbmQodGFyZ2V0KVxuICB9XG5cblxuICAvLyBDT0xMQVBTRSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbnMudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3Qob3B0aW9uKSkgb3B0aW9ucy50b2dnbGUgPSBmYWxzZVxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScsIChkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jb2xsYXBzZVxuXG4gICQuZm4uY29sbGFwc2UgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jb2xsYXBzZS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG5cblxuICAvLyBDT0xMQVBTRSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY29sbGFwc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNvbGxhcHNlID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuXG4gICAgaWYgKCEkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIHZhciAkdGFyZ2V0ID0gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRoaXMpXG4gICAgdmFyIGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICB2YXIgb3B0aW9uICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0O1xuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBub3c7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3ltYm9sO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvTnVtYmVyO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IG5vdyBmcm9tICcuL25vdy5qcyc7XG5pbXBvcnQgdG9OdW1iZXIgZnJvbSAnLi90b051bWJlci5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmdcbiAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgIDogdGltZVdhaXRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWJvdW5jZTtcbiIsImltcG9ydCBkZWJvdW5jZSBmcm9tICcuL2RlYm91bmNlLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gKlxuICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGhyb3R0bGU7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGdW5jdGlvbjtcbiIsImltcG9ydCBjb3JlSnNEYXRhIGZyb20gJy4vX2NvcmVKc0RhdGEuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hc2tlZDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5leHBvcnQgZGVmYXVsdCBjb3JlSnNEYXRhO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1NvdXJjZTtcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNNYXNrZWQgZnJvbSAnLi9faXNNYXNrZWQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTmF0aXZlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IGJhc2VJc05hdGl2ZSBmcm9tICcuL19iYXNlSXNOYXRpdmUuanMnO1xuaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vX2dldFZhbHVlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TmF0aXZlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVDcmVhdGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoRGVsZXRlO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hHZXQ7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEhhcztcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCJpbXBvcnQgaGFzaENsZWFyIGZyb20gJy4vX2hhc2hDbGVhci5qcyc7XG5pbXBvcnQgaGFzaERlbGV0ZSBmcm9tICcuL19oYXNoRGVsZXRlLmpzJztcbmltcG9ydCBoYXNoR2V0IGZyb20gJy4vX2hhc2hHZXQuanMnO1xuaW1wb3J0IGhhc2hIYXMgZnJvbSAnLi9faGFzaEhhcy5qcyc7XG5pbXBvcnQgaGFzaFNldCBmcm9tICcuL19oYXNoU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2g7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUNsZWFyO1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVxO1xuIiwiaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NvY0luZGV4T2Y7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVHZXQ7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVIYXM7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlU2V0O1xuIiwiaW1wb3J0IGxpc3RDYWNoZUNsZWFyIGZyb20gJy4vX2xpc3RDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVEZWxldGUgZnJvbSAnLi9fbGlzdENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVHZXQgZnJvbSAnLi9fbGlzdENhY2hlR2V0LmpzJztcbmltcG9ydCBsaXN0Q2FjaGVIYXMgZnJvbSAnLi9fbGlzdENhY2hlSGFzLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVTZXQgZnJvbSAnLi9fbGlzdENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBMaXN0Q2FjaGU7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5YWJsZTtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlR2V0O1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlSGFzO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVTZXQ7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsIi8qKlxuICogU2ltcGxlQmFyLmpzIC0gdjEuMC4wXG4gKiBTY3JvbGxiYXJzLCBzaW1wbGVyLlxuICogaHR0cHM6Ly9ncnNtdG8uZ2l0aHViLmlvL3NpbXBsZWJhci9cbiAqXG4gKiBNYWRlIGJ5IEFkcmllbiBEZW5hdCBmcm9tIGEgZm9yayBieSBKb25hdGhhbiBOaWNvbFxuICogVW5kZXIgTUlUIExpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyB0aHJvdHRsZSwgZGVib3VuY2UsIG1lbW9pemUgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IGNhblVzZURPTSBmcm9tICdjYW4tdXNlLWRvbSc7XG5cbmxldCBjYWNoZWRTY3JvbGxiYXJXaWR0aCA9IG51bGw7XG5sZXQgY2FjaGVkRGV2aWNlUGl4ZWxSYXRpbyA9IG51bGw7XG5cbmlmIChjYW5Vc2VET00pIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICBpZiAoY2FjaGVkRGV2aWNlUGl4ZWxSYXRpbyAhPT0gd2luZG93LmRldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgIGNhY2hlZERldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgIGNhY2hlZFNjcm9sbGJhcldpZHRoID0gbnVsbDtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxiYXJXaWR0aCgpIHtcbiAgaWYgKGNhY2hlZFNjcm9sbGJhcldpZHRoID09PSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNhY2hlZFNjcm9sbGJhcldpZHRoID0gMDtcbiAgICAgIHJldHVybiBjYWNoZWRTY3JvbGxiYXJXaWR0aDtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBib3guY2xhc3NMaXN0LmFkZCgnc2ltcGxlYmFyLWhpZGUtc2Nyb2xsYmFyJyk7XG4gICAgYm9keS5hcHBlbmRDaGlsZChib3gpO1xuICAgIGNvbnN0IHdpZHRoID0gYm94LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0O1xuICAgIGJvZHkucmVtb3ZlQ2hpbGQoYm94KTtcbiAgICBjYWNoZWRTY3JvbGxiYXJXaWR0aCA9IHdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlZFNjcm9sbGJhcldpZHRoO1xufVxuXG5mdW5jdGlvbiBnZXRFbGVtZW50V2luZG93KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgIWVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldykge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xufVxuZnVuY3Rpb24gZ2V0RWxlbWVudERvY3VtZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuXG5jbGFzcyBTaW1wbGVCYXIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLm9uU2Nyb2xsID0gKCkgPT4ge1xuICAgICAgY29uc3QgZWxXaW5kb3cgPSBnZXRFbGVtZW50V2luZG93KHRoaXMuZWwpO1xuXG4gICAgICBpZiAoIXRoaXMuc2Nyb2xsWFRpY2tpbmcpIHtcbiAgICAgICAgZWxXaW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuc2Nyb2xsWCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsWFRpY2tpbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuc2Nyb2xsWVRpY2tpbmcpIHtcbiAgICAgICAgZWxXaW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuc2Nyb2xsWSk7XG4gICAgICAgIHRoaXMuc2Nyb2xsWVRpY2tpbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuc2Nyb2xsaW5nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vblN0b3BTY3JvbGxpbmcoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zY3JvbGxYID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvblNjcm9sbGJhcigneCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcm9sbFhUaWNraW5nID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHRoaXMuc2Nyb2xsWSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmF4aXMueS5pc092ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb25TY3JvbGxiYXIoJ3knKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxZVGlja2luZyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU3RvcFNjcm9sbGluZyA9ICgpID0+IHtcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuc2Nyb2xsaW5nKTtcbiAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgdGhpcy5vbk1vdXNlRW50ZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuaXNNb3VzZUVudGVyaW5nKSB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMubW91c2VFbnRlcmVkKTtcbiAgICAgICAgdGhpcy5pc01vdXNlRW50ZXJpbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9uTW91c2VFbnRlcmVkKCk7XG4gICAgfTtcblxuICAgIHRoaXMub25Nb3VzZUVudGVyZWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLm1vdXNlRW50ZXJlZCk7XG4gICAgICB0aGlzLmlzTW91c2VFbnRlcmluZyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICB0aGlzLm9uTW91c2VNb3ZlID0gZSA9PiB7XG4gICAgICB0aGlzLm1vdXNlWCA9IGUuY2xpZW50WDtcbiAgICAgIHRoaXMubW91c2VZID0gZS5jbGllbnRZO1xuXG4gICAgICBpZiAodGhpcy5heGlzLnguaXNPdmVyZmxvd2luZyB8fCB0aGlzLmF4aXMueC5mb3JjZVZpc2libGUpIHtcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZUZvckF4aXMoJ3gnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmcgfHwgdGhpcy5heGlzLnkuZm9yY2VWaXNpYmxlKSB7XG4gICAgICAgIHRoaXMub25Nb3VzZU1vdmVGb3JBeGlzKCd5Jyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub25Nb3VzZUxlYXZlID0gKCkgPT4ge1xuICAgICAgdGhpcy5vbk1vdXNlTW92ZS5jYW5jZWwoKTtcblxuICAgICAgaWYgKHRoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmcgfHwgdGhpcy5heGlzLnguZm9yY2VWaXNpYmxlKSB7XG4gICAgICAgIHRoaXMub25Nb3VzZUxlYXZlRm9yQXhpcygneCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyB8fCB0aGlzLmF4aXMueS5mb3JjZVZpc2libGUpIHtcbiAgICAgICAgdGhpcy5vbk1vdXNlTGVhdmVGb3JBeGlzKCd5Jyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubW91c2VYID0gLTE7XG4gICAgICB0aGlzLm1vdXNlWSA9IC0xO1xuICAgIH07XG5cbiAgICB0aGlzLm9uV2luZG93UmVzaXplID0gKCkgPT4ge1xuICAgICAgLy8gUmVjYWxjdWxhdGUgc2Nyb2xsYmFyV2lkdGggaW4gY2FzZSBpdCdzIGEgem9vbVxuICAgICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHRoaXMuZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgICAgIHRoaXMuaGlkZU5hdGl2ZVNjcm9sbGJhcigpO1xuICAgIH07XG5cbiAgICB0aGlzLm9uUG9pbnRlckV2ZW50ID0gZSA9PiB7XG4gICAgICBsZXQgaXNXaXRoaW5UcmFja1hCb3VuZHMsIGlzV2l0aGluVHJhY2tZQm91bmRzO1xuICAgICAgdGhpcy5heGlzLngudHJhY2sucmVjdCA9IHRoaXMuYXhpcy54LnRyYWNrLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5heGlzLnkudHJhY2sucmVjdCA9IHRoaXMuYXhpcy55LnRyYWNrLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAodGhpcy5heGlzLnguaXNPdmVyZmxvd2luZyB8fCB0aGlzLmF4aXMueC5mb3JjZVZpc2libGUpIHtcbiAgICAgICAgaXNXaXRoaW5UcmFja1hCb3VuZHMgPSB0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuYXhpcy54LnRyYWNrLnJlY3QpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyB8fCB0aGlzLmF4aXMueS5mb3JjZVZpc2libGUpIHtcbiAgICAgICAgaXNXaXRoaW5UcmFja1lCb3VuZHMgPSB0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuYXhpcy55LnRyYWNrLnJlY3QpO1xuICAgICAgfSAvLyBJZiBhbnkgcG9pbnRlciBldmVudCBpcyBjYWxsZWQgb24gdGhlIHNjcm9sbGJhclxuXG5cbiAgICAgIGlmIChpc1dpdGhpblRyYWNrWEJvdW5kcyB8fCBpc1dpdGhpblRyYWNrWUJvdW5kcykge1xuICAgICAgICAvLyBQcmV2ZW50aW5nIHRoZSBldmVudCdzIGRlZmF1bHQgYWN0aW9uIHN0b3BzIHRleHQgYmVpbmdcbiAgICAgICAgLy8gc2VsZWN0YWJsZSBkdXJpbmcgdGhlIGRyYWcuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBldmVudCBsZWFraW5nXG5cbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2Vkb3duJykge1xuICAgICAgICAgIGlmIChpc1dpdGhpblRyYWNrWEJvdW5kcykge1xuICAgICAgICAgICAgdGhpcy5heGlzLnguc2Nyb2xsYmFyLnJlY3QgPSB0aGlzLmF4aXMueC5zY3JvbGxiYXIuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuYXhpcy54LnNjcm9sbGJhci5yZWN0KSkge1xuICAgICAgICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0KGUsICd4Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLm9uVHJhY2tDbGljayhlLCAneCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1dpdGhpblRyYWNrWUJvdW5kcykge1xuICAgICAgICAgICAgdGhpcy5heGlzLnkuc2Nyb2xsYmFyLnJlY3QgPSB0aGlzLmF4aXMueS5zY3JvbGxiYXIuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuYXhpcy55LnNjcm9sbGJhci5yZWN0KSkge1xuICAgICAgICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0KGUsICd5Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLm9uVHJhY2tDbGljayhlLCAneScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmRyYWcgPSBlID0+IHtcbiAgICAgIGxldCBldmVudE9mZnNldDtcbiAgICAgIGNvbnN0IHRyYWNrID0gdGhpcy5heGlzW3RoaXMuZHJhZ2dlZEF4aXNdLnRyYWNrO1xuICAgICAgY29uc3QgdHJhY2tTaXplID0gdHJhY2sucmVjdFt0aGlzLmF4aXNbdGhpcy5kcmFnZ2VkQXhpc10uc2l6ZUF0dHJdO1xuICAgICAgY29uc3Qgc2Nyb2xsYmFyID0gdGhpcy5heGlzW3RoaXMuZHJhZ2dlZEF4aXNdLnNjcm9sbGJhcjtcbiAgICAgIGNvbnN0IGNvbnRlbnRTaXplID0gdGhpcy5jb250ZW50V3JhcHBlckVsW3RoaXMuYXhpc1t0aGlzLmRyYWdnZWRBeGlzXS5zY3JvbGxTaXplQXR0cl07XG4gICAgICBjb25zdCBob3N0U2l6ZSA9IHBhcnNlSW50KHRoaXMuZWxTdHlsZXNbdGhpcy5heGlzW3RoaXMuZHJhZ2dlZEF4aXNdLnNpemVBdHRyXSwgMTApO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKHRoaXMuZHJhZ2dlZEF4aXMgPT09ICd5Jykge1xuICAgICAgICBldmVudE9mZnNldCA9IGUucGFnZVk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudE9mZnNldCA9IGUucGFnZVg7XG4gICAgICB9IC8vIENhbGN1bGF0ZSBob3cgZmFyIHRoZSB1c2VyJ3MgbW91c2UgaXMgZnJvbSB0aGUgdG9wL2xlZnQgb2YgdGhlIHNjcm9sbGJhciAobWludXMgdGhlIGRyYWdPZmZzZXQpLlxuXG5cbiAgICAgIGxldCBkcmFnUG9zID0gZXZlbnRPZmZzZXQgLSB0cmFjay5yZWN0W3RoaXMuYXhpc1t0aGlzLmRyYWdnZWRBeGlzXS5vZmZzZXRBdHRyXSAtIHRoaXMuYXhpc1t0aGlzLmRyYWdnZWRBeGlzXS5kcmFnT2Zmc2V0OyAvLyBDb252ZXJ0IHRoZSBtb3VzZSBwb3NpdGlvbiBpbnRvIGEgcGVyY2VudGFnZSBvZiB0aGUgc2Nyb2xsYmFyIGhlaWdodC93aWR0aC5cblxuICAgICAgbGV0IGRyYWdQZXJjID0gZHJhZ1BvcyAvICh0cmFja1NpemUgLSBzY3JvbGxiYXIuc2l6ZSk7IC8vIFNjcm9sbCB0aGUgY29udGVudCBieSB0aGUgc2FtZSBwZXJjZW50YWdlLlxuXG4gICAgICBsZXQgc2Nyb2xsUG9zID0gZHJhZ1BlcmMgKiAoY29udGVudFNpemUgLSBob3N0U2l6ZSk7IC8vIEZpeCBicm93c2VycyBpbmNvbnNpc3RlbmN5IG9uIFJUTFxuXG4gICAgICBpZiAodGhpcy5kcmFnZ2VkQXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgIHNjcm9sbFBvcyA9IHRoaXMuaXNSdGwgJiYgU2ltcGxlQmFyLmdldFJ0bEhlbHBlcnMoKS5pc1Njcm9sbE9yaWdpbkF0WmVybyA/IHNjcm9sbFBvcyAtICh0cmFja1NpemUgKyBzY3JvbGxiYXIuc2l6ZSkgOiBzY3JvbGxQb3M7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbFt0aGlzLmF4aXNbdGhpcy5kcmFnZ2VkQXhpc10uc2Nyb2xsT2Zmc2V0QXR0cl0gPSBzY3JvbGxQb3M7XG4gICAgfTtcblxuICAgIHRoaXMub25FbmREcmFnID0gZSA9PiB7XG4gICAgICBjb25zdCBlbERvY3VtZW50ID0gZ2V0RWxlbWVudERvY3VtZW50KHRoaXMuZWwpO1xuICAgICAgY29uc3QgZWxXaW5kb3cgPSBnZXRFbGVtZW50V2luZG93KHRoaXMuZWwpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuZHJhZ2dpbmcpO1xuICAgICAgZWxEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmRyYWcsIHRydWUpO1xuICAgICAgZWxEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbkVuZERyYWcsIHRydWUpO1xuICAgICAgdGhpcy5yZW1vdmVQcmV2ZW50Q2xpY2tJZCA9IGVsV2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAvLyBSZW1vdmUgdGhlc2UgYXN5bmNocm9ub3VzbHkgc28gd2Ugc3RpbGwgc3VwcHJlc3MgY2xpY2sgZXZlbnRzXG4gICAgICAgIC8vIGdlbmVyYXRlZCBzaW11bHRhbmVvdXNseSB3aXRoIG1vdXNldXAuXG4gICAgICAgIGVsRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnByZXZlbnRDbGljaywgdHJ1ZSk7XG4gICAgICAgIGVsRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLnByZXZlbnRDbGljaywgdHJ1ZSk7XG4gICAgICAgIHRoaXMucmVtb3ZlUHJldmVudENsaWNrSWQgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMucHJldmVudENsaWNrID0gZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG5cbiAgICB0aGlzLmVsID0gZWxlbWVudDtcbiAgICB0aGlzLm1pblNjcm9sbGJhcldpZHRoID0gMjA7XG4gICAgdGhpcy5zdG9wU2Nyb2xsRGVsYXkgPSAxNzU7XG4gICAgdGhpcy5vcHRpb25zID0geyAuLi5TaW1wbGVCYXIuZGVmYXVsdE9wdGlvbnMsXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcbiAgICB0aGlzLmNsYXNzTmFtZXMgPSB7IC4uLlNpbXBsZUJhci5kZWZhdWx0T3B0aW9ucy5jbGFzc05hbWVzLFxuICAgICAgLi4udGhpcy5vcHRpb25zLmNsYXNzTmFtZXNcbiAgICB9O1xuICAgIHRoaXMuYXhpcyA9IHtcbiAgICAgIHg6IHtcbiAgICAgICAgc2Nyb2xsT2Zmc2V0QXR0cjogJ3Njcm9sbExlZnQnLFxuICAgICAgICBzaXplQXR0cjogJ3dpZHRoJyxcbiAgICAgICAgc2Nyb2xsU2l6ZUF0dHI6ICdzY3JvbGxXaWR0aCcsXG4gICAgICAgIG9mZnNldFNpemVBdHRyOiAnb2Zmc2V0V2lkdGgnLFxuICAgICAgICBvZmZzZXRBdHRyOiAnbGVmdCcsXG4gICAgICAgIG92ZXJmbG93QXR0cjogJ292ZXJmbG93WCcsXG4gICAgICAgIGRyYWdPZmZzZXQ6IDAsXG4gICAgICAgIGlzT3ZlcmZsb3dpbmc6IHRydWUsXG4gICAgICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgICAgIGZvcmNlVmlzaWJsZTogZmFsc2UsXG4gICAgICAgIHRyYWNrOiB7fSxcbiAgICAgICAgc2Nyb2xsYmFyOiB7fVxuICAgICAgfSxcbiAgICAgIHk6IHtcbiAgICAgICAgc2Nyb2xsT2Zmc2V0QXR0cjogJ3Njcm9sbFRvcCcsXG4gICAgICAgIHNpemVBdHRyOiAnaGVpZ2h0JyxcbiAgICAgICAgc2Nyb2xsU2l6ZUF0dHI6ICdzY3JvbGxIZWlnaHQnLFxuICAgICAgICBvZmZzZXRTaXplQXR0cjogJ29mZnNldEhlaWdodCcsXG4gICAgICAgIG9mZnNldEF0dHI6ICd0b3AnLFxuICAgICAgICBvdmVyZmxvd0F0dHI6ICdvdmVyZmxvd1knLFxuICAgICAgICBkcmFnT2Zmc2V0OiAwLFxuICAgICAgICBpc092ZXJmbG93aW5nOiB0cnVlLFxuICAgICAgICBpc1Zpc2libGU6IGZhbHNlLFxuICAgICAgICBmb3JjZVZpc2libGU6IGZhbHNlLFxuICAgICAgICB0cmFjazoge30sXG4gICAgICAgIHNjcm9sbGJhcjoge31cbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMucmVtb3ZlUHJldmVudENsaWNrSWQgPSBudWxsO1xuICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmlzTW91c2VFbnRlcmluZyA9IGZhbHNlOyAvLyBEb24ndCByZS1pbnN0YW50aWF0ZSBvdmVyIGFuIGV4aXN0aW5nIG9uZVxuXG4gICAgaWYgKFNpbXBsZUJhci5pbnN0YW5jZXMuaGFzKHRoaXMuZWwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2xhc3NOYW1lcykge1xuICAgICAgY29uc29sZS53YXJuKCdzaW1wbGViYXI6IGNsYXNzTmFtZXMgb3B0aW9uIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSBvdmVycmlkZSB0aGUgc3R5bGVzIHdpdGggQ1NTIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYXV0b0hpZGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcInNpbXBsZWJhcjogYXV0b0hpZGUgb3B0aW9uIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgQ1NTIGluc3RlYWQ6ICcuc2ltcGxlYmFyLXNjcm9sbGJhcjo6YmVmb3JlIHsgb3BhY2l0eTogMC41IH07JyBmb3IgYXV0b0hpZGU6IGZhbHNlXCIpO1xuICAgIH1cblxuICAgIHRoaXMucmVjYWxjdWxhdGUgPSB0aHJvdHRsZSh0aGlzLnJlY2FsY3VsYXRlLCA2NCk7XG4gICAgdGhpcy5vbk1vdXNlTW92ZSA9IHRocm90dGxlKHRoaXMub25Nb3VzZU1vdmUsIDY0KTtcbiAgICB0aGlzLm9uV2luZG93UmVzaXplID0gZGVib3VuY2UodGhpcy5vbldpbmRvd1Jlc2l6ZSwgNjQsIHtcbiAgICAgIGxlYWRpbmc6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLm9uU3RvcFNjcm9sbGluZyA9IGRlYm91bmNlKHRoaXMub25TdG9wU2Nyb2xsaW5nLCB0aGlzLnN0b3BTY3JvbGxEZWxheSk7XG4gICAgdGhpcy5vbk1vdXNlRW50ZXJlZCA9IGRlYm91bmNlKHRoaXMub25Nb3VzZUVudGVyZWQsIHRoaXMuc3RvcFNjcm9sbERlbGF5KTtcbiAgICBTaW1wbGVCYXIuZ2V0UnRsSGVscGVycyA9IG1lbW9pemUoU2ltcGxlQmFyLmdldFJ0bEhlbHBlcnMpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG4gIC8qKlxuICAgKiBTdGF0aWMgcHJvcGVydGllc1xuICAgKi9cblxuICAvKipcbiAgICogSGVscGVyIHRvIGZpeCBicm93c2VycyBpbmNvbnNpc3RlbmN5IG9uIFJUTDpcbiAgICogIC0gRmlyZWZveCBpbnZlcnRzIHRoZSBzY3JvbGxiYXIgaW5pdGlhbCBwb3NpdGlvblxuICAgKiAgLSBJRTExIGludmVydHMgYm90aCBzY3JvbGxiYXIgcG9zaXRpb24gYW5kIHNjcm9sbGluZyBvZmZzZXRcbiAgICogRGlyZWN0bHkgaW5zcGlyZWQgYnkgQEtpbmdTb3JhJ3MgT3ZlcmxheVNjcm9sbGJhcnMgaHR0cHM6Ly9naXRodWIuY29tL0tpbmdTb3JhL092ZXJsYXlTY3JvbGxiYXJzL2Jsb2IvbWFzdGVyL2pzL092ZXJsYXlTY3JvbGxiYXJzLmpzI0wxNjM0XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldFJ0bEhlbHBlcnMoKSB7XG4gICAgY29uc3QgZHVtbXlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkdW1teURpdi5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cInNpbXBsZWJhci1kdW1teS1zY3JvbGxiYXItc2l6ZVwiPjxkaXY+PC9kaXY+PC9kaXY+JztcbiAgICBjb25zdCBzY3JvbGxiYXJEdW1teUVsID0gZHVtbXlEaXYuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgY29uc3QgZHVtbXlDaGlsZCA9IHNjcm9sbGJhckR1bW15RWwuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxiYXJEdW1teUVsKTtcbiAgICBzY3JvbGxiYXJEdW1teUVsLnNjcm9sbExlZnQgPSAwO1xuICAgIGNvbnN0IGR1bW15Q29udGFpbmVyT2Zmc2V0ID0gU2ltcGxlQmFyLmdldE9mZnNldChzY3JvbGxiYXJEdW1teUVsKTtcbiAgICBjb25zdCBkdW1teUNoaWxkT2Zmc2V0ID0gU2ltcGxlQmFyLmdldE9mZnNldChkdW1teUNoaWxkKTtcbiAgICBzY3JvbGxiYXJEdW1teUVsLnNjcm9sbExlZnQgPSAtOTk5O1xuICAgIGNvbnN0IGR1bW15Q2hpbGRPZmZzZXRBZnRlclNjcm9sbCA9IFNpbXBsZUJhci5nZXRPZmZzZXQoZHVtbXlDaGlsZCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIGRldGVybWluZXMgaWYgdGhlIHNjcm9sbGluZyBpcyByZXNwb25kaW5nIHdpdGggbmVnYXRpdmUgdmFsdWVzXG4gICAgICBpc1Njcm9sbE9yaWdpbkF0WmVybzogZHVtbXlDb250YWluZXJPZmZzZXQubGVmdCAhPT0gZHVtbXlDaGlsZE9mZnNldC5sZWZ0LFxuICAgICAgLy8gZGV0ZXJtaW5lcyBpZiB0aGUgb3JpZ2luIHNjcm9sbGJhciBwb3NpdGlvbiBpcyBpbnZlcnRlZCBvciBub3QgKHBvc2l0aW9uZWQgb24gbGVmdCBvciByaWdodClcbiAgICAgIGlzU2Nyb2xsaW5nVG9OZWdhdGl2ZTogZHVtbXlDaGlsZE9mZnNldC5sZWZ0ICE9PSBkdW1teUNoaWxkT2Zmc2V0QWZ0ZXJTY3JvbGwubGVmdFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0T2Zmc2V0KGVsKSB7XG4gICAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGVsRG9jdW1lbnQgPSBnZXRFbGVtZW50RG9jdW1lbnQoZWwpO1xuICAgIGNvbnN0IGVsV2luZG93ID0gZ2V0RWxlbWVudFdpbmRvdyhlbCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyAoZWxXaW5kb3cucGFnZVlPZmZzZXQgfHwgZWxEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIChlbFdpbmRvdy5wYWdlWE9mZnNldCB8fCBlbERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KVxuICAgIH07XG4gIH1cblxuICBpbml0KCkge1xuICAgIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlLCBzbyB3ZSBrbm93IHRoaXMgRE9NIG5vZGUgaGFzIGFscmVhZHkgYmVlbiBpbnN0YW5jaWVkXG4gICAgU2ltcGxlQmFyLmluc3RhbmNlcy5zZXQodGhpcy5lbCwgdGhpcyk7IC8vIFdlIHN0b3AgaGVyZSBvbiBzZXJ2ZXItc2lkZVxuXG4gICAgaWYgKGNhblVzZURPTSkge1xuICAgICAgdGhpcy5pbml0RE9NKCk7XG4gICAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5nZXRTY3JvbGxiYXJXaWR0aCgpO1xuICAgICAgdGhpcy5yZWNhbGN1bGF0ZSgpO1xuICAgICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgaW5pdERPTSgpIHtcbiAgICAvLyBtYWtlIHN1cmUgdGhpcyBlbGVtZW50IGRvZXNuJ3QgaGF2ZSB0aGUgZWxlbWVudHMgeWV0XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh0aGlzLmVsLmNoaWxkcmVuLCBjaGlsZCA9PiBjaGlsZC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jbGFzc05hbWVzLndyYXBwZXIpKS5sZW5ndGgpIHtcbiAgICAgIC8vIGFzc3VtZSB0aGF0IGVsZW1lbnQgaGFzIGhpcyBET00gYWxyZWFkeSBpbml0aWF0ZWRcbiAgICAgIHRoaXMud3JhcHBlckVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGAuJHt0aGlzLmNsYXNzTmFtZXMud3JhcHBlcn1gKTtcbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbCA9IHRoaXMub3B0aW9ucy5zY3JvbGxhYmxlTm9kZSB8fCB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3RoaXMuY2xhc3NOYW1lcy5jb250ZW50V3JhcHBlcn1gKTtcbiAgICAgIHRoaXMuY29udGVudEVsID0gdGhpcy5vcHRpb25zLmNvbnRlbnROb2RlIHx8IHRoaXMuZWwucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5jbGFzc05hbWVzLmNvbnRlbnRFbH1gKTtcbiAgICAgIHRoaXMub2Zmc2V0RWwgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3RoaXMuY2xhc3NOYW1lcy5vZmZzZXR9YCk7XG4gICAgICB0aGlzLm1hc2tFbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5jbGFzc05hbWVzLm1hc2t9YCk7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyRWwgPSB0aGlzLmZpbmRDaGlsZCh0aGlzLndyYXBwZXJFbCwgYC4ke3RoaXMuY2xhc3NOYW1lcy5wbGFjZWhvbGRlcn1gKTtcbiAgICAgIHRoaXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGAuJHt0aGlzLmNsYXNzTmFtZXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsfWApO1xuICAgICAgdGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJFbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5jbGFzc05hbWVzLmhlaWdodEF1dG9PYnNlcnZlckVsfWApO1xuICAgICAgdGhpcy5heGlzLngudHJhY2suZWwgPSB0aGlzLmZpbmRDaGlsZCh0aGlzLmVsLCBgLiR7dGhpcy5jbGFzc05hbWVzLnRyYWNrfS4ke3RoaXMuY2xhc3NOYW1lcy5ob3Jpem9udGFsfWApO1xuICAgICAgdGhpcy5heGlzLnkudHJhY2suZWwgPSB0aGlzLmZpbmRDaGlsZCh0aGlzLmVsLCBgLiR7dGhpcy5jbGFzc05hbWVzLnRyYWNrfS4ke3RoaXMuY2xhc3NOYW1lcy52ZXJ0aWNhbH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUHJlcGFyZSBET01cbiAgICAgIHRoaXMud3JhcHBlckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMub2Zmc2V0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMubWFza0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmNvbnRlbnRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5wbGFjZWhvbGRlckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmhlaWdodEF1dG9PYnNlcnZlcldyYXBwZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy53cmFwcGVyRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMud3JhcHBlcik7XG4gICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuY29udGVudFdyYXBwZXIpO1xuICAgICAgdGhpcy5vZmZzZXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5vZmZzZXQpO1xuICAgICAgdGhpcy5tYXNrRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMubWFzayk7XG4gICAgICB0aGlzLmNvbnRlbnRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5jb250ZW50RWwpO1xuICAgICAgdGhpcy5wbGFjZWhvbGRlckVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLnBsYWNlaG9sZGVyKTtcbiAgICAgIHRoaXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmhlaWdodEF1dG9PYnNlcnZlcldyYXBwZXJFbCk7XG4gICAgICB0aGlzLmhlaWdodEF1dG9PYnNlcnZlckVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmhlaWdodEF1dG9PYnNlcnZlckVsKTtcblxuICAgICAgd2hpbGUgKHRoaXMuZWwuZmlyc3RDaGlsZCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5hcHBlbmRDaGlsZCh0aGlzLmVsLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWwpO1xuICAgICAgdGhpcy5vZmZzZXRFbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRXcmFwcGVyRWwpO1xuICAgICAgdGhpcy5tYXNrRWwuYXBwZW5kQ2hpbGQodGhpcy5vZmZzZXRFbCk7XG4gICAgICB0aGlzLmhlaWdodEF1dG9PYnNlcnZlcldyYXBwZXJFbC5hcHBlbmRDaGlsZCh0aGlzLmhlaWdodEF1dG9PYnNlcnZlckVsKTtcbiAgICAgIHRoaXMud3JhcHBlckVsLmFwcGVuZENoaWxkKHRoaXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsKTtcbiAgICAgIHRoaXMud3JhcHBlckVsLmFwcGVuZENoaWxkKHRoaXMubWFza0VsKTtcbiAgICAgIHRoaXMud3JhcHBlckVsLmFwcGVuZENoaWxkKHRoaXMucGxhY2Vob2xkZXJFbCk7XG4gICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMud3JhcHBlckVsKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuYXhpcy54LnRyYWNrLmVsIHx8ICF0aGlzLmF4aXMueS50cmFjay5lbCkge1xuICAgICAgY29uc3QgdHJhY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnN0IHNjcm9sbGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdHJhY2suY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMudHJhY2spO1xuICAgICAgc2Nyb2xsYmFyLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLnNjcm9sbGJhcik7XG4gICAgICB0cmFjay5hcHBlbmRDaGlsZChzY3JvbGxiYXIpO1xuICAgICAgdGhpcy5heGlzLngudHJhY2suZWwgPSB0cmFjay5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICB0aGlzLmF4aXMueC50cmFjay5lbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5ob3Jpem9udGFsKTtcbiAgICAgIHRoaXMuYXhpcy55LnRyYWNrLmVsID0gdHJhY2suY2xvbmVOb2RlKHRydWUpO1xuICAgICAgdGhpcy5heGlzLnkudHJhY2suZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMudmVydGljYWwpO1xuICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLmF4aXMueC50cmFjay5lbCk7XG4gICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMuYXhpcy55LnRyYWNrLmVsKTtcbiAgICB9XG5cbiAgICB0aGlzLmF4aXMueC5zY3JvbGxiYXIuZWwgPSB0aGlzLmF4aXMueC50cmFjay5lbC5xdWVyeVNlbGVjdG9yKGAuJHt0aGlzLmNsYXNzTmFtZXMuc2Nyb2xsYmFyfWApO1xuICAgIHRoaXMuYXhpcy55LnNjcm9sbGJhci5lbCA9IHRoaXMuYXhpcy55LnRyYWNrLmVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3RoaXMuY2xhc3NOYW1lcy5zY3JvbGxiYXJ9YCk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5hdXRvSGlkZSkge1xuICAgICAgdGhpcy5heGlzLnguc2Nyb2xsYmFyLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLnZpc2libGUpO1xuICAgICAgdGhpcy5heGlzLnkuc2Nyb2xsYmFyLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLnZpc2libGUpO1xuICAgIH1cblxuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdkYXRhLXNpbXBsZWJhcicsICdpbml0Jyk7XG4gIH1cblxuICBpbml0TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGVsV2luZG93ID0gZ2V0RWxlbWVudFdpbmRvdyh0aGlzLmVsKTsgLy8gRXZlbnQgbGlzdGVuZXJzXG5cbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm9uTW91c2VFbnRlcik7XG4gICAgWydtb3VzZWRvd24nLCAnY2xpY2snLCAnZGJsY2xpY2snXS5mb3JFYWNoKGUgPT4ge1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGUsIHRoaXMub25Qb2ludGVyRXZlbnQsIHRydWUpO1xuICAgIH0pO1xuICAgIFsndG91Y2hzdGFydCcsICd0b3VjaGVuZCcsICd0b3VjaG1vdmUnXS5mb3JFYWNoKGUgPT4ge1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGUsIHRoaXMub25Qb2ludGVyRXZlbnQsIHtcbiAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm9uTW91c2VMZWF2ZSk7XG4gICAgdGhpcy5jb250ZW50V3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpOyAvLyBCcm93c2VyIHpvb20gdHJpZ2dlcnMgYSB3aW5kb3cgcmVzaXplXG5cbiAgICBlbFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uV2luZG93UmVzaXplKTtcblxuICAgIGlmICh3aW5kb3cuUmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgIC8vIEhhY2sgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL1Jlc2l6ZU9ic2VydmVyL2lzc3Vlcy8zOFxuICAgICAgbGV0IHJlc2l6ZU9ic2VydmVyU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSBlbFdpbmRvdy5SZXNpemVPYnNlcnZlciB8fCBSZXNpemVPYnNlcnZlcjtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgcmVzaXplT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICBpZiAoIXJlc2l6ZU9ic2VydmVyU3RhcnRlZCkgcmV0dXJuO1xuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsKTtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmNvbnRlbnRFbCk7XG4gICAgICBlbFdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICByZXNpemVPYnNlcnZlclN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfSAvLyBUaGlzIGlzIHJlcXVpcmVkIHRvIGRldGVjdCBob3Jpem9udGFsIHNjcm9sbC4gVmVydGljYWwgc2Nyb2xsIG9ubHkgbmVlZHMgdGhlIHJlc2l6ZU9ic2VydmVyLlxuXG5cbiAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgZWxXaW5kb3cuTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlY2FsY3VsYXRlLmJpbmQodGhpcykpO1xuICAgIHRoaXMubXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuY29udGVudEVsLCB7XG4gICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgcmVjYWxjdWxhdGUoKSB7XG4gICAgY29uc3QgZWxXaW5kb3cgPSBnZXRFbGVtZW50V2luZG93KHRoaXMuZWwpO1xuICAgIHRoaXMuZWxTdHlsZXMgPSBlbFdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWwpO1xuICAgIHRoaXMuaXNSdGwgPSB0aGlzLmVsU3R5bGVzLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gICAgY29uc3QgY29udGVudEVsT2Zmc2V0V2lkdGggPSB0aGlzLmNvbnRlbnRFbC5vZmZzZXRXaWR0aDtcbiAgICBjb25zdCBpc0hlaWdodEF1dG8gPSB0aGlzLmhlaWdodEF1dG9PYnNlcnZlckVsLm9mZnNldEhlaWdodCA8PSAxO1xuICAgIGNvbnN0IGlzV2lkdGhBdXRvID0gdGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJFbC5vZmZzZXRXaWR0aCA8PSAxIHx8IGNvbnRlbnRFbE9mZnNldFdpZHRoID4gMDtcbiAgICBjb25zdCBjb250ZW50V3JhcHBlckVsT2Zmc2V0V2lkdGggPSB0aGlzLmNvbnRlbnRXcmFwcGVyRWwub2Zmc2V0V2lkdGg7XG4gICAgY29uc3QgZWxPdmVyZmxvd1ggPSB0aGlzLmVsU3R5bGVzLm92ZXJmbG93WDtcbiAgICBjb25zdCBlbE92ZXJmbG93WSA9IHRoaXMuZWxTdHlsZXMub3ZlcmZsb3dZO1xuICAgIHRoaXMuY29udGVudEVsLnN0eWxlLnBhZGRpbmcgPSBgJHt0aGlzLmVsU3R5bGVzLnBhZGRpbmdUb3B9ICR7dGhpcy5lbFN0eWxlcy5wYWRkaW5nUmlnaHR9ICR7dGhpcy5lbFN0eWxlcy5wYWRkaW5nQm90dG9tfSAke3RoaXMuZWxTdHlsZXMucGFkZGluZ0xlZnR9YDtcbiAgICB0aGlzLndyYXBwZXJFbC5zdHlsZS5tYXJnaW4gPSBgLSR7dGhpcy5lbFN0eWxlcy5wYWRkaW5nVG9wfSAtJHt0aGlzLmVsU3R5bGVzLnBhZGRpbmdSaWdodH0gLSR7dGhpcy5lbFN0eWxlcy5wYWRkaW5nQm90dG9tfSAtJHt0aGlzLmVsU3R5bGVzLnBhZGRpbmdMZWZ0fWA7XG4gICAgY29uc3QgY29udGVudEVsU2Nyb2xsSGVpZ2h0ID0gdGhpcy5jb250ZW50RWwuc2Nyb2xsSGVpZ2h0O1xuICAgIGNvbnN0IGNvbnRlbnRFbFNjcm9sbFdpZHRoID0gdGhpcy5jb250ZW50RWwuc2Nyb2xsV2lkdGg7XG4gICAgdGhpcy5jb250ZW50V3JhcHBlckVsLnN0eWxlLmhlaWdodCA9IGlzSGVpZ2h0QXV0byA/ICdhdXRvJyA6ICcxMDAlJzsgLy8gRGV0ZXJtaW5lIHBsYWNlaG9sZGVyIHNpemVcblxuICAgIHRoaXMucGxhY2Vob2xkZXJFbC5zdHlsZS53aWR0aCA9IGlzV2lkdGhBdXRvID8gYCR7Y29udGVudEVsT2Zmc2V0V2lkdGggfHwgY29udGVudEVsU2Nyb2xsV2lkdGh9cHhgIDogJ2F1dG8nO1xuICAgIHRoaXMucGxhY2Vob2xkZXJFbC5zdHlsZS5oZWlnaHQgPSBgJHtjb250ZW50RWxTY3JvbGxIZWlnaHR9cHhgO1xuICAgIGNvbnN0IGNvbnRlbnRXcmFwcGVyRWxPZmZzZXRIZWlnaHQgPSB0aGlzLmNvbnRlbnRXcmFwcGVyRWwub2Zmc2V0SGVpZ2h0O1xuICAgIHRoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmcgPSBjb250ZW50RWxPZmZzZXRXaWR0aCAhPT0gMCAmJiBjb250ZW50RWxTY3JvbGxXaWR0aCA+IGNvbnRlbnRFbE9mZnNldFdpZHRoO1xuICAgIHRoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmcgPSBjb250ZW50RWxTY3JvbGxIZWlnaHQgPiBjb250ZW50V3JhcHBlckVsT2Zmc2V0SGVpZ2h0OyAvLyBTZXQgaXNPdmVyZmxvd2luZyB0byBmYWxzZSBpZiB1c2VyIGV4cGxpY2l0ZWx5IHNldCBoaWRkZW4gb3ZlcmZsb3dcblxuICAgIHRoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmcgPSBlbE92ZXJmbG93WCA9PT0gJ2hpZGRlbicgPyBmYWxzZSA6IHRoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmc7XG4gICAgdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyA9IGVsT3ZlcmZsb3dZID09PSAnaGlkZGVuJyA/IGZhbHNlIDogdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZztcbiAgICB0aGlzLmF4aXMueC5mb3JjZVZpc2libGUgPSB0aGlzLm9wdGlvbnMuZm9yY2VWaXNpYmxlID09PSAneCcgfHwgdGhpcy5vcHRpb25zLmZvcmNlVmlzaWJsZSA9PT0gdHJ1ZTtcbiAgICB0aGlzLmF4aXMueS5mb3JjZVZpc2libGUgPSB0aGlzLm9wdGlvbnMuZm9yY2VWaXNpYmxlID09PSAneScgfHwgdGhpcy5vcHRpb25zLmZvcmNlVmlzaWJsZSA9PT0gdHJ1ZTtcbiAgICB0aGlzLmhpZGVOYXRpdmVTY3JvbGxiYXIoKTsgLy8gU2V0IGlzT3ZlcmZsb3dpbmcgdG8gZmFsc2UgaWYgc2Nyb2xsYmFyIGlzIG5vdCBuZWNlc3NhcnkgKGNvbnRlbnQgaXMgc2hvcnRlciB0aGFuIG9mZnNldClcblxuICAgIGxldCBvZmZzZXRGb3JYU2Nyb2xsYmFyID0gdGhpcy5heGlzLnguaXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAwO1xuICAgIGxldCBvZmZzZXRGb3JZU2Nyb2xsYmFyID0gdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAwO1xuICAgIHRoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmcgPSB0aGlzLmF4aXMueC5pc092ZXJmbG93aW5nICYmIGNvbnRlbnRFbFNjcm9sbFdpZHRoID4gY29udGVudFdyYXBwZXJFbE9mZnNldFdpZHRoIC0gb2Zmc2V0Rm9yWVNjcm9sbGJhcjtcbiAgICB0aGlzLmF4aXMueS5pc092ZXJmbG93aW5nID0gdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyAmJiBjb250ZW50RWxTY3JvbGxIZWlnaHQgPiBjb250ZW50V3JhcHBlckVsT2Zmc2V0SGVpZ2h0IC0gb2Zmc2V0Rm9yWFNjcm9sbGJhcjtcbiAgICB0aGlzLmF4aXMueC5zY3JvbGxiYXIuc2l6ZSA9IHRoaXMuZ2V0U2Nyb2xsYmFyU2l6ZSgneCcpO1xuICAgIHRoaXMuYXhpcy55LnNjcm9sbGJhci5zaXplID0gdGhpcy5nZXRTY3JvbGxiYXJTaXplKCd5Jyk7XG4gICAgdGhpcy5heGlzLnguc2Nyb2xsYmFyLmVsLnN0eWxlLndpZHRoID0gYCR7dGhpcy5heGlzLnguc2Nyb2xsYmFyLnNpemV9cHhgO1xuICAgIHRoaXMuYXhpcy55LnNjcm9sbGJhci5lbC5zdHlsZS5oZWlnaHQgPSBgJHt0aGlzLmF4aXMueS5zY3JvbGxiYXIuc2l6ZX1weGA7XG4gICAgdGhpcy5wb3NpdGlvblNjcm9sbGJhcigneCcpO1xuICAgIHRoaXMucG9zaXRpb25TY3JvbGxiYXIoJ3knKTtcbiAgICB0aGlzLnRvZ2dsZVRyYWNrVmlzaWJpbGl0eSgneCcpO1xuICAgIHRoaXMudG9nZ2xlVHJhY2tWaXNpYmlsaXR5KCd5Jyk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBzY3JvbGxiYXIgc2l6ZVxuICAgKi9cblxuXG4gIGdldFNjcm9sbGJhclNpemUoYXhpcyA9ICd5Jykge1xuICAgIGlmICghdGhpcy5heGlzW2F4aXNdLmlzT3ZlcmZsb3dpbmcpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRlbnRTaXplID0gdGhpcy5jb250ZW50RWxbdGhpcy5heGlzW2F4aXNdLnNjcm9sbFNpemVBdHRyXTtcbiAgICBjb25zdCB0cmFja1NpemUgPSB0aGlzLmF4aXNbYXhpc10udHJhY2suZWxbdGhpcy5heGlzW2F4aXNdLm9mZnNldFNpemVBdHRyXTtcbiAgICBsZXQgc2Nyb2xsYmFyU2l6ZTtcbiAgICBsZXQgc2Nyb2xsYmFyUmF0aW8gPSB0cmFja1NpemUgLyBjb250ZW50U2l6ZTsgLy8gQ2FsY3VsYXRlIG5ldyBoZWlnaHQvcG9zaXRpb24gb2YgZHJhZyBoYW5kbGUuXG5cbiAgICBzY3JvbGxiYXJTaXplID0gTWF0aC5tYXgofn4oc2Nyb2xsYmFyUmF0aW8gKiB0cmFja1NpemUpLCB0aGlzLm9wdGlvbnMuc2Nyb2xsYmFyTWluU2l6ZSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnNjcm9sbGJhck1heFNpemUpIHtcbiAgICAgIHNjcm9sbGJhclNpemUgPSBNYXRoLm1pbihzY3JvbGxiYXJTaXplLCB0aGlzLm9wdGlvbnMuc2Nyb2xsYmFyTWF4U2l6ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjcm9sbGJhclNpemU7XG4gIH1cblxuICBwb3NpdGlvblNjcm9sbGJhcihheGlzID0gJ3knKSB7XG4gICAgaWYgKCF0aGlzLmF4aXNbYXhpc10uaXNPdmVyZmxvd2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRlbnRTaXplID0gdGhpcy5jb250ZW50V3JhcHBlckVsW3RoaXMuYXhpc1theGlzXS5zY3JvbGxTaXplQXR0cl07XG4gICAgY29uc3QgdHJhY2tTaXplID0gdGhpcy5heGlzW2F4aXNdLnRyYWNrLmVsW3RoaXMuYXhpc1theGlzXS5vZmZzZXRTaXplQXR0cl07XG4gICAgY29uc3QgaG9zdFNpemUgPSBwYXJzZUludCh0aGlzLmVsU3R5bGVzW3RoaXMuYXhpc1theGlzXS5zaXplQXR0cl0sIDEwKTtcbiAgICBjb25zdCBzY3JvbGxiYXIgPSB0aGlzLmF4aXNbYXhpc10uc2Nyb2xsYmFyO1xuICAgIGxldCBzY3JvbGxPZmZzZXQgPSB0aGlzLmNvbnRlbnRXcmFwcGVyRWxbdGhpcy5heGlzW2F4aXNdLnNjcm9sbE9mZnNldEF0dHJdO1xuICAgIHNjcm9sbE9mZnNldCA9IGF4aXMgPT09ICd4JyAmJiB0aGlzLmlzUnRsICYmIFNpbXBsZUJhci5nZXRSdGxIZWxwZXJzKCkuaXNTY3JvbGxPcmlnaW5BdFplcm8gPyAtc2Nyb2xsT2Zmc2V0IDogc2Nyb2xsT2Zmc2V0O1xuICAgIGxldCBzY3JvbGxQb3VyY2VudCA9IHNjcm9sbE9mZnNldCAvIChjb250ZW50U2l6ZSAtIGhvc3RTaXplKTtcbiAgICBsZXQgaGFuZGxlT2Zmc2V0ID0gfn4oKHRyYWNrU2l6ZSAtIHNjcm9sbGJhci5zaXplKSAqIHNjcm9sbFBvdXJjZW50KTtcbiAgICBoYW5kbGVPZmZzZXQgPSBheGlzID09PSAneCcgJiYgdGhpcy5pc1J0bCAmJiBTaW1wbGVCYXIuZ2V0UnRsSGVscGVycygpLmlzU2Nyb2xsaW5nVG9OZWdhdGl2ZSA/IC1oYW5kbGVPZmZzZXQgKyAodHJhY2tTaXplIC0gc2Nyb2xsYmFyLnNpemUpIDogaGFuZGxlT2Zmc2V0O1xuICAgIHNjcm9sbGJhci5lbC5zdHlsZS50cmFuc2Zvcm0gPSBheGlzID09PSAneCcgPyBgdHJhbnNsYXRlM2QoJHtoYW5kbGVPZmZzZXR9cHgsIDAsIDApYCA6IGB0cmFuc2xhdGUzZCgwLCAke2hhbmRsZU9mZnNldH1weCwgMClgO1xuICB9XG5cbiAgdG9nZ2xlVHJhY2tWaXNpYmlsaXR5KGF4aXMgPSAneScpIHtcbiAgICBjb25zdCB0cmFjayA9IHRoaXMuYXhpc1theGlzXS50cmFjay5lbDtcbiAgICBjb25zdCBzY3JvbGxiYXIgPSB0aGlzLmF4aXNbYXhpc10uc2Nyb2xsYmFyLmVsO1xuXG4gICAgaWYgKHRoaXMuYXhpc1theGlzXS5pc092ZXJmbG93aW5nIHx8IHRoaXMuYXhpc1theGlzXS5mb3JjZVZpc2libGUpIHtcbiAgICAgIHRyYWNrLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwuc3R5bGVbdGhpcy5heGlzW2F4aXNdLm92ZXJmbG93QXR0cl0gPSAnc2Nyb2xsJztcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZChgJHt0aGlzLmNsYXNzTmFtZXMuc2Nyb2xsYWJsZX0tJHtheGlzfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFjay5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwuc3R5bGVbdGhpcy5heGlzW2F4aXNdLm92ZXJmbG93QXR0cl0gPSAnaGlkZGVuJztcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHt0aGlzLmNsYXNzTmFtZXMuc2Nyb2xsYWJsZX0tJHtheGlzfWApO1xuICAgIH0gLy8gRXZlbiBpZiBmb3JjZVZpc2libGUgaXMgZW5hYmxlZCwgc2Nyb2xsYmFyIGl0c2VsZiBzaG91bGQgYmUgaGlkZGVuXG5cblxuICAgIGlmICh0aGlzLmF4aXNbYXhpc10uaXNPdmVyZmxvd2luZykge1xuICAgICAgc2Nyb2xsYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY3JvbGxiYXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG4gIH1cblxuICBoaWRlTmF0aXZlU2Nyb2xsYmFyKCkge1xuICAgIHRoaXMub2Zmc2V0RWwuc3R5bGVbdGhpcy5pc1J0bCA/ICdsZWZ0JyA6ICdyaWdodCddID0gdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyB8fCB0aGlzLmF4aXMueS5mb3JjZVZpc2libGUgPyBgLSR7dGhpcy5zY3JvbGxiYXJXaWR0aH1weGAgOiAwO1xuICAgIHRoaXMub2Zmc2V0RWwuc3R5bGUuYm90dG9tID0gdGhpcy5heGlzLnguaXNPdmVyZmxvd2luZyB8fCB0aGlzLmF4aXMueC5mb3JjZVZpc2libGUgPyBgLSR7dGhpcy5zY3JvbGxiYXJXaWR0aH1weGAgOiAwO1xuICB9XG4gIC8qKlxuICAgKiBPbiBzY3JvbGwgZXZlbnQgaGFuZGxpbmdcbiAgICovXG5cblxuICBvbk1vdXNlTW92ZUZvckF4aXMoYXhpcyA9ICd5Jykge1xuICAgIHRoaXMuYXhpc1theGlzXS50cmFjay5yZWN0ID0gdGhpcy5heGlzW2F4aXNdLnRyYWNrLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMuYXhpc1theGlzXS5zY3JvbGxiYXIucmVjdCA9IHRoaXMuYXhpc1theGlzXS5zY3JvbGxiYXIuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgaXNXaXRoaW5TY3JvbGxiYXJCb3VuZHNYID0gdGhpcy5pc1dpdGhpbkJvdW5kcyh0aGlzLmF4aXNbYXhpc10uc2Nyb2xsYmFyLnJlY3QpO1xuXG4gICAgaWYgKGlzV2l0aGluU2Nyb2xsYmFyQm91bmRzWCkge1xuICAgICAgdGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5ob3Zlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXhpc1theGlzXS5zY3JvbGxiYXIuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuaG92ZXIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuYXhpc1theGlzXS50cmFjay5yZWN0KSkge1xuICAgICAgdGhpcy5heGlzW2F4aXNdLnRyYWNrLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmhvdmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5heGlzW2F4aXNdLnRyYWNrLmVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmhvdmVyKTtcbiAgICB9XG4gIH1cblxuICBvbk1vdXNlTGVhdmVGb3JBeGlzKGF4aXMgPSAneScpIHtcbiAgICB0aGlzLmF4aXNbYXhpc10udHJhY2suZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuaG92ZXIpO1xuICAgIHRoaXMuYXhpc1theGlzXS5zY3JvbGxiYXIuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuaG92ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uIHNjcm9sbGJhciBoYW5kbGUgZHJhZyBtb3ZlbWVudCBzdGFydHNcbiAgICovXG4gIG9uRHJhZ1N0YXJ0KGUsIGF4aXMgPSAneScpIHtcbiAgICBjb25zdCBlbERvY3VtZW50ID0gZ2V0RWxlbWVudERvY3VtZW50KHRoaXMuZWwpO1xuICAgIGNvbnN0IGVsV2luZG93ID0gZ2V0RWxlbWVudFdpbmRvdyh0aGlzLmVsKTtcbiAgICBjb25zdCBzY3JvbGxiYXIgPSB0aGlzLmF4aXNbYXhpc10uc2Nyb2xsYmFyOyAvLyBNZWFzdXJlIGhvdyBmYXIgdGhlIHVzZXIncyBtb3VzZSBpcyBmcm9tIHRoZSB0b3Agb2YgdGhlIHNjcm9sbGJhciBkcmFnIGhhbmRsZS5cblxuICAgIGNvbnN0IGV2ZW50T2Zmc2V0ID0gYXhpcyA9PT0gJ3knID8gZS5wYWdlWSA6IGUucGFnZVg7XG4gICAgdGhpcy5heGlzW2F4aXNdLmRyYWdPZmZzZXQgPSBldmVudE9mZnNldCAtIHNjcm9sbGJhci5yZWN0W3RoaXMuYXhpc1theGlzXS5vZmZzZXRBdHRyXTtcbiAgICB0aGlzLmRyYWdnZWRBeGlzID0gYXhpcztcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmRyYWdnaW5nKTtcbiAgICBlbERvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuZHJhZywgdHJ1ZSk7XG4gICAgZWxEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbkVuZERyYWcsIHRydWUpO1xuXG4gICAgaWYgKHRoaXMucmVtb3ZlUHJldmVudENsaWNrSWQgPT09IG51bGwpIHtcbiAgICAgIGVsRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnByZXZlbnRDbGljaywgdHJ1ZSk7XG4gICAgICBlbERvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5wcmV2ZW50Q2xpY2ssIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbFdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZW1vdmVQcmV2ZW50Q2xpY2tJZCk7XG4gICAgICB0aGlzLnJlbW92ZVByZXZlbnRDbGlja0lkID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERyYWcgc2Nyb2xsYmFyIGhhbmRsZVxuICAgKi9cblxuXG4gIG9uVHJhY2tDbGljayhlLCBheGlzID0gJ3knKSB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuY2xpY2tPblRyYWNrKSByZXR1cm47XG4gICAgY29uc3QgZWxXaW5kb3cgPSBnZXRFbGVtZW50V2luZG93KHRoaXMuZWwpO1xuICAgIHRoaXMuYXhpc1theGlzXS5zY3JvbGxiYXIucmVjdCA9IHRoaXMuYXhpc1theGlzXS5zY3JvbGxiYXIuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3Qgc2Nyb2xsYmFyID0gdGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhcjtcbiAgICBjb25zdCBzY3JvbGxiYXJPZmZzZXQgPSBzY3JvbGxiYXIucmVjdFt0aGlzLmF4aXNbYXhpc10ub2Zmc2V0QXR0cl07XG4gICAgY29uc3QgaG9zdFNpemUgPSBwYXJzZUludCh0aGlzLmVsU3R5bGVzW3RoaXMuYXhpc1theGlzXS5zaXplQXR0cl0sIDEwKTtcbiAgICBsZXQgc2Nyb2xsZWQgPSB0aGlzLmNvbnRlbnRXcmFwcGVyRWxbdGhpcy5heGlzW2F4aXNdLnNjcm9sbE9mZnNldEF0dHJdO1xuICAgIGNvbnN0IHQgPSBheGlzID09PSAneScgPyB0aGlzLm1vdXNlWSAtIHNjcm9sbGJhck9mZnNldCA6IHRoaXMubW91c2VYIC0gc2Nyb2xsYmFyT2Zmc2V0O1xuICAgIGNvbnN0IGRpciA9IHQgPCAwID8gLTEgOiAxO1xuICAgIGNvbnN0IHNjcm9sbFNpemUgPSBkaXIgPT09IC0xID8gc2Nyb2xsZWQgLSBob3N0U2l6ZSA6IHNjcm9sbGVkICsgaG9zdFNpemU7XG4gICAgY29uc3Qgc3BlZWQgPSA0MDtcblxuICAgIGNvbnN0IHNjcm9sbFRvID0gKCkgPT4ge1xuICAgICAgaWYgKGRpciA9PT0gLTEpIHtcbiAgICAgICAgaWYgKHNjcm9sbGVkID4gc2Nyb2xsU2l6ZSkge1xuICAgICAgICAgIHNjcm9sbGVkIC09IHNwZWVkO1xuICAgICAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgICBbdGhpcy5heGlzW2F4aXNdLm9mZnNldEF0dHJdOiBzY3JvbGxlZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsV2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzY3JvbGxUbyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzY3JvbGxlZCA8IHNjcm9sbFNpemUpIHtcbiAgICAgICAgICBzY3JvbGxlZCArPSBzcGVlZDtcbiAgICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgW3RoaXMuYXhpc1theGlzXS5vZmZzZXRBdHRyXTogc2Nyb2xsZWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbFdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2Nyb2xsVG8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNjcm9sbFRvKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgY29udGVudCBlbGVtZW50XG4gICAqL1xuXG5cbiAgZ2V0Q29udGVudEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudEVsO1xuICB9XG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIG9yaWdpbmFsIHNjcm9sbGluZyBlbGVtZW50XG4gICAqL1xuXG5cbiAgZ2V0U2Nyb2xsRWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50V3JhcHBlckVsO1xuICB9XG5cbiAgZ2V0U2Nyb2xsYmFyV2lkdGgoKSB7XG4gICAgLy8gVHJ5L2NhdGNoIGZvciBGRiA1NiB0aHJvd2luZyBvbiB1bmRlZmluZWQgY29tcHV0ZWRTdHlsZXNcbiAgICB0cnkge1xuICAgICAgLy8gRGV0ZWN0IGJyb3dzZXJzIHN1cHBvcnRpbmcgQ1NTIHNjcm9sbGJhciBzdHlsaW5nIGFuZCBkbyBub3QgY2FsY3VsYXRlXG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmNvbnRlbnRXcmFwcGVyRWwsICc6Oi13ZWJraXQtc2Nyb2xsYmFyJykuZGlzcGxheSA9PT0gJ25vbmUnIHx8ICdzY3JvbGxiYXJXaWR0aCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlIHx8ICctbXMtb3ZlcmZsb3ctc3R5bGUnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aCgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aCgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUxpc3RlbmVycygpIHtcbiAgICBjb25zdCBlbFdpbmRvdyA9IGdldEVsZW1lbnRXaW5kb3codGhpcy5lbCk7IC8vIEV2ZW50IGxpc3RlbmVyc1xuXG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5vbk1vdXNlRW50ZXIpO1xuICAgIFsnbW91c2Vkb3duJywgJ2NsaWNrJywgJ2RibGNsaWNrJ10uZm9yRWFjaChlID0+IHtcbiAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCB0aGlzLm9uUG9pbnRlckV2ZW50LCB0cnVlKTtcbiAgICB9KTtcbiAgICBbJ3RvdWNoc3RhcnQnLCAndG91Y2hlbmQnLCAndG91Y2htb3ZlJ10uZm9yRWFjaChlID0+IHtcbiAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCB0aGlzLm9uUG9pbnRlckV2ZW50LCB7XG4gICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5vbk1vdXNlTGVhdmUpO1xuICAgIHRoaXMuY29udGVudFdyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsKTtcbiAgICBlbFdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uV2luZG93UmVzaXplKTtcbiAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuXG4gICAgaWYgKHRoaXMucmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0gLy8gQ2FuY2VsIGFsbCBkZWJvdW5jZWQgZnVuY3Rpb25zXG5cblxuICAgIHRoaXMucmVjYWxjdWxhdGUuY2FuY2VsKCk7XG4gICAgdGhpcy5vbk1vdXNlTW92ZS5jYW5jZWwoKTtcbiAgICB0aGlzLm9uV2luZG93UmVzaXplLmNhbmNlbCgpO1xuICAgIHRoaXMub25TdG9wU2Nyb2xsaW5nLmNhbmNlbCgpO1xuICAgIHRoaXMub25Nb3VzZUVudGVyZWQuY2FuY2VsKCk7XG4gIH1cbiAgLyoqXG4gICAqIFVuTW91bnQgbXV0YXRpb24gb2JzZXJ2ZXIgYW5kIGRlbGV0ZSBTaW1wbGVCYXIgaW5zdGFuY2UgZnJvbSBET00gZWxlbWVudFxuICAgKi9cblxuXG4gIHVuTW91bnQoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICBTaW1wbGVCYXIuaW5zdGFuY2VzLmRlbGV0ZSh0aGlzLmVsKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgbW91c2UgaXMgd2l0aGluIGJvdW5kc1xuICAgKi9cblxuXG4gIGlzV2l0aGluQm91bmRzKGJib3gpIHtcbiAgICByZXR1cm4gdGhpcy5tb3VzZVggPj0gYmJveC5sZWZ0ICYmIHRoaXMubW91c2VYIDw9IGJib3gubGVmdCArIGJib3gud2lkdGggJiYgdGhpcy5tb3VzZVkgPj0gYmJveC50b3AgJiYgdGhpcy5tb3VzZVkgPD0gYmJveC50b3AgKyBiYm94LmhlaWdodDtcbiAgfVxuICAvKipcbiAgICogRmluZCBlbGVtZW50IGNoaWxkcmVuIG1hdGNoZXMgcXVlcnlcbiAgICovXG5cblxuICBmaW5kQ2hpbGQoZWwsIHF1ZXJ5KSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IGVsLm1hdGNoZXMgfHwgZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsLm1vek1hdGNoZXNTZWxlY3RvciB8fCBlbC5tc01hdGNoZXNTZWxlY3RvcjtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGVsLmNoaWxkcmVuLCBjaGlsZCA9PiBtYXRjaGVzLmNhbGwoY2hpbGQsIHF1ZXJ5KSlbMF07XG4gIH1cblxufVxuU2ltcGxlQmFyLmRlZmF1bHRPcHRpb25zID0ge1xuICBhdXRvSGlkZTogdHJ1ZSxcbiAgZm9yY2VWaXNpYmxlOiBmYWxzZSxcbiAgY2xpY2tPblRyYWNrOiB0cnVlLFxuICBjbGFzc05hbWVzOiB7XG4gICAgY29udGVudEVsOiAnc2ltcGxlYmFyLWNvbnRlbnQnLFxuICAgIGNvbnRlbnRXcmFwcGVyOiAnc2ltcGxlYmFyLWNvbnRlbnQtd3JhcHBlcicsXG4gICAgb2Zmc2V0OiAnc2ltcGxlYmFyLW9mZnNldCcsXG4gICAgbWFzazogJ3NpbXBsZWJhci1tYXNrJyxcbiAgICB3cmFwcGVyOiAnc2ltcGxlYmFyLXdyYXBwZXInLFxuICAgIHBsYWNlaG9sZGVyOiAnc2ltcGxlYmFyLXBsYWNlaG9sZGVyJyxcbiAgICBzY3JvbGxiYXI6ICdzaW1wbGViYXItc2Nyb2xsYmFyJyxcbiAgICB0cmFjazogJ3NpbXBsZWJhci10cmFjaycsXG4gICAgaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsOiAnc2ltcGxlYmFyLWhlaWdodC1hdXRvLW9ic2VydmVyLXdyYXBwZXInLFxuICAgIGhlaWdodEF1dG9PYnNlcnZlckVsOiAnc2ltcGxlYmFyLWhlaWdodC1hdXRvLW9ic2VydmVyJyxcbiAgICB2aXNpYmxlOiAnc2ltcGxlYmFyLXZpc2libGUnLFxuICAgIGhvcml6b250YWw6ICdzaW1wbGViYXItaG9yaXpvbnRhbCcsXG4gICAgdmVydGljYWw6ICdzaW1wbGViYXItdmVydGljYWwnLFxuICAgIGhvdmVyOiAnc2ltcGxlYmFyLWhvdmVyJyxcbiAgICBkcmFnZ2luZzogJ3NpbXBsZWJhci1kcmFnZ2luZycsXG4gICAgc2Nyb2xsaW5nOiAnc2ltcGxlYmFyLXNjcm9sbGluZycsXG4gICAgc2Nyb2xsYWJsZTogJ3NpbXBsZWJhci1zY3JvbGxhYmxlJyxcbiAgICBtb3VzZUVudGVyZWQ6ICdzaW1wbGViYXItbW91c2UtZW50ZXJlZCdcbiAgfSxcbiAgc2Nyb2xsYmFyTWluU2l6ZTogMjUsXG4gIHNjcm9sbGJhck1heFNpemU6IDBcbn07XG5TaW1wbGVCYXIuaW5zdGFuY2VzID0gbmV3IFdlYWtNYXAoKTtcblxuZXhwb3J0IGRlZmF1bHQgU2ltcGxlQmFyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2ltcGxlYmFyLWNvcmUuZXNtLmpzLm1hcFxuIiwiLyoqXG4gKiBTaW1wbGVCYXIuanMgLSB2Ni4wLjAtYmV0YS4zXG4gKiBTY3JvbGxiYXJzLCBzaW1wbGVyLlxuICogaHR0cHM6Ly9ncnNtdG8uZ2l0aHViLmlvL3NpbXBsZWJhci9cbiAqXG4gKiBNYWRlIGJ5IEFkcmllbiBEZW5hdCBmcm9tIGEgZm9yayBieSBKb25hdGhhbiBOaWNvbFxuICogVW5kZXIgTUlUIExpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCc7XG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoJztcbmltcG9ydCBjYW5Vc2VET00gZnJvbSAnY2FuLXVzZS1kb20nO1xuaW1wb3J0IFNpbXBsZUJhciBmcm9tICdzaW1wbGViYXItY29yZSc7XG5leHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnc2ltcGxlYmFyLWNvcmUnO1xuaW1wb3J0ICdjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlJztcbmltcG9ydCAnY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUnO1xuaW1wb3J0ICdjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnO1xuaW1wb3J0ICdjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoJztcbmltcG9ydCAnY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlJztcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlIG9wdGlvbnMgZnJvbSBlbGVtZW50IGF0dHJpYnV0ZXNcbnZhciBnZXRPcHRpb25zID0gZnVuY3Rpb24gZ2V0T3B0aW9ucyhvYmopIHtcbiAgdmFyIG9wdGlvbnMgPSBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwob2JqLCBmdW5jdGlvbiAoYWNjLCBhdHRyaWJ1dGUpIHtcbiAgICB2YXIgb3B0aW9uID0gYXR0cmlidXRlLm5hbWUubWF0Y2goL2RhdGEtc2ltcGxlYmFyLSguKykvKTtcblxuICAgIGlmIChvcHRpb24pIHtcbiAgICAgIHZhciBrZXkgPSBvcHRpb25bMV0ucmVwbGFjZSgvXFxXKyguKS9nLCBmdW5jdGlvbiAoeCwgY2hyKSB7XG4gICAgICAgIHJldHVybiBjaHIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBzd2l0Y2ggKGF0dHJpYnV0ZS52YWx1ZSkge1xuICAgICAgICBjYXNlICd0cnVlJzpcbiAgICAgICAgICBhY2Nba2V5XSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZmFsc2UnOlxuICAgICAgICAgIGFjY1trZXldID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgYWNjW2tleV0gPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYWNjW2tleV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gb3B0aW9ucztcbn07XG5cblNpbXBsZUJhci5pbml0RE9NTG9hZGVkRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aGlzLmluaXRET01Mb2FkZWRFbGVtZW50cyk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5pbml0RE9NTG9hZGVkRWxlbWVudHMpO1xuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNpbXBsZWJhcl0nKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zaW1wbGViYXInKSAhPT0gJ2luaXQnICYmICFTaW1wbGVCYXIuaW5zdGFuY2VzLmhhcyhlbCkpIG5ldyBTaW1wbGVCYXIoZWwsIGdldE9wdGlvbnMoZWwuYXR0cmlidXRlcykpO1xuICB9KTtcbn07XG5cblNpbXBsZUJhci5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5nbG9iYWxPYnNlcnZlci5kaXNjb25uZWN0KCk7XG59O1xuXG5TaW1wbGVCYXIuaW5pdEh0bWxBcGkgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaW5pdERPTUxvYWRlZEVsZW1lbnRzID0gdGhpcy5pbml0RE9NTG9hZGVkRWxlbWVudHMuYmluZCh0aGlzKTsgLy8gTXV0YXRpb25PYnNlcnZlciBpcyBJRTExK1xuXG4gIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBNdXRhdGlvbiBvYnNlcnZlciB0byBvYnNlcnZlIGR5bmFtaWNhbGx5IGFkZGVkIGVsZW1lbnRzXG4gICAgdGhpcy5nbG9iYWxPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKFNpbXBsZUJhci5oYW5kbGVNdXRhdGlvbnMpO1xuICAgIHRoaXMuZ2xvYmFsT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgc3VidHJlZTogdHJ1ZVxuICAgIH0pO1xuICB9IC8vIFRha2VuIGZyb20galF1ZXJ5IGByZWFkeWAgZnVuY3Rpb25cbiAgLy8gSW5zdGFudGlhdGUgZWxlbWVudHMgYWxyZWFkeSBwcmVzZW50IG9uIHRoZSBwYWdlXG5cblxuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCkge1xuICAgIC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSBpbml0XG4gICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5pbml0RE9NTG9hZGVkRWxlbWVudHMpO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aGlzLmluaXRET01Mb2FkZWRFbGVtZW50cyk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0aGlzLmluaXRET01Mb2FkZWRFbGVtZW50cyk7XG4gIH1cbn07XG5cblNpbXBsZUJhci5oYW5kbGVNdXRhdGlvbnMgPSBmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobXV0YXRpb24uYWRkZWROb2RlcywgZnVuY3Rpb24gKGFkZGVkTm9kZSkge1xuICAgICAgaWYgKGFkZGVkTm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBpZiAoYWRkZWROb2RlLmhhc0F0dHJpYnV0ZSgnZGF0YS1zaW1wbGViYXInKSkge1xuICAgICAgICAgICFTaW1wbGVCYXIuaW5zdGFuY2VzLmhhcyhhZGRlZE5vZGUpICYmIG5ldyBTaW1wbGVCYXIoYWRkZWROb2RlLCBnZXRPcHRpb25zKGFkZGVkTm9kZS5hdHRyaWJ1dGVzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhZGRlZE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc2ltcGxlYmFyXScpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2ltcGxlYmFyJykgIT09ICdpbml0JyAmJiAhU2ltcGxlQmFyLmluc3RhbmNlcy5oYXMoZWwpKSBuZXcgU2ltcGxlQmFyKGVsLCBnZXRPcHRpb25zKGVsLmF0dHJpYnV0ZXMpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobXV0YXRpb24ucmVtb3ZlZE5vZGVzLCBmdW5jdGlvbiAocmVtb3ZlZE5vZGUpIHtcbiAgICAgIGlmIChyZW1vdmVkTm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBpZiAocmVtb3ZlZE5vZGUuaGFzQXR0cmlidXRlKCdkYXRhLXNpbXBsZWJhcicpKSB7XG4gICAgICAgICAgU2ltcGxlQmFyLmluc3RhbmNlcy5oYXMocmVtb3ZlZE5vZGUpICYmIFNpbXBsZUJhci5pbnN0YW5jZXMuZ2V0KHJlbW92ZWROb2RlKS51bk1vdW50KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChyZW1vdmVkTm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zaW1wbGViYXI9XCJpbml0XCJdJyksIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgU2ltcGxlQmFyLmluc3RhbmNlcy5oYXMoZWwpICYmIFNpbXBsZUJhci5pbnN0YW5jZXMuZ2V0KGVsKS51bk1vdW50KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG5TaW1wbGVCYXIuZ2V0T3B0aW9ucyA9IGdldE9wdGlvbnM7XG4vKipcbiAqIEhUTUwgQVBJXG4gKiBDYWxsZWQgb25seSBpbiBhIGJyb3dzZXIgZW52LlxuICovXG5cbmlmIChjYW5Vc2VET00pIHtcbiAgU2ltcGxlQmFyLmluaXRIdG1sQXBpKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW1wbGViYXIuZXNtLmpzLm1hcFxuIiwiLy8galF1ZXJ5XG5yZXF1aXJlKCdqcXVlcnkvZGlzdC9qcXVlcnkubWluJyk7XG53aW5kb3cuJCA9IHdpbmRvdy5qUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbi8vIGZvcm0gU3RpY2t5ZmlsbFxuaW1wb3J0IFN0aWNreWZpbGwgZnJvbSBcInN0aWNreWZpbGxqcy9kaXN0L3N0aWNreWZpbGwubWluLmpzXCI7XG53aW5kb3cuU3RpY2t5ZmlsbCA9IHJlcXVpcmUoJ3N0aWNreWZpbGxqcycpO1xuLy8gb2JqZWN0LWZpdC1pbWFnZXNcbmltcG9ydCBvYmplY3RGaXRQb2x5ZmlsbCBmcm9tICdvYmplY3RGaXRQb2x5ZmlsbCc7XG4vLyBzbGlja1xuaW1wb3J0IHNsaWNrIGZyb20gXCJzbGljay1jYXJvdXNlbC9zbGljay9zbGljay5taW4uanNcIjtcbi8vIGlucHV0IG1hc2tcbmltcG9ydCBJbnB1dG1hc2sgZnJvbSBcImlucHV0bWFza1wiO1xuLy8gZXZlbnRzdG91Y2hcbnZhciBsb2FkVG91Y2hFdmVudHMgPSByZXF1aXJlKCdqcXVlcnktdG91Y2gtZXZlbnRzJyk7XG5sb2FkVG91Y2hFdmVudHMoJCk7XG4vLyBtYWxpaHVfc2Nyb2xsYmFyXG4vLyBpbXBvcnQgbUN1c3RvbVNjcm9sbGJhciBmcm9tIFwibWFsaWh1LWN1c3RvbS1zY3JvbGxiYXItcGx1Z2luL2pxdWVyeS5tQ3VzdG9tU2Nyb2xsYmFyLmNvbmNhdC5taW4uanNcIjtcbi8vIHNpbXBsZWJhclxuaW1wb3J0ICdzaW1wbGViYXInO1xuLy8gbGF6eXNpemVzXG5pbXBvcnQgJ2xhenlzaXplcyc7XG4vLyBtYWduaWZpY19wb3B1cFxuaW1wb3J0IG1hZ25pZmljUG9wdXAgZnJvbSBcIm1hZ25pZmljLXBvcHVwL2Rpc3QvanF1ZXJ5Lm1hZ25pZmljLXBvcHVwLm1pbi5qc1wiO1xuLy8gc2VsZWN0cmljXG5pbXBvcnQgc2VsZWN0cmljIGZyb20gXCJzZWxlY3RyaWNcIjtcbi8vIG1hdGNoSGVpZ2h0XG5pbXBvcnQgJ2pxdWVyeS1tYXRjaC1oZWlnaHQnO1xuLy8ganF1ZXJ5LXRvdWNoc3dpcGVcbnJlcXVpcmUoJ2pxdWVyeS10b3VjaHN3aXBlL2pxdWVyeS50b3VjaFN3aXBlLm1pbi5qcycpO1xuLy8gaW1wb3J0IHZhbGlkYXRlIGZyb20gXCJqcXVlcnktdmFsaWRhdGlvblwiO1xucmVxdWlyZShcImpxdWVyeS12YWxpZGF0aW9uXCIpO1xuLy8gc2xpZGVyc1xucmVxdWlyZSgnLi9zbGlkZXJzJyk7XG4vLyBwb3B1cFxucmVxdWlyZSgnLi9wb3B1cCcpO1xuLy8gZm9ybVxucmVxdWlyZSgnLi9mb3JtJyk7XG4vLyBhaXItZGF0ZXBpY2tlclxucmVxdWlyZSgnLi9haXItZGF0ZXBpY2tlcicpO1xuLy8gbWFpblxucmVxdWlyZSgnLi9tYWluJyk7XG5cbi8vY2FiaW5ldFxucmVxdWlyZShcImJvb3RzdHJhcFwiKTtcbnJlcXVpcmUoJ3gtZWRpdGFibGUvZGlzdC9ib290c3RyYXAzLWVkaXRhYmxlL2pzL2Jvb3RzdHJhcC1lZGl0YWJsZScpO1xucmVxdWlyZSgnYm9vdHN0cmFwLXN3aXRjaCcpO1xucmVxdWlyZSgncGdlbmVyYXRvcicpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYnV0dG9uLmpzIHYzLjQuMVxuICogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvMy40L2phdmFzY3JpcHQvI2J1dHRvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBCVVRUT04gUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgPSAkLmV4dGVuZCh7fSwgQnV0dG9uLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgfVxuXG4gIEJ1dHRvbi5WRVJTSU9OICA9ICczLjQuMSdcblxuICBCdXR0b24uREVGQVVMVFMgPSB7XG4gICAgbG9hZGluZ1RleHQ6ICdsb2FkaW5nLi4uJ1xuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHZhciBkICAgID0gJ2Rpc2FibGVkJ1xuICAgIHZhciAkZWwgID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciB2YWwgID0gJGVsLmlzKCdpbnB1dCcpID8gJ3ZhbCcgOiAnaHRtbCdcbiAgICB2YXIgZGF0YSA9ICRlbC5kYXRhKClcblxuICAgIHN0YXRlICs9ICdUZXh0J1xuXG4gICAgaWYgKGRhdGEucmVzZXRUZXh0ID09IG51bGwpICRlbC5kYXRhKCdyZXNldFRleHQnLCAkZWxbdmFsXSgpKVxuXG4gICAgLy8gcHVzaCB0byBldmVudCBsb29wIHRvIGFsbG93IGZvcm1zIHRvIHN1Ym1pdFxuICAgIHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAkZWxbdmFsXShkYXRhW3N0YXRlXSA9PSBudWxsID8gdGhpcy5vcHRpb25zW3N0YXRlXSA6IGRhdGFbc3RhdGVdKVxuXG4gICAgICBpZiAoc3RhdGUgPT0gJ2xvYWRpbmdUZXh0Jykge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWVcbiAgICAgICAgJGVsLmFkZENsYXNzKGQpLmF0dHIoZCwgZCkucHJvcChkLCB0cnVlKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTG9hZGluZykge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlXG4gICAgICAgICRlbC5yZW1vdmVDbGFzcyhkKS5yZW1vdmVBdHRyKGQpLnByb3AoZCwgZmFsc2UpXG4gICAgICB9XG4gICAgfSwgdGhpcyksIDApXG4gIH1cblxuICBCdXR0b24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2hhbmdlZCA9IHRydWVcbiAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScpXG5cbiAgICBpZiAoJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgIHZhciAkaW5wdXQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2lucHV0JylcbiAgICAgIGlmICgkaW5wdXQucHJvcCgndHlwZScpID09ICdyYWRpbycpIHtcbiAgICAgICAgaWYgKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpIGNoYW5nZWQgPSBmYWxzZVxuICAgICAgICAkcGFyZW50LmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgIH0gZWxzZSBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAnY2hlY2tib3gnKSB7XG4gICAgICAgIGlmICgoJGlucHV0LnByb3AoJ2NoZWNrZWQnKSkgIT09IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcygnYWN0aXZlJylcbiAgICAgIH1cbiAgICAgICRpbnB1dC5wcm9wKCdjaGVja2VkJywgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpXG4gICAgICBpZiAoY2hhbmdlZCkgJGlucHV0LnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1wcmVzc2VkJywgIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKVxuICAgICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcygnYWN0aXZlJylcbiAgICB9XG4gIH1cblxuXG4gIC8vIEJVVFRPTiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuYnV0dG9uJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5idXR0b24nLCAoZGF0YSA9IG5ldyBCdXR0b24odGhpcywgb3B0aW9ucykpKVxuXG4gICAgICBpZiAob3B0aW9uID09ICd0b2dnbGUnKSBkYXRhLnRvZ2dsZSgpXG4gICAgICBlbHNlIGlmIChvcHRpb24pIGRhdGEuc2V0U3RhdGUob3B0aW9uKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5idXR0b25cblxuICAkLmZuLmJ1dHRvbiAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmJ1dHRvbi5Db25zdHJ1Y3RvciA9IEJ1dHRvblxuXG5cbiAgLy8gQlVUVE9OIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYnV0dG9uLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5idXR0b24gPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBCVVRUT04gREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciAkYnRuID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLmJ0bicpXG4gICAgICBQbHVnaW4uY2FsbCgkYnRuLCAndG9nZ2xlJylcbiAgICAgIGlmICghKCQoZS50YXJnZXQpLmlzKCdpbnB1dFt0eXBlPVwicmFkaW9cIl0sIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScpKSkge1xuICAgICAgICAvLyBQcmV2ZW50IGRvdWJsZSBjbGljayBvbiByYWRpb3MsIGFuZCB0aGUgZG91YmxlIHNlbGVjdGlvbnMgKHNvIGNhbmNlbGxhdGlvbikgb24gY2hlY2tib3hlc1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgLy8gVGhlIHRhcmdldCBjb21wb25lbnQgc3RpbGwgcmVjZWl2ZSB0aGUgZm9jdXNcbiAgICAgICAgaWYgKCRidG4uaXMoJ2lucHV0LGJ1dHRvbicpKSAkYnRuLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgZWxzZSAkYnRuLmZpbmQoJ2lucHV0OnZpc2libGUsYnV0dG9uOnZpc2libGUnKS5maXJzdCgpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIH1cbiAgICB9KVxuICAgIC5vbignZm9jdXMuYnMuYnV0dG9uLmRhdGEtYXBpIGJsdXIuYnMuYnV0dG9uLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgJChlLnRhcmdldCkuY2xvc2VzdCgnLmJ0bicpLnRvZ2dsZUNsYXNzKCdmb2N1cycsIC9eZm9jdXMoaW4pPyQvLnRlc3QoZS50eXBlKSlcbiAgICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogc2Nyb2xsc3B5LmpzIHYzLjQuMVxuICogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvMy40L2phdmFzY3JpcHQvI3Njcm9sbHNweVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFNDUk9MTFNQWSBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQgPSAkKGVsZW1lbnQpLmlzKGRvY3VtZW50LmJvZHkpID8gJCh3aW5kb3cpIDogJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSAkLmV4dGVuZCh7fSwgU2Nyb2xsU3B5LkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuc2VsZWN0b3IgICAgICAgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJ1xuICAgIHRoaXMub2Zmc2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgICA9IDBcblxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQub24oJ3Njcm9sbC5icy5zY3JvbGxzcHknLCAkLnByb3h5KHRoaXMucHJvY2VzcywgdGhpcykpXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG5cbiAgU2Nyb2xsU3B5LlZFUlNJT04gID0gJzMuNC4xJ1xuXG4gIFNjcm9sbFNweS5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgICAgICAgICAgPSB0aGlzXG4gICAgdmFyIG9mZnNldE1ldGhvZCAgPSAnb2Zmc2V0J1xuICAgIHZhciBvZmZzZXRCYXNlICAgID0gMFxuXG4gICAgdGhpcy5vZmZzZXRzICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgID0gW11cbiAgICB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJ1xuICAgICAgb2Zmc2V0QmFzZSAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKVxuICAgIH1cblxuICAgIHRoaXMuJGJvZHlcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXG4gICAgICAubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCAgID0gJCh0aGlzKVxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICB2YXIgJGhyZWYgPSAvXiMuLy50ZXN0KGhyZWYpICYmICQoaHJlZilcblxuICAgICAgICByZXR1cm4gKCRocmVmXG4gICAgICAgICAgJiYgJGhyZWYubGVuZ3RoXG4gICAgICAgICAgJiYgJGhyZWYuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcbiAgICAgIH0pXG4gICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF0gfSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5vZmZzZXRzLnB1c2godGhpc1swXSlcbiAgICAgICAgdGhhdC50YXJnZXRzLnB1c2godGhpc1sxXSlcbiAgICAgIH0pXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkgKyB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0cyAgICAgID0gdGhpcy5vZmZzZXRzXG4gICAgdmFyIHRhcmdldHMgICAgICA9IHRoaXMudGFyZ2V0c1xuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIHZhciBpXG5cbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0ICE9IChpID0gdGFyZ2V0c1t0YXJnZXRzLmxlbmd0aCAtIDFdKSAmJiB0aGlzLmFjdGl2YXRlKGkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCBvZmZzZXRzWzBdKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGxcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyKClcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgYWN0aXZlVGFyZ2V0ICE9IHRhcmdldHNbaV1cbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cbiAgICAgICAgJiYgKG9mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVG9wIDwgb2Zmc2V0c1tpICsgMV0pXG4gICAgICAgICYmIHRoaXMuYWN0aXZhdGUodGFyZ2V0c1tpXSlcbiAgICB9XG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICB0aGlzLmNsZWFyKClcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgK1xuICAgICAgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgK1xuICAgICAgdGhpcy5zZWxlY3RvciArICdbaHJlZj1cIicgKyB0YXJnZXQgKyAnXCJdJ1xuXG4gICAgdmFyIGFjdGl2ZSA9ICQoc2VsZWN0b3IpXG4gICAgICAucGFyZW50cygnbGknKVxuICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuXG4gICAgaWYgKGFjdGl2ZS5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICBhY3RpdmUgPSBhY3RpdmVcbiAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIGFjdGl2ZS50cmlnZ2VyKCdhY3RpdmF0ZS5icy5zY3JvbGxzcHknKVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMuc2VsZWN0b3IpXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIChkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uc2Nyb2xsc3B5XG5cbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcblxuXG4gIC8vIFNDUk9MTFNQWSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qKlxuICAqIGJvb3RzdHJhcC1zd2l0Y2ggLSBUdXJuIGNoZWNrYm94ZXMgYW5kIHJhZGlvIGJ1dHRvbnMgaW50byB0b2dnbGUgc3dpdGNoZXMuXG4gICpcbiAgKiBAdmVyc2lvbiB2My40LjBcbiAgKiBAaG9tZXBhZ2UgaHR0cHM6Ly9idHRzdHJwLmdpdGh1Yi5pby9ib290c3RyYXAtc3dpdGNoXG4gICogQGF1dGhvciBNYXR0aWEgTGFyZW50aXMgPG1hdHRpYUBsYXJlbnRpcy5ldT4gKGh0dHA6Ly9sYXJlbnRpcy5ldSlcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KGdsb2JhbC5qcXVlcnkpO1xuICAgIGdsb2JhbC5ib290c3RyYXBTd2l0Y2ggPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKF9qcXVlcnkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyICQgPSBfanF1ZXJ5Mi5kZWZhdWx0IHx8IHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LiQ7XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NlcyhvcHRpb25zLCBpZCkge1xuICAgIHZhciBzdGF0ZSA9IG9wdGlvbnMuc3RhdGUsXG4gICAgICAgIHNpemUgPSBvcHRpb25zLnNpemUsXG4gICAgICAgIGRpc2FibGVkID0gb3B0aW9ucy5kaXNhYmxlZCxcbiAgICAgICAgcmVhZG9ubHkgPSBvcHRpb25zLnJlYWRvbmx5LFxuICAgICAgICBpbmRldGVybWluYXRlID0gb3B0aW9ucy5pbmRldGVybWluYXRlLFxuICAgICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlO1xuXG4gICAgcmV0dXJuIFtzdGF0ZSA/ICdvbicgOiAnb2ZmJywgc2l6ZSwgZGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogdW5kZWZpbmVkLCByZWFkb25seSA/ICdyZWFkb25seScgOiB1bmRlZmluZWQsIGluZGV0ZXJtaW5hdGUgPyAnaW5kZXRlcm1pbmF0ZScgOiB1bmRlZmluZWQsIGludmVyc2UgPyAnaW52ZXJzZScgOiB1bmRlZmluZWQsIGlkID8gJ2lkLScgKyBpZCA6IHVuZGVmaW5lZF0uZmlsdGVyKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdiA9PSBudWxsO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ2Z2V0RWxlbWVudE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiB0aGlzLiRlbGVtZW50LmlzKCc6Y2hlY2tlZCcpLFxuICAgICAgc2l6ZTogdGhpcy4kZWxlbWVudC5kYXRhKCdzaXplJyksXG4gICAgICBhbmltYXRlOiB0aGlzLiRlbGVtZW50LmRhdGEoJ2FuaW1hdGUnKSxcbiAgICAgIGRpc2FibGVkOiB0aGlzLiRlbGVtZW50LmlzKCc6ZGlzYWJsZWQnKSxcbiAgICAgIHJlYWRvbmx5OiB0aGlzLiRlbGVtZW50LmlzKCdbcmVhZG9ubHldJyksXG4gICAgICBpbmRldGVybWluYXRlOiB0aGlzLiRlbGVtZW50LmRhdGEoJ2luZGV0ZXJtaW5hdGUnKSxcbiAgICAgIGludmVyc2U6IHRoaXMuJGVsZW1lbnQuZGF0YSgnaW52ZXJzZScpLFxuICAgICAgcmFkaW9BbGxPZmY6IHRoaXMuJGVsZW1lbnQuZGF0YSgncmFkaW8tYWxsLW9mZicpLFxuICAgICAgb25Db2xvcjogdGhpcy4kZWxlbWVudC5kYXRhKCdvbi1jb2xvcicpLFxuICAgICAgb2ZmQ29sb3I6IHRoaXMuJGVsZW1lbnQuZGF0YSgnb2ZmLWNvbG9yJyksXG4gICAgICBvblRleHQ6IHRoaXMuJGVsZW1lbnQuZGF0YSgnb24tdGV4dCcpLFxuICAgICAgb2ZmVGV4dDogdGhpcy4kZWxlbWVudC5kYXRhKCdvZmYtdGV4dCcpLFxuICAgICAgbGFiZWxUZXh0OiB0aGlzLiRlbGVtZW50LmRhdGEoJ2xhYmVsLXRleHQnKSxcbiAgICAgIGhhbmRsZVdpZHRoOiB0aGlzLiRlbGVtZW50LmRhdGEoJ2hhbmRsZS13aWR0aCcpLFxuICAgICAgbGFiZWxXaWR0aDogdGhpcy4kZWxlbWVudC5kYXRhKCdsYWJlbC13aWR0aCcpLFxuICAgICAgYmFzZUNsYXNzOiB0aGlzLiRlbGVtZW50LmRhdGEoJ2Jhc2UtY2xhc3MnKSxcbiAgICAgIHdyYXBwZXJDbGFzczogdGhpcy4kZWxlbWVudC5kYXRhKCd3cmFwcGVyLWNsYXNzJylcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ2d2lkdGgoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciAkaGFuZGxlcyA9IHRoaXMuJG9uLmFkZCh0aGlzLiRvZmYpLmFkZCh0aGlzLiRsYWJlbCkuY3NzKCd3aWR0aCcsICcnKTtcbiAgICB2YXIgaGFuZGxlV2lkdGggPSB0aGlzLm9wdGlvbnMuaGFuZGxlV2lkdGggPT09ICdhdXRvJyA/IE1hdGgucm91bmQoTWF0aC5tYXgodGhpcy4kb24ud2lkdGgoKSwgdGhpcy4kb2ZmLndpZHRoKCkpKSA6IHRoaXMub3B0aW9ucy5oYW5kbGVXaWR0aDtcbiAgICAkaGFuZGxlcy53aWR0aChoYW5kbGVXaWR0aCk7XG4gICAgdGhpcy4kbGFiZWwud2lkdGgoZnVuY3Rpb24gKGluZGV4LCB3aWR0aCkge1xuICAgICAgaWYgKF90aGlzLm9wdGlvbnMubGFiZWxXaWR0aCAhPT0gJ2F1dG8nKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLmxhYmVsV2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAod2lkdGggPCBoYW5kbGVXaWR0aCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlV2lkdGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2lkdGg7XG4gICAgfSk7XG4gICAgdGhpcy5wcml2YXRlSGFuZGxlV2lkdGggPSB0aGlzLiRvbi5vdXRlcldpZHRoKCk7XG4gICAgdGhpcy5wcml2YXRlTGFiZWxXaWR0aCA9IHRoaXMuJGxhYmVsLm91dGVyV2lkdGgoKTtcbiAgICB0aGlzLiRjb250YWluZXIud2lkdGgodGhpcy5wcml2YXRlSGFuZGxlV2lkdGggKiAyICsgdGhpcy5wcml2YXRlTGFiZWxXaWR0aCk7XG4gICAgcmV0dXJuIHRoaXMuJHdyYXBwZXIud2lkdGgodGhpcy5wcml2YXRlSGFuZGxlV2lkdGggKyB0aGlzLnByaXZhdGVMYWJlbFdpZHRoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBydmNvbnRhaW5lclBvc2l0aW9uKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLm9wZTtcblxuICAgIHRoaXMuJGNvbnRhaW5lci5jc3MoJ21hcmdpbi1sZWZ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFswLCAnLScgKyBfdGhpczIucHJpdmF0ZUhhbmRsZVdpZHRoICsgJ3B4J107XG4gICAgICBpZiAoX3RoaXMyLm9wdGlvbnMuaW5kZXRlcm1pbmF0ZSkge1xuICAgICAgICByZXR1cm4gJy0nICsgX3RoaXMyLnByaXZhdGVIYW5kbGVXaWR0aCAvIDIgKyAncHgnO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5pbnZlcnNlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlc1sxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzWzBdO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzMi5vcHRpb25zLmludmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlc1swXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZXNbMV07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcnZnZXRDbGFzcyhuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5iYXNlQ2xhc3MgKyAnLScgKyBuYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ2aW5pdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBpbml0ID0gZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIF90aGlzMy5zZXRQcmV2T3B0aW9ucygpO1xuICAgICAgcHJ2d2lkdGguY2FsbChfdGhpczMpO1xuICAgICAgcHJ2Y29udGFpbmVyUG9zaXRpb24uY2FsbChfdGhpczMpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMub3B0aW9ucy5hbmltYXRlICYmIF90aGlzMy4kd3JhcHBlci5hZGRDbGFzcyhwcnZnZXRDbGFzcy5jYWxsKF90aGlzMywgJ2FuaW1hdGUnKSk7XG4gICAgICB9LCA1MCk7XG4gICAgfTtcbiAgICBpZiAodGhpcy4kd3JhcHBlci5pcygnOnZpc2libGUnKSkge1xuICAgICAgaW5pdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaW5pdEludGVydmFsID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczMuJHdyYXBwZXIuaXMoJzp2aXNpYmxlJykgJiYgKGluaXQoKSB8fCB0cnVlKSAmJiB3aW5kb3cuY2xlYXJJbnRlcnZhbChpbml0SW50ZXJ2YWwpO1xuICAgIH0sIDUwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBydmVsZW1lbnRIYW5kbGVycygpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdzZXRQcmV2aW91c09wdGlvbnMuYm9vdHN0cmFwU3dpdGNoJzogZnVuY3Rpb24gc2V0UHJldmlvdXNPcHRpb25zQm9vdHN0cmFwU3dpdGNoKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM0LnNldFByZXZPcHRpb25zKCk7XG4gICAgICB9LFxuXG4gICAgICAncHJldmlvdXNTdGF0ZS5ib290c3RyYXBTd2l0Y2gnOiBmdW5jdGlvbiBwcmV2aW91c1N0YXRlQm9vdHN0cmFwU3dpdGNoKCkge1xuICAgICAgICBfdGhpczQub3B0aW9ucyA9IF90aGlzNC5wcmV2T3B0aW9ucztcbiAgICAgICAgaWYgKF90aGlzNC5vcHRpb25zLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICBfdGhpczQuJHdyYXBwZXIuYWRkQ2xhc3MocHJ2Z2V0Q2xhc3MuY2FsbChfdGhpczQsICdpbmRldGVybWluYXRlJykpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzNC4kZWxlbWVudC5wcm9wKCdjaGVja2VkJywgX3RoaXM0Lm9wdGlvbnMuc3RhdGUpLnRyaWdnZXIoJ2NoYW5nZS5ib290c3RyYXBTd2l0Y2gnLCB0cnVlKTtcbiAgICAgIH0sXG5cbiAgICAgICdjaGFuZ2UuYm9vdHN0cmFwU3dpdGNoJzogZnVuY3Rpb24gY2hhbmdlQm9vdHN0cmFwU3dpdGNoKGV2ZW50LCBza2lwKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB2YXIgc3RhdGUgPSBfdGhpczQuJGVsZW1lbnQuaXMoJzpjaGVja2VkJyk7XG4gICAgICAgIHBydmNvbnRhaW5lclBvc2l0aW9uLmNhbGwoX3RoaXM0LCBzdGF0ZSk7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gX3RoaXM0Lm9wdGlvbnMuc3RhdGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM0Lm9wdGlvbnMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgX3RoaXM0LiR3cmFwcGVyLnRvZ2dsZUNsYXNzKHBydmdldENsYXNzLmNhbGwoX3RoaXM0LCAnb2ZmJykpLnRvZ2dsZUNsYXNzKHBydmdldENsYXNzLmNhbGwoX3RoaXM0LCAnb24nKSk7XG4gICAgICAgIGlmICghc2tpcCkge1xuICAgICAgICAgIGlmIChfdGhpczQuJGVsZW1lbnQuaXMoJzpyYWRpbycpKSB7XG4gICAgICAgICAgICAkKCdbbmFtZT1cIicgKyBfdGhpczQuJGVsZW1lbnQuYXR0cignbmFtZScpICsgJ1wiXScpLm5vdChfdGhpczQuJGVsZW1lbnQpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSkudHJpZ2dlcignY2hhbmdlLmJvb3RzdHJhcFN3aXRjaCcsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczQuJGVsZW1lbnQudHJpZ2dlcignc3dpdGNoQ2hhbmdlLmJvb3RzdHJhcFN3aXRjaCcsIFtzdGF0ZV0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAnZm9jdXMuYm9vdHN0cmFwU3dpdGNoJzogZnVuY3Rpb24gZm9jdXNCb290c3RyYXBTd2l0Y2goZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXM0LiR3cmFwcGVyLmFkZENsYXNzKHBydmdldENsYXNzLmNhbGwoX3RoaXM0LCAnZm9jdXNlZCcpKTtcbiAgICAgIH0sXG5cbiAgICAgICdibHVyLmJvb3RzdHJhcFN3aXRjaCc6IGZ1bmN0aW9uIGJsdXJCb290c3RyYXBTd2l0Y2goZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXM0LiR3cmFwcGVyLnJlbW92ZUNsYXNzKHBydmdldENsYXNzLmNhbGwoX3RoaXM0LCAnZm9jdXNlZCcpKTtcbiAgICAgIH0sXG5cbiAgICAgICdrZXlkb3duLmJvb3RzdHJhcFN3aXRjaCc6IGZ1bmN0aW9uIGtleWRvd25Cb290c3RyYXBTd2l0Y2goZXZlbnQpIHtcbiAgICAgICAgaWYgKCFldmVudC53aGljaCB8fCBfdGhpczQub3B0aW9ucy5kaXNhYmxlZCB8fCBfdGhpczQub3B0aW9ucy5yZWFkb25seSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDM3IHx8IGV2ZW50LndoaWNoID09PSAzOSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgX3RoaXM0LnN0YXRlKGV2ZW50LndoaWNoID09PSAzOSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBydmhhbmRsZUhhbmRsZXJzKCkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdGhpcy4kb24ub24oJ2NsaWNrLmJvb3RzdHJhcFN3aXRjaCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgX3RoaXM1LnN0YXRlKGZhbHNlKTtcbiAgICAgIHJldHVybiBfdGhpczUuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMuYm9vdHN0cmFwU3dpdGNoJyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuJG9mZi5vbignY2xpY2suYm9vdHN0cmFwU3dpdGNoJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBfdGhpczUuc3RhdGUodHJ1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM1LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzLmJvb3RzdHJhcFN3aXRjaCcpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ2bGFiZWxIYW5kbGVycygpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciBkcmFnU3RhcnQgPSB2b2lkIDA7XG4gICAgdmFyIGRyYWdFbmQgPSB2b2lkIDA7XG4gICAgdmFyIGhhbmRsZXJzID0ge1xuICAgICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSxcblxuXG4gICAgICAnbW91c2Vkb3duLmJvb3RzdHJhcFN3aXRjaCB0b3VjaHN0YXJ0LmJvb3RzdHJhcFN3aXRjaCc6IGZ1bmN0aW9uIG1vdXNlZG93bkJvb3RzdHJhcFN3aXRjaFRvdWNoc3RhcnRCb290c3RyYXBTd2l0Y2goZXZlbnQpIHtcbiAgICAgICAgaWYgKGRyYWdTdGFydCB8fCBfdGhpczYub3B0aW9ucy5kaXNhYmxlZCB8fCBfdGhpczYub3B0aW9ucy5yZWFkb25seSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZHJhZ1N0YXJ0ID0gKGV2ZW50LnBhZ2VYIHx8IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5wYWdlWCkgLSBwYXJzZUludChfdGhpczYuJGNvbnRhaW5lci5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKTtcbiAgICAgICAgaWYgKF90aGlzNi5vcHRpb25zLmFuaW1hdGUpIHtcbiAgICAgICAgICBfdGhpczYuJHdyYXBwZXIucmVtb3ZlQ2xhc3MocHJ2Z2V0Q2xhc3MuY2FsbChfdGhpczYsICdhbmltYXRlJykpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzNi4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cy5ib290c3RyYXBTd2l0Y2gnKTtcbiAgICAgIH0sXG5cbiAgICAgICdtb3VzZW1vdmUuYm9vdHN0cmFwU3dpdGNoIHRvdWNobW92ZS5ib290c3RyYXBTd2l0Y2gnOiBmdW5jdGlvbiBtb3VzZW1vdmVCb290c3RyYXBTd2l0Y2hUb3VjaG1vdmVCb290c3RyYXBTd2l0Y2goZXZlbnQpIHtcbiAgICAgICAgaWYgKGRyYWdTdGFydCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaWZmZXJlbmNlID0gKGV2ZW50LnBhZ2VYIHx8IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5wYWdlWCkgLSBkcmFnU3RhcnQ7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChkaWZmZXJlbmNlIDwgLV90aGlzNi5wcml2YXRlSGFuZGxlV2lkdGggfHwgZGlmZmVyZW5jZSA+IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZHJhZ0VuZCA9IGRpZmZlcmVuY2U7XG4gICAgICAgIF90aGlzNi4kY29udGFpbmVyLmNzcygnbWFyZ2luLWxlZnQnLCBkcmFnRW5kICsgJ3B4Jyk7XG4gICAgICB9LFxuXG4gICAgICAnbW91c2V1cC5ib290c3RyYXBTd2l0Y2ggdG91Y2hlbmQuYm9vdHN0cmFwU3dpdGNoJzogZnVuY3Rpb24gbW91c2V1cEJvb3RzdHJhcFN3aXRjaFRvdWNoZW5kQm9vdHN0cmFwU3dpdGNoKGV2ZW50KSB7XG4gICAgICAgIGlmICghZHJhZ1N0YXJ0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChfdGhpczYub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgICAgX3RoaXM2LiR3cmFwcGVyLmFkZENsYXNzKHBydmdldENsYXNzLmNhbGwoX3RoaXM2LCAnYW5pbWF0ZScpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHJhZ0VuZCkge1xuICAgICAgICAgIHZhciBzdGF0ZSA9IGRyYWdFbmQgPiAtKF90aGlzNi5wcml2YXRlSGFuZGxlV2lkdGggLyAyKTtcbiAgICAgICAgICBkcmFnRW5kID0gZmFsc2U7XG4gICAgICAgICAgX3RoaXM2LnN0YXRlKF90aGlzNi5vcHRpb25zLmludmVyc2UgPyAhc3RhdGUgOiBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM2LnN0YXRlKCFfdGhpczYub3B0aW9ucy5zdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZHJhZ1N0YXJ0ID0gZmFsc2U7XG4gICAgICB9LFxuXG4gICAgICAnbW91c2VsZWF2ZS5ib290c3RyYXBTd2l0Y2gnOiBmdW5jdGlvbiBtb3VzZWxlYXZlQm9vdHN0cmFwU3dpdGNoKCkge1xuICAgICAgICBfdGhpczYuJGxhYmVsLnRyaWdnZXIoJ21vdXNldXAuYm9vdHN0cmFwU3dpdGNoJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLiRsYWJlbC5vbihoYW5kbGVycyk7XG4gIH1cblxuICBmdW5jdGlvbiBwcnZleHRlcm5hbExhYmVsSGFuZGxlcigpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHZhciAkZXh0ZXJuYWxMYWJlbCA9IHRoaXMuJGVsZW1lbnQuY2xvc2VzdCgnbGFiZWwnKTtcbiAgICAkZXh0ZXJuYWxMYWJlbC5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09ICRleHRlcm5hbExhYmVsWzBdKSB7XG4gICAgICAgIF90aGlzNy50b2dnbGVTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ2Zm9ybUhhbmRsZXIoKSB7XG4gICAgZnVuY3Rpb24gaXNCb290c3RyYXBTd2l0Y2goKSB7XG4gICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCdib290c3RyYXAtc3dpdGNoJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVyZm9ybVJlc2V0KCkge1xuICAgICAgcmV0dXJuICQodGhpcykuYm9vdHN0cmFwU3dpdGNoKCdzdGF0ZScsIHRoaXMuY2hlY2tlZCk7XG4gICAgfVxuXG4gICAgdmFyICRmb3JtID0gdGhpcy4kZWxlbWVudC5jbG9zZXN0KCdmb3JtJyk7XG4gICAgaWYgKCRmb3JtLmRhdGEoJ2Jvb3RzdHJhcC1zd2l0Y2gnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAkZm9ybS5vbigncmVzZXQuYm9vdHN0cmFwU3dpdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkZm9ybS5maW5kKCdpbnB1dCcpLmZpbHRlcihpc0Jvb3RzdHJhcFN3aXRjaCkuZWFjaChwZXJmb3JtUmVzZXQpO1xuICAgICAgfSwgMSk7XG4gICAgfSkuZGF0YSgnYm9vdHN0cmFwLXN3aXRjaCcsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ2Z2V0Q2xhc3NlcyhjbGFzc2VzKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICBpZiAoISQuaXNBcnJheShjbGFzc2VzKSkge1xuICAgICAgcmV0dXJuIFtwcnZnZXRDbGFzcy5jYWxsKHRoaXMsIGNsYXNzZXMpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXMubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gcHJ2Z2V0Q2xhc3MuY2FsbChfdGhpczgsIHYpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIEJvb3RzdHJhcFN3aXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCb290c3RyYXBTd2l0Y2goZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJvb3RzdHJhcFN3aXRjaCk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sICQuZm4uYm9vdHN0cmFwU3dpdGNoLmRlZmF1bHRzLCBwcnZnZXRFbGVtZW50T3B0aW9ucy5jYWxsKHRoaXMpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMucHJldk9wdGlvbnMgPSB7fTtcbiAgICAgIHRoaXMuJHdyYXBwZXIgPSAkKCc8ZGl2PicsIHtcbiAgICAgICAgY2xhc3M6IGZ1bmN0aW9uIF9jbGFzcygpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q2xhc3NlcyhfdGhpczkub3B0aW9ucywgX3RoaXM5LiRlbGVtZW50LmF0dHIoJ2lkJykpLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgcmV0dXJuIHBydmdldENsYXNzLmNhbGwoX3RoaXM5LCB2KTtcbiAgICAgICAgICB9KS5jb25jYXQoW190aGlzOS5vcHRpb25zLmJhc2VDbGFzc10sIHBydmdldENsYXNzZXMuY2FsbChfdGhpczksIF90aGlzOS5vcHRpb25zLndyYXBwZXJDbGFzcykpLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLiRjb250YWluZXIgPSAkKCc8ZGl2PicsIHsgY2xhc3M6IHBydmdldENsYXNzLmNhbGwodGhpcywgJ2NvbnRhaW5lcicpIH0pO1xuICAgICAgdGhpcy4kb24gPSAkKCc8c3Bhbj4nLCB7XG4gICAgICAgIGh0bWw6IHRoaXMub3B0aW9ucy5vblRleHQsXG4gICAgICAgIGNsYXNzOiBwcnZnZXRDbGFzcy5jYWxsKHRoaXMsICdoYW5kbGUtb24nKSArICcgJyArIHBydmdldENsYXNzLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLm9uQ29sb3IpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuJG9mZiA9ICQoJzxzcGFuPicsIHtcbiAgICAgICAgaHRtbDogdGhpcy5vcHRpb25zLm9mZlRleHQsXG4gICAgICAgIGNsYXNzOiBwcnZnZXRDbGFzcy5jYWxsKHRoaXMsICdoYW5kbGUtb2ZmJykgKyAnICcgKyBwcnZnZXRDbGFzcy5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucy5vZmZDb2xvcilcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kbGFiZWwgPSAkKCc8c3Bhbj4nLCB7XG4gICAgICAgIGh0bWw6IHRoaXMub3B0aW9ucy5sYWJlbFRleHQsXG4gICAgICAgIGNsYXNzOiBwcnZnZXRDbGFzcy5jYWxsKHRoaXMsICdsYWJlbCcpXG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignaW5pdC5ib290c3RyYXBTd2l0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczkub3B0aW9ucy5vbkluaXQoZWxlbWVudCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3N3aXRjaENoYW5nZS5ib290c3RyYXBTd2l0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaGFuZ2VTdGF0ZSA9IF90aGlzOS5vcHRpb25zLm9uU3dpdGNoQ2hhbmdlLmFwcGx5KGVsZW1lbnQsIGFyZ3MpO1xuICAgICAgICBpZiAoY2hhbmdlU3RhdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKF90aGlzOS4kZWxlbWVudC5pcygnOnJhZGlvJykpIHtcbiAgICAgICAgICAgICQoJ1tuYW1lPVwiJyArIF90aGlzOS4kZWxlbWVudC5hdHRyKCduYW1lJykgKyAnXCJdJykudHJpZ2dlcigncHJldmlvdXNTdGF0ZS5ib290c3RyYXBTd2l0Y2gnLCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXM5LiRlbGVtZW50LnRyaWdnZXIoJ3ByZXZpb3VzU3RhdGUuYm9vdHN0cmFwU3dpdGNoJywgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kY29udGFpbmVyID0gdGhpcy4kZWxlbWVudC53cmFwKHRoaXMuJGNvbnRhaW5lcikucGFyZW50KCk7XG4gICAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kY29udGFpbmVyLndyYXAodGhpcy4kd3JhcHBlcikucGFyZW50KCk7XG4gICAgICB0aGlzLiRlbGVtZW50LmJlZm9yZSh0aGlzLm9wdGlvbnMuaW52ZXJzZSA/IHRoaXMuJG9mZiA6IHRoaXMuJG9uKS5iZWZvcmUodGhpcy4kbGFiZWwpLmJlZm9yZSh0aGlzLm9wdGlvbnMuaW52ZXJzZSA/IHRoaXMuJG9uIDogdGhpcy4kb2ZmKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmRldGVybWluYXRlKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucHJvcCgnaW5kZXRlcm1pbmF0ZScsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBwcnZpbml0LmNhbGwodGhpcyk7XG4gICAgICBwcnZlbGVtZW50SGFuZGxlcnMuY2FsbCh0aGlzKTtcbiAgICAgIHBydmhhbmRsZUhhbmRsZXJzLmNhbGwodGhpcyk7XG4gICAgICBwcnZsYWJlbEhhbmRsZXJzLmNhbGwodGhpcyk7XG4gICAgICBwcnZmb3JtSGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgcHJ2ZXh0ZXJuYWxMYWJlbEhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5pdC5ib290c3RyYXBTd2l0Y2gnLCB0aGlzLm9wdGlvbnMuc3RhdGUpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCb290c3RyYXBTd2l0Y2gsIFt7XG4gICAgICBrZXk6ICdzZXRQcmV2T3B0aW9ucycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UHJldk9wdGlvbnMoKSB7XG4gICAgICAgIHRoaXMucHJldk9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdzdGF0ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhdGUodmFsdWUsIHNraXApIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5vcHRpb25zLnJlYWRvbmx5IHx8IHRoaXMub3B0aW9ucy5zdGF0ZSAmJiAhdGhpcy5vcHRpb25zLnJhZGlvQWxsT2ZmICYmIHRoaXMuJGVsZW1lbnQuaXMoJzpyYWRpbycpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuJGVsZW1lbnQuaXMoJzpyYWRpbycpKSB7XG4gICAgICAgICAgJCgnW25hbWU9XCInICsgdGhpcy4kZWxlbWVudC5hdHRyKCduYW1lJykgKyAnXCJdJykudHJpZ2dlcignc2V0UHJldmlvdXNPcHRpb25zLmJvb3RzdHJhcFN3aXRjaCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2V0UHJldmlvdXNPcHRpb25zLmJvb3RzdHJhcFN3aXRjaCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5kZXRlcm1pbmF0ZSkge1xuICAgICAgICAgIHRoaXMuaW5kZXRlcm1pbmF0ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kZWxlbWVudC5wcm9wKCdjaGVja2VkJywgQm9vbGVhbih2YWx1ZSkpLnRyaWdnZXIoJ2NoYW5nZS5ib290c3RyYXBTd2l0Y2gnLCBza2lwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAndG9nZ2xlU3RhdGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZVN0YXRlKHNraXApIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCB8fCB0aGlzLm9wdGlvbnMucmVhZG9ubHkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICB0aGlzLmluZGV0ZXJtaW5hdGUoZmFsc2UpO1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50LnByb3AoJ2NoZWNrZWQnLCAhdGhpcy5vcHRpb25zLnN0YXRlKS50cmlnZ2VyKCdjaGFuZ2UuYm9vdHN0cmFwU3dpdGNoJywgc2tpcCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnc2l6ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2l6ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpemUgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuJHdyYXBwZXIucmVtb3ZlQ2xhc3MocHJ2Z2V0Q2xhc3MuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMuc2l6ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuJHdyYXBwZXIuYWRkQ2xhc3MocHJ2Z2V0Q2xhc3MuY2FsbCh0aGlzLCB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHBydndpZHRoLmNhbGwodGhpcyk7XG4gICAgICAgIHBydmNvbnRhaW5lclBvc2l0aW9uLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zaXplID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2FuaW1hdGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFuaW1hdGUodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFuaW1hdGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlID09PSBCb29sZWFuKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUFuaW1hdGUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICd0b2dnbGVBbmltYXRlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVBbmltYXRlKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuYW5pbWF0ZSA9ICF0aGlzLm9wdGlvbnMuYW5pbWF0ZTtcbiAgICAgICAgdGhpcy4kd3JhcHBlci50b2dnbGVDbGFzcyhwcnZnZXRDbGFzcy5jYWxsKHRoaXMsICdhbmltYXRlJykpO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdkaXNhYmxlZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZWQodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmRpc2FibGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPT09IEJvb2xlYW4odmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlRGlzYWJsZWQoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICd0b2dnbGVEaXNhYmxlZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlRGlzYWJsZWQoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9ICF0aGlzLm9wdGlvbnMuZGlzYWJsZWQ7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucHJvcCgnZGlzYWJsZWQnLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQpO1xuICAgICAgICB0aGlzLiR3cmFwcGVyLnRvZ2dsZUNsYXNzKHBydmdldENsYXNzLmNhbGwodGhpcywgJ2Rpc2FibGVkJykpO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZWFkb25seScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZG9ubHkodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVhZG9ubHkgPT09IEJvb2xlYW4odmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlUmVhZG9ubHkoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICd0b2dnbGVSZWFkb25seScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlUmVhZG9ubHkoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5yZWFkb25seSA9ICF0aGlzLm9wdGlvbnMucmVhZG9ubHk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucHJvcCgncmVhZG9ubHknLCB0aGlzLm9wdGlvbnMucmVhZG9ubHkpO1xuICAgICAgICB0aGlzLiR3cmFwcGVyLnRvZ2dsZUNsYXNzKHBydmdldENsYXNzLmNhbGwodGhpcywgJ3JlYWRvbmx5JykpO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdpbmRldGVybWluYXRlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRldGVybWluYXRlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbmRldGVybWluYXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5kZXRlcm1pbmF0ZSA9PT0gQm9vbGVhbih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVJbmRldGVybWluYXRlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAndG9nZ2xlSW5kZXRlcm1pbmF0ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlSW5kZXRlcm1pbmF0ZSgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmluZGV0ZXJtaW5hdGUgPSAhdGhpcy5vcHRpb25zLmluZGV0ZXJtaW5hdGU7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucHJvcCgnaW5kZXRlcm1pbmF0ZScsIHRoaXMub3B0aW9ucy5pbmRldGVybWluYXRlKTtcbiAgICAgICAgdGhpcy4kd3JhcHBlci50b2dnbGVDbGFzcyhwcnZnZXRDbGFzcy5jYWxsKHRoaXMsICdpbmRldGVybWluYXRlJykpO1xuICAgICAgICBwcnZjb250YWluZXJQb3NpdGlvbi5jYWxsKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdpbnZlcnNlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnZlcnNlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbnZlcnNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW52ZXJzZSA9PT0gQm9vbGVhbih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVJbnZlcnNlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAndG9nZ2xlSW52ZXJzZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlSW52ZXJzZSgpIHtcbiAgICAgICAgdGhpcy4kd3JhcHBlci50b2dnbGVDbGFzcyhwcnZnZXRDbGFzcy5jYWxsKHRoaXMsICdpbnZlcnNlJykpO1xuICAgICAgICB2YXIgJG9uID0gdGhpcy4kb24uY2xvbmUodHJ1ZSk7XG4gICAgICAgIHZhciAkb2ZmID0gdGhpcy4kb2ZmLmNsb25lKHRydWUpO1xuICAgICAgICB0aGlzLiRvbi5yZXBsYWNlV2l0aCgkb2ZmKTtcbiAgICAgICAgdGhpcy4kb2ZmLnJlcGxhY2VXaXRoKCRvbik7XG4gICAgICAgIHRoaXMuJG9uID0gJG9mZjtcbiAgICAgICAgdGhpcy4kb2ZmID0gJG9uO1xuICAgICAgICB0aGlzLm9wdGlvbnMuaW52ZXJzZSA9ICF0aGlzLm9wdGlvbnMuaW52ZXJzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnb25Db2xvcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25Db2xvcih2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMub25Db2xvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9uQ29sb3IpIHtcbiAgICAgICAgICB0aGlzLiRvbi5yZW1vdmVDbGFzcyhwcnZnZXRDbGFzcy5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucy5vbkNvbG9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kb24uYWRkQ2xhc3MocHJ2Z2V0Q2xhc3MuY2FsbCh0aGlzLCB2YWx1ZSkpO1xuICAgICAgICB0aGlzLm9wdGlvbnMub25Db2xvciA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvZmZDb2xvcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmQ29sb3IodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm9mZkNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2ZmQ29sb3IpIHtcbiAgICAgICAgICB0aGlzLiRvZmYucmVtb3ZlQ2xhc3MocHJ2Z2V0Q2xhc3MuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMub2ZmQ29sb3IpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRvZmYuYWRkQ2xhc3MocHJ2Z2V0Q2xhc3MuY2FsbCh0aGlzLCB2YWx1ZSkpO1xuICAgICAgICB0aGlzLm9wdGlvbnMub2ZmQ29sb3IgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnb25UZXh0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblRleHQodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm9uVGV4dDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRvbi5odG1sKHZhbHVlKTtcbiAgICAgICAgcHJ2d2lkdGguY2FsbCh0aGlzKTtcbiAgICAgICAgcHJ2Y29udGFpbmVyUG9zaXRpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9uVGV4dCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvZmZUZXh0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvZmZUZXh0KHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5vZmZUZXh0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJG9mZi5odG1sKHZhbHVlKTtcbiAgICAgICAgcHJ2d2lkdGguY2FsbCh0aGlzKTtcbiAgICAgICAgcHJ2Y29udGFpbmVyUG9zaXRpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9mZlRleHQgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnbGFiZWxUZXh0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsYWJlbFRleHQodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxhYmVsVGV4dDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRsYWJlbC5odG1sKHZhbHVlKTtcbiAgICAgICAgcHJ2d2lkdGguY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmxhYmVsVGV4dCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdoYW5kbGVXaWR0aCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlV2lkdGgodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhhbmRsZVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5oYW5kbGVXaWR0aCA9IHZhbHVlO1xuICAgICAgICBwcnZ3aWR0aC5jYWxsKHRoaXMpO1xuICAgICAgICBwcnZjb250YWluZXJQb3NpdGlvbi5jYWxsKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdsYWJlbFdpZHRoJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsYWJlbFdpZHRoKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sYWJlbFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5sYWJlbFdpZHRoID0gdmFsdWU7XG4gICAgICAgIHBydndpZHRoLmNhbGwodGhpcyk7XG4gICAgICAgIHBydmNvbnRhaW5lclBvc2l0aW9uLmNhbGwodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2Jhc2VDbGFzcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYmFzZUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJhc2VDbGFzcztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICd3cmFwcGVyQ2xhc3MnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdyYXBwZXJDbGFzcyh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JhcHBlckNsYXNzO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3cmFwcGVyQ2xhc3MgPSB2YWx1ZSB8fCAkLmZuLmJvb3RzdHJhcFN3aXRjaC5kZWZhdWx0cy53cmFwcGVyQ2xhc3M7XG4gICAgICAgIHRoaXMuJHdyYXBwZXIucmVtb3ZlQ2xhc3MocHJ2Z2V0Q2xhc3Nlcy5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucy53cmFwcGVyQ2xhc3MpLmpvaW4oJyAnKSk7XG4gICAgICAgIHRoaXMuJHdyYXBwZXIuYWRkQ2xhc3MocHJ2Z2V0Q2xhc3Nlcy5jYWxsKHRoaXMsIHdyYXBwZXJDbGFzcykuam9pbignICcpKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLndyYXBwZXJDbGFzcyA9IHdyYXBwZXJDbGFzcztcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAncmFkaW9BbGxPZmYnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJhZGlvQWxsT2ZmKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yYWRpb0FsbE9mZjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsID0gQm9vbGVhbih2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFkaW9BbGxPZmYgPT09IHZhbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5yYWRpb0FsbE9mZiA9IHZhbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnb25Jbml0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkluaXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm9uSW5pdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnMub25Jbml0ID0gdmFsdWUgfHwgJC5mbi5ib290c3RyYXBTd2l0Y2guZGVmYXVsdHMub25Jbml0O1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvblN3aXRjaENoYW5nZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25Td2l0Y2hDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm9uU3dpdGNoQ2hhbmdlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5vblN3aXRjaENoYW5nZSA9IHZhbHVlIHx8ICQuZm4uYm9vdHN0cmFwU3dpdGNoLmRlZmF1bHRzLm9uU3dpdGNoQ2hhbmdlO1xuICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdkZXN0cm95JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgJGZvcm0gPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ2Zvcm0nKTtcbiAgICAgICAgaWYgKCRmb3JtLmxlbmd0aCkge1xuICAgICAgICAgICRmb3JtLm9mZigncmVzZXQuYm9vdHN0cmFwU3dpdGNoJykucmVtb3ZlRGF0YSgnYm9vdHN0cmFwLXN3aXRjaCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5jaGlsZHJlbigpLm5vdCh0aGlzLiRlbGVtZW50KS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC51bndyYXAoKS51bndyYXAoKS5vZmYoJy5ib290c3RyYXBTd2l0Y2gnKS5yZW1vdmVEYXRhKCdib290c3RyYXAtc3dpdGNoJyk7XG4gICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCb290c3RyYXBTd2l0Y2g7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBib290c3RyYXBTd2l0Y2gob3B0aW9uKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWR1Y2VyKHJldCwgbmV4dCkge1xuICAgICAgdmFyICR0aGlzID0gJChuZXh0KTtcbiAgICAgIHZhciBleGlzdGluZ0RhdGEgPSAkdGhpcy5kYXRhKCdib290c3RyYXAtc3dpdGNoJyk7XG4gICAgICB2YXIgZGF0YSA9IGV4aXN0aW5nRGF0YSB8fCBuZXcgQm9vdHN0cmFwU3dpdGNoKG5leHQsIG9wdGlvbik7XG4gICAgICBpZiAoIWV4aXN0aW5nRGF0YSkge1xuICAgICAgICAkdGhpcy5kYXRhKCdib290c3RyYXAtc3dpdGNoJywgZGF0YSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwodGhpcywgcmVkdWNlciwgdGhpcyk7XG4gIH1cblxuICAkLmZuLmJvb3RzdHJhcFN3aXRjaCA9IGJvb3RzdHJhcFN3aXRjaDtcbiAgJC5mbi5ib290c3RyYXBTd2l0Y2guQ29uc3RydWN0b3IgPSBCb290c3RyYXBTd2l0Y2g7XG4gICQuZm4uYm9vdHN0cmFwU3dpdGNoLmRlZmF1bHRzID0ge1xuICAgIHN0YXRlOiB0cnVlLFxuICAgIHNpemU6IG51bGwsXG4gICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgcmVhZG9ubHk6IGZhbHNlLFxuICAgIGluZGV0ZXJtaW5hdGU6IGZhbHNlLFxuICAgIGludmVyc2U6IGZhbHNlLFxuICAgIHJhZGlvQWxsT2ZmOiBmYWxzZSxcbiAgICBvbkNvbG9yOiAncHJpbWFyeScsXG4gICAgb2ZmQ29sb3I6ICdkZWZhdWx0JyxcbiAgICBvblRleHQ6ICdPTicsXG4gICAgb2ZmVGV4dDogJ09GRicsXG4gICAgbGFiZWxUZXh0OiAnJm5ic3AnLFxuICAgIGhhbmRsZVdpZHRoOiAnYXV0bycsXG4gICAgbGFiZWxXaWR0aDogJ2F1dG8nLFxuICAgIGJhc2VDbGFzczogJ2Jvb3RzdHJhcC1zd2l0Y2gnLFxuICAgIHdyYXBwZXJDbGFzczogJ3dyYXBwZXInLFxuICAgIG9uSW5pdDogZnVuY3Rpb24gb25Jbml0KCkge30sXG4gICAgb25Td2l0Y2hDaGFuZ2U6IGZ1bmN0aW9uIG9uU3dpdGNoQ2hhbmdlKCkge31cbiAgfTtcbn0pO1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIiFmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe3ZhciB0PXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZHsyfSlcXC4vKSxuPSEhdCYmMTY8PXBhcnNlSW50KHRbMV0sMTApO2lmKCEoXCJvYmplY3RGaXRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSE9ITEpfHxuKXt2YXIgbz1mdW5jdGlvbih0LGUsaSl7dmFyIG4sbyxsLGEsZDtpZigoaT1pLnNwbGl0KFwiIFwiKSkubGVuZ3RoPDImJihpWzFdPWlbMF0pLFwieFwiPT09dCluPWlbMF0sbz1pWzFdLGw9XCJsZWZ0XCIsYT1cInJpZ2h0XCIsZD1lLmNsaWVudFdpZHRoO2Vsc2V7aWYoXCJ5XCIhPT10KXJldHVybjtuPWlbMV0sbz1pWzBdLGw9XCJ0b3BcIixhPVwiYm90dG9tXCIsZD1lLmNsaWVudEhlaWdodH1pZihuIT09bCYmbyE9PWwpe2lmKG4hPT1hJiZvIT09YSlyZXR1cm5cImNlbnRlclwiPT09bnx8XCI1MCVcIj09PW4/KGUuc3R5bGVbbF09XCI1MCVcIix2b2lkKGUuc3R5bGVbXCJtYXJnaW4tXCIrbF09ZC8tMitcInB4XCIpKTp2b2lkKDA8PW4uaW5kZXhPZihcIiVcIik/KG49cGFyc2VJbnQobikpPDUwPyhlLnN0eWxlW2xdPW4rXCIlXCIsZS5zdHlsZVtcIm1hcmdpbi1cIitsXT1kKihuLy0xMDApK1wicHhcIik6KG49MTAwLW4sZS5zdHlsZVthXT1uK1wiJVwiLGUuc3R5bGVbXCJtYXJnaW4tXCIrYV09ZCoobi8tMTAwKStcInB4XCIpOmUuc3R5bGVbbF09bik7ZS5zdHlsZVthXT1cIjBcIn1lbHNlIGUuc3R5bGVbbF09XCIwXCJ9LGw9ZnVuY3Rpb24odCl7dmFyIGU9dC5kYXRhc2V0P3QuZGF0YXNldC5vYmplY3RGaXQ6dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9iamVjdC1maXRcIiksaT10LmRhdGFzZXQ/dC5kYXRhc2V0Lm9iamVjdFBvc2l0aW9uOnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1vYmplY3QtcG9zaXRpb25cIik7ZT1lfHxcImNvdmVyXCIsaT1pfHxcIjUwJSA1MCVcIjt2YXIgbj10LnBhcmVudE5vZGU7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQsbnVsbCksaT1lLmdldFByb3BlcnR5VmFsdWUoXCJwb3NpdGlvblwiKSxuPWUuZ2V0UHJvcGVydHlWYWx1ZShcIm92ZXJmbG93XCIpLG89ZS5nZXRQcm9wZXJ0eVZhbHVlKFwiZGlzcGxheVwiKTtpJiZcInN0YXRpY1wiIT09aXx8KHQuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxcImhpZGRlblwiIT09biYmKHQuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIiksbyYmXCJpbmxpbmVcIiE9PW98fCh0LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiKSwwPT09dC5jbGllbnRIZWlnaHQmJih0LnN0eWxlLmhlaWdodD1cIjEwMCVcIiksLTE9PT10LmNsYXNzTmFtZS5pbmRleE9mKFwib2JqZWN0LWZpdC1wb2x5ZmlsbFwiKSYmKHQuY2xhc3NOYW1lPXQuY2xhc3NOYW1lK1wiIG9iamVjdC1maXQtcG9seWZpbGxcIil9KG4pLGZ1bmN0aW9uKHQpe3ZhciBlPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQsbnVsbCksaT17XCJtYXgtd2lkdGhcIjpcIm5vbmVcIixcIm1heC1oZWlnaHRcIjpcIm5vbmVcIixcIm1pbi13aWR0aFwiOlwiMHB4XCIsXCJtaW4taGVpZ2h0XCI6XCIwcHhcIix0b3A6XCJhdXRvXCIscmlnaHQ6XCJhdXRvXCIsYm90dG9tOlwiYXV0b1wiLGxlZnQ6XCJhdXRvXCIsXCJtYXJnaW4tdG9wXCI6XCIwcHhcIixcIm1hcmdpbi1yaWdodFwiOlwiMHB4XCIsXCJtYXJnaW4tYm90dG9tXCI6XCIwcHhcIixcIm1hcmdpbi1sZWZ0XCI6XCIwcHhcIn07Zm9yKHZhciBuIGluIGkpZS5nZXRQcm9wZXJ0eVZhbHVlKG4pIT09aVtuXSYmKHQuc3R5bGVbbl09aVtuXSl9KHQpLHQuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLHQuc3R5bGUud2lkdGg9XCJhdXRvXCIsdC5zdHlsZS5oZWlnaHQ9XCJhdXRvXCIsXCJzY2FsZS1kb3duXCI9PT1lJiYoZT10LmNsaWVudFdpZHRoPG4uY2xpZW50V2lkdGgmJnQuY2xpZW50SGVpZ2h0PG4uY2xpZW50SGVpZ2h0P1wibm9uZVwiOlwiY29udGFpblwiKSxcIm5vbmVcIj09PWU/KG8oXCJ4XCIsdCxpKSx2b2lkIG8oXCJ5XCIsdCxpKSk6XCJmaWxsXCI9PT1lPyh0LnN0eWxlLndpZHRoPVwiMTAwJVwiLHQuc3R5bGUuaGVpZ2h0PVwiMTAwJVwiLG8oXCJ4XCIsdCxpKSx2b2lkIG8oXCJ5XCIsdCxpKSk6KHQuc3R5bGUuaGVpZ2h0PVwiMTAwJVwiLHZvaWQoXCJjb3ZlclwiPT09ZSYmdC5jbGllbnRXaWR0aD5uLmNsaWVudFdpZHRofHxcImNvbnRhaW5cIj09PWUmJnQuY2xpZW50V2lkdGg8bi5jbGllbnRXaWR0aD8odC5zdHlsZS50b3A9XCIwXCIsdC5zdHlsZS5tYXJnaW5Ub3A9XCIwXCIsbyhcInhcIix0LGkpKToodC5zdHlsZS53aWR0aD1cIjEwMCVcIix0LnN0eWxlLmhlaWdodD1cImF1dG9cIix0LnN0eWxlLmxlZnQ9XCIwXCIsdC5zdHlsZS5tYXJnaW5MZWZ0PVwiMFwiLG8oXCJ5XCIsdCxpKSkpKX0sZT1mdW5jdGlvbih0KXtpZih2b2lkIDA9PT10fHx0IGluc3RhbmNlb2YgRXZlbnQpdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtb2JqZWN0LWZpdF1cIik7ZWxzZSBpZih0JiZ0Lm5vZGVOYW1lKXQ9W3RdO2Vsc2V7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHR8fCF0Lmxlbmd0aHx8IXRbMF0ubm9kZU5hbWUpcmV0dXJuITE7dD10fWZvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKWlmKHRbZV0ubm9kZU5hbWUpe3ZhciBpPXRbZV0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcImltZ1wiPT09aSl7aWYobiljb250aW51ZTt0W2VdLmNvbXBsZXRlP2wodFtlXSk6dFtlXS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKCl7bCh0aGlzKX0pfWVsc2VcInZpZGVvXCI9PT1pPzA8dFtlXS5yZWFkeVN0YXRlP2wodFtlXSk6dFtlXS5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVkbWV0YWRhdGFcIixmdW5jdGlvbigpe2wodGhpcyl9KTpsKHRbZV0pfXJldHVybiEwfTtcImxvYWRpbmdcIj09PWRvY3VtZW50LnJlYWR5U3RhdGU/ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixlKTplKCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixlKSx3aW5kb3cub2JqZWN0Rml0UG9seWZpbGw9ZX1lbHNlIHdpbmRvdy5vYmplY3RGaXRQb2x5ZmlsbD1mdW5jdGlvbigpe3JldHVybiExfX19KCk7IiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuNC4xXG4gKiBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy8zLjQvamF2YXNjcmlwdC8jYWZmaXhcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBBRkZJWCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQWZmaXggPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBZmZpeC5ERUZBVUxUUywgb3B0aW9ucylcblxuICAgIHZhciB0YXJnZXQgPSB0aGlzLm9wdGlvbnMudGFyZ2V0ID09PSBBZmZpeC5ERUZBVUxUUy50YXJnZXQgPyAkKHRoaXMub3B0aW9ucy50YXJnZXQpIDogJChkb2N1bWVudCkuZmluZCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gdGFyZ2V0XG4gICAgICAub24oJ3Njcm9sbC5icy5hZmZpeC5kYXRhLWFwaScsICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLCB0aGlzKSlcbiAgICAgIC5vbignY2xpY2suYnMuYWZmaXguZGF0YS1hcGknLCAgJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wLCB0aGlzKSlcblxuICAgIHRoaXMuJGVsZW1lbnQgICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuYWZmaXhlZCAgICAgID0gbnVsbFxuICAgIHRoaXMudW5waW4gICAgICAgID0gbnVsbFxuICAgIHRoaXMucGlubmVkT2Zmc2V0ID0gbnVsbFxuXG4gICAgdGhpcy5jaGVja1Bvc2l0aW9uKClcbiAgfVxuXG4gIEFmZml4LlZFUlNJT04gID0gJzMuNC4xJ1xuXG4gIEFmZml4LlJFU0VUICAgID0gJ2FmZml4IGFmZml4LXRvcCBhZmZpeC1ib3R0b20nXG5cbiAgQWZmaXguREVGQVVMVFMgPSB7XG4gICAgb2Zmc2V0OiAwLFxuICAgIHRhcmdldDogd2luZG93XG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuZ2V0U3RhdGUgPSBmdW5jdGlvbiAoc2Nyb2xsSGVpZ2h0LCBoZWlnaHQsIG9mZnNldFRvcCwgb2Zmc2V0Qm90dG9tKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKVxuICAgIHZhciBwb3NpdGlvbiAgICAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXG4gICAgdmFyIHRhcmdldEhlaWdodCA9IHRoaXMuJHRhcmdldC5oZWlnaHQoKVxuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHRoaXMuYWZmaXhlZCA9PSAndG9wJykgcmV0dXJuIHNjcm9sbFRvcCA8IG9mZnNldFRvcCA/ICd0b3AnIDogZmFsc2VcblxuICAgIGlmICh0aGlzLmFmZml4ZWQgPT0gJ2JvdHRvbScpIHtcbiAgICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCkgcmV0dXJuIChzY3JvbGxUb3AgKyB0aGlzLnVucGluIDw9IHBvc2l0aW9uLnRvcCkgPyBmYWxzZSA6ICdib3R0b20nXG4gICAgICByZXR1cm4gKHNjcm9sbFRvcCArIHRhcmdldEhlaWdodCA8PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pID8gZmFsc2UgOiAnYm90dG9tJ1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsaXppbmcgICA9IHRoaXMuYWZmaXhlZCA9PSBudWxsXG4gICAgdmFyIGNvbGxpZGVyVG9wICAgID0gaW5pdGlhbGl6aW5nID8gc2Nyb2xsVG9wIDogcG9zaXRpb24udG9wXG4gICAgdmFyIGNvbGxpZGVySGVpZ2h0ID0gaW5pdGlhbGl6aW5nID8gdGFyZ2V0SGVpZ2h0IDogaGVpZ2h0XG5cbiAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwgJiYgc2Nyb2xsVG9wIDw9IG9mZnNldFRvcCkgcmV0dXJuICd0b3AnXG4gICAgaWYgKG9mZnNldEJvdHRvbSAhPSBudWxsICYmIChjb2xsaWRlclRvcCArIGNvbGxpZGVySGVpZ2h0ID49IHNjcm9sbEhlaWdodCAtIG9mZnNldEJvdHRvbSkpIHJldHVybiAnYm90dG9tJ1xuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuZ2V0UGlubmVkT2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnBpbm5lZE9mZnNldCkgcmV0dXJuIHRoaXMucGlubmVkT2Zmc2V0XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVCkuYWRkQ2xhc3MoJ2FmZml4JylcbiAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpXG4gICAgdmFyIHBvc2l0aW9uICA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClcbiAgICByZXR1cm4gKHRoaXMucGlubmVkT2Zmc2V0ID0gcG9zaXRpb24udG9wIC0gc2Nyb2xsVG9wKVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpLCAxKVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmNoZWNrUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSByZXR1cm5cblxuICAgIHZhciBoZWlnaHQgICAgICAgPSB0aGlzLiRlbGVtZW50LmhlaWdodCgpXG4gICAgdmFyIG9mZnNldCAgICAgICA9IHRoaXMub3B0aW9ucy5vZmZzZXRcbiAgICB2YXIgb2Zmc2V0VG9wICAgID0gb2Zmc2V0LnRvcFxuICAgIHZhciBvZmZzZXRCb3R0b20gPSBvZmZzZXQuYm90dG9tXG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IE1hdGgubWF4KCQoZG9jdW1lbnQpLmhlaWdodCgpLCAkKGRvY3VtZW50LmJvZHkpLmhlaWdodCgpKVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgIT0gJ29iamVjdCcpICAgICAgICAgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0VG9wID0gb2Zmc2V0XG4gICAgaWYgKHR5cGVvZiBvZmZzZXRUb3AgPT0gJ2Z1bmN0aW9uJykgICAgb2Zmc2V0VG9wICAgID0gb2Zmc2V0LnRvcCh0aGlzLiRlbGVtZW50KVxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0Qm90dG9tID09ICdmdW5jdGlvbicpIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b20odGhpcy4kZWxlbWVudClcblxuICAgIHZhciBhZmZpeCA9IHRoaXMuZ2V0U3RhdGUoc2Nyb2xsSGVpZ2h0LCBoZWlnaHQsIG9mZnNldFRvcCwgb2Zmc2V0Qm90dG9tKVxuXG4gICAgaWYgKHRoaXMuYWZmaXhlZCAhPSBhZmZpeCkge1xuICAgICAgaWYgKHRoaXMudW5waW4gIT0gbnVsbCkgdGhpcy4kZWxlbWVudC5jc3MoJ3RvcCcsICcnKVxuXG4gICAgICB2YXIgYWZmaXhUeXBlID0gJ2FmZml4JyArIChhZmZpeCA/ICctJyArIGFmZml4IDogJycpXG4gICAgICB2YXIgZSAgICAgICAgID0gJC5FdmVudChhZmZpeFR5cGUgKyAnLmJzLmFmZml4JylcblxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgdGhpcy5hZmZpeGVkID0gYWZmaXhcbiAgICAgIHRoaXMudW5waW4gPSBhZmZpeCA9PSAnYm90dG9tJyA/IHRoaXMuZ2V0UGlubmVkT2Zmc2V0KCkgOiBudWxsXG5cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKVxuICAgICAgICAuYWRkQ2xhc3MoYWZmaXhUeXBlKVxuICAgICAgICAudHJpZ2dlcihhZmZpeFR5cGUucmVwbGFjZSgnYWZmaXgnLCAnYWZmaXhlZCcpICsgJy5icy5hZmZpeCcpXG4gICAgfVxuXG4gICAgaWYgKGFmZml4ID09ICdib3R0b20nKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZnNldCh7XG4gICAgICAgIHRvcDogc2Nyb2xsSGVpZ2h0IC0gaGVpZ2h0IC0gb2Zmc2V0Qm90dG9tXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG5cbiAgLy8gQUZGSVggUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuYWZmaXgnKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmFmZml4JywgKGRhdGEgPSBuZXcgQWZmaXgodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmFmZml4XG5cbiAgJC5mbi5hZmZpeCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmFmZml4LkNvbnN0cnVjdG9yID0gQWZmaXhcblxuXG4gIC8vIEFGRklYIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5hZmZpeC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYWZmaXggPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBRkZJWCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdbZGF0YS1zcHk9XCJhZmZpeFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzcHkgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSA9ICRzcHkuZGF0YSgpXG5cbiAgICAgIGRhdGEub2Zmc2V0ID0gZGF0YS5vZmZzZXQgfHwge31cblxuICAgICAgaWYgKGRhdGEub2Zmc2V0Qm90dG9tICE9IG51bGwpIGRhdGEub2Zmc2V0LmJvdHRvbSA9IGRhdGEub2Zmc2V0Qm90dG9tXG4gICAgICBpZiAoZGF0YS5vZmZzZXRUb3AgICAgIT0gbnVsbCkgZGF0YS5vZmZzZXQudG9wICAgID0gZGF0YS5vZmZzZXRUb3BcblxuICAgICAgUGx1Z2luLmNhbGwoJHNweSwgZGF0YSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIvKiFcbiAqICAgICAgICAgLC9cbiAqICAgICAgICwnL1xuICogICAgICwnIC9cbiAqICAgLCcgIC9fX19fXyxcbiAqIC4nX19fXyAgICAsJ1xuICogICAgICAvICAsJ1xuICogICAgIC8gLCdcbiAqICAgIC8sJ1xuICogICAvJ1xuICpcbiAqIFNlbGVjdHJpYyDPnyB2MS4xMy4wIChBdWcgMjIgMjAxNykgLSBodHRwOi8vbGNkc2FudG9zLmdpdGh1Yi5pby9qUXVlcnktU2VsZWN0cmljL1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNyBMZW9uYXJkbyBTYW50b3M7IE1JVCBMaWNlbnNlXG4gKlxuICovXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gIC8qIGdsb2JhbCBkZWZpbmUgKi9cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBOb2RlL0NvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcm9vdCwgalF1ZXJ5ICkge1xuICAgICAgaWYgKCBqUXVlcnkgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgaWYgKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKShyb290KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgICAgcmV0dXJuIGpRdWVyeTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgfVxufShmdW5jdGlvbigkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgJGRvYyA9ICQoZG9jdW1lbnQpO1xuICB2YXIgJHdpbiA9ICQod2luZG93KTtcblxuICB2YXIgcGx1Z2luTmFtZSA9ICdzZWxlY3RyaWMnO1xuICB2YXIgY2xhc3NMaXN0ID0gJ0lucHV0IEl0ZW1zIE9wZW4gRGlzYWJsZWQgVGVtcFNob3cgSGlkZVNlbGVjdCBXcmFwcGVyIEZvY3VzIEhvdmVyIFJlc3BvbnNpdmUgQWJvdmUgQmVsb3cgU2Nyb2xsIEdyb3VwIEdyb3VwTGFiZWwnO1xuICB2YXIgZXZlbnROYW1lc3BhY2VTdWZmaXggPSAnLnNsJztcblxuICB2YXIgY2hhcnMgPSBbJ2EnLCAnZScsICdpJywgJ28nLCAndScsICduJywgJ2MnLCAneSddO1xuICB2YXIgZGlhY3JpdGljcyA9IFtcbiAgICAvW1xceEUwLVxceEU1XS9nLCAvLyBhXG4gICAgL1tcXHhFOC1cXHhFQl0vZywgLy8gZVxuICAgIC9bXFx4RUMtXFx4RUZdL2csIC8vIGlcbiAgICAvW1xceEYyLVxceEY2XS9nLCAvLyBvXG4gICAgL1tcXHhGOS1cXHhGQ10vZywgLy8gdVxuICAgIC9bXFx4RjFdL2csICAgICAgLy8gblxuICAgIC9bXFx4RTddL2csICAgICAgLy8gY1xuICAgIC9bXFx4RkQtXFx4RkZdL2cgIC8vIHlcbiAgXTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIFNlbGVjdHJpY1xuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IC0gVGhlICZsdDtzZWxlY3QmZ3Q7IGVsZW1lbnRcbiAgICogQHBhcmFtIHtvYmplY3R9ICBvcHRzIC0gT3B0aW9uc1xuICAgKi9cbiAgdmFyIFNlbGVjdHJpYyA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdHMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgX3RoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtdWx0aXBsZSAgICAgICA6ICEhX3RoaXMuJGVsZW1lbnQuYXR0cignbXVsdGlwbGUnKSxcbiAgICAgIGVuYWJsZWQgICAgICAgIDogZmFsc2UsXG4gICAgICBvcGVuZWQgICAgICAgICA6IGZhbHNlLFxuICAgICAgY3VyclZhbHVlICAgICAgOiAtMSxcbiAgICAgIHNlbGVjdGVkSWR4ICAgIDogLTEsXG4gICAgICBoaWdobGlnaHRlZElkeCA6IC0xXG4gICAgfTtcblxuICAgIF90aGlzLmV2ZW50VHJpZ2dlcnMgPSB7XG4gICAgICBvcGVuICAgIDogX3RoaXMub3BlbixcbiAgICAgIGNsb3NlICAgOiBfdGhpcy5jbG9zZSxcbiAgICAgIGRlc3Ryb3kgOiBfdGhpcy5kZXN0cm95LFxuICAgICAgcmVmcmVzaCA6IF90aGlzLnJlZnJlc2gsXG4gICAgICBpbml0ICAgIDogX3RoaXMuaW5pdFxuICAgIH07XG5cbiAgICBfdGhpcy5pbml0KG9wdHMpO1xuICB9O1xuXG4gIFNlbGVjdHJpYy5wcm90b3R5cGUgPSB7XG4gICAgdXRpbHM6IHtcbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IG1vYmlsZSBicm93c2VyXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgaXNNb2JpbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gL2FuZHJvaWR8aXAoaG9uZXxvZHxhZCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBFc2NhcGUgZXNwZWNpYWwgY2hhcmFjdGVycyBpbiBzdHJpbmcgKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvR3VpZGUvUmVndWxhcl9FeHByZXNzaW9ucylcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gYmUgZXNjYXBlZFxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSAgICAgICBUaGUgc3RyaW5nIHdpdGggdGhlIHNwZWNpYWwgY2hhcmFjdGVycyBlc2NhcGVkXG4gICAgICAgKi9cbiAgICAgIGVzY2FwZVJlZ0V4cDogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKTsgLy8gJCYgbWVhbnMgdGhlIHdob2xlIG1hdGNoZWQgc3RyaW5nXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlcGxhY2UgZGlhY3JpdGljc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byByZXBsYWNlIHRoZSBkaWFjcml0aWNzXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgIFRoZSBzdHJpbmcgd2l0aCBkaWFjcml0aWNzIHJlcGxhY2VkIHdpdGggYXNjaWkgY2hhcmFjdGVyc1xuICAgICAgICovXG4gICAgICByZXBsYWNlRGlhY3JpdGljczogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHZhciBrID0gZGlhY3JpdGljcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGstLSkge1xuICAgICAgICAgIHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoZGlhY3JpdGljc1trXSwgY2hhcnNba10pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogRm9ybWF0IHN0cmluZ1xuICAgICAgICogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vYXRlc2dvcmFsLzk4NDM3NVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge3N0cmluZ30gZiAtIFN0cmluZyB0byBiZSBmb3JtYXRlZFxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSAgICAgU3RyaW5nIGZvcm1hdGVkXG4gICAgICAgKi9cbiAgICAgIGZvcm1hdDogZnVuY3Rpb24oZikge1xuICAgICAgICB2YXIgYSA9IGFyZ3VtZW50czsgLy8gc3RvcmUgb3V0ZXIgYXJndW1lbnRzXG4gICAgICAgIHJldHVybiAoJycgKyBmKSAvLyBmb3JjZSBmb3JtYXQgc3BlY2lmaWVyIHRvIFN0cmluZ1xuICAgICAgICAgIC5yZXBsYWNlKCAvLyByZXBsYWNlIHRva2VucyBpbiBmb3JtYXQgc3BlY2lmaWVyXG4gICAgICAgICAgICAvXFx7KD86KFxcZCspfChcXHcrKSlcXH0vZywgLy8gbWF0Y2gge3Rva2VufSByZWZlcmVuY2VzXG4gICAgICAgICAgICBmdW5jdGlvbihcbiAgICAgICAgICAgICAgcywgLy8gdGhlIG1hdGNoZWQgc3RyaW5nIChpZ25vcmVkKVxuICAgICAgICAgICAgICBpLCAvLyBhbiBhcmd1bWVudCBpbmRleFxuICAgICAgICAgICAgICBwIC8vIGEgcHJvcGVydHkgbmFtZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwICYmIGFbMV0gLy8gaWYgcHJvcGVydHkgbmFtZSBhbmQgZmlyc3QgYXJndW1lbnQgZXhpc3RcbiAgICAgICAgICAgICAgICA/IGFbMV1bcF0gLy8gcmV0dXJuIHByb3BlcnR5IGZyb20gZmlyc3QgYXJndW1lbnRcbiAgICAgICAgICAgICAgICA6IGFbaV07IC8vIGFzc3VtZSBhcmd1bWVudCBpbmRleCBhbmQgcmV0dXJuIGktdGggYXJndW1lbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIG5leHQgZW5hYmxlZCBpdGVtIGluIHRoZSBvcHRpb25zIGxpc3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7b2JqZWN0fSBzZWxlY3RJdGVtcyAtIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgICAqIEBwYXJhbSAge251bWJlcn0gICAgc2VsZWN0ZWQgLSBJbmRleCBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbi5cbiAgICAgICAqIEByZXR1cm4ge29iamVjdH0gICAgICAgICAgICAgICBUaGUgbmV4dCBlbmFibGVkIGl0ZW0uXG4gICAgICAgKi9cbiAgICAgIG5leHRFbmFibGVkSXRlbTogZnVuY3Rpb24oc2VsZWN0SXRlbXMsIHNlbGVjdGVkKSB7XG4gICAgICAgIHdoaWxlICggc2VsZWN0SXRlbXNbIHNlbGVjdGVkID0gKHNlbGVjdGVkICsgMSkgJSBzZWxlY3RJdGVtcy5sZW5ndGggXS5kaXNhYmxlZCApIHtcbiAgICAgICAgICAvLyBlbXB0eVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBwcmV2aW91cyBlbmFibGVkIGl0ZW0gaW4gdGhlIG9wdGlvbnMgbGlzdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHNlbGVjdEl0ZW1zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAgICogQHBhcmFtICB7bnVtYmVyfSAgICBzZWxlY3RlZCAtIEluZGV4IG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgb3B0aW9uLlxuICAgICAgICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgIFRoZSBwcmV2aW91cyBlbmFibGVkIGl0ZW0uXG4gICAgICAgKi9cbiAgICAgIHByZXZpb3VzRW5hYmxlZEl0ZW06IGZ1bmN0aW9uKHNlbGVjdEl0ZW1zLCBzZWxlY3RlZCkge1xuICAgICAgICB3aGlsZSAoIHNlbGVjdEl0ZW1zWyBzZWxlY3RlZCA9IChzZWxlY3RlZCA+IDAgPyBzZWxlY3RlZCA6IHNlbGVjdEl0ZW1zLmxlbmd0aCkgLSAxIF0uZGlzYWJsZWQgKSB7XG4gICAgICAgICAgLy8gZW1wdHlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRyYW5zZm9ybSBjYW1lbENhc2Ugc3RyaW5nIHRvIGRhc2gtY2FzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHN0ciAtIFRoZSBjYW1lbENhc2VkIHN0cmluZy5cbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgVGhlIHN0cmluZyB0cmFuc2Zvcm1lZCB0byBkYXNoLWNhc2UuXG4gICAgICAgKi9cbiAgICAgIHRvRGFzaDogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbHMgdGhlIGV2ZW50cyByZWdpc3RlcmVkIHdpdGggZnVuY3Rpb24gbmFtZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gICAgZm4gLSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NvcGUgLSBTY29wZSB0aGF0IHNob3VsZCBiZSBzZXQgb24gdGhlIGZ1bmN0aW9uLlxuICAgICAgICovXG4gICAgICB0cmlnZ2VyQ2FsbGJhY2s6IGZ1bmN0aW9uKGZuLCBzY29wZSkge1xuICAgICAgICB2YXIgZWxtID0gc2NvcGUuZWxlbWVudDtcbiAgICAgICAgdmFyIGZ1bmMgPSBzY29wZS5vcHRpb25zWydvbicgKyBmbl07XG4gICAgICAgIHZhciBhcmdzID0gW2VsbV0uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5zbGljZSgxKSk7XG5cbiAgICAgICAgaWYgKCAkLmlzRnVuY3Rpb24oZnVuYykgKSB7XG4gICAgICAgICAgZnVuYy5hcHBseShlbG0sIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgJChlbG0pLnRyaWdnZXIocGx1Z2luTmFtZSArICctJyArIHRoaXMudG9EYXNoKGZuKSwgYXJncyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRyYW5zZm9ybSBhcnJheSBsaXN0IHRvIGNvbmNhdGVuYXRlZCBzdHJpbmcgYW5kIHJlbW92ZSBlbXB0eSB2YWx1ZXNcbiAgICAgICAqIEBwYXJhbSAge2FycmF5fSBhcnIgLSBDbGFzcyBsaXN0XG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgQ29uY2F0ZW5hdGVkIHN0cmluZ1xuICAgICAgICovXG4gICAgICBhcnJheVRvQ2xhc3NuYW1lOiBmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgdmFyIG5ld0FyciA9ICQuZ3JlcChhcnIsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gISFpdGVtO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gJC50cmltKG5ld0Fyci5qb2luKCcgJykpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogSW5pdGlhbGl6ZXMgKi9cbiAgICBpbml0OiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAvLyBTZXQgb3B0aW9uc1xuICAgICAgX3RoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmZuW3BsdWdpbk5hbWVdLmRlZmF1bHRzLCBfdGhpcy5vcHRpb25zLCBvcHRzKTtcblxuICAgICAgX3RoaXMudXRpbHMudHJpZ2dlckNhbGxiYWNrKCdCZWZvcmVJbml0JywgX3RoaXMpO1xuXG4gICAgICAvLyBQcmVzZXJ2ZSBkYXRhXG4gICAgICBfdGhpcy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAvLyBEaXNhYmxlIG9uIG1vYmlsZSBicm93c2Vyc1xuICAgICAgaWYgKCBfdGhpcy5vcHRpb25zLmRpc2FibGVPbk1vYmlsZSAmJiBfdGhpcy51dGlscy5pc01vYmlsZSgpICkge1xuICAgICAgICBfdGhpcy5kaXNhYmxlT25Nb2JpbGUgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBjbGFzc2VzXG4gICAgICBfdGhpcy5jbGFzc2VzID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygpO1xuXG4gICAgICAvLyBDcmVhdGUgZWxlbWVudHNcbiAgICAgIHZhciBpbnB1dCAgICAgICAgICAgICAgPSAkKCc8aW5wdXQvPicsIHsgJ2NsYXNzJzogX3RoaXMuY2xhc3Nlcy5pbnB1dCwgJ3JlYWRvbmx5JzogX3RoaXMudXRpbHMuaXNNb2JpbGUoKSB9KTtcbiAgICAgIHZhciBpdGVtcyAgICAgICAgICAgICAgPSAkKCc8ZGl2Lz4nLCAgIHsgJ2NsYXNzJzogX3RoaXMuY2xhc3Nlcy5pdGVtcywgJ3RhYmluZGV4JzogLTEgfSk7XG4gICAgICB2YXIgaXRlbXNTY3JvbGwgICAgICAgID0gJCgnPGRpdi8+JywgICB7ICdjbGFzcyc6IF90aGlzLmNsYXNzZXMuc2Nyb2xsIH0pO1xuICAgICAgdmFyIHdyYXBwZXIgICAgICAgICAgICA9ICQoJzxkaXYvPicsICAgeyAnY2xhc3MnOiBfdGhpcy5jbGFzc2VzLnByZWZpeCwgJ2h0bWwnOiBfdGhpcy5vcHRpb25zLmFycm93QnV0dG9uTWFya3VwIH0pO1xuICAgICAgdmFyIGxhYmVsICAgICAgICAgICAgICA9ICQoJzxzcGFuLz4nLCAgeyAnY2xhc3MnOiAnbGFiZWwnIH0pO1xuICAgICAgdmFyIG91dGVyV3JhcHBlciAgICAgICA9IF90aGlzLiRlbGVtZW50LndyYXAoJzxkaXYvPicpLnBhcmVudCgpLmFwcGVuZCh3cmFwcGVyLnByZXBlbmQobGFiZWwpLCBpdGVtcywgaW5wdXQpO1xuICAgICAgdmFyIGhpZGVTZWxlY3RXcmFwcGVyICA9ICQoJzxkaXYvPicsICAgeyAnY2xhc3MnOiBfdGhpcy5jbGFzc2VzLmhpZGVzZWxlY3QgfSk7XG5cbiAgICAgIF90aGlzLmVsZW1lbnRzID0ge1xuICAgICAgICBpbnB1dCAgICAgICAgOiBpbnB1dCxcbiAgICAgICAgaXRlbXMgICAgICAgIDogaXRlbXMsXG4gICAgICAgIGl0ZW1zU2Nyb2xsICA6IGl0ZW1zU2Nyb2xsLFxuICAgICAgICB3cmFwcGVyICAgICAgOiB3cmFwcGVyLFxuICAgICAgICBsYWJlbCAgICAgICAgOiBsYWJlbCxcbiAgICAgICAgb3V0ZXJXcmFwcGVyIDogb3V0ZXJXcmFwcGVyXG4gICAgICB9O1xuXG4gICAgICBpZiAoIF90aGlzLm9wdGlvbnMubmF0aXZlT25Nb2JpbGUgJiYgX3RoaXMudXRpbHMuaXNNb2JpbGUoKSApIHtcbiAgICAgICAgX3RoaXMuZWxlbWVudHMuaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGhpZGVTZWxlY3RXcmFwcGVyLmFkZENsYXNzKF90aGlzLmNsYXNzZXMucHJlZml4ICsgJy1pcy1uYXRpdmUnKTtcblxuICAgICAgICBfdGhpcy4kZWxlbWVudC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMucmVmcmVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuJGVsZW1lbnRcbiAgICAgICAgLm9uKF90aGlzLmV2ZW50VHJpZ2dlcnMpXG4gICAgICAgIC53cmFwKGhpZGVTZWxlY3RXcmFwcGVyKTtcblxuICAgICAgX3RoaXMub3JpZ2luYWxUYWJpbmRleCA9IF90aGlzLiRlbGVtZW50LnByb3AoJ3RhYmluZGV4Jyk7XG4gICAgICBfdGhpcy4kZWxlbWVudC5wcm9wKCd0YWJpbmRleCcsIC0xKTtcblxuICAgICAgX3RoaXMucG9wdWxhdGUoKTtcbiAgICAgIF90aGlzLmFjdGl2YXRlKCk7XG5cbiAgICAgIF90aGlzLnV0aWxzLnRyaWdnZXJDYWxsYmFjaygnSW5pdCcsIF90aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqIEFjdGl2YXRlcyB0aGUgcGx1Z2luICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBoaWRkZW5DaGlsZHJlbiA9IF90aGlzLmVsZW1lbnRzLml0ZW1zLmNsb3Nlc3QoJzp2aXNpYmxlJykuY2hpbGRyZW4oJzpoaWRkZW4nKS5hZGRDbGFzcyhfdGhpcy5jbGFzc2VzLnRlbXBzaG93KTtcbiAgICAgIHZhciBvcmlnaW5hbFdpZHRoID0gX3RoaXMuJGVsZW1lbnQud2lkdGgoKTtcblxuICAgICAgaGlkZGVuQ2hpbGRyZW4ucmVtb3ZlQ2xhc3MoX3RoaXMuY2xhc3Nlcy50ZW1wc2hvdyk7XG5cbiAgICAgIF90aGlzLnV0aWxzLnRyaWdnZXJDYWxsYmFjaygnQmVmb3JlQWN0aXZhdGUnLCBfdGhpcyk7XG5cbiAgICAgIF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci5wcm9wKCdjbGFzcycsXG4gICAgICAgIF90aGlzLnV0aWxzLmFycmF5VG9DbGFzc25hbWUoW1xuICAgICAgICAgIF90aGlzLmNsYXNzZXMud3JhcHBlcixcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5wcm9wKCdjbGFzcycpLnJlcGxhY2UoL1xcUysvZywgX3RoaXMuY2xhc3Nlcy5wcmVmaXggKyAnLSQmJyksXG4gICAgICAgICAgX3RoaXMub3B0aW9ucy5yZXNwb25zaXZlID8gX3RoaXMuY2xhc3Nlcy5yZXNwb25zaXZlIDogJydcbiAgICAgICAgXSlcbiAgICAgICk7XG5cbiAgICAgIGlmICggX3RoaXMub3B0aW9ucy5pbmhlcml0T3JpZ2luYWxXaWR0aCAmJiBvcmlnaW5hbFdpZHRoID4gMCApIHtcbiAgICAgICAgX3RoaXMuZWxlbWVudHMub3V0ZXJXcmFwcGVyLndpZHRoKG9yaWdpbmFsV2lkdGgpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy51bmJpbmRFdmVudHMoKTtcblxuICAgICAgaWYgKCAhX3RoaXMuJGVsZW1lbnQucHJvcCgnZGlzYWJsZWQnKSApIHtcbiAgICAgICAgX3RoaXMuc3RhdGUuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gTm90IGRpc2FibGVkLCBzby4uLiBSZW1vdmluZyBkaXNhYmxlZCBjbGFzc1xuICAgICAgICBfdGhpcy5lbGVtZW50cy5vdXRlcldyYXBwZXIucmVtb3ZlQ2xhc3MoX3RoaXMuY2xhc3Nlcy5kaXNhYmxlZCk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIHN0eWxlcyBmcm9tIGl0ZW1zIGJveFxuICAgICAgICAvLyBGaXggaW5jb3JyZWN0IGhlaWdodCB3aGVuIHJlZnJlc2hlZCBpcyB0cmlnZ2VyZWQgd2l0aCBmZXdlciBvcHRpb25zXG4gICAgICAgIF90aGlzLiRsaSA9IF90aGlzLmVsZW1lbnRzLml0ZW1zLnJlbW92ZUF0dHIoJ3N0eWxlJykuZmluZCgnbGknKTtcblxuICAgICAgICBfdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5lbGVtZW50cy5vdXRlcldyYXBwZXIuYWRkQ2xhc3MoX3RoaXMuY2xhc3Nlcy5kaXNhYmxlZCk7XG5cbiAgICAgICAgaWYgKCBfdGhpcy5lbGVtZW50cy5pbnB1dCApIHtcbiAgICAgICAgICBfdGhpcy5lbGVtZW50cy5pbnB1dC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnV0aWxzLnRyaWdnZXJDYWxsYmFjaygnQWN0aXZhdGUnLCBfdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGNsYXNzTmFtZXMgZm9yIGVsZW1lbnRzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IENsYXNzZXMgb2JqZWN0XG4gICAgICovXG4gICAgZ2V0Q2xhc3NOYW1lczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGN1c3RvbUNsYXNzID0gX3RoaXMub3B0aW9ucy5jdXN0b21DbGFzcztcbiAgICAgIHZhciBjbGFzc2VzT2JqID0ge307XG5cbiAgICAgICQuZWFjaChjbGFzc0xpc3Quc3BsaXQoJyAnKSwgZnVuY3Rpb24oaSwgY3VyckNsYXNzKSB7XG4gICAgICAgIHZhciBjID0gY3VzdG9tQ2xhc3MucHJlZml4ICsgY3VyckNsYXNzO1xuICAgICAgICBjbGFzc2VzT2JqW2N1cnJDbGFzcy50b0xvd2VyQ2FzZSgpXSA9IGN1c3RvbUNsYXNzLmNhbWVsQ2FzZSA/IGMgOiBfdGhpcy51dGlscy50b0Rhc2goYyk7XG4gICAgICB9KTtcblxuICAgICAgY2xhc3Nlc09iai5wcmVmaXggPSBjdXN0b21DbGFzcy5wcmVmaXg7XG5cbiAgICAgIHJldHVybiBjbGFzc2VzT2JqO1xuICAgIH0sXG5cbiAgICAvKiogU2V0IHRoZSBsYWJlbCB0ZXh0ICovXG4gICAgc2V0TGFiZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBsYWJlbEJ1aWxkZXIgPSBfdGhpcy5vcHRpb25zLmxhYmVsQnVpbGRlcjtcblxuICAgICAgaWYgKCBfdGhpcy5zdGF0ZS5tdWx0aXBsZSApIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIGN1cnJlbnRWYWx1ZXMgaXMgYW4gYXJyYXlcbiAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZXMgPSAkLmlzQXJyYXkoX3RoaXMuc3RhdGUuY3VyclZhbHVlKSA/IF90aGlzLnN0YXRlLmN1cnJWYWx1ZSA6IFtfdGhpcy5zdGF0ZS5jdXJyVmFsdWVdO1xuICAgICAgICAvLyBJJ20gbm90IGhhcHB5IHdpdGggdGhpcywgYnV0IGN1cnJlbnRWYWx1ZXMgY2FuIGJlIGFuIGVtcHR5XG4gICAgICAgIC8vIGFycmF5IGFuZCB3ZSBuZWVkIHRvIGZhbGxiYWNrIHRvIHRoZSBkZWZhdWx0IG9wdGlvbi5cbiAgICAgICAgY3VycmVudFZhbHVlcyA9IGN1cnJlbnRWYWx1ZXMubGVuZ3RoID09PSAwID8gWzBdIDogY3VycmVudFZhbHVlcztcblxuICAgICAgICB2YXIgbGFiZWxNYXJrdXAgPSAkLm1hcChjdXJyZW50VmFsdWVzLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAkLmdyZXAoX3RoaXMubG9va3VwSXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmluZGV4ID09PSB2YWx1ZTtcbiAgICAgICAgICB9KVswXTsgLy8gd2UgZG9uJ3Qgd2FudCBuZXN0ZWQgYXJyYXlzIGhlcmVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGFiZWxNYXJrdXAgPSAkLmdyZXAobGFiZWxNYXJrdXAsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAvLyBIaWRlIGRlZmF1bHQgKHBsZWFzZSBjaG9vc2UpIGlmIG1vcmUgdGhlbiBvbmUgZWxlbWVudCB3ZXJlIHNlbGVjdGVkLlxuICAgICAgICAgIC8vIElmIG5vIG9wdGlvbiB2YWx1ZSB3ZXJlIGdpdmVuIHZhbHVlIGlzIHNldCB0byBvcHRpb24gdGV4dCBieSBkZWZhdWx0XG4gICAgICAgICAgaWYgKCBsYWJlbE1hcmt1cC5sZW5ndGggPiAxIHx8IGxhYmVsTWFya3VwLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgIHJldHVybiAkLnRyaW0oaXRlbS52YWx1ZSkgIT09ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGFiZWxNYXJrdXAgPSAkLm1hcChsYWJlbE1hcmt1cCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiAkLmlzRnVuY3Rpb24obGFiZWxCdWlsZGVyKVxuICAgICAgICAgICAgPyBsYWJlbEJ1aWxkZXIoaXRlbSlcbiAgICAgICAgICAgIDogX3RoaXMudXRpbHMuZm9ybWF0KGxhYmVsQnVpbGRlciwgaXRlbSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIExpbWl0IHRoZSBhbW91bnQgb2Ygc2VsZWN0ZWQgdmFsdWVzIHNob3duIGluIGxhYmVsXG4gICAgICAgIGlmICggX3RoaXMub3B0aW9ucy5tdWx0aXBsZS5tYXhMYWJlbEVudHJpZXMgKSB7XG4gICAgICAgICAgaWYgKCBsYWJlbE1hcmt1cC5sZW5ndGggPj0gX3RoaXMub3B0aW9ucy5tdWx0aXBsZS5tYXhMYWJlbEVudHJpZXMgKyAxICkge1xuICAgICAgICAgICAgbGFiZWxNYXJrdXAgPSBsYWJlbE1hcmt1cC5zbGljZSgwLCBfdGhpcy5vcHRpb25zLm11bHRpcGxlLm1heExhYmVsRW50cmllcyk7XG4gICAgICAgICAgICBsYWJlbE1hcmt1cC5wdXNoKFxuICAgICAgICAgICAgICAkLmlzRnVuY3Rpb24obGFiZWxCdWlsZGVyKVxuICAgICAgICAgICAgICAgID8gbGFiZWxCdWlsZGVyKHsgdGV4dDogJy4uLicgfSlcbiAgICAgICAgICAgICAgICA6IF90aGlzLnV0aWxzLmZvcm1hdChsYWJlbEJ1aWxkZXIsIHsgdGV4dDogJy4uLicgfSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYWJlbE1hcmt1cC5zbGljZShsYWJlbE1hcmt1cC5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZWxlbWVudHMubGFiZWwuaHRtbChsYWJlbE1hcmt1cC5qb2luKF90aGlzLm9wdGlvbnMubXVsdGlwbGUuc2VwYXJhdG9yKSk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjdXJySXRlbSA9IF90aGlzLmxvb2t1cEl0ZW1zW190aGlzLnN0YXRlLmN1cnJWYWx1ZV07XG5cbiAgICAgICAgX3RoaXMuZWxlbWVudHMubGFiZWwuaHRtbChcbiAgICAgICAgICAkLmlzRnVuY3Rpb24obGFiZWxCdWlsZGVyKVxuICAgICAgICAgICAgPyBsYWJlbEJ1aWxkZXIoY3Vyckl0ZW0pXG4gICAgICAgICAgICA6IF90aGlzLnV0aWxzLmZvcm1hdChsYWJlbEJ1aWxkZXIsIGN1cnJJdGVtKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogR2V0IGFuZCBzYXZlIHRoZSBhdmFpbGFibGUgb3B0aW9ucyAqL1xuICAgIHBvcHVsYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgJG9wdGlvbnMgPSBfdGhpcy4kZWxlbWVudC5jaGlsZHJlbigpO1xuICAgICAgdmFyICRqdXN0T3B0aW9ucyA9IF90aGlzLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpO1xuICAgICAgdmFyICRzZWxlY3RlZCA9ICRqdXN0T3B0aW9ucy5maWx0ZXIoJzpzZWxlY3RlZCcpO1xuICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAkanVzdE9wdGlvbnMuaW5kZXgoJHNlbGVjdGVkKTtcbiAgICAgIHZhciBjdXJySW5kZXggPSAwO1xuICAgICAgdmFyIGVtcHR5VmFsdWUgPSAoX3RoaXMuc3RhdGUubXVsdGlwbGUgPyBbXSA6IDApO1xuXG4gICAgICBpZiAoICRzZWxlY3RlZC5sZW5ndGggPiAxICYmIF90aGlzLnN0YXRlLm11bHRpcGxlICkge1xuICAgICAgICBzZWxlY3RlZEluZGV4ID0gW107XG4gICAgICAgICRzZWxlY3RlZC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGVjdGVkSW5kZXgucHVzaCgkKHRoaXMpLmluZGV4KCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc3RhdGUuY3VyclZhbHVlID0gKH5zZWxlY3RlZEluZGV4ID8gc2VsZWN0ZWRJbmRleCA6IGVtcHR5VmFsdWUpO1xuICAgICAgX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHggPSBfdGhpcy5zdGF0ZS5jdXJyVmFsdWU7XG4gICAgICBfdGhpcy5zdGF0ZS5oaWdobGlnaHRlZElkeCA9IF90aGlzLnN0YXRlLmN1cnJWYWx1ZTtcbiAgICAgIF90aGlzLml0ZW1zID0gW107XG4gICAgICBfdGhpcy5sb29rdXBJdGVtcyA9IFtdO1xuXG4gICAgICBpZiAoICRvcHRpb25zLmxlbmd0aCApIHtcbiAgICAgICAgLy8gQnVpbGQgb3B0aW9ucyBtYXJrdXBcbiAgICAgICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgdmFyICRlbG0gPSAkKHRoaXMpO1xuXG4gICAgICAgICAgaWYgKCAkZWxtLmlzKCdvcHRncm91cCcpICkge1xuXG4gICAgICAgICAgICB2YXIgb3B0aW9uc0dyb3VwID0ge1xuICAgICAgICAgICAgICBlbGVtZW50ICAgICAgIDogJGVsbSxcbiAgICAgICAgICAgICAgbGFiZWwgICAgICAgICA6ICRlbG0ucHJvcCgnbGFiZWwnKSxcbiAgICAgICAgICAgICAgZ3JvdXBEaXNhYmxlZCA6ICRlbG0ucHJvcCgnZGlzYWJsZWQnKSxcbiAgICAgICAgICAgICAgaXRlbXMgICAgICAgICA6IFtdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkZWxtLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgIHZhciAkZWxtID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgICBvcHRpb25zR3JvdXAuaXRlbXNbaV0gPSBfdGhpcy5nZXRJdGVtRGF0YShjdXJySW5kZXgsICRlbG0sIG9wdGlvbnNHcm91cC5ncm91cERpc2FibGVkIHx8ICRlbG0ucHJvcCgnZGlzYWJsZWQnKSk7XG5cbiAgICAgICAgICAgICAgX3RoaXMubG9va3VwSXRlbXNbY3VyckluZGV4XSA9IG9wdGlvbnNHcm91cC5pdGVtc1tpXTtcblxuICAgICAgICAgICAgICBjdXJySW5kZXgrKztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfdGhpcy5pdGVtc1tpXSA9IG9wdGlvbnNHcm91cDtcblxuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF90aGlzLml0ZW1zW2ldID0gX3RoaXMuZ2V0SXRlbURhdGEoY3VyckluZGV4LCAkZWxtLCAkZWxtLnByb3AoJ2Rpc2FibGVkJykpO1xuXG4gICAgICAgICAgICBfdGhpcy5sb29rdXBJdGVtc1tjdXJySW5kZXhdID0gX3RoaXMuaXRlbXNbaV07XG5cbiAgICAgICAgICAgIGN1cnJJbmRleCsrO1xuXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpcy5zZXRMYWJlbCgpO1xuICAgICAgICBfdGhpcy5lbGVtZW50cy5pdGVtcy5hcHBlbmQoIF90aGlzLmVsZW1lbnRzLml0ZW1zU2Nyb2xsLmh0bWwoIF90aGlzLmdldEl0ZW1zTWFya3VwKF90aGlzLml0ZW1zKSApICk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGl0ZW1zIG9iamVjdCBkYXRhXG4gICAgICogQHBhcmFtICB7aW50ZWdlcn0gaW5kZXggICAgICAtIEN1cnJlbnQgaXRlbSBpbmRleFxuICAgICAqIEBwYXJhbSAge25vZGV9ICAgICRlbG0gICAgICAgLSBDdXJyZW50IGVsZW1lbnQgbm9kZVxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IGlzRGlzYWJsZWQgLSBDdXJyZW50IGVsZW1lbnQgZGlzYWJsZWQgc3RhdGVcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAgICAgSXRlbSBvYmplY3RcbiAgICAgKi9cbiAgICBnZXRJdGVtRGF0YTogZnVuY3Rpb24oaW5kZXgsICRlbG0sIGlzRGlzYWJsZWQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluZGV4ICAgICA6IGluZGV4LFxuICAgICAgICBlbGVtZW50ICAgOiAkZWxtLFxuICAgICAgICB2YWx1ZSAgICAgOiAkZWxtLnZhbCgpLFxuICAgICAgICBjbGFzc05hbWUgOiAkZWxtLnByb3AoJ2NsYXNzJyksXG4gICAgICAgIHRleHQgICAgICA6ICRlbG0uaHRtbCgpLFxuICAgICAgICBzbHVnICAgICAgOiAkLnRyaW0oX3RoaXMudXRpbHMucmVwbGFjZURpYWNyaXRpY3MoJGVsbS5odG1sKCkpKSxcbiAgICAgICAgYWx0ICAgICAgIDogJGVsbS5hdHRyKCdkYXRhLWFsdCcpLFxuICAgICAgICBzZWxlY3RlZCAgOiAkZWxtLnByb3AoJ3NlbGVjdGVkJyksXG4gICAgICAgIGRpc2FibGVkICA6IGlzRGlzYWJsZWRcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIG9wdGlvbnMgbWFya3VwXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IGl0ZW1zIC0gT2JqZWN0IGNvbnRhaW5pbmcgYWxsIGF2YWlsYWJsZSBvcHRpb25zXG4gICAgICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgIEhUTUwgZm9yIHRoZSBvcHRpb25zIGJveFxuICAgICAqL1xuICAgIGdldEl0ZW1zTWFya3VwOiBmdW5jdGlvbihpdGVtcykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBtYXJrdXAgPSAnPHVsPic7XG5cbiAgICAgIGlmICggJC5pc0Z1bmN0aW9uKF90aGlzLm9wdGlvbnMubGlzdEJ1aWxkZXIpICYmIF90aGlzLm9wdGlvbnMubGlzdEJ1aWxkZXIgKSB7XG4gICAgICAgIGl0ZW1zID0gX3RoaXMub3B0aW9ucy5saXN0QnVpbGRlcihpdGVtcyk7XG4gICAgICB9XG5cbiAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24oaSwgZWxtKSB7XG4gICAgICAgIGlmICggZWxtLmxhYmVsICE9PSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgICBtYXJrdXAgKz0gX3RoaXMudXRpbHMuZm9ybWF0KCc8dWwgY2xhc3M9XCJ7MX1cIj48bGkgY2xhc3M9XCJ7Mn1cIj57M308L2xpPicsXG4gICAgICAgICAgICBfdGhpcy51dGlscy5hcnJheVRvQ2xhc3NuYW1lKFtcbiAgICAgICAgICAgICAgX3RoaXMuY2xhc3Nlcy5ncm91cCxcbiAgICAgICAgICAgICAgZWxtLmdyb3VwRGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogJycsXG4gICAgICAgICAgICAgIGVsbS5lbGVtZW50LnByb3AoJ2NsYXNzJylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3RoaXMuY2xhc3Nlcy5ncm91cGxhYmVsLFxuICAgICAgICAgICAgZWxtLmVsZW1lbnQucHJvcCgnbGFiZWwnKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAkLmVhY2goZWxtLml0ZW1zLCBmdW5jdGlvbihpLCBlbG0pIHtcbiAgICAgICAgICAgIG1hcmt1cCArPSBfdGhpcy5nZXRJdGVtTWFya3VwKGVsbS5pbmRleCwgZWxtKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG1hcmt1cCArPSAnPC91bD4nO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBtYXJrdXAgKz0gX3RoaXMuZ2V0SXRlbU1hcmt1cChlbG0uaW5kZXgsIGVsbSk7XG5cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBtYXJrdXAgKyAnPC91bD4nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBldmVyeSBvcHRpb24gbWFya3VwXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IGluZGV4ICAgIC0gSW5kZXggb2YgY3VycmVudCBpdGVtXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBpdGVtRGF0YSAtIEN1cnJlbnQgaXRlbVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICBIVE1MIGZvciB0aGUgb3B0aW9uXG4gICAgICovXG4gICAgZ2V0SXRlbU1hcmt1cDogZnVuY3Rpb24oaW5kZXgsIGl0ZW1EYXRhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGl0ZW1CdWlsZGVyID0gX3RoaXMub3B0aW9ucy5vcHRpb25zSXRlbUJ1aWxkZXI7XG4gICAgICAvLyBsaW1pdCBhY2Nlc3MgdG8gaXRlbSBkYXRhIHRvIHByb3ZpZGUgYSBzaW1wbGUgaW50ZXJmYWNlXG4gICAgICAvLyB0byBtb3N0IHJlbGV2YW50IG9wdGlvbnMuXG4gICAgICB2YXIgZmlsdGVyZWRJdGVtRGF0YSA9IHtcbiAgICAgICAgdmFsdWU6IGl0ZW1EYXRhLnZhbHVlLFxuICAgICAgICB0ZXh0IDogaXRlbURhdGEudGV4dCxcbiAgICAgICAgc2x1ZyA6IGl0ZW1EYXRhLnNsdWcsXG4gICAgICAgIGluZGV4OiBpdGVtRGF0YS5pbmRleFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzLnV0aWxzLmZvcm1hdCgnPGxpIGRhdGEtaW5kZXg9XCJ7MX1cIiBjbGFzcz1cInsyfVwiPnszfTwvbGk+JyxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIF90aGlzLnV0aWxzLmFycmF5VG9DbGFzc25hbWUoW1xuICAgICAgICAgIGl0ZW1EYXRhLmNsYXNzTmFtZSxcbiAgICAgICAgICBpbmRleCA9PT0gX3RoaXMuaXRlbXMubGVuZ3RoIC0gMSAgPyAnbGFzdCcgICAgIDogJycsXG4gICAgICAgICAgaXRlbURhdGEuZGlzYWJsZWQgICAgICAgICAgICAgICAgID8gJ2Rpc2FibGVkJyA6ICcnLFxuICAgICAgICAgIGl0ZW1EYXRhLnNlbGVjdGVkICAgICAgICAgICAgICAgICA/ICdzZWxlY3RlZCcgOiAnJ1xuICAgICAgICBdKSxcbiAgICAgICAgJC5pc0Z1bmN0aW9uKGl0ZW1CdWlsZGVyKVxuICAgICAgICAgID8gX3RoaXMudXRpbHMuZm9ybWF0KGl0ZW1CdWlsZGVyKGl0ZW1EYXRhLCB0aGlzLiRlbGVtZW50LCBpbmRleCksIGl0ZW1EYXRhKVxuICAgICAgICAgIDogX3RoaXMudXRpbHMuZm9ybWF0KGl0ZW1CdWlsZGVyLCBmaWx0ZXJlZEl0ZW1EYXRhKVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqIFJlbW92ZSBldmVudHMgb24gdGhlIGVsZW1lbnRzICovXG4gICAgdW5iaW5kRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIF90aGlzLmVsZW1lbnRzLndyYXBwZXJcbiAgICAgICAgLmFkZChfdGhpcy4kZWxlbWVudClcbiAgICAgICAgLmFkZChfdGhpcy5lbGVtZW50cy5vdXRlcldyYXBwZXIpXG4gICAgICAgIC5hZGQoX3RoaXMuZWxlbWVudHMuaW5wdXQpXG4gICAgICAgIC5vZmYoZXZlbnROYW1lc3BhY2VTdWZmaXgpO1xuICAgIH0sXG5cbiAgICAvKiogQmluZCBldmVudHMgb24gdGhlIGVsZW1lbnRzICovXG4gICAgYmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfdGhpcy5lbGVtZW50cy5vdXRlcldyYXBwZXIub24oJ21vdXNlZW50ZXInICsgZXZlbnROYW1lc3BhY2VTdWZmaXggKyAnIG1vdXNlbGVhdmUnICsgZXZlbnROYW1lc3BhY2VTdWZmaXgsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhfdGhpcy5jbGFzc2VzLmhvdmVyLCBlLnR5cGUgPT09ICdtb3VzZWVudGVyJyk7XG5cbiAgICAgICAgLy8gRGVsYXkgY2xvc2UgZWZmZWN0IHdoZW4gb3Blbk9uSG92ZXIgaXMgdHJ1ZVxuICAgICAgICBpZiAoIF90aGlzLm9wdGlvbnMub3Blbk9uSG92ZXIgKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmNsb3NlVGltZXIpO1xuXG4gICAgICAgICAgaWYgKCBlLnR5cGUgPT09ICdtb3VzZWxlYXZlJyApIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlVGltZXIgPSBzZXRUaW1lb3V0KCQucHJveHkoX3RoaXMuY2xvc2UsIF90aGlzKSwgX3RoaXMub3B0aW9ucy5ob3ZlckludGVudFRpbWVvdXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gVG9nZ2xlIG9wZW4vY2xvc2VcbiAgICAgIF90aGlzLmVsZW1lbnRzLndyYXBwZXIub24oJ2NsaWNrJyArIGV2ZW50TmFtZXNwYWNlU3VmZml4LCBmdW5jdGlvbihlKSB7XG4gICAgICAgIF90aGlzLnN0YXRlLm9wZW5lZCA/IF90aGlzLmNsb3NlKCkgOiBfdGhpcy5vcGVuKGUpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFRyYW5zbGF0ZSBvcmlnaW5hbCBlbGVtZW50IGZvY3VzIGV2ZW50IHRvIGR1bW15IGlucHV0LlxuICAgICAgLy8gRGlzYWJsZWQgb24gbW9iaWxlIGRldmljZXMgYmVjYXVzZSB0aGUgZGVmYXVsdCBvcHRpb24gbGlzdCBpc24ndFxuICAgICAgLy8gc2hvd24gZHVlIHRoZSBmYWN0IHRoYXQgaGlkZGVuIGlucHV0IGdldHMgZm9jdXNlZFxuICAgICAgaWYgKCAhKF90aGlzLm9wdGlvbnMubmF0aXZlT25Nb2JpbGUgJiYgX3RoaXMudXRpbHMuaXNNb2JpbGUoKSkgKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50Lm9uKCdmb2N1cycgKyBldmVudE5hbWVzcGFjZVN1ZmZpeCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuZWxlbWVudHMuaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMuZWxlbWVudHMuaW5wdXRcbiAgICAgICAgICAucHJvcCh7IHRhYmluZGV4OiBfdGhpcy5vcmlnaW5hbFRhYmluZGV4LCBkaXNhYmxlZDogZmFsc2UgfSlcbiAgICAgICAgICAub24oJ2tleWRvd24nICsgZXZlbnROYW1lc3BhY2VTdWZmaXgsICQucHJveHkoX3RoaXMuaGFuZGxlS2V5cywgX3RoaXMpKVxuICAgICAgICAgIC5vbignZm9jdXNpbicgKyBldmVudE5hbWVzcGFjZVN1ZmZpeCwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgX3RoaXMuZWxlbWVudHMub3V0ZXJXcmFwcGVyLmFkZENsYXNzKF90aGlzLmNsYXNzZXMuZm9jdXMpO1xuXG4gICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBmbGlja2VyIHdoZW4gZm9jdXNpbmcgb3V0IGFuZCBiYWNrIGFnYWluIGluIHRoZSBicm93c2VyIHdpbmRvd1xuICAgICAgICAgICAgX3RoaXMuZWxlbWVudHMuaW5wdXQub25lKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIF90aGlzLmVsZW1lbnRzLmlucHV0LmJsdXIoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIF90aGlzLm9wdGlvbnMub3Blbk9uRm9jdXMgJiYgIV90aGlzLnN0YXRlLm9wZW5lZCApIHtcbiAgICAgICAgICAgICAgX3RoaXMub3BlbihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbignZm9jdXNvdXQnICsgZXZlbnROYW1lc3BhY2VTdWZmaXgsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuZWxlbWVudHMub3V0ZXJXcmFwcGVyLnJlbW92ZUNsYXNzKF90aGlzLmNsYXNzZXMuZm9jdXMpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdpbnB1dCBwcm9wZXJ0eWNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHZhbCA9IF90aGlzLmVsZW1lbnRzLmlucHV0LnZhbCgpO1xuICAgICAgICAgICAgdmFyIHNlYXJjaFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ14nICsgX3RoaXMudXRpbHMuZXNjYXBlUmVnRXhwKHZhbCksICdpJyk7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIHNlYXJjaFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnJlc2V0U3RyKTtcbiAgICAgICAgICAgIF90aGlzLnJlc2V0U3RyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMuZWxlbWVudHMuaW5wdXQudmFsKCcnKTtcbiAgICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMua2V5U2VhcmNoVGltZW91dCk7XG5cbiAgICAgICAgICAgIGlmICggdmFsLmxlbmd0aCApIHtcbiAgICAgICAgICAgICAgLy8gU2VhcmNoIGluIHNlbGVjdCBvcHRpb25zXG4gICAgICAgICAgICAgICQuZWFjaChfdGhpcy5pdGVtcywgZnVuY3Rpb24oaSwgZWxtKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsbS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoUmVnRXhwLnRlc3QoZWxtLnRleHQpIHx8IHNlYXJjaFJlZ0V4cC50ZXN0KGVsbS5zbHVnKSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuaGlnaGxpZ2h0KGkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWVsbS5hbHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFsdEl0ZW1zID0gZWxtLmFsdC5zcGxpdCgnfCcpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGFpID0gMDsgYWkgPCBhbHRJdGVtcy5sZW5ndGg7IGFpKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmICghYWx0SXRlbXNbYWldKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaFJlZ0V4cC50ZXN0KGFsdEl0ZW1zW2FpXS50cmltKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZ2hsaWdodChpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLiRsaS5vbih7XG4gICAgICAgIC8vIFByZXZlbnQgPGlucHV0PiBibHVyIG9uIENocm9tZVxuICAgICAgICBtb3VzZWRvd246IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLnNlbGVjdCgkKHRoaXMpLmRhdGEoJ2luZGV4JykpO1xuXG4gICAgICAgICAgLy8gQ2hyb21lIGRvZXNuJ3QgY2xvc2Ugb3B0aW9ucyBib3ggaWYgc2VsZWN0IGlzIHdyYXBwZWQgd2l0aCBhIGxhYmVsXG4gICAgICAgICAgLy8gV2UgbmVlZCB0byAncmV0dXJuIGZhbHNlJyB0byBhdm9pZCB0aGF0XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQmVoYXZpb3Igd2hlbiBrZXlib2FyZCBrZXlzIGlzIHByZXNzZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBlIC0gRXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgaGFuZGxlS2V5czogZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBrZXkgPSBlLndoaWNoO1xuICAgICAgdmFyIGtleXMgPSBfdGhpcy5vcHRpb25zLmtleXM7XG5cbiAgICAgIHZhciBpc1ByZXZLZXkgPSAkLmluQXJyYXkoa2V5LCBrZXlzLnByZXZpb3VzKSA+IC0xO1xuICAgICAgdmFyIGlzTmV4dEtleSA9ICQuaW5BcnJheShrZXksIGtleXMubmV4dCkgPiAtMTtcbiAgICAgIHZhciBpc1NlbGVjdEtleSA9ICQuaW5BcnJheShrZXksIGtleXMuc2VsZWN0KSA+IC0xO1xuICAgICAgdmFyIGlzT3BlbktleSA9ICQuaW5BcnJheShrZXksIGtleXMub3BlbikgPiAtMTtcbiAgICAgIHZhciBpZHggPSBfdGhpcy5zdGF0ZS5oaWdobGlnaHRlZElkeDtcbiAgICAgIHZhciBpc0ZpcnN0T3JMYXN0SXRlbSA9IChpc1ByZXZLZXkgJiYgaWR4ID09PSAwKSB8fCAoaXNOZXh0S2V5ICYmIChpZHggKyAxKSA9PT0gX3RoaXMuaXRlbXMubGVuZ3RoKTtcbiAgICAgIHZhciBnb1RvSXRlbSA9IDA7XG5cbiAgICAgIC8vIEVudGVyIC8gU3BhY2VcbiAgICAgIGlmICgga2V5ID09PSAxMyB8fCBrZXkgPT09IDMyICkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGl0J3MgYSBkaXJlY3Rpb25hbCBrZXlcbiAgICAgIGlmICggaXNQcmV2S2V5IHx8IGlzTmV4dEtleSApIHtcbiAgICAgICAgaWYgKCAhX3RoaXMub3B0aW9ucy5hbGxvd1dyYXAgJiYgaXNGaXJzdE9yTGFzdEl0ZW0gKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBpc1ByZXZLZXkgKSB7XG4gICAgICAgICAgZ29Ub0l0ZW0gPSBfdGhpcy51dGlscy5wcmV2aW91c0VuYWJsZWRJdGVtKF90aGlzLmxvb2t1cEl0ZW1zLCBpZHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBpc05leHRLZXkgKSB7XG4gICAgICAgICAgZ29Ub0l0ZW0gPSBfdGhpcy51dGlscy5uZXh0RW5hYmxlZEl0ZW0oX3RoaXMubG9va3VwSXRlbXMsIGlkeCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5oaWdobGlnaHQoZ29Ub0l0ZW0pO1xuICAgICAgfVxuXG4gICAgICAvLyBUYWIgLyBFbnRlciAvIEVTQ1xuICAgICAgaWYgKCBpc1NlbGVjdEtleSAmJiBfdGhpcy5zdGF0ZS5vcGVuZWQgKSB7XG4gICAgICAgIF90aGlzLnNlbGVjdChpZHgpO1xuXG4gICAgICAgIGlmICggIV90aGlzLnN0YXRlLm11bHRpcGxlIHx8ICFfdGhpcy5vcHRpb25zLm11bHRpcGxlLmtlZXBNZW51T3BlbiApIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTcGFjZSAvIEVudGVyIC8gTGVmdCAvIFVwIC8gUmlnaHQgLyBEb3duXG4gICAgICBpZiAoIGlzT3BlbktleSAmJiAhX3RoaXMuc3RhdGUub3BlbmVkICkge1xuICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKiBVcGRhdGUgdGhlIGl0ZW1zIG9iamVjdCAqL1xuICAgIHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgX3RoaXMucG9wdWxhdGUoKTtcbiAgICAgIF90aGlzLmFjdGl2YXRlKCk7XG4gICAgICBfdGhpcy51dGlscy50cmlnZ2VyQ2FsbGJhY2soJ1JlZnJlc2gnLCBfdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKiBTZXQgb3B0aW9ucyBib3ggd2lkdGgvaGVpZ2h0ICovXG4gICAgc2V0T3B0aW9uc0RpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgLy8gQ2FsY3VsYXRlIG9wdGlvbnMgYm94IGhlaWdodFxuICAgICAgLy8gU2V0IGEgdGVtcG9yYXJ5IGNsYXNzIG9uIHRoZSBoaWRkZW4gcGFyZW50IG9mIHRoZSBlbGVtZW50XG4gICAgICB2YXIgaGlkZGVuQ2hpbGRyZW4gPSBfdGhpcy5lbGVtZW50cy5pdGVtcy5jbG9zZXN0KCc6dmlzaWJsZScpLmNoaWxkcmVuKCc6aGlkZGVuJykuYWRkQ2xhc3MoX3RoaXMuY2xhc3Nlcy50ZW1wc2hvdyk7XG4gICAgICB2YXIgbWF4SGVpZ2h0ID0gX3RoaXMub3B0aW9ucy5tYXhIZWlnaHQ7XG4gICAgICB2YXIgaXRlbXNXaWR0aCA9IF90aGlzLmVsZW1lbnRzLml0ZW1zLm91dGVyV2lkdGgoKTtcbiAgICAgIHZhciB3cmFwcGVyV2lkdGggPSBfdGhpcy5lbGVtZW50cy53cmFwcGVyLm91dGVyV2lkdGgoKSAtIChpdGVtc1dpZHRoIC0gX3RoaXMuZWxlbWVudHMuaXRlbXMud2lkdGgoKSk7XG5cbiAgICAgIC8vIFNldCB0aGUgZGltZW5zaW9ucywgbWluaW11bSBpcyB3cmFwcGVyIHdpZHRoLCBleHBhbmQgZm9yIGxvbmcgaXRlbXMgaWYgb3B0aW9uIGlzIHRydWVcbiAgICAgIGlmICggIV90aGlzLm9wdGlvbnMuZXhwYW5kVG9JdGVtVGV4dCB8fCB3cmFwcGVyV2lkdGggPiBpdGVtc1dpZHRoICkge1xuICAgICAgICBfdGhpcy5maW5hbFdpZHRoID0gd3JhcHBlcldpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBzY3JvbGxiYXIgd2lkdGggaXMgaW5jbHVkZWRcbiAgICAgICAgX3RoaXMuZWxlbWVudHMuaXRlbXMuY3NzKCdvdmVyZmxvdycsICdzY3JvbGwnKTtcblxuICAgICAgICAvLyBTZXQgYSByZWFsbHkgbG9uZyB3aWR0aCBmb3IgX3RoaXMuZWxlbWVudHMub3V0ZXJXcmFwcGVyXG4gICAgICAgIF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci53aWR0aCg5ZTQpO1xuICAgICAgICBfdGhpcy5maW5hbFdpZHRoID0gX3RoaXMuZWxlbWVudHMuaXRlbXMud2lkdGgoKTtcbiAgICAgICAgLy8gU2V0IHNjcm9sbCBiYXIgdG8gYXV0b1xuICAgICAgICBfdGhpcy5lbGVtZW50cy5pdGVtcy5jc3MoJ292ZXJmbG93JywgJycpO1xuICAgICAgICBfdGhpcy5lbGVtZW50cy5vdXRlcldyYXBwZXIud2lkdGgoJycpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5lbGVtZW50cy5pdGVtcy53aWR0aChfdGhpcy5maW5hbFdpZHRoKS5oZWlnaHQoKSA+IG1heEhlaWdodCAmJiBfdGhpcy5lbGVtZW50cy5pdGVtcy5oZWlnaHQobWF4SGVpZ2h0KTtcblxuICAgICAgLy8gUmVtb3ZlIHRoZSB0ZW1wb3JhcnkgY2xhc3NcbiAgICAgIGhpZGRlbkNoaWxkcmVuLnJlbW92ZUNsYXNzKF90aGlzLmNsYXNzZXMudGVtcHNob3cpO1xuICAgIH0sXG5cbiAgICAvKiogRGV0ZWN0IGlmIHRoZSBvcHRpb25zIGJveCBpcyBpbnNpZGUgdGhlIHdpbmRvdyAqL1xuICAgIGlzSW5WaWV3cG9ydDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5mb3JjZVJlbmRlckFib3ZlID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci5hZGRDbGFzcyhfdGhpcy5jbGFzc2VzLmFib3ZlKTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMub3B0aW9ucy5mb3JjZVJlbmRlckJlbG93ID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci5hZGRDbGFzcyhfdGhpcy5jbGFzc2VzLmJlbG93KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSAkd2luLnNjcm9sbFRvcCgpO1xuICAgICAgICB2YXIgd2luSGVpZ2h0ID0gJHdpbi5oZWlnaHQoKTtcbiAgICAgICAgdmFyIHVpUG9zWCA9IF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci5vZmZzZXQoKS50b3A7XG4gICAgICAgIHZhciB1aUhlaWdodCA9IF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci5vdXRlckhlaWdodCgpO1xuXG4gICAgICAgIHZhciBmaXRzRG93biA9ICh1aVBvc1ggKyB1aUhlaWdodCArIF90aGlzLml0ZW1zSGVpZ2h0KSA8PSAoc2Nyb2xsVG9wICsgd2luSGVpZ2h0KTtcbiAgICAgICAgdmFyIGZpdHNBYm92ZSA9ICh1aVBvc1ggLSBfdGhpcy5pdGVtc0hlaWdodCkgPiBzY3JvbGxUb3A7XG5cbiAgICAgICAgLy8gSWYgaXQgZG9lcyBub3QgZml0IGJlbG93LCBvbmx5IHJlbmRlciBpdFxuICAgICAgICAvLyBhYm92ZSBpdCBmaXQncyB0aGVyZS5cbiAgICAgICAgLy8gSXQncyBhY2NlcHRhYmxlIHRoYXQgdGhlIHVzZXIgbmVlZHMgdG9cbiAgICAgICAgLy8gc2Nyb2xsIHRoZSB2aWV3cG9ydCB0byBzZWUgdGhlIGN1dCBvZmYgVUlcbiAgICAgICAgdmFyIHJlbmRlckFib3ZlID0gIWZpdHNEb3duICYmIGZpdHNBYm92ZTtcbiAgICAgICAgdmFyIHJlbmRlckJlbG93ID0gIXJlbmRlckFib3ZlO1xuXG4gICAgICAgIF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci50b2dnbGVDbGFzcyhfdGhpcy5jbGFzc2VzLmFib3ZlLCByZW5kZXJBYm92ZSk7XG4gICAgICAgIF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci50b2dnbGVDbGFzcyhfdGhpcy5jbGFzc2VzLmJlbG93LCByZW5kZXJCZWxvdyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGVjdCBpZiBjdXJyZW50bHkgc2VsZWN0ZWQgb3B0aW9uIGlzIHZpc2libGUgYW5kIHNjcm9sbCB0aGUgb3B0aW9ucyBib3ggdG8gc2hvdyBpdFxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8QXJyYXl9IGluZGV4IC0gSW5kZXggb2YgdGhlIHNlbGVjdGVkIGl0ZW1zXG4gICAgICovXG4gICAgZGV0ZWN0SXRlbVZpc2liaWxpdHk6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyICRmaWx0ZXJlZExpID0gX3RoaXMuJGxpLmZpbHRlcignW2RhdGEtaW5kZXhdJyk7XG5cbiAgICAgIGlmICggX3RoaXMuc3RhdGUubXVsdGlwbGUgKSB7XG4gICAgICAgIC8vIElmIGluZGV4IGlzIGFuIGFycmF5LCB3ZSBjYW4gYXNzdW1lIGEgbXVsdGlwbGUgc2VsZWN0IGFuZCB3ZVxuICAgICAgICAvLyB3YW50IHRvIHNjcm9sbCB0byB0aGUgdXBwZXJtb3N0IHNlbGVjdGVkIGl0ZW0hXG4gICAgICAgIC8vIE1hdGgubWluLmFwcGx5KE1hdGgsIGluZGV4KSByZXR1cm5zIHRoZSBsb3dlc3QgZW50cnkgaW4gYW4gQXJyYXkuXG4gICAgICAgIGluZGV4ID0gKCQuaXNBcnJheShpbmRleCkgJiYgaW5kZXgubGVuZ3RoID09PSAwKSA/IDAgOiBpbmRleDtcbiAgICAgICAgaW5kZXggPSAkLmlzQXJyYXkoaW5kZXgpID8gTWF0aC5taW4uYXBwbHkoTWF0aCwgaW5kZXgpIDogaW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaUhlaWdodCA9ICRmaWx0ZXJlZExpLmVxKGluZGV4KS5vdXRlckhlaWdodCgpO1xuICAgICAgdmFyIGxpVG9wID0gJGZpbHRlcmVkTGlbaW5kZXhdLm9mZnNldFRvcDtcbiAgICAgIHZhciBpdGVtc1Njcm9sbFRvcCA9IF90aGlzLmVsZW1lbnRzLml0ZW1zU2Nyb2xsLnNjcm9sbFRvcCgpO1xuICAgICAgdmFyIHNjcm9sbFQgPSBsaVRvcCArIGxpSGVpZ2h0ICogMjtcblxuICAgICAgX3RoaXMuZWxlbWVudHMuaXRlbXNTY3JvbGwuc2Nyb2xsVG9wKFxuICAgICAgICBzY3JvbGxUID4gaXRlbXNTY3JvbGxUb3AgKyBfdGhpcy5pdGVtc0hlaWdodCA/IHNjcm9sbFQgLSBfdGhpcy5pdGVtc0hlaWdodCA6XG4gICAgICAgICAgbGlUb3AgLSBsaUhlaWdodCA8IGl0ZW1zU2Nyb2xsVG9wID8gbGlUb3AgLSBsaUhlaWdodCA6XG4gICAgICAgICAgICBpdGVtc1Njcm9sbFRvcFxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgc2VsZWN0IG9wdGlvbnMgYm94XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIC0gRXZlbnRcbiAgICAgKi9cbiAgICBvcGVuOiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIF90aGlzLm9wdGlvbnMubmF0aXZlT25Nb2JpbGUgJiYgX3RoaXMudXRpbHMuaXNNb2JpbGUoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnV0aWxzLnRyaWdnZXJDYWxsYmFjaygnQmVmb3JlT3BlbicsIF90aGlzKTtcblxuICAgICAgaWYgKCBlICkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCBfdGhpcy5zdGF0ZS5lbmFibGVkICkge1xuICAgICAgICBfdGhpcy5zZXRPcHRpb25zRGltZW5zaW9ucygpO1xuXG4gICAgICAgIC8vIEZpbmQgYW55IG90aGVyIG9wZW5lZCBpbnN0YW5jZXMgb2Ygc2VsZWN0IGFuZCBjbG9zZSBpdFxuICAgICAgICAkKCcuJyArIF90aGlzLmNsYXNzZXMuaGlkZXNlbGVjdCwgJy4nICsgX3RoaXMuY2xhc3Nlcy5vcGVuKS5jaGlsZHJlbigpW3BsdWdpbk5hbWVdKCdjbG9zZScpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlLm9wZW5lZCA9IHRydWU7XG4gICAgICAgIF90aGlzLml0ZW1zSGVpZ2h0ID0gX3RoaXMuZWxlbWVudHMuaXRlbXMub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgX3RoaXMuaXRlbXNJbm5lckhlaWdodCA9IF90aGlzLmVsZW1lbnRzLml0ZW1zLmhlaWdodCgpO1xuXG4gICAgICAgIC8vIFRvZ2dsZSBvcHRpb25zIGJveCB2aXNpYmlsaXR5XG4gICAgICAgIF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci5hZGRDbGFzcyhfdGhpcy5jbGFzc2VzLm9wZW4pO1xuXG4gICAgICAgIC8vIEdpdmUgZHVtbXkgaW5wdXQgZm9jdXNcbiAgICAgICAgX3RoaXMuZWxlbWVudHMuaW5wdXQudmFsKCcnKTtcbiAgICAgICAgaWYgKCBlICYmIGUudHlwZSAhPT0gJ2ZvY3VzaW4nICkge1xuICAgICAgICAgIF90aGlzLmVsZW1lbnRzLmlucHV0LmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWxheWVkIGJpbmRzIGV2ZW50cyBvbiBEb2N1bWVudCB0byBtYWtlIGxhYmVsIGNsaWNrcyB3b3JrXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGRvY1xuICAgICAgICAgICAgLm9uKCdjbGljaycgKyBldmVudE5hbWVzcGFjZVN1ZmZpeCwgJC5wcm94eShfdGhpcy5jbG9zZSwgX3RoaXMpKVxuICAgICAgICAgICAgLm9uKCdzY3JvbGwnICsgZXZlbnROYW1lc3BhY2VTdWZmaXgsICQucHJveHkoX3RoaXMuaXNJblZpZXdwb3J0LCBfdGhpcykpO1xuICAgICAgICB9LCAxKTtcblxuICAgICAgICBfdGhpcy5pc0luVmlld3BvcnQoKTtcblxuICAgICAgICAvLyBQcmV2ZW50IHdpbmRvdyBzY3JvbGwgd2hlbiB1c2luZyBtb3VzZSB3aGVlbCBpbnNpZGUgaXRlbXMgYm94XG4gICAgICAgIGlmICggX3RoaXMub3B0aW9ucy5wcmV2ZW50V2luZG93U2Nyb2xsICkge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgJGRvYy5vbignbW91c2V3aGVlbCcgKyBldmVudE5hbWVzcGFjZVN1ZmZpeCArICcgRE9NTW91c2VTY3JvbGwnICsgZXZlbnROYW1lc3BhY2VTdWZmaXgsICcuJyArIF90aGlzLmNsYXNzZXMuc2Nyb2xsLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgb3JnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gJCh0aGlzKS5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgIHZhciBkZWx0YVkgPSAwO1xuXG4gICAgICAgICAgICBpZiAoICdkZXRhaWwnICAgICAgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LmRldGFpbCAqIC0xOyB9XG4gICAgICAgICAgICBpZiAoICd3aGVlbERlbHRhJyAgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LndoZWVsRGVsdGE7ICB9XG4gICAgICAgICAgICBpZiAoICd3aGVlbERlbHRhWScgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LndoZWVsRGVsdGFZOyB9XG4gICAgICAgICAgICBpZiAoICdkZWx0YVknICAgICAgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LmRlbHRhWSAqIC0xOyB9XG5cbiAgICAgICAgICAgIGlmICggc2Nyb2xsVG9wID09PSAodGhpcy5zY3JvbGxIZWlnaHQgLSBfdGhpcy5pdGVtc0lubmVySGVpZ2h0KSAmJiBkZWx0YVkgPCAwIHx8IHNjcm9sbFRvcCA9PT0gMCAmJiBkZWx0YVkgPiAwICkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5kZXRlY3RJdGVtVmlzaWJpbGl0eShfdGhpcy5zdGF0ZS5zZWxlY3RlZElkeCk7XG5cbiAgICAgICAgX3RoaXMuaGlnaGxpZ2h0KF90aGlzLnN0YXRlLm11bHRpcGxlID8gLTEgOiBfdGhpcy5zdGF0ZS5zZWxlY3RlZElkeCk7XG5cbiAgICAgICAgX3RoaXMudXRpbHMudHJpZ2dlckNhbGxiYWNrKCdPcGVuJywgX3RoaXMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogQ2xvc2UgdGhlIHNlbGVjdCBvcHRpb25zIGJveCAqL1xuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIF90aGlzLnV0aWxzLnRyaWdnZXJDYWxsYmFjaygnQmVmb3JlQ2xvc2UnLCBfdGhpcyk7XG5cbiAgICAgIC8vIFJlbW92ZSBjdXN0b20gZXZlbnRzIG9uIGRvY3VtZW50XG4gICAgICAkZG9jLm9mZihldmVudE5hbWVzcGFjZVN1ZmZpeCk7XG5cbiAgICAgIC8vIFJlbW92ZSB2aXNpYmxlIGNsYXNzIHRvIGhpZGUgb3B0aW9ucyBib3hcbiAgICAgIF90aGlzLmVsZW1lbnRzLm91dGVyV3JhcHBlci5yZW1vdmVDbGFzcyhfdGhpcy5jbGFzc2VzLm9wZW4pO1xuXG4gICAgICBfdGhpcy5zdGF0ZS5vcGVuZWQgPSBmYWxzZTtcblxuICAgICAgX3RoaXMudXRpbHMudHJpZ2dlckNhbGxiYWNrKCdDbG9zZScsIF90aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqIFNlbGVjdCBjdXJyZW50IG9wdGlvbiBhbmQgY2hhbmdlIHRoZSBsYWJlbCAqL1xuICAgIGNoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfdGhpcy51dGlscy50cmlnZ2VyQ2FsbGJhY2soJ0JlZm9yZUNoYW5nZScsIF90aGlzKTtcblxuICAgICAgaWYgKCBfdGhpcy5zdGF0ZS5tdWx0aXBsZSApIHtcbiAgICAgICAgLy8gUmVzZXQgb2xkIHNlbGVjdGVkXG4gICAgICAgICQuZWFjaChfdGhpcy5sb29rdXBJdGVtcywgZnVuY3Rpb24oaWR4KSB7XG4gICAgICAgICAgX3RoaXMubG9va3VwSXRlbXNbaWR4XS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpLnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTZXQgbmV3IHNlbGVjdGVkXG4gICAgICAgICQuZWFjaChfdGhpcy5zdGF0ZS5zZWxlY3RlZElkeCwgZnVuY3Rpb24oaWR4LCB2YWx1ZSkge1xuICAgICAgICAgIF90aGlzLmxvb2t1cEl0ZW1zW3ZhbHVlXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuZmluZCgnb3B0aW9uJykuZXEodmFsdWUpLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnN0YXRlLmN1cnJWYWx1ZSA9IF90aGlzLnN0YXRlLnNlbGVjdGVkSWR4O1xuXG4gICAgICAgIF90aGlzLnNldExhYmVsKCk7XG5cbiAgICAgICAgX3RoaXMudXRpbHMudHJpZ2dlckNhbGxiYWNrKCdDaGFuZ2UnLCBfdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKCBfdGhpcy5zdGF0ZS5jdXJyVmFsdWUgIT09IF90aGlzLnN0YXRlLnNlbGVjdGVkSWR4ICkge1xuICAgICAgICAvLyBBcHBseSBjaGFuZ2VkIHZhbHVlIHRvIG9yaWdpbmFsIHNlbGVjdFxuICAgICAgICBfdGhpcy4kZWxlbWVudFxuICAgICAgICAgIC5wcm9wKCdzZWxlY3RlZEluZGV4JywgX3RoaXMuc3RhdGUuY3VyclZhbHVlID0gX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHgpXG4gICAgICAgICAgLmRhdGEoJ3ZhbHVlJywgX3RoaXMubG9va3VwSXRlbXNbX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHhdLnRleHQpO1xuXG4gICAgICAgIC8vIENoYW5nZSBsYWJlbCB0ZXh0XG4gICAgICAgIF90aGlzLnNldExhYmVsKCk7XG5cbiAgICAgICAgX3RoaXMudXRpbHMudHJpZ2dlckNhbGxiYWNrKCdDaGFuZ2UnLCBfdGhpcyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhpZ2hsaWdodCBvcHRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBJbmRleCBvZiB0aGUgb3B0aW9ucyB0aGF0IHdpbGwgYmUgaGlnaGxpZ2h0ZWRcbiAgICAgKi9cbiAgICBoaWdobGlnaHQ6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyICRmaWx0ZXJlZExpID0gX3RoaXMuJGxpLmZpbHRlcignW2RhdGEtaW5kZXhdJykucmVtb3ZlQ2xhc3MoJ2hpZ2hsaWdodGVkJyk7XG5cbiAgICAgIF90aGlzLnV0aWxzLnRyaWdnZXJDYWxsYmFjaygnQmVmb3JlSGlnaGxpZ2h0JywgX3RoaXMpO1xuXG4gICAgICAvLyBQYXJhbWV0ZXIgaW5kZXggaXMgcmVxdWlyZWQgYW5kIHNob3VsZCBub3QgYmUgYSBkaXNhYmxlZCBpdGVtXG4gICAgICBpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgfHwgaW5kZXggPT09IC0xIHx8IF90aGlzLmxvb2t1cEl0ZW1zW2luZGV4XS5kaXNhYmxlZCApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkZmlsdGVyZWRMaVxuICAgICAgICAuZXEoX3RoaXMuc3RhdGUuaGlnaGxpZ2h0ZWRJZHggPSBpbmRleClcbiAgICAgICAgLmFkZENsYXNzKCdoaWdobGlnaHRlZCcpO1xuXG4gICAgICBfdGhpcy5kZXRlY3RJdGVtVmlzaWJpbGl0eShpbmRleCk7XG5cbiAgICAgIF90aGlzLnV0aWxzLnRyaWdnZXJDYWxsYmFjaygnSGlnaGxpZ2h0JywgX3RoaXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3Qgb3B0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBJbmRleCBvZiB0aGUgb3B0aW9uIHRoYXQgd2lsbCBiZSBzZWxlY3RlZFxuICAgICAqL1xuICAgIHNlbGVjdDogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgJGZpbHRlcmVkTGkgPSBfdGhpcy4kbGkuZmlsdGVyKCdbZGF0YS1pbmRleF0nKTtcblxuICAgICAgX3RoaXMudXRpbHMudHJpZ2dlckNhbGxiYWNrKCdCZWZvcmVTZWxlY3QnLCBfdGhpcywgaW5kZXgpO1xuXG4gICAgICAvLyBQYXJhbWV0ZXIgaW5kZXggaXMgcmVxdWlyZWQgYW5kIHNob3VsZCBub3QgYmUgYSBkaXNhYmxlZCBpdGVtXG4gICAgICBpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgfHwgaW5kZXggPT09IC0xIHx8IF90aGlzLmxvb2t1cEl0ZW1zW2luZGV4XS5kaXNhYmxlZCApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIF90aGlzLnN0YXRlLm11bHRpcGxlICkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgc2VsZWN0ZWRJZHggaXMgYW4gYXJyYXlcbiAgICAgICAgX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHggPSAkLmlzQXJyYXkoX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHgpID8gX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHggOiBbX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHhdO1xuXG4gICAgICAgIHZhciBoYXNTZWxlY3RlZEluZGV4ID0gJC5pbkFycmF5KGluZGV4LCBfdGhpcy5zdGF0ZS5zZWxlY3RlZElkeCk7XG4gICAgICAgIGlmICggaGFzU2VsZWN0ZWRJbmRleCAhPT0gLTEgKSB7XG4gICAgICAgICAgX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHguc3BsaWNlKGhhc1NlbGVjdGVkSW5kZXgsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnN0YXRlLnNlbGVjdGVkSWR4LnB1c2goaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgJGZpbHRlcmVkTGlcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJylcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gJC5pbkFycmF5KGluZGV4LCBfdGhpcy5zdGF0ZS5zZWxlY3RlZElkeCkgIT09IC0xO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGZpbHRlcmVkTGlcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJylcbiAgICAgICAgICAuZXEoX3RoaXMuc3RhdGUuc2VsZWN0ZWRJZHggPSBpbmRleClcbiAgICAgICAgICAuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICggIV90aGlzLnN0YXRlLm11bHRpcGxlIHx8ICFfdGhpcy5vcHRpb25zLm11bHRpcGxlLmtlZXBNZW51T3BlbiApIHtcbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2hhbmdlKCk7XG5cbiAgICAgIF90aGlzLnV0aWxzLnRyaWdnZXJDYWxsYmFjaygnU2VsZWN0JywgX3RoaXMsIGluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5iaW5kIGFuZCByZW1vdmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJlc2VydmVEYXRhIC0gQ2hlY2sgaWYgdGhlIGRhdGEgb24gdGhlIGVsZW1lbnQgc2hvdWxkIGJlIHJlbW92ZWQgdG9vXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24ocHJlc2VydmVEYXRhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIF90aGlzLnN0YXRlICYmIF90aGlzLnN0YXRlLmVuYWJsZWQgKSB7XG4gICAgICAgIF90aGlzLmVsZW1lbnRzLml0ZW1zLmFkZChfdGhpcy5lbGVtZW50cy53cmFwcGVyKS5hZGQoX3RoaXMuZWxlbWVudHMuaW5wdXQpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmICggIXByZXNlcnZlRGF0YSApIHtcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVEYXRhKHBsdWdpbk5hbWUpLnJlbW92ZURhdGEoJ3ZhbHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy4kZWxlbWVudC5wcm9wKCd0YWJpbmRleCcsIF90aGlzLm9yaWdpbmFsVGFiaW5kZXgpLm9mZihldmVudE5hbWVzcGFjZVN1ZmZpeCkub2ZmKF90aGlzLmV2ZW50VHJpZ2dlcnMpLnVud3JhcCgpLnVud3JhcCgpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQSByZWFsbHkgbGlnaHR3ZWlnaHQgcGx1Z2luIHdyYXBwZXIgYXJvdW5kIHRoZSBjb25zdHJ1Y3RvcixcbiAgLy8gcHJldmVudGluZyBhZ2FpbnN0IG11bHRpcGxlIGluc3RhbnRpYXRpb25zXG4gICQuZm5bcGx1Z2luTmFtZV0gPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkYXRhID0gJC5kYXRhKHRoaXMsIHBsdWdpbk5hbWUpO1xuXG4gICAgICBpZiAoIGRhdGEgJiYgIWRhdGEuZGlzYWJsZU9uTW9iaWxlICkge1xuICAgICAgICAodHlwZW9mIGFyZ3MgPT09ICdzdHJpbmcnICYmIGRhdGFbYXJnc10pID8gZGF0YVthcmdzXSgpIDogZGF0YS5pbml0KGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJC5kYXRhKHRoaXMsIHBsdWdpbk5hbWUsIG5ldyBTZWxlY3RyaWModGhpcywgYXJncykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHBsdWdpbiBvcHRpb25zXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqL1xuICAkLmZuW3BsdWdpbk5hbWVdLmRlZmF1bHRzID0ge1xuICAgIG9uQ2hhbmdlICAgICAgICAgICAgIDogZnVuY3Rpb24oZWxtKSB7ICQoZWxtKS5jaGFuZ2UoKTsgfSxcbiAgICBtYXhIZWlnaHQgICAgICAgICAgICA6IDMwMCxcbiAgICBrZXlTZWFyY2hUaW1lb3V0ICAgICA6IDUwMCxcbiAgICBhcnJvd0J1dHRvbk1hcmt1cCAgICA6ICc8YiBjbGFzcz1cImJ1dHRvblwiPiYjeDI1YmU7PC9iPicsXG4gICAgZGlzYWJsZU9uTW9iaWxlICAgICAgOiBmYWxzZSxcbiAgICBuYXRpdmVPbk1vYmlsZSAgICAgICA6IHRydWUsXG4gICAgb3Blbk9uRm9jdXMgICAgICAgICAgOiB0cnVlLFxuICAgIG9wZW5PbkhvdmVyICAgICAgICAgIDogZmFsc2UsXG4gICAgaG92ZXJJbnRlbnRUaW1lb3V0ICAgOiA1MDAsXG4gICAgZXhwYW5kVG9JdGVtVGV4dCAgICAgOiBmYWxzZSxcbiAgICByZXNwb25zaXZlICAgICAgICAgICA6IGZhbHNlLFxuICAgIHByZXZlbnRXaW5kb3dTY3JvbGwgIDogdHJ1ZSxcbiAgICBpbmhlcml0T3JpZ2luYWxXaWR0aCA6IGZhbHNlLFxuICAgIGFsbG93V3JhcCAgICAgICAgICAgIDogdHJ1ZSxcbiAgICBmb3JjZVJlbmRlckFib3ZlICAgICA6IGZhbHNlLFxuICAgIGZvcmNlUmVuZGVyQmVsb3cgICAgIDogZmFsc2UsXG4gICAgc3RvcFByb3BhZ2F0aW9uICAgICAgOiB0cnVlLFxuICAgIG9wdGlvbnNJdGVtQnVpbGRlciAgIDogJ3t0ZXh0fScsIC8vIGZ1bmN0aW9uKGl0ZW1EYXRhLCBlbGVtZW50LCBpbmRleClcbiAgICBsYWJlbEJ1aWxkZXIgICAgICAgICA6ICd7dGV4dH0nLCAvLyBmdW5jdGlvbihjdXJySXRlbSlcbiAgICBsaXN0QnVpbGRlciAgICAgICAgICA6IGZhbHNlLCAgICAvLyBmdW5jdGlvbihpdGVtcylcbiAgICBrZXlzICAgICAgICAgICAgICAgICA6IHtcbiAgICAgIHByZXZpb3VzIDogWzM3LCAzOF0sICAgICAgICAgICAgICAgICAvLyBMZWZ0IC8gVXBcbiAgICAgIG5leHQgICAgIDogWzM5LCA0MF0sICAgICAgICAgICAgICAgICAvLyBSaWdodCAvIERvd25cbiAgICAgIHNlbGVjdCAgIDogWzksIDEzLCAyN10sICAgICAgICAgICAgICAvLyBUYWIgLyBFbnRlciAvIEVzY2FwZVxuICAgICAgb3BlbiAgICAgOiBbMTMsIDMyLCAzNywgMzgsIDM5LCA0MF0sIC8vIEVudGVyIC8gU3BhY2UgLyBMZWZ0IC8gVXAgLyBSaWdodCAvIERvd25cbiAgICAgIGNsb3NlICAgIDogWzksIDI3XSAgICAgICAgICAgICAgICAgICAvLyBUYWIgLyBFc2NhcGVcbiAgICB9LFxuICAgIGN1c3RvbUNsYXNzICAgICAgICAgIDoge1xuICAgICAgcHJlZml4OiBwbHVnaW5OYW1lLFxuICAgICAgY2FtZWxDYXNlOiBmYWxzZVxuICAgIH0sXG4gICAgbXVsdGlwbGUgICAgICAgICAgICAgIDoge1xuICAgICAgc2VwYXJhdG9yOiAnLCAnLFxuICAgICAga2VlcE1lbnVPcGVuOiB0cnVlLFxuICAgICAgbWF4TGFiZWxFbnRyaWVzOiBmYWxzZVxuICAgIH1cbiAgfTtcbn0pKTtcbiIsIi8qIVxyXG4gKiBwR2VuZXJhdG9yIGpRdWVyeSBQbHVnaW4gdjEuMC40XHJcbiAqIGh0dHA6Ly9hY2NvdW50c3Bhc3N3b3JkLmNvbS9wYXNzd29yZC1nZW5lcmF0b3ItanF1ZXJ5LXBsdWdpblxyXG4gKlxyXG4gKiBDcmVhdGVkIGJ5IEFjY291bnRzUGFzc3dvcmQuY29tXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoRmVlbCBmcmVlIHRvIGNvcHksIG1vZGlmeSBvciByZWRpc3RyaWJ1dGUgdGhpcyBwbHVnaW4uKVxyXG4gKlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigkKXtcclxuICBcdHZhciBudW1iZXJzX2FycmF5ID0gbmV3IEFycmF5KCksXHJcblx0XHR1cHBlcl9sZXR0ZXJzX2FycmF5ID0gbmV3IEFycmF5KCksXHJcblx0XHRsb3dlcl9sZXR0ZXJzX2FycmF5ID0gbmV3IEFycmF5KCksXHJcblx0XHRzcGVjaWFsX2NoYXJzX2FycmF5ID0gbmV3IEFycmF5KCksXHJcblx0XHQkcEdlbmVyYXRvckVsZW1lbnQgPSBudWxsO1xyXG5cdHZhciBtZXRob2RzID0ge1xyXG5cdFx0aW5pdCA6IGZ1bmN0aW9uKCBvcHRpb25zLCBjYWxsYmFja3MpIHtcclxuXHJcblx0XHRcdHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcclxuXHRcdFx0XHQnYmluZCc6ICdjbGljaycsXHJcblx0XHRcdFx0J3Bhc3N3b3JkRWxlbWVudCc6IG51bGwsXHJcblx0XHRcdFx0J2Rpc3BsYXlFbGVtZW50JzogbnVsbCxcclxuXHRcdFx0XHQncGFzc3dvcmRMZW5ndGgnOiAxNixcclxuXHRcdFx0XHQndXBwZXJjYXNlJzogdHJ1ZSxcclxuXHRcdFx0XHQnbG93ZXJjYXNlJzogdHJ1ZSxcclxuXHRcdFx0XHQnbnVtYmVycyc6ICAgdHJ1ZSxcclxuXHRcdFx0XHQnc3BlY2lhbENoYXJzJzogdHJ1ZSxcclxuXHRcdFx0XHQnb25QYXNzd29yZEdlbmVyYXRlZCc6IGZ1bmN0aW9uKGdlbmVyYXRlZFBhc3N3b3JkKSB7IH1cclxuXHRcdFx0fSwgb3B0aW9ucyk7XHJcblxyXG5cdFx0XHRmb3IodmFyIGkgPSA0ODsgaSA8IDU4OyBpKyspXHJcblx0XHRcdFx0bnVtYmVyc19hcnJheS5wdXNoKGkpO1xyXG5cdFx0XHRmb3IoaSA9IDY1OyBpIDwgOTE7IGkrKylcclxuXHRcdFx0XHR1cHBlcl9sZXR0ZXJzX2FycmF5LnB1c2goaSk7XHJcblx0XHRcdGZvcihpID0gOTc7IGkgPCAxMjM7IGkrKylcclxuXHRcdFx0XHRsb3dlcl9sZXR0ZXJzX2FycmF5LnB1c2goaSk7XHJcblx0XHRcdHNwZWNpYWxfY2hhcnNfYXJyYXkgPSBbMzMsMzUsNjQsMzYsMzgsNDIsOTEsOTMsMTIzLDEyNSw5Miw0Nyw2Myw1OCw1OSw5NSw0NSw1M107XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcblxyXG5cdFx0XHRcdCRwR2VuZXJhdG9yRWxlbWVudCA9ICQodGhpcyk7XHJcblxyXG5cdFx0XHRcdCRwR2VuZXJhdG9yRWxlbWVudC5iaW5kKHNldHRpbmdzLmJpbmQsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0bWV0aG9kcy5nZW5lcmF0ZVBhc3N3b3JkKHNldHRpbmdzKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHRcdGdlbmVyYXRlUGFzc3dvcmQ6IGZ1bmN0aW9uKHNldHRpbmdzKSB7XHJcblxyXG5cdFx0XHR2YXIgcGFzc3dvcmQgPSBuZXcgQXJyYXkoKSxcclxuXHRcdFx0XHRzZWxPcHRpb25zID0gc2V0dGluZ3MudXBwZXJjYXNlICsgc2V0dGluZ3MubG93ZXJjYXNlICsgc2V0dGluZ3MubnVtYmVycyArIHNldHRpbmdzLnNwZWNpYWxDaGFycyxcclxuXHRcdFx0XHRzZWxlY3RlZCA9IDAsXHJcblx0XHRcdFx0bm9fbG93ZXJfbGV0dGVycyA9IG5ldyBBcnJheSgpO1xyXG5cclxuXHRcdFx0dmFyIG9wdGlvbkxlbmd0aCA9IE1hdGguZmxvb3Ioc2V0dGluZ3MucGFzc3dvcmRMZW5ndGggLyBzZWxPcHRpb25zKTtcclxuXHJcblx0XHRcdGlmKHNldHRpbmdzLnVwcGVyY2FzZSkge1xyXG5cdFx0XHRcdC8vIHVwcGVyY2FzZSBsZXR0ZXJzXHJcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9wdGlvbkxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRwYXNzd29yZC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUodXBwZXJfbGV0dGVyc19hcnJheVtyYW5kb21Gcm9tSW50ZXJ2YWwoMCwgdXBwZXJfbGV0dGVyc19hcnJheS5sZW5ndGggLSAxKV0pKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdG5vX2xvd2VyX2xldHRlcnMgPSBub19sb3dlcl9sZXR0ZXJzLmNvbmNhdCh1cHBlcl9sZXR0ZXJzX2FycmF5KTtcclxuXHJcblx0XHRcdFx0c2VsZWN0ZWQrKztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoc2V0dGluZ3MubnVtYmVycykge1xyXG5cdFx0XHRcdC8vIG51bWJlcnMgbGV0dGVyc1xyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvcHRpb25MZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0cGFzc3dvcmQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKG51bWJlcnNfYXJyYXlbcmFuZG9tRnJvbUludGVydmFsKDAsIG51bWJlcnNfYXJyYXkubGVuZ3RoIC0gMSldKSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRub19sb3dlcl9sZXR0ZXJzID0gbm9fbG93ZXJfbGV0dGVycy5jb25jYXQobnVtYmVyc19hcnJheSk7XHJcblxyXG5cdFx0XHRcdHNlbGVjdGVkKys7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKHNldHRpbmdzLnNwZWNpYWxDaGFycykge1xyXG5cdFx0XHRcdC8vIG51bWJlcnMgbGV0dGVyc1xyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvcHRpb25MZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0cGFzc3dvcmQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHNwZWNpYWxfY2hhcnNfYXJyYXlbcmFuZG9tRnJvbUludGVydmFsKDAsIHNwZWNpYWxfY2hhcnNfYXJyYXkubGVuZ3RoIC0gMSldKSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRub19sb3dlcl9sZXR0ZXJzID0gbm9fbG93ZXJfbGV0dGVycy5jb25jYXQoc3BlY2lhbF9jaGFyc19hcnJheSk7XHJcblxyXG5cdFx0XHRcdHNlbGVjdGVkKys7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciByZW1haW5lZCA9IHNldHRpbmdzLnBhc3N3b3JkTGVuZ3RoIC0gKHNlbGVjdGVkICogb3B0aW9uTGVuZ3RoKTtcclxuXHJcblx0XHRcdGlmKHNldHRpbmdzLmxvd2VyY2FzZSkge1xyXG5cclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgcmVtYWluZWQ7IGkrKykge1xyXG5cdFx0XHRcdFx0cGFzc3dvcmQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGxvd2VyX2xldHRlcnNfYXJyYXlbcmFuZG9tRnJvbUludGVydmFsKDAsIGxvd2VyX2xldHRlcnNfYXJyYXkubGVuZ3RoIC0gMSldKSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHJlbWFpbmVkOyBpKyspIHtcclxuXHRcdFx0XHRcdHBhc3N3b3JkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShub19sb3dlcl9sZXR0ZXJzW3JhbmRvbUZyb21JbnRlcnZhbCgwLCBub19sb3dlcl9sZXR0ZXJzLmxlbmd0aCAtIDEpXSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRwYXNzd29yZCA9IHNodWZmbGUocGFzc3dvcmQpO1xyXG5cdFx0XHRwYXNzd29yZFN0cmluZyA9IHBhc3N3b3JkLmpvaW4oJycpO1xyXG5cclxuXHRcdFx0aWYoc2V0dGluZ3MucGFzc3dvcmRFbGVtZW50ICE9PSBudWxsKSB7XHJcblx0XHRcdFx0JChzZXR0aW5ncy5wYXNzd29yZEVsZW1lbnQpLnZhbChwYXNzd29yZFN0cmluZyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKHNldHRpbmdzLmRpc3BsYXlFbGVtZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZigkKHNldHRpbmdzLmRpc3BsYXlFbGVtZW50KS5pcyhcImlucHV0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChzZXR0aW5ncy5kaXNwbGF5RWxlbWVudCkudmFsKHBhc3N3b3JkU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChzZXR0aW5ncy5kaXNwbGF5RWxlbWVudCkudGV4dChwYXNzd29yZFN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNldHRpbmdzLm9uUGFzc3dvcmRHZW5lcmF0ZWQocGFzc3dvcmRTdHJpbmcpO1xyXG5cclxuXHRcdH1cclxuICBcdH07XHJcblxyXG5cdGZ1bmN0aW9uIHNodWZmbGUobyl7IC8vdjEuMFxyXG5cdFx0Zm9yKHZhciBqLCB4LCBpID0gby5sZW5ndGg7IGk7IGogPSBwYXJzZUludChNYXRoLnJhbmRvbSgpICogaSksIHggPSBvWy0taV0sIG9baV0gPSBvW2pdLCBvW2pdID0geCk7XHJcblx0XHRyZXR1cm4gbztcclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiByYW5kb21Gcm9tSW50ZXJ2YWwoZnJvbSwgdG8pXHJcblx0e1xyXG5cdFx0cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoodG8tZnJvbSsxKStmcm9tKTtcclxuXHR9O1xyXG5cclxuXHQkLmZuLnBHZW5lcmF0b3IgPSBmdW5jdGlvbihtZXRob2QpIHtcclxuICAgIFx0aWYgKCBtZXRob2RzW21ldGhvZF0gKSB7XHJcbiAgICAgIFx0XHRyZXR1cm4gbWV0aG9kc1ttZXRob2RdLmFwcGx5KCB0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICkpO1xyXG4gICAgXHR9IGVsc2UgaWYgKCB0eXBlb2YgbWV0aG9kID09PSAnb2JqZWN0JyB8fCAhIG1ldGhvZCApIHtcclxuICAgICAgXHRcdHJldHVybiBtZXRob2RzLmluaXQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG4gICAgXHR9IGVsc2Uge1xyXG4gICAgICBcdFx0JC5lcnJvciggJ01ldGhvZCAnICsgIG1ldGhvZCArICcgZG9lcyBub3QgZXhpc3Qgb24galF1ZXJ5LnBHZW5lcmF0b3InICk7XHJcbiAgICBcdH1cclxuICBcdH07XHJcblxyXG59KShqUXVlcnkpO1xyXG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCIvKiFcclxuICogalF1ZXJ5IE1vYmlsZSBFdmVudHNcclxuICogQnk6IFNhbSBEZWxnYWRvIChodHRwczovL3JpemVyYXBwLmNvbSksIEJlbiBNYWpvciAoaHR0cDovL3d3dy5iZW4tbWFqb3IuY28udWspLCBhbmQgaGFjaGlnb3JvIChodHRwczovL2dpdGh1Yi5jb20vaGFjaGlnb3JvKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1LCBCZW4gTWFqb3IgLSBDb3B5cmlnaHQgMjAxNiwgU2FtIERlbGdhZG9cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlOlxyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xyXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gKiBUSEUgU09GVFdBUkUuXHJcbiAqXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsb2FkVG91Y2hFdmVudHMoalF1ZXJ5KSB7XHJcblxyXG4gIHZhciAkID0gZ2xvYmFsLiQgfHwgd2luZG93LiQgfHwgalF1ZXJ5IHx8IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG5cclxuICAkLmF0dHJGbiA9ICQuYXR0ckZuIHx8IHt9O1xyXG5cclxuICAvLyBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkgaXNuJ3QgcmVsaWFibGUgZm9yIENocm9tZSBpbnN0YWxsc1xyXG4gIC8vIG9uIG1vYmlsZSBkZXZpY2VzLiBBcyBzdWNoLCB3ZSB3aWxsIGNyZWF0ZSBhIGJvb2xlYW4gaXNDaHJvbWVEZXNrdG9wXHJcbiAgLy8gVGhlIHJlYXNvbiB0aGF0IHdlIG5lZWQgdG8gZG8gdGhpcyBpcyBiZWNhdXNlIENocm9tZSBhbm5veWluZ2x5XHJcbiAgLy8gcHVycG9ydHMgc3VwcG9ydCBmb3IgdG91Y2ggZXZlbnRzIGV2ZW4gaWYgdGhlIHVuZGVybHlpbmcgaGFyZHdhcmVcclxuICAvLyBkb2VzIG5vdCFcclxuICB2YXIgYWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCksXHJcbiAgICAgIGlzQ2hyb21lRGVza3RvcCA9IChhZ2VudC5pbmRleE9mKCdjaHJvbWUnKSA+IC0xICYmICgoYWdlbnQuaW5kZXhPZignd2luZG93cycpID4gLTEpIHx8IChhZ2VudC5pbmRleE9mKCdtYWNpbnRvc2gnKSA+IC0xKSB8fCAoYWdlbnQuaW5kZXhPZignbGludXgnKSA+IC0xKSkgJiYgYWdlbnQuaW5kZXhPZignbW9iaWxlJykgPCAwICYmIGFnZW50LmluZGV4T2YoJ2FuZHJvaWQnKSA8IDApLFxyXG5cclxuICAgICAgc2V0dGluZ3MgPSB7XHJcbiAgICAgICAgICB0YXBfcGl4ZWxfcmFuZ2U6IDUsXHJcbiAgICAgICAgICBzd2lwZV9oX3RocmVzaG9sZDogNTAsXHJcbiAgICAgICAgICBzd2lwZV92X3RocmVzaG9sZDogNTAsXHJcbiAgICAgICAgICB0YXBob2xkX3RocmVzaG9sZDogNzUwLFxyXG4gICAgICAgICAgZG91YmxldGFwX2ludDogNTAwLFxyXG5cclxuICAgICAgICAgIHRvdWNoX2NhcGFibGU6ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgJiYgIWlzQ2hyb21lRGVza3RvcCksXHJcbiAgICAgICAgICBvcmllbnRhdGlvbl9zdXBwb3J0OiAoJ29yaWVudGF0aW9uJyBpbiB3aW5kb3cgJiYgJ29ub3JpZW50YXRpb25jaGFuZ2UnIGluIHdpbmRvdyksXHJcblxyXG4gICAgICAgICAgc3RhcnRldmVudDogICgoJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICYmICFpc0Nocm9tZURlc2t0b3ApID8gJ3RvdWNoc3RhcnQnIDogJ21vdXNlZG93bicpLFxyXG4gICAgICAgICAgZW5kZXZlbnQ6ICAgICgoJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICYmICFpc0Nocm9tZURlc2t0b3ApID8gJ3RvdWNoZW5kJyA6ICdtb3VzZXVwJyksXHJcbiAgICAgICAgICBtb3ZlZXZlbnQ6ICAgKCgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgJiYgIWlzQ2hyb21lRGVza3RvcCkgPyAndG91Y2htb3ZlJyA6ICdtb3VzZW1vdmUnKSxcclxuICAgICAgICAgIHRhcGV2ZW50OiAgICAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICYmICFpc0Nocm9tZURlc2t0b3ApID8gJ3RhcCcgOiAnY2xpY2snLFxyXG4gICAgICAgICAgc2Nyb2xsZXZlbnQ6ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgJiYgIWlzQ2hyb21lRGVza3RvcCkgPyAndG91Y2htb3ZlJyA6ICdzY3JvbGwnLFxyXG5cclxuICAgICAgICAgIGhvbGRfdGltZXI6IG51bGwsXHJcbiAgICAgICAgICB0YXBfdGltZXI6IG51bGxcclxuICAgICAgfTtcclxuXHJcbiAgLy8gQ29udmVuaWVuY2UgZnVuY3Rpb25zOlxyXG4gICQuaXNUb3VjaENhcGFibGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNldHRpbmdzLnRvdWNoX2NhcGFibGU7IH07XHJcbiAgJC5nZXRTdGFydEV2ZW50ICA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2V0dGluZ3Muc3RhcnRldmVudDsgICAgfTtcclxuICAkLmdldEVuZEV2ZW50ICAgID0gZnVuY3Rpb24oKSB7IHJldHVybiBzZXR0aW5ncy5lbmRldmVudDsgICAgICB9O1xyXG4gICQuZ2V0TW92ZUV2ZW50ICAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNldHRpbmdzLm1vdmVldmVudDsgICAgIH07XHJcbiAgJC5nZXRUYXBFdmVudCAgICA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2V0dGluZ3MudGFwZXZlbnQ7ICAgICAgfTtcclxuICAkLmdldFNjcm9sbEV2ZW50ID0gZnVuY3Rpb24oKSB7IHJldHVybiBzZXR0aW5ncy5zY3JvbGxldmVudDsgICB9O1xyXG5cclxuICAvLyBBZGQgRXZlbnQgc2hvcnRjdXRzOlxyXG4gICQuZWFjaChbJ3RhcHN0YXJ0JywgJ3RhcGVuZCcsICd0YXBtb3ZlJywgJ3RhcCcsICd0YXAyJywgJ3RhcDMnLCAndGFwNCcsICdzaW5nbGV0YXAnLCAnZG91YmxldGFwJywgJ3RhcGhvbGQnLCAnc3dpcGUnLCAnc3dpcGV1cCcsICdzd2lwZXJpZ2h0JywgJ3N3aXBlZG93bicsICdzd2lwZWxlZnQnLCAnc3dpcGVlbmQnLCAnc2Nyb2xsc3RhcnQnLCAnc2Nyb2xsZW5kJywgJ29yaWVudGF0aW9uY2hhbmdlJ10sIGZ1bmN0aW9uIChpLCBuYW1lKSB7XHJcbiAgICAgICQuZm5bbmFtZV0gPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICAgIHJldHVybiBmbiA/IHRoaXMub24obmFtZSwgZm4pIDogdGhpcy50cmlnZ2VyKG5hbWUpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgJC5hdHRyRm5bbmFtZV0gPSB0cnVlO1xyXG4gIH0pO1xyXG5cclxuICAvLyB0YXBzdGFydCBFdmVudDpcclxuICAkLmV2ZW50LnNwZWNpYWwudGFwc3RhcnQgPSB7XHJcbiAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5zdGFydGV2ZW50LCBmdW5jdGlvbiB0YXBTdGFydEZ1bmMoZSkge1xyXG5cclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUnLCB0YXBTdGFydEZ1bmMpO1xyXG4gICAgICAgICAgICAgIGlmIChlLndoaWNoICYmIGUud2hpY2ggIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudCxcclxuICAgICAgICAgICAgICAgICAgdG91Y2hEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnNjcmVlblggOiBlLnNjcmVlblgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0uc2NyZWVuWSA6IGUuc2NyZWVuWVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcclxuICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgdHJpZ2dlckN1c3RvbUV2ZW50KHRoaXNPYmplY3QsICd0YXBzdGFydCcsIGUsIHRvdWNoRGF0YSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZSk7XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICAvLyB0YXBtb3ZlIEV2ZW50OlxyXG4gICQuZXZlbnQuc3BlY2lhbC50YXBtb3ZlID0ge1xyXG4gIFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxyXG4gICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpO1xyXG5cclxuICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLm1vdmVldmVudCwgZnVuY3Rpb24gdGFwTW92ZUZ1bmMoZSkge1xyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZScsIHRhcE1vdmVGdW5jKTtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudCxcclxuICAgICAgICAgICAgICAgICAgdG91Y2hEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnNjcmVlblggOiBlLnNjcmVlblgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0uc2NyZWVuWSA6IGUuc2NyZWVuWVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxyXG4gIFx0XHRcdFx0XHQneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAndGFwbW92ZScsIGUsIHRvdWNoRGF0YSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICQodGhpcykub2ZmKHNldHRpbmdzLm1vdmVldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZSk7XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICAvLyB0YXBlbmQgRXZlbnQ6XHJcbiAgJC5ldmVudC5zcGVjaWFsLnRhcGVuZCA9IHtcclxuICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcclxuICAgICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCk7XHJcblxyXG4gICAgICAgICAgJHRoaXMub24oc2V0dGluZ3MuZW5kZXZlbnQsIGZ1bmN0aW9uIHRhcEVuZEZ1bmMoZSkge1xyXG4gICAgICAgICAgICAgIC8vIFRvdWNoIGV2ZW50IGRhdGE6XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlJywgdGFwRW5kRnVuYyk7XHJcblxyXG4gICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XHJcbiAgICAgICAgICAgICAgdmFyIHRvdWNoRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uc2NyZWVuWCA6IGUuc2NyZWVuWCxcclxuICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnNjcmVlblkgOiBlLnNjcmVlbllcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcclxuICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAndGFwZW5kJywgZSwgdG91Y2hEYXRhKTtcclxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICQodGhpcykub2ZmKHNldHRpbmdzLmVuZGV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlKTtcclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIHRhcGhvbGQgRXZlbnQ6XHJcbiAgJC5ldmVudC5zcGVjaWFsLnRhcGhvbGQgPSB7XHJcbiAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgdGhpc09iamVjdCA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpLFxyXG4gICAgICAgICAgICAgIG9yaWdUYXJnZXQsXHJcbiAgICAgICAgICAgICAgc3RhcnRfcG9zID0ge1xyXG4gICAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgICB5OiAwXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBlbmRfeCA9IDAsXHJcbiAgICAgICAgICAgICAgZW5kX3kgPSAwO1xyXG5cclxuICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLnN0YXJ0ZXZlbnQsIGZ1bmN0aW9uIHRhcEhvbGRGdW5jMShlKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGUud2hpY2ggJiYgZS53aGljaCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgndGFwaGVsZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgb3JpZ1RhcmdldCA9IGUudGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcclxuICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0X3RpbWUgPSBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnNjcmVlblggOiBlLnNjcmVlblgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5zY3JlZW5ZIDogZS5zY3JlZW5ZXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWCAtIG9yaWdFdmVudC50b3VjaGVzWzBdLnRhcmdldC5vZmZzZXRMZWZ0IDogZS5vZmZzZXRYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVkgLSBvcmlnRXZlbnQudG91Y2hlc1swXS50YXJnZXQub2Zmc2V0VG9wIDogZS5vZmZzZXRZXHJcbiAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgc3RhcnRfcG9zLnggPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgICBzdGFydF9wb3MueSA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XHJcblxyXG4gICAgICAgICAgICAgICAgICBlbmRfeCA9IHN0YXJ0X3Bvcy54O1xyXG4gICAgICAgICAgICAgICAgICBlbmRfeSA9IHN0YXJ0X3Bvcy55O1xyXG5cclxuICAgICAgICAgICAgICAgICAgc2V0dGluZ3MuaG9sZF90aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZl94ID0gKHN0YXJ0X3Bvcy54IC0gZW5kX3gpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZfeSA9IChzdGFydF9wb3MueSAtIGVuZF95KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT0gb3JpZ1RhcmdldCAmJiAoKHN0YXJ0X3Bvcy54ID09IGVuZF94ICYmIHN0YXJ0X3Bvcy55ID09IGVuZF95KSB8fCAoZGlmZl94ID49IC0oc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlKSAmJiBkaWZmX3ggPD0gc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlICYmIGRpZmZfeSA+PSAtKHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkgJiYgZGlmZl95IDw9IHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgndGFwaGVsZCcsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kX3RpbWUgPSBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRQb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0uc2NyZWVuWCA6IGUuc2NyZWVuWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0uc2NyZWVuWSA6IGUuc2NyZWVuWVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXHJcbiAgXHRcdFx0XHRcdFx0XHQneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gZW5kX3RpbWUgLSBzdGFydF90aW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCdWlsZCB0aGUgdG91Y2ggZGF0YTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2hEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhcnRUaW1lJzogc3RhcnRfdGltZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VuZFRpbWUnOiBlbmRfdGltZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0UG9zaXRpb24nOiBzdGFydFBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhcnRPZmZzZXQnOiBzdGFydE9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VuZFBvc2l0aW9uJzogZW5kUG9zaXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbmRPZmZzZXQnOiBlbmRPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkdXJhdGlvbic6IGR1cmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTEnLCB0YXBIb2xkRnVuYzEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAndGFwaG9sZCcsIGUsIHRvdWNoRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sIHNldHRpbmdzLnRhcGhvbGRfdGhyZXNob2xkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pLm9uKHNldHRpbmdzLmVuZGV2ZW50LCBmdW5jdGlvbiB0YXBIb2xkRnVuYzIoKSB7XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMicsIHRhcEhvbGRGdW5jMik7XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YSgndGFwaGVsZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNldHRpbmdzLmhvbGRfdGltZXIpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5vbihzZXR0aW5ncy5tb3ZlZXZlbnQsIGZ1bmN0aW9uIHRhcEhvbGRGdW5jMyhlKSB7XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMycsIHRhcEhvbGRGdW5jMyk7XHJcblxyXG4gICAgICAgICAgICAgIGVuZF94ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcclxuICAgICAgICAgICAgICBlbmRfeSA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTIpLm9mZihzZXR0aW5ncy5tb3ZlZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUzKTtcclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIGRvdWJsZXRhcCBFdmVudDpcclxuICAkLmV2ZW50LnNwZWNpYWwuZG91YmxldGFwID0ge1xyXG4gICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KSxcclxuICAgICAgICAgICAgICBvcmlnVGFyZ2V0LFxyXG4gICAgICAgICAgICAgIGFjdGlvbixcclxuICAgICAgICAgICAgICBmaXJzdFRhcCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgb3JpZ0V2ZW50LFxyXG4gIFx0XHRjb29sb2ZmLFxyXG4gIFx0XHRjb29saW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgJHRoaXMub24oc2V0dGluZ3Muc3RhcnRldmVudCwgZnVuY3Rpb24gZG91YmxlVGFwRnVuYzEoZSkge1xyXG4gICAgICAgICAgICAgIGlmIChlLndoaWNoICYmIGUud2hpY2ggIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdkb3VibGV0YXBwZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgb3JpZ1RhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTEnLCBkb3VibGVUYXBGdW5jMSk7XHJcblxyXG4gICAgICAgICAgICAgIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcclxuICAgICAgICAgICAgICBpZiAoIWZpcnN0VGFwKSB7XHJcbiAgICAgICAgICAgICAgICAgIGZpcnN0VGFwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0uc2NyZWVuWCA6IGUuc2NyZWVuWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnNjcmVlblkgOiBlLnNjcmVlbllcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH0pLm9uKHNldHRpbmdzLmVuZGV2ZW50LCBmdW5jdGlvbiBkb3VibGVUYXBGdW5jMihlKSB7XHJcblxyXG4gICAgICAgICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgIHZhciBsYXN0VG91Y2ggPSAkdGhpcy5kYXRhKCdsYXN0VG91Y2gnKSB8fCBub3cgKyAxO1xyXG4gICAgICAgICAgICAgIHZhciBkZWx0YSA9IG5vdyAtIGxhc3RUb3VjaDtcclxuICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMicsIGRvdWJsZVRhcEZ1bmMyKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGRlbHRhIDwgc2V0dGluZ3MuZG91YmxldGFwX2ludCAmJiAoZS50YXJnZXQgPT0gb3JpZ1RhcmdldCkgJiYgZGVsdGEgPiAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnZG91YmxldGFwcGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoc2V0dGluZ3MudGFwX3RpbWVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIE5vdyBnZXQgdGhlIGN1cnJlbnQgZXZlbnQ6XHJcbiAgICAgICAgICAgICAgICAgIHZhciBsYXN0VGFwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnNjcmVlblggOiBlLnNjcmVlblgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uc2NyZWVuWSA6IGUuc2NyZWVuWVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcclxuICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHZhciB0b3VjaERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAnZmlyc3RUYXAnOiBmaXJzdFRhcCxcclxuICAgICAgICAgICAgICAgICAgICAgICdzZWNvbmRUYXAnOiBsYXN0VGFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ2ludGVydmFsJzogbGFzdFRhcC50aW1lIC0gZmlyc3RUYXAudGltZVxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgaWYgKCFjb29saW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgIFx0dHJpZ2dlckN1c3RvbUV2ZW50KHRoaXNPYmplY3QsICdkb3VibGV0YXAnLCBlLCB0b3VjaERhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgZmlyc3RUYXAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICBjb29saW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGNvb2xvZmYgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgIFx0Y29vbGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB9LCBzZXR0aW5ncy5kb3VibGV0YXBfaW50KTtcclxuXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnbGFzdFRvdWNoJywgbm93KTtcclxuICAgICAgICAgICAgICAgICAgYWN0aW9uID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZmlyc3RUYXAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICB9LCBzZXR0aW5ncy5kb3VibGV0YXBfaW50LCBbZV0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdsYXN0VG91Y2gnLCBub3cpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTIpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gc2luZ2xldGFwIEV2ZW50OlxyXG4gIC8vIFRoaXMgaXMgdXNlZCBpbiBjb25qdWN0aW9uIHdpdGggZG91YmxldGFwIHdoZW4gYm90aCBldmVudHMgYXJlIG5lZWRlZCBvbiB0aGUgc2FtZSBlbGVtZW50XHJcbiAgJC5ldmVudC5zcGVjaWFsLnNpbmdsZXRhcCA9IHtcclxuICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcclxuICAgICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCksXHJcbiAgICAgICAgICAgICAgb3JpZ1RhcmdldCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgc3RhcnRUaW1lID0gbnVsbCxcclxuICAgICAgICAgICAgICBzdGFydF9wb3MgPSB7XHJcbiAgICAgICAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgICAgICAgIHk6IDBcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLnN0YXJ0ZXZlbnQsIGZ1bmN0aW9uIHNpbmdsZVRhcEZ1bmMxKGUpIHtcclxuICAgICAgICAgICAgICBpZiAoZS53aGljaCAmJiBlLndoaWNoICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICBvcmlnVGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTEnLCBzaW5nbGVUYXBGdW5jMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHN0YXJ0IHggYW5kIHkgcG9zaXRpb246XHJcbiAgICAgICAgICAgICAgICAgIHN0YXJ0X3Bvcy54ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcclxuICAgICAgICAgICAgICAgICAgc3RhcnRfcG9zLnkgPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xyXG5cclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSkub24oc2V0dGluZ3MuZW5kZXZlbnQsIGZ1bmN0aW9uIHNpbmdsZVRhcEZ1bmMyKGUpIHtcclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUyJywgc2luZ2xlVGFwRnVuYzIpO1xyXG4gICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PSBvcmlnVGFyZ2V0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGVuZCBwb2ludDpcclxuICAgICAgICAgICAgICAgICAgdmFyIGVuZF9wb3NfeCA9IChlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCxcclxuICAgICAgICAgICAgICAgICAgICAgIGVuZF9wb3NfeSA9IChlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgaXQgd2FzIGEgdGFwaG9sZDpcclxuXHJcbiAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnRhcF90aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZl94ID0gKHN0YXJ0X3Bvcy54IC0gZW5kX3Bvc194KSwgZGlmZl95ID0gKHN0YXJ0X3Bvcy55IC0gZW5kX3Bvc195KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBpZighJHRoaXMuZGF0YSgnZG91YmxldGFwcGVkJykgJiYgISR0aGlzLmRhdGEoJ3RhcGhlbGQnKSAmJiAoKChzdGFydF9wb3MueCA9PSBlbmRfcG9zX3gpICYmIChzdGFydF9wb3MueSA9PSBlbmRfcG9zX3kpKSB8fCAoZGlmZl94ID49IC0oc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlKSAmJiBkaWZmX3ggPD0gc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlICYmIGRpZmZfeSA+PSAtKHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkgJiYgZGlmZl95IDw9IHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvdWNoRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uc2NyZWVuWCA6IGUuc2NyZWVuWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnNjcmVlblkgOiBlLnNjcmVlbllcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcclxuICBcdFx0XHRcdFx0XHRcdCd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXYXMgaXQgYSB0YXBob2xkP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCh0b3VjaERhdGEudGltZSAtIHN0YXJ0VGltZSkgPCBzZXR0aW5ncy50YXBob2xkX3RocmVzaG9sZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAnc2luZ2xldGFwJywgZSwgdG91Y2hEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sIHNldHRpbmdzLmRvdWJsZXRhcF9pbnQpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkKHRoaXMpLm9mZihzZXR0aW5ncy5zdGFydGV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlMSkub2ZmKHNldHRpbmdzLmVuZGV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlMik7XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICAvLyB0YXAgRXZlbnQ6XHJcbiAgJC5ldmVudC5zcGVjaWFsLnRhcCA9IHtcclxuICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcclxuICAgICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCksXHJcbiAgICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgIG9yaWdUYXJnZXQgPSBudWxsLFxyXG4gICAgICAgICAgICAgIHN0YXJ0X3RpbWUsXHJcbiAgICAgICAgICAgICAgc3RhcnRfcG9zID0ge1xyXG4gICAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgICB5OiAwXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB0b3VjaGVzO1xyXG5cclxuICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLnN0YXJ0ZXZlbnQsIGZ1bmN0aW9uIHRhcEZ1bmMxKGUpIHtcclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUxJywgdGFwRnVuYzEpO1xyXG5cclxuICAgICAgICAgICAgICBpZiggZS53aGljaCAmJiBlLndoaWNoICE9PSAxIClcclxuICBcdFx0e1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfVxyXG4gIFx0XHRlbHNlXHJcbiAgXHRcdHtcclxuICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgIHN0YXJ0X3Bvcy54ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcclxuICAgICAgICAgICAgICAgICAgc3RhcnRfcG9zLnkgPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xyXG4gICAgICAgICAgICAgICAgICBzdGFydF90aW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgb3JpZ1RhcmdldCA9IGUudGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgdG91Y2hlcyA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcyA6IFsgZSBdO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KS5vbihzZXR0aW5ncy5lbmRldmVudCwgZnVuY3Rpb24gdGFwRnVuYzIoZSkge1xyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTInLCB0YXBGdW5jMik7XHJcblxyXG4gICAgICAgICAgICAgIC8vIE9ubHkgdHJpZ2dlciBpZiB0aGV5J3ZlIHN0YXJ0ZWQsIGFuZCB0aGUgdGFyZ2V0IG1hdGNoZXM6XHJcbiAgICAgICAgICAgICAgdmFyIGVuZF94ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgIGVuZF95ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVksXHJcbiAgICAgICAgICAgICAgICAgIGRpZmZfeCA9IChzdGFydF9wb3MueCAtIGVuZF94KSxcclxuICAgICAgICAgICAgICAgICAgZGlmZl95ID0gKHN0YXJ0X3Bvcy55IC0gZW5kX3kpLFxyXG4gICAgICAgICAgICAgICAgICBldmVudE5hbWU7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChvcmlnVGFyZ2V0ID09IGUudGFyZ2V0ICYmIHN0YXJ0ZWQgJiYgKChEYXRlLm5vdygpIC0gc3RhcnRfdGltZSkgPCBzZXR0aW5ncy50YXBob2xkX3RocmVzaG9sZCkgJiYgKChzdGFydF9wb3MueCA9PSBlbmRfeCAmJiBzdGFydF9wb3MueSA9PSBlbmRfeSkgfHwgKGRpZmZfeCA+PSAtKHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkgJiYgZGlmZl94IDw9IHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSAmJiBkaWZmX3kgPj0gLShzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UpICYmIGRpZmZfeSA8PSBzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UpKSkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZS5vcmlnaW5hbEV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdG91Y2hEYXRhID0gWyBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0b3VjaGVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2ggPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5zY3JlZW5YIDogZS5zY3JlZW5YLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5zY3JlZW5ZIDogZS5zY3JlZW5ZXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcclxuICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgdG91Y2hEYXRhLnB1c2goIHRvdWNoICk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAndGFwJywgZSwgdG91Y2hEYXRhKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTIpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gc3dpcGUgRXZlbnQgKGFsc28gaGFuZGxlcyBzd2lwZXVwLCBzd2lwZXJpZ2h0LCBzd2lwZWRvd24gYW5kIHN3aXBlbGVmdCk6XHJcbiAgJC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xyXG4gICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KSxcclxuICAgICAgICAgICAgICBzdGFydGVkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgaGFzU3dpcGVkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgb3JpZ2luYWxDb29yZCA9IHtcclxuICAgICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgICAgeTogMFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgZmluYWxDb29yZCA9IHtcclxuICAgICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgICAgeTogMFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgc3RhcnRFdm50O1xyXG5cclxuICAgICAgICAgIC8vIFNjcmVlbiB0b3VjaGVkLCBzdG9yZSB0aGUgb3JpZ2luYWwgY29vcmRpbmF0ZVxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIHRvdWNoU3RhcnQoZSkge1xyXG4gICAgICAgICAgICAgICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTEnLCB0b3VjaFN0YXJ0KTtcclxuICAgICAgICAgICAgICBvcmlnaW5hbENvb3JkLnggPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xyXG4gICAgICAgICAgICAgIG9yaWdpbmFsQ29vcmQueSA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XHJcbiAgICAgICAgICAgICAgZmluYWxDb29yZC54ID0gb3JpZ2luYWxDb29yZC54O1xyXG4gICAgICAgICAgICAgIGZpbmFsQ29vcmQueSA9IG9yaWdpbmFsQ29vcmQueTtcclxuICAgICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZS5vcmlnaW5hbEV2ZW50O1xyXG4gICAgICAgICAgICAgIC8vIFJlYWQgZXZlbnQgZGF0YSBpbnRvIG91ciBzdGFydEV2dDpcclxuICAgICAgICAgICAgICBzdGFydEV2bnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0uc2NyZWVuWCA6IGUuc2NyZWVuWCxcclxuICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0uc2NyZWVuWSA6IGUuc2NyZWVuWVxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldFxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gU3RvcmUgY29vcmRpbmF0ZXMgYXMgZmluZ2VyIGlzIHN3aXBpbmdcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiB0b3VjaE1vdmUoZSkge1xyXG4gICAgICAgICAgICAgICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTInLCB0b3VjaE1vdmUpO1xyXG4gICAgICAgICAgICAgIGZpbmFsQ29vcmQueCA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XHJcbiAgICAgICAgICAgICAgZmluYWxDb29yZC55ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIHN3aXBlZGlyO1xyXG5cclxuICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBlbGVtZW50IHRvIHdoaWNoIHRoZSBldmVudCB3YXMgYm91bmQgY29udGFpbnMgYSBkYXRhLXh0aHJlc2hvbGQgfCBkYXRhLXZ0aHJlc2hvbGQ6XHJcbiAgICAgICAgICAgICAgdmFyIGVsZV94X3RocmVzaG9sZCA9ICgkdGhpcy5wYXJlbnQoKS5kYXRhKCd4dGhyZXNob2xkJykpID8gJHRoaXMucGFyZW50KCkuZGF0YSgneHRocmVzaG9sZCcpIDogJHRoaXMuZGF0YSgneHRocmVzaG9sZCcpLFxyXG4gICAgICAgICAgICAgICAgICBlbGVfeV90aHJlc2hvbGQgPSAoJHRoaXMucGFyZW50KCkuZGF0YSgneXRocmVzaG9sZCcpKSA/ICR0aGlzLnBhcmVudCgpLmRhdGEoJ3l0aHJlc2hvbGQnKSA6ICR0aGlzLmRhdGEoJ3l0aHJlc2hvbGQnKSxcclxuICAgICAgICAgICAgICAgICAgaF90aHJlc2hvbGQgPSAodHlwZW9mIGVsZV94X3RocmVzaG9sZCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWxlX3hfdGhyZXNob2xkICE9PSBmYWxzZSAmJiBwYXJzZUludChlbGVfeF90aHJlc2hvbGQpKSA/IHBhcnNlSW50KGVsZV94X3RocmVzaG9sZCkgOiBzZXR0aW5ncy5zd2lwZV9oX3RocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgICAgdl90aHJlc2hvbGQgPSAodHlwZW9mIGVsZV95X3RocmVzaG9sZCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWxlX3lfdGhyZXNob2xkICE9PSBmYWxzZSAmJiBwYXJzZUludChlbGVfeV90aHJlc2hvbGQpKSA/IHBhcnNlSW50KGVsZV95X3RocmVzaG9sZCkgOiBzZXR0aW5ncy5zd2lwZV92X3RocmVzaG9sZDtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ29vcmQueSA+IGZpbmFsQ29vcmQueSAmJiAob3JpZ2luYWxDb29yZC55IC0gZmluYWxDb29yZC55ID4gdl90aHJlc2hvbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHN3aXBlZGlyID0gJ3N3aXBldXAnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAob3JpZ2luYWxDb29yZC54IDwgZmluYWxDb29yZC54ICYmIChmaW5hbENvb3JkLnggLSBvcmlnaW5hbENvb3JkLnggPiBoX3RocmVzaG9sZCkpIHtcclxuICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGVyaWdodCc7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmIChvcmlnaW5hbENvb3JkLnkgPCBmaW5hbENvb3JkLnkgJiYgKGZpbmFsQ29vcmQueSAtIG9yaWdpbmFsQ29vcmQueSA+IHZfdGhyZXNob2xkKSkge1xyXG4gICAgICAgICAgICAgICAgICBzd2lwZWRpciA9ICdzd2lwZWRvd24nO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAob3JpZ2luYWxDb29yZC54ID4gZmluYWxDb29yZC54ICYmIChvcmlnaW5hbENvb3JkLnggLSBmaW5hbENvb3JkLnggPiBoX3RocmVzaG9sZCkpIHtcclxuICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGVsZWZ0JztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYgKHN3aXBlZGlyICE9IHVuZGVmaW5lZCAmJiBzdGFydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgIG9yaWdpbmFsQ29vcmQueCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIG9yaWdpbmFsQ29vcmQueSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIGZpbmFsQ29vcmQueCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIGZpbmFsQ29vcmQueSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIFJlYWQgZXZlbnQgZGF0YSBpbnRvIG91ciBlbmRFdm50OlxyXG4gICAgICAgICAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZS5vcmlnaW5hbEV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICB2YXIgZW5kRXZudCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnNjcmVlblggOiBlLnNjcmVlblgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5zY3JlZW5ZIDogZS5zY3JlZW5ZXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldFxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBzd2lwZSBhbW91bnQgKG5vcm1hbGl6ZWQpOlxyXG4gICAgICAgICAgICAgICAgICB2YXIgeEFtb3VudCA9IE1hdGguYWJzKHN0YXJ0RXZudC5wb3NpdGlvbi54IC0gZW5kRXZudC5wb3NpdGlvbi54KSxcclxuICAgICAgICAgICAgICAgICAgICAgIHlBbW91bnQgPSBNYXRoLmFicyhzdGFydEV2bnQucG9zaXRpb24ueSAtIGVuZEV2bnQucG9zaXRpb24ueSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICB2YXIgdG91Y2hEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0RXZudCc6IHN0YXJ0RXZudCxcclxuICAgICAgICAgICAgICAgICAgICAgICdlbmRFdm50JzogZW5kRXZudCxcclxuICAgICAgICAgICAgICAgICAgICAgICdkaXJlY3Rpb24nOiBzd2lwZWRpci5yZXBsYWNlKCdzd2lwZScsICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICd4QW1vdW50JzogeEFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICd5QW1vdW50JzogeUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICdkdXJhdGlvbic6IGVuZEV2bnQudGltZSAtIHN0YXJ0RXZudC50aW1lXHJcbiAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgIGhhc1N3aXBlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICR0aGlzLnRyaWdnZXIoJ3N3aXBlJywgdG91Y2hEYXRhKS50cmlnZ2VyKHN3aXBlZGlyLCB0b3VjaERhdGEpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiB0b3VjaEVuZChlKSB7XHJcbiAgICAgICAgICAgICAgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgICAgICAgdmFyIHN3aXBlZGlyID0gXCJcIjtcclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUzJywgdG91Y2hFbmQpO1xyXG4gICAgICAgICAgICAgIGlmIChoYXNTd2lwZWQpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiB0aGUgZWxlbWVudCB0byB3aGljaCB0aGUgZXZlbnQgd2FzIGJvdW5kIGNvbnRhaW5zIGEgZGF0YS14dGhyZXNob2xkIHwgZGF0YS12dGhyZXNob2xkOlxyXG4gICAgICAgICAgICAgICAgICB2YXIgZWxlX3hfdGhyZXNob2xkID0gJHRoaXMuZGF0YSgneHRocmVzaG9sZCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZWxlX3lfdGhyZXNob2xkID0gJHRoaXMuZGF0YSgneXRocmVzaG9sZCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgaF90aHJlc2hvbGQgPSAodHlwZW9mIGVsZV94X3RocmVzaG9sZCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWxlX3hfdGhyZXNob2xkICE9PSBmYWxzZSAmJiBwYXJzZUludChlbGVfeF90aHJlc2hvbGQpKSA/IHBhcnNlSW50KGVsZV94X3RocmVzaG9sZCkgOiBzZXR0aW5ncy5zd2lwZV9oX3RocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgICAgICAgIHZfdGhyZXNob2xkID0gKHR5cGVvZiBlbGVfeV90aHJlc2hvbGQgIT09ICd1bmRlZmluZWQnICYmIGVsZV95X3RocmVzaG9sZCAhPT0gZmFsc2UgJiYgcGFyc2VJbnQoZWxlX3lfdGhyZXNob2xkKSkgPyBwYXJzZUludChlbGVfeV90aHJlc2hvbGQpIDogc2V0dGluZ3Muc3dpcGVfdl90aHJlc2hvbGQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZS5vcmlnaW5hbEV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICB2YXIgZW5kRXZudCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5zY3JlZW5YIDogZS5zY3JlZW5YLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnNjcmVlblkgOiBlLnNjcmVlbllcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBSZWFkIGV2ZW50IGRhdGEgaW50byBvdXIgZW5kRXZudDpcclxuICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0RXZudC5wb3NpdGlvbi55ID4gZW5kRXZudC5wb3NpdGlvbi55ICYmIChzdGFydEV2bnQucG9zaXRpb24ueSAtIGVuZEV2bnQucG9zaXRpb24ueSA+IHZfdGhyZXNob2xkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGV1cCc7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0RXZudC5wb3NpdGlvbi54IDwgZW5kRXZudC5wb3NpdGlvbi54ICYmIChlbmRFdm50LnBvc2l0aW9uLnggLSBzdGFydEV2bnQucG9zaXRpb24ueCA+IGhfdGhyZXNob2xkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGVyaWdodCc7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0RXZudC5wb3NpdGlvbi55IDwgZW5kRXZudC5wb3NpdGlvbi55ICYmIChlbmRFdm50LnBvc2l0aW9uLnkgLSBzdGFydEV2bnQucG9zaXRpb24ueSA+IHZfdGhyZXNob2xkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGVkb3duJztcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBpZiAoc3RhcnRFdm50LnBvc2l0aW9uLnggPiBlbmRFdm50LnBvc2l0aW9uLnggJiYgKHN0YXJ0RXZudC5wb3NpdGlvbi54IC0gZW5kRXZudC5wb3NpdGlvbi54ID4gaF90aHJlc2hvbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzd2lwZWRpciA9ICdzd2lwZWxlZnQnO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHN3aXBlIGFtb3VudCAobm9ybWFsaXplZCk6XHJcbiAgICAgICAgICAgICAgICAgIHZhciB4QW1vdW50ID0gTWF0aC5hYnMoc3RhcnRFdm50LnBvc2l0aW9uLnggLSBlbmRFdm50LnBvc2l0aW9uLngpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgeUFtb3VudCA9IE1hdGguYWJzKHN0YXJ0RXZudC5wb3NpdGlvbi55IC0gZW5kRXZudC5wb3NpdGlvbi55KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHZhciB0b3VjaERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAnc3RhcnRFdm50Jzogc3RhcnRFdm50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ2VuZEV2bnQnOiBlbmRFdm50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ2RpcmVjdGlvbic6IHN3aXBlZGlyLnJlcGxhY2UoJ3N3aXBlJywgJycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3hBbW91bnQnOiB4QW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ3lBbW91bnQnOiB5QW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ2R1cmF0aW9uJzogZW5kRXZudC50aW1lIC0gc3RhcnRFdm50LnRpbWVcclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcignc3dpcGVlbmQnLCB0b3VjaERhdGEpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGhhc1N3aXBlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLnN0YXJ0ZXZlbnQsIHRvdWNoU3RhcnQpO1xyXG4gICAgICAgICAgJHRoaXMub24oc2V0dGluZ3MubW92ZWV2ZW50LCB0b3VjaE1vdmUpO1xyXG4gICAgICAgICAgJHRoaXMub24oc2V0dGluZ3MuZW5kZXZlbnQsIHRvdWNoRW5kKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5tb3ZlZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUyKS5vZmYoc2V0dGluZ3MuZW5kZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUzKTtcclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIHNjcm9sbHN0YXJ0IEV2ZW50IChhbHNvIGhhbmRsZXMgc2Nyb2xsZW5kKTpcclxuICAkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQgPSB7XHJcbiAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgdGhpc09iamVjdCA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpLFxyXG4gICAgICAgICAgICAgIHNjcm9sbGluZyxcclxuICAgICAgICAgICAgICB0aW1lcjtcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiB0cmlnZ2VyKGV2ZW50LCBzdGF0ZSkge1xyXG4gICAgICAgICAgICAgIHNjcm9sbGluZyA9IHN0YXRlO1xyXG4gICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCBzY3JvbGxpbmcgPyAnc2Nyb2xsc3RhcnQnIDogJ3Njcm9sbGVuZCcsIGV2ZW50KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBpUGhvbmUgdHJpZ2dlcnMgc2Nyb2xsIGFmdGVyIGEgc21hbGwgZGVsYXk7IHVzZSB0b3VjaG1vdmUgaW5zdGVhZFxyXG4gICAgICAgICAgJHRoaXMub24oc2V0dGluZ3Muc2Nyb2xsZXZlbnQsIGZ1bmN0aW9uIHNjcm9sbEZ1bmMoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUnLCBzY3JvbGxGdW5jKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKCFzY3JvbGxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgdHJpZ2dlcihldmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRyaWdnZXIoZXZlbnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc2Nyb2xsZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gVGhpcyBpcyB0aGUgb3JpZW50YXRpb24gY2hhbmdlIChsYXJnZWx5IGJvcnJvd2VkIGZyb20galF1ZXJ5IE1vYmlsZSk6XHJcbiAgdmFyIHdpbiA9ICQod2luZG93KSxcclxuICAgICAgc3BlY2lhbF9ldmVudCxcclxuICAgICAgZ2V0X29yaWVudGF0aW9uLFxyXG4gICAgICBsYXN0X29yaWVudGF0aW9uLFxyXG4gICAgICBpbml0aWFsX29yaWVudGF0aW9uX2lzX2xhbmRzY2FwZSxcclxuICAgICAgaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0LFxyXG4gICAgICBwb3J0cmFpdF9tYXAgPSB7XHJcbiAgICAgICAgICAnMCc6IHRydWUsXHJcbiAgICAgICAgICAnMTgwJzogdHJ1ZVxyXG4gICAgICB9O1xyXG5cclxuICBpZiAoc2V0dGluZ3Mub3JpZW50YXRpb25fc3VwcG9ydCkge1xyXG4gICAgICB2YXIgd3cgPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCB3aW4ud2lkdGgoKSxcclxuICAgICAgICAgIHdoID0gd2luZG93LmlubmVySGVpZ2h0IHx8IHdpbi5oZWlnaHQoKSxcclxuICAgICAgICAgIGxhbmRzY2FwZV90aHJlc2hvbGQgPSA1MDtcclxuXHJcbiAgICAgIGluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlID0gd3cgPiB3aCAmJiAod3cgLSB3aCkgPiBsYW5kc2NhcGVfdGhyZXNob2xkO1xyXG4gICAgICBpbml0aWFsX29yaWVudGF0aW9uX2lzX2RlZmF1bHQgPSBwb3J0cmFpdF9tYXBbd2luZG93Lm9yaWVudGF0aW9uXTtcclxuXHJcbiAgICAgIGlmICgoaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUgJiYgaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0KSB8fCAoIWluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlICYmICFpbml0aWFsX29yaWVudGF0aW9uX2lzX2RlZmF1bHQpKSB7XHJcbiAgICAgICAgICBwb3J0cmFpdF9tYXAgPSB7XHJcbiAgICAgICAgICAgICAgJy05MCc6IHRydWUsXHJcbiAgICAgICAgICAgICAgJzkwJzogdHJ1ZVxyXG4gICAgICAgICAgfTtcclxuICAgICAgfVxyXG4gIH1cclxuXHJcbiAgJC5ldmVudC5zcGVjaWFsLm9yaWVudGF0aW9uY2hhbmdlID0gc3BlY2lhbF9ldmVudCA9IHtcclxuICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIC8vIElmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQgbmF0aXZlbHksIHJldHVybiBmYWxzZSBzbyB0aGF0IGpRdWVyeVxyXG4gICAgICAgICAgLy8gd2lsbCBvbiB0byB0aGUgZXZlbnQgdXNpbmcgRE9NIG1ldGhvZHMuXHJcbiAgICAgICAgICBpZiAoc2V0dGluZ3Mub3JpZW50YXRpb25fc3VwcG9ydCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24gdG8gYXZvaWQgaW5pdGlhbCBkb3VibGUtdHJpZ2dlcmluZy5cclxuICAgICAgICAgIGxhc3Rfb3JpZW50YXRpb24gPSBnZXRfb3JpZW50YXRpb24oKTtcclxuXHJcbiAgICAgICAgICB3aW4ub24oJ3Rocm90dGxlZHJlc2l6ZScsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRlYXJkb3duOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBpZiAoc2V0dGluZ3Mub3JpZW50YXRpb25fc3VwcG9ydCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB3aW4ub2ZmKCd0aHJvdHRsZWRyZXNpemUnLCBoYW5kbGVyKTtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9LFxyXG4gICAgICBhZGQ6IGZ1bmN0aW9uIChoYW5kbGVPYmopIHtcclxuICAgICAgICAgIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGJvdW5kIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgICAgICB2YXIgb2xkX2hhbmRsZXIgPSBoYW5kbGVPYmouaGFuZGxlcjtcclxuXHJcbiAgICAgICAgICBoYW5kbGVPYmouaGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgIGV2ZW50Lm9yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZF9oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gSWYgdGhlIGV2ZW50IGlzIG5vdCBzdXBwb3J0ZWQgbmF0aXZlbHksIHRoaXMgaGFuZGxlciB3aWxsIGJlIGJvdW5kIHRvXHJcbiAgLy8gdGhlIHdpbmRvdyByZXNpemUgZXZlbnQgdG8gc2ltdWxhdGUgdGhlIG9yaWVudGF0aW9uY2hhbmdlIGV2ZW50LlxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVyKCkge1xyXG4gICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24uXHJcbiAgICAgIHZhciBvcmllbnRhdGlvbiA9IGdldF9vcmllbnRhdGlvbigpO1xyXG5cclxuICAgICAgaWYgKG9yaWVudGF0aW9uICE9PSBsYXN0X29yaWVudGF0aW9uKSB7XHJcbiAgICAgICAgICAvLyBUaGUgb3JpZW50YXRpb24gaGFzIGNoYW5nZWQsIHNvIHRyaWdnZXIgdGhlIG9yaWVudGF0aW9uY2hhbmdlIGV2ZW50LlxyXG4gICAgICAgICAgbGFzdF9vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xyXG4gICAgICAgICAgd2luLnRyaWdnZXIoXCJvcmllbnRhdGlvbmNoYW5nZVwiKTtcclxuICAgICAgfVxyXG4gIH1cclxuXHJcbiAgJC5ldmVudC5zcGVjaWFsLm9yaWVudGF0aW9uY2hhbmdlLm9yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgaXNQb3J0cmFpdCA9IHRydWUsXHJcbiAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuICAgICAgaWYgKHNldHRpbmdzLm9yaWVudGF0aW9uX3N1cHBvcnQpIHtcclxuICAgICAgICAgIGlzUG9ydHJhaXQgPSBwb3J0cmFpdF9tYXBbd2luZG93Lm9yaWVudGF0aW9uXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlzUG9ydHJhaXQgPSBlbGVtICYmIGVsZW0uY2xpZW50V2lkdGggLyBlbGVtLmNsaWVudEhlaWdodCA8IDEuMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGlzUG9ydHJhaXQgPyAncG9ydHJhaXQnIDogJ2xhbmRzY2FwZSc7XHJcbiAgfTtcclxuXHJcbiAgLy8gdGhyb3R0bGUgSGFuZGxlcjpcclxuICAkLmV2ZW50LnNwZWNpYWwudGhyb3R0bGVkcmVzaXplID0ge1xyXG4gICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJCh0aGlzKS5vbigncmVzaXplJywgdGhyb3R0bGVfaGFuZGxlcik7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRlYXJkb3duOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkKHRoaXMpLm9mZigncmVzaXplJywgdGhyb3R0bGVfaGFuZGxlcik7XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgdGhyb3R0bGUgPSAyNTAsXHJcbiAgICAgIHRocm90dGxlX2hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBjdXJyID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgIGRpZmYgPSBjdXJyIC0gbGFzdENhbGw7XHJcblxyXG4gICAgICAgICAgaWYgKGRpZmYgPj0gdGhyb3R0bGUpIHtcclxuICAgICAgICAgICAgICBsYXN0Q2FsbCA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCd0aHJvdHRsZWRyZXNpemUnKTtcclxuXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGlmIChoZWxkQ2FsbCkge1xyXG4gICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhlbGRDYWxsKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIC8vIFByb21pc2UgYSBoZWxkIGNhbGwgd2lsbCBzdGlsbCBleGVjdXRlXHJcbiAgICAgICAgICAgICAgaGVsZENhbGwgPSB3aW5kb3cuc2V0VGltZW91dChoYW5kbGVyLCB0aHJvdHRsZSAtIGRpZmYpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBsYXN0Q2FsbCA9IDAsXHJcbiAgICAgIGhlbGRDYWxsLFxyXG4gICAgICBjdXJyLFxyXG4gICAgICBkaWZmO1xyXG5cclxuICAvLyBUcmlnZ2VyIGEgY3VzdG9tIGV2ZW50OlxyXG5cclxuICBmdW5jdGlvbiB0cmlnZ2VyQ3VzdG9tRXZlbnQob2JqLCBldmVudFR5cGUsIGV2ZW50LCB0b3VjaERhdGEpIHtcclxuICAgICAgdmFyIG9yaWdpbmFsVHlwZSA9IGV2ZW50LnR5cGU7XHJcbiAgICAgIGV2ZW50LnR5cGUgPSBldmVudFR5cGU7XHJcblxyXG4gICAgICAkLmV2ZW50LmRpc3BhdGNoLmNhbGwob2JqLCBldmVudCwgdG91Y2hEYXRhKTtcclxuICAgICAgZXZlbnQudHlwZSA9IG9yaWdpbmFsVHlwZTtcclxuICB9XHJcblxyXG4gIC8vIENvcnJlY3RseSBvbiBhbnl0aGluZyB3ZSd2ZSBvdmVybG9hZGVkOlxyXG4gICQuZWFjaCh7XHJcbiAgICAgIHNjcm9sbGVuZDogJ3Njcm9sbHN0YXJ0JyxcclxuICAgICAgc3dpcGV1cDogJ3N3aXBlJyxcclxuICAgICAgc3dpcGVyaWdodDogJ3N3aXBlJyxcclxuICAgICAgc3dpcGVkb3duOiAnc3dpcGUnLFxyXG4gICAgICBzd2lwZWxlZnQ6ICdzd2lwZScsXHJcbiAgICAgIHN3aXBlZW5kOiAnc3dpcGUnLFxyXG4gICAgICB0YXAyOiAndGFwJ1xyXG4gIH0sIGZ1bmN0aW9uIChlLCBzcmNFKSB7XHJcbiAgICAgICQuZXZlbnQuc3BlY2lhbFtlXSA9IHtcclxuICAgICAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgJCh0aGlzKS5vbihzcmNFLCAkLm5vb3ApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm47XHJcblxyXG59O1xyXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNhcm91c2VsLmpzIHYzLjQuMVxuICogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvMy40L2phdmFzY3JpcHQvI2Nhcm91c2VsXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTkgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ0FST1VTRUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuJGluZGljYXRvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5jYXJvdXNlbC1pbmRpY2F0b3JzJylcbiAgICB0aGlzLm9wdGlvbnMgICAgID0gb3B0aW9uc1xuICAgIHRoaXMucGF1c2VkICAgICAgPSBudWxsXG4gICAgdGhpcy5zbGlkaW5nICAgICA9IG51bGxcbiAgICB0aGlzLmludGVydmFsICAgID0gbnVsbFxuICAgIHRoaXMuJGFjdGl2ZSAgICAgPSBudWxsXG4gICAgdGhpcy4kaXRlbXMgICAgICA9IG51bGxcblxuICAgIHRoaXMub3B0aW9ucy5rZXlib2FyZCAmJiB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpKVxuXG4gICAgdGhpcy5vcHRpb25zLnBhdXNlID09ICdob3ZlcicgJiYgISgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpICYmIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5wYXVzZSwgdGhpcykpXG4gICAgICAub24oJ21vdXNlbGVhdmUuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMuY3ljbGUsIHRoaXMpKVxuICB9XG5cbiAgQ2Fyb3VzZWwuVkVSU0lPTiAgPSAnMy40LjEnXG5cbiAgQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMFxuXG4gIENhcm91c2VsLkRFRkFVTFRTID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIHBhdXNlOiAnaG92ZXInLFxuICAgIHdyYXA6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWVcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG4gICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICBjYXNlIDM3OiB0aGlzLnByZXYoKTsgYnJlYWtcbiAgICAgIGNhc2UgMzk6IHRoaXMubmV4dCgpOyBicmVha1xuICAgICAgZGVmYXVsdDogcmV0dXJuXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gZmFsc2UpXG5cbiAgICB0aGlzLmludGVydmFsICYmIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHRoaXMub3B0aW9ucy5pbnRlcnZhbFxuICAgICAgJiYgIXRoaXMucGF1c2VkXG4gICAgICAmJiAodGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCQucHJveHkodGhpcy5uZXh0LCB0aGlzKSwgdGhpcy5vcHRpb25zLmludGVydmFsKSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLiRpdGVtcyA9IGl0ZW0ucGFyZW50KCkuY2hpbGRyZW4oJy5pdGVtJylcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuaW5kZXgoaXRlbSB8fCB0aGlzLiRhY3RpdmUpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUZvckRpcmVjdGlvbiA9IGZ1bmN0aW9uIChkaXJlY3Rpb24sIGFjdGl2ZSkge1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGFjdGl2ZSlcbiAgICB2YXIgd2lsbFdyYXAgPSAoZGlyZWN0aW9uID09ICdwcmV2JyAmJiBhY3RpdmVJbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICB8fCAoZGlyZWN0aW9uID09ICduZXh0JyAmJiBhY3RpdmVJbmRleCA9PSAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkpXG4gICAgaWYgKHdpbGxXcmFwICYmICF0aGlzLm9wdGlvbnMud3JhcCkgcmV0dXJuIGFjdGl2ZVxuICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PSAncHJldicgPyAtMSA6IDFcbiAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy4kaXRlbXMubGVuZ3RoXG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVxKGl0ZW1JbmRleClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzXG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgodGhpcy4kYWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKSlcblxuICAgIGlmIChwb3MgPiAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkgfHwgcG9zIDwgMCkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5zbGlkaW5nKSAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC5vbmUoJ3NsaWQuYnMuY2Fyb3VzZWwnLCBmdW5jdGlvbiAoKSB7IHRoYXQudG8ocG9zKSB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpcy5zbGlkZShwb3MgPiBhY3RpdmVJbmRleCA/ICduZXh0JyA6ICdwcmV2JywgdGhpcy4kaXRlbXMuZXEocG9zKSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKVxuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuZmluZCgnLm5leHQsIC5wcmV2JykubGVuZ3RoICYmICQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKVxuICAgICAgdGhpcy5jeWNsZSh0cnVlKVxuICAgIH1cblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ25leHQnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ3ByZXYnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnNsaWRlID0gZnVuY3Rpb24gKHR5cGUsIG5leHQpIHtcbiAgICB2YXIgJGFjdGl2ZSAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKVxuICAgIHZhciAkbmV4dCAgICAgPSBuZXh0IHx8IHRoaXMuZ2V0SXRlbUZvckRpcmVjdGlvbih0eXBlLCAkYWN0aXZlKVxuICAgIHZhciBpc0N5Y2xpbmcgPSB0aGlzLmludGVydmFsXG4gICAgdmFyIGRpcmVjdGlvbiA9IHR5cGUgPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0J1xuICAgIHZhciB0aGF0ICAgICAgPSB0aGlzXG5cbiAgICBpZiAoJG5leHQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm4gKHRoaXMuc2xpZGluZyA9IGZhbHNlKVxuXG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSAkbmV4dFswXVxuICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudCgnc2xpZGUuYnMuY2Fyb3VzZWwnLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICB9KVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkZUV2ZW50KVxuICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuc2xpZGluZyA9IHRydWVcblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLnBhdXNlKClcblxuICAgIGlmICh0aGlzLiRpbmRpY2F0b3JzLmxlbmd0aCkge1xuICAgICAgdGhpcy4kaW5kaWNhdG9ycy5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKVxuICAgICAgJG5leHRJbmRpY2F0b3IgJiYgJG5leHRJbmRpY2F0b3IuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuXG4gICAgdmFyIHNsaWRFdmVudCA9ICQuRXZlbnQoJ3NsaWQuYnMuY2Fyb3VzZWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsIGRpcmVjdGlvbjogZGlyZWN0aW9uIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xpZGUnKSkge1xuICAgICAgJG5leHQuYWRkQ2xhc3ModHlwZSlcbiAgICAgIGlmICh0eXBlb2YgJG5leHQgPT09ICdvYmplY3QnICYmICRuZXh0Lmxlbmd0aCkge1xuICAgICAgICAkbmV4dFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgIH1cbiAgICAgICRhY3RpdmUuYWRkQ2xhc3MoZGlyZWN0aW9uKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoZGlyZWN0aW9uKVxuICAgICAgJGFjdGl2ZVxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJG5leHQucmVtb3ZlQ2xhc3MoW3R5cGUsIGRpcmVjdGlvbl0uam9pbignICcpKS5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKFsnYWN0aXZlJywgZGlyZWN0aW9uXS5qb2luKCcgJykpXG4gICAgICAgICAgdGhhdC5zbGlkaW5nID0gZmFsc2VcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgICAgICAgfSwgMClcbiAgICAgICAgfSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENhcm91c2VsLlRSQU5TSVRJT05fRFVSQVRJT04pXG4gICAgfSBlbHNlIHtcbiAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAkbmV4dC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgIHRoaXMuc2xpZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxuICAgIH1cblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLmN5Y2xlKClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENBUk9VU0VMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJylcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIENhcm91c2VsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxuICAgICAgdmFyIGFjdGlvbiAgPSB0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnID8gb3B0aW9uIDogb3B0aW9ucy5zbGlkZVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJywgKGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ251bWJlcicpIGRhdGEudG8ob3B0aW9uKVxuICAgICAgZWxzZSBpZiAoYWN0aW9uKSBkYXRhW2FjdGlvbl0oKVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5pbnRlcnZhbCkgZGF0YS5wYXVzZSgpLmN5Y2xlKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY2Fyb3VzZWxcblxuICAkLmZuLmNhcm91c2VsICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY2Fyb3VzZWwuQ29uc3RydWN0b3IgPSBDYXJvdXNlbFxuXG5cbiAgLy8gQ0FST1VTRUwgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNhcm91c2VsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jYXJvdXNlbCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENBUk9VU0VMIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICBpZiAoaHJlZikge1xuICAgICAgaHJlZiA9IGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ICA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgaHJlZlxuICAgIHZhciAkdGFyZ2V0ID0gJChkb2N1bWVudCkuZmluZCh0YXJnZXQpXG5cbiAgICBpZiAoISR0YXJnZXQuaGFzQ2xhc3MoJ2Nhcm91c2VsJykpIHJldHVyblxuXG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcbiAgICB2YXIgc2xpZGVJbmRleCA9ICR0aGlzLmF0dHIoJ2RhdGEtc2xpZGUtdG8nKVxuICAgIGlmIChzbGlkZUluZGV4KSBvcHRpb25zLmludGVydmFsID0gZmFsc2VcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbnMpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgJHRhcmdldC5kYXRhKCdicy5jYXJvdXNlbCcpLnRvKHNsaWRlSW5kZXgpXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGVdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGUtdG9dJywgY2xpY2tIYW5kbGVyKVxuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkY2Fyb3VzZWwgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgJChmdW5jdGlvbiAoKSB7XG4gICAgXHQkKCcucG9wdXAtanMnKS5tYWduaWZpY1BvcHVwKHtcbiAgICBcdFx0Zml4ZWRDb250ZW50UG9zOiB0cnVlLFxuICAgIFx0fSk7XG4gICAgfSk7XG5cbiAgICAkKCcucG9wdXAtanMnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3B1cCA9ICQodGhpcykuYXR0cignaHJlZicpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJChwb3B1cCkuZmluZChcIi5pbnB1dC1mb3JtXCIpWzBdLmZvY3VzKCk7XG4gICAgICAgIH0sIDMwMClcbiAgICB9KTtcblxuICAgICQoJy5hcHBvaW50bWVudC1idG4tanMnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gJCh0aGlzKS5hdHRyKCdkYXRhLXN1YnRpdGxlJyk7XG4gICAgICAgICQoJyNhcHBvaW50bWVudCcpLmZpbmQoJy5wb3B1cC1zdWItbmFtZScpLnRleHQodGV4dCk7XG4gICAgICAgICQoJyNhcHBvaW50bWVudCcpLmZpbmQoJ2lucHV0W25hbWU9YXBwb2ludG1lbnRdJykudmFsKHRleHQpO1xuICAgIH0pO1xuXG4gICAgJChkb2N1bWVudCkub24oJ2NoYW5nZScsICcuc2VsZWN0LWFwcG9pbnRtZW50LXNwZWNpYWxpc3QnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBzZWxlY3RBcHBvaW50bWVudFNwZWNpYWxpc3QgPSAkKFwiLnNlbGVjdC1hcHBvaW50bWVudC1zcGVjaWFsaXN0IG9wdGlvbjpzZWxlY3RlZFwiKS50ZXh0KCk7XG4gICAgICAgICQoJyNhcHBvaW50bWVudCcpLmZpbmQoJ2lucHV0W25hbWU9c3BlY2lhbGlzdF0nKS52YWwoc2VsZWN0QXBwb2ludG1lbnRTcGVjaWFsaXN0KTtcbiAgICB9KTtcblxuICAgICQoJy5zcGVjaWFsaXN0LWJ0bi1qcycpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRleHQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc3VidGl0bGUnKTtcbiAgICAgICAgJCgnI3NwZWNpYWxpc3QnKS5maW5kKCcucG9wdXAtc3ViLW5hbWUnKS50ZXh0KHRleHQpO1xuICAgICAgICAkKCcjc3BlY2lhbGlzdCcpLmZpbmQoJ2lucHV0W25hbWU9YXBwb2ludG1lbnRdJykudmFsKHRleHQpO1xuICAgIH0pO1xuXG4gICAgJCgnLnF1ZXN0aW9uLWJ0bi1qcycpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRleHQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc3VidGl0bGUnKTtcbiAgICAgICAgJCgnI3F1ZXN0aW9uJykuZmluZCgnLnBvcHVwLXN1Yi1uYW1lJykudGV4dCh0ZXh0KTtcbiAgICAgICAgJCgnI3F1ZXN0aW9uJykuZmluZCgnaW5wdXRbbmFtZT1hcHBvaW50bWVudF0nKS52YWwodGV4dCk7XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJy5zZWxlY3QtcXVlc3Rpb24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBzZWxlY3RRdWVzdGlvblRleHQgPSAkKFwiLnNlbGVjdC1xdWVzdGlvbiBvcHRpb246c2VsZWN0ZWRcIikudGV4dCgpO1xuICAgICAgICAkKCcjcXVlc3Rpb24nKS5maW5kKCdpbnB1dFtuYW1lPWFwcG9pbnRtZW50XScpLnZhbChzZWxlY3RRdWVzdGlvblRleHQpO1xuICAgIH0pO1xuXG59KVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAkKFwiLnJldmlld3Mtc2xpZGVyXCIpLnNsaWNrKHtcbiAgICAgICAgLy8gZG90czogdHJ1ZSxcbiAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgZmFkZTogdHJ1ZSxcbiAgICAgICAgYXNOYXZGb3I6ICQoXCIuY291bnRlci1zbGlkZXJcIiksXG4gICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgIHtcbiAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNSxcbiAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiB0cnVlLFxuICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgXVxuICAgIH0pO1xuXG4gICAgJChcIi5jb3VudGVyLXNsaWRlclwiKS5zbGljayh7XG4gICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgIGZhZGU6IHRydWUsXG4gICAgICAgIGFzTmF2Rm9yOiAkKFwiLnJldmlld3Mtc2xpZGVyXCIpLFxuICAgIH0pO1xuXG59KTtcblxuXG4kKHdpbmRvdykub24oJ2xvYWQgcmVzaXplJywgZnVuY3Rpb24gKCkge1xuICAgIGlmKCQoJy5zcGVjaWFsLWFjdGlvbnMtd3JhcC5zbGlkZXInKS5sZW5ndGgpIHtcbiAgICAgICAgJCgnLnNwZWNpYWwtYWN0aW9ucy13cmFwLnNsaWRlcicpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCA3NjcpIHtcbiAgICAgICAgICAgICAgICBpZiAoISQodGhpcykuaGFzQ2xhc3MoJ3NsaWNrLXNsaWRlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuc2xpY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNDAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdzbGljay1zbGlkZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNsaWNrKCdkZXN0cm95Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuXG4gICAgaWYoJCgnLm1vYmlsZS1zbGlkZXItanMnKS5sZW5ndGgpIHtcbiAgICAgICAgJCgnLm1vYmlsZS1zbGlkZXItanMnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgNDAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKCdzbGljay1zbGlkZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNsaWNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2QXJyb3c6ICc8ZGl2IGNsYXNzPVwibW9iaWxlLXNsaWRlci1hcnJvdyBwcmV2XCI+PC9kaXY+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJzxkaXYgY2xhc3M9XCJtb2JpbGUtc2xpZGVyLWFycm93IG5leHRcIj48L2Rpdj4nLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdzbGljay1zbGlkZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNsaWNrKCdkZXN0cm95Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGlmKCQoJy5tb2JpbGUtZGlwbG9tLXNsaWRlci1qcycpLmxlbmd0aCkge1xuICAgICAgICAkKCcubW9iaWxlLWRpcGxvbS1zbGlkZXItanMnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgMTAyNSkge1xuICAgICAgICAgICAgICAgICQoJy5nYWxsZXJ5LWl0ZW0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnaGlkZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICghJCh0aGlzKS5oYXNDbGFzcygnc2xpY2stc2xpZGVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5zbGljayh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGRpdiBjbGFzcz1cIm1vYmlsZS1zbGlkZXItYXJyb3cgcHJldlwiPjwvZGl2PicsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0QXJyb3c6ICc8ZGl2IGNsYXNzPVwibW9iaWxlLXNsaWRlci1hcnJvdyBuZXh0XCI+PC9kaXY+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDc2OSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDQwMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJy5nYWxsZXJ5LWl0ZW0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISQodGhpcykuaGFzQ2xhc3MoJ3Zpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2xpY2stc2xpZGVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5zbGljaygnZGVzdHJveScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG59KTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZIHx8IHN0aWNreUhlbHBlcnMuQlJPS0VOX0NBUkVUO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gcmVnZXhwRmxhZ3MuY2FsbChyZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IGZsYWdzLnJlcGxhY2UoJ3knLCAnJyk7XG4gICAgICBpZiAoZmxhZ3MuaW5kZXhPZignZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBTdHJpbmcoc3RyKS5zbGljZShyZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgc3RyW3JlLmxhc3RJbmRleCAtIDFdICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwoc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gbWF0Y2guaW5wdXQuc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL2ZhaWxzJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yLFxuLy8gc28gd2UgdXNlIGFuIGludGVybWVkaWF0ZSBmdW5jdGlvbi5cbmZ1bmN0aW9uIFJFKHMsIGYpIHtcbiAgcmV0dXJuIFJlZ0V4cChzLCBmKTtcbn1cblxuZXhwb3J0cy5VTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxuICB2YXIgcmUgPSBSRSgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG5leHBvcnRzLkJST0tFTl9DQVJFVCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9IFJFKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuIiwiLyohIE1hZ25pZmljIFBvcHVwIC0gdjEuMS4wIC0gMjAxNi0wMi0yMFxuKiBodHRwOi8vZGltc2VtZW5vdi5jb20vcGx1Z2lucy9tYWduaWZpYy1wb3B1cC9cbiogQ29weXJpZ2h0IChjKSAyMDE2IERtaXRyeSBTZW1lbm92OyAqL1xuIWZ1bmN0aW9uKGEpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wianF1ZXJ5XCJdLGEpOmEoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/cmVxdWlyZShcImpxdWVyeVwiKTp3aW5kb3cualF1ZXJ5fHx3aW5kb3cuWmVwdG8pfShmdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaD1cIkNsb3NlXCIsaT1cIkJlZm9yZUNsb3NlXCIsaj1cIkFmdGVyQ2xvc2VcIixrPVwiQmVmb3JlQXBwZW5kXCIsbD1cIk1hcmt1cFBhcnNlXCIsbT1cIk9wZW5cIixuPVwiQ2hhbmdlXCIsbz1cIm1mcFwiLHA9XCIuXCIrbyxxPVwibWZwLXJlYWR5XCIscj1cIm1mcC1yZW1vdmluZ1wiLHM9XCJtZnAtcHJldmVudC1jbG9zZVwiLHQ9ZnVuY3Rpb24oKXt9LHU9ISF3aW5kb3cualF1ZXJ5LHY9YSh3aW5kb3cpLHc9ZnVuY3Rpb24oYSxjKXtiLmV2Lm9uKG8rYStwLGMpfSx4PWZ1bmN0aW9uKGIsYyxkLGUpe3ZhciBmPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIGYuY2xhc3NOYW1lPVwibWZwLVwiK2IsZCYmKGYuaW5uZXJIVE1MPWQpLGU/YyYmYy5hcHBlbmRDaGlsZChmKTooZj1hKGYpLGMmJmYuYXBwZW5kVG8oYykpLGZ9LHk9ZnVuY3Rpb24oYyxkKXtiLmV2LnRyaWdnZXJIYW5kbGVyKG8rYyxkKSxiLnN0LmNhbGxiYWNrcyYmKGM9Yy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKStjLnNsaWNlKDEpLGIuc3QuY2FsbGJhY2tzW2NdJiZiLnN0LmNhbGxiYWNrc1tjXS5hcHBseShiLGEuaXNBcnJheShkKT9kOltkXSkpfSx6PWZ1bmN0aW9uKGMpe3JldHVybiBjPT09ZyYmYi5jdXJyVGVtcGxhdGUuY2xvc2VCdG58fChiLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bj1hKGIuc3QuY2xvc2VNYXJrdXAucmVwbGFjZShcIiV0aXRsZSVcIixiLnN0LnRDbG9zZSkpLGc9YyksYi5jdXJyVGVtcGxhdGUuY2xvc2VCdG59LEE9ZnVuY3Rpb24oKXthLm1hZ25pZmljUG9wdXAuaW5zdGFuY2V8fChiPW5ldyB0LGIuaW5pdCgpLGEubWFnbmlmaWNQb3B1cC5pbnN0YW5jZT1iKX0sQj1mdW5jdGlvbigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpLnN0eWxlLGI9W1wibXNcIixcIk9cIixcIk1velwiLFwiV2Via2l0XCJdO2lmKHZvaWQgMCE9PWEudHJhbnNpdGlvbilyZXR1cm4hMDtmb3IoO2IubGVuZ3RoOylpZihiLnBvcCgpK1wiVHJhbnNpdGlvblwiaW4gYSlyZXR1cm4hMDtyZXR1cm4hMX07dC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnQsaW5pdDpmdW5jdGlvbigpe3ZhciBjPW5hdmlnYXRvci5hcHBWZXJzaW9uO2IuaXNMb3dJRT1iLmlzSUU4PWRvY3VtZW50LmFsbCYmIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIsYi5pc0FuZHJvaWQ9L2FuZHJvaWQvZ2kudGVzdChjKSxiLmlzSU9TPS9pcGhvbmV8aXBhZHxpcG9kL2dpLnRlc3QoYyksYi5zdXBwb3J0c1RyYW5zaXRpb249QigpLGIucHJvYmFibHlNb2JpbGU9Yi5pc0FuZHJvaWR8fGIuaXNJT1N8fC8oT3BlcmEgTWluaSl8S2luZGxlfHdlYk9TfEJsYWNrQmVycnl8KE9wZXJhIE1vYmkpfChXaW5kb3dzIFBob25lKXxJRU1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZD1hKGRvY3VtZW50KSxiLnBvcHVwc0NhY2hlPXt9fSxvcGVuOmZ1bmN0aW9uKGMpe3ZhciBlO2lmKGMuaXNPYmo9PT0hMSl7Yi5pdGVtcz1jLml0ZW1zLnRvQXJyYXkoKSxiLmluZGV4PTA7dmFyIGcsaD1jLml0ZW1zO2ZvcihlPTA7ZTxoLmxlbmd0aDtlKyspaWYoZz1oW2VdLGcucGFyc2VkJiYoZz1nLmVsWzBdKSxnPT09Yy5lbFswXSl7Yi5pbmRleD1lO2JyZWFrfX1lbHNlIGIuaXRlbXM9YS5pc0FycmF5KGMuaXRlbXMpP2MuaXRlbXM6W2MuaXRlbXNdLGIuaW5kZXg9Yy5pbmRleHx8MDtpZihiLmlzT3BlbilyZXR1cm4gdm9pZCBiLnVwZGF0ZUl0ZW1IVE1MKCk7Yi50eXBlcz1bXSxmPVwiXCIsYy5tYWluRWwmJmMubWFpbkVsLmxlbmd0aD9iLmV2PWMubWFpbkVsLmVxKDApOmIuZXY9ZCxjLmtleT8oYi5wb3B1cHNDYWNoZVtjLmtleV18fChiLnBvcHVwc0NhY2hlW2Mua2V5XT17fSksYi5jdXJyVGVtcGxhdGU9Yi5wb3B1cHNDYWNoZVtjLmtleV0pOmIuY3VyclRlbXBsYXRlPXt9LGIuc3Q9YS5leHRlbmQoITAse30sYS5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLGMpLGIuZml4ZWRDb250ZW50UG9zPVwiYXV0b1wiPT09Yi5zdC5maXhlZENvbnRlbnRQb3M/IWIucHJvYmFibHlNb2JpbGU6Yi5zdC5maXhlZENvbnRlbnRQb3MsYi5zdC5tb2RhbCYmKGIuc3QuY2xvc2VPbkNvbnRlbnRDbGljaz0hMSxiLnN0LmNsb3NlT25CZ0NsaWNrPSExLGIuc3Quc2hvd0Nsb3NlQnRuPSExLGIuc3QuZW5hYmxlRXNjYXBlS2V5PSExKSxiLmJnT3ZlcmxheXx8KGIuYmdPdmVybGF5PXgoXCJiZ1wiKS5vbihcImNsaWNrXCIrcCxmdW5jdGlvbigpe2IuY2xvc2UoKX0pLGIud3JhcD14KFwid3JhcFwiKS5hdHRyKFwidGFiaW5kZXhcIiwtMSkub24oXCJjbGlja1wiK3AsZnVuY3Rpb24oYSl7Yi5fY2hlY2tJZkNsb3NlKGEudGFyZ2V0KSYmYi5jbG9zZSgpfSksYi5jb250YWluZXI9eChcImNvbnRhaW5lclwiLGIud3JhcCkpLGIuY29udGVudENvbnRhaW5lcj14KFwiY29udGVudFwiKSxiLnN0LnByZWxvYWRlciYmKGIucHJlbG9hZGVyPXgoXCJwcmVsb2FkZXJcIixiLmNvbnRhaW5lcixiLnN0LnRMb2FkaW5nKSk7dmFyIGk9YS5tYWduaWZpY1BvcHVwLm1vZHVsZXM7Zm9yKGU9MDtlPGkubGVuZ3RoO2UrKyl7dmFyIGo9aVtlXTtqPWouY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrai5zbGljZSgxKSxiW1wiaW5pdFwiK2pdLmNhbGwoYil9eShcIkJlZm9yZU9wZW5cIiksYi5zdC5zaG93Q2xvc2VCdG4mJihiLnN0LmNsb3NlQnRuSW5zaWRlPyh3KGwsZnVuY3Rpb24oYSxiLGMsZCl7Yy5jbG9zZV9yZXBsYWNlV2l0aD16KGQudHlwZSl9KSxmKz1cIiBtZnAtY2xvc2UtYnRuLWluXCIpOmIud3JhcC5hcHBlbmQoeigpKSksYi5zdC5hbGlnblRvcCYmKGYrPVwiIG1mcC1hbGlnbi10b3BcIiksYi5maXhlZENvbnRlbnRQb3M/Yi53cmFwLmNzcyh7b3ZlcmZsb3c6Yi5zdC5vdmVyZmxvd1ksb3ZlcmZsb3dYOlwiaGlkZGVuXCIsb3ZlcmZsb3dZOmIuc3Qub3ZlcmZsb3dZfSk6Yi53cmFwLmNzcyh7dG9wOnYuc2Nyb2xsVG9wKCkscG9zaXRpb246XCJhYnNvbHV0ZVwifSksKGIuc3QuZml4ZWRCZ1Bvcz09PSExfHxcImF1dG9cIj09PWIuc3QuZml4ZWRCZ1BvcyYmIWIuZml4ZWRDb250ZW50UG9zKSYmYi5iZ092ZXJsYXkuY3NzKHtoZWlnaHQ6ZC5oZWlnaHQoKSxwb3NpdGlvbjpcImFic29sdXRlXCJ9KSxiLnN0LmVuYWJsZUVzY2FwZUtleSYmZC5vbihcImtleXVwXCIrcCxmdW5jdGlvbihhKXsyNz09PWEua2V5Q29kZSYmYi5jbG9zZSgpfSksdi5vbihcInJlc2l6ZVwiK3AsZnVuY3Rpb24oKXtiLnVwZGF0ZVNpemUoKX0pLGIuc3QuY2xvc2VPbkNvbnRlbnRDbGlja3x8KGYrPVwiIG1mcC1hdXRvLWN1cnNvclwiKSxmJiZiLndyYXAuYWRkQ2xhc3MoZik7dmFyIGs9Yi53SD12LmhlaWdodCgpLG49e307aWYoYi5maXhlZENvbnRlbnRQb3MmJmIuX2hhc1Njcm9sbEJhcihrKSl7dmFyIG89Yi5fZ2V0U2Nyb2xsYmFyU2l6ZSgpO28mJihuLm1hcmdpblJpZ2h0PW8pfWIuZml4ZWRDb250ZW50UG9zJiYoYi5pc0lFNz9hKFwiYm9keSwgaHRtbFwiKS5jc3MoXCJvdmVyZmxvd1wiLFwiaGlkZGVuXCIpOm4ub3ZlcmZsb3c9XCJoaWRkZW5cIik7dmFyIHI9Yi5zdC5tYWluQ2xhc3M7cmV0dXJuIGIuaXNJRTcmJihyKz1cIiBtZnAtaWU3XCIpLHImJmIuX2FkZENsYXNzVG9NRlAociksYi51cGRhdGVJdGVtSFRNTCgpLHkoXCJCdWlsZENvbnRyb2xzXCIpLGEoXCJodG1sXCIpLmNzcyhuKSxiLmJnT3ZlcmxheS5hZGQoYi53cmFwKS5wcmVwZW5kVG8oYi5zdC5wcmVwZW5kVG98fGEoZG9jdW1lbnQuYm9keSkpLGIuX2xhc3RGb2N1c2VkRWw9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yi5jb250ZW50PyhiLl9hZGRDbGFzc1RvTUZQKHEpLGIuX3NldEZvY3VzKCkpOmIuYmdPdmVybGF5LmFkZENsYXNzKHEpLGQub24oXCJmb2N1c2luXCIrcCxiLl9vbkZvY3VzSW4pfSwxNiksYi5pc09wZW49ITAsYi51cGRhdGVTaXplKGspLHkobSksY30sY2xvc2U6ZnVuY3Rpb24oKXtiLmlzT3BlbiYmKHkoaSksYi5pc09wZW49ITEsYi5zdC5yZW1vdmFsRGVsYXkmJiFiLmlzTG93SUUmJmIuc3VwcG9ydHNUcmFuc2l0aW9uPyhiLl9hZGRDbGFzc1RvTUZQKHIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtiLl9jbG9zZSgpfSxiLnN0LnJlbW92YWxEZWxheSkpOmIuX2Nsb3NlKCkpfSxfY2xvc2U6ZnVuY3Rpb24oKXt5KGgpO3ZhciBjPXIrXCIgXCIrcStcIiBcIjtpZihiLmJnT3ZlcmxheS5kZXRhY2goKSxiLndyYXAuZGV0YWNoKCksYi5jb250YWluZXIuZW1wdHkoKSxiLnN0Lm1haW5DbGFzcyYmKGMrPWIuc3QubWFpbkNsYXNzK1wiIFwiKSxiLl9yZW1vdmVDbGFzc0Zyb21NRlAoYyksYi5maXhlZENvbnRlbnRQb3Mpe3ZhciBlPXttYXJnaW5SaWdodDpcIlwifTtiLmlzSUU3P2EoXCJib2R5LCBodG1sXCIpLmNzcyhcIm92ZXJmbG93XCIsXCJcIik6ZS5vdmVyZmxvdz1cIlwiLGEoXCJodG1sXCIpLmNzcyhlKX1kLm9mZihcImtleXVwXCIrcCtcIiBmb2N1c2luXCIrcCksYi5ldi5vZmYocCksYi53cmFwLmF0dHIoXCJjbGFzc1wiLFwibWZwLXdyYXBcIikucmVtb3ZlQXR0cihcInN0eWxlXCIpLGIuYmdPdmVybGF5LmF0dHIoXCJjbGFzc1wiLFwibWZwLWJnXCIpLGIuY29udGFpbmVyLmF0dHIoXCJjbGFzc1wiLFwibWZwLWNvbnRhaW5lclwiKSwhYi5zdC5zaG93Q2xvc2VCdG58fGIuc3QuY2xvc2VCdG5JbnNpZGUmJmIuY3VyclRlbXBsYXRlW2IuY3Vyckl0ZW0udHlwZV0hPT0hMHx8Yi5jdXJyVGVtcGxhdGUuY2xvc2VCdG4mJmIuY3VyclRlbXBsYXRlLmNsb3NlQnRuLmRldGFjaCgpLGIuc3QuYXV0b0ZvY3VzTGFzdCYmYi5fbGFzdEZvY3VzZWRFbCYmYShiLl9sYXN0Rm9jdXNlZEVsKS5mb2N1cygpLGIuY3Vyckl0ZW09bnVsbCxiLmNvbnRlbnQ9bnVsbCxiLmN1cnJUZW1wbGF0ZT1udWxsLGIucHJldkhlaWdodD0wLHkoail9LHVwZGF0ZVNpemU6ZnVuY3Rpb24oYSl7aWYoYi5pc0lPUyl7dmFyIGM9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoL3dpbmRvdy5pbm5lcldpZHRoLGQ9d2luZG93LmlubmVySGVpZ2h0KmM7Yi53cmFwLmNzcyhcImhlaWdodFwiLGQpLGIud0g9ZH1lbHNlIGIud0g9YXx8di5oZWlnaHQoKTtiLmZpeGVkQ29udGVudFBvc3x8Yi53cmFwLmNzcyhcImhlaWdodFwiLGIud0gpLHkoXCJSZXNpemVcIil9LHVwZGF0ZUl0ZW1IVE1MOmZ1bmN0aW9uKCl7dmFyIGM9Yi5pdGVtc1tiLmluZGV4XTtiLmNvbnRlbnRDb250YWluZXIuZGV0YWNoKCksYi5jb250ZW50JiZiLmNvbnRlbnQuZGV0YWNoKCksYy5wYXJzZWR8fChjPWIucGFyc2VFbChiLmluZGV4KSk7dmFyIGQ9Yy50eXBlO2lmKHkoXCJCZWZvcmVDaGFuZ2VcIixbYi5jdXJySXRlbT9iLmN1cnJJdGVtLnR5cGU6XCJcIixkXSksYi5jdXJySXRlbT1jLCFiLmN1cnJUZW1wbGF0ZVtkXSl7dmFyIGY9Yi5zdFtkXT9iLnN0W2RdLm1hcmt1cDohMTt5KFwiRmlyc3RNYXJrdXBQYXJzZVwiLGYpLGY/Yi5jdXJyVGVtcGxhdGVbZF09YShmKTpiLmN1cnJUZW1wbGF0ZVtkXT0hMH1lJiZlIT09Yy50eXBlJiZiLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhcIm1mcC1cIitlK1wiLWhvbGRlclwiKTt2YXIgZz1iW1wiZ2V0XCIrZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStkLnNsaWNlKDEpXShjLGIuY3VyclRlbXBsYXRlW2RdKTtiLmFwcGVuZENvbnRlbnQoZyxkKSxjLnByZWxvYWRlZD0hMCx5KG4sYyksZT1jLnR5cGUsYi5jb250YWluZXIucHJlcGVuZChiLmNvbnRlbnRDb250YWluZXIpLHkoXCJBZnRlckNoYW5nZVwiKX0sYXBwZW5kQ29udGVudDpmdW5jdGlvbihhLGMpe2IuY29udGVudD1hLGE/Yi5zdC5zaG93Q2xvc2VCdG4mJmIuc3QuY2xvc2VCdG5JbnNpZGUmJmIuY3VyclRlbXBsYXRlW2NdPT09ITA/Yi5jb250ZW50LmZpbmQoXCIubWZwLWNsb3NlXCIpLmxlbmd0aHx8Yi5jb250ZW50LmFwcGVuZCh6KCkpOmIuY29udGVudD1hOmIuY29udGVudD1cIlwiLHkoayksYi5jb250YWluZXIuYWRkQ2xhc3MoXCJtZnAtXCIrYytcIi1ob2xkZXJcIiksYi5jb250ZW50Q29udGFpbmVyLmFwcGVuZChiLmNvbnRlbnQpfSxwYXJzZUVsOmZ1bmN0aW9uKGMpe3ZhciBkLGU9Yi5pdGVtc1tjXTtpZihlLnRhZ05hbWU/ZT17ZWw6YShlKX06KGQ9ZS50eXBlLGU9e2RhdGE6ZSxzcmM6ZS5zcmN9KSxlLmVsKXtmb3IodmFyIGY9Yi50eXBlcyxnPTA7ZzxmLmxlbmd0aDtnKyspaWYoZS5lbC5oYXNDbGFzcyhcIm1mcC1cIitmW2ddKSl7ZD1mW2ddO2JyZWFrfWUuc3JjPWUuZWwuYXR0cihcImRhdGEtbWZwLXNyY1wiKSxlLnNyY3x8KGUuc3JjPWUuZWwuYXR0cihcImhyZWZcIikpfXJldHVybiBlLnR5cGU9ZHx8Yi5zdC50eXBlfHxcImlubGluZVwiLGUuaW5kZXg9YyxlLnBhcnNlZD0hMCxiLml0ZW1zW2NdPWUseShcIkVsZW1lbnRQYXJzZVwiLGUpLGIuaXRlbXNbY119LGFkZEdyb3VwOmZ1bmN0aW9uKGEsYyl7dmFyIGQ9ZnVuY3Rpb24oZCl7ZC5tZnBFbD10aGlzLGIuX29wZW5DbGljayhkLGEsYyl9O2N8fChjPXt9KTt2YXIgZT1cImNsaWNrLm1hZ25pZmljUG9wdXBcIjtjLm1haW5FbD1hLGMuaXRlbXM/KGMuaXNPYmo9ITAsYS5vZmYoZSkub24oZSxkKSk6KGMuaXNPYmo9ITEsYy5kZWxlZ2F0ZT9hLm9mZihlKS5vbihlLGMuZGVsZWdhdGUsZCk6KGMuaXRlbXM9YSxhLm9mZihlKS5vbihlLGQpKSl9LF9vcGVuQ2xpY2s6ZnVuY3Rpb24oYyxkLGUpe3ZhciBmPXZvaWQgMCE9PWUubWlkQ2xpY2s/ZS5taWRDbGljazphLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMubWlkQ2xpY2s7aWYoZnx8ISgyPT09Yy53aGljaHx8Yy5jdHJsS2V5fHxjLm1ldGFLZXl8fGMuYWx0S2V5fHxjLnNoaWZ0S2V5KSl7dmFyIGc9dm9pZCAwIT09ZS5kaXNhYmxlT24/ZS5kaXNhYmxlT246YS5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLmRpc2FibGVPbjtpZihnKWlmKGEuaXNGdW5jdGlvbihnKSl7aWYoIWcuY2FsbChiKSlyZXR1cm4hMH1lbHNlIGlmKHYud2lkdGgoKTxnKXJldHVybiEwO2MudHlwZSYmKGMucHJldmVudERlZmF1bHQoKSxiLmlzT3BlbiYmYy5zdG9wUHJvcGFnYXRpb24oKSksZS5lbD1hKGMubWZwRWwpLGUuZGVsZWdhdGUmJihlLml0ZW1zPWQuZmluZChlLmRlbGVnYXRlKSksYi5vcGVuKGUpfX0sdXBkYXRlU3RhdHVzOmZ1bmN0aW9uKGEsZCl7aWYoYi5wcmVsb2FkZXIpe2MhPT1hJiZiLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhcIm1mcC1zLVwiK2MpLGR8fFwibG9hZGluZ1wiIT09YXx8KGQ9Yi5zdC50TG9hZGluZyk7dmFyIGU9e3N0YXR1czphLHRleHQ6ZH07eShcIlVwZGF0ZVN0YXR1c1wiLGUpLGE9ZS5zdGF0dXMsZD1lLnRleHQsYi5wcmVsb2FkZXIuaHRtbChkKSxiLnByZWxvYWRlci5maW5kKFwiYVwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKX0pLGIuY29udGFpbmVyLmFkZENsYXNzKFwibWZwLXMtXCIrYSksYz1hfX0sX2NoZWNrSWZDbG9zZTpmdW5jdGlvbihjKXtpZighYShjKS5oYXNDbGFzcyhzKSl7dmFyIGQ9Yi5zdC5jbG9zZU9uQ29udGVudENsaWNrLGU9Yi5zdC5jbG9zZU9uQmdDbGljaztpZihkJiZlKXJldHVybiEwO2lmKCFiLmNvbnRlbnR8fGEoYykuaGFzQ2xhc3MoXCJtZnAtY2xvc2VcIil8fGIucHJlbG9hZGVyJiZjPT09Yi5wcmVsb2FkZXJbMF0pcmV0dXJuITA7aWYoYz09PWIuY29udGVudFswXXx8YS5jb250YWlucyhiLmNvbnRlbnRbMF0sYykpe2lmKGQpcmV0dXJuITB9ZWxzZSBpZihlJiZhLmNvbnRhaW5zKGRvY3VtZW50LGMpKXJldHVybiEwO3JldHVybiExfX0sX2FkZENsYXNzVG9NRlA6ZnVuY3Rpb24oYSl7Yi5iZ092ZXJsYXkuYWRkQ2xhc3MoYSksYi53cmFwLmFkZENsYXNzKGEpfSxfcmVtb3ZlQ2xhc3NGcm9tTUZQOmZ1bmN0aW9uKGEpe3RoaXMuYmdPdmVybGF5LnJlbW92ZUNsYXNzKGEpLGIud3JhcC5yZW1vdmVDbGFzcyhhKX0sX2hhc1Njcm9sbEJhcjpmdW5jdGlvbihhKXtyZXR1cm4oYi5pc0lFNz9kLmhlaWdodCgpOmRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0KT4oYXx8di5oZWlnaHQoKSl9LF9zZXRGb2N1czpmdW5jdGlvbigpeyhiLnN0LmZvY3VzP2IuY29udGVudC5maW5kKGIuc3QuZm9jdXMpLmVxKDApOmIud3JhcCkuZm9jdXMoKX0sX29uRm9jdXNJbjpmdW5jdGlvbihjKXtyZXR1cm4gYy50YXJnZXQ9PT1iLndyYXBbMF18fGEuY29udGFpbnMoYi53cmFwWzBdLGMudGFyZ2V0KT92b2lkIDA6KGIuX3NldEZvY3VzKCksITEpfSxfcGFyc2VNYXJrdXA6ZnVuY3Rpb24oYixjLGQpe3ZhciBlO2QuZGF0YSYmKGM9YS5leHRlbmQoZC5kYXRhLGMpKSx5KGwsW2IsYyxkXSksYS5lYWNoKGMsZnVuY3Rpb24oYyxkKXtpZih2b2lkIDA9PT1kfHxkPT09ITEpcmV0dXJuITA7aWYoZT1jLnNwbGl0KFwiX1wiKSxlLmxlbmd0aD4xKXt2YXIgZj1iLmZpbmQocCtcIi1cIitlWzBdKTtpZihmLmxlbmd0aD4wKXt2YXIgZz1lWzFdO1wicmVwbGFjZVdpdGhcIj09PWc/ZlswXSE9PWRbMF0mJmYucmVwbGFjZVdpdGgoZCk6XCJpbWdcIj09PWc/Zi5pcyhcImltZ1wiKT9mLmF0dHIoXCJzcmNcIixkKTpmLnJlcGxhY2VXaXRoKGEoXCI8aW1nPlwiKS5hdHRyKFwic3JjXCIsZCkuYXR0cihcImNsYXNzXCIsZi5hdHRyKFwiY2xhc3NcIikpKTpmLmF0dHIoZVsxXSxkKX19ZWxzZSBiLmZpbmQocCtcIi1cIitjKS5odG1sKGQpfSl9LF9nZXRTY3JvbGxiYXJTaXplOmZ1bmN0aW9uKCl7aWYodm9pZCAwPT09Yi5zY3JvbGxiYXJTaXplKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2Euc3R5bGUuY3NzVGV4dD1cIndpZHRoOiA5OXB4OyBoZWlnaHQ6IDk5cHg7IG92ZXJmbG93OiBzY3JvbGw7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtOTk5OXB4O1wiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSksYi5zY3JvbGxiYXJTaXplPWEub2Zmc2V0V2lkdGgtYS5jbGllbnRXaWR0aCxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpfXJldHVybiBiLnNjcm9sbGJhclNpemV9fSxhLm1hZ25pZmljUG9wdXA9e2luc3RhbmNlOm51bGwscHJvdG86dC5wcm90b3R5cGUsbW9kdWxlczpbXSxvcGVuOmZ1bmN0aW9uKGIsYyl7cmV0dXJuIEEoKSxiPWI/YS5leHRlbmQoITAse30sYik6e30sYi5pc09iaj0hMCxiLmluZGV4PWN8fDAsdGhpcy5pbnN0YW5jZS5vcGVuKGIpfSxjbG9zZTpmdW5jdGlvbigpe3JldHVybiBhLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UmJmEubWFnbmlmaWNQb3B1cC5pbnN0YW5jZS5jbG9zZSgpfSxyZWdpc3Rlck1vZHVsZTpmdW5jdGlvbihiLGMpe2Mub3B0aW9ucyYmKGEubWFnbmlmaWNQb3B1cC5kZWZhdWx0c1tiXT1jLm9wdGlvbnMpLGEuZXh0ZW5kKHRoaXMucHJvdG8sYy5wcm90byksdGhpcy5tb2R1bGVzLnB1c2goYil9LGRlZmF1bHRzOntkaXNhYmxlT246MCxrZXk6bnVsbCxtaWRDbGljazohMSxtYWluQ2xhc3M6XCJcIixwcmVsb2FkZXI6ITAsZm9jdXM6XCJcIixjbG9zZU9uQ29udGVudENsaWNrOiExLGNsb3NlT25CZ0NsaWNrOiEwLGNsb3NlQnRuSW5zaWRlOiEwLHNob3dDbG9zZUJ0bjohMCxlbmFibGVFc2NhcGVLZXk6ITAsbW9kYWw6ITEsYWxpZ25Ub3A6ITEscmVtb3ZhbERlbGF5OjAscHJlcGVuZFRvOm51bGwsZml4ZWRDb250ZW50UG9zOlwiYXV0b1wiLGZpeGVkQmdQb3M6XCJhdXRvXCIsb3ZlcmZsb3dZOlwiYXV0b1wiLGNsb3NlTWFya3VwOic8YnV0dG9uIHRpdGxlPVwiJXRpdGxlJVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm1mcC1jbG9zZVwiPiYjMjE1OzwvYnV0dG9uPicsdENsb3NlOlwiQ2xvc2UgKEVzYylcIix0TG9hZGluZzpcIkxvYWRpbmcuLi5cIixhdXRvRm9jdXNMYXN0OiEwfX0sYS5mbi5tYWduaWZpY1BvcHVwPWZ1bmN0aW9uKGMpe0EoKTt2YXIgZD1hKHRoaXMpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBjKWlmKFwib3BlblwiPT09Yyl7dmFyIGUsZj11P2QuZGF0YShcIm1hZ25pZmljUG9wdXBcIik6ZFswXS5tYWduaWZpY1BvcHVwLGc9cGFyc2VJbnQoYXJndW1lbnRzWzFdLDEwKXx8MDtmLml0ZW1zP2U9Zi5pdGVtc1tnXTooZT1kLGYuZGVsZWdhdGUmJihlPWUuZmluZChmLmRlbGVnYXRlKSksZT1lLmVxKGcpKSxiLl9vcGVuQ2xpY2soe21mcEVsOmV9LGQsZil9ZWxzZSBiLmlzT3BlbiYmYltjXS5hcHBseShiLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7ZWxzZSBjPWEuZXh0ZW5kKCEwLHt9LGMpLHU/ZC5kYXRhKFwibWFnbmlmaWNQb3B1cFwiLGMpOmRbMF0ubWFnbmlmaWNQb3B1cD1jLGIuYWRkR3JvdXAoZCxjKTtyZXR1cm4gZH07dmFyIEMsRCxFLEY9XCJpbmxpbmVcIixHPWZ1bmN0aW9uKCl7RSYmKEQuYWZ0ZXIoRS5hZGRDbGFzcyhDKSkuZGV0YWNoKCksRT1udWxsKX07YS5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKEYse29wdGlvbnM6e2hpZGRlbkNsYXNzOlwiaGlkZVwiLG1hcmt1cDpcIlwiLHROb3RGb3VuZDpcIkNvbnRlbnQgbm90IGZvdW5kXCJ9LHByb3RvOntpbml0SW5saW5lOmZ1bmN0aW9uKCl7Yi50eXBlcy5wdXNoKEYpLHcoaCtcIi5cIitGLGZ1bmN0aW9uKCl7RygpfSl9LGdldElubGluZTpmdW5jdGlvbihjLGQpe2lmKEcoKSxjLnNyYyl7dmFyIGU9Yi5zdC5pbmxpbmUsZj1hKGMuc3JjKTtpZihmLmxlbmd0aCl7dmFyIGc9ZlswXS5wYXJlbnROb2RlO2cmJmcudGFnTmFtZSYmKER8fChDPWUuaGlkZGVuQ2xhc3MsRD14KEMpLEM9XCJtZnAtXCIrQyksRT1mLmFmdGVyKEQpLmRldGFjaCgpLnJlbW92ZUNsYXNzKEMpKSxiLnVwZGF0ZVN0YXR1cyhcInJlYWR5XCIpfWVsc2UgYi51cGRhdGVTdGF0dXMoXCJlcnJvclwiLGUudE5vdEZvdW5kKSxmPWEoXCI8ZGl2PlwiKTtyZXR1cm4gYy5pbmxpbmVFbGVtZW50PWYsZn1yZXR1cm4gYi51cGRhdGVTdGF0dXMoXCJyZWFkeVwiKSxiLl9wYXJzZU1hcmt1cChkLHt9LGMpLGR9fX0pO3ZhciBILEk9XCJhamF4XCIsSj1mdW5jdGlvbigpe0gmJmEoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoSCl9LEs9ZnVuY3Rpb24oKXtKKCksYi5yZXEmJmIucmVxLmFib3J0KCl9O2EubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShJLHtvcHRpb25zOntzZXR0aW5nczpudWxsLGN1cnNvcjpcIm1mcC1hamF4LWN1clwiLHRFcnJvcjonPGEgaHJlZj1cIiV1cmwlXCI+VGhlIGNvbnRlbnQ8L2E+IGNvdWxkIG5vdCBiZSBsb2FkZWQuJ30scHJvdG86e2luaXRBamF4OmZ1bmN0aW9uKCl7Yi50eXBlcy5wdXNoKEkpLEg9Yi5zdC5hamF4LmN1cnNvcix3KGgrXCIuXCIrSSxLKSx3KFwiQmVmb3JlQ2hhbmdlLlwiK0ksSyl9LGdldEFqYXg6ZnVuY3Rpb24oYyl7SCYmYShkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhIKSxiLnVwZGF0ZVN0YXR1cyhcImxvYWRpbmdcIik7dmFyIGQ9YS5leHRlbmQoe3VybDpjLnNyYyxzdWNjZXNzOmZ1bmN0aW9uKGQsZSxmKXt2YXIgZz17ZGF0YTpkLHhocjpmfTt5KFwiUGFyc2VBamF4XCIsZyksYi5hcHBlbmRDb250ZW50KGEoZy5kYXRhKSxJKSxjLmZpbmlzaGVkPSEwLEooKSxiLl9zZXRGb2N1cygpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtiLndyYXAuYWRkQ2xhc3MocSl9LDE2KSxiLnVwZGF0ZVN0YXR1cyhcInJlYWR5XCIpLHkoXCJBamF4Q29udGVudEFkZGVkXCIpfSxlcnJvcjpmdW5jdGlvbigpe0ooKSxjLmZpbmlzaGVkPWMubG9hZEVycm9yPSEwLGIudXBkYXRlU3RhdHVzKFwiZXJyb3JcIixiLnN0LmFqYXgudEVycm9yLnJlcGxhY2UoXCIldXJsJVwiLGMuc3JjKSl9fSxiLnN0LmFqYXguc2V0dGluZ3MpO3JldHVybiBiLnJlcT1hLmFqYXgoZCksXCJcIn19fSk7dmFyIEwsTT1mdW5jdGlvbihjKXtpZihjLmRhdGEmJnZvaWQgMCE9PWMuZGF0YS50aXRsZSlyZXR1cm4gYy5kYXRhLnRpdGxlO3ZhciBkPWIuc3QuaW1hZ2UudGl0bGVTcmM7aWYoZCl7aWYoYS5pc0Z1bmN0aW9uKGQpKXJldHVybiBkLmNhbGwoYixjKTtpZihjLmVsKXJldHVybiBjLmVsLmF0dHIoZCl8fFwiXCJ9cmV0dXJuXCJcIn07YS5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKFwiaW1hZ2VcIix7b3B0aW9uczp7bWFya3VwOic8ZGl2IGNsYXNzPVwibWZwLWZpZ3VyZVwiPjxkaXYgY2xhc3M9XCJtZnAtY2xvc2VcIj48L2Rpdj48ZmlndXJlPjxkaXYgY2xhc3M9XCJtZnAtaW1nXCI+PC9kaXY+PGZpZ2NhcHRpb24+PGRpdiBjbGFzcz1cIm1mcC1ib3R0b20tYmFyXCI+PGRpdiBjbGFzcz1cIm1mcC10aXRsZVwiPjwvZGl2PjxkaXYgY2xhc3M9XCJtZnAtY291bnRlclwiPjwvZGl2PjwvZGl2PjwvZmlnY2FwdGlvbj48L2ZpZ3VyZT48L2Rpdj4nLGN1cnNvcjpcIm1mcC16b29tLW91dC1jdXJcIix0aXRsZVNyYzpcInRpdGxlXCIsdmVydGljYWxGaXQ6ITAsdEVycm9yOic8YSBocmVmPVwiJXVybCVcIj5UaGUgaW1hZ2U8L2E+IGNvdWxkIG5vdCBiZSBsb2FkZWQuJ30scHJvdG86e2luaXRJbWFnZTpmdW5jdGlvbigpe3ZhciBjPWIuc3QuaW1hZ2UsZD1cIi5pbWFnZVwiO2IudHlwZXMucHVzaChcImltYWdlXCIpLHcobStkLGZ1bmN0aW9uKCl7XCJpbWFnZVwiPT09Yi5jdXJySXRlbS50eXBlJiZjLmN1cnNvciYmYShkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhjLmN1cnNvcil9KSx3KGgrZCxmdW5jdGlvbigpe2MuY3Vyc29yJiZhKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKGMuY3Vyc29yKSx2Lm9mZihcInJlc2l6ZVwiK3ApfSksdyhcIlJlc2l6ZVwiK2QsYi5yZXNpemVJbWFnZSksYi5pc0xvd0lFJiZ3KFwiQWZ0ZXJDaGFuZ2VcIixiLnJlc2l6ZUltYWdlKX0scmVzaXplSW1hZ2U6ZnVuY3Rpb24oKXt2YXIgYT1iLmN1cnJJdGVtO2lmKGEmJmEuaW1nJiZiLnN0LmltYWdlLnZlcnRpY2FsRml0KXt2YXIgYz0wO2IuaXNMb3dJRSYmKGM9cGFyc2VJbnQoYS5pbWcuY3NzKFwicGFkZGluZy10b3BcIiksMTApK3BhcnNlSW50KGEuaW1nLmNzcyhcInBhZGRpbmctYm90dG9tXCIpLDEwKSksYS5pbWcuY3NzKFwibWF4LWhlaWdodFwiLGIud0gtYyl9fSxfb25JbWFnZUhhc1NpemU6ZnVuY3Rpb24oYSl7YS5pbWcmJihhLmhhc1NpemU9ITAsTCYmY2xlYXJJbnRlcnZhbChMKSxhLmlzQ2hlY2tpbmdJbWdTaXplPSExLHkoXCJJbWFnZUhhc1NpemVcIixhKSxhLmltZ0hpZGRlbiYmKGIuY29udGVudCYmYi5jb250ZW50LnJlbW92ZUNsYXNzKFwibWZwLWxvYWRpbmdcIiksYS5pbWdIaWRkZW49ITEpKX0sZmluZEltYWdlU2l6ZTpmdW5jdGlvbihhKXt2YXIgYz0wLGQ9YS5pbWdbMF0sZT1mdW5jdGlvbihmKXtMJiZjbGVhckludGVydmFsKEwpLEw9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtyZXR1cm4gZC5uYXR1cmFsV2lkdGg+MD92b2lkIGIuX29uSW1hZ2VIYXNTaXplKGEpOihjPjIwMCYmY2xlYXJJbnRlcnZhbChMKSxjKyssdm9pZCgzPT09Yz9lKDEwKTo0MD09PWM/ZSg1MCk6MTAwPT09YyYmZSg1MDApKSl9LGYpfTtlKDEpfSxnZXRJbWFnZTpmdW5jdGlvbihjLGQpe3ZhciBlPTAsZj1mdW5jdGlvbigpe2MmJihjLmltZ1swXS5jb21wbGV0ZT8oYy5pbWcub2ZmKFwiLm1mcGxvYWRlclwiKSxjPT09Yi5jdXJySXRlbSYmKGIuX29uSW1hZ2VIYXNTaXplKGMpLGIudXBkYXRlU3RhdHVzKFwicmVhZHlcIikpLGMuaGFzU2l6ZT0hMCxjLmxvYWRlZD0hMCx5KFwiSW1hZ2VMb2FkQ29tcGxldGVcIikpOihlKyssMjAwPmU/c2V0VGltZW91dChmLDEwMCk6ZygpKSl9LGc9ZnVuY3Rpb24oKXtjJiYoYy5pbWcub2ZmKFwiLm1mcGxvYWRlclwiKSxjPT09Yi5jdXJySXRlbSYmKGIuX29uSW1hZ2VIYXNTaXplKGMpLGIudXBkYXRlU3RhdHVzKFwiZXJyb3JcIixoLnRFcnJvci5yZXBsYWNlKFwiJXVybCVcIixjLnNyYykpKSxjLmhhc1NpemU9ITAsYy5sb2FkZWQ9ITAsYy5sb2FkRXJyb3I9ITApfSxoPWIuc3QuaW1hZ2UsaT1kLmZpbmQoXCIubWZwLWltZ1wiKTtpZihpLmxlbmd0aCl7dmFyIGo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtqLmNsYXNzTmFtZT1cIm1mcC1pbWdcIixjLmVsJiZjLmVsLmZpbmQoXCJpbWdcIikubGVuZ3RoJiYoai5hbHQ9Yy5lbC5maW5kKFwiaW1nXCIpLmF0dHIoXCJhbHRcIikpLGMuaW1nPWEoaikub24oXCJsb2FkLm1mcGxvYWRlclwiLGYpLm9uKFwiZXJyb3IubWZwbG9hZGVyXCIsZyksai5zcmM9Yy5zcmMsaS5pcyhcImltZ1wiKSYmKGMuaW1nPWMuaW1nLmNsb25lKCkpLGo9Yy5pbWdbMF0sai5uYXR1cmFsV2lkdGg+MD9jLmhhc1NpemU9ITA6ai53aWR0aHx8KGMuaGFzU2l6ZT0hMSl9cmV0dXJuIGIuX3BhcnNlTWFya3VwKGQse3RpdGxlOk0oYyksaW1nX3JlcGxhY2VXaXRoOmMuaW1nfSxjKSxiLnJlc2l6ZUltYWdlKCksYy5oYXNTaXplPyhMJiZjbGVhckludGVydmFsKEwpLGMubG9hZEVycm9yPyhkLmFkZENsYXNzKFwibWZwLWxvYWRpbmdcIiksYi51cGRhdGVTdGF0dXMoXCJlcnJvclwiLGgudEVycm9yLnJlcGxhY2UoXCIldXJsJVwiLGMuc3JjKSkpOihkLnJlbW92ZUNsYXNzKFwibWZwLWxvYWRpbmdcIiksYi51cGRhdGVTdGF0dXMoXCJyZWFkeVwiKSksZCk6KGIudXBkYXRlU3RhdHVzKFwibG9hZGluZ1wiKSxjLmxvYWRpbmc9ITAsYy5oYXNTaXplfHwoYy5pbWdIaWRkZW49ITAsZC5hZGRDbGFzcyhcIm1mcC1sb2FkaW5nXCIpLGIuZmluZEltYWdlU2l6ZShjKSksZCl9fX0pO3ZhciBOLE89ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09TiYmKE49dm9pZCAwIT09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIikuc3R5bGUuTW96VHJhbnNmb3JtKSxOfTthLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoXCJ6b29tXCIse29wdGlvbnM6e2VuYWJsZWQ6ITEsZWFzaW5nOlwiZWFzZS1pbi1vdXRcIixkdXJhdGlvbjozMDAsb3BlbmVyOmZ1bmN0aW9uKGEpe3JldHVybiBhLmlzKFwiaW1nXCIpP2E6YS5maW5kKFwiaW1nXCIpfX0scHJvdG86e2luaXRab29tOmZ1bmN0aW9uKCl7dmFyIGEsYz1iLnN0Lnpvb20sZD1cIi56b29tXCI7aWYoYy5lbmFibGVkJiZiLnN1cHBvcnRzVHJhbnNpdGlvbil7dmFyIGUsZixnPWMuZHVyYXRpb24saj1mdW5jdGlvbihhKXt2YXIgYj1hLmNsb25lKCkucmVtb3ZlQXR0cihcInN0eWxlXCIpLnJlbW92ZUF0dHIoXCJjbGFzc1wiKS5hZGRDbGFzcyhcIm1mcC1hbmltYXRlZC1pbWFnZVwiKSxkPVwiYWxsIFwiK2MuZHVyYXRpb24vMWUzK1wicyBcIitjLmVhc2luZyxlPXtwb3NpdGlvbjpcImZpeGVkXCIsekluZGV4Ojk5OTksbGVmdDowLHRvcDowLFwiLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5XCI6XCJoaWRkZW5cIn0sZj1cInRyYW5zaXRpb25cIjtyZXR1cm4gZVtcIi13ZWJraXQtXCIrZl09ZVtcIi1tb3otXCIrZl09ZVtcIi1vLVwiK2ZdPWVbZl09ZCxiLmNzcyhlKSxifSxrPWZ1bmN0aW9uKCl7Yi5jb250ZW50LmNzcyhcInZpc2liaWxpdHlcIixcInZpc2libGVcIil9O3coXCJCdWlsZENvbnRyb2xzXCIrZCxmdW5jdGlvbigpe2lmKGIuX2FsbG93Wm9vbSgpKXtpZihjbGVhclRpbWVvdXQoZSksYi5jb250ZW50LmNzcyhcInZpc2liaWxpdHlcIixcImhpZGRlblwiKSxhPWIuX2dldEl0ZW1Ub1pvb20oKSwhYSlyZXR1cm4gdm9pZCBrKCk7Zj1qKGEpLGYuY3NzKGIuX2dldE9mZnNldCgpKSxiLndyYXAuYXBwZW5kKGYpLGU9c2V0VGltZW91dChmdW5jdGlvbigpe2YuY3NzKGIuX2dldE9mZnNldCghMCkpLGU9c2V0VGltZW91dChmdW5jdGlvbigpe2soKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zi5yZW1vdmUoKSxhPWY9bnVsbCx5KFwiWm9vbUFuaW1hdGlvbkVuZGVkXCIpfSwxNil9LGcpfSwxNil9fSksdyhpK2QsZnVuY3Rpb24oKXtpZihiLl9hbGxvd1pvb20oKSl7aWYoY2xlYXJUaW1lb3V0KGUpLGIuc3QucmVtb3ZhbERlbGF5PWcsIWEpe2lmKGE9Yi5fZ2V0SXRlbVRvWm9vbSgpLCFhKXJldHVybjtmPWooYSl9Zi5jc3MoYi5fZ2V0T2Zmc2V0KCEwKSksYi53cmFwLmFwcGVuZChmKSxiLmNvbnRlbnQuY3NzKFwidmlzaWJpbGl0eVwiLFwiaGlkZGVuXCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtmLmNzcyhiLl9nZXRPZmZzZXQoKSl9LDE2KX19KSx3KGgrZCxmdW5jdGlvbigpe2IuX2FsbG93Wm9vbSgpJiYoaygpLGYmJmYucmVtb3ZlKCksYT1udWxsKX0pfX0sX2FsbG93Wm9vbTpmdW5jdGlvbigpe3JldHVyblwiaW1hZ2VcIj09PWIuY3Vyckl0ZW0udHlwZX0sX2dldEl0ZW1Ub1pvb206ZnVuY3Rpb24oKXtyZXR1cm4gYi5jdXJySXRlbS5oYXNTaXplP2IuY3Vyckl0ZW0uaW1nOiExfSxfZ2V0T2Zmc2V0OmZ1bmN0aW9uKGMpe3ZhciBkO2Q9Yz9iLmN1cnJJdGVtLmltZzpiLnN0Lnpvb20ub3BlbmVyKGIuY3Vyckl0ZW0uZWx8fGIuY3Vyckl0ZW0pO3ZhciBlPWQub2Zmc2V0KCksZj1wYXJzZUludChkLmNzcyhcInBhZGRpbmctdG9wXCIpLDEwKSxnPXBhcnNlSW50KGQuY3NzKFwicGFkZGluZy1ib3R0b21cIiksMTApO2UudG9wLT1hKHdpbmRvdykuc2Nyb2xsVG9wKCktZjt2YXIgaD17d2lkdGg6ZC53aWR0aCgpLGhlaWdodDoodT9kLmlubmVySGVpZ2h0KCk6ZFswXS5vZmZzZXRIZWlnaHQpLWctZn07cmV0dXJuIE8oKT9oW1wiLW1vei10cmFuc2Zvcm1cIl09aC50cmFuc2Zvcm09XCJ0cmFuc2xhdGUoXCIrZS5sZWZ0K1wicHgsXCIrZS50b3ArXCJweClcIjooaC5sZWZ0PWUubGVmdCxoLnRvcD1lLnRvcCksaH19fSk7dmFyIFA9XCJpZnJhbWVcIixRPVwiLy9hYm91dDpibGFua1wiLFI9ZnVuY3Rpb24oYSl7aWYoYi5jdXJyVGVtcGxhdGVbUF0pe3ZhciBjPWIuY3VyclRlbXBsYXRlW1BdLmZpbmQoXCJpZnJhbWVcIik7Yy5sZW5ndGgmJihhfHwoY1swXS5zcmM9USksYi5pc0lFOCYmYy5jc3MoXCJkaXNwbGF5XCIsYT9cImJsb2NrXCI6XCJub25lXCIpKX19O2EubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShQLHtvcHRpb25zOnttYXJrdXA6JzxkaXYgY2xhc3M9XCJtZnAtaWZyYW1lLXNjYWxlclwiPjxkaXYgY2xhc3M9XCJtZnAtY2xvc2VcIj48L2Rpdj48aWZyYW1lIGNsYXNzPVwibWZwLWlmcmFtZVwiIHNyYz1cIi8vYWJvdXQ6YmxhbmtcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+PC9kaXY+JyxzcmNBY3Rpb246XCJpZnJhbWVfc3JjXCIscGF0dGVybnM6e3lvdXR1YmU6e2luZGV4OlwieW91dHViZS5jb21cIixpZDpcInY9XCIsc3JjOlwiLy93d3cueW91dHViZS5jb20vZW1iZWQvJWlkJT9hdXRvcGxheT0xXCJ9LHZpbWVvOntpbmRleDpcInZpbWVvLmNvbS9cIixpZDpcIi9cIixzcmM6XCIvL3BsYXllci52aW1lby5jb20vdmlkZW8vJWlkJT9hdXRvcGxheT0xXCJ9LGdtYXBzOntpbmRleDpcIi8vbWFwcy5nb29nbGUuXCIsc3JjOlwiJWlkJSZvdXRwdXQ9ZW1iZWRcIn19fSxwcm90bzp7aW5pdElmcmFtZTpmdW5jdGlvbigpe2IudHlwZXMucHVzaChQKSx3KFwiQmVmb3JlQ2hhbmdlXCIsZnVuY3Rpb24oYSxiLGMpe2IhPT1jJiYoYj09PVA/UigpOmM9PT1QJiZSKCEwKSl9KSx3KGgrXCIuXCIrUCxmdW5jdGlvbigpe1IoKX0pfSxnZXRJZnJhbWU6ZnVuY3Rpb24oYyxkKXt2YXIgZT1jLnNyYyxmPWIuc3QuaWZyYW1lO2EuZWFjaChmLnBhdHRlcm5zLGZ1bmN0aW9uKCl7cmV0dXJuIGUuaW5kZXhPZih0aGlzLmluZGV4KT4tMT8odGhpcy5pZCYmKGU9XCJzdHJpbmdcIj09dHlwZW9mIHRoaXMuaWQ/ZS5zdWJzdHIoZS5sYXN0SW5kZXhPZih0aGlzLmlkKSt0aGlzLmlkLmxlbmd0aCxlLmxlbmd0aCk6dGhpcy5pZC5jYWxsKHRoaXMsZSkpLGU9dGhpcy5zcmMucmVwbGFjZShcIiVpZCVcIixlKSwhMSk6dm9pZCAwfSk7dmFyIGc9e307cmV0dXJuIGYuc3JjQWN0aW9uJiYoZ1tmLnNyY0FjdGlvbl09ZSksYi5fcGFyc2VNYXJrdXAoZCxnLGMpLGIudXBkYXRlU3RhdHVzKFwicmVhZHlcIiksZH19fSk7dmFyIFM9ZnVuY3Rpb24oYSl7dmFyIGM9Yi5pdGVtcy5sZW5ndGg7cmV0dXJuIGE+Yy0xP2EtYzowPmE/YythOmF9LFQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBhLnJlcGxhY2UoLyVjdXJyJS9naSxiKzEpLnJlcGxhY2UoLyV0b3RhbCUvZ2ksYyl9O2EubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShcImdhbGxlcnlcIix7b3B0aW9uczp7ZW5hYmxlZDohMSxhcnJvd01hcmt1cDonPGJ1dHRvbiB0aXRsZT1cIiV0aXRsZSVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJtZnAtYXJyb3cgbWZwLWFycm93LSVkaXIlXCI+PC9idXR0b24+JyxwcmVsb2FkOlswLDJdLG5hdmlnYXRlQnlJbWdDbGljazohMCxhcnJvd3M6ITAsdFByZXY6XCJQcmV2aW91cyAoTGVmdCBhcnJvdyBrZXkpXCIsdE5leHQ6XCJOZXh0IChSaWdodCBhcnJvdyBrZXkpXCIsdENvdW50ZXI6XCIlY3VyciUgb2YgJXRvdGFsJVwifSxwcm90bzp7aW5pdEdhbGxlcnk6ZnVuY3Rpb24oKXt2YXIgYz1iLnN0LmdhbGxlcnksZT1cIi5tZnAtZ2FsbGVyeVwiO3JldHVybiBiLmRpcmVjdGlvbj0hMCxjJiZjLmVuYWJsZWQ/KGYrPVwiIG1mcC1nYWxsZXJ5XCIsdyhtK2UsZnVuY3Rpb24oKXtjLm5hdmlnYXRlQnlJbWdDbGljayYmYi53cmFwLm9uKFwiY2xpY2tcIitlLFwiLm1mcC1pbWdcIixmdW5jdGlvbigpe3JldHVybiBiLml0ZW1zLmxlbmd0aD4xPyhiLm5leHQoKSwhMSk6dm9pZCAwfSksZC5vbihcImtleWRvd25cIitlLGZ1bmN0aW9uKGEpezM3PT09YS5rZXlDb2RlP2IucHJldigpOjM5PT09YS5rZXlDb2RlJiZiLm5leHQoKX0pfSksdyhcIlVwZGF0ZVN0YXR1c1wiK2UsZnVuY3Rpb24oYSxjKXtjLnRleHQmJihjLnRleHQ9VChjLnRleHQsYi5jdXJySXRlbS5pbmRleCxiLml0ZW1zLmxlbmd0aCkpfSksdyhsK2UsZnVuY3Rpb24oYSxkLGUsZil7dmFyIGc9Yi5pdGVtcy5sZW5ndGg7ZS5jb3VudGVyPWc+MT9UKGMudENvdW50ZXIsZi5pbmRleCxnKTpcIlwifSksdyhcIkJ1aWxkQ29udHJvbHNcIitlLGZ1bmN0aW9uKCl7aWYoYi5pdGVtcy5sZW5ndGg+MSYmYy5hcnJvd3MmJiFiLmFycm93TGVmdCl7dmFyIGQ9Yy5hcnJvd01hcmt1cCxlPWIuYXJyb3dMZWZ0PWEoZC5yZXBsYWNlKC8ldGl0bGUlL2dpLGMudFByZXYpLnJlcGxhY2UoLyVkaXIlL2dpLFwibGVmdFwiKSkuYWRkQ2xhc3MocyksZj1iLmFycm93UmlnaHQ9YShkLnJlcGxhY2UoLyV0aXRsZSUvZ2ksYy50TmV4dCkucmVwbGFjZSgvJWRpciUvZ2ksXCJyaWdodFwiKSkuYWRkQ2xhc3Mocyk7ZS5jbGljayhmdW5jdGlvbigpe2IucHJldigpfSksZi5jbGljayhmdW5jdGlvbigpe2IubmV4dCgpfSksYi5jb250YWluZXIuYXBwZW5kKGUuYWRkKGYpKX19KSx3KG4rZSxmdW5jdGlvbigpe2IuX3ByZWxvYWRUaW1lb3V0JiZjbGVhclRpbWVvdXQoYi5fcHJlbG9hZFRpbWVvdXQpLGIuX3ByZWxvYWRUaW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtiLnByZWxvYWROZWFyYnlJbWFnZXMoKSxiLl9wcmVsb2FkVGltZW91dD1udWxsfSwxNil9KSx2b2lkIHcoaCtlLGZ1bmN0aW9uKCl7ZC5vZmYoZSksYi53cmFwLm9mZihcImNsaWNrXCIrZSksYi5hcnJvd1JpZ2h0PWIuYXJyb3dMZWZ0PW51bGx9KSk6ITF9LG5leHQ6ZnVuY3Rpb24oKXtiLmRpcmVjdGlvbj0hMCxiLmluZGV4PVMoYi5pbmRleCsxKSxiLnVwZGF0ZUl0ZW1IVE1MKCl9LHByZXY6ZnVuY3Rpb24oKXtiLmRpcmVjdGlvbj0hMSxiLmluZGV4PVMoYi5pbmRleC0xKSxiLnVwZGF0ZUl0ZW1IVE1MKCl9LGdvVG86ZnVuY3Rpb24oYSl7Yi5kaXJlY3Rpb249YT49Yi5pbmRleCxiLmluZGV4PWEsYi51cGRhdGVJdGVtSFRNTCgpfSxwcmVsb2FkTmVhcmJ5SW1hZ2VzOmZ1bmN0aW9uKCl7dmFyIGEsYz1iLnN0LmdhbGxlcnkucHJlbG9hZCxkPU1hdGgubWluKGNbMF0sYi5pdGVtcy5sZW5ndGgpLGU9TWF0aC5taW4oY1sxXSxiLml0ZW1zLmxlbmd0aCk7Zm9yKGE9MTthPD0oYi5kaXJlY3Rpb24/ZTpkKTthKyspYi5fcHJlbG9hZEl0ZW0oYi5pbmRleCthKTtmb3IoYT0xO2E8PShiLmRpcmVjdGlvbj9kOmUpO2ErKyliLl9wcmVsb2FkSXRlbShiLmluZGV4LWEpfSxfcHJlbG9hZEl0ZW06ZnVuY3Rpb24oYyl7aWYoYz1TKGMpLCFiLml0ZW1zW2NdLnByZWxvYWRlZCl7dmFyIGQ9Yi5pdGVtc1tjXTtkLnBhcnNlZHx8KGQ9Yi5wYXJzZUVsKGMpKSx5KFwiTGF6eUxvYWRcIixkKSxcImltYWdlXCI9PT1kLnR5cGUmJihkLmltZz1hKCc8aW1nIGNsYXNzPVwibWZwLWltZ1wiIC8+Jykub24oXCJsb2FkLm1mcGxvYWRlclwiLGZ1bmN0aW9uKCl7ZC5oYXNTaXplPSEwfSkub24oXCJlcnJvci5tZnBsb2FkZXJcIixmdW5jdGlvbigpe2QuaGFzU2l6ZT0hMCxkLmxvYWRFcnJvcj0hMCx5KFwiTGF6eUxvYWRFcnJvclwiLGQpfSkuYXR0cihcInNyY1wiLGQuc3JjKSksZC5wcmVsb2FkZWQ9ITB9fX19KTt2YXIgVT1cInJldGluYVwiO2EubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShVLHtvcHRpb25zOntyZXBsYWNlU3JjOmZ1bmN0aW9uKGEpe3JldHVybiBhLnNyYy5yZXBsYWNlKC9cXC5cXHcrJC8sZnVuY3Rpb24oYSl7cmV0dXJuXCJAMnhcIithfSl9LHJhdGlvOjF9LHByb3RvOntpbml0UmV0aW5hOmZ1bmN0aW9uKCl7aWYod2luZG93LmRldmljZVBpeGVsUmF0aW8+MSl7dmFyIGE9Yi5zdC5yZXRpbmEsYz1hLnJhdGlvO2M9aXNOYU4oYyk/YygpOmMsYz4xJiYodyhcIkltYWdlSGFzU2l6ZS5cIitVLGZ1bmN0aW9uKGEsYil7Yi5pbWcuY3NzKHtcIm1heC13aWR0aFwiOmIuaW1nWzBdLm5hdHVyYWxXaWR0aC9jLHdpZHRoOlwiMTAwJVwifSl9KSx3KFwiRWxlbWVudFBhcnNlLlwiK1UsZnVuY3Rpb24oYixkKXtkLnNyYz1hLnJlcGxhY2VTcmMoZCxjKX0pKX19fX0pLEEoKX0pOyIsIi8qIVxuICAqIFN0aWNreWZpbGwg4oCTIGBwb3NpdGlvbjogc3RpY2t5YCBwb2x5ZmlsbFxuICAqIHYuIDIuMS4wIHwgaHR0cHM6Ly9naXRodWIuY29tL3dpbGRkZWVyL3N0aWNreWZpbGxcbiAgKiBNSVQgTGljZW5zZVxuICAqL1xuIWZ1bmN0aW9uKGEsYil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYyhhLGIpe2lmKCEoYSBpbnN0YW5jZW9mIGIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gZChhLGIpe2Zvcih2YXIgYyBpbiBiKWIuaGFzT3duUHJvcGVydHkoYykmJihhW2NdPWJbY10pfWZ1bmN0aW9uIGUoYSl7cmV0dXJuIHBhcnNlRmxvYXQoYSl8fDB9ZnVuY3Rpb24gZihhKXtmb3IodmFyIGI9MDthOyliKz1hLm9mZnNldFRvcCxhPWEub2Zmc2V0UGFyZW50O3JldHVybiBifWZ1bmN0aW9uIGcoKXtmdW5jdGlvbiBjKCl7YS5wYWdlWE9mZnNldCE9bS5sZWZ0PyhtLnRvcD1hLnBhZ2VZT2Zmc2V0LG0ubGVmdD1hLnBhZ2VYT2Zmc2V0LHAucmVmcmVzaEFsbCgpKTphLnBhZ2VZT2Zmc2V0IT1tLnRvcCYmKG0udG9wPWEucGFnZVlPZmZzZXQsbS5sZWZ0PWEucGFnZVhPZmZzZXQsbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBhLl9yZWNhbGNQb3NpdGlvbigpfSkpfWZ1bmN0aW9uIGQoKXtmPXNldEludGVydmFsKGZ1bmN0aW9uKCl7bi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBhLl9mYXN0Q2hlY2soKX0pfSw1MDApfWZ1bmN0aW9uIGUoKXtjbGVhckludGVydmFsKGYpfWlmKCFrKXtrPSEwLGMoKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIixjKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixwLnJlZnJlc2hBbGwpLGEuYWRkRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIscC5yZWZyZXNoQWxsKTt2YXIgZj12b2lkIDAsZz12b2lkIDAsaD12b2lkIDA7XCJoaWRkZW5cImluIGI/KGc9XCJoaWRkZW5cIixoPVwidmlzaWJpbGl0eWNoYW5nZVwiKTpcIndlYmtpdEhpZGRlblwiaW4gYiYmKGc9XCJ3ZWJraXRIaWRkZW5cIixoPVwid2Via2l0dmlzaWJpbGl0eWNoYW5nZVwiKSxoPyhiW2ddfHxkKCksYi5hZGRFdmVudExpc3RlbmVyKGgsZnVuY3Rpb24oKXtiW2ddP2UoKTpkKCl9KSk6ZCgpfX12YXIgaD1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxiKXtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YltjXTtkLmVudW1lcmFibGU9ZC5lbnVtZXJhYmxlfHwhMSxkLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBkJiYoZC53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsZC5rZXksZCl9fXJldHVybiBmdW5jdGlvbihiLGMsZCl7cmV0dXJuIGMmJmEoYi5wcm90b3R5cGUsYyksZCYmYShiLGQpLGJ9fSgpLGk9ITEsaj1cInVuZGVmaW5lZFwiIT10eXBlb2YgYTtqJiZhLmdldENvbXB1dGVkU3R5bGU/IWZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1tcIlwiLFwiLXdlYmtpdC1cIixcIi1tb3otXCIsXCItbXMtXCJdLnNvbWUoZnVuY3Rpb24oYil7dHJ5e2Euc3R5bGUucG9zaXRpb249YitcInN0aWNreVwifWNhdGNoKGEpe31yZXR1cm5cIlwiIT1hLnN0eWxlLnBvc2l0aW9ufSkmJihpPSEwKX0oKTppPSEwO3ZhciBrPSExLGw9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNoYWRvd1Jvb3QsbT17dG9wOm51bGwsbGVmdDpudWxsfSxuPVtdLG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBnKGEpe2lmKGModGhpcyxnKSwhKGEgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBIVE1MRWxlbWVudFwiKTtpZihuLnNvbWUoZnVuY3Rpb24oYil7cmV0dXJuIGIuX25vZGU9PT1hfSkpdGhyb3cgbmV3IEVycm9yKFwiU3RpY2t5ZmlsbCBpcyBhbHJlYWR5IGFwcGxpZWQgdG8gdGhpcyBub2RlXCIpO3RoaXMuX25vZGU9YSx0aGlzLl9zdGlja3lNb2RlPW51bGwsdGhpcy5fYWN0aXZlPSExLG4ucHVzaCh0aGlzKSx0aGlzLnJlZnJlc2goKX1yZXR1cm4gaChnLFt7a2V5OlwicmVmcmVzaFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoIWkmJiF0aGlzLl9yZW1vdmVkKXt0aGlzLl9hY3RpdmUmJnRoaXMuX2RlYWN0aXZhdGUoKTt2YXIgYz10aGlzLl9ub2RlLGc9Z2V0Q29tcHV0ZWRTdHlsZShjKSxoPXtwb3NpdGlvbjpnLnBvc2l0aW9uLHRvcDpnLnRvcCxkaXNwbGF5OmcuZGlzcGxheSxtYXJnaW5Ub3A6Zy5tYXJnaW5Ub3AsbWFyZ2luQm90dG9tOmcubWFyZ2luQm90dG9tLG1hcmdpbkxlZnQ6Zy5tYXJnaW5MZWZ0LG1hcmdpblJpZ2h0OmcubWFyZ2luUmlnaHQsY3NzRmxvYXQ6Zy5jc3NGbG9hdH07aWYoIWlzTmFOKHBhcnNlRmxvYXQoaC50b3ApKSYmXCJ0YWJsZS1jZWxsXCIhPWguZGlzcGxheSYmXCJub25lXCIhPWguZGlzcGxheSl7dGhpcy5fYWN0aXZlPSEwO3ZhciBqPWMuc3R5bGUucG9zaXRpb247XCJzdGlja3lcIiE9Zy5wb3NpdGlvbiYmXCItd2Via2l0LXN0aWNreVwiIT1nLnBvc2l0aW9ufHwoYy5zdHlsZS5wb3NpdGlvbj1cInN0YXRpY1wiKTt2YXIgaz1jLnBhcmVudE5vZGUsbT1sJiZrIGluc3RhbmNlb2YgU2hhZG93Um9vdD9rLmhvc3Q6ayxuPWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz1tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHA9Z2V0Q29tcHV0ZWRTdHlsZShtKTt0aGlzLl9wYXJlbnQ9e25vZGU6bSxzdHlsZXM6e3Bvc2l0aW9uOm0uc3R5bGUucG9zaXRpb259LG9mZnNldEhlaWdodDptLm9mZnNldEhlaWdodH0sdGhpcy5fb2Zmc2V0VG9XaW5kb3c9e2xlZnQ6bi5sZWZ0LHJpZ2h0OmIuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLW4ucmlnaHR9LHRoaXMuX29mZnNldFRvUGFyZW50PXt0b3A6bi50b3Atby50b3AtZShwLmJvcmRlclRvcFdpZHRoKSxsZWZ0Om4ubGVmdC1vLmxlZnQtZShwLmJvcmRlckxlZnRXaWR0aCkscmlnaHQ6LW4ucmlnaHQrby5yaWdodC1lKHAuYm9yZGVyUmlnaHRXaWR0aCl9LHRoaXMuX3N0eWxlcz17cG9zaXRpb246aix0b3A6Yy5zdHlsZS50b3AsYm90dG9tOmMuc3R5bGUuYm90dG9tLGxlZnQ6Yy5zdHlsZS5sZWZ0LHJpZ2h0OmMuc3R5bGUucmlnaHQsd2lkdGg6Yy5zdHlsZS53aWR0aCxtYXJnaW5Ub3A6Yy5zdHlsZS5tYXJnaW5Ub3AsbWFyZ2luTGVmdDpjLnN0eWxlLm1hcmdpbkxlZnQsbWFyZ2luUmlnaHQ6Yy5zdHlsZS5tYXJnaW5SaWdodH07dmFyIHE9ZShoLnRvcCk7dGhpcy5fbGltaXRzPXtzdGFydDpuLnRvcCthLnBhZ2VZT2Zmc2V0LXEsZW5kOm8udG9wK2EucGFnZVlPZmZzZXQrbS5vZmZzZXRIZWlnaHQtZShwLmJvcmRlckJvdHRvbVdpZHRoKS1jLm9mZnNldEhlaWdodC1xLWUoaC5tYXJnaW5Cb3R0b20pfTt2YXIgcj1wLnBvc2l0aW9uO1wiYWJzb2x1dGVcIiE9ciYmXCJyZWxhdGl2ZVwiIT1yJiYobS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLHRoaXMuX3JlY2FsY1Bvc2l0aW9uKCk7dmFyIHM9dGhpcy5fY2xvbmU9e307cy5ub2RlPWIuY3JlYXRlRWxlbWVudChcImRpdlwiKSxkKHMubm9kZS5zdHlsZSx7d2lkdGg6bi5yaWdodC1uLmxlZnQrXCJweFwiLGhlaWdodDpuLmJvdHRvbS1uLnRvcCtcInB4XCIsbWFyZ2luVG9wOmgubWFyZ2luVG9wLG1hcmdpbkJvdHRvbTpoLm1hcmdpbkJvdHRvbSxtYXJnaW5MZWZ0OmgubWFyZ2luTGVmdCxtYXJnaW5SaWdodDpoLm1hcmdpblJpZ2h0LGNzc0Zsb2F0OmguY3NzRmxvYXQscGFkZGluZzowLGJvcmRlcjowLGJvcmRlclNwYWNpbmc6MCxmb250U2l6ZTpcIjFlbVwiLHBvc2l0aW9uOlwic3RhdGljXCJ9KSxrLmluc2VydEJlZm9yZShzLm5vZGUsYykscy5kb2NPZmZzZXRUb3A9ZihzLm5vZGUpfX19fSx7a2V5OlwiX3JlY2FsY1Bvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLl9hY3RpdmUmJiF0aGlzLl9yZW1vdmVkKXt2YXIgYT1tLnRvcDw9dGhpcy5fbGltaXRzLnN0YXJ0P1wic3RhcnRcIjptLnRvcD49dGhpcy5fbGltaXRzLmVuZD9cImVuZFwiOlwibWlkZGxlXCI7aWYodGhpcy5fc3RpY2t5TW9kZSE9YSl7c3dpdGNoKGEpe2Nhc2VcInN0YXJ0XCI6ZCh0aGlzLl9ub2RlLnN0eWxlLHtwb3NpdGlvbjpcImFic29sdXRlXCIsbGVmdDp0aGlzLl9vZmZzZXRUb1BhcmVudC5sZWZ0K1wicHhcIixyaWdodDp0aGlzLl9vZmZzZXRUb1BhcmVudC5yaWdodCtcInB4XCIsdG9wOnRoaXMuX29mZnNldFRvUGFyZW50LnRvcCtcInB4XCIsYm90dG9tOlwiYXV0b1wiLHdpZHRoOlwiYXV0b1wiLG1hcmdpbkxlZnQ6MCxtYXJnaW5SaWdodDowLG1hcmdpblRvcDowfSk7YnJlYWs7Y2FzZVwibWlkZGxlXCI6ZCh0aGlzLl9ub2RlLnN0eWxlLHtwb3NpdGlvbjpcImZpeGVkXCIsbGVmdDp0aGlzLl9vZmZzZXRUb1dpbmRvdy5sZWZ0K1wicHhcIixyaWdodDp0aGlzLl9vZmZzZXRUb1dpbmRvdy5yaWdodCtcInB4XCIsdG9wOnRoaXMuX3N0eWxlcy50b3AsYm90dG9tOlwiYXV0b1wiLHdpZHRoOlwiYXV0b1wiLG1hcmdpbkxlZnQ6MCxtYXJnaW5SaWdodDowLG1hcmdpblRvcDowfSk7YnJlYWs7Y2FzZVwiZW5kXCI6ZCh0aGlzLl9ub2RlLnN0eWxlLHtwb3NpdGlvbjpcImFic29sdXRlXCIsbGVmdDp0aGlzLl9vZmZzZXRUb1BhcmVudC5sZWZ0K1wicHhcIixyaWdodDp0aGlzLl9vZmZzZXRUb1BhcmVudC5yaWdodCtcInB4XCIsdG9wOlwiYXV0b1wiLGJvdHRvbTowLHdpZHRoOlwiYXV0b1wiLG1hcmdpbkxlZnQ6MCxtYXJnaW5SaWdodDowfSl9dGhpcy5fc3RpY2t5TW9kZT1hfX19fSx7a2V5OlwiX2Zhc3RDaGVja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fYWN0aXZlJiYhdGhpcy5fcmVtb3ZlZCYmKE1hdGguYWJzKGYodGhpcy5fY2xvbmUubm9kZSktdGhpcy5fY2xvbmUuZG9jT2Zmc2V0VG9wKT4xfHxNYXRoLmFicyh0aGlzLl9wYXJlbnQubm9kZS5vZmZzZXRIZWlnaHQtdGhpcy5fcGFyZW50Lm9mZnNldEhlaWdodCk+MSkmJnRoaXMucmVmcmVzaCgpfX0se2tleTpcIl9kZWFjdGl2YXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3RoaXMuX2FjdGl2ZSYmIXRoaXMuX3JlbW92ZWQmJih0aGlzLl9jbG9uZS5ub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5fY2xvbmUubm9kZSksZGVsZXRlIHRoaXMuX2Nsb25lLGQodGhpcy5fbm9kZS5zdHlsZSx0aGlzLl9zdHlsZXMpLGRlbGV0ZSB0aGlzLl9zdHlsZXMsbi5zb21lKGZ1bmN0aW9uKGIpe3JldHVybiBiIT09YSYmYi5fcGFyZW50JiZiLl9wYXJlbnQubm9kZT09PWEuX3BhcmVudC5ub2RlfSl8fGQodGhpcy5fcGFyZW50Lm5vZGUuc3R5bGUsdGhpcy5fcGFyZW50LnN0eWxlcyksZGVsZXRlIHRoaXMuX3BhcmVudCx0aGlzLl9zdGlja3lNb2RlPW51bGwsdGhpcy5fYWN0aXZlPSExLGRlbGV0ZSB0aGlzLl9vZmZzZXRUb1dpbmRvdyxkZWxldGUgdGhpcy5fb2Zmc2V0VG9QYXJlbnQsZGVsZXRlIHRoaXMuX2xpbWl0cyl9fSx7a2V5OlwicmVtb3ZlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3RoaXMuX2RlYWN0aXZhdGUoKSxuLnNvbWUoZnVuY3Rpb24oYixjKXtpZihiLl9ub2RlPT09YS5fbm9kZSlyZXR1cm4gbi5zcGxpY2UoYywxKSwhMH0pLHRoaXMuX3JlbW92ZWQ9ITB9fV0pLGd9KCkscD17c3RpY2tpZXM6bixTdGlja3k6byxmb3JjZVN0aWNreTpmdW5jdGlvbigpe2k9ITEsZygpLHRoaXMucmVmcmVzaEFsbCgpfSxhZGRPbmU6ZnVuY3Rpb24oYSl7aWYoIShhIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKXtpZighYS5sZW5ndGh8fCFhWzBdKXJldHVybjthPWFbMF19Zm9yKHZhciBiPTA7YjxuLmxlbmd0aDtiKyspaWYobltiXS5fbm9kZT09PWEpcmV0dXJuIG5bYl07cmV0dXJuIG5ldyBvKGEpfSxhZGQ6ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50JiYoYT1bYV0pLGEubGVuZ3RoKXtmb3IodmFyIGI9W10sYz1mdW5jdGlvbihjKXt2YXIgZD1hW2NdO3JldHVybiBkIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ/bi5zb21lKGZ1bmN0aW9uKGEpe2lmKGEuX25vZGU9PT1kKXJldHVybiBiLnB1c2goYSksITB9KT9cImNvbnRpbnVlXCI6dm9pZCBiLnB1c2gobmV3IG8oZCkpOihiLnB1c2godm9pZCAwKSxcImNvbnRpbnVlXCIpfSxkPTA7ZDxhLmxlbmd0aDtkKyspe2MoZCl9cmV0dXJuIGJ9fSxyZWZyZXNoQWxsOmZ1bmN0aW9uKCl7bi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBhLnJlZnJlc2goKX0pfSxyZW1vdmVPbmU6ZnVuY3Rpb24oYSl7aWYoIShhIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKXtpZighYS5sZW5ndGh8fCFhWzBdKXJldHVybjthPWFbMF19bi5zb21lKGZ1bmN0aW9uKGIpe2lmKGIuX25vZGU9PT1hKXJldHVybiBiLnJlbW92ZSgpLCEwfSl9LHJlbW92ZTpmdW5jdGlvbihhKXtpZihhIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJihhPVthXSksYS5sZW5ndGgpZm9yKHZhciBiPWZ1bmN0aW9uKGIpe3ZhciBjPWFbYl07bi5zb21lKGZ1bmN0aW9uKGEpe2lmKGEuX25vZGU9PT1jKXJldHVybiBhLnJlbW92ZSgpLCEwfSl9LGM9MDtjPGEubGVuZ3RoO2MrKyliKGMpfSxyZW1vdmVBbGw6ZnVuY3Rpb24oKXtmb3IoO24ubGVuZ3RoOyluWzBdLnJlbW92ZSgpfX07aXx8ZygpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPXA6aiYmKGEuU3RpY2t5ZmlsbD1wKX0od2luZG93LGRvY3VtZW50KTsiLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsIi8qIVxyXG4gKiBqUXVlcnkgVmFsaWRhdGlvbiBQbHVnaW4gdjEuMTkuMlxyXG4gKlxyXG4gKiBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1xyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgSsO2cm4gWmFlZmZlcmVyXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKi9cclxuKGZ1bmN0aW9uKCBmYWN0b3J5ICkge1xyXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XHJcblx0XHRkZWZpbmUoIFtcImpxdWVyeVwiXSwgZmFjdG9yeSApO1xyXG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCByZXF1aXJlKCBcImpxdWVyeVwiICkgKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XHJcblx0fVxyXG59KGZ1bmN0aW9uKCAkICkge1xyXG5cclxuJC5leHRlbmQoICQuZm4sIHtcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3ZhbGlkYXRlL1xuXHR2YWxpZGF0ZTogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiBub3RoaW5nIGlzIHNlbGVjdGVkLCByZXR1cm4gbm90aGluZzsgY2FuJ3QgY2hhaW4gYW55d2F5XG5cdFx0aWYgKCAhdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIk5vdGhpbmcgc2VsZWN0ZWQsIGNhbid0IHZhbGlkYXRlLCByZXR1cm5pbmcgbm90aGluZy5cIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIGEgdmFsaWRhdG9yIGZvciB0aGlzIGZvcm0gd2FzIGFscmVhZHkgY3JlYXRlZFxuXHRcdHZhciB2YWxpZGF0b3IgPSAkLmRhdGEoIHRoaXNbIDAgXSwgXCJ2YWxpZGF0b3JcIiApO1xuXHRcdGlmICggdmFsaWRhdG9yICkge1xuXHRcdFx0cmV0dXJuIHZhbGlkYXRvcjtcblx0XHR9XG5cblx0XHQvLyBBZGQgbm92YWxpZGF0ZSB0YWcgaWYgSFRNTDUuXG5cdFx0dGhpcy5hdHRyKCBcIm5vdmFsaWRhdGVcIiwgXCJub3ZhbGlkYXRlXCIgKTtcblxuXHRcdHZhbGlkYXRvciA9IG5ldyAkLnZhbGlkYXRvciggb3B0aW9ucywgdGhpc1sgMCBdICk7XG5cdFx0JC5kYXRhKCB0aGlzWyAwIF0sIFwidmFsaWRhdG9yXCIsIHZhbGlkYXRvciApO1xuXG5cdFx0aWYgKCB2YWxpZGF0b3Iuc2V0dGluZ3Mub25zdWJtaXQgKSB7XG5cblx0XHRcdHRoaXMub24oIFwiY2xpY2sudmFsaWRhdGVcIiwgXCI6c3VibWl0XCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBUcmFjayB0aGUgdXNlZCBzdWJtaXQgYnV0dG9uIHRvIHByb3Blcmx5IGhhbmRsZSBzY3JpcHRlZFxuXHRcdFx0XHQvLyBzdWJtaXRzIGxhdGVyLlxuXHRcdFx0XHR2YWxpZGF0b3Iuc3VibWl0QnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldDtcblxuXHRcdFx0XHQvLyBBbGxvdyBzdXBwcmVzc2luZyB2YWxpZGF0aW9uIGJ5IGFkZGluZyBhIGNhbmNlbCBjbGFzcyB0byB0aGUgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRpZiAoICQoIHRoaXMgKS5oYXNDbGFzcyggXCJjYW5jZWxcIiApICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWxsb3cgc3VwcHJlc3NpbmcgdmFsaWRhdGlvbiBieSBhZGRpbmcgdGhlIGh0bWw1IGZvcm1ub3ZhbGlkYXRlIGF0dHJpYnV0ZSB0byB0aGUgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRpZiAoICQoIHRoaXMgKS5hdHRyKCBcImZvcm1ub3ZhbGlkYXRlXCIgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIFZhbGlkYXRlIHRoZSBmb3JtIG9uIHN1Ym1pdFxuXHRcdFx0dGhpcy5vbiggXCJzdWJtaXQudmFsaWRhdGVcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyApIHtcblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgZm9ybSBzdWJtaXQgdG8gYmUgYWJsZSB0byBzZWUgY29uc29sZSBvdXRwdXRcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZnVuY3Rpb24gaGFuZGxlKCkge1xuXHRcdFx0XHRcdHZhciBoaWRkZW4sIHJlc3VsdDtcblxuXHRcdFx0XHRcdC8vIEluc2VydCBhIGhpZGRlbiBpbnB1dCBhcyBhIHJlcGxhY2VtZW50IGZvciB0aGUgbWlzc2luZyBzdWJtaXQgYnV0dG9uXG5cdFx0XHRcdFx0Ly8gVGhlIGhpZGRlbiBpbnB1dCBpcyBpbnNlcnRlZCBpbiB0d28gY2FzZXM6XG5cdFx0XHRcdFx0Ly8gICAtIEEgdXNlciBkZWZpbmVkIGEgYHN1Ym1pdEhhbmRsZXJgXG5cdFx0XHRcdFx0Ly8gICAtIFRoZXJlIHdhcyBhIHBlbmRpbmcgcmVxdWVzdCBkdWUgdG8gYHJlbW90ZWAgbWV0aG9kIGFuZCBgc3RvcFJlcXVlc3QoKWBcblx0XHRcdFx0XHQvLyAgICAgd2FzIGNhbGxlZCB0byBzdWJtaXQgdGhlIGZvcm0gaW4gY2FzZSBpdCdzIHZhbGlkXG5cdFx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uICYmICggdmFsaWRhdG9yLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXIgfHwgdmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgKSApIHtcblx0XHRcdFx0XHRcdGhpZGRlbiA9ICQoIFwiPGlucHV0IHR5cGU9J2hpZGRlbicvPlwiIClcblx0XHRcdFx0XHRcdFx0LmF0dHIoIFwibmFtZVwiLCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uLm5hbWUgKVxuXHRcdFx0XHRcdFx0XHQudmFsKCAkKCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uICkudmFsKCkgKVxuXHRcdFx0XHRcdFx0XHQuYXBwZW5kVG8oIHZhbGlkYXRvci5jdXJyZW50Rm9ybSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXIgJiYgIXZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyApIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyLmNhbGwoIHZhbGlkYXRvciwgdmFsaWRhdG9yLmN1cnJlbnRGb3JtLCBldmVudCApO1xuXHRcdFx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQW5kIGNsZWFuIHVwIGFmdGVyd2FyZHM7IHRoYW5rcyB0byBuby1ibG9jay1zY29wZSwgaGlkZGVuIGNhbiBiZSByZWZlcmVuY2VkXG5cdFx0XHRcdFx0XHRcdGhpZGRlbi5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggcmVzdWx0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJldmVudCBzdWJtaXQgZm9yIGludmFsaWQgZm9ybXMgb3IgY3VzdG9tIHN1Ym1pdCBoYW5kbGVyc1xuXHRcdFx0XHRpZiAoIHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgKSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCA9IGZhbHNlO1xuXHRcdFx0XHRcdHJldHVybiBoYW5kbGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIHZhbGlkYXRvci5mb3JtKCkgKSB7XG5cdFx0XHRcdFx0aWYgKCB2YWxpZGF0b3IucGVuZGluZ1JlcXVlc3QgKSB7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBoYW5kbGUoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWxpZGF0b3IuZm9jdXNJbnZhbGlkKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbGlkYXRvcjtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3ZhbGlkL1xuXHR2YWxpZDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZhbGlkLCB2YWxpZGF0b3IsIGVycm9yTGlzdDtcblxuXHRcdGlmICggJCggdGhpc1sgMCBdICkuaXMoIFwiZm9ybVwiICkgKSB7XG5cdFx0XHR2YWxpZCA9IHRoaXMudmFsaWRhdGUoKS5mb3JtKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVycm9yTGlzdCA9IFtdO1xuXHRcdFx0dmFsaWQgPSB0cnVlO1xuXHRcdFx0dmFsaWRhdG9yID0gJCggdGhpc1sgMCBdLmZvcm0gKS52YWxpZGF0ZSgpO1xuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFsaWQgPSB2YWxpZGF0b3IuZWxlbWVudCggdGhpcyApICYmIHZhbGlkO1xuXHRcdFx0XHRpZiAoICF2YWxpZCApIHtcblx0XHRcdFx0XHRlcnJvckxpc3QgPSBlcnJvckxpc3QuY29uY2F0KCB2YWxpZGF0b3IuZXJyb3JMaXN0ICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHRcdHZhbGlkYXRvci5lcnJvckxpc3QgPSBlcnJvckxpc3Q7XG5cdFx0fVxuXHRcdHJldHVybiB2YWxpZDtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3J1bGVzL1xuXHRydWxlczogZnVuY3Rpb24oIGNvbW1hbmQsIGFyZ3VtZW50ICkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpc1sgMCBdLFxuXHRcdFx0aXNDb250ZW50RWRpdGFibGUgPSB0eXBlb2YgdGhpcy5hdHRyKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgIT09IFwidW5kZWZpbmVkXCIgJiYgdGhpcy5hdHRyKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgIT09IFwiZmFsc2VcIixcblx0XHRcdHNldHRpbmdzLCBzdGF0aWNSdWxlcywgZXhpc3RpbmdSdWxlcywgZGF0YSwgcGFyYW0sIGZpbHRlcmVkO1xuXG5cdFx0Ly8gSWYgbm90aGluZyBpcyBzZWxlY3RlZCwgcmV0dXJuIGVtcHR5IG9iamVjdDsgY2FuJ3QgY2hhaW4gYW55d2F5XG5cdFx0aWYgKCBlbGVtZW50ID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCAhZWxlbWVudC5mb3JtICYmIGlzQ29udGVudEVkaXRhYmxlICkge1xuXHRcdFx0ZWxlbWVudC5mb3JtID0gdGhpcy5jbG9zZXN0KCBcImZvcm1cIiApWyAwIF07XG5cdFx0XHRlbGVtZW50Lm5hbWUgPSB0aGlzLmF0dHIoIFwibmFtZVwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBlbGVtZW50LmZvcm0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGNvbW1hbmQgKSB7XG5cdFx0XHRzZXR0aW5ncyA9ICQuZGF0YSggZWxlbWVudC5mb3JtLCBcInZhbGlkYXRvclwiICkuc2V0dGluZ3M7XG5cdFx0XHRzdGF0aWNSdWxlcyA9IHNldHRpbmdzLnJ1bGVzO1xuXHRcdFx0ZXhpc3RpbmdSdWxlcyA9ICQudmFsaWRhdG9yLnN0YXRpY1J1bGVzKCBlbGVtZW50ICk7XG5cdFx0XHRzd2l0Y2ggKCBjb21tYW5kICkge1xuXHRcdFx0Y2FzZSBcImFkZFwiOlxuXHRcdFx0XHQkLmV4dGVuZCggZXhpc3RpbmdSdWxlcywgJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggYXJndW1lbnQgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBtZXNzYWdlcyBmcm9tIHJ1bGVzLCBidXQgYWxsb3cgdGhlbSB0byBiZSBzZXQgc2VwYXJhdGVseVxuXHRcdFx0XHRkZWxldGUgZXhpc3RpbmdSdWxlcy5tZXNzYWdlcztcblx0XHRcdFx0c3RhdGljUnVsZXNbIGVsZW1lbnQubmFtZSBdID0gZXhpc3RpbmdSdWxlcztcblx0XHRcdFx0aWYgKCBhcmd1bWVudC5tZXNzYWdlcyApIHtcblx0XHRcdFx0XHRzZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gPSAkLmV4dGVuZCggc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdLCBhcmd1bWVudC5tZXNzYWdlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInJlbW92ZVwiOlxuXHRcdFx0XHRpZiAoICFhcmd1bWVudCApIHtcblx0XHRcdFx0XHRkZWxldGUgc3RhdGljUnVsZXNbIGVsZW1lbnQubmFtZSBdO1xuXHRcdFx0XHRcdHJldHVybiBleGlzdGluZ1J1bGVzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZpbHRlcmVkID0ge307XG5cdFx0XHRcdCQuZWFjaCggYXJndW1lbnQuc3BsaXQoIC9cXHMvICksIGZ1bmN0aW9uKCBpbmRleCwgbWV0aG9kICkge1xuXHRcdFx0XHRcdGZpbHRlcmVkWyBtZXRob2QgXSA9IGV4aXN0aW5nUnVsZXNbIG1ldGhvZCBdO1xuXHRcdFx0XHRcdGRlbGV0ZSBleGlzdGluZ1J1bGVzWyBtZXRob2QgXTtcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gZmlsdGVyZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZGF0YSA9ICQudmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGVzKFxuXHRcdCQuZXh0ZW5kKFxuXHRcdFx0e30sXG5cdFx0XHQkLnZhbGlkYXRvci5jbGFzc1J1bGVzKCBlbGVtZW50ICksXG5cdFx0XHQkLnZhbGlkYXRvci5hdHRyaWJ1dGVSdWxlcyggZWxlbWVudCApLFxuXHRcdFx0JC52YWxpZGF0b3IuZGF0YVJ1bGVzKCBlbGVtZW50ICksXG5cdFx0XHQkLnZhbGlkYXRvci5zdGF0aWNSdWxlcyggZWxlbWVudCApXG5cdFx0KSwgZWxlbWVudCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHJlcXVpcmVkIGlzIGF0IGZyb250XG5cdFx0aWYgKCBkYXRhLnJlcXVpcmVkICkge1xuXHRcdFx0cGFyYW0gPSBkYXRhLnJlcXVpcmVkO1xuXHRcdFx0ZGVsZXRlIGRhdGEucmVxdWlyZWQ7XG5cdFx0XHRkYXRhID0gJC5leHRlbmQoIHsgcmVxdWlyZWQ6IHBhcmFtIH0sIGRhdGEgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgcmVtb3RlIGlzIGF0IGJhY2tcblx0XHRpZiAoIGRhdGEucmVtb3RlICkge1xuXHRcdFx0cGFyYW0gPSBkYXRhLnJlbW90ZTtcblx0XHRcdGRlbGV0ZSBkYXRhLnJlbW90ZTtcblx0XHRcdGRhdGEgPSAkLmV4dGVuZCggZGF0YSwgeyByZW1vdGU6IHBhcmFtIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxufSApO1xuXG4vLyBKUXVlcnkgdHJpbSBpcyBkZXByZWNhdGVkLCBwcm92aWRlIGEgdHJpbSBtZXRob2QgYmFzZWQgb24gU3RyaW5nLnByb3RvdHlwZS50cmltXG52YXIgdHJpbSA9IGZ1bmN0aW9uKCBzdHIgKSB7XG5cblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3RyaW0jUG9seWZpbGxcblx0cmV0dXJuIHN0ci5yZXBsYWNlKCAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csIFwiXCIgKTtcbn07XG5cbi8vIEN1c3RvbSBzZWxlY3RvcnNcbiQuZXh0ZW5kKCAkLmV4cHIucHNldWRvcyB8fCAkLmV4cHJbIFwiOlwiIF0sIHtcdFx0Ly8gJ3x8ICQuZXhwclsgXCI6XCIgXScgaGVyZSBlbmFibGVzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHRvIGpRdWVyeSAxLjcuIENhbiBiZSByZW1vdmVkIHdoZW4gZHJvcHBpbmcgalEgMS43Lnggc3VwcG9ydFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvYmxhbmstc2VsZWN0b3IvXG5cdGJsYW5rOiBmdW5jdGlvbiggYSApIHtcblx0XHRyZXR1cm4gIXRyaW0oIFwiXCIgKyAkKCBhICkudmFsKCkgKTtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2ZpbGxlZC1zZWxlY3Rvci9cblx0ZmlsbGVkOiBmdW5jdGlvbiggYSApIHtcblx0XHR2YXIgdmFsID0gJCggYSApLnZhbCgpO1xuXHRcdHJldHVybiB2YWwgIT09IG51bGwgJiYgISF0cmltKCBcIlwiICsgdmFsICk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy91bmNoZWNrZWQtc2VsZWN0b3IvXG5cdHVuY2hlY2tlZDogZnVuY3Rpb24oIGEgKSB7XG5cdFx0cmV0dXJuICEkKCBhICkucHJvcCggXCJjaGVja2VkXCIgKTtcblx0fVxufSApO1xuXG4vLyBDb25zdHJ1Y3RvciBmb3IgdmFsaWRhdG9yXG4kLnZhbGlkYXRvciA9IGZ1bmN0aW9uKCBvcHRpb25zLCBmb3JtICkge1xuXHR0aGlzLnNldHRpbmdzID0gJC5leHRlbmQoIHRydWUsIHt9LCAkLnZhbGlkYXRvci5kZWZhdWx0cywgb3B0aW9ucyApO1xuXHR0aGlzLmN1cnJlbnRGb3JtID0gZm9ybTtcblx0dGhpcy5pbml0KCk7XG59O1xuXG4vLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IuZm9ybWF0L1xuJC52YWxpZGF0b3IuZm9ybWF0ID0gZnVuY3Rpb24oIHNvdXJjZSwgcGFyYW1zICkge1xuXHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGFyZ3MgPSAkLm1ha2VBcnJheSggYXJndW1lbnRzICk7XG5cdFx0XHRhcmdzLnVuc2hpZnQoIHNvdXJjZSApO1xuXHRcdFx0cmV0dXJuICQudmFsaWRhdG9yLmZvcm1hdC5hcHBseSggdGhpcywgYXJncyApO1xuXHRcdH07XG5cdH1cblx0aWYgKCBwYXJhbXMgPT09IHVuZGVmaW5lZCApIHtcblx0XHRyZXR1cm4gc291cmNlO1xuXHR9XG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgcGFyYW1zLmNvbnN0cnVjdG9yICE9PSBBcnJheSAgKSB7XG5cdFx0cGFyYW1zID0gJC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApLnNsaWNlKCAxICk7XG5cdH1cblx0aWYgKCBwYXJhbXMuY29uc3RydWN0b3IgIT09IEFycmF5ICkge1xuXHRcdHBhcmFtcyA9IFsgcGFyYW1zIF07XG5cdH1cblx0JC5lYWNoKCBwYXJhbXMsIGZ1bmN0aW9uKCBpLCBuICkge1xuXHRcdHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKCBuZXcgUmVnRXhwKCBcIlxcXFx7XCIgKyBpICsgXCJcXFxcfVwiLCBcImdcIiApLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBuO1xuXHRcdH0gKTtcblx0fSApO1xuXHRyZXR1cm4gc291cmNlO1xufTtcblxuJC5leHRlbmQoICQudmFsaWRhdG9yLCB7XG5cblx0ZGVmYXVsdHM6IHtcblx0XHRtZXNzYWdlczoge30sXG5cdFx0Z3JvdXBzOiB7fSxcblx0XHRydWxlczoge30sXG5cdFx0ZXJyb3JDbGFzczogXCJlcnJvclwiLFxuXHRcdHBlbmRpbmdDbGFzczogXCJwZW5kaW5nXCIsXG5cdFx0dmFsaWRDbGFzczogXCJ2YWxpZFwiLFxuXHRcdGVycm9yRWxlbWVudDogXCJsYWJlbFwiLFxuXHRcdGZvY3VzQ2xlYW51cDogZmFsc2UsXG5cdFx0Zm9jdXNJbnZhbGlkOiB0cnVlLFxuXHRcdGVycm9yQ29udGFpbmVyOiAkKCBbXSApLFxuXHRcdGVycm9yTGFiZWxDb250YWluZXI6ICQoIFtdICksXG5cdFx0b25zdWJtaXQ6IHRydWUsXG5cdFx0aWdub3JlOiBcIjpoaWRkZW5cIixcblx0XHRpZ25vcmVUaXRsZTogZmFsc2UsXG5cdFx0b25mb2N1c2luOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHRoaXMubGFzdEFjdGl2ZSA9IGVsZW1lbnQ7XG5cblx0XHRcdC8vIEhpZGUgZXJyb3IgbGFiZWwgYW5kIHJlbW92ZSBlcnJvciBjbGFzcyBvbiBmb2N1cyBpZiBlbmFibGVkXG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuZm9jdXNDbGVhbnVwICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlbGVtZW50LCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuaGlkZVRoZXNlKCB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbmZvY3Vzb3V0OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdGlmICggIXRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgJiYgKCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgfHwgIXRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSApICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9ua2V5dXA6IGZ1bmN0aW9uKCBlbGVtZW50LCBldmVudCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgcmV2YWxpZGF0ZSB0aGUgZmllbGQgd2hlbiBwcmVzc2luZyBvbmUgb2YgdGhlIGZvbGxvd2luZyBrZXlzXG5cdFx0XHQvLyBTaGlmdCAgICAgICA9PiAxNlxuXHRcdFx0Ly8gQ3RybCAgICAgICAgPT4gMTdcblx0XHRcdC8vIEFsdCAgICAgICAgID0+IDE4XG5cdFx0XHQvLyBDYXBzIGxvY2sgICA9PiAyMFxuXHRcdFx0Ly8gRW5kICAgICAgICAgPT4gMzVcblx0XHRcdC8vIEhvbWUgICAgICAgID0+IDM2XG5cdFx0XHQvLyBMZWZ0IGFycm93ICA9PiAzN1xuXHRcdFx0Ly8gVXAgYXJyb3cgICAgPT4gMzhcblx0XHRcdC8vIFJpZ2h0IGFycm93ID0+IDM5XG5cdFx0XHQvLyBEb3duIGFycm93ICA9PiA0MFxuXHRcdFx0Ly8gSW5zZXJ0ICAgICAgPT4gNDVcblx0XHRcdC8vIE51bSBsb2NrICAgID0+IDE0NFxuXHRcdFx0Ly8gQWx0R3Iga2V5ICAgPT4gMjI1XG5cdFx0XHR2YXIgZXhjbHVkZWRLZXlzID0gW1xuXHRcdFx0XHQxNiwgMTcsIDE4LCAyMCwgMzUsIDM2LCAzNyxcblx0XHRcdFx0MzgsIDM5LCA0MCwgNDUsIDE0NCwgMjI1XG5cdFx0XHRdO1xuXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09PSA5ICYmIHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICkgPT09IFwiXCIgfHwgJC5pbkFycmF5KCBldmVudC5rZXlDb2RlLCBleGNsdWRlZEtleXMgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCB8fCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5pbnZhbGlkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uY2xpY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBDbGljayBvbiBzZWxlY3RzLCByYWRpb2J1dHRvbnMgYW5kIGNoZWNrYm94ZXNcblx0XHRcdGlmICggZWxlbWVudC5uYW1lIGluIHRoaXMuc3VibWl0dGVkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblxuXHRcdFx0Ly8gT3Igb3B0aW9uIGVsZW1lbnRzLCBjaGVjayBwYXJlbnQgc2VsZWN0IGluIHRoYXQgY2FzZVxuXHRcdFx0fSBlbHNlIGlmICggZWxlbWVudC5wYXJlbnROb2RlLm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudC5wYXJlbnROb2RlICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoaWdobGlnaHQ6IGZ1bmN0aW9uKCBlbGVtZW50LCBlcnJvckNsYXNzLCB2YWxpZENsYXNzICkge1xuXHRcdFx0aWYgKCBlbGVtZW50LnR5cGUgPT09IFwicmFkaW9cIiApIHtcblx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5hZGRDbGFzcyggZXJyb3JDbGFzcyApLnJlbW92ZUNsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYWRkQ2xhc3MoIGVycm9yQ2xhc3MgKS5yZW1vdmVDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dW5oaWdobGlnaHQ6IGZ1bmN0aW9uKCBlbGVtZW50LCBlcnJvckNsYXNzLCB2YWxpZENsYXNzICkge1xuXHRcdFx0aWYgKCBlbGVtZW50LnR5cGUgPT09IFwicmFkaW9cIiApIHtcblx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5yZW1vdmVDbGFzcyggZXJyb3JDbGFzcyApLmFkZENsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQ2xhc3MoIGVycm9yQ2xhc3MgKS5hZGRDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3Iuc2V0RGVmYXVsdHMvXG5cdHNldERlZmF1bHRzOiBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0JC5leHRlbmQoICQudmFsaWRhdG9yLmRlZmF1bHRzLCBzZXR0aW5ncyApO1xuXHR9LFxuXG5cdG1lc3NhZ2VzOiB7XG5cdFx0cmVxdWlyZWQ6IFwiVGhpcyBmaWVsZCBpcyByZXF1aXJlZC5cIixcblx0XHRyZW1vdGU6IFwiUGxlYXNlIGZpeCB0aGlzIGZpZWxkLlwiLFxuXHRcdGVtYWlsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuXCIsXG5cdFx0dXJsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIFVSTC5cIixcblx0XHRkYXRlOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGRhdGUuXCIsXG5cdFx0ZGF0ZUlTTzogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlIChJU08pLlwiLFxuXHRcdG51bWJlcjogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBudW1iZXIuXCIsXG5cdFx0ZGlnaXRzOiBcIlBsZWFzZSBlbnRlciBvbmx5IGRpZ2l0cy5cIixcblx0XHRlcXVhbFRvOiBcIlBsZWFzZSBlbnRlciB0aGUgc2FtZSB2YWx1ZSBhZ2Fpbi5cIixcblx0XHRtYXhsZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgbm8gbW9yZSB0aGFuIHswfSBjaGFyYWN0ZXJzLlwiICksXG5cdFx0bWlubGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGF0IGxlYXN0IHswfSBjaGFyYWN0ZXJzLlwiICksXG5cdFx0cmFuZ2VsZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBiZXR3ZWVuIHswfSBhbmQgezF9IGNoYXJhY3RlcnMgbG9uZy5cIiApLFxuXHRcdHJhbmdlOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgYmV0d2VlbiB7MH0gYW5kIHsxfS5cIiApLFxuXHRcdG1heDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB7MH0uXCIgKSxcblx0XHRtaW46ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gezB9LlwiICksXG5cdFx0c3RlcDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIG11bHRpcGxlIG9mIHswfS5cIiApXG5cdH0sXG5cblx0YXV0b0NyZWF0ZVJhbmdlczogZmFsc2UsXG5cblx0cHJvdG90eXBlOiB7XG5cblx0XHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubGFiZWxDb250YWluZXIgPSAkKCB0aGlzLnNldHRpbmdzLmVycm9yTGFiZWxDb250YWluZXIgKTtcblx0XHRcdHRoaXMuZXJyb3JDb250ZXh0ID0gdGhpcy5sYWJlbENvbnRhaW5lci5sZW5ndGggJiYgdGhpcy5sYWJlbENvbnRhaW5lciB8fCAkKCB0aGlzLmN1cnJlbnRGb3JtICk7XG5cdFx0XHR0aGlzLmNvbnRhaW5lcnMgPSAkKCB0aGlzLnNldHRpbmdzLmVycm9yQ29udGFpbmVyICkuYWRkKCB0aGlzLnNldHRpbmdzLmVycm9yTGFiZWxDb250YWluZXIgKTtcblx0XHRcdHRoaXMuc3VibWl0dGVkID0ge307XG5cdFx0XHR0aGlzLnZhbHVlQ2FjaGUgPSB7fTtcblx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0dGhpcy5wZW5kaW5nID0ge307XG5cdFx0XHR0aGlzLmludmFsaWQgPSB7fTtcblx0XHRcdHRoaXMucmVzZXQoKTtcblxuXHRcdFx0dmFyIGN1cnJlbnRGb3JtID0gdGhpcy5jdXJyZW50Rm9ybSxcblx0XHRcdFx0Z3JvdXBzID0gKCB0aGlzLmdyb3VwcyA9IHt9ICksXG5cdFx0XHRcdHJ1bGVzO1xuXHRcdFx0JC5lYWNoKCB0aGlzLnNldHRpbmdzLmdyb3VwcywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWUuc3BsaXQoIC9cXHMvICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JC5lYWNoKCB2YWx1ZSwgZnVuY3Rpb24oIGluZGV4LCBuYW1lICkge1xuXHRcdFx0XHRcdGdyb3Vwc1sgbmFtZSBdID0ga2V5O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9ICk7XG5cdFx0XHRydWxlcyA9IHRoaXMuc2V0dGluZ3MucnVsZXM7XG5cdFx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0cnVsZXNbIGtleSBdID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggdmFsdWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0ZnVuY3Rpb24gZGVsZWdhdGUoIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgaXNDb250ZW50RWRpdGFibGUgPSB0eXBlb2YgJCggdGhpcyApLmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAkKCB0aGlzICkuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcImZhbHNlXCI7XG5cblx0XHRcdFx0Ly8gU2V0IGZvcm0gZXhwYW5kbyBvbiBjb250ZW50ZWRpdGFibGVcblx0XHRcdFx0aWYgKCAhdGhpcy5mb3JtICYmIGlzQ29udGVudEVkaXRhYmxlICkge1xuXHRcdFx0XHRcdHRoaXMuZm9ybSA9ICQoIHRoaXMgKS5jbG9zZXN0KCBcImZvcm1cIiApWyAwIF07XG5cdFx0XHRcdFx0dGhpcy5uYW1lID0gJCggdGhpcyApLmF0dHIoIFwibmFtZVwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZ25vcmUgdGhlIGVsZW1lbnQgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIGZvcm0uIFRoaXMgd2lsbCBoYXBwZW4gbWFpbmx5XG5cdFx0XHRcdC8vIHdoZW4gc2V0dGluZyB0aGUgYGZvcm1gIGF0dHJpYnV0ZSBvZiBhbiBpbnB1dCB0byB0aGUgaWQgb2YgYW5vdGhlciBmb3JtLlxuXHRcdFx0XHRpZiAoIGN1cnJlbnRGb3JtICE9PSB0aGlzLmZvcm0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHZhbGlkYXRvciA9ICQuZGF0YSggdGhpcy5mb3JtLCBcInZhbGlkYXRvclwiICksXG5cdFx0XHRcdFx0ZXZlbnRUeXBlID0gXCJvblwiICsgZXZlbnQudHlwZS5yZXBsYWNlKCAvXnZhbGlkYXRlLywgXCJcIiApLFxuXHRcdFx0XHRcdHNldHRpbmdzID0gdmFsaWRhdG9yLnNldHRpbmdzO1xuXHRcdFx0XHRpZiAoIHNldHRpbmdzWyBldmVudFR5cGUgXSAmJiAhJCggdGhpcyApLmlzKCBzZXR0aW5ncy5pZ25vcmUgKSApIHtcblx0XHRcdFx0XHRzZXR0aW5nc1sgZXZlbnRUeXBlIF0uY2FsbCggdmFsaWRhdG9yLCB0aGlzLCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0XHQub24oIFwiZm9jdXNpbi52YWxpZGF0ZSBmb2N1c291dC52YWxpZGF0ZSBrZXl1cC52YWxpZGF0ZVwiLFxuXHRcdFx0XHRcdFwiOnRleHQsIFt0eXBlPSdwYXNzd29yZCddLCBbdHlwZT0nZmlsZSddLCBzZWxlY3QsIHRleHRhcmVhLCBbdHlwZT0nbnVtYmVyJ10sIFt0eXBlPSdzZWFyY2gnXSwgXCIgK1xuXHRcdFx0XHRcdFwiW3R5cGU9J3RlbCddLCBbdHlwZT0ndXJsJ10sIFt0eXBlPSdlbWFpbCddLCBbdHlwZT0nZGF0ZXRpbWUnXSwgW3R5cGU9J2RhdGUnXSwgW3R5cGU9J21vbnRoJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSd3ZWVrJ10sIFt0eXBlPSd0aW1lJ10sIFt0eXBlPSdkYXRldGltZS1sb2NhbCddLCBbdHlwZT0ncmFuZ2UnXSwgW3R5cGU9J2NvbG9yJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSdyYWRpbyddLCBbdHlwZT0nY2hlY2tib3gnXSwgW2NvbnRlbnRlZGl0YWJsZV0sIFt0eXBlPSdidXR0b24nXVwiLCBkZWxlZ2F0ZSApXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lLCBvbGRJRVxuXHRcdFx0XHQvLyBcInNlbGVjdFwiIGlzIHByb3ZpZGVkIGFzIGV2ZW50LnRhcmdldCB3aGVuIGNsaWNraW5nIGEgb3B0aW9uXG5cdFx0XHRcdC5vbiggXCJjbGljay52YWxpZGF0ZVwiLCBcInNlbGVjdCwgb3B0aW9uLCBbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J11cIiwgZGVsZWdhdGUgKTtcblxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmludmFsaWRIYW5kbGVyICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkub24oIFwiaW52YWxpZC1mb3JtLnZhbGlkYXRlXCIsIHRoaXMuc2V0dGluZ3MuaW52YWxpZEhhbmRsZXIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3IuZm9ybS9cblx0XHRmb3JtOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuY2hlY2tGb3JtKCk7XG5cdFx0XHQkLmV4dGVuZCggdGhpcy5zdWJtaXR0ZWQsIHRoaXMuZXJyb3JNYXAgKTtcblx0XHRcdHRoaXMuaW52YWxpZCA9ICQuZXh0ZW5kKCB7fSwgdGhpcy5lcnJvck1hcCApO1xuXHRcdFx0aWYgKCAhdGhpcy52YWxpZCgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkudHJpZ2dlckhhbmRsZXIoIFwiaW52YWxpZC1mb3JtXCIsIFsgdGhpcyBdICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNob3dFcnJvcnMoKTtcblx0XHRcdHJldHVybiB0aGlzLnZhbGlkKCk7XG5cdFx0fSxcblxuXHRcdGNoZWNrRm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnByZXBhcmVGb3JtKCk7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGVsZW1lbnRzID0gKCB0aGlzLmN1cnJlbnRFbGVtZW50cyA9IHRoaXMuZWxlbWVudHMoKSApOyBlbGVtZW50c1sgaSBdOyBpKysgKSB7XG5cdFx0XHRcdHRoaXMuY2hlY2soIGVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnZhbGlkKCk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLmVsZW1lbnQvXG5cdFx0ZWxlbWVudDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgY2xlYW5FbGVtZW50ID0gdGhpcy5jbGVhbiggZWxlbWVudCApLFxuXHRcdFx0XHRjaGVja0VsZW1lbnQgPSB0aGlzLnZhbGlkYXRpb25UYXJnZXRGb3IoIGNsZWFuRWxlbWVudCApLFxuXHRcdFx0XHR2ID0gdGhpcyxcblx0XHRcdFx0cmVzdWx0ID0gdHJ1ZSxcblx0XHRcdFx0cnMsIGdyb3VwO1xuXG5cdFx0XHRpZiAoIGNoZWNrRWxlbWVudCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5pbnZhbGlkWyBjbGVhbkVsZW1lbnQubmFtZSBdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5wcmVwYXJlRWxlbWVudCggY2hlY2tFbGVtZW50ICk7XG5cdFx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggY2hlY2tFbGVtZW50ICk7XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBlbGVtZW50IGlzIGdyb3VwZWQsIHRoZW4gdmFsaWRhdGUgYWxsIGdyb3VwIGVsZW1lbnRzIGFscmVhZHlcblx0XHRcdFx0Ly8gY29udGFpbmluZyBhIHZhbHVlXG5cdFx0XHRcdGdyb3VwID0gdGhpcy5ncm91cHNbIGNoZWNrRWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdGlmICggZ3JvdXAgKSB7XG5cdFx0XHRcdFx0JC5lYWNoKCB0aGlzLmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdGlmICggdGVzdGdyb3VwID09PSBncm91cCAmJiBuYW1lICE9PSBjaGVja0VsZW1lbnQubmFtZSApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYW5FbGVtZW50ID0gdi52YWxpZGF0aW9uVGFyZ2V0Rm9yKCB2LmNsZWFuKCB2LmZpbmRCeU5hbWUoIG5hbWUgKSApICk7XG5cdFx0XHRcdFx0XHRcdGlmICggY2xlYW5FbGVtZW50ICYmIGNsZWFuRWxlbWVudC5uYW1lIGluIHYuaW52YWxpZCApIHtcblx0XHRcdFx0XHRcdFx0XHR2LmN1cnJlbnRFbGVtZW50cy5wdXNoKCBjbGVhbkVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQgPSB2LmNoZWNrKCBjbGVhbkVsZW1lbnQgKSAmJiByZXN1bHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRycyA9IHRoaXMuY2hlY2soIGNoZWNrRWxlbWVudCApICE9PSBmYWxzZTtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0ICYmIHJzO1xuXHRcdFx0XHRpZiAoIHJzICkge1xuXHRcdFx0XHRcdHRoaXMuaW52YWxpZFsgY2hlY2tFbGVtZW50Lm5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuaW52YWxpZFsgY2hlY2tFbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICF0aGlzLm51bWJlck9mSW52YWxpZHMoKSApIHtcblxuXHRcdFx0XHRcdC8vIEhpZGUgZXJyb3IgY29udGFpbmVycyBvbiBsYXN0IGVycm9yXG5cdFx0XHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2hvd0Vycm9ycygpO1xuXG5cdFx0XHRcdC8vIEFkZCBhcmlhLWludmFsaWQgc3RhdHVzIGZvciBzY3JlZW4gcmVhZGVyc1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWludmFsaWRcIiwgIXJzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLnNob3dFcnJvcnMvXG5cdFx0c2hvd0Vycm9yczogZnVuY3Rpb24oIGVycm9ycyApIHtcblx0XHRcdGlmICggZXJyb3JzICkge1xuXHRcdFx0XHR2YXIgdmFsaWRhdG9yID0gdGhpcztcblxuXHRcdFx0XHQvLyBBZGQgaXRlbXMgdG8gZXJyb3IgbGlzdCBhbmQgbWFwXG5cdFx0XHRcdCQuZXh0ZW5kKCB0aGlzLmVycm9yTWFwLCBlcnJvcnMgKTtcblx0XHRcdFx0dGhpcy5lcnJvckxpc3QgPSAkLm1hcCggdGhpcy5lcnJvck1hcCwgZnVuY3Rpb24oIG1lc3NhZ2UsIG5hbWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdG1lc3NhZ2U6IG1lc3NhZ2UsXG5cdFx0XHRcdFx0XHRlbGVtZW50OiB2YWxpZGF0b3IuZmluZEJ5TmFtZSggbmFtZSApWyAwIF1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGl0ZW1zIGZyb20gc3VjY2VzcyBsaXN0XG5cdFx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QgPSAkLmdyZXAoIHRoaXMuc3VjY2Vzc0xpc3QsIGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0XHRcdHJldHVybiAhKCBlbGVtZW50Lm5hbWUgaW4gZXJyb3JzICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5zaG93RXJyb3JzICkge1xuXHRcdFx0XHR0aGlzLnNldHRpbmdzLnNob3dFcnJvcnMuY2FsbCggdGhpcywgdGhpcy5lcnJvck1hcCwgdGhpcy5lcnJvckxpc3QgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGVmYXVsdFNob3dFcnJvcnMoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3IucmVzZXRGb3JtL1xuXHRcdHJlc2V0Rm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICQuZm4ucmVzZXRGb3JtICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkucmVzZXRGb3JtKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmludmFsaWQgPSB7fTtcblx0XHRcdHRoaXMuc3VibWl0dGVkID0ge307XG5cdFx0XHR0aGlzLnByZXBhcmVGb3JtKCk7XG5cdFx0XHR0aGlzLmhpZGVFcnJvcnMoKTtcblx0XHRcdHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHMoKVxuXHRcdFx0XHQucmVtb3ZlRGF0YSggXCJwcmV2aW91c1ZhbHVlXCIgKVxuXHRcdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWludmFsaWRcIiApO1xuXG5cdFx0XHR0aGlzLnJlc2V0RWxlbWVudHMoIGVsZW1lbnRzICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0RWxlbWVudHM6IGZ1bmN0aW9uKCBlbGVtZW50cyApIHtcblx0XHRcdHZhciBpO1xuXG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBlbGVtZW50c1sgaSBdOyBpKysgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlbGVtZW50c1sgaSBdLFxuXHRcdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCBcIlwiICk7XG5cdFx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50c1sgaSBdLm5hbWUgKS5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRzXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG51bWJlck9mSW52YWxpZHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMub2JqZWN0TGVuZ3RoKCB0aGlzLmludmFsaWQgKTtcblx0XHR9LFxuXG5cdFx0b2JqZWN0TGVuZ3RoOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0LyoganNoaW50IHVudXNlZDogZmFsc2UgKi9cblx0XHRcdHZhciBjb3VudCA9IDAsXG5cdFx0XHRcdGk7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblxuXHRcdFx0XHQvLyBUaGlzIGNoZWNrIGFsbG93cyBjb3VudGluZyBlbGVtZW50cyB3aXRoIGVtcHR5IGVycm9yXG5cdFx0XHRcdC8vIG1lc3NhZ2UgYXMgaW52YWxpZCBlbGVtZW50c1xuXHRcdFx0XHRpZiAoIG9ialsgaSBdICE9PSB1bmRlZmluZWQgJiYgb2JqWyBpIF0gIT09IG51bGwgJiYgb2JqWyBpIF0gIT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudDtcblx0XHR9LFxuXG5cdFx0aGlkZUVycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmhpZGVUaGVzZSggdGhpcy50b0hpZGUgKTtcblx0XHR9LFxuXG5cdFx0aGlkZVRoZXNlOiBmdW5jdGlvbiggZXJyb3JzICkge1xuXHRcdFx0ZXJyb3JzLm5vdCggdGhpcy5jb250YWluZXJzICkudGV4dCggXCJcIiApO1xuXHRcdFx0dGhpcy5hZGRXcmFwcGVyKCBlcnJvcnMgKS5oaWRlKCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLnNpemUoKSA9PT0gMDtcblx0XHR9LFxuXG5cdFx0c2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcnJvckxpc3QubGVuZ3RoO1xuXHRcdH0sXG5cblx0XHRmb2N1c0ludmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmZvY3VzSW52YWxpZCApIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQkKCB0aGlzLmZpbmRMYXN0QWN0aXZlKCkgfHwgdGhpcy5lcnJvckxpc3QubGVuZ3RoICYmIHRoaXMuZXJyb3JMaXN0WyAwIF0uZWxlbWVudCB8fCBbXSApXG5cdFx0XHRcdFx0LmZpbHRlciggXCI6dmlzaWJsZVwiIClcblx0XHRcdFx0XHQudHJpZ2dlciggXCJmb2N1c1wiIClcblxuXHRcdFx0XHRcdC8vIE1hbnVhbGx5IHRyaWdnZXIgZm9jdXNpbiBldmVudDsgd2l0aG91dCBpdCwgZm9jdXNpbiBoYW5kbGVyIGlzbid0IGNhbGxlZCwgZmluZExhc3RBY3RpdmUgd29uJ3QgaGF2ZSBhbnl0aGluZyB0byBmaW5kXG5cdFx0XHRcdFx0LnRyaWdnZXIoIFwiZm9jdXNpblwiICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gSWdub3JlIElFIHRocm93aW5nIGVycm9ycyB3aGVuIGZvY3VzaW5nIGhpZGRlbiBlbGVtZW50c1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGZpbmRMYXN0QWN0aXZlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsYXN0QWN0aXZlID0gdGhpcy5sYXN0QWN0aXZlO1xuXHRcdFx0cmV0dXJuIGxhc3RBY3RpdmUgJiYgJC5ncmVwKCB0aGlzLmVycm9yTGlzdCwgZnVuY3Rpb24oIG4gKSB7XG5cdFx0XHRcdHJldHVybiBuLmVsZW1lbnQubmFtZSA9PT0gbGFzdEFjdGl2ZS5uYW1lO1xuXHRcdFx0fSApLmxlbmd0aCA9PT0gMSAmJiBsYXN0QWN0aXZlO1xuXHRcdH0sXG5cblx0XHRlbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdmFsaWRhdG9yID0gdGhpcyxcblx0XHRcdFx0cnVsZXNDYWNoZSA9IHt9O1xuXG5cdFx0XHQvLyBTZWxlY3QgYWxsIHZhbGlkIGlucHV0cyBpbnNpZGUgdGhlIGZvcm0gKG5vIHN1Ym1pdCBvciByZXNldCBidXR0b25zKVxuXHRcdFx0cmV0dXJuICQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0LmZpbmQoIFwiaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIFtjb250ZW50ZWRpdGFibGVdXCIgKVxuXHRcdFx0Lm5vdCggXCI6c3VibWl0LCA6cmVzZXQsIDppbWFnZSwgOmRpc2FibGVkXCIgKVxuXHRcdFx0Lm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVxuXHRcdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gdGhpcy5uYW1lIHx8ICQoIHRoaXMgKS5hdHRyKCBcIm5hbWVcIiApOyAvLyBGb3IgY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdHZhciBpc0NvbnRlbnRFZGl0YWJsZSA9IHR5cGVvZiAkKCB0aGlzICkuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcInVuZGVmaW5lZFwiICYmICQoIHRoaXMgKS5hdHRyKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgIT09IFwiZmFsc2VcIjtcblxuXHRcdFx0XHRpZiAoICFuYW1lICYmIHZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBcIiVvIGhhcyBubyBuYW1lIGFzc2lnbmVkXCIsIHRoaXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBmb3JtIGV4cGFuZG8gb24gY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdGlmICggaXNDb250ZW50RWRpdGFibGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb3JtID0gJCggdGhpcyApLmNsb3Nlc3QoIFwiZm9ybVwiIClbIDAgXTtcblx0XHRcdFx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWdub3JlIGVsZW1lbnRzIHRoYXQgYmVsb25nIHRvIG90aGVyL25lc3RlZCBmb3Jtc1xuXHRcdFx0XHRpZiAoIHRoaXMuZm9ybSAhPT0gdmFsaWRhdG9yLmN1cnJlbnRGb3JtICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNlbGVjdCBvbmx5IHRoZSBmaXJzdCBlbGVtZW50IGZvciBlYWNoIG5hbWUsIGFuZCBvbmx5IHRob3NlIHdpdGggcnVsZXMgc3BlY2lmaWVkXG5cdFx0XHRcdGlmICggbmFtZSBpbiBydWxlc0NhY2hlIHx8ICF2YWxpZGF0b3Iub2JqZWN0TGVuZ3RoKCAkKCB0aGlzICkucnVsZXMoKSApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJ1bGVzQ2FjaGVbIG5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRjbGVhbjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuICQoIHNlbGVjdG9yIClbIDAgXTtcblx0XHR9LFxuXG5cdFx0ZXJyb3JzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlcnJvckNsYXNzID0gdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLnNwbGl0KCBcIiBcIiApLmpvaW4oIFwiLlwiICk7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIi5cIiArIGVycm9yQ2xhc3MsIHRoaXMuZXJyb3JDb250ZXh0ICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0SW50ZXJuYWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QgPSBbXTtcblx0XHRcdHRoaXMuZXJyb3JMaXN0ID0gW107XG5cdFx0XHR0aGlzLmVycm9yTWFwID0ge307XG5cdFx0XHR0aGlzLnRvU2hvdyA9ICQoIFtdICk7XG5cdFx0XHR0aGlzLnRvSGlkZSA9ICQoIFtdICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXRJbnRlcm5hbHMoKTtcblx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggW10gKTtcblx0XHR9LFxuXG5cdFx0cHJlcGFyZUZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLmVycm9ycygpLmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0fSxcblxuXHRcdHByZXBhcmVFbGVtZW50OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKTtcblx0XHR9LFxuXG5cdFx0ZWxlbWVudFZhbHVlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciAkZWxlbWVudCA9ICQoIGVsZW1lbnQgKSxcblx0XHRcdFx0dHlwZSA9IGVsZW1lbnQudHlwZSxcblx0XHRcdFx0aXNDb250ZW50RWRpdGFibGUgPSB0eXBlb2YgJGVsZW1lbnQuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcInVuZGVmaW5lZFwiICYmICRlbGVtZW50LmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJmYWxzZVwiLFxuXHRcdFx0XHR2YWwsIGlkeDtcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInJhZGlvXCIgfHwgdHlwZSA9PT0gXCJjaGVja2JveFwiICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLnZhbCgpO1xuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZWxlbWVudC52YWxpZGl0eSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQudmFsaWRpdHkuYmFkSW5wdXQgPyBcIk5hTlwiIDogJGVsZW1lbnQudmFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNDb250ZW50RWRpdGFibGUgKSB7XG5cdFx0XHRcdHZhbCA9ICRlbGVtZW50LnRleHQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9ICRlbGVtZW50LnZhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZmlsZVwiICkge1xuXG5cdFx0XHRcdC8vIE1vZGVybiBicm93c2VyIChjaHJvbWUgJiBzYWZhcmkpXG5cdFx0XHRcdGlmICggdmFsLnN1YnN0ciggMCwgMTIgKSA9PT0gXCJDOlxcXFxmYWtlcGF0aFxcXFxcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsLnN1YnN0ciggMTIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExlZ2FjeSBicm93c2Vyc1xuXHRcdFx0XHQvLyBVbml4LWJhc2VkIHBhdGhcblx0XHRcdFx0aWR4ID0gdmFsLmxhc3RJbmRleE9mKCBcIi9cIiApO1xuXHRcdFx0XHRpZiAoIGlkeCA+PSAwICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCBpZHggKyAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXaW5kb3dzLWJhc2VkIHBhdGhcblx0XHRcdFx0aWR4ID0gdmFsLmxhc3RJbmRleE9mKCBcIlxcXFxcIiApO1xuXHRcdFx0XHRpZiAoIGlkeCA+PSAwICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCBpZHggKyAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBKdXN0IHRoZSBmaWxlIG5hbWVcblx0XHRcdFx0cmV0dXJuIHZhbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRyZXR1cm4gdmFsLnJlcGxhY2UoIC9cXHIvZywgXCJcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9LFxuXG5cdFx0Y2hlY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMudmFsaWRhdGlvblRhcmdldEZvciggdGhpcy5jbGVhbiggZWxlbWVudCApICk7XG5cblx0XHRcdHZhciBydWxlcyA9ICQoIGVsZW1lbnQgKS5ydWxlcygpLFxuXHRcdFx0XHRydWxlc0NvdW50ID0gJC5tYXAoIHJ1bGVzLCBmdW5jdGlvbiggbiwgaSApIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fSApLmxlbmd0aCxcblx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gZmFsc2UsXG5cdFx0XHRcdHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICksXG5cdFx0XHRcdHJlc3VsdCwgbWV0aG9kLCBydWxlLCBub3JtYWxpemVyO1xuXG5cdFx0XHQvLyBQcmlvcml0aXplIHRoZSBsb2NhbCBub3JtYWxpemVyIGRlZmluZWQgZm9yIHRoaXMgZWxlbWVudCBvdmVyIHRoZSBnbG9iYWwgb25lXG5cdFx0XHQvLyBpZiB0aGUgZm9ybWVyIGV4aXN0cywgb3RoZXJ3aXNlIHVzZXIgdGhlIGdsb2JhbCBvbmUgaW4gY2FzZSBpdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR5cGVvZiBydWxlcy5ub3JtYWxpemVyID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZXIgPSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fSBlbHNlIGlmIChcdHR5cGVvZiB0aGlzLnNldHRpbmdzLm5vcm1hbGl6ZXIgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0bm9ybWFsaXplciA9IHRoaXMuc2V0dGluZ3Mubm9ybWFsaXplcjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgbm9ybWFsaXplciBpcyBkZWZpbmVkLCB0aGVuIGNhbGwgaXQgdG8gcmV0cmVpdmUgdGhlIGNoYW5nZWQgdmFsdWUgaW5zdGVhZFxuXHRcdFx0Ly8gb2YgdXNpbmcgdGhlIHJlYWwgb25lLlxuXHRcdFx0Ly8gTm90ZSB0aGF0IGB0aGlzYCBpbiB0aGUgbm9ybWFsaXplciBpcyBgZWxlbWVudGAuXG5cdFx0XHRpZiAoIG5vcm1hbGl6ZXIgKSB7XG5cdFx0XHRcdHZhbCA9IG5vcm1hbGl6ZXIuY2FsbCggZWxlbWVudCwgdmFsICk7XG5cblx0XHRcdFx0Ly8gRGVsZXRlIHRoZSBub3JtYWxpemVyIGZyb20gcnVsZXMgdG8gYXZvaWQgdHJlYXRpbmcgaXQgYXMgYSBwcmUtZGVmaW5lZCBtZXRob2QuXG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBtZXRob2QgaW4gcnVsZXMgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbWV0ZXJzOiBydWxlc1sgbWV0aG9kIF0gfTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXN1bHQgPSAkLnZhbGlkYXRvci5tZXRob2RzWyBtZXRob2QgXS5jYWxsKCB0aGlzLCB2YWwsIGVsZW1lbnQsIHJ1bGUucGFyYW1ldGVycyApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBtZXRob2QgaW5kaWNhdGVzIHRoYXQgdGhlIGZpZWxkIGlzIG9wdGlvbmFsIGFuZCB0aGVyZWZvcmUgdmFsaWQsXG5cdFx0XHRcdFx0Ly8gZG9uJ3QgbWFyayBpdCBhcyB2YWxpZCB3aGVuIHRoZXJlIGFyZSBubyBvdGhlciBydWxlc1xuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIiAmJiBydWxlc0NvdW50ID09PSAxICkge1xuXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkZXBlbmRlbmN5TWlzbWF0Y2ggPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcInBlbmRpbmdcIiApIHtcblx0XHRcdFx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUubm90KCB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhcmVzdWx0ICkge1xuXHRcdFx0XHRcdFx0dGhpcy5mb3JtYXRBbmRBZGQoIGVsZW1lbnQsIHJ1bGUgKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCBcIkV4Y2VwdGlvbiBvY2N1cnJlZCB3aGVuIGNoZWNraW5nIGVsZW1lbnQgXCIgKyBlbGVtZW50LmlkICsgXCIsIGNoZWNrIHRoZSAnXCIgKyBydWxlLm1ldGhvZCArIFwiJyBtZXRob2QuXCIsIGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBlIGluc3RhbmNlb2YgVHlwZUVycm9yICkge1xuXHRcdFx0XHRcdFx0ZS5tZXNzYWdlICs9IFwiLiAgRXhjZXB0aW9uIG9jY3VycmVkIHdoZW4gY2hlY2tpbmcgZWxlbWVudCBcIiArIGVsZW1lbnQuaWQgKyBcIiwgY2hlY2sgdGhlICdcIiArIHJ1bGUubWV0aG9kICsgXCInIG1ldGhvZC5cIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGRlcGVuZGVuY3lNaXNtYXRjaCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLm9iamVjdExlbmd0aCggcnVsZXMgKSApIHtcblx0XHRcdFx0dGhpcy5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIHZhbGlkYXRpb24gbWV0aG9kXG5cdFx0Ly8gc3BlY2lmaWVkIGluIHRoZSBlbGVtZW50J3MgSFRNTDUgZGF0YSBhdHRyaWJ1dGVcblx0XHQvLyByZXR1cm4gdGhlIGdlbmVyaWMgbWVzc2FnZSBpZiBwcmVzZW50IGFuZCBubyBtZXRob2Qgc3BlY2lmaWMgbWVzc2FnZSBpcyBwcmVzZW50XG5cdFx0Y3VzdG9tRGF0YU1lc3NhZ2U6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKyBtZXRob2QuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdG1ldGhvZC5zdWJzdHJpbmcoIDEgKS50b0xvd2VyQ2FzZSgpICkgfHwgJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgbmFtZSBhbmQgdmFsaWRhdGlvbiBtZXRob2Rcblx0XHRjdXN0b21NZXNzYWdlOiBmdW5jdGlvbiggbmFtZSwgbWV0aG9kICkge1xuXHRcdFx0dmFyIG0gPSB0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBuYW1lIF07XG5cdFx0XHRyZXR1cm4gbSAmJiAoIG0uY29uc3RydWN0b3IgPT09IFN0cmluZyA/IG0gOiBtWyBtZXRob2QgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBSZXR1cm4gdGhlIGZpcnN0IGRlZmluZWQgYXJndW1lbnQsIGFsbG93aW5nIGVtcHR5IHN0cmluZ3Ncblx0XHRmaW5kRGVmaW5lZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYXJndW1lbnRzWyBpIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gYXJndW1lbnRzWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fSxcblxuXHRcdC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyICdydWxlJyB1c2VkIHRvIGJlIGEgc3RyaW5nLCBhbmQgZXh0ZW5kZWQgdG8gYW4gb2JqZWN0IGxpdGVyYWxcblx0XHQvLyBvZiB0aGUgZm9sbG93aW5nIGZvcm06XG5cdFx0Ly8gcnVsZSA9IHtcblx0XHQvLyAgICAgbWV0aG9kOiBcIm1ldGhvZCBuYW1lXCIsXG5cdFx0Ly8gICAgIHBhcmFtZXRlcnM6IFwidGhlIGdpdmVuIG1ldGhvZCBwYXJhbWV0ZXJzXCJcblx0XHQvLyB9XG5cdFx0Ly9cblx0XHQvLyBUaGUgb2xkIGJlaGF2aW9yIHN0aWxsIHN1cHBvcnRlZCwga2VwdCB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGhcblx0XHQvLyBvbGQgY29kZSwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHRcdGRlZmF1bHRNZXNzYWdlOiBmdW5jdGlvbiggZWxlbWVudCwgcnVsZSApIHtcblx0XHRcdGlmICggdHlwZW9mIHJ1bGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogcnVsZSB9O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZmluZERlZmluZWQoXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21NZXNzYWdlKCBlbGVtZW50Lm5hbWUsIHJ1bGUubWV0aG9kICksXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21EYXRhTWVzc2FnZSggZWxlbWVudCwgcnVsZS5tZXRob2QgKSxcblxuXHRcdFx0XHRcdC8vICd0aXRsZScgaXMgbmV2ZXIgdW5kZWZpbmVkLCBzbyBoYW5kbGUgZW1wdHkgc3RyaW5nIGFzIHVuZGVmaW5lZFxuXHRcdFx0XHRcdCF0aGlzLnNldHRpbmdzLmlnbm9yZVRpdGxlICYmIGVsZW1lbnQudGl0bGUgfHwgdW5kZWZpbmVkLFxuXHRcdFx0XHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBydWxlLm1ldGhvZCBdLFxuXHRcdFx0XHRcdFwiPHN0cm9uZz5XYXJuaW5nOiBObyBtZXNzYWdlIGRlZmluZWQgZm9yIFwiICsgZWxlbWVudC5uYW1lICsgXCI8L3N0cm9uZz5cIlxuXHRcdFx0XHQpLFxuXHRcdFx0XHR0aGVyZWdleCA9IC9cXCQ/XFx7KFxcZCspXFx9L2c7XG5cdFx0XHRpZiAoIHR5cGVvZiBtZXNzYWdlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSBtZXNzYWdlLmNhbGwoIHRoaXMsIHJ1bGUucGFyYW1ldGVycywgZWxlbWVudCApO1xuXHRcdFx0fSBlbHNlIGlmICggdGhlcmVnZXgudGVzdCggbWVzc2FnZSApICkge1xuXHRcdFx0XHRtZXNzYWdlID0gJC52YWxpZGF0b3IuZm9ybWF0KCBtZXNzYWdlLnJlcGxhY2UoIHRoZXJlZ2V4LCBcInskMX1cIiApLCBydWxlLnBhcmFtZXRlcnMgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGZvcm1hdEFuZEFkZDogZnVuY3Rpb24oIGVsZW1lbnQsIHJ1bGUgKSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHJ1bGUgKTtcblxuXHRcdFx0dGhpcy5lcnJvckxpc3QucHVzaCgge1xuXHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlLFxuXHRcdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0XHRtZXRob2Q6IHJ1bGUubWV0aG9kXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZXJyb3JNYXBbIGVsZW1lbnQubmFtZSBdID0gbWVzc2FnZTtcblx0XHRcdHRoaXMuc3VibWl0dGVkWyBlbGVtZW50Lm5hbWUgXSA9IG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGFkZFdyYXBwZXI6IGZ1bmN0aW9uKCB0b1RvZ2dsZSApIHtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkge1xuXHRcdFx0XHR0b1RvZ2dsZSA9IHRvVG9nZ2xlLmFkZCggdG9Ub2dnbGUucGFyZW50KCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRvVG9nZ2xlO1xuXHRcdH0sXG5cblx0XHRkZWZhdWx0U2hvd0Vycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSwgZWxlbWVudHMsIGVycm9yO1xuXHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuZXJyb3JMaXN0WyBpIF07IGkrKyApIHtcblx0XHRcdFx0ZXJyb3IgPSB0aGlzLmVycm9yTGlzdFsgaSBdO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVycm9yLmVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5zaG93TGFiZWwoIGVycm9yLmVsZW1lbnQsIGVycm9yLm1lc3NhZ2UgKTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5lcnJvckxpc3QubGVuZ3RoICkge1xuXHRcdFx0XHR0aGlzLnRvU2hvdyA9IHRoaXMudG9TaG93LmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuc3VjY2Vzc0xpc3RbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2hvd0xhYmVsKCB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgZWxlbWVudHMgPSB0aGlzLnZhbGlkRWxlbWVudHMoKTsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSwgdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5ub3QoIHRoaXMudG9TaG93ICk7XG5cdFx0XHR0aGlzLmhpZGVFcnJvcnMoKTtcblx0XHRcdHRoaXMuYWRkV3JhcHBlciggdGhpcy50b1Nob3cgKS5zaG93KCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY3VycmVudEVsZW1lbnRzLm5vdCggdGhpcy5pbnZhbGlkRWxlbWVudHMoKSApO1xuXHRcdH0sXG5cblx0XHRpbnZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuZXJyb3JMaXN0ICkubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0c2hvd0xhYmVsOiBmdW5jdGlvbiggZWxlbWVudCwgbWVzc2FnZSApIHtcblx0XHRcdHZhciBwbGFjZSwgZ3JvdXAsIGVycm9ySUQsIHYsXG5cdFx0XHRcdGVycm9yID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSxcblx0XHRcdFx0ZWxlbWVudElEID0gdGhpcy5pZE9yTmFtZSggZWxlbWVudCApLFxuXHRcdFx0XHRkZXNjcmliZWRCeSA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApO1xuXG5cdFx0XHRpZiAoIGVycm9yLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyBSZWZyZXNoIGVycm9yL3N1Y2Nlc3MgY2xhc3Ncblx0XHRcdFx0ZXJyb3IucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApLmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKTtcblxuXHRcdFx0XHQvLyBSZXBsYWNlIG1lc3NhZ2Ugb24gZXhpc3RpbmcgbGFiZWxcblx0XHRcdFx0ZXJyb3IuaHRtbCggbWVzc2FnZSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBDcmVhdGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0XHRlcnJvciA9ICQoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIj5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIFwiaWRcIiwgZWxlbWVudElEICsgXCItZXJyb3JcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5odG1sKCBtZXNzYWdlIHx8IFwiXCIgKTtcblxuXHRcdFx0XHQvLyBNYWludGFpbiByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgdG8gYmUgcGxhY2VkIGludG8gdGhlIERPTVxuXHRcdFx0XHRwbGFjZSA9IGVycm9yO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblxuXHRcdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlLCBldmVuIGluIElFXG5cdFx0XHRcdFx0Ly8gYWN0dWFsbHkgc2hvd2luZyB0aGUgd3JhcHBlZCBlbGVtZW50IGlzIGhhbmRsZWQgZWxzZXdoZXJlXG5cdFx0XHRcdFx0cGxhY2UgPSBlcnJvci5oaWRlKCkuc2hvdygpLndyYXAoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy53cmFwcGVyICsgXCIvPlwiICkucGFyZW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB0aGlzLmxhYmVsQ29udGFpbmVyLmxlbmd0aCApIHtcblx0XHRcdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyLmFwcGVuZCggcGxhY2UgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmVycm9yUGxhY2VtZW50LmNhbGwoIHRoaXMsIHBsYWNlLCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwbGFjZS5pbnNlcnRBZnRlciggZWxlbWVudCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTGluayBlcnJvciBiYWNrIHRvIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggZXJyb3IuaXMoIFwibGFiZWxcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVycm9yIGlzIGEgbGFiZWwsIHRoZW4gYXNzb2NpYXRlIHVzaW5nICdmb3InXG5cdFx0XHRcdFx0ZXJyb3IuYXR0ciggXCJmb3JcIiwgZWxlbWVudElEICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiBhbiBhc3NvY2lhdGVkIGxhYmVsLCB0aGVuIGl0J3MgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0Ly8gdG8gZXhwbGljaXRseSBhcHBseSBhcmlhLWRlc2NyaWJlZGJ5XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGVycm9yLnBhcmVudHMoIFwibGFiZWxbZm9yPSdcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZWxlbWVudElEICkgKyBcIiddXCIgKS5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRcdFx0ZXJyb3JJRCA9IGVycm9yLmF0dHIoIFwiaWRcIiApO1xuXG5cdFx0XHRcdFx0Ly8gUmVzcGVjdCBleGlzdGluZyBub24tZXJyb3IgYXJpYS1kZXNjcmliZWRieVxuXHRcdFx0XHRcdGlmICggIWRlc2NyaWJlZEJ5ICkge1xuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgPSBlcnJvcklEO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFkZXNjcmliZWRCeS5tYXRjaCggbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBlcnJvcklEICkgKyBcIlxcXFxiXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gZW5kIG9mIGxpc3QgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgKz0gXCIgXCIgKyBlcnJvcklEO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIGRlc2NyaWJlZEJ5ICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGlzIGVsZW1lbnQgaXMgZ3JvdXBlZCwgdGhlbiBhc3NpZ24gdG8gYWxsIGVsZW1lbnRzIGluIHRoZSBzYW1lIGdyb3VwXG5cdFx0XHRcdFx0Z3JvdXAgPSB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0aWYgKCBncm91cCApIHtcblx0XHRcdFx0XHRcdHYgPSB0aGlzO1xuXHRcdFx0XHRcdFx0JC5lYWNoKCB2Lmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCB0ZXN0Z3JvdXAgPT09IGdyb3VwICkge1xuXHRcdFx0XHRcdFx0XHRcdCQoIFwiW25hbWU9J1wiICsgdi5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIsIHYuY3VycmVudEZvcm0gKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiLCBlcnJvci5hdHRyKCBcImlkXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFtZXNzYWdlICYmIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0ZXJyb3IudGV4dCggXCJcIiApO1xuXHRcdFx0XHRpZiAoIHR5cGVvZiB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0ZXJyb3IuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3Muc3VjY2VzcyggZXJyb3IsIGVsZW1lbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIGVycm9yICk7XG5cdFx0fSxcblxuXHRcdGVycm9yc0ZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgbmFtZSA9IHRoaXMuZXNjYXBlQ3NzTWV0YSggdGhpcy5pZE9yTmFtZSggZWxlbWVudCApICksXG5cdFx0XHRcdGRlc2NyaWJlciA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApLFxuXHRcdFx0XHRzZWxlY3RvciA9IFwibGFiZWxbZm9yPSdcIiArIG5hbWUgKyBcIiddLCBsYWJlbFtmb3I9J1wiICsgbmFtZSArIFwiJ10gKlwiO1xuXG5cdFx0XHQvLyAnYXJpYS1kZXNjcmliZWRieScgc2hvdWxkIGRpcmVjdGx5IHJlZmVyZW5jZSB0aGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0aWYgKCBkZXNjcmliZXIgKSB7XG5cdFx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3IgKyBcIiwgI1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBkZXNjcmliZXIgKVxuXHRcdFx0XHRcdC5yZXBsYWNlKCAvXFxzKy9nLCBcIiwgI1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzXG5cdFx0XHRcdC5lcnJvcnMoKVxuXHRcdFx0XHQuZmlsdGVyKCBzZWxlY3RvciApO1xuXHRcdH0sXG5cblx0XHQvLyBTZWUgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9jYXRlZ29yeS9zZWxlY3RvcnMvLCBmb3IgQ1NTXG5cdFx0Ly8gbWV0YS1jaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIGJlIGVzY2FwZWQgaW4gb3JkZXIgdG8gYmUgdXNlZCB3aXRoIEpRdWVyeVxuXHRcdC8vIGFzIGEgbGl0ZXJhbCBwYXJ0IG9mIGEgbmFtZS9pZCBvciBhbnkgc2VsZWN0b3IuXG5cdFx0ZXNjYXBlQ3NzTWV0YTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggLyhbXFxcXCFcIiMkJSYnKCkqKywuLzo7PD0+P0BcXFtcXF1eYHt8fX5dKS9nLCBcIlxcXFwkMVwiICk7XG5cdFx0fSxcblxuXHRcdGlkT3JOYW1lOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF0gfHwgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApID8gZWxlbWVudC5uYW1lIDogZWxlbWVudC5pZCB8fCBlbGVtZW50Lm5hbWUgKTtcblx0XHR9LFxuXG5cdFx0dmFsaWRhdGlvblRhcmdldEZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIElmIHJhZGlvL2NoZWNrYm94LCB2YWxpZGF0ZSBmaXJzdCBlbGVtZW50IGluIGdyb3VwIGluc3RlYWRcblx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsd2F5cyBhcHBseSBpZ25vcmUgZmlsdGVyXG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVsgMCBdO1xuXHRcdH0sXG5cblx0XHRjaGVja2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuICggL3JhZGlvfGNoZWNrYm94L2kgKS50ZXN0KCBlbGVtZW50LnR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZmluZEJ5TmFtZTogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5jdXJyZW50Rm9ybSApLmZpbmQoIFwiW25hbWU9J1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIgKTtcblx0XHR9LFxuXG5cdFx0Z2V0TGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRzd2l0Y2ggKCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRjYXNlIFwic2VsZWN0XCI6XG5cdFx0XHRcdHJldHVybiAkKCBcIm9wdGlvbjpzZWxlY3RlZFwiLCBlbGVtZW50ICkubGVuZ3RoO1xuXHRcdFx0Y2FzZSBcImlucHV0XCI6XG5cdFx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlLmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0ZGVwZW5kOiBmdW5jdGlvbiggcGFyYW0sIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kZXBlbmRUeXBlc1sgdHlwZW9mIHBhcmFtIF0gPyB0aGlzLmRlcGVuZFR5cGVzWyB0eXBlb2YgcGFyYW0gXSggcGFyYW0sIGVsZW1lbnQgKSA6IHRydWU7XG5cdFx0fSxcblxuXHRcdGRlcGVuZFR5cGVzOiB7XG5cdFx0XHRcImJvb2xlYW5cIjogZnVuY3Rpb24oIHBhcmFtICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW07XG5cdFx0XHR9LFxuXHRcdFx0XCJzdHJpbmdcIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gISEkKCBwYXJhbSwgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0fSxcblx0XHRcdFwiZnVuY3Rpb25cIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW0oIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b3B0aW9uYWw6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gISQudmFsaWRhdG9yLm1ldGhvZHMucmVxdWlyZWQuY2FsbCggdGhpcywgdmFsLCBlbGVtZW50ICkgJiYgXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0fSxcblxuXHRcdHN0YXJ0UmVxdWVzdDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRpZiAoICF0aGlzLnBlbmRpbmdbIGVsZW1lbnQubmFtZSBdICkge1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0Kys7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5wZW5kaW5nQ2xhc3MgKTtcblx0XHRcdFx0dGhpcy5wZW5kaW5nWyBlbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHN0b3BSZXF1ZXN0OiBmdW5jdGlvbiggZWxlbWVudCwgdmFsaWQgKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0LS07XG5cblx0XHRcdC8vIFNvbWV0aW1lcyBzeW5jaHJvbml6YXRpb24gZmFpbHMsIG1ha2Ugc3VyZSBwZW5kaW5nUmVxdWVzdCBpcyBuZXZlciA8IDBcblx0XHRcdGlmICggdGhpcy5wZW5kaW5nUmVxdWVzdCA8IDAgKSB7XG5cdFx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHRoaXMucGVuZGluZ1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MucGVuZGluZ0NsYXNzICk7XG5cdFx0XHRpZiAoIHZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICYmIHRoaXMuZm9ybSgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkuc3VibWl0KCk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSBoaWRkZW4gaW5wdXQgdGhhdCB3YXMgdXNlZCBhcyBhIHJlcGxhY2VtZW50IGZvciB0aGVcblx0XHRcdFx0Ly8gbWlzc2luZyBzdWJtaXQgYnV0dG9uLiBUaGUgaGlkZGVuIGlucHV0IGlzIGFkZGVkIGJ5IGBoYW5kbGUoKWBcblx0XHRcdFx0Ly8gdG8gZW5zdXJlIHRoYXQgdGhlIHZhbHVlIG9mIHRoZSB1c2VkIHN1Ym1pdCBidXR0b24gaXMgcGFzc2VkIG9uXG5cdFx0XHRcdC8vIGZvciBzY3JpcHRlZCBzdWJtaXRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZFxuXHRcdFx0XHRpZiAoIHRoaXMuc3VibWl0QnV0dG9uICkge1xuXHRcdFx0XHRcdCQoIFwiaW5wdXQ6aGlkZGVuW25hbWU9J1wiICsgdGhpcy5zdWJtaXRCdXR0b24ubmFtZSArIFwiJ11cIiwgdGhpcy5jdXJyZW50Rm9ybSApLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCAhdmFsaWQgJiYgdGhpcy5wZW5kaW5nUmVxdWVzdCA9PT0gMCAmJiB0aGlzLmZvcm1TdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS50cmlnZ2VySGFuZGxlciggXCJpbnZhbGlkLWZvcm1cIiwgWyB0aGlzIF0gKTtcblx0XHRcdFx0dGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHByZXZpb3VzVmFsdWU6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRtZXRob2QgPSB0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiICYmIG1ldGhvZCB8fCBcInJlbW90ZVwiO1xuXG5cdFx0XHRyZXR1cm4gJC5kYXRhKCBlbGVtZW50LCBcInByZXZpb3VzVmFsdWVcIiApIHx8ICQuZGF0YSggZWxlbWVudCwgXCJwcmV2aW91c1ZhbHVlXCIsIHtcblx0XHRcdFx0b2xkOiBudWxsLFxuXHRcdFx0XHR2YWxpZDogdHJ1ZSxcblx0XHRcdFx0bWVzc2FnZTogdGhpcy5kZWZhdWx0TWVzc2FnZSggZWxlbWVudCwgeyBtZXRob2Q6IG1ldGhvZCB9IClcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gQ2xlYW5zIHVwIGFsbCBmb3JtcyBhbmQgZWxlbWVudHMsIHJlbW92ZXMgdmFsaWRhdG9yLXNwZWNpZmljIGV2ZW50c1xuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldEZvcm0oKTtcblxuXHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApXG5cdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlXCIgKVxuXHRcdFx0XHQucmVtb3ZlRGF0YSggXCJ2YWxpZGF0b3JcIiApXG5cdFx0XHRcdC5maW5kKCBcIi52YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtZXF1YWxUb1wiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtbGVzc1RoYW4tYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1sZXNzVGhhblwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtbGVzc1RoYW4tYmx1clwiIClcblx0XHRcdFx0LmZpbmQoIFwiLnZhbGlkYXRlLWxlc3NUaGFuRXF1YWwtYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1sZXNzVGhhbkVxdWFsXCIgKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggXCJ2YWxpZGF0ZS1sZXNzVGhhbkVxdWFsLWJsdXJcIiApXG5cdFx0XHRcdC5maW5kKCBcIi52YWxpZGF0ZS1ncmVhdGVyVGhhbkVxdWFsLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbFwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbC1ibHVyXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW4tYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1ncmVhdGVyVGhhblwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZ3JlYXRlclRoYW4tYmx1clwiICk7XG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xhc3NSdWxlU2V0dGluZ3M6IHtcblx0XHRyZXF1aXJlZDogeyByZXF1aXJlZDogdHJ1ZSB9LFxuXHRcdGVtYWlsOiB7IGVtYWlsOiB0cnVlIH0sXG5cdFx0dXJsOiB7IHVybDogdHJ1ZSB9LFxuXHRcdGRhdGU6IHsgZGF0ZTogdHJ1ZSB9LFxuXHRcdGRhdGVJU086IHsgZGF0ZUlTTzogdHJ1ZSB9LFxuXHRcdG51bWJlcjogeyBudW1iZXI6IHRydWUgfSxcblx0XHRkaWdpdHM6IHsgZGlnaXRzOiB0cnVlIH0sXG5cdFx0Y3JlZGl0Y2FyZDogeyBjcmVkaXRjYXJkOiB0cnVlIH1cblx0fSxcblxuXHRhZGRDbGFzc1J1bGVzOiBmdW5jdGlvbiggY2xhc3NOYW1lLCBydWxlcyApIHtcblx0XHRpZiAoIGNsYXNzTmFtZS5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nICkge1xuXHRcdFx0dGhpcy5jbGFzc1J1bGVTZXR0aW5nc1sgY2xhc3NOYW1lIF0gPSBydWxlcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5leHRlbmQoIHRoaXMuY2xhc3NSdWxlU2V0dGluZ3MsIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fSxcblxuXHRjbGFzc1J1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdGNsYXNzZXMgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJjbGFzc1wiICk7XG5cblx0XHRpZiAoIGNsYXNzZXMgKSB7XG5cdFx0XHQkLmVhY2goIGNsYXNzZXMuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgaW4gJC52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3MgKSB7XG5cdFx0XHRcdFx0JC5leHRlbmQoIHJ1bGVzLCAkLnZhbGlkYXRvci5jbGFzc1J1bGVTZXR0aW5nc1sgdGhpcyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdG5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGU6IGZ1bmN0aW9uKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApIHtcblxuXHRcdC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIGEgbnVtYmVyIGZvciBudW1iZXIgaW5wdXRzLCBhbmQgZm9yIHRleHQgZm9yIGJhY2t3YXJkcyBjb21wYWJpbGl0eVxuXHRcdC8vIGFsbG93cyB0eXBlPVwiZGF0ZVwiIGFuZCBvdGhlcnMgdG8gYmUgY29tcGFyZWQgYXMgc3RyaW5nc1xuXHRcdGlmICggL21pbnxtYXh8c3RlcC8udGVzdCggbWV0aG9kICkgJiYgKCB0eXBlID09PSBudWxsIHx8IC9udW1iZXJ8cmFuZ2V8dGV4dC8udGVzdCggdHlwZSApICkgKSB7XG5cdFx0XHR2YWx1ZSA9IE51bWJlciggdmFsdWUgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydCBPcGVyYSBNaW5pLCB3aGljaCByZXR1cm5zIE5hTiBmb3IgdW5kZWZpbmVkIG1pbmxlbmd0aFxuXHRcdFx0aWYgKCBpc05hTiggdmFsdWUgKSApIHtcblx0XHRcdFx0dmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCApIHtcblx0XHRcdHJ1bGVzWyBtZXRob2QgXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IG1ldGhvZCAmJiB0eXBlICE9PSBcInJhbmdlXCIgKSB7XG5cblx0XHRcdC8vIEV4Y2VwdGlvbjogdGhlIGpxdWVyeSB2YWxpZGF0ZSAncmFuZ2UnIG1ldGhvZFxuXHRcdFx0Ly8gZG9lcyBub3QgdGVzdCBmb3IgdGhlIGh0bWw1ICdyYW5nZScgdHlwZVxuXHRcdFx0cnVsZXNbIG1ldGhvZCBdID0gdHJ1ZTtcblx0XHR9XG5cdH0sXG5cblx0YXR0cmlidXRlUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgZm9yIDxpbnB1dCByZXF1aXJlZD4gaW4gYm90aCBodG1sNSBhbmQgb2xkZXIgYnJvd3NlcnNcblx0XHRcdGlmICggbWV0aG9kID09PSBcInJlcXVpcmVkXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIG1ldGhvZCApO1xuXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBmb3IgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZVxuXHRcdFx0XHQvLyBhbmQgbm9uLUhUTUw1IGJyb3dzZXJzIG1pZ2h0IGhhdmUgcmVxdWlyZWQ9XCJcIiBtYXJrdXBcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBub24tSFRNTDUgYnJvd3NlcnMgdG8gcmV0dXJuIGJvb2xcblx0XHRcdFx0dmFsdWUgPSAhIXZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSAkZWxlbWVudC5hdHRyKCBtZXRob2QgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vICdtYXhsZW5ndGgnIG1heSBiZSByZXR1cm5lZCBhcyAtMSwgMjE0NzQ4MzY0NyAoIElFICkgYW5kIDUyNDI4OCAoIHNhZmFyaSApIGZvciB0ZXh0IGlucHV0c1xuXHRcdGlmICggcnVsZXMubWF4bGVuZ3RoICYmIC8tMXwyMTQ3NDgzNjQ3fDUyNDI4OC8udGVzdCggcnVsZXMubWF4bGVuZ3RoICkgKSB7XG5cdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRkYXRhUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cdFx0XHR2YWx1ZSA9ICRlbGVtZW50LmRhdGEoIFwicnVsZVwiICsgbWV0aG9kLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBtZXRob2Quc3Vic3RyaW5nKCAxICkudG9Mb3dlckNhc2UoKSApO1xuXG5cdFx0XHQvLyBDYXN0IGVtcHR5IGF0dHJpYnV0ZXMgbGlrZSBgZGF0YS1ydWxlLXJlcXVpcmVkYCB0byBgdHJ1ZWBcblx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0c3RhdGljUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0dmFsaWRhdG9yID0gJC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKTtcblxuXHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLnJ1bGVzICkge1xuXHRcdFx0cnVsZXMgPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCB2YWxpZGF0b3Iuc2V0dGluZ3MucnVsZXNbIGVsZW1lbnQubmFtZSBdICkgfHwge307XG5cdFx0fVxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRub3JtYWxpemVSdWxlczogZnVuY3Rpb24oIHJ1bGVzLCBlbGVtZW50ICkge1xuXG5cdFx0Ly8gSGFuZGxlIGRlcGVuZGVuY3kgY2hlY2tcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcHJvcCwgdmFsICkge1xuXG5cdFx0XHQvLyBJZ25vcmUgcnVsZSB3aGVuIHBhcmFtIGlzIGV4cGxpY2l0bHkgZmFsc2UsIGVnLiByZXF1aXJlZDpmYWxzZVxuXHRcdFx0aWYgKCB2YWwgPT09IGZhbHNlICkge1xuXHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2YWwucGFyYW0gfHwgdmFsLmRlcGVuZHMgKSB7XG5cdFx0XHRcdHZhciBrZWVwUnVsZSA9IHRydWU7XG5cdFx0XHRcdHN3aXRjaCAoIHR5cGVvZiB2YWwuZGVwZW5kcyApIHtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGtlZXBSdWxlID0gISEkKCB2YWwuZGVwZW5kcywgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRrZWVwUnVsZSA9IHZhbC5kZXBlbmRzLmNhbGwoIGVsZW1lbnQsIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGtlZXBSdWxlICkge1xuXHRcdFx0XHRcdHJ1bGVzWyBwcm9wIF0gPSB2YWwucGFyYW0gIT09IHVuZGVmaW5lZCA/IHZhbC5wYXJhbSA6IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKS5yZXNldEVsZW1lbnRzKCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdC8vIEV2YWx1YXRlIHBhcmFtZXRlcnNcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcnVsZSwgcGFyYW1ldGVyICkge1xuXHRcdFx0cnVsZXNbIHJ1bGUgXSA9ICQuaXNGdW5jdGlvbiggcGFyYW1ldGVyICkgJiYgcnVsZSAhPT0gXCJub3JtYWxpemVyXCIgPyBwYXJhbWV0ZXIoIGVsZW1lbnQgKSA6IHBhcmFtZXRlcjtcblx0XHR9ICk7XG5cblx0XHQvLyBDbGVhbiBudW1iZXIgcGFyYW1ldGVyc1xuXHRcdCQuZWFjaCggWyBcIm1pbmxlbmd0aFwiLCBcIm1heGxlbmd0aFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBydWxlc1sgdGhpcyBdICkge1xuXHRcdFx0XHRydWxlc1sgdGhpcyBdID0gTnVtYmVyKCBydWxlc1sgdGhpcyBdICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdCQuZWFjaCggWyBcInJhbmdlbGVuZ3RoXCIsIFwicmFuZ2VcIiBdLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYXJ0cztcblx0XHRcdGlmICggcnVsZXNbIHRoaXMgXSApIHtcblx0XHRcdFx0aWYgKCAkLmlzQXJyYXkoIHJ1bGVzWyB0aGlzIF0gKSApIHtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDAgXSApLCBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDEgXSApIF07XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBydWxlc1sgdGhpcyBdID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHBhcnRzID0gcnVsZXNbIHRoaXMgXS5yZXBsYWNlKCAvW1xcW1xcXV0vZywgXCJcIiApLnNwbGl0KCAvW1xccyxdKy8gKTtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHBhcnRzWyAwIF0gKSwgTnVtYmVyKCBwYXJ0c1sgMSBdICkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGlmICggJC52YWxpZGF0b3IuYXV0b0NyZWF0ZVJhbmdlcyApIHtcblxuXHRcdFx0Ly8gQXV0by1jcmVhdGUgcmFuZ2VzXG5cdFx0XHRpZiAoIHJ1bGVzLm1pbiAhPSBudWxsICYmIHJ1bGVzLm1heCAhPSBudWxsICkge1xuXHRcdFx0XHRydWxlcy5yYW5nZSA9IFsgcnVsZXMubWluLCBydWxlcy5tYXggXTtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1pbjtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1heDtcblx0XHRcdH1cblx0XHRcdGlmICggcnVsZXMubWlubGVuZ3RoICE9IG51bGwgJiYgcnVsZXMubWF4bGVuZ3RoICE9IG51bGwgKSB7XG5cdFx0XHRcdHJ1bGVzLnJhbmdlbGVuZ3RoID0gWyBydWxlcy5taW5sZW5ndGgsIHJ1bGVzLm1heGxlbmd0aCBdO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWlubGVuZ3RoO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHQvLyBDb252ZXJ0cyBhIHNpbXBsZSBzdHJpbmcgdG8gYSB7c3RyaW5nOiB0cnVlfSBydWxlLCBlLmcuLCBcInJlcXVpcmVkXCIgdG8ge3JlcXVpcmVkOnRydWV9XG5cdG5vcm1hbGl6ZVJ1bGU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR2YXIgdHJhbnNmb3JtZWQgPSB7fTtcblx0XHRcdCQuZWFjaCggZGF0YS5zcGxpdCggL1xccy8gKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRyYW5zZm9ybWVkWyB0aGlzIF0gPSB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdFx0ZGF0YSA9IHRyYW5zZm9ybWVkO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IuYWRkTWV0aG9kL1xuXHRhZGRNZXRob2Q6IGZ1bmN0aW9uKCBuYW1lLCBtZXRob2QsIG1lc3NhZ2UgKSB7XG5cdFx0JC52YWxpZGF0b3IubWV0aG9kc1sgbmFtZSBdID0gbWV0aG9kO1xuXHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBuYW1lIF0gPSBtZXNzYWdlICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlIDogJC52YWxpZGF0b3IubWVzc2FnZXNbIG5hbWUgXTtcblx0XHRpZiAoIG1ldGhvZC5sZW5ndGggPCAzICkge1xuXHRcdFx0JC52YWxpZGF0b3IuYWRkQ2xhc3NSdWxlcyggbmFtZSwgJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggbmFtZSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5tZXRob2RzL1xuXHRtZXRob2RzOiB7XG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JlcXVpcmVkLW1ldGhvZC9cblx0XHRyZXF1aXJlZDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgZGVwZW5kZW5jeSBpcyBtZXRcblx0XHRcdGlmICggIXRoaXMuZGVwZW5kKCBwYXJhbSwgZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzZWxlY3RcIiApIHtcblxuXHRcdFx0XHQvLyBDb3VsZCBiZSBhbiBhcnJheSBmb3Igc2VsZWN0LW11bHRpcGxlIG9yIGEgc3RyaW5nLCBib3RoIGFyZSBmaW5lIHRoaXMgd2F5XG5cdFx0XHRcdHZhciB2YWwgPSAkKCBlbGVtZW50ICkudmFsKCk7XG5cdFx0XHRcdHJldHVybiB2YWwgJiYgdmFsLmxlbmd0aCA+IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKSA+IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS5sZW5ndGggPiAwO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2VtYWlsLW1ldGhvZC9cblx0XHRlbWFpbDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBGcm9tIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjdmFsaWQtZS1tYWlsLWFkZHJlc3Ncblx0XHRcdC8vIFJldHJpZXZlZCAyMDE0LTAxLTE0XG5cdFx0XHQvLyBJZiB5b3UgaGF2ZSBhIHByb2JsZW0gd2l0aCB0aGlzIGltcGxlbWVudGF0aW9uLCByZXBvcnQgYSBidWcgYWdhaW5zdCB0aGUgYWJvdmUgc3BlY1xuXHRcdFx0Ly8gT3IgdXNlIGN1c3RvbSBtZXRob2RzIHRvIGltcGxlbWVudCB5b3VyIG93biBlbWFpbCB2YWxpZGF0aW9uXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdXJsLW1ldGhvZC9cblx0XHR1cmw6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gQ29weXJpZ2h0IChjKSAyMDEwLTIwMTMgRGllZ28gUGVyaW5pLCBNSVQgbGljZW5zZWRcblx0XHRcdC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2RwZXJpbmkvNzI5Mjk0XG5cdFx0XHQvLyBzZWUgYWxzbyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvZGVtby91cmwtcmVnZXhcblx0XHRcdC8vIG1vZGlmaWVkIHRvIGFsbG93IHByb3RvY29sLXJlbGF0aXZlIFVSTHNcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oPzooPzooPzpodHRwcz98ZnRwKTopP1xcL1xcLykoPzpcXFMrKD86OlxcUyopP0ApPyg/Oig/ISg/OjEwfDEyNykoPzpcXC5cXGR7MSwzfSl7M30pKD8hKD86MTY5XFwuMjU0fDE5MlxcLjE2OCkoPzpcXC5cXGR7MSwzfSl7Mn0pKD8hMTcyXFwuKD86MVs2LTldfDJcXGR8M1swLTFdKSg/OlxcLlxcZHsxLDN9KXsyfSkoPzpbMS05XVxcZD98MVxcZFxcZHwyWzAxXVxcZHwyMlswLTNdKSg/OlxcLig/OjE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pKXsyfSg/OlxcLig/OlsxLTldXFxkP3wxXFxkXFxkfDJbMC00XVxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0tKikqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSg/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykqKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9KSkuPykoPzo6XFxkezIsNX0pPyg/OlsvPyNdXFxTKik/JC9pLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZS1tZXRob2QvXG5cdFx0ZGF0ZTogKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjYWxsZWQgPSBmYWxzZTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdFx0aWYgKCAhY2FsbGVkICkge1xuXHRcdFx0XHRcdGNhbGxlZCA9IHRydWU7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcdFx0XHRcIlRoZSBgZGF0ZWAgbWV0aG9kIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uICcyLjAuMCcuXFxuXCIgK1xuXHRcdFx0XHRcdFx0XHRcIlBsZWFzZSBkb24ndCB1c2UgaXQsIHNpbmNlIGl0IHJlbGllcyBvbiB0aGUgRGF0ZSBjb25zdHJ1Y3Rvciwgd2hpY2hcXG5cIiArXG5cdFx0XHRcdFx0XHRcdFwiYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IGFjcm9zcyBicm93c2VycyBhbmQgbG9jYWxlcy4gVXNlIGBkYXRlSVNPYFxcblwiICtcblx0XHRcdFx0XHRcdFx0XCJpbnN0ZWFkIG9yIG9uZSBvZiB0aGUgbG9jYWxlIHNwZWNpZmljIG1ldGhvZHMgaW4gYGxvY2FsaXphdGlvbnMvYFxcblwiICtcblx0XHRcdFx0XHRcdFx0XCJhbmQgYGFkZGl0aW9uYWwtbWV0aG9kcy5qc2AuXCJcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAhL0ludmFsaWR8TmFOLy50ZXN0KCBuZXcgRGF0ZSggdmFsdWUgKS50b1N0cmluZygpICk7XG5cdFx0XHR9O1xuXHRcdH0oKSApLFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9kYXRlSVNPLW1ldGhvZC9cblx0XHRkYXRlSVNPOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkezR9W1xcL1xcLV0oMD9bMS05XXwxWzAxMl0pW1xcL1xcLV0oMD9bMS05XXxbMTJdWzAtOV18M1swMV0pJC8udGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9udW1iZXItbWV0aG9kL1xuXHRcdG51bWJlcjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXig/Oi0/XFxkK3wtP1xcZHsxLDN9KD86LFxcZHszfSkrKT8oPzpcXC5cXGQrKT8kLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RpZ2l0cy1tZXRob2QvXG5cdFx0ZGlnaXRzOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkKyQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWlubGVuZ3RoLW1ldGhvZC9cblx0XHRtaW5sZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IGxlbmd0aCA+PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXhsZW5ndGgtbWV0aG9kL1xuXHRcdG1heGxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgbGVuZ3RoIDw9IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JhbmdlbGVuZ3RoLW1ldGhvZC9cblx0XHRyYW5nZWxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgKCBsZW5ndGggPj0gcGFyYW1bIDAgXSAmJiBsZW5ndGggPD0gcGFyYW1bIDEgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21pbi1tZXRob2QvXG5cdFx0bWluOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWx1ZSA+PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXgtbWV0aG9kL1xuXHRcdG1heDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPD0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmFuZ2UtbWV0aG9kL1xuXHRcdHJhbmdlOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAoIHZhbHVlID49IHBhcmFtWyAwIF0gJiYgdmFsdWUgPD0gcGFyYW1bIDEgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3N0ZXAtbWV0aG9kL1xuXHRcdHN0ZXA6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgdHlwZSA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcInR5cGVcIiApLFxuXHRcdFx0XHRlcnJvck1lc3NhZ2UgPSBcIlN0ZXAgYXR0cmlidXRlIG9uIGlucHV0IHR5cGUgXCIgKyB0eXBlICsgXCIgaXMgbm90IHN1cHBvcnRlZC5cIixcblx0XHRcdFx0c3VwcG9ydGVkVHlwZXMgPSBbIFwidGV4dFwiLCBcIm51bWJlclwiLCBcInJhbmdlXCIgXSxcblx0XHRcdFx0cmUgPSBuZXcgUmVnRXhwKCBcIlxcXFxiXCIgKyB0eXBlICsgXCJcXFxcYlwiICksXG5cdFx0XHRcdG5vdFN1cHBvcnRlZCA9IHR5cGUgJiYgIXJlLnRlc3QoIHN1cHBvcnRlZFR5cGVzLmpvaW4oKSApLFxuXHRcdFx0XHRkZWNpbWFsUGxhY2VzID0gZnVuY3Rpb24oIG51bSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2ggPSAoIFwiXCIgKyBudW0gKS5tYXRjaCggLyg/OlxcLihcXGQrKSk/JC8gKTtcblx0XHRcdFx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE51bWJlciBvZiBkaWdpdHMgcmlnaHQgb2YgZGVjaW1hbCBwb2ludC5cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hbIDEgXSA/IG1hdGNoWyAxIF0ubGVuZ3RoIDogMDtcblx0XHRcdFx0fSxcblx0XHRcdFx0dG9JbnQgPSBmdW5jdGlvbiggbnVtICkge1xuXHRcdFx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCBudW0gKiBNYXRoLnBvdyggMTAsIGRlY2ltYWxzICkgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dmFsaWQgPSB0cnVlLFxuXHRcdFx0XHRkZWNpbWFscztcblxuXHRcdFx0Ly8gV29ya3Mgb25seSBmb3IgdGV4dCwgbnVtYmVyIGFuZCByYW5nZSBpbnB1dCB0eXBlc1xuXHRcdFx0Ly8gVE9ETyBmaW5kIGEgd2F5IHRvIHN1cHBvcnQgaW5wdXQgdHlwZXMgZGF0ZSwgZGF0ZXRpbWUsIGRhdGV0aW1lLWxvY2FsLCBtb250aCwgdGltZSBhbmQgd2Vla1xuXHRcdFx0aWYgKCBub3RTdXBwb3J0ZWQgKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggZXJyb3JNZXNzYWdlICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlY2ltYWxzID0gZGVjaW1hbFBsYWNlcyggcGFyYW0gKTtcblxuXHRcdFx0Ly8gVmFsdWUgY2FuJ3QgaGF2ZSB0b28gbWFueSBkZWNpbWFsc1xuXHRcdFx0aWYgKCBkZWNpbWFsUGxhY2VzKCB2YWx1ZSApID4gZGVjaW1hbHMgfHwgdG9JbnQoIHZhbHVlICkgJSB0b0ludCggcGFyYW0gKSAhPT0gMCApIHtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWxpZDtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9lcXVhbFRvLW1ldGhvZC9cblx0XHRlcXVhbFRvOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXG5cdFx0XHQvLyBCaW5kIHRvIHRoZSBibHVyIGV2ZW50IG9mIHRoZSB0YXJnZXQgaW4gb3JkZXIgdG8gcmV2YWxpZGF0ZSB3aGVuZXZlciB0aGUgdGFyZ2V0IGZpZWxkIGlzIHVwZGF0ZWRcblx0XHRcdHZhciB0YXJnZXQgPSAkKCBwYXJhbSApO1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLm9uZm9jdXNvdXQgJiYgdGFyZ2V0Lm5vdCggXCIudmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHRhcmdldC5hZGRDbGFzcyggXCJ2YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApLm9uKCBcImJsdXIudmFsaWRhdGUtZXF1YWxUb1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkKCBlbGVtZW50ICkudmFsaWQoKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB0YXJnZXQudmFsKCk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmVtb3RlLW1ldGhvZC9cblx0XHRyZW1vdGU6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0sIG1ldGhvZCApIHtcblx0XHRcdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0XHR9XG5cblx0XHRcdG1ldGhvZCA9IHR5cGVvZiBtZXRob2QgPT09IFwic3RyaW5nXCIgJiYgbWV0aG9kIHx8IFwicmVtb3RlXCI7XG5cblx0XHRcdHZhciBwcmV2aW91cyA9IHRoaXMucHJldmlvdXNWYWx1ZSggZWxlbWVudCwgbWV0aG9kICksXG5cdFx0XHRcdHZhbGlkYXRvciwgZGF0YSwgb3B0aW9uRGF0YVN0cmluZztcblxuXHRcdFx0aWYgKCAhdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gKSB7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdID0ge307XG5cdFx0XHR9XG5cdFx0XHRwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2UgPSBwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2UgfHwgdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdO1xuXHRcdFx0dGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdID0gcHJldmlvdXMubWVzc2FnZTtcblxuXHRcdFx0cGFyYW0gPSB0eXBlb2YgcGFyYW0gPT09IFwic3RyaW5nXCIgJiYgeyB1cmw6IHBhcmFtIH0gfHwgcGFyYW07XG5cdFx0XHRvcHRpb25EYXRhU3RyaW5nID0gJC5wYXJhbSggJC5leHRlbmQoIHsgZGF0YTogdmFsdWUgfSwgcGFyYW0uZGF0YSApICk7XG5cdFx0XHRpZiAoIHByZXZpb3VzLm9sZCA9PT0gb3B0aW9uRGF0YVN0cmluZyApIHtcblx0XHRcdFx0cmV0dXJuIHByZXZpb3VzLnZhbGlkO1xuXHRcdFx0fVxuXG5cdFx0XHRwcmV2aW91cy5vbGQgPSBvcHRpb25EYXRhU3RyaW5nO1xuXHRcdFx0dmFsaWRhdG9yID0gdGhpcztcblx0XHRcdHRoaXMuc3RhcnRSZXF1ZXN0KCBlbGVtZW50ICk7XG5cdFx0XHRkYXRhID0ge307XG5cdFx0XHRkYXRhWyBlbGVtZW50Lm5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0JC5hamF4KCAkLmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRtb2RlOiBcImFib3J0XCIsXG5cdFx0XHRcdHBvcnQ6IFwidmFsaWRhdGVcIiArIGVsZW1lbnQubmFtZSxcblx0XHRcdFx0ZGF0YVR5cGU6IFwianNvblwiLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRjb250ZXh0OiB2YWxpZGF0b3IuY3VycmVudEZvcm0sXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdFx0XHR2YXIgdmFsaWQgPSByZXNwb25zZSA9PT0gdHJ1ZSB8fCByZXNwb25zZSA9PT0gXCJ0cnVlXCIsXG5cdFx0XHRcdFx0XHRlcnJvcnMsIG1lc3NhZ2UsIHN1Ym1pdHRlZDtcblxuXHRcdFx0XHRcdHZhbGlkYXRvci5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdID0gcHJldmlvdXMub3JpZ2luYWxNZXNzYWdlO1xuXHRcdFx0XHRcdGlmICggdmFsaWQgKSB7XG5cdFx0XHRcdFx0XHRzdWJtaXR0ZWQgPSB2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZDtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5yZXNldEludGVybmFscygpO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnRvSGlkZSA9IHZhbGlkYXRvci5lcnJvcnNGb3IoIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5mb3JtU3VibWl0dGVkID0gc3VibWl0dGVkO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnN1Y2Nlc3NMaXN0LnB1c2goIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5pbnZhbGlkWyBlbGVtZW50Lm5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnNob3dFcnJvcnMoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZXJyb3JzID0ge307XG5cdFx0XHRcdFx0XHRtZXNzYWdlID0gcmVzcG9uc2UgfHwgdmFsaWRhdG9yLmRlZmF1bHRNZXNzYWdlKCBlbGVtZW50LCB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbWV0ZXJzOiB2YWx1ZSB9ICk7XG5cdFx0XHRcdFx0XHRlcnJvcnNbIGVsZW1lbnQubmFtZSBdID0gcHJldmlvdXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuaW52YWxpZFsgZWxlbWVudC5uYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnNob3dFcnJvcnMoIGVycm9ycyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwcmV2aW91cy52YWxpZCA9IHZhbGlkO1xuXHRcdFx0XHRcdHZhbGlkYXRvci5zdG9wUmVxdWVzdCggZWxlbWVudCwgdmFsaWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgcGFyYW0gKSApO1xuXHRcdFx0cmV0dXJuIFwicGVuZGluZ1wiO1xuXHRcdH1cblx0fVxuXG59ICk7XG5cclxuLy8gQWpheCBtb2RlOiBhYm9ydFxuLy8gdXNhZ2U6ICQuYWpheCh7IG1vZGU6IFwiYWJvcnRcIlssIHBvcnQ6IFwidW5pcXVlcG9ydFwiXX0pO1xuLy8gaWYgbW9kZTpcImFib3J0XCIgaXMgdXNlZCwgdGhlIHByZXZpb3VzIHJlcXVlc3Qgb24gdGhhdCBwb3J0IChwb3J0IGNhbiBiZSB1bmRlZmluZWQpIGlzIGFib3J0ZWQgdmlhIFhNTEh0dHBSZXF1ZXN0LmFib3J0KClcblxudmFyIHBlbmRpbmdSZXF1ZXN0cyA9IHt9LFxuXHRhamF4O1xuXG4vLyBVc2UgYSBwcmVmaWx0ZXIgaWYgYXZhaWxhYmxlICgxLjUrKVxuaWYgKCAkLmFqYXhQcmVmaWx0ZXIgKSB7XG5cdCQuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHNldHRpbmdzLCBfLCB4aHIgKSB7XG5cdFx0dmFyIHBvcnQgPSBzZXR0aW5ncy5wb3J0O1xuXHRcdGlmICggc2V0dGluZ3MubW9kZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0aWYgKCBwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSApIHtcblx0XHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0uYWJvcnQoKTtcblx0XHRcdH1cblx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdID0geGhyO1xuXHRcdH1cblx0fSApO1xufSBlbHNlIHtcblxuXHQvLyBQcm94eSBhamF4XG5cdGFqYXggPSAkLmFqYXg7XG5cdCQuYWpheCA9IGZ1bmN0aW9uKCBzZXR0aW5ncyApIHtcblx0XHR2YXIgbW9kZSA9ICggXCJtb2RlXCIgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncyA6ICQuYWpheFNldHRpbmdzICkubW9kZSxcblx0XHRcdHBvcnQgPSAoIFwicG9ydFwiIGluIHNldHRpbmdzID8gc2V0dGluZ3MgOiAkLmFqYXhTZXR0aW5ncyApLnBvcnQ7XG5cdFx0aWYgKCBtb2RlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRpZiAoIHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdICkge1xuXHRcdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXS5hYm9ydCgpO1xuXHRcdFx0fVxuXHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gPSBhamF4LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdHJldHVybiBwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXTtcblx0XHR9XG5cdFx0cmV0dXJuIGFqYXguYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9O1xufVxucmV0dXJuICQ7XHJcbn0pKTsiLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjYWNoZSA9IHt9O1xuXG52YXIgdGhyb3dlciA9IGZ1bmN0aW9uIChpdCkgeyB0aHJvdyBpdDsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIG9wdGlvbnMpIHtcbiAgaWYgKGhhcyhjYWNoZSwgTUVUSE9EX05BTUUpKSByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdO1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgdmFyIEFDQ0VTU09SUyA9IGhhcyhvcHRpb25zLCAnQUNDRVNTT1JTJykgPyBvcHRpb25zLkFDQ0VTU09SUyA6IGZhbHNlO1xuICB2YXIgYXJndW1lbnQwID0gaGFzKG9wdGlvbnMsIDApID8gb3B0aW9uc1swXSA6IHRocm93ZXI7XG4gIHZhciBhcmd1bWVudDEgPSBoYXMob3B0aW9ucywgMSkgPyBvcHRpb25zWzFdIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV0gPSAhIW1ldGhvZCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIGlmIChBQ0NFU1NPUlMgJiYgIURFU0NSSVBUT1JTKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgTyA9IHsgbGVuZ3RoOiAtMSB9O1xuXG4gICAgaWYgKEFDQ0VTU09SUykgZGVmaW5lUHJvcGVydHkoTywgMSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IHRocm93ZXIgfSk7XG4gICAgZWxzZSBPWzFdID0gMTtcblxuICAgIG1ldGhvZC5jYWxsKE8sIGFyZ3VtZW50MCwgYXJndW1lbnQxKTtcbiAgfSk7XG59O1xuIiwiKGZ1bmN0aW9uKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgbGF6eVNpemVzID0gZmFjdG9yeSh3aW5kb3csIHdpbmRvdy5kb2N1bWVudCwgRGF0ZSk7XG5cdHdpbmRvdy5sYXp5U2l6ZXMgPSBsYXp5U2l6ZXM7XG5cdGlmKHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpe1xuXHRcdG1vZHVsZS5leHBvcnRzID0gbGF6eVNpemVzO1xuXHR9XG59KHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgd2luZG93IDoge30sIGZ1bmN0aW9uIGwod2luZG93LCBkb2N1bWVudCwgRGF0ZSkgeyAvLyBQYXNzIGluIHRoZSB3aW5kb2UgRGF0ZSBmdW5jdGlvbiBhbHNvIGZvciBTU1IgYmVjYXVzZSB0aGUgRGF0ZSBjbGFzcyBjYW4gYmUgbG9zdFxuXHQndXNlIHN0cmljdCc7XG5cdC8qanNoaW50IGVxbnVsbDp0cnVlICovXG5cblx0dmFyIGxhenlzaXplcywgbGF6eVNpemVzQ2ZnO1xuXG5cdChmdW5jdGlvbigpe1xuXHRcdHZhciBwcm9wO1xuXG5cdFx0dmFyIGxhenlTaXplc0RlZmF1bHRzID0ge1xuXHRcdFx0bGF6eUNsYXNzOiAnbGF6eWxvYWQnLFxuXHRcdFx0bG9hZGVkQ2xhc3M6ICdsYXp5bG9hZGVkJyxcblx0XHRcdGxvYWRpbmdDbGFzczogJ2xhenlsb2FkaW5nJyxcblx0XHRcdHByZWxvYWRDbGFzczogJ2xhenlwcmVsb2FkJyxcblx0XHRcdGVycm9yQ2xhc3M6ICdsYXp5ZXJyb3InLFxuXHRcdFx0Ly9zdHJpY3RDbGFzczogJ2xhenlzdHJpY3QnLFxuXHRcdFx0YXV0b3NpemVzQ2xhc3M6ICdsYXp5YXV0b3NpemVzJyxcblx0XHRcdHNyY0F0dHI6ICdkYXRhLXNyYycsXG5cdFx0XHRzcmNzZXRBdHRyOiAnZGF0YS1zcmNzZXQnLFxuXHRcdFx0c2l6ZXNBdHRyOiAnZGF0YS1zaXplcycsXG5cdFx0XHQvL3ByZWxvYWRBZnRlckxvYWQ6IGZhbHNlLFxuXHRcdFx0bWluU2l6ZTogNDAsXG5cdFx0XHRjdXN0b21NZWRpYToge30sXG5cdFx0XHRpbml0OiB0cnVlLFxuXHRcdFx0ZXhwRmFjdG9yOiAxLjUsXG5cdFx0XHRoRmFjOiAwLjgsXG5cdFx0XHRsb2FkTW9kZTogMixcblx0XHRcdGxvYWRIaWRkZW46IHRydWUsXG5cdFx0XHRyaWNUaW1lb3V0OiAwLFxuXHRcdFx0dGhyb3R0bGVEZWxheTogMTI1LFxuXHRcdH07XG5cblx0XHRsYXp5U2l6ZXNDZmcgPSB3aW5kb3cubGF6eVNpemVzQ29uZmlnIHx8IHdpbmRvdy5sYXp5c2l6ZXNDb25maWcgfHwge307XG5cblx0XHRmb3IocHJvcCBpbiBsYXp5U2l6ZXNEZWZhdWx0cyl7XG5cdFx0XHRpZighKHByb3AgaW4gbGF6eVNpemVzQ2ZnKSl7XG5cdFx0XHRcdGxhenlTaXplc0NmZ1twcm9wXSA9IGxhenlTaXplc0RlZmF1bHRzW3Byb3BdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSkoKTtcblxuXHRpZiAoIWRvY3VtZW50IHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGluaXQ6IGZ1bmN0aW9uICgpIHt9LFxuXHRcdFx0Y2ZnOiBsYXp5U2l6ZXNDZmcsXG5cdFx0XHRub1N1cHBvcnQ6IHRydWUsXG5cdFx0fTtcblx0fVxuXG5cdHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdHZhciBzdXBwb3J0UGljdHVyZSA9IHdpbmRvdy5IVE1MUGljdHVyZUVsZW1lbnQ7XG5cblx0dmFyIF9hZGRFdmVudExpc3RlbmVyID0gJ2FkZEV2ZW50TGlzdGVuZXInO1xuXG5cdHZhciBfZ2V0QXR0cmlidXRlID0gJ2dldEF0dHJpYnV0ZSc7XG5cblx0LyoqXG5cdCAqIFVwZGF0ZSB0byBiaW5kIHRvIHdpbmRvdyBiZWNhdXNlICd0aGlzJyBiZWNvbWVzIG51bGwgZHVyaW5nIFNTUlxuXHQgKiBidWlsZHMuXG5cdCAqL1xuXHR2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IHdpbmRvd1tfYWRkRXZlbnRMaXN0ZW5lcl0uYmluZCh3aW5kb3cpO1xuXG5cdHZhciBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQ7XG5cblx0dmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgc2V0VGltZW91dDtcblxuXHR2YXIgcmVxdWVzdElkbGVDYWxsYmFjayA9IHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrO1xuXG5cdHZhciByZWdQaWN0dXJlID0gL15waWN0dXJlJC9pO1xuXG5cdHZhciBsb2FkRXZlbnRzID0gWydsb2FkJywgJ2Vycm9yJywgJ2xhenlpbmNsdWRlZCcsICdfbGF6eWxvYWRlZCddO1xuXG5cdHZhciByZWdDbGFzc0NhY2hlID0ge307XG5cblx0dmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuXHR2YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdGlmKCFyZWdDbGFzc0NhY2hlW2Nsc10pe1xuXHRcdFx0cmVnQ2xhc3NDYWNoZVtjbHNdID0gbmV3IFJlZ0V4cCgnKFxcXFxzfF4pJytjbHMrJyhcXFxcc3wkKScpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVnQ2xhc3NDYWNoZVtjbHNdLnRlc3QoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKSAmJiByZWdDbGFzc0NhY2hlW2Nsc107XG5cdH07XG5cblx0dmFyIGFkZENsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHRpZiAoIWhhc0NsYXNzKGVsZSwgY2xzKSl7XG5cdFx0XHRlbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpLnRyaW0oKSArICcgJyArIGNscyk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0dmFyIHJlZztcblx0XHRpZiAoKHJlZyA9IGhhc0NsYXNzKGVsZSxjbHMpKSkge1xuXHRcdFx0ZWxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKS5yZXBsYWNlKHJlZywgJyAnKSk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBhZGRSZW1vdmVMb2FkRXZlbnRzID0gZnVuY3Rpb24oZG9tLCBmbiwgYWRkKXtcblx0XHR2YXIgYWN0aW9uID0gYWRkID8gX2FkZEV2ZW50TGlzdGVuZXIgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cdFx0aWYoYWRkKXtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZG9tLCBmbik7XG5cdFx0fVxuXHRcdGxvYWRFdmVudHMuZm9yRWFjaChmdW5jdGlvbihldnQpe1xuXHRcdFx0ZG9tW2FjdGlvbl0oZXZ0LCBmbik7XG5cdFx0fSk7XG5cdH07XG5cblx0dmFyIHRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uKGVsZW0sIG5hbWUsIGRldGFpbCwgbm9CdWJibGVzLCBub0NhbmNlbGFibGUpe1xuXHRcdHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXG5cdFx0aWYoIWRldGFpbCl7XG5cdFx0XHRkZXRhaWwgPSB7fTtcblx0XHR9XG5cblx0XHRkZXRhaWwuaW5zdGFuY2UgPSBsYXp5c2l6ZXM7XG5cblx0XHRldmVudC5pbml0RXZlbnQobmFtZSwgIW5vQnViYmxlcywgIW5vQ2FuY2VsYWJsZSk7XG5cblx0XHRldmVudC5kZXRhaWwgPSBkZXRhaWw7XG5cblx0XHRlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdHJldHVybiBldmVudDtcblx0fTtcblxuXHR2YXIgdXBkYXRlUG9seWZpbGwgPSBmdW5jdGlvbiAoZWwsIGZ1bGwpe1xuXHRcdHZhciBwb2x5ZmlsbDtcblx0XHRpZiggIXN1cHBvcnRQaWN0dXJlICYmICggcG9seWZpbGwgPSAod2luZG93LnBpY3R1cmVmaWxsIHx8IGxhenlTaXplc0NmZy5wZikgKSApe1xuXHRcdFx0aWYoZnVsbCAmJiBmdWxsLnNyYyAmJiAhZWxbX2dldEF0dHJpYnV0ZV0oJ3NyY3NldCcpKXtcblx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBmdWxsLnNyYyk7XG5cdFx0XHR9XG5cdFx0XHRwb2x5ZmlsbCh7cmVldmFsdWF0ZTogdHJ1ZSwgZWxlbWVudHM6IFtlbF19KTtcblx0XHR9IGVsc2UgaWYoZnVsbCAmJiBmdWxsLnNyYyl7XG5cdFx0XHRlbC5zcmMgPSBmdWxsLnNyYztcblx0XHR9XG5cdH07XG5cblx0dmFyIGdldENTUyA9IGZ1bmN0aW9uIChlbGVtLCBzdHlsZSl7XG5cdFx0cmV0dXJuIChnZXRDb21wdXRlZFN0eWxlKGVsZW0sIG51bGwpIHx8IHt9KVtzdHlsZV07XG5cdH07XG5cblx0dmFyIGdldFdpZHRoID0gZnVuY3Rpb24oZWxlbSwgcGFyZW50LCB3aWR0aCl7XG5cdFx0d2lkdGggPSB3aWR0aCB8fCBlbGVtLm9mZnNldFdpZHRoO1xuXG5cdFx0d2hpbGUod2lkdGggPCBsYXp5U2l6ZXNDZmcubWluU2l6ZSAmJiBwYXJlbnQgJiYgIWVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdHdpZHRoID0gIHBhcmVudC5vZmZzZXRXaWR0aDtcblx0XHRcdHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiB3aWR0aDtcblx0fTtcblxuXHR2YXIgckFGID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHJ1bm5pbmcsIHdhaXRpbmc7XG5cdFx0dmFyIGZpcnN0Rm5zID0gW107XG5cdFx0dmFyIHNlY29uZEZucyA9IFtdO1xuXHRcdHZhciBmbnMgPSBmaXJzdEZucztcblxuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIHJ1bkZucyA9IGZucztcblxuXHRcdFx0Zm5zID0gZmlyc3RGbnMubGVuZ3RoID8gc2Vjb25kRm5zIDogZmlyc3RGbnM7XG5cblx0XHRcdHJ1bm5pbmcgPSB0cnVlO1xuXHRcdFx0d2FpdGluZyA9IGZhbHNlO1xuXG5cdFx0XHR3aGlsZShydW5GbnMubGVuZ3RoKXtcblx0XHRcdFx0cnVuRm5zLnNoaWZ0KCkoKTtcblx0XHRcdH1cblxuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdH07XG5cblx0XHR2YXIgcmFmQmF0Y2ggPSBmdW5jdGlvbihmbiwgcXVldWUpe1xuXHRcdFx0aWYocnVubmluZyAmJiAhcXVldWUpe1xuXHRcdFx0XHRmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm5zLnB1c2goZm4pO1xuXG5cdFx0XHRcdGlmKCF3YWl0aW5nKXtcblx0XHRcdFx0XHR3YWl0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHQoZG9jdW1lbnQuaGlkZGVuID8gc2V0VGltZW91dCA6IHJlcXVlc3RBbmltYXRpb25GcmFtZSkocnVuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyYWZCYXRjaC5fbHNGbHVzaCA9IHJ1bjtcblxuXHRcdHJldHVybiByYWZCYXRjaDtcblx0fSkoKTtcblxuXHR2YXIgckFGSXQgPSBmdW5jdGlvbihmbiwgc2ltcGxlKXtcblx0XHRyZXR1cm4gc2ltcGxlID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyQUYoZm4pO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0XHRcdHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHRcdFx0XHRyQUYoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRmbi5hcHBseSh0aGF0LCBhcmdzKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0O1xuXHR9O1xuXG5cdHZhciB0aHJvdHRsZSA9IGZ1bmN0aW9uKGZuKXtcblx0XHR2YXIgcnVubmluZztcblx0XHR2YXIgbGFzdFRpbWUgPSAwO1xuXHRcdHZhciBnRGVsYXkgPSBsYXp5U2l6ZXNDZmcudGhyb3R0bGVEZWxheTtcblx0XHR2YXIgcklDVGltZW91dCA9IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0O1xuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdFx0bGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdFx0Zm4oKTtcblx0XHR9O1xuXHRcdHZhciBpZGxlQ2FsbGJhY2sgPSByZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHJJQ1RpbWVvdXQgPiA0OSA/XG5cdFx0XHRmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXF1ZXN0SWRsZUNhbGxiYWNrKHJ1biwge3RpbWVvdXQ6IHJJQ1RpbWVvdXR9KTtcblxuXHRcdFx0XHRpZihySUNUaW1lb3V0ICE9PSBsYXp5U2l6ZXNDZmcucmljVGltZW91dCl7XG5cdFx0XHRcdFx0cklDVGltZW91dCA9IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IDpcblx0XHRcdHJBRkl0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHNldFRpbWVvdXQocnVuKTtcblx0XHRcdH0sIHRydWUpXG5cdFx0O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGlzUHJpb3JpdHkpe1xuXHRcdFx0dmFyIGRlbGF5O1xuXG5cdFx0XHRpZigoaXNQcmlvcml0eSA9IGlzUHJpb3JpdHkgPT09IHRydWUpKXtcblx0XHRcdFx0cklDVGltZW91dCA9IDMzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihydW5uaW5nKXtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5uaW5nID0gIHRydWU7XG5cblx0XHRcdGRlbGF5ID0gZ0RlbGF5IC0gKERhdGUubm93KCkgLSBsYXN0VGltZSk7XG5cblx0XHRcdGlmKGRlbGF5IDwgMCl7XG5cdFx0XHRcdGRlbGF5ID0gMDtcblx0XHRcdH1cblxuXHRcdFx0aWYoaXNQcmlvcml0eSB8fCBkZWxheSA8IDkpe1xuXHRcdFx0XHRpZGxlQ2FsbGJhY2soKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldFRpbWVvdXQoaWRsZUNhbGxiYWNrLCBkZWxheSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHQvL2Jhc2VkIG9uIGh0dHA6Ly9tb2Rlcm5qYXZhc2NyaXB0LmJsb2dzcG90LmRlLzIwMTMvMDgvYnVpbGRpbmctYmV0dGVyLWRlYm91bmNlLmh0bWxcblx0dmFyIGRlYm91bmNlID0gZnVuY3Rpb24oZnVuYykge1xuXHRcdHZhciB0aW1lb3V0LCB0aW1lc3RhbXA7XG5cdFx0dmFyIHdhaXQgPSA5OTtcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24oKXtcblx0XHRcdHRpbWVvdXQgPSBudWxsO1xuXHRcdFx0ZnVuYygpO1xuXHRcdH07XG5cdFx0dmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG5cblx0XHRcdGlmIChsYXN0IDwgd2FpdCkge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQocmVxdWVzdElkbGVDYWxsYmFjayB8fCBydW4pKHJ1bik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cblx0XHRcdGlmICghdGltZW91dCkge1xuXHRcdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHR2YXIgbG9hZGVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByZWxvYWRFbGVtcywgaXNDb21wbGV0ZWQsIHJlc2V0UHJlbG9hZGluZ1RpbWVyLCBsb2FkTW9kZSwgc3RhcnRlZDtcblxuXHRcdHZhciBlTHZXLCBlbHZILCBlTHRvcCwgZUxsZWZ0LCBlTHJpZ2h0LCBlTGJvdHRvbSwgaXNCb2R5SGlkZGVuO1xuXG5cdFx0dmFyIHJlZ0ltZyA9IC9eaW1nJC9pO1xuXHRcdHZhciByZWdJZnJhbWUgPSAvXmlmcmFtZSQvaTtcblxuXHRcdHZhciBzdXBwb3J0U2Nyb2xsID0gKCdvbnNjcm9sbCcgaW4gd2luZG93KSAmJiAhKC8oZ2xlfGluZylib3QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpO1xuXG5cdFx0dmFyIHNocmlua0V4cGFuZCA9IDA7XG5cdFx0dmFyIGN1cnJlbnRFeHBhbmQgPSAwO1xuXG5cdFx0dmFyIGlzTG9hZGluZyA9IDA7XG5cdFx0dmFyIGxvd1J1bnMgPSAtMTtcblxuXHRcdHZhciByZXNldFByZWxvYWRpbmcgPSBmdW5jdGlvbihlKXtcblx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0aWYoIWUgfHwgaXNMb2FkaW5nIDwgMCB8fCAhZS50YXJnZXQpe1xuXHRcdFx0XHRpc0xvYWRpbmcgPSAwO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgaXNWaXNpYmxlID0gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdGlmIChpc0JvZHlIaWRkZW4gPT0gbnVsbCkge1xuXHRcdFx0XHRpc0JvZHlIaWRkZW4gPSBnZXRDU1MoZG9jdW1lbnQuYm9keSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGlzQm9keUhpZGRlbiB8fCAhKGdldENTUyhlbGVtLnBhcmVudE5vZGUsICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbicgJiYgZ2V0Q1NTKGVsZW0sICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbicpO1xuXHRcdH07XG5cblx0XHR2YXIgaXNOZXN0ZWRWaXNpYmxlID0gZnVuY3Rpb24oZWxlbSwgZWxlbUV4cGFuZCl7XG5cdFx0XHR2YXIgb3V0ZXJSZWN0O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW07XG5cdFx0XHR2YXIgdmlzaWJsZSA9IGlzVmlzaWJsZShlbGVtKTtcblxuXHRcdFx0ZUx0b3AgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMYm90dG9tICs9IGVsZW1FeHBhbmQ7XG5cdFx0XHRlTGxlZnQgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMcmlnaHQgKz0gZWxlbUV4cGFuZDtcblxuXHRcdFx0d2hpbGUodmlzaWJsZSAmJiAocGFyZW50ID0gcGFyZW50Lm9mZnNldFBhcmVudCkgJiYgcGFyZW50ICE9IGRvY3VtZW50LmJvZHkgJiYgcGFyZW50ICE9IGRvY0VsZW0pe1xuXHRcdFx0XHR2aXNpYmxlID0gKChnZXRDU1MocGFyZW50LCAnb3BhY2l0eScpIHx8IDEpID4gMCk7XG5cblx0XHRcdFx0aWYodmlzaWJsZSAmJiBnZXRDU1MocGFyZW50LCAnb3ZlcmZsb3cnKSAhPSAndmlzaWJsZScpe1xuXHRcdFx0XHRcdG91dGVyUmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0XHR2aXNpYmxlID0gZUxyaWdodCA+IG91dGVyUmVjdC5sZWZ0ICYmXG5cdFx0XHRcdFx0XHRlTGxlZnQgPCBvdXRlclJlY3QucmlnaHQgJiZcblx0XHRcdFx0XHRcdGVMYm90dG9tID4gb3V0ZXJSZWN0LnRvcCAtIDEgJiZcblx0XHRcdFx0XHRcdGVMdG9wIDwgb3V0ZXJSZWN0LmJvdHRvbSArIDFcblx0XHRcdFx0XHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZpc2libGU7XG5cdFx0fTtcblxuXHRcdHZhciBjaGVja0VsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZUxsZW4sIGksIHJlY3QsIGF1dG9Mb2FkRWxlbSwgbG9hZGVkU29tZXRoaW5nLCBlbGVtRXhwYW5kLCBlbGVtTmVnYXRpdmVFeHBhbmQsIGVsZW1FeHBhbmRWYWwsXG5cdFx0XHRcdGJlZm9yZUV4cGFuZFZhbCwgZGVmYXVsdEV4cGFuZCwgcHJlbG9hZEV4cGFuZCwgaEZhYztcblx0XHRcdHZhciBsYXp5bG9hZEVsZW1zID0gbGF6eXNpemVzLmVsZW1lbnRzO1xuXG5cdFx0XHRpZigobG9hZE1vZGUgPSBsYXp5U2l6ZXNDZmcubG9hZE1vZGUpICYmIGlzTG9hZGluZyA8IDggJiYgKGVMbGVuID0gbGF6eWxvYWRFbGVtcy5sZW5ndGgpKXtcblxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0XHRsb3dSdW5zKys7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGVMbGVuOyBpKyspe1xuXG5cdFx0XHRcdFx0aWYoIWxhenlsb2FkRWxlbXNbaV0gfHwgbGF6eWxvYWRFbGVtc1tpXS5fbGF6eVJhY2Upe2NvbnRpbnVlO31cblxuXHRcdFx0XHRcdGlmKCFzdXBwb3J0U2Nyb2xsIHx8IChsYXp5c2l6ZXMucHJlbWF0dXJlVW52ZWlsICYmIGxhenlzaXplcy5wcmVtYXR1cmVVbnZlaWwobGF6eWxvYWRFbGVtc1tpXSkpKXt1bnZlaWxFbGVtZW50KGxhenlsb2FkRWxlbXNbaV0pO2NvbnRpbnVlO31cblxuXHRcdFx0XHRcdGlmKCEoZWxlbUV4cGFuZFZhbCA9IGxhenlsb2FkRWxlbXNbaV1bX2dldEF0dHJpYnV0ZV0oJ2RhdGEtZXhwYW5kJykpIHx8ICEoZWxlbUV4cGFuZCA9IGVsZW1FeHBhbmRWYWwgKiAxKSl7XG5cdFx0XHRcdFx0XHRlbGVtRXhwYW5kID0gY3VycmVudEV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIWRlZmF1bHRFeHBhbmQpIHtcblx0XHRcdFx0XHRcdGRlZmF1bHRFeHBhbmQgPSAoIWxhenlTaXplc0NmZy5leHBhbmQgfHwgbGF6eVNpemVzQ2ZnLmV4cGFuZCA8IDEpID9cblx0XHRcdFx0XHRcdFx0ZG9jRWxlbS5jbGllbnRIZWlnaHQgPiA1MDAgJiYgZG9jRWxlbS5jbGllbnRXaWR0aCA+IDUwMCA/IDUwMCA6IDM3MCA6XG5cdFx0XHRcdFx0XHRcdGxhenlTaXplc0NmZy5leHBhbmQ7XG5cblx0XHRcdFx0XHRcdGxhenlzaXplcy5fZGVmRXggPSBkZWZhdWx0RXhwYW5kO1xuXG5cdFx0XHRcdFx0XHRwcmVsb2FkRXhwYW5kID0gZGVmYXVsdEV4cGFuZCAqIGxhenlTaXplc0NmZy5leHBGYWN0b3I7XG5cdFx0XHRcdFx0XHRoRmFjID0gbGF6eVNpemVzQ2ZnLmhGYWM7XG5cdFx0XHRcdFx0XHRpc0JvZHlIaWRkZW4gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRpZihjdXJyZW50RXhwYW5kIDwgcHJlbG9hZEV4cGFuZCAmJiBpc0xvYWRpbmcgPCAxICYmIGxvd1J1bnMgPiAyICYmIGxvYWRNb2RlID4gMiAmJiAhZG9jdW1lbnQuaGlkZGVuKXtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IHByZWxvYWRFeHBhbmQ7XG5cdFx0XHRcdFx0XHRcdGxvd1J1bnMgPSAwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGxvYWRNb2RlID4gMSAmJiBsb3dSdW5zID4gMSAmJiBpc0xvYWRpbmcgPCA2KXtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IGRlZmF1bHRFeHBhbmQ7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gc2hyaW5rRXhwYW5kO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGJlZm9yZUV4cGFuZFZhbCAhPT0gZWxlbUV4cGFuZCl7XG5cdFx0XHRcdFx0XHRlTHZXID0gaW5uZXJXaWR0aCArIChlbGVtRXhwYW5kICogaEZhYyk7XG5cdFx0XHRcdFx0XHRlbHZIID0gaW5uZXJIZWlnaHQgKyBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdFx0ZWxlbU5lZ2F0aXZlRXhwYW5kID0gZWxlbUV4cGFuZCAqIC0xO1xuXHRcdFx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsID0gZWxlbUV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZWN0ID0gbGF6eWxvYWRFbGVtc1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRcdGlmICgoZUxib3R0b20gPSByZWN0LmJvdHRvbSkgPj0gZWxlbU5lZ2F0aXZlRXhwYW5kICYmXG5cdFx0XHRcdFx0XHQoZUx0b3AgPSByZWN0LnRvcCkgPD0gZWx2SCAmJlxuXHRcdFx0XHRcdFx0KGVMcmlnaHQgPSByZWN0LnJpZ2h0KSA+PSBlbGVtTmVnYXRpdmVFeHBhbmQgKiBoRmFjICYmXG5cdFx0XHRcdFx0XHQoZUxsZWZ0ID0gcmVjdC5sZWZ0KSA8PSBlTHZXICYmXG5cdFx0XHRcdFx0XHQoZUxib3R0b20gfHwgZUxyaWdodCB8fCBlTGxlZnQgfHwgZUx0b3ApICYmXG5cdFx0XHRcdFx0XHQobGF6eVNpemVzQ2ZnLmxvYWRIaWRkZW4gfHwgaXNWaXNpYmxlKGxhenlsb2FkRWxlbXNbaV0pKSAmJlxuXHRcdFx0XHRcdFx0KChpc0NvbXBsZXRlZCAmJiBpc0xvYWRpbmcgPCAzICYmICFlbGVtRXhwYW5kVmFsICYmIChsb2FkTW9kZSA8IDMgfHwgbG93UnVucyA8IDQpKSB8fCBpc05lc3RlZFZpc2libGUobGF6eWxvYWRFbGVtc1tpXSwgZWxlbUV4cGFuZCkpKXtcblx0XHRcdFx0XHRcdHVudmVpbEVsZW1lbnQobGF6eWxvYWRFbGVtc1tpXSk7XG5cdFx0XHRcdFx0XHRsb2FkZWRTb21ldGhpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWYoaXNMb2FkaW5nID4gOSl7YnJlYWs7fVxuXHRcdFx0XHRcdH0gZWxzZSBpZighbG9hZGVkU29tZXRoaW5nICYmIGlzQ29tcGxldGVkICYmICFhdXRvTG9hZEVsZW0gJiZcblx0XHRcdFx0XHRcdGlzTG9hZGluZyA8IDQgJiYgbG93UnVucyA8IDQgJiYgbG9hZE1vZGUgPiAyICYmXG5cdFx0XHRcdFx0XHQocHJlbG9hZEVsZW1zWzBdIHx8IGxhenlTaXplc0NmZy5wcmVsb2FkQWZ0ZXJMb2FkKSAmJlxuXHRcdFx0XHRcdFx0KHByZWxvYWRFbGVtc1swXSB8fCAoIWVsZW1FeHBhbmRWYWwgJiYgKChlTGJvdHRvbSB8fCBlTHJpZ2h0IHx8IGVMbGVmdCB8fCBlTHRvcCkgfHwgbGF6eWxvYWRFbGVtc1tpXVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc2l6ZXNBdHRyKSAhPSAnYXV0bycpKSkpe1xuXHRcdFx0XHRcdFx0YXV0b0xvYWRFbGVtID0gcHJlbG9hZEVsZW1zWzBdIHx8IGxhenlsb2FkRWxlbXNbaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoYXV0b0xvYWRFbGVtICYmICFsb2FkZWRTb21ldGhpbmcpe1xuXHRcdFx0XHRcdHVudmVpbEVsZW1lbnQoYXV0b0xvYWRFbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyA9IHRocm90dGxlKGNoZWNrRWxlbWVudHMpO1xuXG5cdFx0dmFyIHN3aXRjaExvYWRpbmdDbGFzcyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldDtcblxuXHRcdFx0aWYgKGVsZW0uX2xhenlDYWNoZSkge1xuXHRcdFx0XHRkZWxldGUgZWxlbS5fbGF6eUNhY2hlO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlc2V0UHJlbG9hZGluZyhlKTtcblx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkZWRDbGFzcyk7XG5cdFx0XHRyZW1vdmVDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZWxlbSwgcmFmU3dpdGNoTG9hZGluZ0NsYXNzKTtcblx0XHRcdHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWxvYWRlZCcpO1xuXHRcdH07XG5cdFx0dmFyIHJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzID0gckFGSXQoc3dpdGNoTG9hZGluZ0NsYXNzKTtcblx0XHR2YXIgcmFmU3dpdGNoTG9hZGluZ0NsYXNzID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRyYWZlZFN3aXRjaExvYWRpbmdDbGFzcyh7dGFyZ2V0OiBlLnRhcmdldH0pO1xuXHRcdH07XG5cblx0XHR2YXIgY2hhbmdlSWZyYW1lU3JjID0gZnVuY3Rpb24oZWxlbSwgc3JjKXtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGVsZW0uY29udGVudFdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHNyYyk7XG5cdFx0XHR9IGNhdGNoKGUpe1xuXHRcdFx0XHRlbGVtLnNyYyA9IHNyYztcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGhhbmRsZVNvdXJjZXMgPSBmdW5jdGlvbihzb3VyY2Upe1xuXHRcdFx0dmFyIGN1c3RvbU1lZGlhO1xuXG5cdFx0XHR2YXIgc291cmNlU3Jjc2V0ID0gc291cmNlW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zcmNzZXRBdHRyKTtcblxuXHRcdFx0aWYoIChjdXN0b21NZWRpYSA9IGxhenlTaXplc0NmZy5jdXN0b21NZWRpYVtzb3VyY2VbX2dldEF0dHJpYnV0ZV0oJ2RhdGEtbWVkaWEnKSB8fCBzb3VyY2VbX2dldEF0dHJpYnV0ZV0oJ21lZGlhJyldKSApe1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdtZWRpYScsIGN1c3RvbU1lZGlhKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoc291cmNlU3Jjc2V0KXtcblx0XHRcdFx0c291cmNlLnNldEF0dHJpYnV0ZSgnc3Jjc2V0Jywgc291cmNlU3Jjc2V0KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGxhenlVbnZlaWwgPSByQUZJdChmdW5jdGlvbiAoZWxlbSwgZGV0YWlsLCBpc0F1dG8sIHNpemVzLCBpc0ltZyl7XG5cdFx0XHR2YXIgc3JjLCBzcmNzZXQsIHBhcmVudCwgaXNQaWN0dXJlLCBldmVudCwgZmlyZXNMb2FkO1xuXG5cdFx0XHRpZighKGV2ZW50ID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5YmVmb3JldW52ZWlsJywgZGV0YWlsKSkuZGVmYXVsdFByZXZlbnRlZCl7XG5cblx0XHRcdFx0aWYoc2l6ZXMpe1xuXHRcdFx0XHRcdGlmKGlzQXV0byl7XG5cdFx0XHRcdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcuYXV0b3NpemVzQ2xhc3MpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCBzaXplcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3Jjc2V0ID0gZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc3Jjc2V0QXR0cik7XG5cdFx0XHRcdHNyYyA9IGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNyY0F0dHIpO1xuXG5cdFx0XHRcdGlmKGlzSW1nKSB7XG5cdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHRcdGlzUGljdHVyZSA9IHBhcmVudCAmJiByZWdQaWN0dXJlLnRlc3QocGFyZW50Lm5vZGVOYW1lIHx8ICcnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZpcmVzTG9hZCA9IGRldGFpbC5maXJlc0xvYWQgfHwgKCgnc3JjJyBpbiBlbGVtKSAmJiAoc3Jjc2V0IHx8IHNyYyB8fCBpc1BpY3R1cmUpKTtcblxuXHRcdFx0XHRldmVudCA9IHt0YXJnZXQ6IGVsZW19O1xuXG5cdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkaW5nQ2xhc3MpO1xuXG5cdFx0XHRcdGlmKGZpcmVzTG9hZCl7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHJlc2V0UHJlbG9hZGluZ1RpbWVyKTtcblx0XHRcdFx0XHRyZXNldFByZWxvYWRpbmdUaW1lciA9IHNldFRpbWVvdXQocmVzZXRQcmVsb2FkaW5nLCAyNTAwKTtcblx0XHRcdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGVsZW0sIHJhZlN3aXRjaExvYWRpbmdDbGFzcywgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihpc1BpY3R1cmUpe1xuXHRcdFx0XHRcdGZvckVhY2guY2FsbChwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpLCBoYW5kbGVTb3VyY2VzKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHNyY3NldCl7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIHNyY3NldCk7XG5cdFx0XHRcdH0gZWxzZSBpZihzcmMgJiYgIWlzUGljdHVyZSl7XG5cdFx0XHRcdFx0aWYocmVnSWZyYW1lLnRlc3QoZWxlbS5ub2RlTmFtZSkpe1xuXHRcdFx0XHRcdFx0Y2hhbmdlSWZyYW1lU3JjKGVsZW0sIHNyYyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW0uc3JjID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGlzSW1nICYmIChzcmNzZXQgfHwgaXNQaWN0dXJlKSl7XG5cdFx0XHRcdFx0dXBkYXRlUG9seWZpbGwoZWxlbSwge3NyYzogc3JjfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoZWxlbS5fbGF6eVJhY2Upe1xuXHRcdFx0XHRkZWxldGUgZWxlbS5fbGF6eVJhY2U7XG5cdFx0XHR9XG5cdFx0XHRyZW1vdmVDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKTtcblxuXHRcdFx0ckFGKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdC8vIFBhcnQgb2YgdGhpcyBjYW4gYmUgcmVtb3ZlZCBhcyBzb29uIGFzIHRoaXMgZml4IGlzIG9sZGVyOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03NzMxICgyMDE1KVxuXHRcdFx0XHR2YXIgaXNMb2FkZWQgPSBlbGVtLmNvbXBsZXRlICYmIGVsZW0ubmF0dXJhbFdpZHRoID4gMTtcblxuXHRcdFx0XHRpZiggIWZpcmVzTG9hZCB8fCBpc0xvYWRlZCl7XG5cdFx0XHRcdFx0aWYgKGlzTG9hZGVkKSB7XG5cdFx0XHRcdFx0XHRhZGRDbGFzcyhlbGVtLCAnbHMtaXMtY2FjaGVkJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN3aXRjaExvYWRpbmdDbGFzcyhldmVudCk7XG5cdFx0XHRcdFx0ZWxlbS5fbGF6eUNhY2hlID0gdHJ1ZTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZiAoJ19sYXp5Q2FjaGUnIGluIGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlDYWNoZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCA5KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZWxlbS5sb2FkaW5nID09ICdsYXp5Jykge1xuXHRcdFx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0cnVlKTtcblx0XHR9KTtcblxuXHRcdHZhciB1bnZlaWxFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW0pe1xuXHRcdFx0aWYgKGVsZW0uX2xhenlSYWNlKSB7cmV0dXJuO31cblx0XHRcdHZhciBkZXRhaWw7XG5cblx0XHRcdHZhciBpc0ltZyA9IHJlZ0ltZy50ZXN0KGVsZW0ubm9kZU5hbWUpO1xuXG5cdFx0XHQvL2FsbG93IHVzaW5nIHNpemVzPVwiYXV0b1wiLCBidXQgZG9uJ3QgdXNlLiBpdCdzIGludmFsaWQuIFVzZSBkYXRhLXNpemVzPVwiYXV0b1wiIG9yIGEgdmFsaWQgdmFsdWUgZm9yIHNpemVzIGluc3RlYWQgKGkuZS46IHNpemVzPVwiODB2d1wiKVxuXHRcdFx0dmFyIHNpemVzID0gaXNJbWcgJiYgKGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNpemVzQXR0cikgfHwgZWxlbVtfZ2V0QXR0cmlidXRlXSgnc2l6ZXMnKSk7XG5cdFx0XHR2YXIgaXNBdXRvID0gc2l6ZXMgPT0gJ2F1dG8nO1xuXG5cdFx0XHRpZiggKGlzQXV0byB8fCAhaXNDb21wbGV0ZWQpICYmIGlzSW1nICYmIChlbGVtW19nZXRBdHRyaWJ1dGVdKCdzcmMnKSB8fCBlbGVtLnNyY3NldCkgJiYgIWVsZW0uY29tcGxldGUgJiYgIWhhc0NsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5lcnJvckNsYXNzKSAmJiBoYXNDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKSl7cmV0dXJuO31cblxuXHRcdFx0ZGV0YWlsID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5dW52ZWlscmVhZCcpLmRldGFpbDtcblxuXHRcdFx0aWYoaXNBdXRvKXtcblx0XHRcdFx0IGF1dG9TaXplci51cGRhdGVFbGVtKGVsZW0sIHRydWUsIGVsZW0ub2Zmc2V0V2lkdGgpO1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLl9sYXp5UmFjZSA9IHRydWU7XG5cdFx0XHRpc0xvYWRpbmcrKztcblxuXHRcdFx0bGF6eVVudmVpbChlbGVtLCBkZXRhaWwsIGlzQXV0bywgc2l6ZXMsIGlzSW1nKTtcblx0XHR9O1xuXG5cdFx0dmFyIGFmdGVyU2Nyb2xsID0gZGVib3VuY2UoZnVuY3Rpb24oKXtcblx0XHRcdGxhenlTaXplc0NmZy5sb2FkTW9kZSA9IDM7XG5cdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cdFx0fSk7XG5cblx0XHR2YXIgYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyID0gZnVuY3Rpb24oKXtcblx0XHRcdGlmKGxhenlTaXplc0NmZy5sb2FkTW9kZSA9PSAzKXtcblx0XHRcdFx0bGF6eVNpemVzQ2ZnLmxvYWRNb2RlID0gMjtcblx0XHRcdH1cblx0XHRcdGFmdGVyU2Nyb2xsKCk7XG5cdFx0fTtcblxuXHRcdHZhciBvbmxvYWQgPSBmdW5jdGlvbigpe1xuXHRcdFx0aWYoaXNDb21wbGV0ZWQpe3JldHVybjt9XG5cdFx0XHRpZihEYXRlLm5vdygpIC0gc3RhcnRlZCA8IDk5OSl7XG5cdFx0XHRcdHNldFRpbWVvdXQob25sb2FkLCA5OTkpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblxuXHRcdFx0aXNDb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHRsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPSAzO1xuXG5cdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cblx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lciwgdHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRzdGFydGVkID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0XHRsYXp5c2l6ZXMuZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5sYXp5Q2xhc3MpO1xuXHRcdFx0XHRwcmVsb2FkRWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5sYXp5Q2xhc3MgKyAnICcgKyBsYXp5U2l6ZXNDZmcucHJlbG9hZENsYXNzKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdwYWdlc2hvdycsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0aWYgKGUucGVyc2lzdGVkKSB7XG5cdFx0XHRcdFx0XHR2YXIgbG9hZGluZ0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblxuXHRcdFx0XHRcdFx0aWYgKGxvYWRpbmdFbGVtZW50cy5sZW5ndGggJiYgbG9hZGluZ0VsZW1lbnRzLmZvckVhY2gpIHtcblx0XHRcdFx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRsb2FkaW5nRWxlbWVudHMuZm9yRWFjaCggZnVuY3Rpb24gKGltZykge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGltZy5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR1bnZlaWxFbGVtZW50KGltZyk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpe1xuXHRcdFx0XHRcdG5ldyBNdXRhdGlvbk9ic2VydmVyKCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzICkub2JzZXJ2ZSggZG9jRWxlbSwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZX0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2NFbGVtW19hZGRFdmVudExpc3RlbmVyXSgnRE9NTm9kZUluc2VydGVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdFx0ZG9jRWxlbVtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTUF0dHJNb2RpZmllZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHRcdHNldEludGVydmFsKHRocm90dGxlZENoZWNrRWxlbWVudHMsIDk5OSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cblx0XHRcdFx0Ly8sICdmdWxsc2NyZWVuY2hhbmdlJ1xuXHRcdFx0XHRbJ2ZvY3VzJywgJ21vdXNlb3ZlcicsICdjbGljaycsICdsb2FkJywgJ3RyYW5zaXRpb25lbmQnLCAnYW5pbWF0aW9uZW5kJ10uZm9yRWFjaChmdW5jdGlvbihuYW1lKXtcblx0XHRcdFx0XHRkb2N1bWVudFtfYWRkRXZlbnRMaXN0ZW5lcl0obmFtZSwgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKCgvZCR8XmMvLnRlc3QoZG9jdW1lbnQucmVhZHlTdGF0ZSkpKXtcblx0XHRcdFx0XHRvbmxvYWQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25sb2FkKTtcblx0XHRcdFx0XHRkb2N1bWVudFtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzKTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KG9ubG9hZCwgMjAwMDApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYobGF6eXNpemVzLmVsZW1lbnRzLmxlbmd0aCl7XG5cdFx0XHRcdFx0Y2hlY2tFbGVtZW50cygpO1xuXHRcdFx0XHRcdHJBRi5fbHNGbHVzaCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm90dGxlZENoZWNrRWxlbWVudHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNoZWNrRWxlbXM6IHRocm90dGxlZENoZWNrRWxlbWVudHMsXG5cdFx0XHR1bnZlaWw6IHVudmVpbEVsZW1lbnQsXG5cdFx0XHRfYUxTTDogYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyLFxuXHRcdH07XG5cdH0pKCk7XG5cblxuXHR2YXIgYXV0b1NpemVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGF1dG9zaXplc0VsZW1zO1xuXG5cdFx0dmFyIHNpemVFbGVtZW50ID0gckFGSXQoZnVuY3Rpb24oZWxlbSwgcGFyZW50LCBldmVudCwgd2lkdGgpe1xuXHRcdFx0dmFyIHNvdXJjZXMsIGksIGxlbjtcblx0XHRcdGVsZW0uX2xhenlzaXplc1dpZHRoID0gd2lkdGg7XG5cdFx0XHR3aWR0aCArPSAncHgnO1xuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCB3aWR0aCk7XG5cblx0XHRcdGlmKHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpKXtcblx0XHRcdFx0c291cmNlcyA9IHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyk7XG5cdFx0XHRcdGZvcihpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0c291cmNlc1tpXS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgd2lkdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFldmVudC5kZXRhaWwuZGF0YUF0dHIpe1xuXHRcdFx0XHR1cGRhdGVQb2x5ZmlsbChlbGVtLCBldmVudC5kZXRhaWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHZhciBnZXRTaXplRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhQXR0ciwgd2lkdGgpe1xuXHRcdFx0dmFyIGV2ZW50O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYocGFyZW50KXtcblx0XHRcdFx0d2lkdGggPSBnZXRXaWR0aChlbGVtLCBwYXJlbnQsIHdpZHRoKTtcblx0XHRcdFx0ZXZlbnQgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenliZWZvcmVzaXplcycsIHt3aWR0aDogd2lkdGgsIGRhdGFBdHRyOiAhIWRhdGFBdHRyfSk7XG5cblx0XHRcdFx0aWYoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpe1xuXHRcdFx0XHRcdHdpZHRoID0gZXZlbnQuZGV0YWlsLndpZHRoO1xuXG5cdFx0XHRcdFx0aWYod2lkdGggJiYgd2lkdGggIT09IGVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdFx0XHRcdHNpemVFbGVtZW50KGVsZW0sIHBhcmVudCwgZXZlbnQsIHdpZHRoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIHVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGk7XG5cdFx0XHR2YXIgbGVuID0gYXV0b3NpemVzRWxlbXMubGVuZ3RoO1xuXHRcdFx0aWYobGVuKXtcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGxlbjsgaSsrKXtcblx0XHRcdFx0XHRnZXRTaXplRWxlbWVudChhdXRvc2l6ZXNFbGVtc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBkZWJvdW5jZSh1cGRhdGVFbGVtZW50c1NpemVzKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRhdXRvc2l6ZXNFbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ2ZnLmF1dG9zaXplc0NsYXNzKTtcblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyk7XG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tFbGVtczogZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyxcblx0XHRcdHVwZGF0ZUVsZW06IGdldFNpemVFbGVtZW50XG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0aWYoIWluaXQuaSAmJiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXtcblx0XHRcdGluaXQuaSA9IHRydWU7XG5cdFx0XHRhdXRvU2l6ZXIuXygpO1xuXHRcdFx0bG9hZGVyLl8oKTtcblx0XHR9XG5cdH07XG5cblx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdGlmKGxhenlTaXplc0NmZy5pbml0KXtcblx0XHRcdGluaXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGxhenlzaXplcyA9IHtcblx0XHRjZmc6IGxhenlTaXplc0NmZyxcblx0XHRhdXRvU2l6ZXI6IGF1dG9TaXplcixcblx0XHRsb2FkZXI6IGxvYWRlcixcblx0XHRpbml0OiBpbml0LFxuXHRcdHVQOiB1cGRhdGVQb2x5ZmlsbCxcblx0XHRhQzogYWRkQ2xhc3MsXG5cdFx0ckM6IHJlbW92ZUNsYXNzLFxuXHRcdGhDOiBoYXNDbGFzcyxcblx0XHRmaXJlOiB0cmlnZ2VyRXZlbnQsXG5cdFx0Z1c6IGdldFdpZHRoLFxuXHRcdHJBRjogckFGLFxuXHR9O1xuXG5cdHJldHVybiBsYXp5c2l6ZXM7XG59XG4pKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhKE5BTUUgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcuY2FsbCh0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIGVsc2UgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBmb3JFYWNoLCBtYXAsIGZpbHRlciwgc29tZSwgZXZlcnksIGZpbmQsIGZpbmRJbmRleCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpXG59O1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFsZXJ0LmpzIHYzLjQuMVxuICogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvMy40L2phdmFzY3JpcHQvI2FsZXJ0c1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFMRVJUIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBkaXNtaXNzID0gJ1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXSdcbiAgdmFyIEFsZXJ0ICAgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAkKGVsKS5vbignY2xpY2snLCBkaXNtaXNzLCB0aGlzLmNsb3NlKVxuICB9XG5cbiAgQWxlcnQuVkVSU0lPTiA9ICczLjQuMSdcblxuICBBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICAgPSAkKHRoaXMpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICBzZWxlY3RvciAgICA9IHNlbGVjdG9yID09PSAnIycgPyBbXSA6IHNlbGVjdG9yXG4gICAgdmFyICRwYXJlbnQgPSAkKGRvY3VtZW50KS5maW5kKHNlbGVjdG9yKVxuXG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgaWYgKCEkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgJHBhcmVudCA9ICR0aGlzLmNsb3Nlc3QoJy5hbGVydCcpXG4gICAgfVxuXG4gICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdjbG9zZS5icy5hbGVydCcpKVxuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgJHBhcmVudC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRWxlbWVudCgpIHtcbiAgICAgIC8vIGRldGFjaCBmcm9tIHBhcmVudCwgZmlyZSBldmVudCB0aGVuIGNsZWFuIHVwIGRhdGFcbiAgICAgICRwYXJlbnQuZGV0YWNoKCkudHJpZ2dlcignY2xvc2VkLmJzLmFsZXJ0JykucmVtb3ZlKClcbiAgICB9XG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkcGFyZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHBhcmVudFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCByZW1vdmVFbGVtZW50KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQWxlcnQuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgcmVtb3ZlRWxlbWVudCgpXG4gIH1cblxuXG4gIC8vIEFMRVJUIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuYWxlcnQnKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JywgKGRhdGEgPSBuZXcgQWxlcnQodGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hbGVydFxuXG4gICQuZm4uYWxlcnQgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hbGVydC5Db25zdHJ1Y3RvciA9IEFsZXJ0XG5cblxuICAvLyBBTEVSVCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWxlcnQubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFsZXJ0ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUxFUlQgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuYWxlcnQuZGF0YS1hcGknLCBkaXNtaXNzLCBBbGVydC5wcm90b3R5cGUuY2xvc2UpXG5cbn0oalF1ZXJ5KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIi8qIVxuICogQGZpbGVPdmVydmlldyBUb3VjaFN3aXBlIC0galF1ZXJ5IFBsdWdpblxuICogQHZlcnNpb24gMS42LjE4XG4gKlxuICogQGF1dGhvciBNYXR0IEJyeXNvbiBodHRwOi8vd3d3LmdpdGh1Yi5jb20vbWF0dGJyeXNvblxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWF0dGJyeXNvbi9Ub3VjaFN3aXBlLUpxdWVyeS1QbHVnaW5cbiAqIEBzZWUgaHR0cDovL2xhYnMucmFtcGludGVyYWN0aXZlLmNvLnVrL3RvdWNoU3dpcGUvXG4gKiBAc2VlIGh0dHA6Ly9wbHVnaW5zLmpxdWVyeS5jb20vcHJvamVjdC90b3VjaFN3aXBlXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDEwLTIwMTUgTWF0dCBCcnlzb25cbiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLlxuICpcbiAqL1xuIWZ1bmN0aW9uKGZhY3Rvcnkpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lLmFtZC5qUXVlcnk/ZGVmaW5lKFtcImpxdWVyeVwiXSxmYWN0b3J5KTpmYWN0b3J5KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP3JlcXVpcmUoXCJqcXVlcnlcIik6alF1ZXJ5KX0oZnVuY3Rpb24oJCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaW5pdChvcHRpb25zKXtyZXR1cm4hb3B0aW9uc3x8dm9pZCAwIT09b3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGx8fHZvaWQgMD09PW9wdGlvbnMuc3dpcGUmJnZvaWQgMD09PW9wdGlvbnMuc3dpcGVTdGF0dXN8fChvcHRpb25zLmFsbG93UGFnZVNjcm9sbD1OT05FKSx2b2lkIDAhPT1vcHRpb25zLmNsaWNrJiZ2b2lkIDA9PT1vcHRpb25zLnRhcCYmKG9wdGlvbnMudGFwPW9wdGlvbnMuY2xpY2spLG9wdGlvbnN8fChvcHRpb25zPXt9KSxvcHRpb25zPSQuZXh0ZW5kKHt9LCQuZm4uc3dpcGUuZGVmYXVsdHMsb3B0aW9ucyksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyICR0aGlzPSQodGhpcykscGx1Z2luPSR0aGlzLmRhdGEoUExVR0lOX05TKTtwbHVnaW58fChwbHVnaW49bmV3IFRvdWNoU3dpcGUodGhpcyxvcHRpb25zKSwkdGhpcy5kYXRhKFBMVUdJTl9OUyxwbHVnaW4pKX0pfWZ1bmN0aW9uIFRvdWNoU3dpcGUoZWxlbWVudCxvcHRpb25zKXtmdW5jdGlvbiB0b3VjaFN0YXJ0KGpxRXZlbnQpe2lmKCEoZ2V0VG91Y2hJblByb2dyZXNzKCl8fCQoanFFdmVudC50YXJnZXQpLmNsb3Nlc3Qob3B0aW9ucy5leGNsdWRlZEVsZW1lbnRzLCRlbGVtZW50KS5sZW5ndGg+MCkpe3ZhciBldmVudD1qcUV2ZW50Lm9yaWdpbmFsRXZlbnQ/anFFdmVudC5vcmlnaW5hbEV2ZW50OmpxRXZlbnQ7aWYoIWV2ZW50LnBvaW50ZXJUeXBlfHxcIm1vdXNlXCIhPWV2ZW50LnBvaW50ZXJUeXBlfHwwIT1vcHRpb25zLmZhbGxiYWNrVG9Nb3VzZUV2ZW50cyl7dmFyIHJldCx0b3VjaGVzPWV2ZW50LnRvdWNoZXMsZXZ0PXRvdWNoZXM/dG91Y2hlc1swXTpldmVudDtyZXR1cm4gcGhhc2U9UEhBU0VfU1RBUlQsdG91Y2hlcz9maW5nZXJDb3VudD10b3VjaGVzLmxlbmd0aDpvcHRpb25zLnByZXZlbnREZWZhdWx0RXZlbnRzIT09ITEmJmpxRXZlbnQucHJldmVudERlZmF1bHQoKSxkaXN0YW5jZT0wLGRpcmVjdGlvbj1udWxsLGN1cnJlbnREaXJlY3Rpb249bnVsbCxwaW5jaERpcmVjdGlvbj1udWxsLGR1cmF0aW9uPTAsc3RhcnRUb3VjaGVzRGlzdGFuY2U9MCxlbmRUb3VjaGVzRGlzdGFuY2U9MCxwaW5jaFpvb209MSxwaW5jaERpc3RhbmNlPTAsbWF4aW11bXNNYXA9Y3JlYXRlTWF4aW11bXNEYXRhKCksY2FuY2VsTXVsdGlGaW5nZXJSZWxlYXNlKCksY3JlYXRlRmluZ2VyRGF0YSgwLGV2dCksIXRvdWNoZXN8fGZpbmdlckNvdW50PT09b3B0aW9ucy5maW5nZXJzfHxvcHRpb25zLmZpbmdlcnM9PT1BTExfRklOR0VSU3x8aGFzUGluY2hlcygpPyhzdGFydFRpbWU9Z2V0VGltZVN0YW1wKCksMj09ZmluZ2VyQ291bnQmJihjcmVhdGVGaW5nZXJEYXRhKDEsdG91Y2hlc1sxXSksc3RhcnRUb3VjaGVzRGlzdGFuY2U9ZW5kVG91Y2hlc0Rpc3RhbmNlPWNhbGN1bGF0ZVRvdWNoZXNEaXN0YW5jZShmaW5nZXJEYXRhWzBdLnN0YXJ0LGZpbmdlckRhdGFbMV0uc3RhcnQpKSwob3B0aW9ucy5zd2lwZVN0YXR1c3x8b3B0aW9ucy5waW5jaFN0YXR1cykmJihyZXQ9dHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2UpKSk6cmV0PSExLHJldD09PSExPyhwaGFzZT1QSEFTRV9DQU5DRUwsdHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2UpLHJldCk6KG9wdGlvbnMuaG9sZCYmKGhvbGRUaW1lb3V0PXNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpeyRlbGVtZW50LnRyaWdnZXIoXCJob2xkXCIsW2V2ZW50LnRhcmdldF0pLG9wdGlvbnMuaG9sZCYmKHJldD1vcHRpb25zLmhvbGQuY2FsbCgkZWxlbWVudCxldmVudCxldmVudC50YXJnZXQpKX0sdGhpcyksb3B0aW9ucy5sb25nVGFwVGhyZXNob2xkKSksc2V0VG91Y2hJblByb2dyZXNzKCEwKSxudWxsKX19fWZ1bmN0aW9uIHRvdWNoTW92ZShqcUV2ZW50KXt2YXIgZXZlbnQ9anFFdmVudC5vcmlnaW5hbEV2ZW50P2pxRXZlbnQub3JpZ2luYWxFdmVudDpqcUV2ZW50O2lmKHBoYXNlIT09UEhBU0VfRU5EJiZwaGFzZSE9PVBIQVNFX0NBTkNFTCYmIWluTXVsdGlGaW5nZXJSZWxlYXNlKCkpe3ZhciByZXQsdG91Y2hlcz1ldmVudC50b3VjaGVzLGV2dD10b3VjaGVzP3RvdWNoZXNbMF06ZXZlbnQsY3VycmVudEZpbmdlcj11cGRhdGVGaW5nZXJEYXRhKGV2dCk7aWYoZW5kVGltZT1nZXRUaW1lU3RhbXAoKSx0b3VjaGVzJiYoZmluZ2VyQ291bnQ9dG91Y2hlcy5sZW5ndGgpLG9wdGlvbnMuaG9sZCYmY2xlYXJUaW1lb3V0KGhvbGRUaW1lb3V0KSxwaGFzZT1QSEFTRV9NT1ZFLDI9PWZpbmdlckNvdW50JiYoMD09c3RhcnRUb3VjaGVzRGlzdGFuY2U/KGNyZWF0ZUZpbmdlckRhdGEoMSx0b3VjaGVzWzFdKSxzdGFydFRvdWNoZXNEaXN0YW5jZT1lbmRUb3VjaGVzRGlzdGFuY2U9Y2FsY3VsYXRlVG91Y2hlc0Rpc3RhbmNlKGZpbmdlckRhdGFbMF0uc3RhcnQsZmluZ2VyRGF0YVsxXS5zdGFydCkpOih1cGRhdGVGaW5nZXJEYXRhKHRvdWNoZXNbMV0pLGVuZFRvdWNoZXNEaXN0YW5jZT1jYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2UoZmluZ2VyRGF0YVswXS5lbmQsZmluZ2VyRGF0YVsxXS5lbmQpLHBpbmNoRGlyZWN0aW9uPWNhbGN1bGF0ZVBpbmNoRGlyZWN0aW9uKGZpbmdlckRhdGFbMF0uZW5kLGZpbmdlckRhdGFbMV0uZW5kKSkscGluY2hab29tPWNhbGN1bGF0ZVBpbmNoWm9vbShzdGFydFRvdWNoZXNEaXN0YW5jZSxlbmRUb3VjaGVzRGlzdGFuY2UpLHBpbmNoRGlzdGFuY2U9TWF0aC5hYnMoc3RhcnRUb3VjaGVzRGlzdGFuY2UtZW5kVG91Y2hlc0Rpc3RhbmNlKSksZmluZ2VyQ291bnQ9PT1vcHRpb25zLmZpbmdlcnN8fG9wdGlvbnMuZmluZ2Vycz09PUFMTF9GSU5HRVJTfHwhdG91Y2hlc3x8aGFzUGluY2hlcygpKXtpZihkaXJlY3Rpb249Y2FsY3VsYXRlRGlyZWN0aW9uKGN1cnJlbnRGaW5nZXIuc3RhcnQsY3VycmVudEZpbmdlci5lbmQpLGN1cnJlbnREaXJlY3Rpb249Y2FsY3VsYXRlRGlyZWN0aW9uKGN1cnJlbnRGaW5nZXIubGFzdCxjdXJyZW50RmluZ2VyLmVuZCksdmFsaWRhdGVEZWZhdWx0RXZlbnQoanFFdmVudCxjdXJyZW50RGlyZWN0aW9uKSxkaXN0YW5jZT1jYWxjdWxhdGVEaXN0YW5jZShjdXJyZW50RmluZ2VyLnN0YXJ0LGN1cnJlbnRGaW5nZXIuZW5kKSxkdXJhdGlvbj1jYWxjdWxhdGVEdXJhdGlvbigpLHNldE1heERpc3RhbmNlKGRpcmVjdGlvbixkaXN0YW5jZSkscmV0PXRyaWdnZXJIYW5kbGVyKGV2ZW50LHBoYXNlKSwhb3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZHx8b3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlKXt2YXIgaW5Cb3VuZHM9ITA7aWYob3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlKXt2YXIgYm91bmRzPWdldGJvdW5kcyh0aGlzKTtpbkJvdW5kcz1pc0luQm91bmRzKGN1cnJlbnRGaW5nZXIuZW5kLGJvdW5kcyl9IW9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQmJmluQm91bmRzP3BoYXNlPWdldE5leHRQaGFzZShQSEFTRV9NT1ZFKTpvcHRpb25zLnRyaWdnZXJPblRvdWNoTGVhdmUmJiFpbkJvdW5kcyYmKHBoYXNlPWdldE5leHRQaGFzZShQSEFTRV9FTkQpKSxwaGFzZSE9UEhBU0VfQ0FOQ0VMJiZwaGFzZSE9UEhBU0VfRU5EfHx0cmlnZ2VySGFuZGxlcihldmVudCxwaGFzZSl9fWVsc2UgcGhhc2U9UEhBU0VfQ0FOQ0VMLHRyaWdnZXJIYW5kbGVyKGV2ZW50LHBoYXNlKTtyZXQ9PT0hMSYmKHBoYXNlPVBIQVNFX0NBTkNFTCx0cmlnZ2VySGFuZGxlcihldmVudCxwaGFzZSkpfX1mdW5jdGlvbiB0b3VjaEVuZChqcUV2ZW50KXt2YXIgZXZlbnQ9anFFdmVudC5vcmlnaW5hbEV2ZW50P2pxRXZlbnQub3JpZ2luYWxFdmVudDpqcUV2ZW50LHRvdWNoZXM9ZXZlbnQudG91Y2hlcztpZih0b3VjaGVzKXtpZih0b3VjaGVzLmxlbmd0aCYmIWluTXVsdGlGaW5nZXJSZWxlYXNlKCkpcmV0dXJuIHN0YXJ0TXVsdGlGaW5nZXJSZWxlYXNlKGV2ZW50KSwhMDtpZih0b3VjaGVzLmxlbmd0aCYmaW5NdWx0aUZpbmdlclJlbGVhc2UoKSlyZXR1cm4hMH1yZXR1cm4gaW5NdWx0aUZpbmdlclJlbGVhc2UoKSYmKGZpbmdlckNvdW50PWZpbmdlckNvdW50QXRSZWxlYXNlKSxlbmRUaW1lPWdldFRpbWVTdGFtcCgpLGR1cmF0aW9uPWNhbGN1bGF0ZUR1cmF0aW9uKCksZGlkU3dpcGVCYWNrVG9DYW5jZWwoKXx8IXZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpPyhwaGFzZT1QSEFTRV9DQU5DRUwsdHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2UpKTpvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kfHxvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kPT09ITEmJnBoYXNlPT09UEhBU0VfTU9WRT8ob3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV2ZW50cyE9PSExJiZqcUV2ZW50LmNhbmNlbGFibGUhPT0hMSYmanFFdmVudC5wcmV2ZW50RGVmYXVsdCgpLHBoYXNlPVBIQVNFX0VORCx0cmlnZ2VySGFuZGxlcihldmVudCxwaGFzZSkpOiFvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kJiZoYXNUYXAoKT8ocGhhc2U9UEhBU0VfRU5ELHRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCxwaGFzZSxUQVApKTpwaGFzZT09PVBIQVNFX01PVkUmJihwaGFzZT1QSEFTRV9DQU5DRUwsdHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2UpKSxzZXRUb3VjaEluUHJvZ3Jlc3MoITEpLG51bGx9ZnVuY3Rpb24gdG91Y2hDYW5jZWwoKXtmaW5nZXJDb3VudD0wLGVuZFRpbWU9MCxzdGFydFRpbWU9MCxzdGFydFRvdWNoZXNEaXN0YW5jZT0wLGVuZFRvdWNoZXNEaXN0YW5jZT0wLHBpbmNoWm9vbT0xLGNhbmNlbE11bHRpRmluZ2VyUmVsZWFzZSgpLHNldFRvdWNoSW5Qcm9ncmVzcyghMSl9ZnVuY3Rpb24gdG91Y2hMZWF2ZShqcUV2ZW50KXt2YXIgZXZlbnQ9anFFdmVudC5vcmlnaW5hbEV2ZW50P2pxRXZlbnQub3JpZ2luYWxFdmVudDpqcUV2ZW50O29wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSYmKHBoYXNlPWdldE5leHRQaGFzZShQSEFTRV9FTkQpLHRyaWdnZXJIYW5kbGVyKGV2ZW50LHBoYXNlKSl9ZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCl7JGVsZW1lbnQub2ZmKFNUQVJUX0VWLHRvdWNoU3RhcnQpLCRlbGVtZW50Lm9mZihDQU5DRUxfRVYsdG91Y2hDYW5jZWwpLCRlbGVtZW50Lm9mZihNT1ZFX0VWLHRvdWNoTW92ZSksJGVsZW1lbnQub2ZmKEVORF9FVix0b3VjaEVuZCksTEVBVkVfRVYmJiRlbGVtZW50Lm9mZihMRUFWRV9FVix0b3VjaExlYXZlKSxzZXRUb3VjaEluUHJvZ3Jlc3MoITEpfWZ1bmN0aW9uIGdldE5leHRQaGFzZShjdXJyZW50UGhhc2Upe3ZhciBuZXh0UGhhc2U9Y3VycmVudFBoYXNlLHZhbGlkVGltZT12YWxpZGF0ZVN3aXBlVGltZSgpLHZhbGlkRGlzdGFuY2U9dmFsaWRhdGVTd2lwZURpc3RhbmNlKCksZGlkQ2FuY2VsPWRpZFN3aXBlQmFja1RvQ2FuY2VsKCk7cmV0dXJuIXZhbGlkVGltZXx8ZGlkQ2FuY2VsP25leHRQaGFzZT1QSEFTRV9DQU5DRUw6IXZhbGlkRGlzdGFuY2V8fGN1cnJlbnRQaGFzZSE9UEhBU0VfTU9WRXx8b3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZCYmIW9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZT8hdmFsaWREaXN0YW5jZSYmY3VycmVudFBoYXNlPT1QSEFTRV9FTkQmJm9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSYmKG5leHRQaGFzZT1QSEFTRV9DQU5DRUwpOm5leHRQaGFzZT1QSEFTRV9FTkQsbmV4dFBoYXNlfWZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVyKGV2ZW50LHBoYXNlKXt2YXIgcmV0LHRvdWNoZXM9ZXZlbnQudG91Y2hlcztyZXR1cm4oZGlkU3dpcGUoKXx8aGFzU3dpcGVzKCkpJiYocmV0PXRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCxwaGFzZSxTV0lQRSkpLChkaWRQaW5jaCgpfHxoYXNQaW5jaGVzKCkpJiZyZXQhPT0hMSYmKHJldD10cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQscGhhc2UsUElOQ0gpKSxkaWREb3VibGVUYXAoKSYmcmV0IT09ITE/cmV0PXRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCxwaGFzZSxET1VCTEVfVEFQKTpkaWRMb25nVGFwKCkmJnJldCE9PSExP3JldD10cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQscGhhc2UsTE9OR19UQVApOmRpZFRhcCgpJiZyZXQhPT0hMSYmKHJldD10cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQscGhhc2UsVEFQKSkscGhhc2U9PT1QSEFTRV9DQU5DRUwmJnRvdWNoQ2FuY2VsKGV2ZW50KSxwaGFzZT09PVBIQVNFX0VORCYmKHRvdWNoZXM/dG91Y2hlcy5sZW5ndGh8fHRvdWNoQ2FuY2VsKGV2ZW50KTp0b3VjaENhbmNlbChldmVudCkpLHJldH1mdW5jdGlvbiB0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQscGhhc2UsZ2VzdHVyZSl7dmFyIHJldDtpZihnZXN0dXJlPT1TV0lQRSl7aWYoJGVsZW1lbnQudHJpZ2dlcihcInN3aXBlU3RhdHVzXCIsW3BoYXNlLGRpcmVjdGlvbnx8bnVsbCxkaXN0YW5jZXx8MCxkdXJhdGlvbnx8MCxmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb25dKSxvcHRpb25zLnN3aXBlU3RhdHVzJiYocmV0PW9wdGlvbnMuc3dpcGVTdGF0dXMuY2FsbCgkZWxlbWVudCxldmVudCxwaGFzZSxkaXJlY3Rpb258fG51bGwsZGlzdGFuY2V8fDAsZHVyYXRpb258fDAsZmluZ2VyQ291bnQsZmluZ2VyRGF0YSxjdXJyZW50RGlyZWN0aW9uKSxyZXQ9PT0hMSkpcmV0dXJuITE7aWYocGhhc2U9PVBIQVNFX0VORCYmdmFsaWRhdGVTd2lwZSgpKXtpZihjbGVhclRpbWVvdXQoc2luZ2xlVGFwVGltZW91dCksY2xlYXJUaW1lb3V0KGhvbGRUaW1lb3V0KSwkZWxlbWVudC50cmlnZ2VyKFwic3dpcGVcIixbZGlyZWN0aW9uLGRpc3RhbmNlLGR1cmF0aW9uLGZpbmdlckNvdW50LGZpbmdlckRhdGEsY3VycmVudERpcmVjdGlvbl0pLG9wdGlvbnMuc3dpcGUmJihyZXQ9b3B0aW9ucy5zd2lwZS5jYWxsKCRlbGVtZW50LGV2ZW50LGRpcmVjdGlvbixkaXN0YW5jZSxkdXJhdGlvbixmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb24pLHJldD09PSExKSlyZXR1cm4hMTtzd2l0Y2goZGlyZWN0aW9uKXtjYXNlIExFRlQ6JGVsZW1lbnQudHJpZ2dlcihcInN3aXBlTGVmdFwiLFtkaXJlY3Rpb24sZGlzdGFuY2UsZHVyYXRpb24sZmluZ2VyQ291bnQsZmluZ2VyRGF0YSxjdXJyZW50RGlyZWN0aW9uXSksb3B0aW9ucy5zd2lwZUxlZnQmJihyZXQ9b3B0aW9ucy5zd2lwZUxlZnQuY2FsbCgkZWxlbWVudCxldmVudCxkaXJlY3Rpb24sZGlzdGFuY2UsZHVyYXRpb24sZmluZ2VyQ291bnQsZmluZ2VyRGF0YSxjdXJyZW50RGlyZWN0aW9uKSk7YnJlYWs7Y2FzZSBSSUdIVDokZWxlbWVudC50cmlnZ2VyKFwic3dpcGVSaWdodFwiLFtkaXJlY3Rpb24sZGlzdGFuY2UsZHVyYXRpb24sZmluZ2VyQ291bnQsZmluZ2VyRGF0YSxjdXJyZW50RGlyZWN0aW9uXSksb3B0aW9ucy5zd2lwZVJpZ2h0JiYocmV0PW9wdGlvbnMuc3dpcGVSaWdodC5jYWxsKCRlbGVtZW50LGV2ZW50LGRpcmVjdGlvbixkaXN0YW5jZSxkdXJhdGlvbixmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb24pKTticmVhaztjYXNlIFVQOiRlbGVtZW50LnRyaWdnZXIoXCJzd2lwZVVwXCIsW2RpcmVjdGlvbixkaXN0YW5jZSxkdXJhdGlvbixmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb25dKSxvcHRpb25zLnN3aXBlVXAmJihyZXQ9b3B0aW9ucy5zd2lwZVVwLmNhbGwoJGVsZW1lbnQsZXZlbnQsZGlyZWN0aW9uLGRpc3RhbmNlLGR1cmF0aW9uLGZpbmdlckNvdW50LGZpbmdlckRhdGEsY3VycmVudERpcmVjdGlvbikpO2JyZWFrO2Nhc2UgRE9XTjokZWxlbWVudC50cmlnZ2VyKFwic3dpcGVEb3duXCIsW2RpcmVjdGlvbixkaXN0YW5jZSxkdXJhdGlvbixmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb25dKSxvcHRpb25zLnN3aXBlRG93biYmKHJldD1vcHRpb25zLnN3aXBlRG93bi5jYWxsKCRlbGVtZW50LGV2ZW50LGRpcmVjdGlvbixkaXN0YW5jZSxkdXJhdGlvbixmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb24pKX19fWlmKGdlc3R1cmU9PVBJTkNIKXtpZigkZWxlbWVudC50cmlnZ2VyKFwicGluY2hTdGF0dXNcIixbcGhhc2UscGluY2hEaXJlY3Rpb258fG51bGwscGluY2hEaXN0YW5jZXx8MCxkdXJhdGlvbnx8MCxmaW5nZXJDb3VudCxwaW5jaFpvb20sZmluZ2VyRGF0YV0pLG9wdGlvbnMucGluY2hTdGF0dXMmJihyZXQ9b3B0aW9ucy5waW5jaFN0YXR1cy5jYWxsKCRlbGVtZW50LGV2ZW50LHBoYXNlLHBpbmNoRGlyZWN0aW9ufHxudWxsLHBpbmNoRGlzdGFuY2V8fDAsZHVyYXRpb258fDAsZmluZ2VyQ291bnQscGluY2hab29tLGZpbmdlckRhdGEpLHJldD09PSExKSlyZXR1cm4hMTtpZihwaGFzZT09UEhBU0VfRU5EJiZ2YWxpZGF0ZVBpbmNoKCkpc3dpdGNoKHBpbmNoRGlyZWN0aW9uKXtjYXNlIElOOiRlbGVtZW50LnRyaWdnZXIoXCJwaW5jaEluXCIsW3BpbmNoRGlyZWN0aW9ufHxudWxsLHBpbmNoRGlzdGFuY2V8fDAsZHVyYXRpb258fDAsZmluZ2VyQ291bnQscGluY2hab29tLGZpbmdlckRhdGFdKSxvcHRpb25zLnBpbmNoSW4mJihyZXQ9b3B0aW9ucy5waW5jaEluLmNhbGwoJGVsZW1lbnQsZXZlbnQscGluY2hEaXJlY3Rpb258fG51bGwscGluY2hEaXN0YW5jZXx8MCxkdXJhdGlvbnx8MCxmaW5nZXJDb3VudCxwaW5jaFpvb20sZmluZ2VyRGF0YSkpO2JyZWFrO2Nhc2UgT1VUOiRlbGVtZW50LnRyaWdnZXIoXCJwaW5jaE91dFwiLFtwaW5jaERpcmVjdGlvbnx8bnVsbCxwaW5jaERpc3RhbmNlfHwwLGR1cmF0aW9ufHwwLGZpbmdlckNvdW50LHBpbmNoWm9vbSxmaW5nZXJEYXRhXSksb3B0aW9ucy5waW5jaE91dCYmKHJldD1vcHRpb25zLnBpbmNoT3V0LmNhbGwoJGVsZW1lbnQsZXZlbnQscGluY2hEaXJlY3Rpb258fG51bGwscGluY2hEaXN0YW5jZXx8MCxkdXJhdGlvbnx8MCxmaW5nZXJDb3VudCxwaW5jaFpvb20sZmluZ2VyRGF0YSkpfX1yZXR1cm4gZ2VzdHVyZT09VEFQP3BoYXNlIT09UEhBU0VfQ0FOQ0VMJiZwaGFzZSE9PVBIQVNFX0VORHx8KGNsZWFyVGltZW91dChzaW5nbGVUYXBUaW1lb3V0KSxjbGVhclRpbWVvdXQoaG9sZFRpbWVvdXQpLGhhc0RvdWJsZVRhcCgpJiYhaW5Eb3VibGVUYXAoKT8oZG91YmxlVGFwU3RhcnRUaW1lPWdldFRpbWVTdGFtcCgpLHNpbmdsZVRhcFRpbWVvdXQ9c2V0VGltZW91dCgkLnByb3h5KGZ1bmN0aW9uKCl7ZG91YmxlVGFwU3RhcnRUaW1lPW51bGwsJGVsZW1lbnQudHJpZ2dlcihcInRhcFwiLFtldmVudC50YXJnZXRdKSxvcHRpb25zLnRhcCYmKHJldD1vcHRpb25zLnRhcC5jYWxsKCRlbGVtZW50LGV2ZW50LGV2ZW50LnRhcmdldCkpfSx0aGlzKSxvcHRpb25zLmRvdWJsZVRhcFRocmVzaG9sZCkpOihkb3VibGVUYXBTdGFydFRpbWU9bnVsbCwkZWxlbWVudC50cmlnZ2VyKFwidGFwXCIsW2V2ZW50LnRhcmdldF0pLG9wdGlvbnMudGFwJiYocmV0PW9wdGlvbnMudGFwLmNhbGwoJGVsZW1lbnQsZXZlbnQsZXZlbnQudGFyZ2V0KSkpKTpnZXN0dXJlPT1ET1VCTEVfVEFQP3BoYXNlIT09UEhBU0VfQ0FOQ0VMJiZwaGFzZSE9PVBIQVNFX0VORHx8KGNsZWFyVGltZW91dChzaW5nbGVUYXBUaW1lb3V0KSxjbGVhclRpbWVvdXQoaG9sZFRpbWVvdXQpLGRvdWJsZVRhcFN0YXJ0VGltZT1udWxsLCRlbGVtZW50LnRyaWdnZXIoXCJkb3VibGV0YXBcIixbZXZlbnQudGFyZ2V0XSksb3B0aW9ucy5kb3VibGVUYXAmJihyZXQ9b3B0aW9ucy5kb3VibGVUYXAuY2FsbCgkZWxlbWVudCxldmVudCxldmVudC50YXJnZXQpKSk6Z2VzdHVyZT09TE9OR19UQVAmJihwaGFzZSE9PVBIQVNFX0NBTkNFTCYmcGhhc2UhPT1QSEFTRV9FTkR8fChjbGVhclRpbWVvdXQoc2luZ2xlVGFwVGltZW91dCksZG91YmxlVGFwU3RhcnRUaW1lPW51bGwsJGVsZW1lbnQudHJpZ2dlcihcImxvbmd0YXBcIixbZXZlbnQudGFyZ2V0XSksb3B0aW9ucy5sb25nVGFwJiYocmV0PW9wdGlvbnMubG9uZ1RhcC5jYWxsKCRlbGVtZW50LGV2ZW50LGV2ZW50LnRhcmdldCkpKSkscmV0fWZ1bmN0aW9uIHZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpe3ZhciB2YWxpZD0hMDtyZXR1cm4gbnVsbCE9PW9wdGlvbnMudGhyZXNob2xkJiYodmFsaWQ9ZGlzdGFuY2U+PW9wdGlvbnMudGhyZXNob2xkKSx2YWxpZH1mdW5jdGlvbiBkaWRTd2lwZUJhY2tUb0NhbmNlbCgpe3ZhciBjYW5jZWxsZWQ9ITE7cmV0dXJuIG51bGwhPT1vcHRpb25zLmNhbmNlbFRocmVzaG9sZCYmbnVsbCE9PWRpcmVjdGlvbiYmKGNhbmNlbGxlZD1nZXRNYXhEaXN0YW5jZShkaXJlY3Rpb24pLWRpc3RhbmNlPj1vcHRpb25zLmNhbmNlbFRocmVzaG9sZCksY2FuY2VsbGVkfWZ1bmN0aW9uIHZhbGlkYXRlUGluY2hEaXN0YW5jZSgpe3JldHVybiBudWxsIT09b3B0aW9ucy5waW5jaFRocmVzaG9sZD9waW5jaERpc3RhbmNlPj1vcHRpb25zLnBpbmNoVGhyZXNob2xkOiEwfWZ1bmN0aW9uIHZhbGlkYXRlU3dpcGVUaW1lKCl7dmFyIHJlc3VsdDtyZXR1cm4gcmVzdWx0PW9wdGlvbnMubWF4VGltZVRocmVzaG9sZD8hKGR1cmF0aW9uPj1vcHRpb25zLm1heFRpbWVUaHJlc2hvbGQpOiEwfWZ1bmN0aW9uIHZhbGlkYXRlRGVmYXVsdEV2ZW50KGpxRXZlbnQsZGlyZWN0aW9uKXtpZihvcHRpb25zLnByZXZlbnREZWZhdWx0RXZlbnRzIT09ITEpaWYob3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGw9PT1OT05FKWpxRXZlbnQucHJldmVudERlZmF1bHQoKTtlbHNle3ZhciBhdXRvPW9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsPT09QVVUTztzd2l0Y2goZGlyZWN0aW9uKXtjYXNlIExFRlQ6KG9wdGlvbnMuc3dpcGVMZWZ0JiZhdXRvfHwhYXV0byYmb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwhPUhPUklaT05UQUwpJiZqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7YnJlYWs7Y2FzZSBSSUdIVDoob3B0aW9ucy5zd2lwZVJpZ2h0JiZhdXRvfHwhYXV0byYmb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwhPUhPUklaT05UQUwpJiZqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7YnJlYWs7Y2FzZSBVUDoob3B0aW9ucy5zd2lwZVVwJiZhdXRvfHwhYXV0byYmb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwhPVZFUlRJQ0FMKSYmanFFdmVudC5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrO2Nhc2UgRE9XTjoob3B0aW9ucy5zd2lwZURvd24mJmF1dG98fCFhdXRvJiZvcHRpb25zLmFsbG93UGFnZVNjcm9sbCE9VkVSVElDQUwpJiZqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7YnJlYWs7Y2FzZSBOT05FOn19fWZ1bmN0aW9uIHZhbGlkYXRlUGluY2goKXt2YXIgaGFzQ29ycmVjdEZpbmdlckNvdW50PXZhbGlkYXRlRmluZ2VycygpLGhhc0VuZFBvaW50PXZhbGlkYXRlRW5kUG9pbnQoKSxoYXNDb3JyZWN0RGlzdGFuY2U9dmFsaWRhdGVQaW5jaERpc3RhbmNlKCk7cmV0dXJuIGhhc0NvcnJlY3RGaW5nZXJDb3VudCYmaGFzRW5kUG9pbnQmJmhhc0NvcnJlY3REaXN0YW5jZX1mdW5jdGlvbiBoYXNQaW5jaGVzKCl7cmV0dXJuISEob3B0aW9ucy5waW5jaFN0YXR1c3x8b3B0aW9ucy5waW5jaElufHxvcHRpb25zLnBpbmNoT3V0KX1mdW5jdGlvbiBkaWRQaW5jaCgpe3JldHVybiEoIXZhbGlkYXRlUGluY2goKXx8IWhhc1BpbmNoZXMoKSl9ZnVuY3Rpb24gdmFsaWRhdGVTd2lwZSgpe3ZhciBoYXNWYWxpZFRpbWU9dmFsaWRhdGVTd2lwZVRpbWUoKSxoYXNWYWxpZERpc3RhbmNlPXZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpLGhhc0NvcnJlY3RGaW5nZXJDb3VudD12YWxpZGF0ZUZpbmdlcnMoKSxoYXNFbmRQb2ludD12YWxpZGF0ZUVuZFBvaW50KCksZGlkQ2FuY2VsPWRpZFN3aXBlQmFja1RvQ2FuY2VsKCksdmFsaWQ9IWRpZENhbmNlbCYmaGFzRW5kUG9pbnQmJmhhc0NvcnJlY3RGaW5nZXJDb3VudCYmaGFzVmFsaWREaXN0YW5jZSYmaGFzVmFsaWRUaW1lO3JldHVybiB2YWxpZH1mdW5jdGlvbiBoYXNTd2lwZXMoKXtyZXR1cm4hIShvcHRpb25zLnN3aXBlfHxvcHRpb25zLnN3aXBlU3RhdHVzfHxvcHRpb25zLnN3aXBlTGVmdHx8b3B0aW9ucy5zd2lwZVJpZ2h0fHxvcHRpb25zLnN3aXBlVXB8fG9wdGlvbnMuc3dpcGVEb3duKX1mdW5jdGlvbiBkaWRTd2lwZSgpe3JldHVybiEoIXZhbGlkYXRlU3dpcGUoKXx8IWhhc1N3aXBlcygpKX1mdW5jdGlvbiB2YWxpZGF0ZUZpbmdlcnMoKXtyZXR1cm4gZmluZ2VyQ291bnQ9PT1vcHRpb25zLmZpbmdlcnN8fG9wdGlvbnMuZmluZ2Vycz09PUFMTF9GSU5HRVJTfHwhU1VQUE9SVFNfVE9VQ0h9ZnVuY3Rpb24gdmFsaWRhdGVFbmRQb2ludCgpe3JldHVybiAwIT09ZmluZ2VyRGF0YVswXS5lbmQueH1mdW5jdGlvbiBoYXNUYXAoKXtyZXR1cm4hIW9wdGlvbnMudGFwfWZ1bmN0aW9uIGhhc0RvdWJsZVRhcCgpe3JldHVybiEhb3B0aW9ucy5kb3VibGVUYXB9ZnVuY3Rpb24gaGFzTG9uZ1RhcCgpe3JldHVybiEhb3B0aW9ucy5sb25nVGFwfWZ1bmN0aW9uIHZhbGlkYXRlRG91YmxlVGFwKCl7aWYobnVsbD09ZG91YmxlVGFwU3RhcnRUaW1lKXJldHVybiExO3ZhciBub3c9Z2V0VGltZVN0YW1wKCk7cmV0dXJuIGhhc0RvdWJsZVRhcCgpJiZub3ctZG91YmxlVGFwU3RhcnRUaW1lPD1vcHRpb25zLmRvdWJsZVRhcFRocmVzaG9sZH1mdW5jdGlvbiBpbkRvdWJsZVRhcCgpe3JldHVybiB2YWxpZGF0ZURvdWJsZVRhcCgpfWZ1bmN0aW9uIHZhbGlkYXRlVGFwKCl7cmV0dXJuKDE9PT1maW5nZXJDb3VudHx8IVNVUFBPUlRTX1RPVUNIKSYmKGlzTmFOKGRpc3RhbmNlKXx8ZGlzdGFuY2U8b3B0aW9ucy50aHJlc2hvbGQpfWZ1bmN0aW9uIHZhbGlkYXRlTG9uZ1RhcCgpe3JldHVybiBkdXJhdGlvbj5vcHRpb25zLmxvbmdUYXBUaHJlc2hvbGQmJkRPVUJMRV9UQVBfVEhSRVNIT0xEPmRpc3RhbmNlfWZ1bmN0aW9uIGRpZFRhcCgpe3JldHVybiEoIXZhbGlkYXRlVGFwKCl8fCFoYXNUYXAoKSl9ZnVuY3Rpb24gZGlkRG91YmxlVGFwKCl7cmV0dXJuISghdmFsaWRhdGVEb3VibGVUYXAoKXx8IWhhc0RvdWJsZVRhcCgpKX1mdW5jdGlvbiBkaWRMb25nVGFwKCl7cmV0dXJuISghdmFsaWRhdGVMb25nVGFwKCl8fCFoYXNMb25nVGFwKCkpfWZ1bmN0aW9uIHN0YXJ0TXVsdGlGaW5nZXJSZWxlYXNlKGV2ZW50KXtwcmV2aW91c1RvdWNoRW5kVGltZT1nZXRUaW1lU3RhbXAoKSxmaW5nZXJDb3VudEF0UmVsZWFzZT1ldmVudC50b3VjaGVzLmxlbmd0aCsxfWZ1bmN0aW9uIGNhbmNlbE11bHRpRmluZ2VyUmVsZWFzZSgpe3ByZXZpb3VzVG91Y2hFbmRUaW1lPTAsZmluZ2VyQ291bnRBdFJlbGVhc2U9MH1mdW5jdGlvbiBpbk11bHRpRmluZ2VyUmVsZWFzZSgpe3ZhciB3aXRoaW5UaHJlc2hvbGQ9ITE7aWYocHJldmlvdXNUb3VjaEVuZFRpbWUpe3ZhciBkaWZmPWdldFRpbWVTdGFtcCgpLXByZXZpb3VzVG91Y2hFbmRUaW1lO2RpZmY8PW9wdGlvbnMuZmluZ2VyUmVsZWFzZVRocmVzaG9sZCYmKHdpdGhpblRocmVzaG9sZD0hMCl9cmV0dXJuIHdpdGhpblRocmVzaG9sZH1mdW5jdGlvbiBnZXRUb3VjaEluUHJvZ3Jlc3MoKXtyZXR1cm4hKCRlbGVtZW50LmRhdGEoUExVR0lOX05TK1wiX2ludG91Y2hcIikhPT0hMCl9ZnVuY3Rpb24gc2V0VG91Y2hJblByb2dyZXNzKHZhbCl7JGVsZW1lbnQmJih2YWw9PT0hMD8oJGVsZW1lbnQub24oTU9WRV9FVix0b3VjaE1vdmUpLCRlbGVtZW50Lm9uKEVORF9FVix0b3VjaEVuZCksTEVBVkVfRVYmJiRlbGVtZW50Lm9uKExFQVZFX0VWLHRvdWNoTGVhdmUpKTooJGVsZW1lbnQub2ZmKE1PVkVfRVYsdG91Y2hNb3ZlLCExKSwkZWxlbWVudC5vZmYoRU5EX0VWLHRvdWNoRW5kLCExKSxMRUFWRV9FViYmJGVsZW1lbnQub2ZmKExFQVZFX0VWLHRvdWNoTGVhdmUsITEpKSwkZWxlbWVudC5kYXRhKFBMVUdJTl9OUytcIl9pbnRvdWNoXCIsdmFsPT09ITApKX1mdW5jdGlvbiBjcmVhdGVGaW5nZXJEYXRhKGlkLGV2dCl7dmFyIGY9e3N0YXJ0Ont4OjAseTowfSxsYXN0Ont4OjAseTowfSxlbmQ6e3g6MCx5OjB9fTtyZXR1cm4gZi5zdGFydC54PWYubGFzdC54PWYuZW5kLng9ZXZ0LnBhZ2VYfHxldnQuY2xpZW50WCxmLnN0YXJ0Lnk9Zi5sYXN0Lnk9Zi5lbmQueT1ldnQucGFnZVl8fGV2dC5jbGllbnRZLGZpbmdlckRhdGFbaWRdPWYsZn1mdW5jdGlvbiB1cGRhdGVGaW5nZXJEYXRhKGV2dCl7dmFyIGlkPXZvaWQgMCE9PWV2dC5pZGVudGlmaWVyP2V2dC5pZGVudGlmaWVyOjAsZj1nZXRGaW5nZXJEYXRhKGlkKTtyZXR1cm4gbnVsbD09PWYmJihmPWNyZWF0ZUZpbmdlckRhdGEoaWQsZXZ0KSksZi5sYXN0Lng9Zi5lbmQueCxmLmxhc3QueT1mLmVuZC55LGYuZW5kLng9ZXZ0LnBhZ2VYfHxldnQuY2xpZW50WCxmLmVuZC55PWV2dC5wYWdlWXx8ZXZ0LmNsaWVudFksZn1mdW5jdGlvbiBnZXRGaW5nZXJEYXRhKGlkKXtyZXR1cm4gZmluZ2VyRGF0YVtpZF18fG51bGx9ZnVuY3Rpb24gc2V0TWF4RGlzdGFuY2UoZGlyZWN0aW9uLGRpc3RhbmNlKXtkaXJlY3Rpb24hPU5PTkUmJihkaXN0YW5jZT1NYXRoLm1heChkaXN0YW5jZSxnZXRNYXhEaXN0YW5jZShkaXJlY3Rpb24pKSxtYXhpbXVtc01hcFtkaXJlY3Rpb25dLmRpc3RhbmNlPWRpc3RhbmNlKX1mdW5jdGlvbiBnZXRNYXhEaXN0YW5jZShkaXJlY3Rpb24pe3JldHVybiBtYXhpbXVtc01hcFtkaXJlY3Rpb25dP21heGltdW1zTWFwW2RpcmVjdGlvbl0uZGlzdGFuY2U6dm9pZCAwfWZ1bmN0aW9uIGNyZWF0ZU1heGltdW1zRGF0YSgpe3ZhciBtYXhEYXRhPXt9O3JldHVybiBtYXhEYXRhW0xFRlRdPWNyZWF0ZU1heGltdW1WTyhMRUZUKSxtYXhEYXRhW1JJR0hUXT1jcmVhdGVNYXhpbXVtVk8oUklHSFQpLG1heERhdGFbVVBdPWNyZWF0ZU1heGltdW1WTyhVUCksbWF4RGF0YVtET1dOXT1jcmVhdGVNYXhpbXVtVk8oRE9XTiksbWF4RGF0YX1mdW5jdGlvbiBjcmVhdGVNYXhpbXVtVk8oZGlyKXtyZXR1cm57ZGlyZWN0aW9uOmRpcixkaXN0YW5jZTowfX1mdW5jdGlvbiBjYWxjdWxhdGVEdXJhdGlvbigpe3JldHVybiBlbmRUaW1lLXN0YXJ0VGltZX1mdW5jdGlvbiBjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2Uoc3RhcnRQb2ludCxlbmRQb2ludCl7dmFyIGRpZmZYPU1hdGguYWJzKHN0YXJ0UG9pbnQueC1lbmRQb2ludC54KSxkaWZmWT1NYXRoLmFicyhzdGFydFBvaW50LnktZW5kUG9pbnQueSk7cmV0dXJuIE1hdGgucm91bmQoTWF0aC5zcXJ0KGRpZmZYKmRpZmZYK2RpZmZZKmRpZmZZKSl9ZnVuY3Rpb24gY2FsY3VsYXRlUGluY2hab29tKHN0YXJ0RGlzdGFuY2UsZW5kRGlzdGFuY2Upe3ZhciBwZXJjZW50PWVuZERpc3RhbmNlL3N0YXJ0RGlzdGFuY2UqMTtyZXR1cm4gcGVyY2VudC50b0ZpeGVkKDIpfWZ1bmN0aW9uIGNhbGN1bGF0ZVBpbmNoRGlyZWN0aW9uKCl7cmV0dXJuIDE+cGluY2hab29tP09VVDpJTn1mdW5jdGlvbiBjYWxjdWxhdGVEaXN0YW5jZShzdGFydFBvaW50LGVuZFBvaW50KXtyZXR1cm4gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3coZW5kUG9pbnQueC1zdGFydFBvaW50LngsMikrTWF0aC5wb3coZW5kUG9pbnQueS1zdGFydFBvaW50LnksMikpKX1mdW5jdGlvbiBjYWxjdWxhdGVBbmdsZShzdGFydFBvaW50LGVuZFBvaW50KXt2YXIgeD1zdGFydFBvaW50LngtZW5kUG9pbnQueCx5PWVuZFBvaW50Lnktc3RhcnRQb2ludC55LHI9TWF0aC5hdGFuMih5LHgpLGFuZ2xlPU1hdGgucm91bmQoMTgwKnIvTWF0aC5QSSk7cmV0dXJuIDA+YW5nbGUmJihhbmdsZT0zNjAtTWF0aC5hYnMoYW5nbGUpKSxhbmdsZX1mdW5jdGlvbiBjYWxjdWxhdGVEaXJlY3Rpb24oc3RhcnRQb2ludCxlbmRQb2ludCl7aWYoY29tcGFyZVBvaW50cyhzdGFydFBvaW50LGVuZFBvaW50KSlyZXR1cm4gTk9ORTt2YXIgYW5nbGU9Y2FsY3VsYXRlQW5nbGUoc3RhcnRQb2ludCxlbmRQb2ludCk7cmV0dXJuIDQ1Pj1hbmdsZSYmYW5nbGU+PTA/TEVGVDozNjA+PWFuZ2xlJiZhbmdsZT49MzE1P0xFRlQ6YW5nbGU+PTEzNSYmMjI1Pj1hbmdsZT9SSUdIVDphbmdsZT40NSYmMTM1PmFuZ2xlP0RPV046VVB9ZnVuY3Rpb24gZ2V0VGltZVN0YW1wKCl7dmFyIG5vdz1uZXcgRGF0ZTtyZXR1cm4gbm93LmdldFRpbWUoKX1mdW5jdGlvbiBnZXRib3VuZHMoZWwpe2VsPSQoZWwpO3ZhciBvZmZzZXQ9ZWwub2Zmc2V0KCksYm91bmRzPXtsZWZ0Om9mZnNldC5sZWZ0LHJpZ2h0Om9mZnNldC5sZWZ0K2VsLm91dGVyV2lkdGgoKSx0b3A6b2Zmc2V0LnRvcCxib3R0b206b2Zmc2V0LnRvcCtlbC5vdXRlckhlaWdodCgpfTtyZXR1cm4gYm91bmRzfWZ1bmN0aW9uIGlzSW5Cb3VuZHMocG9pbnQsYm91bmRzKXtyZXR1cm4gcG9pbnQueD5ib3VuZHMubGVmdCYmcG9pbnQueDxib3VuZHMucmlnaHQmJnBvaW50Lnk+Ym91bmRzLnRvcCYmcG9pbnQueTxib3VuZHMuYm90dG9tfWZ1bmN0aW9uIGNvbXBhcmVQb2ludHMocG9pbnRBLHBvaW50Qil7cmV0dXJuIHBvaW50QS54PT1wb2ludEIueCYmcG9pbnRBLnk9PXBvaW50Qi55fXZhciBvcHRpb25zPSQuZXh0ZW5kKHt9LG9wdGlvbnMpLHVzZVRvdWNoRXZlbnRzPVNVUFBPUlRTX1RPVUNIfHxTVVBQT1JUU19QT0lOVEVSfHwhb3B0aW9ucy5mYWxsYmFja1RvTW91c2VFdmVudHMsU1RBUlRfRVY9dXNlVG91Y2hFdmVudHM/U1VQUE9SVFNfUE9JTlRFUj9TVVBQT1JUU19QT0lOVEVSX0lFMTA/XCJNU1BvaW50ZXJEb3duXCI6XCJwb2ludGVyZG93blwiOlwidG91Y2hzdGFydFwiOlwibW91c2Vkb3duXCIsTU9WRV9FVj11c2VUb3VjaEV2ZW50cz9TVVBQT1JUU19QT0lOVEVSP1NVUFBPUlRTX1BPSU5URVJfSUUxMD9cIk1TUG9pbnRlck1vdmVcIjpcInBvaW50ZXJtb3ZlXCI6XCJ0b3VjaG1vdmVcIjpcIm1vdXNlbW92ZVwiLEVORF9FVj11c2VUb3VjaEV2ZW50cz9TVVBQT1JUU19QT0lOVEVSP1NVUFBPUlRTX1BPSU5URVJfSUUxMD9cIk1TUG9pbnRlclVwXCI6XCJwb2ludGVydXBcIjpcInRvdWNoZW5kXCI6XCJtb3VzZXVwXCIsTEVBVkVfRVY9dXNlVG91Y2hFdmVudHM/U1VQUE9SVFNfUE9JTlRFUj9cIm1vdXNlbGVhdmVcIjpudWxsOlwibW91c2VsZWF2ZVwiLENBTkNFTF9FVj1TVVBQT1JUU19QT0lOVEVSP1NVUFBPUlRTX1BPSU5URVJfSUUxMD9cIk1TUG9pbnRlckNhbmNlbFwiOlwicG9pbnRlcmNhbmNlbFwiOlwidG91Y2hjYW5jZWxcIixkaXN0YW5jZT0wLGRpcmVjdGlvbj1udWxsLGN1cnJlbnREaXJlY3Rpb249bnVsbCxkdXJhdGlvbj0wLHN0YXJ0VG91Y2hlc0Rpc3RhbmNlPTAsZW5kVG91Y2hlc0Rpc3RhbmNlPTAscGluY2hab29tPTEscGluY2hEaXN0YW5jZT0wLHBpbmNoRGlyZWN0aW9uPTAsbWF4aW11bXNNYXA9bnVsbCwkZWxlbWVudD0kKGVsZW1lbnQpLHBoYXNlPVwic3RhcnRcIixmaW5nZXJDb3VudD0wLGZpbmdlckRhdGE9e30sc3RhcnRUaW1lPTAsZW5kVGltZT0wLHByZXZpb3VzVG91Y2hFbmRUaW1lPTAsZmluZ2VyQ291bnRBdFJlbGVhc2U9MCxkb3VibGVUYXBTdGFydFRpbWU9MCxzaW5nbGVUYXBUaW1lb3V0PW51bGwsaG9sZFRpbWVvdXQ9bnVsbDt0cnl7JGVsZW1lbnQub24oU1RBUlRfRVYsdG91Y2hTdGFydCksJGVsZW1lbnQub24oQ0FOQ0VMX0VWLHRvdWNoQ2FuY2VsKX1jYXRjaChlKXskLmVycm9yKFwiZXZlbnRzIG5vdCBzdXBwb3J0ZWQgXCIrU1RBUlRfRVYrXCIsXCIrQ0FOQ0VMX0VWK1wiIG9uIGpRdWVyeS5zd2lwZVwiKX10aGlzLmVuYWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRpc2FibGUoKSwkZWxlbWVudC5vbihTVEFSVF9FVix0b3VjaFN0YXJ0KSwkZWxlbWVudC5vbihDQU5DRUxfRVYsdG91Y2hDYW5jZWwpLCRlbGVtZW50fSx0aGlzLmRpc2FibGU9ZnVuY3Rpb24oKXtyZXR1cm4gcmVtb3ZlTGlzdGVuZXJzKCksJGVsZW1lbnR9LHRoaXMuZGVzdHJveT1mdW5jdGlvbigpe3JlbW92ZUxpc3RlbmVycygpLCRlbGVtZW50LmRhdGEoUExVR0lOX05TLG51bGwpLCRlbGVtZW50PW51bGx9LHRoaXMub3B0aW9uPWZ1bmN0aW9uKHByb3BlcnR5LHZhbHVlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgcHJvcGVydHkpb3B0aW9ucz0kLmV4dGVuZChvcHRpb25zLHByb3BlcnR5KTtlbHNlIGlmKHZvaWQgMCE9PW9wdGlvbnNbcHJvcGVydHldKXtpZih2b2lkIDA9PT12YWx1ZSlyZXR1cm4gb3B0aW9uc1twcm9wZXJ0eV07b3B0aW9uc1twcm9wZXJ0eV09dmFsdWV9ZWxzZXtpZighcHJvcGVydHkpcmV0dXJuIG9wdGlvbnM7JC5lcnJvcihcIk9wdGlvbiBcIitwcm9wZXJ0eStcIiBkb2VzIG5vdCBleGlzdCBvbiBqUXVlcnkuc3dpcGUub3B0aW9uc1wiKX1yZXR1cm4gbnVsbH19dmFyIFZFUlNJT049XCIxLjYuMThcIixMRUZUPVwibGVmdFwiLFJJR0hUPVwicmlnaHRcIixVUD1cInVwXCIsRE9XTj1cImRvd25cIixJTj1cImluXCIsT1VUPVwib3V0XCIsTk9ORT1cIm5vbmVcIixBVVRPPVwiYXV0b1wiLFNXSVBFPVwic3dpcGVcIixQSU5DSD1cInBpbmNoXCIsVEFQPVwidGFwXCIsRE9VQkxFX1RBUD1cImRvdWJsZXRhcFwiLExPTkdfVEFQPVwibG9uZ3RhcFwiLEhPUklaT05UQUw9XCJob3Jpem9udGFsXCIsVkVSVElDQUw9XCJ2ZXJ0aWNhbFwiLEFMTF9GSU5HRVJTPVwiYWxsXCIsRE9VQkxFX1RBUF9USFJFU0hPTEQ9MTAsUEhBU0VfU1RBUlQ9XCJzdGFydFwiLFBIQVNFX01PVkU9XCJtb3ZlXCIsUEhBU0VfRU5EPVwiZW5kXCIsUEhBU0VfQ0FOQ0VMPVwiY2FuY2VsXCIsU1VQUE9SVFNfVE9VQ0g9XCJvbnRvdWNoc3RhcnRcImluIHdpbmRvdyxTVVBQT1JUU19QT0lOVEVSX0lFMTA9d2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkJiYhd2luZG93LlBvaW50ZXJFdmVudCYmIVNVUFBPUlRTX1RPVUNILFNVUFBPUlRTX1BPSU5URVI9KHdpbmRvdy5Qb2ludGVyRXZlbnR8fHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCkmJiFTVVBQT1JUU19UT1VDSCxQTFVHSU5fTlM9XCJUb3VjaFN3aXBlXCIsZGVmYXVsdHM9e2ZpbmdlcnM6MSx0aHJlc2hvbGQ6NzUsY2FuY2VsVGhyZXNob2xkOm51bGwscGluY2hUaHJlc2hvbGQ6MjAsbWF4VGltZVRocmVzaG9sZDpudWxsLGZpbmdlclJlbGVhc2VUaHJlc2hvbGQ6MjUwLGxvbmdUYXBUaHJlc2hvbGQ6NTAwLGRvdWJsZVRhcFRocmVzaG9sZDoyMDAsc3dpcGU6bnVsbCxzd2lwZUxlZnQ6bnVsbCxzd2lwZVJpZ2h0Om51bGwsc3dpcGVVcDpudWxsLHN3aXBlRG93bjpudWxsLHN3aXBlU3RhdHVzOm51bGwscGluY2hJbjpudWxsLHBpbmNoT3V0Om51bGwscGluY2hTdGF0dXM6bnVsbCxjbGljazpudWxsLHRhcDpudWxsLGRvdWJsZVRhcDpudWxsLGxvbmdUYXA6bnVsbCxob2xkOm51bGwsdHJpZ2dlck9uVG91Y2hFbmQ6ITAsdHJpZ2dlck9uVG91Y2hMZWF2ZTohMSxhbGxvd1BhZ2VTY3JvbGw6XCJhdXRvXCIsZmFsbGJhY2tUb01vdXNlRXZlbnRzOiEwLGV4Y2x1ZGVkRWxlbWVudHM6XCIubm9Td2lwZVwiLHByZXZlbnREZWZhdWx0RXZlbnRzOiEwfTskLmZuLnN3aXBlPWZ1bmN0aW9uKG1ldGhvZCl7dmFyICR0aGlzPSQodGhpcykscGx1Z2luPSR0aGlzLmRhdGEoUExVR0lOX05TKTtpZihwbHVnaW4mJlwic3RyaW5nXCI9PXR5cGVvZiBtZXRob2Qpe2lmKHBsdWdpblttZXRob2RdKXJldHVybiBwbHVnaW5bbWV0aG9kXS5hcHBseShwbHVnaW4sQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKTskLmVycm9yKFwiTWV0aG9kIFwiK21ldGhvZCtcIiBkb2VzIG5vdCBleGlzdCBvbiBqUXVlcnkuc3dpcGVcIil9ZWxzZSBpZihwbHVnaW4mJlwib2JqZWN0XCI9PXR5cGVvZiBtZXRob2QpcGx1Z2luLm9wdGlvbi5hcHBseShwbHVnaW4sYXJndW1lbnRzKTtlbHNlIGlmKCEocGx1Z2lufHxcIm9iamVjdFwiIT10eXBlb2YgbWV0aG9kJiZtZXRob2QpKXJldHVybiBpbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gJHRoaXN9LCQuZm4uc3dpcGUudmVyc2lvbj1WRVJTSU9OLCQuZm4uc3dpcGUuZGVmYXVsdHM9ZGVmYXVsdHMsJC5mbi5zd2lwZS5waGFzZXM9e1BIQVNFX1NUQVJUOlBIQVNFX1NUQVJULFBIQVNFX01PVkU6UEhBU0VfTU9WRSxQSEFTRV9FTkQ6UEhBU0VfRU5ELFBIQVNFX0NBTkNFTDpQSEFTRV9DQU5DRUx9LCQuZm4uc3dpcGUuZGlyZWN0aW9ucz17TEVGVDpMRUZULFJJR0hUOlJJR0hULFVQOlVQLERPV046RE9XTixJTjpJTixPVVQ6T1VUfSwkLmZuLnN3aXBlLnBhZ2VTY3JvbGw9e05PTkU6Tk9ORSxIT1JJWk9OVEFMOkhPUklaT05UQUwsVkVSVElDQUw6VkVSVElDQUwsQVVUTzpBVVRPfSwkLmZuLnN3aXBlLmZpbmdlcnM9e09ORToxLFRXTzoyLFRIUkVFOjMsRk9VUjo0LEZJVkU6NSxBTEw6QUxMX0ZJTkdFUlN9fSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8qISBYLWVkaXRhYmxlIC0gdjEuNS4xIFxuKiBJbi1wbGFjZSBlZGl0aW5nIHdpdGggVHdpdHRlciBCb290c3RyYXAsIGpRdWVyeSBVSSBvciBwdXJlIGpRdWVyeVxuKiBodHRwOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlXG4qIENvcHlyaWdodCAoYykgMjAxMyBWaXRhbGl5IFBvdGFwb3Y7IExpY2Vuc2VkIE1JVCAqL1xuLyoqXG5Gb3JtIHdpdGggc2luZ2xlIGlucHV0IGVsZW1lbnQsIHR3byBidXR0b25zIGFuZCB0d28gc3RhdGVzOiBub3JtYWwvbG9hZGluZy5cbkFwcGxpZWQgYXMgalF1ZXJ5IG1ldGhvZCB0byBESVYgdGFnIChub3QgdG8gZm9ybSB0YWchKS4gVGhpcyBpcyBiZWNhdXNlIGZvcm0gY2FuIGJlIGluIGxvYWRpbmcgc3RhdGUgd2hlbiBzcGlubmVyIHNob3duLlxuRWRpdGFibGVmb3JtIGlzIGxpbmtlZCB3aXRoIG9uZSBvZiBpbnB1dCB0eXBlcywgZS5nLiAndGV4dCcsICdzZWxlY3QnIGV0Yy5cblxuQGNsYXNzIGVkaXRhYmxlZm9ybVxuQHVzZXMgdGV4dFxuQHVzZXMgdGV4dGFyZWFcbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIEVkaXRhYmxlRm9ybSA9IGZ1bmN0aW9uIChkaXYsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGVmb3JtLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy4kZGl2ID0gJChkaXYpOyAvL2RpdiwgY29udGFpbmluZyBmb3JtLiBOb3QgZm9ybSB0YWcuIE5vdCBlZGl0YWJsZS1lbGVtZW50LlxuICAgICAgICBpZighdGhpcy5vcHRpb25zLnNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2NvcGUgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8vbm90aGluZyBzaG93biBhZnRlciBpbml0XG4gICAgfTtcblxuICAgIEVkaXRhYmxlRm9ybS5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBFZGl0YWJsZUZvcm0sXG4gICAgICAgIGluaXRJbnB1dDogZnVuY3Rpb24oKSB7ICAvL2NhbGxlZCBvbmNlXG4gICAgICAgICAgICAvL3Rha2UgaW5wdXQgZnJvbSBvcHRpb25zIChhcyBpdCBpcyBjcmVhdGVkIGluIGVkaXRhYmxlLWVsZW1lbnQpXG4gICAgICAgICAgICB0aGlzLmlucHV0ID0gdGhpcy5vcHRpb25zLmlucHV0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3NldCBpbml0aWFsIHZhbHVlXG4gICAgICAgICAgICAvL3RvZG86IG1heSBiZSBhZGQgY2hlY2s6IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbnB1dC5zdHIydmFsdWUodGhpcy5vcHRpb25zLnZhbHVlKTsgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vcHJlcmVuZGVyOiBnZXQgaW5wdXQuJGlucHV0XG4gICAgICAgICAgICB0aGlzLmlucHV0LnByZXJlbmRlcigpO1xuICAgICAgICB9LFxuICAgICAgICBpbml0VGVtcGxhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kZm9ybSA9ICQoJC5mbi5lZGl0YWJsZWZvcm0udGVtcGxhdGUpOyBcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdEJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICRidG4gPSB0aGlzLiRmb3JtLmZpbmQoJy5lZGl0YWJsZS1idXR0b25zJyk7XG4gICAgICAgICAgICAkYnRuLmFwcGVuZCgkLmZuLmVkaXRhYmxlZm9ybS5idXR0b25zKTtcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5zaG93YnV0dG9ucyA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICAkYnRuLmFkZENsYXNzKCdlZGl0YWJsZS1idXR0b25zLWJvdHRvbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgUmVuZGVycyBlZGl0YWJsZWZvcm1cblxuICAgICAgICBAbWV0aG9kIHJlbmRlclxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy9pbml0IGxvYWRlclxuICAgICAgICAgICAgdGhpcy4kbG9hZGluZyA9ICQoJC5mbi5lZGl0YWJsZWZvcm0ubG9hZGluZyk7ICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGRpdi5lbXB0eSgpLmFwcGVuZCh0aGlzLiRsb2FkaW5nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pbml0IGZvcm0gdGVtcGxhdGUgYW5kIGJ1dHRvbnNcbiAgICAgICAgICAgIHRoaXMuaW5pdFRlbXBsYXRlKCk7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc2hvd2J1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRCdXR0b25zKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uZmluZCgnLmVkaXRhYmxlLWJ1dHRvbnMnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9zaG93IGxvYWRpbmcgc3RhdGVcbiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTsgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9mbGFnIHNob3dpbmcgaXMgZm9ybSBub3cgc2F2aW5nIHZhbHVlIHRvIHNlcnZlci4gXG4gICAgICAgICAgICAvL0l0IGlzIG5lZWRlZCB0byB3YWl0IHdoZW4gY2xvc2luZyBmb3JtLlxuICAgICAgICAgICAgdGhpcy5pc1NhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvKiogICAgICAgIFxuICAgICAgICAgICAgRmlyZWQgd2hlbiByZW5kZXJpbmcgc3RhcnRzXG4gICAgICAgICAgICBAZXZlbnQgcmVuZGVyaW5nIFxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgKiovICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRkaXYudHJpZ2dlckhhbmRsZXIoJ3JlbmRlcmluZycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2luaXQgaW5wdXRcbiAgICAgICAgICAgIHRoaXMuaW5pdElucHV0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vYXBwZW5kIGlucHV0IHRvIGZvcm1cbiAgICAgICAgICAgIHRoaXMuJGZvcm0uZmluZCgnZGl2LmVkaXRhYmxlLWlucHV0JykuYXBwZW5kKHRoaXMuaW5wdXQuJHRwbCk7ICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vYXBwZW5kIGZvcm0gdG8gY29udGFpbmVyXG4gICAgICAgICAgICB0aGlzLiRkaXYuYXBwZW5kKHRoaXMuJGZvcm0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3JlbmRlciBpbnB1dFxuICAgICAgICAgICAgJC53aGVuKHRoaXMuaW5wdXQucmVuZGVyKCkpXG4gICAgICAgICAgICAudGhlbigkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvL3NldHVwIGlucHV0IHRvIHN1Ym1pdCBhdXRvbWF0aWNhbGx5IHdoZW4gbm8gYnV0dG9ucyBzaG93blxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuc2hvd2J1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5hdXRvc3VibWl0KCk7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9hdHRhY2ggJ2NhbmNlbCcgaGFuZGxlclxuICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uZmluZCgnLmVkaXRhYmxlLWNhbmNlbCcpLmNsaWNrKCQucHJveHkodGhpcy5jYW5jZWwsIHRoaXMpKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZih0aGlzLmlucHV0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IodGhpcy5pbnB1dC5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uZmluZCgnLmVkaXRhYmxlLXN1Ym1pdCcpLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQuJGlucHV0LmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vcHJldmVudCBmb3JtIGZyb20gc3VibWl0dGluZ1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLnN1Ym1pdChmdW5jdGlvbihlKXsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC4kaW5wdXQucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtc3VibWl0JykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gKHRoaXMudmFsdWUgPT09IG51bGwgfHwgdGhpcy52YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMudmFsdWUgPT09ICcnKSA/IHRoaXMub3B0aW9ucy5kZWZhdWx0VmFsdWUgOiB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnZhbHVlMmlucHV0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgLy9hdHRhY2ggc3VibWl0IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5zdWJtaXQoJC5wcm94eSh0aGlzLnN1Ym1pdCwgdGhpcykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICAgICAgRmlyZWQgd2hlbiBmb3JtIGlzIHJlbmRlcmVkXG4gICAgICAgICAgICAgICAgQGV2ZW50IHJlbmRlcmVkXG4gICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgICAgICoqLyAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuJGRpdi50cmlnZ2VySGFuZGxlcigncmVuZGVyZWQnKTsgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICB0aGlzLnNob3dGb3JtKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9jYWxsIHBvc3RyZW5kZXIgbWV0aG9kIHRvIHBlcmZvcm0gYWN0aW9ucyByZXF1aXJlZCB2aXNpYmlsaXR5IG9mIGZvcm1cbiAgICAgICAgICAgICAgICBpZih0aGlzLmlucHV0LnBvc3RyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5wb3N0cmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHsgICBcbiAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICBGaXJlZCB3aGVuIGZvcm0gd2FzIGNhbmNlbGxlZCBieSB1c2VyXG4gICAgICAgICAgICBAZXZlbnQgY2FuY2VsIFxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgKiovICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGRpdi50cmlnZ2VySGFuZGxlcignY2FuY2VsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dMb2FkaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB3LCBoO1xuICAgICAgICAgICAgaWYodGhpcy4kZm9ybSkge1xuICAgICAgICAgICAgICAgIC8vc2V0IGxvYWRpbmcgc2l6ZSBlcXVhbCB0byBmb3JtXG4gICAgICAgICAgICAgICAgdyA9IHRoaXMuJGZvcm0ub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgICAgICAgIGggPSB0aGlzLiRmb3JtLm91dGVySGVpZ2h0KCk7IFxuICAgICAgICAgICAgICAgIGlmKHcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbG9hZGluZy53aWR0aCh3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoaCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRsb2FkaW5nLmhlaWdodChoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5oaWRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vc3RyZXRjaCBsb2FkaW5nIHRvIGZpbGwgY29udGFpbmVyIHdpZHRoXG4gICAgICAgICAgICAgICAgdyA9IHRoaXMuJGxvYWRpbmcucGFyZW50KCkud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBpZih3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGxvYWRpbmcud2lkdGgodyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4kbG9hZGluZy5zaG93KCk7IFxuICAgICAgICB9LFxuXG4gICAgICAgIHNob3dGb3JtOiBmdW5jdGlvbihhY3RpdmF0ZSkge1xuICAgICAgICAgICAgdGhpcy4kbG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLiRmb3JtLnNob3coKTtcbiAgICAgICAgICAgIGlmKGFjdGl2YXRlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQuYWN0aXZhdGUoKTsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiogICAgICAgIFxuICAgICAgICAgICAgRmlyZWQgd2hlbiBmb3JtIGlzIHNob3duXG4gICAgICAgICAgICBAZXZlbnQgc2hvdyBcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgICoqLyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRkaXYudHJpZ2dlckhhbmRsZXIoJ3Nob3cnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBlcnJvcjogZnVuY3Rpb24obXNnKSB7XG4gICAgICAgICAgICB2YXIgJGdyb3VwID0gdGhpcy4kZm9ybS5maW5kKCcuY29udHJvbC1ncm91cCcpLFxuICAgICAgICAgICAgICAgICRibG9jayA9IHRoaXMuJGZvcm0uZmluZCgnLmVkaXRhYmxlLWVycm9yLWJsb2NrJyksXG4gICAgICAgICAgICAgICAgbGluZXM7XG5cbiAgICAgICAgICAgIGlmKG1zZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAkZ3JvdXAucmVtb3ZlQ2xhc3MoJC5mbi5lZGl0YWJsZWZvcm0uZXJyb3JHcm91cENsYXNzKTtcbiAgICAgICAgICAgICAgICAkYmxvY2sucmVtb3ZlQ2xhc3MoJC5mbi5lZGl0YWJsZWZvcm0uZXJyb3JCbG9ja0NsYXNzKS5lbXB0eSgpLmhpZGUoKTsgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vY29udmVydCBuZXdsaW5lIHRvIDxicj4gZm9yIG1vcmUgcHJldHR5IGVycm9yIGRpc3BsYXlcbiAgICAgICAgICAgICAgICBpZihtc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXMgPSAoJycrbXNnKS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzW2ldID0gJCgnPGRpdj4nKS50ZXh0KGxpbmVzW2ldKS5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbXNnID0gbGluZXMuam9pbignPGJyPicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkZ3JvdXAuYWRkQ2xhc3MoJC5mbi5lZGl0YWJsZWZvcm0uZXJyb3JHcm91cENsYXNzKTtcbiAgICAgICAgICAgICAgICAkYmxvY2suYWRkQ2xhc3MoJC5mbi5lZGl0YWJsZWZvcm0uZXJyb3JCbG9ja0NsYXNzKS5odG1sKG1zZykuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHN1Ym1pdDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9nZXQgbmV3IHZhbHVlIGZyb20gaW5wdXRcbiAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuaW5wdXQuaW5wdXQydmFsdWUoKTsgXG5cbiAgICAgICAgICAgIC8vdmFsaWRhdGlvbjogaWYgdmFsaWRhdGUgcmV0dXJucyBzdHJpbmcgb3IgdHJ1dGh5IHZhbHVlIC0gbWVhbnMgZXJyb3JcbiAgICAgICAgICAgIC8vaWYgcmV0dXJucyBvYmplY3QgbGlrZSB7bmV3VmFsdWU6ICcuLi4nfSA9PiBzdWJtaXR0ZWQgdmFsdWUgaXMgcmVhc3NpZ25lZCB0byBpdFxuICAgICAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoJC50eXBlKGVycm9yKSA9PT0gJ29iamVjdCcgJiYgZXJyb3IubmV3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gZXJyb3IubmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC52YWx1ZTJpbnB1dChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIGVycm9yLm1zZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnJvci5tc2cpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Rm9ybSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaWYgdmFsdWUgbm90IGNoYW5nZWQgLS0+IHRyaWdnZXIgJ25vY2hhbmdlJyBldmVudCBhbmQgcmV0dXJuXG4gICAgICAgICAgICAvKmpzbGludCBlcWVxOiB0cnVlKi9cbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNhdmVub2NoYW5nZSAmJiB0aGlzLmlucHV0LnZhbHVlMnN0cihuZXdWYWx1ZSkgPT0gdGhpcy5pbnB1dC52YWx1ZTJzdHIodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IGZhbHNlKi8gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgICAgICBGaXJlZCB3aGVuIHZhbHVlIG5vdCBjaGFuZ2VkIGJ1dCBmb3JtIGlzIHN1Ym1pdHRlZC4gUmVxdWlyZXMgc2F2ZW5vY2hhbmdlID0gZmFsc2UuXG4gICAgICAgICAgICAgICAgQGV2ZW50IG5vY2hhbmdlIFxuICAgICAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgICAgICAqKi8gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuJGRpdi50cmlnZ2VySGFuZGxlcignbm9jaGFuZ2UnKTsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICAvL2NvbnZlcnQgdmFsdWUgZm9yIHN1Ym1pdHRpbmcgdG8gc2VydmVyXG4gICAgICAgICAgICB2YXIgc3VibWl0VmFsdWUgPSB0aGlzLmlucHV0LnZhbHVlMnN1Ym1pdChuZXdWYWx1ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaXNTYXZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3NlbmRpbmcgZGF0YSB0byBzZXJ2ZXJcbiAgICAgICAgICAgICQud2hlbih0aGlzLnNhdmUoc3VibWl0VmFsdWUpKVxuICAgICAgICAgICAgLmRvbmUoJC5wcm94eShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNTYXZpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vcnVuIHN1Y2Nlc3MgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gdHlwZW9mIHRoaXMub3B0aW9ucy5zdWNjZXNzID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLnN1Y2Nlc3MuY2FsbCh0aGlzLm9wdGlvbnMuc2NvcGUsIHJlc3BvbnNlLCBuZXdWYWx1ZSkgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy9pZiBzdWNjZXNzIGNhbGxiYWNrIHJldHVybnMgZmFsc2UgLS0+IGtlZXAgZm9ybSBvcGVuIGFuZCBkbyBub3QgYWN0aXZhdGUgaW5wdXRcbiAgICAgICAgICAgICAgICBpZihyZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dGb3JtKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vaWYgc3VjY2VzcyBjYWxsYmFjayByZXR1cm5zIHN0cmluZyAtLT4gIGtlZXAgZm9ybSBvcGVuLCBzaG93IGVycm9yIGFuZCBhY3RpdmF0ZSBpbnB1dCAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiByZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9pZiBzdWNjZXNzIGNhbGxiYWNrIHJldHVybnMgb2JqZWN0IGxpa2Uge25ld1ZhbHVlOiA8c29tZXRoaW5nPn0gLS0+IHVzZSB0aGF0IHZhbHVlIGluc3RlYWQgb2Ygc3VibWl0dGVkXG4gICAgICAgICAgICAgICAgLy9pdCBpcyB1c2VmdWxsIGlmIHlvdSB3YW50IHRvIGNobmFnZSB2YWx1ZSBpbiB1cmwtZnVuY3Rpb25cbiAgICAgICAgICAgICAgICBpZihyZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgcmVzLmhhc093blByb3BlcnR5KCduZXdWYWx1ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gcmVzLm5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vY2xlYXIgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZmFsc2UpOyAgIFxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAvKiogICAgICAgIFxuICAgICAgICAgICAgICAgIEZpcmVkIHdoZW4gZm9ybSBpcyBzdWJtaXR0ZWRcbiAgICAgICAgICAgICAgICBAZXZlbnQgc2F2ZSBcbiAgICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBhZGRpdGlvbmFsIHBhcmFtc1xuICAgICAgICAgICAgICAgIEBwYXJhbSB7bWl4ZWR9IHBhcmFtcy5uZXdWYWx1ZSByYXcgbmV3IHZhbHVlXG4gICAgICAgICAgICAgICAgQHBhcmFtIHttaXhlZH0gcGFyYW1zLnN1Ym1pdFZhbHVlIHN1Ym1pdHRlZCB2YWx1ZSBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gcGFyYW1zLnJlc3BvbnNlIGFqYXggcmVzcG9uc2VcblxuICAgICAgICAgICAgICAgIEBleGFtcGxlXG4gICAgICAgICAgICAgICAgJCgnI2Zvcm0tZGl2Jykub24oJ3NhdmUnKSwgZnVuY3Rpb24oZSwgcGFyYW1zKXtcbiAgICAgICAgICAgICAgICAgICAgaWYocGFyYW1zLm5ld1ZhbHVlID09PSAndXNlcm5hbWUnKSB7Li4ufVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICoqL1xuICAgICAgICAgICAgICAgIHRoaXMuJGRpdi50cmlnZ2VySGFuZGxlcignc2F2ZScsIHtuZXdWYWx1ZTogbmV3VmFsdWUsIHN1Ym1pdFZhbHVlOiBzdWJtaXRWYWx1ZSwgcmVzcG9uc2U6IHJlc3BvbnNlfSk7XG4gICAgICAgICAgICB9LCB0aGlzKSlcbiAgICAgICAgICAgIC5mYWlsKCQucHJveHkoZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1NhdmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1zZztcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5vcHRpb25zLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IHRoaXMub3B0aW9ucy5lcnJvci5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSwgeGhyLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gdHlwZW9mIHhociA9PT0gJ3N0cmluZycgPyB4aHIgOiB4aHIucmVzcG9uc2VUZXh0IHx8IHhoci5zdGF0dXNUZXh0IHx8ICdVbmtub3duIGVycm9yISc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcihtc2cpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zvcm0oKTtcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzYXZlOiBmdW5jdGlvbihzdWJtaXRWYWx1ZSkge1xuICAgICAgICAgICAgLy90cnkgcGFyc2UgY29tcG9zaXRlIHBrIGRlZmluZWQgYXMganNvbiBzdHJpbmcgaW4gZGF0YS1wayBcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wayA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24odGhpcy5vcHRpb25zLnBrLCB0cnVlKTsgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBwayA9ICh0eXBlb2YgdGhpcy5vcHRpb25zLnBrID09PSAnZnVuY3Rpb24nKSA/IHRoaXMub3B0aW9ucy5way5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSkgOiB0aGlzLm9wdGlvbnMucGssXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICBzZW5kIG9uIHNlcnZlciBpbiBmb2xsb3dpbmcgY2FzZXM6XG4gICAgICAgICAgICAgIDEuIHVybCBpcyBmdW5jdGlvblxuICAgICAgICAgICAgICAyLiB1cmwgaXMgc3RyaW5nIEFORCAocGsgZGVmaW5lZCBPUiBzZW5kIG9wdGlvbiA9IGFsd2F5cykgXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2VuZCA9ICEhKHR5cGVvZiB0aGlzLm9wdGlvbnMudXJsID09PSAnZnVuY3Rpb24nIHx8ICh0aGlzLm9wdGlvbnMudXJsICYmICgodGhpcy5vcHRpb25zLnNlbmQgPT09ICdhbHdheXMnKSB8fCAodGhpcy5vcHRpb25zLnNlbmQgPT09ICdhdXRvJyAmJiBwayAhPT0gbnVsbCAmJiBwayAhPT0gdW5kZWZpbmVkKSkpKSxcbiAgICAgICAgICAgIHBhcmFtcztcblxuICAgICAgICAgICAgaWYgKHNlbmQpIHsgLy9zZW5kIHRvIHNlcnZlclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcblxuICAgICAgICAgICAgICAgIC8vc3RhbmRhcmQgcGFyYW1zXG4gICAgICAgICAgICAgICAgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm9wdGlvbnMubmFtZSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN1Ym1pdFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBwazogcGsgXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vYWRkaXRpb25hbCBwYXJhbXNcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5vcHRpb25zLnBhcmFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSB0aGlzLm9wdGlvbnMucGFyYW1zLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlLCBwYXJhbXMpOyAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy90cnkgcGFyc2UganNvbiBpbiBzaW5nbGUgcXVvdGVzIChmcm9tIGRhdGEtcGFyYW1zIGF0dHJpYnV0ZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhcmFtcyA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24odGhpcy5vcHRpb25zLnBhcmFtcywgdHJ1ZSk7ICAgXG4gICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKHBhcmFtcywgdGhpcy5vcHRpb25zLnBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHRoaXMub3B0aW9ucy51cmwgPT09ICdmdW5jdGlvbicpIHsgLy91c2VyJ3MgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy51cmwuY2FsbCh0aGlzLm9wdGlvbnMuc2NvcGUsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgIFxuICAgICAgICAgICAgICAgICAgICAvL3NlbmQgYWpheCB0byBzZXJ2ZXIgYW5kIHJldHVybiBkZWZlcnJlZCBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuYWpheCgkLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgICAgIDogdGhpcy5vcHRpb25zLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgICAgOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgIDogJ1BPU1QnXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMub3B0aW9ucy5hamF4T3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgXG5cbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy52YWxpZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMudmFsaWRhdGUuY2FsbCh0aGlzLm9wdGlvbnMuc2NvcGUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvcHRpb246IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmKGtleSBpbiB0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihrZXkgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9kbyBub3QgcGFzcyBvcHRpb24gdG8gaW5wdXQgYXMgaXQgaXMgcGFzc2VkIGluIGVkaXRhYmxlLWVsZW1lbnRcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRWYWx1ZTogZnVuY3Rpb24odmFsdWUsIGNvbnZlcnRTdHIpIHtcbiAgICAgICAgICAgIGlmKGNvbnZlcnRTdHIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbnB1dC5zdHIydmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaWYgZm9ybSBpcyB2aXNpYmxlLCB1cGRhdGUgaW5wdXRcbiAgICAgICAgICAgIGlmKHRoaXMuJGZvcm0gJiYgdGhpcy4kZm9ybS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQudmFsdWUyaW5wdXQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0gICAgICAgICAgICAgICBcbiAgICB9O1xuXG4gICAgLypcbiAgICBJbml0aWFsaXplIGVkaXRhYmxlZm9ybS4gQXBwbGllZCB0byBqUXVlcnkgb2JqZWN0LlxuXG4gICAgQG1ldGhvZCAkKCkuZWRpdGFibGVmb3JtKG9wdGlvbnMpXG4gICAgQHBhcmFtcyB7T2JqZWN0fSBvcHRpb25zXG4gICAgQGV4YW1wbGVcbiAgICB2YXIgJGZvcm0gPSAkKCcmbHQ7ZGl2Jmd0OycpLmVkaXRhYmxlZm9ybSh7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgbmFtZTogJ3VzZXJuYW1lJyxcbiAgICAgICAgdXJsOiAnL3Bvc3QnLFxuICAgICAgICB2YWx1ZTogJ3ZpdGFsaXknXG4gICAgfSk7XG5cbiAgICAvL3RvIGRpc3BsYXkgZm9ybSB5b3Ugc2hvdWxkIGNhbGwgJ3JlbmRlcicgbWV0aG9kXG4gICAgJGZvcm0uZWRpdGFibGVmb3JtKCdyZW5kZXInKTsgICAgIFxuICAgICovXG4gICAgJC5mbi5lZGl0YWJsZWZvcm0gPSBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksIFxuICAgICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ2VkaXRhYmxlZm9ybScpLCBcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09PSAnb2JqZWN0JyAmJiBvcHRpb247IFxuICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnZWRpdGFibGVmb3JtJywgKGRhdGEgPSBuZXcgRWRpdGFibGVGb3JtKHRoaXMsIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJykgeyAvL2NhbGwgbWV0aG9kIFxuICAgICAgICAgICAgICAgIGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy9rZWVwIGxpbmsgdG8gY29uc3RydWN0b3IgdG8gYWxsb3cgaW5oZXJpdGFuY2VcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5Db25zdHJ1Y3RvciA9IEVkaXRhYmxlRm9ybTsgICAgXG5cbiAgICAvL2RlZmF1bHRzXG4gICAgJC5mbi5lZGl0YWJsZWZvcm0uZGVmYXVsdHMgPSB7XG4gICAgICAgIC8qIHNlZSBhbHNvIGRlZmF1bHRzIGZvciBpbnB1dCAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICBUeXBlIG9mIGlucHV0LiBDYW4gYmUgPGNvZGU+dGV4dHx0ZXh0YXJlYXxzZWxlY3R8ZGF0ZXxjaGVja2xpc3Q8L2NvZGU+XG5cbiAgICAgICAgQHByb3BlcnR5IHR5cGUgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAndGV4dCdcbiAgICAgICAgKiovXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgLyoqXG4gICAgICAgIFVybCBmb3Igc3VibWl0LCBlLmcuIDxjb2RlPicvcG9zdCc8L2NvZGU+ICBcbiAgICAgICAgSWYgZnVuY3Rpb24gLSBpdCB3aWxsIGJlIGNhbGxlZCBpbnN0ZWFkIG9mIGFqYXguIEZ1bmN0aW9uIHNob3VsZCByZXR1cm4gZGVmZXJyZWQgb2JqZWN0IHRvIHJ1biBmYWlsL2RvbmUgY2FsbGJhY2tzLlxuXG4gICAgICAgIEBwcm9wZXJ0eSB1cmwgXG4gICAgICAgIEB0eXBlIHN0cmluZ3xmdW5jdGlvblxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIHVybDogZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgZCA9IG5ldyAkLkRlZmVycmVkO1xuICAgICAgICAgICAgaWYocGFyYW1zLnZhbHVlID09PSAnYWJjJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnJlamVjdCgnZXJyb3IgbWVzc2FnZScpOyAvL3JldHVybmluZyBlcnJvciB2aWEgZGVmZXJyZWQgb2JqZWN0XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vYXN5bmMgc2F2aW5nIGRhdGEgaW4ganMgbW9kZWxcbiAgICAgICAgICAgICAgICBzb21lTW9kZWwuYXN5bmNTYXZlTWV0aG9kKHtcbiAgICAgICAgICAgICAgICAgICAuLi4sIFxuICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHVybDpudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQWRkaXRpb25hbCBwYXJhbXMgZm9yIHN1Ym1pdC4gSWYgZGVmaW5lZCBhcyA8Y29kZT5vYmplY3Q8L2NvZGU+IC0gaXQgaXMgKiphcHBlbmRlZCoqIHRvIG9yaWdpbmFsIGFqYXggZGF0YSAocGssIG5hbWUgYW5kIHZhbHVlKS4gIFxuICAgICAgICBJZiBkZWZpbmVkIGFzIDxjb2RlPmZ1bmN0aW9uPC9jb2RlPiAtIHJldHVybmVkIG9iamVjdCAqKm92ZXJ3cml0ZXMqKiBvcmlnaW5hbCBhamF4IGRhdGEuXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIHBhcmFtczogZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgICAgICAgICAvL29yaWdpbmFsbHkgcGFyYW1zIGNvbnRhaW4gcGssIG5hbWUgYW5kIHZhbHVlXG4gICAgICAgICAgICBwYXJhbXMuYSA9IDE7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgQHByb3BlcnR5IHBhcmFtcyBcbiAgICAgICAgQHR5cGUgb2JqZWN0fGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBwYXJhbXM6bnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIE5hbWUgb2YgZmllbGQuIFdpbGwgYmUgc3VibWl0dGVkIG9uIHNlcnZlci4gQ2FuIGJlIHRha2VuIGZyb20gPGNvZGU+aWQ8L2NvZGU+IGF0dHJpYnV0ZVxuXG4gICAgICAgIEBwcm9wZXJ0eSBuYW1lIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFByaW1hcnkga2V5IG9mIGVkaXRhYmxlIG9iamVjdCAoZS5nLiByZWNvcmQgaWQgaW4gZGF0YWJhc2UpLiBGb3IgY29tcG9zaXRlIGtleXMgdXNlIG9iamVjdCwgZS5nLiA8Y29kZT57aWQ6IDEsIGxhbmc6ICdlbid9PC9jb2RlPi5cbiAgICAgICAgQ2FuIGJlIGNhbGN1bGF0ZWQgZHluYW1pY2FsbHkgdmlhIGZ1bmN0aW9uLlxuXG4gICAgICAgIEBwcm9wZXJ0eSBwayBcbiAgICAgICAgQHR5cGUgc3RyaW5nfG9iamVjdHxmdW5jdGlvblxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBwazogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIEluaXRpYWwgdmFsdWUuIElmIG5vdCBkZWZpbmVkIC0gd2lsbCBiZSB0YWtlbiBmcm9tIGVsZW1lbnQncyBjb250ZW50LlxuICAgICAgICBGb3IgX19zZWxlY3RfXyB0eXBlIHNob3VsZCBiZSBkZWZpbmVkIChhcyBpdCBpcyBJRCBvZiBzaG93biB0ZXh0KS5cblxuICAgICAgICBAcHJvcGVydHkgdmFsdWUgXG4gICAgICAgIEB0eXBlIHN0cmluZ3xvYmplY3RcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFZhbHVlIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gaW5wdXQgaWYgb3JpZ2luYWwgZmllbGQgdmFsdWUgaXMgZW1wdHkgKGBudWxsfHVuZGVmaW5lZHwnJ2ApLlxuXG4gICAgICAgIEBwcm9wZXJ0eSBkZWZhdWx0VmFsdWUgXG4gICAgICAgIEB0eXBlIHN0cmluZ3xvYmplY3RcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAc2luY2UgMS40LjZcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgU3RyYXRlZ3kgZm9yIHNlbmRpbmcgZGF0YSBvbiBzZXJ2ZXIuIENhbiBiZSBgYXV0b3xhbHdheXN8bmV2ZXJgLlxuICAgICAgICBXaGVuICdhdXRvJyBkYXRhIHdpbGwgYmUgc2VudCBvbiBzZXJ2ZXIgKipvbmx5IGlmIHBrIGFuZCB1cmwgZGVmaW5lZCoqLCBvdGhlcndpc2UgbmV3IHZhbHVlIHdpbGwgYmUgc3RvcmVkIGxvY2FsbHkuXG5cbiAgICAgICAgQHByb3BlcnR5IHNlbmQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnYXV0bydcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBzZW5kOiAnYXV0bycsIFxuICAgICAgICAvKipcbiAgICAgICAgRnVuY3Rpb24gZm9yIGNsaWVudC1zaWRlIHZhbGlkYXRpb24uIElmIHJldHVybnMgc3RyaW5nIC0gbWVhbnMgdmFsaWRhdGlvbiBub3QgcGFzc2VkIGFuZCBzdHJpbmcgc2hvd2VkIGFzIGVycm9yLlxuICAgICAgICBTaW5jZSAxLjUuMSB5b3UgY2FuIG1vZGlmeSBzdWJtaXR0ZWQgdmFsdWUgYnkgcmV0dXJuaW5nIG9iamVjdCBmcm9tIGB2YWxpZGF0ZWA6IFxuICAgICAgICBge25ld1ZhbHVlOiAnLi4uJ31gIG9yIGB7bmV3VmFsdWU6ICcuLi4nLCBtc2c6ICcuLi4nfWBcblxuICAgICAgICBAcHJvcGVydHkgdmFsaWRhdGUgXG4gICAgICAgIEB0eXBlIGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZigkLnRyaW0odmFsdWUpID09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdmFsaWRhdGU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBTdWNjZXNzIGNhbGxiYWNrLiBDYWxsZWQgd2hlbiB2YWx1ZSBzdWNjZXNzZnVsbHkgc2VudCBvbiBzZXJ2ZXIgYW5kICoqcmVzcG9uc2Ugc3RhdHVzID0gMjAwKiouICBcbiAgICAgICAgVXNlZnVsbCB0byB3b3JrIHdpdGgganNvbiByZXNwb25zZS4gRm9yIGV4YW1wbGUsIGlmIHlvdXIgYmFja2VuZCByZXNwb25zZSBjYW4gYmUgPGNvZGU+e3N1Y2Nlc3M6IHRydWV9PC9jb2RlPlxuICAgICAgICBvciA8Y29kZT57c3VjY2VzczogZmFsc2UsIG1zZzogXCJzZXJ2ZXIgZXJyb3JcIn08L2NvZGU+IHlvdSBjYW4gY2hlY2sgaXQgaW5zaWRlIHRoaXMgY2FsbGJhY2suICBcbiAgICAgICAgSWYgaXQgcmV0dXJucyAqKnN0cmluZyoqIC0gbWVhbnMgZXJyb3Igb2NjdXJlZCBhbmQgc3RyaW5nIGlzIHNob3duIGFzIGVycm9yIG1lc3NhZ2UuICBcbiAgICAgICAgSWYgaXQgcmV0dXJucyAqKm9iamVjdCBsaWtlKiogPGNvZGU+e25ld1ZhbHVlOiAmbHQ7c29tZXRoaW5nJmd0O308L2NvZGU+IC0gaXQgb3ZlcndyaXRlcyB2YWx1ZSwgc3VibWl0dGVkIGJ5IHVzZXIuICBcbiAgICAgICAgT3RoZXJ3aXNlIG5ld1ZhbHVlIHNpbXBseSByZW5kZXJlZCBpbnRvIGVsZW1lbnQuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgc3VjY2VzcyBcbiAgICAgICAgQHR5cGUgZnVuY3Rpb25cbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAZXhhbXBsZVxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmKCFyZXNwb25zZS5zdWNjZXNzKSByZXR1cm4gcmVzcG9uc2UubXNnO1xuICAgICAgICB9XG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgc3VjY2VzczogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIEVycm9yIGNhbGxiYWNrLiBDYWxsZWQgd2hlbiByZXF1ZXN0IGZhaWxlZCAocmVzcG9uc2Ugc3RhdHVzICE9IDIwMCkuICBcbiAgICAgICAgVXNlZnVsbCB3aGVuIHlvdSB3YW50IHRvIHBhcnNlIGVycm9yIHJlc3BvbnNlIGFuZCBkaXNwbGF5IGEgY3VzdG9tIG1lc3NhZ2UuXG4gICAgICAgIE11c3QgcmV0dXJuICoqc3RyaW5nKiogLSB0aGUgbWVzc2FnZSB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGVycm9yIGJsb2NrLlxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgZXJyb3IgXG4gICAgICAgIEB0eXBlIGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQHNpbmNlIDEuNC40XG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbihyZXNwb25zZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdTZXJ2aWNlIHVuYXZhaWxhYmxlLiBQbGVhc2UgdHJ5IGxhdGVyLic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3Igc3VibWl0IGFqYXggcmVxdWVzdC5cbiAgICAgICAgTGlzdCBvZiB2YWx1ZXM6IGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkuYWpheFxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IGFqYXhPcHRpb25zIFxuICAgICAgICBAdHlwZSBvYmplY3RcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAc2luY2UgMS4xLjEgICAgICAgIFxuICAgICAgICBAZXhhbXBsZSBcbiAgICAgICAgYWpheE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICB9ICAgICAgICBcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgYWpheE9wdGlvbnM6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBXaGVyZSB0byBzaG93IGJ1dHRvbnM6IGxlZnQodHJ1ZSl8Ym90dG9tfGZhbHNlICBcbiAgICAgICAgRm9ybSB3aXRob3V0IGJ1dHRvbnMgaXMgYXV0by1zdWJtaXR0ZWQuXG5cbiAgICAgICAgQHByb3BlcnR5IHNob3didXR0b25zIFxuICAgICAgICBAdHlwZSBib29sZWFufHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCB0cnVlXG4gICAgICAgIEBzaW5jZSAxLjEuMVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgc2hvd2J1dHRvbnM6IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICBTY29wZSBmb3IgY2FsbGJhY2sgbWV0aG9kcyAoc3VjY2VzcywgdmFsaWRhdGUpLiAgXG4gICAgICAgIElmIDxjb2RlPm51bGw8L2NvZGU+IG1lYW5zIGVkaXRhYmxlZm9ybSBpbnN0YW5jZSBpdHNlbGYuIFxuXG4gICAgICAgIEBwcm9wZXJ0eSBzY29wZSBcbiAgICAgICAgQHR5cGUgRE9NRWxlbWVudHxvYmplY3RcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAc2luY2UgMS4yLjBcbiAgICAgICAgQHByaXZhdGVcbiAgICAgICAgKiovICAgICAgICAgICAgXG4gICAgICAgIHNjb3BlOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgV2hldGhlciB0byBzYXZlIG9yIGNhbmNlbCB2YWx1ZSB3aGVuIGl0IHdhcyBub3QgY2hhbmdlZCBidXQgZm9ybSB3YXMgc3VibWl0dGVkXG5cbiAgICAgICAgQHByb3BlcnR5IHNhdmVub2NoYW5nZSBcbiAgICAgICAgQHR5cGUgYm9vbGVhblxuICAgICAgICBAZGVmYXVsdCBmYWxzZVxuICAgICAgICBAc2luY2UgMS4yLjBcbiAgICAgICAgKiovXG4gICAgICAgIHNhdmVub2NoYW5nZTogZmFsc2VcbiAgICB9OyAgIFxuXG4gICAgLypcbiAgICBOb3RlOiBmb2xsb3dpbmcgcGFyYW1zIGNvdWxkIHJlZGVmaW5lZCBpbiBlbmdpbmU6IGJvb3RzdHJhcCBvciBqcXVlcnl1aTpcbiAgICBDbGFzc2VzICdjb250cm9sLWdyb3VwJyBhbmQgJ2VkaXRhYmxlLWVycm9yLWJsb2NrJyBtdXN0IGFsd2F5cyBwcmVzZW50IVxuICAgICovICAgICAgXG4gICAgJC5mbi5lZGl0YWJsZWZvcm0udGVtcGxhdGUgPSAnPGZvcm0gY2xhc3M9XCJmb3JtLWlubGluZSBlZGl0YWJsZWZvcm1cIj4nK1xuICAgICc8ZGl2IGNsYXNzPVwiY29udHJvbC1ncm91cFwiPicgKyBcbiAgICAnPGRpdj48ZGl2IGNsYXNzPVwiZWRpdGFibGUtaW5wdXRcIj48L2Rpdj48ZGl2IGNsYXNzPVwiZWRpdGFibGUtYnV0dG9uc1wiPjwvZGl2PjwvZGl2PicrXG4gICAgJzxkaXYgY2xhc3M9XCJlZGl0YWJsZS1lcnJvci1ibG9ja1wiPjwvZGl2PicgKyBcbiAgICAnPC9kaXY+JyArIFxuICAgICc8L2Zvcm0+JztcblxuICAgIC8vbG9hZGluZyBkaXZcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5sb2FkaW5nID0gJzxkaXYgY2xhc3M9XCJlZGl0YWJsZWZvcm0tbG9hZGluZ1wiPjwvZGl2Pic7XG5cbiAgICAvL2J1dHRvbnNcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5idXR0b25zID0gJzxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiZWRpdGFibGUtc3VibWl0XCI+b2s8L2J1dHRvbj4nK1xuICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImVkaXRhYmxlLWNhbmNlbFwiPmNhbmNlbDwvYnV0dG9uPic7ICAgICAgXG5cbiAgICAvL2Vycm9yIGNsYXNzIGF0dGFjaGVkIHRvIGNvbnRyb2wtZ3JvdXBcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckdyb3VwQ2xhc3MgPSBudWxsOyAgXG5cbiAgICAvL2Vycm9yIGNsYXNzIGF0dGFjaGVkIHRvIGVkaXRhYmxlLWVycm9yLWJsb2NrXG4gICAgJC5mbi5lZGl0YWJsZWZvcm0uZXJyb3JCbG9ja0NsYXNzID0gJ2VkaXRhYmxlLWVycm9yJztcbiAgICBcbiAgICAvL2VuZ2luZVxuICAgICQuZm4uZWRpdGFibGVmb3JtLmVuZ2luZSA9ICdqcXVlcnknO1xufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuKiBFZGl0YWJsZUZvcm0gdXRpbGl0ZXNcbiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICAvL3V0aWxzXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgKiBjbGFzc2ljIEpTIGluaGVyaXRhbmNlIGZ1bmN0aW9uXG4gICAgICAgICovICBcbiAgICAgICAgaW5oZXJpdDogZnVuY3Rpb24gKENoaWxkLCBQYXJlbnQpIHtcbiAgICAgICAgICAgIHZhciBGID0gZnVuY3Rpb24oKSB7IH07XG4gICAgICAgICAgICBGLnByb3RvdHlwZSA9IFBhcmVudC5wcm90b3R5cGU7XG4gICAgICAgICAgICBDaGlsZC5wcm90b3R5cGUgPSBuZXcgRigpO1xuICAgICAgICAgICAgQ2hpbGQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2hpbGQ7XG4gICAgICAgICAgICBDaGlsZC5zdXBlcmNsYXNzID0gUGFyZW50LnByb3RvdHlwZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgKiBzZXQgY2FyZXQgcG9zaXRpb24gaW4gaW5wdXRcbiAgICAgICAgKiBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTkxMjYvanF1ZXJ5LXNldC1jdXJzb3ItcG9zaXRpb24taW4tdGV4dC1hcmVhXG4gICAgICAgICovICAgICAgICBcbiAgICAgICAgc2V0Q3Vyc29yUG9zaXRpb246IGZ1bmN0aW9uKGVsZW0sIHBvcykge1xuICAgICAgICAgICAgaWYgKGVsZW0uc2V0U2VsZWN0aW9uUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBlbGVtLnNldFNlbGVjdGlvblJhbmdlKHBvcywgcG9zKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbS5jcmVhdGVUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBlbGVtLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIHBvcyk7XG4gICAgICAgICAgICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBwb3MpO1xuICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAqIGZ1bmN0aW9uIHRvIHBhcnNlIEpTT04gaW4gKnNpbmdsZSogcXVvdGVzLiAoanF1ZXJ5IGF1dG9tYXRpY2FsbHkgcGFyc2Ugb25seSBkb3VibGUgcXVvdGVzKVxuICAgICAgICAqIFRoYXQgYWxsb3dzIHN1Y2ggY29kZSBhczogPGEgZGF0YS1zb3VyY2U9XCJ7J2EnOiAnYicsICdjJzogJ2QnfVwiPlxuICAgICAgICAqIHNhZmUgPSB0cnVlIC0tPiBtZWFucyBubyBleGNlcHRpb24gd2lsbCBiZSB0aHJvd25cbiAgICAgICAgKiBmb3IgZGV0YWlscyBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NDEwMzQ4L2hvdy10by1zZXQtanNvbi1mb3JtYXQtdG8taHRtbDUtZGF0YS1hdHRyaWJ1dGVzLWluLXRoZS1qcXVlcnlcbiAgICAgICAgKi9cbiAgICAgICAgdHJ5UGFyc2VKc29uOiBmdW5jdGlvbihzLCBzYWZlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMubGVuZ3RoICYmIHMubWF0Y2goL15bXFx7XFxbXS4qW1xcfVxcXV0kLykpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2FmZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLypqc2xpbnQgZXZpbDogdHJ1ZSovXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBzKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGV2aWw6IGZhbHNlKi9cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge30gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGV2aWw6IHRydWUqL1xuICAgICAgICAgICAgICAgICAgICBzID0gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBzKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgLypqc2xpbnQgZXZpbDogZmFsc2UqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAqIHNsaWNlIG9iamVjdCBieSBzcGVjaWZpZWQga2V5c1xuICAgICAgICAqL1xuICAgICAgICBzbGljZU9iajogZnVuY3Rpb24ob2JqLCBrZXlzLCBjYXNlU2Vuc2l0aXZlIC8qIGRlZmF1bHQ6IGZhbHNlICovKSB7XG4gICAgICAgICAgICB2YXIga2V5LCBrZXlMb3dlciwgbmV3T2JqID0ge307XG5cbiAgICAgICAgICAgIGlmICghJC5pc0FycmF5KGtleXMpIHx8ICFrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3doZW4gZ2V0dGluZyBkYXRhLSogYXR0cmlidXRlcyB2aWEgJC5kYXRhKCkgaXQncyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlLlxuICAgICAgICAgICAgICAgIC8vZGV0YWlsczogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NjAyNTY1L3VzaW5nLWRhdGEtYXR0cmlidXRlcy13aXRoLWpxdWVyeVxuICAgICAgICAgICAgICAgIC8vd29ya2Fyb3VuZCBpcyBjb2RlIGJlbG93LlxuICAgICAgICAgICAgICAgIGtleUxvd2VyID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXlMb3dlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5TG93ZXJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICBleGNsdWRlIGNvbXBsZXggb2JqZWN0cyBmcm9tICQuZGF0YSgpIGJlZm9yZSBwYXNzIHRvIGNvbmZpZ1xuICAgICAgICAqL1xuICAgICAgICBnZXRDb25maWdEYXRhOiBmdW5jdGlvbigkZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgICAgICAgICQuZWFjaCgkZWxlbWVudC5kYXRhKCksIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdiAhPT0gJ29iamVjdCcgfHwgKHYgJiYgdHlwZW9mIHYgPT09ICdvYmplY3QnICYmICh2LmNvbnN0cnVjdG9yID09PSBPYmplY3QgfHwgdi5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhW2tdID0gdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgICByZXR1cm5zIGtleXMgb2Ygb2JqZWN0XG4gICAgICAgICovXG4gICAgICAgIG9iamVjdEtleXM6IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvKTsgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobyAhPT0gT2JqZWN0KG8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGs9W10sIHA7XG4gICAgICAgICAgICAgICAgZm9yIChwIGluIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLHApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrLnB1c2gocCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgLyoqXG4gICAgICAgIG1ldGhvZCB0byBlc2NhcGUgaHRtbC5cbiAgICAgICAqKi9cbiAgICAgICBlc2NhcGU6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICByZXR1cm4gJCgnPGRpdj4nKS50ZXh0KHN0cikuaHRtbCgpO1xuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgLypcbiAgICAgICAgcmV0dXJucyBhcnJheSBpdGVtcyBmcm9tIHNvdXJjZURhdGEgaGF2aW5nIHZhbHVlIHByb3BlcnR5IGVxdWFsIG9yIGluQXJyYXkgb2YgJ3ZhbHVlJ1xuICAgICAgICovXG4gICAgICAgaXRlbXNCeVZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgc291cmNlRGF0YSwgdmFsdWVQcm9wKSB7XG4gICAgICAgICAgIGlmKCFzb3VyY2VEYXRhIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgXG4gICAgICAgICAgIGlmICh0eXBlb2YodmFsdWVQcm9wKSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICB2YXIgaWRLZXkgPSB2YWx1ZVByb3AgfHwgJ3ZhbHVlJztcbiAgICAgICAgICAgICAgIHZhbHVlUHJvcCA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlW2lkS2V5XTsgfTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICB2YXIgaXNWYWxBcnJheSA9ICQuaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgIHJlc3VsdCA9IFtdLCBcbiAgICAgICAgICAgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgJC5lYWNoKHNvdXJjZURhdGEsIGZ1bmN0aW9uKGksIG8pIHtcbiAgICAgICAgICAgICAgIGlmKG8uY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHRoYXQuaXRlbXNCeVZhbHVlKHZhbHVlLCBvLmNoaWxkcmVuLCB2YWx1ZVByb3ApKTtcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgLypqc2xpbnQgZXFlcTogdHJ1ZSovXG4gICAgICAgICAgICAgICAgICAgaWYoaXNWYWxBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICBpZigkLmdyZXAodmFsdWUsIGZ1bmN0aW9uKHYpeyAgcmV0dXJuIHYgPT0gKG8gJiYgdHlwZW9mIG8gPT09ICdvYmplY3QnID8gdmFsdWVQcm9wKG8pIDogbyk7IH0pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobyk7IFxuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1WYWx1ZSA9IChvICYmICh0eXBlb2YgbyA9PT0gJ29iamVjdCcpKSA/IHZhbHVlUHJvcChvKSA6IG87XG4gICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlID09IGl0ZW1WYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobyk7IFxuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IGZhbHNlKi9cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIFxuICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgLypcbiAgICAgICBSZXR1cm5zIGlucHV0IGJ5IG9wdGlvbnM6IHR5cGUsIG1vZGUuIFxuICAgICAgICovXG4gICAgICAgY3JlYXRlSW5wdXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgdmFyIFR5cGVDb25zdHJ1Y3RvciwgdHlwZU9wdGlvbnMsIGlucHV0LFxuICAgICAgICAgICB0eXBlID0gb3B0aW9ucy50eXBlO1xuXG4gICAgICAgICAgIC8vYGRhdGVgIGlzIHNvbWUga2luZCBvZiB2aXJ0dWFsIHR5cGUgdGhhdCBpcyB0cmFuc2Zvcm1lZCB0byBvbmUgb2YgZXhhY3QgdHlwZXNcbiAgICAgICAgICAgLy9kZXBlbmRpbmcgb24gbW9kZSBhbmQgY29yZSBsaWJcbiAgICAgICAgICAgaWYodHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAvL2lubGluZVxuICAgICAgICAgICAgICAgaWYob3B0aW9ucy5tb2RlID09PSAnaW5saW5lJykge1xuICAgICAgICAgICAgICAgICAgIGlmKCQuZm4uZWRpdGFibGV0eXBlcy5kYXRlZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdkYXRlZmllbGQnO1xuICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZigkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZXVpZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdkYXRldWlmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgLy9wb3B1cFxuICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICBpZigkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2RhdGUnO1xuICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZigkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZXVpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZXVpJztcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgIC8vaWYgdHlwZSBzdGlsbCBgZGF0ZWAgYW5kIG5vdCBleGlzdCBpbiB0eXBlcywgcmVwbGFjZSB3aXRoIGBjb21ib2RhdGVgIHRoYXQgaXMgYmFzZSBpbnB1dFxuICAgICAgICAgICAgICAgaWYodHlwZSA9PT0gJ2RhdGUnICYmICEkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnY29tYm9kYXRlJztcbiAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgXG4gICAgICAgICAgIC8vYGRhdGV0aW1lYCBzaG91bGQgYmUgZGF0ZXRpbWVmaWVsZCBpbiAnaW5saW5lJyBtb2RlXG4gICAgICAgICAgIGlmKHR5cGUgPT09ICdkYXRldGltZScgJiYgb3B0aW9ucy5tb2RlID09PSAnaW5saW5lJykge1xuICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZXRpbWVmaWVsZCc7ICBcbiAgICAgICAgICAgfSAgICAgICAgICAgXG5cbiAgICAgICAgICAgLy9jaGFuZ2Ugd3lzaWh0bWw1IHRvIHRleHRhcmVhIGZvciBqcXVlcnkgVUkgYW5kIHBsYWluIHZlcnNpb25zXG4gICAgICAgICAgIGlmKHR5cGUgPT09ICd3eXNpaHRtbDUnICYmICEkLmZuLmVkaXRhYmxldHlwZXNbdHlwZV0pIHtcbiAgICAgICAgICAgICAgIHR5cGUgPSAndGV4dGFyZWEnO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgLy9jcmVhdGUgaW5wdXQgb2Ygc3BlY2lmaWVkIHR5cGUuIElucHV0IHdpbGwgYmUgdXNlZCBmb3IgY29udmVydGluZyB2YWx1ZSwgbm90IGluIGZvcm1cbiAgICAgICAgICAgaWYodHlwZW9mICQuZm4uZWRpdGFibGV0eXBlc1t0eXBlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgVHlwZUNvbnN0cnVjdG9yID0gJC5mbi5lZGl0YWJsZXR5cGVzW3R5cGVdO1xuICAgICAgICAgICAgICAgdHlwZU9wdGlvbnMgPSB0aGlzLnNsaWNlT2JqKG9wdGlvbnMsIHRoaXMub2JqZWN0S2V5cyhUeXBlQ29uc3RydWN0b3IuZGVmYXVsdHMpKTtcbiAgICAgICAgICAgICAgIGlucHV0ID0gbmV3IFR5cGVDb25zdHJ1Y3Rvcih0eXBlT3B0aW9ucyk7XG4gICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAkLmVycm9yKCdVbmtub3duIHR5cGU6ICcrIHR5cGUpO1xuICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyBcbiAgICAgICAgICAgfSAgXG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICAvL3NlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcyNjQ4OTkvZGV0ZWN0LWNzcy10cmFuc2l0aW9ucy11c2luZy1qYXZhc2NyaXB0LWFuZC13aXRob3V0LW1vZGVybml6clxuICAgICAgIHN1cHBvcnRzVHJhbnNpdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgdmFyIGIgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgICAgICAgIHMgPSBiLnN0eWxlLFxuICAgICAgICAgICAgICAgcCA9ICd0cmFuc2l0aW9uJyxcbiAgICAgICAgICAgICAgIHYgPSBbJ01veicsICdXZWJraXQnLCAnS2h0bWwnLCAnTycsICdtcyddO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgIGlmKHR5cGVvZiBzW3BdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IFxuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgLy8gVGVzdHMgZm9yIHZlbmRvciBzcGVjaWZpYyBwcm9wXG4gICAgICAgICAgIHAgPSBwLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcC5zdWJzdHIoMSk7XG4gICAgICAgICAgIGZvcih2YXIgaT0wOyBpPHYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgIGlmKHR5cGVvZiBzW3ZbaV0gKyBwXSA9PT0gJ3N0cmluZycpIHsgXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IFxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgXG4gICAgfTsgICAgICBcbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcbkF0dGFjaGVzIHN0YW5kLWFsb25lIGNvbnRhaW5lciB3aXRoIGVkaXRhYmxlLWZvcm0gdG8gSFRNTCBlbGVtZW50LiBFbGVtZW50IGlzIHVzZWQgb25seSBmb3IgcG9zaXRpb25pbmcsIHZhbHVlIGlzIG5vdCBzdG9yZWQgYW55d2hlcmUuPGJyPlxuVGhpcyBtZXRob2QgYXBwbGllZCBpbnRlcm5hbGx5IGluIDxjb2RlPiQoKS5lZGl0YWJsZSgpPC9jb2RlPi4gWW91IHNob3VsZCBzdWJzY3JpYmUgb24gaXQncyBldmVudHMgKHNhdmUgLyBjYW5jZWwpIHRvIGdldCBwcm9maXQgb2YgaXQuPGJyPlxuRmluYWwgcmVhbGl6YXRpb24gY2FuIGJlIGRpZmZlcmVudDogYm9vdHN0cmFwLXBvcG92ZXIsIGpxdWVyeXVpLXRvb2x0aXAsIHBvc2h5dGlwLCBpbmxpbmUtZGl2LiBJdCBkZXBlbmRzIG9uIHdoaWNoIGpzIGZpbGUgeW91IGluY2x1ZGUuPGJyPlxuQXBwbGllZCBhcyBqUXVlcnkgbWV0aG9kLlxuXG5AY2xhc3MgZWRpdGFibGVDb250YWluZXJcbkB1c2VzIGVkaXRhYmxlZm9ybVxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBQb3B1cCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdChlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9O1xuICAgIFxuICAgIHZhciBJbmxpbmUgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfTsgICAgXG5cbiAgICAvL21ldGhvZHNcbiAgICBQb3B1cC5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnRhaW5lck5hbWU6IG51bGwsIC8vbWV0aG9kIHRvIGNhbGwgY29udGFpbmVyIG9uIGVsZW1lbnRcbiAgICAgICAgY29udGFpbmVyRGF0YU5hbWU6IG51bGwsIC8vb2JqZWN0IG5hbWUgaW4gZWxlbWVudCdzIC5kYXRhKClcbiAgICAgICAgaW5uZXJDc3M6IG51bGwsIC8vdGJkIGluIGNoaWxkIGNsYXNzXG4gICAgICAgIGNvbnRhaW5lckNsYXNzOiAnZWRpdGFibGUtY29udGFpbmVyIGVkaXRhYmxlLXBvcHVwJywgLy9jc3MgY2xhc3MgYXBwbGllZCB0byBjb250YWluZXIgZWxlbWVudFxuICAgICAgICBkZWZhdWx0czoge30sIC8vY29udGFpbmVyIGl0c2VsZiBkZWZhdWx0c1xuICAgICAgICBcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICAgICAgICAvL3NpbmNlIDEuNC4xIGNvbnRhaW5lciBkbyBub3QgdXNlIGRhdGEtKiBkaXJlY3RseSBhcyB0aGV5IGFscmVhZHkgbWVyZ2VkIGludG8gb3B0aW9ucy5cbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxlQ29udGFpbmVyLmRlZmF1bHRzLCBvcHRpb25zKTsgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3BsaXRPcHRpb25zKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vc2V0IHNjb3BlIG9mIGZvcm0gY2FsbGJhY2tzIHRvIGVsZW1lbnRcbiAgICAgICAgICAgIHRoaXMuZm9ybU9wdGlvbnMuc2NvcGUgPSB0aGlzLiRlbGVtZW50WzBdOyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5pbml0Q29udGFpbmVyKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZmxhZyB0byBoaWRlIGNvbnRhaW5lciwgd2hlbiBzYXZpbmcgdmFsdWUgd2lsbCBmaW5pc2hcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZEhpZGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy9iaW5kICdkZXN0cm95ZWQnIGxpc3RlbmVyIHRvIGRlc3Ryb3kgY29udGFpbmVyIHdoZW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gZG9tXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdkZXN0cm95ZWQnLCAkLnByb3h5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICB9LCB0aGlzKSk7IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2F0dGFjaCBkb2N1bWVudCBoYW5kbGVyIHRvIGNsb3NlIGNvbnRhaW5lcnMgb24gY2xpY2sgLyBlc2NhcGVcbiAgICAgICAgICAgIGlmKCEkKGRvY3VtZW50KS5kYXRhKCdlZGl0YWJsZS1oYW5kbGVycy1hdHRhY2hlZCcpKSB7XG4gICAgICAgICAgICAgICAgLy9jbG9zZSBhbGwgb24gZXNjYXBlXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2tleXVwLmVkaXRhYmxlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggPT09IDI3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcuZWRpdGFibGUtb3BlbicpLmVkaXRhYmxlQ29udGFpbmVyKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RvZG86IHJldHVybiBmb2N1cyBvbiBlbGVtZW50IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL2Nsb3NlIGNvbnRhaW5lcnMgd2hlbiBjbGljayBvdXRzaWRlIFxuICAgICAgICAgICAgICAgIC8vKG1vdXNlZG93biBjb3VsZCBiZSBiZXR0ZXIgdGhhbiBjbGljaywgaXQgY2xvc2VzIGV2ZXJ5dGhpbmcgYWxzbyBvbiBkcmFnIGRyb3ApXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrLmVkaXRhYmxlJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQoZS50YXJnZXQpLCBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZV9jbGFzc2VzID0gWycuZWRpdGFibGUtY29udGFpbmVyJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy51aS1kYXRlcGlja2VyLWhlYWRlcicsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuZGF0ZXBpY2tlcicsIC8vaW4gaW5saW5lIG1vZGUgZGF0ZXBpY2tlciBpcyByZW5kZXJlZCBpbnRvIGJvZHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLm1vZGFsLWJhY2tkcm9wJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5ib290c3RyYXAtd3lzaWh0bWw1LWluc2VydC1pbWFnZS1tb2RhbCcsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuYm9vdHN0cmFwLXd5c2lodG1sNS1pbnNlcnQtbGluay1tb2RhbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBpZiBlbGVtZW50IGlzIGRldGFjaGVkLiBJdCBvY2N1cnMgd2hlbiBjbGlja2luZyBpbiBib290c3RyYXAgZGF0ZXBpY2tlclxuICAgICAgICAgICAgICAgICAgICBpZiAoISQuY29udGFpbnMoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBlLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvL2ZvciBzb21lIHJlYXNvbiBGRiAyMCBnZW5lcmF0ZXMgZXh0cmEgZXZlbnQgKGNsaWNrKSBpbiBzZWxlY3QyIHdpZGdldCB3aXRoIGUudGFyZ2V0ID0gZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy93ZSBuZWVkIHRvIGZpbHRlciBpdCB2aWEgY29uc3RydWN0aW9uIGJlbG93LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpdGFsZXRzL3gtZWRpdGFibGUvaXNzdWVzLzE5OVxuICAgICAgICAgICAgICAgICAgICAvL1Bvc3NpYmx5IHJlbGF0ZWQgdG8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDExOTc5My93aHktZG9lcy1maXJlZm94LXJlYWN0LWRpZmZlcmVudGx5LWZyb20td2Via2l0LWFuZC1pZS10by1jbGljay1ldmVudC1vbi1zZWxlY1xuICAgICAgICAgICAgICAgICAgICBpZigkdGFyZ2V0LmlzKGRvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvL2lmIGNsaWNrIGluc2lkZSBvbmUgb2YgZXhjbHVkZSBjbGFzc2VzIC0tPiBubyBub3RoaW5nXG4gICAgICAgICAgICAgICAgICAgIGZvcihpPTA7IGk8ZXhjbHVkZV9jbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHRhcmdldC5pcyhleGNsdWRlX2NsYXNzZXNbaV0pIHx8ICR0YXJnZXQucGFyZW50cyhleGNsdWRlX2NsYXNzZXNbaV0pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vY2xvc2UgYWxsIG9wZW4gY29udGFpbmVycyAoZXhjZXB0IG9uZSAtIHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgUG9wdXAucHJvdG90eXBlLmNsb3NlT3RoZXJzKGUudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5kYXRhKCdlZGl0YWJsZS1oYW5kbGVycy1hdHRhY2hlZCcsIHRydWUpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vc3BsaXQgb3B0aW9ucyBvbiBjb250YWluZXJPcHRpb25zIGFuZCBmb3JtT3B0aW9uc1xuICAgICAgICBzcGxpdE9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJPcHRpb25zID0ge307XG4gICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zID0ge307XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCEkLmZuW3RoaXMuY29udGFpbmVyTmFtZV0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5jb250YWluZXJOYW1lICsgJyBub3QgZm91bmQuIEhhdmUgeW91IGluY2x1ZGVkIGNvcnJlc3BvbmRpbmcganMgZmlsZT8nKTsgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9rZXlzIGRlZmluZWQgaW4gY29udGFpbmVyIGRlZmF1bHRzIGdvIHRvIGNvbnRhaW5lciwgb3RoZXJzIGdvIHRvIGZvcm1cbiAgICAgICAgICAgIGZvcih2YXIgayBpbiB0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgaWYoayBpbiB0aGlzLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyT3B0aW9uc1trXSA9IHRoaXMub3B0aW9uc1trXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgdGhpcy5mb3JtT3B0aW9uc1trXSA9IHRoaXMub3B0aW9uc1trXTtcbiAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIFJldHVybnMganF1ZXJ5IG9iamVjdCBvZiBjb250YWluZXJcbiAgICAgICAgQG1ldGhvZCB0aXAoKVxuICAgICAgICAqLyAgICAgICAgIFxuICAgICAgICB0aXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyKCkgPyB0aGlzLmNvbnRhaW5lcigpLiR0aXAgOiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qIHJldHVybnMgY29udGFpbmVyIG9iamVjdCAqL1xuICAgICAgICBjb250YWluZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lcjtcbiAgICAgICAgICAgIC8vZmlyc3QsIHRyeSBnZXQgaXQgYnkgYGNvbnRhaW5lckRhdGFOYW1lYFxuICAgICAgICAgICAgaWYodGhpcy5jb250YWluZXJEYXRhTmFtZSkge1xuICAgICAgICAgICAgICAgIGlmKGNvbnRhaW5lciA9IHRoaXMuJGVsZW1lbnQuZGF0YSh0aGlzLmNvbnRhaW5lckRhdGFOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vc2Vjb25kLCB0cnkgYGNvbnRhaW5lck5hbWVgXG4gICAgICAgICAgICBjb250YWluZXIgPSB0aGlzLiRlbGVtZW50LmRhdGEodGhpcy5jb250YWluZXJOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyogY2FsbCBuYXRpdmUgbWV0aG9kIG9mIHVuZGVybHlpbmcgY29udGFpbmVyLCBlLmcuIHRoaXMuJGVsZW1lbnQucG9wb3ZlcignbWV0aG9kJykgKi8gXG4gICAgICAgIGNhbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudFt0aGlzLmNvbnRhaW5lck5hbWVdLmFwcGx5KHRoaXMuJGVsZW1lbnQsIGFyZ3VtZW50cyk7IFxuICAgICAgICB9LCAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpbml0Q29udGFpbmVyOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGhpcy5jYWxsKHRoaXMuY29udGFpbmVyT3B0aW9ucyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuZGVyRm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRmb3JtXG4gICAgICAgICAgICAuZWRpdGFibGVmb3JtKHRoaXMuZm9ybU9wdGlvbnMpXG4gICAgICAgICAgICAub24oe1xuICAgICAgICAgICAgICAgIHNhdmU6ICQucHJveHkodGhpcy5zYXZlLCB0aGlzKSwgLy9jbGljayBvbiBzdWJtaXQgYnV0dG9uICh2YWx1ZSBjaGFuZ2VkKVxuICAgICAgICAgICAgICAgIG5vY2hhbmdlOiAkLnByb3h5KGZ1bmN0aW9uKCl7IHRoaXMuaGlkZSgnbm9jaGFuZ2UnKTsgfSwgdGhpcyksIC8vY2xpY2sgb24gc3VibWl0IGJ1dHRvbiAodmFsdWUgTk9UIGNoYW5nZWQpICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNhbmNlbDogJC5wcm94eShmdW5jdGlvbigpeyB0aGlzLmhpZGUoJ2NhbmNlbCcpOyB9LCB0aGlzKSwgLy9jbGljayBvbiBjYWxjZWwgYnV0dG9uXG4gICAgICAgICAgICAgICAgc2hvdzogJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5kZWxheWVkSGlkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKHRoaXMuZGVsYXllZEhpZGUucmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXllZEhpZGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMpLCAvL3JlLXBvc2l0aW9uIGNvbnRhaW5lciBldmVyeSB0aW1lIGZvcm0gaXMgc2hvd24gKG9jY3VycyBlYWNoIHRpbWUgYWZ0ZXIgbG9hZGluZyBzdGF0ZSlcbiAgICAgICAgICAgICAgICByZW5kZXJpbmc6ICQucHJveHkodGhpcy5zZXRQb3NpdGlvbiwgdGhpcyksIC8vdGhpcyBhbGxvd3MgdG8gcGxhY2UgY29udGFpbmVyIGNvcnJlY3RseSB3aGVuIGxvYWRpbmcgc2hvd25cbiAgICAgICAgICAgICAgICByZXNpemU6ICQucHJveHkodGhpcy5zZXRQb3NpdGlvbiwgdGhpcyksIC8vdGhpcyBhbGxvd3MgdG8gcmUtcG9zaXRpb24gY29udGFpbmVyIHdoZW4gZm9ybSBzaXplIGlzIGNoYW5nZWQgXG4gICAgICAgICAgICAgICAgcmVuZGVyZWQ6ICQucHJveHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgRmlyZWQgd2hlbiBjb250YWluZXIgaXMgc2hvd24gYW5kIGZvcm0gaXMgcmVuZGVyZWQgKGZvciBzZWxlY3Qgd2lsbCB3YWl0IGZvciBsb2FkaW5nIGRyb3Bkb3duIG9wdGlvbnMpLiAgXG4gICAgICAgICAgICAgICAgICAgICoqTm90ZToqKiBCb290c3RyYXAgcG9wb3ZlciBoYXMgb3duIGBzaG93bmAgZXZlbnQgdGhhdCBub3cgY2Fubm90IGJlIHNlcGFyYXRlZCBmcm9tIHgtZWRpdGFibGUncyBvbmUuXG4gICAgICAgICAgICAgICAgICAgIFRoZSB3b3JrYXJvdW5kIGlzIHRvIGNoZWNrIGBhcmd1bWVudHMubGVuZ3RoYCB0aGF0IGlzIGFsd2F5cyBgMmAgZm9yIHgtZWRpdGFibGUuICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBAZXZlbnQgc2hvd24gXG4gICAgICAgICAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICAgICAgICAgJCgnI3VzZXJuYW1lJykub24oJ3Nob3duJywgZnVuY3Rpb24oZSwgZWRpdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlLmlucHV0LiRpbnB1dC52YWwoJ292ZXJ3cml0aW5nIHZhbHVlIG9mIGlucHV0Li4nKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICoqLyAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgIFRPRE86IGFkZGVkIHNlY29uZCBwYXJhbSBtYWlubHkgdG8gZGlzdGluZ3Vpc2ggZnJvbSBib290c3RyYXAncyBzaG93biBldmVudC4gSXQncyBhIGhvdGZpeCB0aGF0IHdpbGwgYmUgc29sdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucyB2aWEgbmFtZXNwYWNlZCBldmVudHMuICBcbiAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VySGFuZGxlcignc2hvd24nLCAkKHRoaXMub3B0aW9ucy5zY29wZSkuZGF0YSgnZWRpdGFibGUnKSk7IFxuICAgICAgICAgICAgICAgIH0sIHRoaXMpIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lZGl0YWJsZWZvcm0oJ3JlbmRlcicpO1xuICAgICAgICB9LCAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgIFNob3dzIGNvbnRhaW5lciB3aXRoIGZvcm1cbiAgICAgICAgQG1ldGhvZCBzaG93KClcbiAgICAgICAgQHBhcmFtIHtib29sZWFufSBjbG9zZUFsbCBXaGV0aGVyIHRvIGNsb3NlIGFsbCBvdGhlciBlZGl0YWJsZSBjb250YWluZXJzIHdoZW4gc2hvd2luZyB0aGlzIG9uZS4gRGVmYXVsdCB0cnVlLlxuICAgICAgICAqKi9cbiAgICAgICAgLyogTm90ZTogcG9zaHl0aXAgb3dlcndyaXRlcyB0aGlzIG1ldGhvZCB0b3RhbGx5ISAqLyAgICAgICAgICBcbiAgICAgICAgc2hvdzogZnVuY3Rpb24gKGNsb3NlQWxsKSB7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdlZGl0YWJsZS1vcGVuJyk7XG4gICAgICAgICAgICBpZihjbG9zZUFsbCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAvL2Nsb3NlIGFsbCBvcGVuIGNvbnRhaW5lcnMgKGV4Y2VwdCB0aGlzKVxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VPdGhlcnModGhpcy4kZWxlbWVudFswXSk7ICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zaG93IGNvbnRhaW5lciBpdHNlbGZcbiAgICAgICAgICAgIHRoaXMuaW5uZXJTaG93KCk7XG4gICAgICAgICAgICB0aGlzLnRpcCgpLmFkZENsYXNzKHRoaXMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgQ3VycmVudGx5LCBmb3JtIGlzIHJlLXJlbmRlcmVkIG9uIGV2ZXJ5IHNob3cuIFxuICAgICAgICAgICAgVGhlIG1haW4gcmVhc29uIGlzIHRoYXQgd2UgZG9udCBrbm93LCB3aGF0IHdpbGwgY29udGFpbmVyIGRvIHdpdGggY29udGVudCB3aGVuIGNsb3NlZDpcbiAgICAgICAgICAgIHJlbW92ZSgpLCBkZXRhY2goKSBvciBqdXN0IGhpZGUoKSAtIGl0IGRlcGVuZHMgb24gY29udGFpbmVyLlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBEZXRhY2hpbmcgZm9ybSBpdHNlbGYgYmVmb3JlIGhpZGUgYW5kIHJlLWluc2VydCBiZWZvcmUgc2hvdyBpcyBnb29kIHNvbHV0aW9uLCBcbiAgICAgICAgICAgIGJ1dCB2aXN1YWxseSBpdCBsb29rcyB1Z2x5IC0tPiBjb250YWluZXIgY2hhbmdlcyBzaXplIGJlZm9yZSBoaWRlLiAgXG4gICAgICAgICAgICAqLyAgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiBmb3JtIGFscmVhZHkgZXhpc3QgLSBkZWxldGUgcHJldmlvdXMgZGF0YSBcbiAgICAgICAgICAgIGlmKHRoaXMuJGZvcm0pIHtcbiAgICAgICAgICAgICAgICAvL3RvZG86IGRlc3Ryb3kgcHJldiBkYXRhIVxuICAgICAgICAgICAgICAgIC8vdGhpcy4kZm9ybS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJGZvcm0gPSAkKCc8ZGl2PicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2luc2VydCBmb3JtIGludG8gY29udGFpbmVyIGJvZHlcbiAgICAgICAgICAgIGlmKHRoaXMudGlwKCkuaXModGhpcy5pbm5lckNzcykpIHtcbiAgICAgICAgICAgICAgICAvL2ZvciBpbmxpbmUgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgdGhpcy50aXAoKS5hcHBlbmQodGhpcy4kZm9ybSk7IFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpcCgpLmZpbmQodGhpcy5pbm5lckNzcykuYXBwZW5kKHRoaXMuJGZvcm0pO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9yZW5kZXIgZm9ybVxuICAgICAgICAgICAgdGhpcy5yZW5kZXJGb3JtKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgIEhpZGVzIGNvbnRhaW5lciB3aXRoIGZvcm1cbiAgICAgICAgQG1ldGhvZCBoaWRlKClcbiAgICAgICAgQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBSZWFzb24gY2F1c2VkIGhpZGluZy4gQ2FuIGJlIDxjb2RlPnNhdmV8Y2FuY2VsfG9uYmx1cnxub2NoYW5nZXx1bmRlZmluZWQgKD1tYW51YWwpPC9jb2RlPlxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaGlkZTogZnVuY3Rpb24ocmVhc29uKSB7ICBcbiAgICAgICAgICAgIGlmKCF0aGlzLnRpcCgpIHx8ICF0aGlzLnRpcCgpLmlzKCc6dmlzaWJsZScpIHx8ICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdlZGl0YWJsZS1vcGVuJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaWYgZm9ybSBpcyBzYXZpbmcgdmFsdWUsIHNjaGVkdWxlIGhpZGVcbiAgICAgICAgICAgIGlmKHRoaXMuJGZvcm0uZGF0YSgnZWRpdGFibGVmb3JtJykuaXNTYXZpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ZWRIaWRlID0ge3JlYXNvbjogcmVhc29ufTtcbiAgICAgICAgICAgICAgICByZXR1cm47ICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ZWRIaWRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2VkaXRhYmxlLW9wZW4nKTsgICBcbiAgICAgICAgICAgIHRoaXMuaW5uZXJIaWRlKCk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgRmlyZWQgd2hlbiBjb250YWluZXIgd2FzIGhpZGRlbi4gSXQgb2NjdXJzIG9uIGJvdGggc2F2ZSBvciBjYW5jZWwuICBcbiAgICAgICAgICAgICoqTm90ZToqKiBCb290c3RyYXAgcG9wb3ZlciBoYXMgb3duIGBoaWRkZW5gIGV2ZW50IHRoYXQgbm93IGNhbm5vdCBiZSBzZXBhcmF0ZWQgZnJvbSB4LWVkaXRhYmxlJ3Mgb25lLlxuICAgICAgICAgICAgVGhlIHdvcmthcm91bmQgaXMgdG8gY2hlY2sgYGFyZ3VtZW50cy5sZW5ndGhgIHRoYXQgaXMgYWx3YXlzIGAyYCBmb3IgeC1lZGl0YWJsZS4gXG5cbiAgICAgICAgICAgIEBldmVudCBoaWRkZW4gXG4gICAgICAgICAgICBAcGFyYW0ge29iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICBAcGFyYW0ge3N0cmluZ30gcmVhc29uIFJlYXNvbiBjYXVzZWQgaGlkaW5nLiBDYW4gYmUgPGNvZGU+c2F2ZXxjYW5jZWx8b25ibHVyfG5vY2hhbmdlfG1hbnVhbDwvY29kZT5cbiAgICAgICAgICAgIEBleGFtcGxlXG4gICAgICAgICAgICAkKCcjdXNlcm5hbWUnKS5vbignaGlkZGVuJywgZnVuY3Rpb24oZSwgcmVhc29uKSB7XG4gICAgICAgICAgICAgICAgaWYocmVhc29uID09PSAnc2F2ZScgfHwgcmVhc29uID09PSAnY2FuY2VsJykge1xuICAgICAgICAgICAgICAgICAgICAvL2F1dG8tb3BlbiBuZXh0IGVkaXRhYmxlXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgndHInKS5uZXh0KCkuZmluZCgnLmVkaXRhYmxlJykuZWRpdGFibGUoJ3Nob3cnKTtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAqKi9cbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJ2hpZGRlbicsIHJlYXNvbiB8fCAnbWFudWFsJyk7ICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyogaW50ZXJuYWwgc2hvdyBtZXRob2QuIFRvIGJlIG92ZXJ3cml0dGVuIGluIGNoaWxkIGNsYXNzZXMgKi9cbiAgICAgICAgaW5uZXJTaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgXG4gICAgICAgIH0sICAgICAgICBcblxuICAgICAgICAvKiBpbnRlcm5hbCBoaWRlIG1ldGhvZC4gVG8gYmUgb3ZlcndyaXR0ZW4gaW4gY2hpbGQgY2xhc3NlcyAqL1xuICAgICAgICBpbm5lckhpZGU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFRvZ2dsZXMgY29udGFpbmVyIHZpc2liaWxpdHkgKHNob3cgLyBoaWRlKVxuICAgICAgICBAbWV0aG9kIHRvZ2dsZSgpXG4gICAgICAgIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2VBbGwgV2hldGhlciB0byBjbG9zZSBhbGwgb3RoZXIgZWRpdGFibGUgY29udGFpbmVycyB3aGVuIHNob3dpbmcgdGhpcyBvbmUuIERlZmF1bHQgdHJ1ZS5cbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKGNsb3NlQWxsKSB7XG4gICAgICAgICAgICBpZih0aGlzLmNvbnRhaW5lcigpICYmIHRoaXMudGlwKCkgJiYgdGhpcy50aXAoKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coY2xvc2VBbGwpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiBjb250YWluZXIgd2hlbiBjb250ZW50IGNoYW5nZWQuXG4gICAgICAgIEBtZXRob2Qgc2V0UG9zaXRpb24oKVxuICAgICAgICAqLyAgICAgICBcbiAgICAgICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy90YmQgaW4gY2hpbGQgY2xhc3NcbiAgICAgICAgfSxcblxuICAgICAgICBzYXZlOiBmdW5jdGlvbihlLCBwYXJhbXMpIHtcbiAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICBGaXJlZCB3aGVuIG5ldyB2YWx1ZSB3YXMgc3VibWl0dGVkLiBZb3UgY2FuIHVzZSA8Y29kZT4kKHRoaXMpLmRhdGEoJ2VkaXRhYmxlQ29udGFpbmVyJyk8L2NvZGU+IGluc2lkZSBoYW5kbGVyIHRvIGFjY2VzcyB0byBlZGl0YWJsZUNvbnRhaW5lciBpbnN0YW5jZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAZXZlbnQgc2F2ZSBcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgYWRkaXRpb25hbCBwYXJhbXNcbiAgICAgICAgICAgIEBwYXJhbSB7bWl4ZWR9IHBhcmFtcy5uZXdWYWx1ZSBzdWJtaXR0ZWQgdmFsdWVcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMucmVzcG9uc2UgYWpheCByZXNwb25zZVxuICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICQoJyN1c2VybmFtZScpLm9uKCdzYXZlJywgZnVuY3Rpb24oZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgLy9hc3N1bWluZyBzZXJ2ZXIgcmVzcG9uc2U6ICd7c3VjY2VzczogdHJ1ZX0nXG4gICAgICAgICAgICAgICAgdmFyIHBrID0gJCh0aGlzKS5kYXRhKCdlZGl0YWJsZUNvbnRhaW5lcicpLm9wdGlvbnMucGs7XG4gICAgICAgICAgICAgICAgaWYocGFyYW1zLnJlc3BvbnNlICYmIHBhcmFtcy5yZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCd2YWx1ZTogJyArIHBhcmFtcy5uZXdWYWx1ZSArICcgd2l0aCBwazogJyArIHBrICsgJyBzYXZlZCEnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbGVydCgnZXJyb3IhJyk7IFxuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICoqLyAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJ3NhdmUnLCBwYXJhbXMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2hpZGUgbXVzdCBiZSBhZnRlciB0cmlnZ2VyLCBhcyBzYXZpbmcgdmFsdWUgbWF5IHJlcXVpcmUgbWV0aG9kcyBvZiBwbHVnaW4sIGFwcGxpZWQgdG8gaW5wdXRcbiAgICAgICAgICAgIHRoaXMuaGlkZSgnc2F2ZScpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICBTZXRzIG5ldyBvcHRpb25cbiAgICAgICAgXG4gICAgICAgIEBtZXRob2Qgb3B0aW9uKGtleSwgdmFsdWUpXG4gICAgICAgIEBwYXJhbSB7c3RyaW5nfSBrZXkgXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlIFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgb3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYoa2V5IGluIHRoaXMuY29udGFpbmVyT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyT3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb250YWluZXJPcHRpb24oa2V5LCB2YWx1ZSk7IFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLiRmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uZWRpdGFibGVmb3JtKCdvcHRpb24nLCBrZXksIHZhbHVlKTsgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHNldENvbnRhaW5lck9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jYWxsKCdvcHRpb24nLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgRGVzdHJveXMgdGhlIGNvbnRhaW5lciBpbnN0YW5jZVxuICAgICAgICBAbWV0aG9kIGRlc3Ryb3koKVxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgdGhpcy5pbm5lckRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdkZXN0cm95ZWQnKTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlRGF0YSgnZWRpdGFibGVDb250YWluZXInKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qIHRvIGJlIG92ZXJ3cml0dGVuIGluIGNoaWxkIGNsYXNzZXMgKi9cbiAgICAgICAgaW5uZXJEZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFxuICAgICAgICB9LCBcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIENsb3NlcyBvdGhlciBjb250YWluZXJzIGV4Y2VwdCBvbmUgcmVsYXRlZCB0byBwYXNzZWQgZWxlbWVudC4gXG4gICAgICAgIE90aGVyIGNvbnRhaW5lcnMgY2FuIGJlIGNhbmNlbGxlZCBvciBzdWJtaXR0ZWQgKGRlcGVuZHMgb24gb25ibHVyIG9wdGlvbilcbiAgICAgICAgKi9cbiAgICAgICAgY2xvc2VPdGhlcnM6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoJy5lZGl0YWJsZS1vcGVuJykuZWFjaChmdW5jdGlvbihpLCBlbCl7XG4gICAgICAgICAgICAgICAgLy9kbyBub3RoaW5nIHdpdGggcGFzc2VkIGVsZW1lbnQgYW5kIGl0J3MgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBpZihlbCA9PT0gZWxlbWVudCB8fCAkKGVsKS5maW5kKGVsZW1lbnQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9vdGhlcndpc2UgY2FuY2VsIG9yIHN1Ym1pdCBhbGwgb3BlbiBjb250YWluZXJzIFxuICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKGVsKSxcbiAgICAgICAgICAgICAgICBlYyA9ICRlbC5kYXRhKCdlZGl0YWJsZUNvbnRhaW5lcicpO1xuXG4gICAgICAgICAgICAgICAgaWYoIWVjKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihlYy5vcHRpb25zLm9uYmx1ciA9PT0gJ2NhbmNlbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsLmRhdGEoJ2VkaXRhYmxlQ29udGFpbmVyJykuaGlkZSgnb25ibHVyJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKGVjLm9wdGlvbnMub25ibHVyID09PSAnc3VibWl0Jykge1xuICAgICAgICAgICAgICAgICAgICAkZWwuZGF0YSgnZWRpdGFibGVDb250YWluZXInKS50aXAoKS5maW5kKCdmb3JtJykuc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBBY3RpdmF0ZXMgaW5wdXQgb2YgdmlzaWJsZSBjb250YWluZXIgKGUuZy4gc2V0IGZvY3VzKVxuICAgICAgICBAbWV0aG9kIGFjdGl2YXRlKClcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMudGlwICYmIHRoaXMudGlwKCkuaXMoJzp2aXNpYmxlJykgJiYgdGhpcy4kZm9ybSkge1xuICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5kYXRhKCdlZGl0YWJsZWZvcm0nKS5pbnB1dC5hY3RpdmF0ZSgpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcblxuICAgIH07XG5cbiAgICAvKipcbiAgICBqUXVlcnkgbWV0aG9kIHRvIGluaXRpYWxpemUgZWRpdGFibGVDb250YWluZXIuXG4gICAgXG4gICAgQG1ldGhvZCAkKCkuZWRpdGFibGVDb250YWluZXIob3B0aW9ucylcbiAgICBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnNcbiAgICBAZXhhbXBsZVxuICAgICQoJyNlZGl0JykuZWRpdGFibGVDb250YWluZXIoe1xuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHVybDogJy9wb3N0JyxcbiAgICAgICAgcGs6IDEsXG4gICAgICAgIHZhbHVlOiAnaGVsbG8nXG4gICAgfSk7XG4gICAgKiovICBcbiAgICAkLmZuLmVkaXRhYmxlQ29udGFpbmVyID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICAgZGF0YUtleSA9ICdlZGl0YWJsZUNvbnRhaW5lcicsIFxuICAgICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoZGF0YUtleSksXG4gICAgICAgICAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PT0gJ29iamVjdCcgJiYgb3B0aW9uLFxuICAgICAgICAgICAgQ29uc3RydWN0b3IgPSAob3B0aW9ucy5tb2RlID09PSAnaW5saW5lJykgPyBJbmxpbmUgOiBQb3B1cDsgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoZGF0YUtleSwgKGRhdGEgPSBuZXcgQ29uc3RydWN0b3IodGhpcywgb3B0aW9ucykpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7IC8vY2FsbCBtZXRob2QgXG4gICAgICAgICAgICAgICAgZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgfTsgICAgIFxuXG4gICAgLy9zdG9yZSBjb25zdHJ1Y3RvcnNcbiAgICAkLmZuLmVkaXRhYmxlQ29udGFpbmVyLlBvcHVwID0gUG9wdXA7XG4gICAgJC5mbi5lZGl0YWJsZUNvbnRhaW5lci5JbmxpbmUgPSBJbmxpbmU7XG5cbiAgICAvL2RlZmF1bHRzXG4gICAgJC5mbi5lZGl0YWJsZUNvbnRhaW5lci5kZWZhdWx0cyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgIEluaXRpYWwgdmFsdWUgb2YgZm9ybSBpbnB1dFxuXG4gICAgICAgIEBwcm9wZXJ0eSB2YWx1ZSBcbiAgICAgICAgQHR5cGUgbWl4ZWRcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAcHJpdmF0ZVxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFBsYWNlbWVudCBvZiBjb250YWluZXIgcmVsYXRpdmUgdG8gZWxlbWVudC4gQ2FuIGJlIDxjb2RlPnRvcHxyaWdodHxib3R0b218bGVmdDwvY29kZT4uIE5vdCB1c2VkIGZvciBpbmxpbmUgY29udGFpbmVyLlxuXG4gICAgICAgIEBwcm9wZXJ0eSBwbGFjZW1lbnQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAndG9wJ1xuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgICAgICAvKipcbiAgICAgICAgV2hldGhlciB0byBoaWRlIGNvbnRhaW5lciBvbiBzYXZlL2NhbmNlbC5cblxuICAgICAgICBAcHJvcGVydHkgYXV0b2hpZGUgXG4gICAgICAgIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgQGRlZmF1bHQgdHJ1ZVxuICAgICAgICBAcHJpdmF0ZSBcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgYXV0b2hpZGU6IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICBBY3Rpb24gd2hlbiB1c2VyIGNsaWNrcyBvdXRzaWRlIHRoZSBjb250YWluZXIuIENhbiBiZSA8Y29kZT5jYW5jZWx8c3VibWl0fGlnbm9yZTwvY29kZT4uICBcbiAgICAgICAgU2V0dGluZyA8Y29kZT5pZ25vcmU8L2NvZGU+IGFsbG93cyB0byBoYXZlIHNldmVyYWwgY29udGFpbmVycyBvcGVuLiBcblxuICAgICAgICBAcHJvcGVydHkgb25ibHVyIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ2NhbmNlbCdcbiAgICAgICAgQHNpbmNlIDEuMS4xXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIG9uYmx1cjogJ2NhbmNlbCcsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgQW5pbWF0aW9uIHNwZWVkIChpbmxpbmUgbW9kZSBvbmx5KVxuICAgICAgICBAcHJvcGVydHkgYW5pbSBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIGFuaW06IGZhbHNlLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIE1vZGUgb2YgZWRpdGFibGUsIGNhbiBiZSBgcG9wdXBgIG9yIGBpbmxpbmVgIFxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IG1vZGUgXG4gICAgICAgIEB0eXBlIHN0cmluZyAgICAgICAgIFxuICAgICAgICBAZGVmYXVsdCAncG9wdXAnXG4gICAgICAgIEBzaW5jZSAxLjQuMCAgICAgICAgXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIG1vZGU6ICdwb3B1cCcgICAgICAgIFxuICAgIH07XG5cbiAgICAvKiBcbiAgICAqIHdvcmthcm91bmQgdG8gaGF2ZSAnZGVzdHJveWVkJyBldmVudCB0byBkZXN0cm95IHBvcG92ZXIgd2hlbiBlbGVtZW50IGlzIGRlc3Ryb3llZFxuICAgICogc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjIwMDQ5NC9qcXVlcnktdHJpZ2dlci1ldmVudC13aGVuLWFuLWVsZW1lbnQtaXMtcmVtb3ZlZC1mcm9tLXRoZS1kb21cbiAgICAqL1xuICAgIGpRdWVyeS5ldmVudC5zcGVjaWFsLmRlc3Ryb3llZCA9IHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICBpZiAoby5oYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgby5oYW5kbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9OyAgICBcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuKiBFZGl0YWJsZSBJbmxpbmUgXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIC8vY29weSBwcm90b3R5cGUgZnJvbSBFZGl0YWJsZUNvbnRhaW5lclxuICAgIC8vZXh0ZW5kIG1ldGhvZHNcbiAgICAkLmV4dGVuZCgkLmZuLmVkaXRhYmxlQ29udGFpbmVyLklubGluZS5wcm90b3R5cGUsICQuZm4uZWRpdGFibGVDb250YWluZXIuUG9wdXAucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnRhaW5lck5hbWU6ICdlZGl0YWJsZWZvcm0nLFxuICAgICAgICBpbm5lckNzczogJy5lZGl0YWJsZS1pbmxpbmUnLFxuICAgICAgICBjb250YWluZXJDbGFzczogJ2VkaXRhYmxlLWNvbnRhaW5lciBlZGl0YWJsZS1pbmxpbmUnLCAvL2NzcyBjbGFzcyBhcHBsaWVkIHRvIGNvbnRhaW5lciBlbGVtZW50XG4gICAgICAgICAgICAgICAgIFxuICAgICAgICBpbml0Q29udGFpbmVyOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy9jb250YWluZXIgaXMgPHNwYW4+IGVsZW1lbnRcbiAgICAgICAgICAgIHRoaXMuJHRpcCA9ICQoJzxzcGFuPjwvc3Bhbj4nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jb252ZXJ0IGFuaW0gdG8gbWlsaXNlY29uZHMgKGludClcbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuYW5pbSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hbmltID0gMDtcbiAgICAgICAgICAgIH0gICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHNwbGl0T3B0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL2FsbCBvcHRpb25zIGFyZSBwYXNzZWQgdG8gZm9ybVxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJPcHRpb25zID0ge307XG4gICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgdGlwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgcmV0dXJuIHRoaXMuJHRpcDsgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBpbm5lclNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpO1xuICAgICAgICAgICAgdGhpcy50aXAoKS5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KS5zaG93KCk7XG4gICAgICAgIH0sIFxuICAgICAgICBcbiAgICAgICAgaW5uZXJIaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiR0aXAuaGlkZSh0aGlzLm9wdGlvbnMuYW5pbSwgJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnNob3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyRGVzdHJveSgpO1xuICAgICAgICAgICAgfSwgdGhpcykpOyBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGlubmVyRGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLnRpcCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aXAoKS5lbXB0eSgpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuICAgIH0pO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcbi8qKlxuTWFrZXMgZWRpdGFibGUgYW55IEhUTUwgZWxlbWVudCBvbiB0aGUgcGFnZS4gQXBwbGllZCBhcyBqUXVlcnkgbWV0aG9kLlxuXG5AY2xhc3MgZWRpdGFibGVcbkB1c2VzIGVkaXRhYmxlQ29udGFpbmVyXG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIEVkaXRhYmxlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICAgIC8vZGF0YS0qIGhhcyBtb3JlIHByaW9yaXR5IG92ZXIganMgb3B0aW9uczogYmVjYXVzZSBkeW5hbWljYWxseSBjcmVhdGVkIGVsZW1lbnRzIG1heSBjaGFuZ2UgZGF0YS0qIFxuICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZS5kZWZhdWx0cywgb3B0aW9ucywgJC5mbi5lZGl0YWJsZXV0aWxzLmdldENvbmZpZ0RhdGEodGhpcy4kZWxlbWVudCkpOyAgXG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhpcy5pbml0TGl2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vY2hlY2sgZm9yIHRyYW5zaXRpb24gc3VwcG9ydFxuICAgICAgICBpZih0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0ICYmICEkLmZuLmVkaXRhYmxldXRpbHMuc3VwcG9ydHNUcmFuc2l0aW9ucygpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgRWRpdGFibGUucHJvdG90eXBlID0ge1xuICAgICAgICBjb25zdHJ1Y3RvcjogRWRpdGFibGUsIFxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXNWYWx1ZUJ5VGV4dCA9IGZhbHNlLCBcbiAgICAgICAgICAgICAgICBkb0F1dG90ZXh0LCBmaW5hbGl6ZTtcblxuICAgICAgICAgICAgLy9uYW1lXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubmFtZSA9IHRoaXMub3B0aW9ucy5uYW1lIHx8IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vY3JlYXRlIGlucHV0IG9mIHNwZWNpZmllZCB0eXBlLiBJbnB1dCBuZWVkZWQgYWxyZWFkeSBoZXJlIHRvIGNvbnZlcnQgdmFsdWUgZm9yIGluaXRpYWwgZGlzcGxheSAoZS5nLiBzaG93IHRleHQgYnkgaWQgZm9yIHNlbGVjdClcbiAgICAgICAgICAgIC8vYWxzbyB3ZSBzZXQgc2NvcGUgb3B0aW9uIHRvIGhhdmUgYWNjZXNzIHRvIGVsZW1lbnQgaW5zaWRlIGlucHV0IHNwZWNpZmljIGNhbGxiYWNrcyAoZS4gZy4gc291cmNlIGFzIGZ1bmN0aW9uKVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNjb3BlID0gdGhpcy4kZWxlbWVudFswXTsgXG4gICAgICAgICAgICB0aGlzLmlucHV0ID0gJC5mbi5lZGl0YWJsZXV0aWxzLmNyZWF0ZUlucHV0KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICBpZighdGhpcy5pbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIC8vc2V0IHZhbHVlIGZyb20gc2V0dGluZ3Mgb3IgYnkgZWxlbWVudCdzIHRleHRcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9wdGlvbnMudmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbnB1dC5odG1sMnZhbHVlKCQudHJpbSh0aGlzLiRlbGVtZW50Lmh0bWwoKSkpO1xuICAgICAgICAgICAgICAgIGlzVmFsdWVCeVRleHQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgdmFsdWUgY2FuIGJlIHN0cmluZyB3aGVuIHJlY2VpdmVkIGZyb20gJ2RhdGEtdmFsdWUnIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgZm9yIGNvbXBsZXh0IG9iamVjdHMgdmFsdWUgY2FuIGJlIHNldCBhcyBqc29uIHN0cmluZyBpbiBkYXRhLXZhbHVlIGF0dHJpYnV0ZSwgXG4gICAgICAgICAgICAgICAgICBlLmcuIGRhdGEtdmFsdWU9XCJ7Y2l0eTogJ01vc2NvdycsIHN0cmVldDogJ0xlbmluYSd9XCJcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZSA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24odGhpcy5vcHRpb25zLnZhbHVlLCB0cnVlKTsgXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHRoaXMub3B0aW9ucy52YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5wdXQuc3RyMnZhbHVlKHRoaXMub3B0aW9ucy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMub3B0aW9ucy52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vYWRkICdlZGl0YWJsZScgY2xhc3MgdG8gZXZlcnkgZWRpdGFibGUgZWxlbWVudFxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnZWRpdGFibGUnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zcGVjaWZpY2FsbHkgZm9yIFwidGV4dGFyZWFcIiBhZGQgY2xhc3MgLmVkaXRhYmxlLXByZS13cmFwcGVkIHRvIGtlZXAgbGluZWJyZWFrc1xuICAgICAgICAgICAgaWYodGhpcy5pbnB1dC50eXBlID09PSAndGV4dGFyZWEnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnZWRpdGFibGUtcHJlLXdyYXBwZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9hdHRhY2ggaGFuZGxlciBhY3RpdmF0aW5nIGVkaXRhYmxlLiBJbiBkaXNhYmxlZCBtb2RlIGl0IGp1c3QgcHJldmVudCBkZWZhdWx0IGFjdGlvbiAodXNlZnVsIGZvciBsaW5rcylcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy50b2dnbGUgIT09ICdtYW51YWwnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnZWRpdGFibGUtY2xpY2snKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKHRoaXMub3B0aW9ucy50b2dnbGUgKyAnLmVkaXRhYmxlJywgJC5wcm94eShmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgLy9wcmV2ZW50IGZvbGxvd2luZyBsaW5rIGlmIGVkaXRhYmxlIGVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvL3N0b3AgcHJvcGFnYXRpb24gbm90IHJlcXVpcmVkIGJlY2F1c2UgaW4gZG9jdW1lbnQgY2xpY2sgaGFuZGxlciBpdCBjaGVja3MgZXZlbnQgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIC8vZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy50b2dnbGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgaG92ZXIgb25seSBzaG93IGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3doZW4gdG9nZ2xlPSdjbGljaycgd2Ugc2hvdWxkIG5vdCBjbG9zZSBhbGwgb3RoZXIgY29udGFpbmVycyBhcyB0aGV5IHdpbGwgYmUgY2xvc2VkIGF1dG9tYXRpY2FsbHkgaW4gZG9jdW1lbnQgY2xpY2sgbGlzdGVuZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9zZUFsbCA9ICh0aGlzLm9wdGlvbnMudG9nZ2xlICE9PSAnY2xpY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKGNsb3NlQWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIC0xKTsgLy9kbyBub3Qgc3RvcCBmb2N1cyBvbiBlbGVtZW50IHdoZW4gdG9nZ2xlZCBtYW51YWxseVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIGRpc3BsYXkgaXMgZnVuY3Rpb24gaXQncyBmYXIgbW9yZSBjb252aW5pZW50IHRvIGhhdmUgYXV0b3RleHQgPSBhbHdheXMgdG8gcmVuZGVyIGNvcnJlY3RseSBvbiBpbml0XG4gICAgICAgICAgICAvL3NlZSBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMveC1lZGl0YWJsZS15aWkvaXNzdWVzLzM0XG4gICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5vcHRpb25zLmRpc3BsYXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuYXV0b3RleHQgPSAnYWx3YXlzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jaGVjayBjb25kaXRpb25zIGZvciBhdXRvdGV4dDpcbiAgICAgICAgICAgIHN3aXRjaCh0aGlzLm9wdGlvbnMuYXV0b3RleHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAnYWx3YXlzJzpcbiAgICAgICAgICAgICAgIGRvQXV0b3RleHQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgICAgICAgICAgLy9pZiBlbGVtZW50IHRleHQgaXMgZW1wdHkgYW5kIHZhbHVlIGlzIGRlZmluZWQgYW5kIHZhbHVlIG5vdCBnZW5lcmF0ZWQgYnkgdGV4dCAtLT4gcnVuIGF1dG90ZXh0XG4gICAgICAgICAgICAgICAgZG9BdXRvdGV4dCA9ICEkLnRyaW0odGhpcy4kZWxlbWVudC50ZXh0KCkpLmxlbmd0aCAmJiB0aGlzLnZhbHVlICE9PSBudWxsICYmIHRoaXMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhaXNWYWx1ZUJ5VGV4dDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICBkb0F1dG90ZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vZGVwZW5kaW5nIG9uIGF1dG90ZXh0IHJ1biByZW5kZXIoKSBvciBqdXN0IGZpbmlsaXplIGluaXRcbiAgICAgICAgICAgICQud2hlbihkb0F1dG90ZXh0ID8gdGhpcy5yZW5kZXIoKSA6IHRydWUpLnRoZW4oJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGUoKTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgICAgIEZpcmVkIHdoZW4gZWxlbWVudCB3YXMgaW5pdGlhbGl6ZWQgYnkgYCQoKS5lZGl0YWJsZSgpYCBtZXRob2QuIFxuICAgICAgICAgICAgICAgUGxlYXNlIG5vdGUgdGhhdCB5b3Ugc2hvdWxkIHNldHVwIGBpbml0YCBoYW5kbGVyICoqYmVmb3JlKiogYXBwbHlpbmcgYGVkaXRhYmxlYC4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgIEBldmVudCBpbml0IFxuICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGVkaXRhYmxlIGVkaXRhYmxlIGluc3RhbmNlIChhcyBoZXJlIGl0IGNhbm5vdCBhY2Nlc3NlZCB2aWEgZGF0YSgnZWRpdGFibGUnKSlcbiAgICAgICAgICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICAgICQoJyN1c2VybmFtZScpLm9uKCdpbml0JywgZnVuY3Rpb24oZSwgZWRpdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICBhbGVydCgnaW5pdGlhbGl6ZWQgJyArIGVkaXRhYmxlLm9wdGlvbnMubmFtZSk7XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICQoJyN1c2VybmFtZScpLmVkaXRhYmxlKCk7XG4gICAgICAgICAgICAgICAqKi8gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCdpbml0JywgdGhpcyk7XG4gICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgIEluaXRpYWxpemVzIHBhcmVudCBlbGVtZW50IGZvciBsaXZlIGVkaXRhYmxlcyBcbiAgICAgICAgKi9cbiAgICAgICAgaW5pdExpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAvL3N0b3JlIHNlbGVjdG9yIFxuICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLm9wdGlvbnMuc2VsZWN0b3I7XG4gICAgICAgICAgIC8vbW9kaWZ5IG9wdGlvbnMgZm9yIGNoaWxkIGVsZW1lbnRzXG4gICAgICAgICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA9IGZhbHNlOyBcbiAgICAgICAgICAgdGhpcy5vcHRpb25zLmF1dG90ZXh0ID0gJ25ldmVyJztcbiAgICAgICAgICAgLy9saXN0ZW4gdG9nZ2xlIGV2ZW50c1xuICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKHRoaXMub3B0aW9ucy50b2dnbGUgKyAnLmVkaXRhYmxlJywgc2VsZWN0b3IsICQucHJveHkoZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQoZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgaWYoISR0YXJnZXQuZGF0YSgnZWRpdGFibGUnKSkge1xuICAgICAgICAgICAgICAgICAgIC8vaWYgZGVsZWdhdGVkIGVsZW1lbnQgaW5pdGlhbGx5IGVtcHR5LCB3ZSBuZWVkIHRvIGNsZWFyIGl0J3MgdGV4dCAodGhhdCB3YXMgbWFudWFsbHkgc2V0IHRvIGBlbXB0eWAgYnkgdXNlcilcbiAgICAgICAgICAgICAgICAgICAvL3NlZSBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMveC1lZGl0YWJsZS9pc3N1ZXMvMTM3IFxuICAgICAgICAgICAgICAgICAgIGlmKCR0YXJnZXQuaGFzQ2xhc3ModGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgJHRhcmdldC5lbXB0eSgpO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAkdGFyZ2V0LmVkaXRhYmxlKHRoaXMub3B0aW9ucykudHJpZ2dlcihlKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfSwgdGhpcykpOyBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIFJlbmRlcnMgdmFsdWUgaW50byBlbGVtZW50J3MgdGV4dC5cbiAgICAgICAgQ2FuIGNhbGwgY3VzdG9tIGRpc3BsYXkgbWV0aG9kIGZyb20gb3B0aW9ucy5cbiAgICAgICAgQ2FuIHJldHVybiBkZWZlcnJlZCBvYmplY3QuXG4gICAgICAgIEBtZXRob2QgcmVuZGVyKClcbiAgICAgICAgQHBhcmFtIHttaXhlZH0gcmVzcG9uc2Ugc2VydmVyIHJlc3BvbnNlIChpZiBleGlzdCkgdG8gcGFzcyBpbnRvIGRpc3BsYXkgZnVuY3Rpb25cbiAgICAgICAgKi8gICAgICAgICAgXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vZG8gbm90IGRpc3BsYXkgYW55dGhpbmdcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5kaXNwbGF5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiBpbnB1dCBoYXMgYHZhbHVlMmh0bWxGaW5hbGAgbWV0aG9kLCB3ZSBwYXNzIGNhbGxiYWNrIGluIHRoaXJkIHBhcmFtIHRvIGJlIGNhbGxlZCB3aGVuIHNvdXJjZSBpcyBsb2FkZWRcbiAgICAgICAgICAgIGlmKHRoaXMuaW5wdXQudmFsdWUyaHRtbEZpbmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQudmFsdWUyaHRtbCh0aGlzLnZhbHVlLCB0aGlzLiRlbGVtZW50WzBdLCB0aGlzLm9wdGlvbnMuZGlzcGxheSwgcmVzcG9uc2UpOyBcbiAgICAgICAgICAgIC8vaWYgZGlzcGxheSBtZXRob2QgZGVmaW5lZCAtLT4gdXNlIGl0ICAgIFxuICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlzcGxheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZGlzcGxheS5jYWxsKHRoaXMuJGVsZW1lbnRbMF0sIHRoaXMudmFsdWUsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIC8vZWxzZSB1c2UgaW5wdXQncyBvcmlnaW5hbCB2YWx1ZTJodG1sKCkgbWV0aG9kICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC52YWx1ZTJodG1sKHRoaXMudmFsdWUsIHRoaXMuJGVsZW1lbnRbMF0pOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBFbmFibGVzIGVkaXRhYmxlXG4gICAgICAgIEBtZXRob2QgZW5hYmxlKClcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBlbmFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdlZGl0YWJsZS1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFbXB0eSh0aGlzLmlzRW1wdHkpO1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnRvZ2dsZSAhPT0gJ21hbnVhbCcpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgPT09ICctMScpIHsgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQXR0cigndGFiaW5kZXgnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBEaXNhYmxlcyBlZGl0YWJsZVxuICAgICAgICBAbWV0aG9kIGRpc2FibGUoKVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSB0cnVlOyBcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpOyAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdlZGl0YWJsZS1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFbXB0eSh0aGlzLmlzRW1wdHkpO1xuICAgICAgICAgICAgLy9kbyBub3Qgc3RvcCBmb2N1cyBvbiB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAtMSk7ICAgICAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFRvZ2dsZXMgZW5hYmxlZCAvIGRpc2FibGVkIHN0YXRlIG9mIGVkaXRhYmxlIGVsZW1lbnRcbiAgICAgICAgQG1ldGhvZCB0b2dnbGVEaXNhYmxlZCgpXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0b2dnbGVEaXNhYmxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHsgXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgU2V0cyBuZXcgb3B0aW9uXG4gICAgICAgIFxuICAgICAgICBAbWV0aG9kIG9wdGlvbihrZXksIHZhbHVlKVxuICAgICAgICBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IGtleSBvcHRpb24gbmFtZSBvciBvYmplY3Qgd2l0aCBzZXZlcmFsIG9wdGlvbnNcbiAgICAgICAgQHBhcmFtIHttaXhlZH0gdmFsdWUgb3B0aW9uIG5ldyB2YWx1ZVxuICAgICAgICBAZXhhbXBsZVxuICAgICAgICAkKCcuZWRpdGFibGUnKS5lZGl0YWJsZSgnb3B0aW9uJywgJ3BrJywgMik7XG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgb3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAvL3NldCBvcHRpb24ocykgYnkgb2JqZWN0XG4gICAgICAgICAgICBpZihrZXkgJiYgdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICQuZWFjaChrZXksICQucHJveHkoZnVuY3Rpb24oaywgdil7XG4gICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbigkLnRyaW0oayksIHYpOyBcbiAgICAgICAgICAgICAgIH0sIHRoaXMpKTsgXG4gICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc2V0IG9wdGlvbiBieSBzdHJpbmcgICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZGlzYWJsZWRcbiAgICAgICAgICAgIGlmKGtleSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdGhpcy5kaXNhYmxlKCkgOiB0aGlzLmVuYWJsZSgpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy92YWx1ZVxuICAgICAgICAgICAgaWYoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdHJhbnNmZXIgbmV3IG9wdGlvbiB0byBjb250YWluZXIhIFxuICAgICAgICAgICAgaWYodGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5vcHRpb24oa2V5LCB2YWx1ZSk7ICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vcGFzcyBvcHRpb24gdG8gaW5wdXQgZGlyZWN0bHkgKGFzIGl0IHBvaW50cyB0byB0aGUgc2FtZSBpbiBmb3JtKVxuICAgICAgICAgICAgaWYodGhpcy5pbnB1dC5vcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0Lm9wdGlvbihrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9LCAgICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICAqIHNldCBlbXB0eXRleHQgaWYgZWxlbWVudCBpcyBlbXB0eVxuICAgICAgICAqL1xuICAgICAgICBoYW5kbGVFbXB0eTogZnVuY3Rpb24gKGlzRW1wdHkpIHtcbiAgICAgICAgICAgIC8vZG8gbm90IGhhbmRsZSBlbXB0eSBpZiB3ZSBkbyBub3QgZGlzcGxheSBhbnl0aGluZ1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmRpc3BsYXkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBcbiAgICAgICAgICAgIGlzRW1wdHkgbWF5IGJlIHNldCBkaXJlY3RseSBhcyBwYXJhbSBvZiBtZXRob2QuXG4gICAgICAgICAgICBJdCBpcyByZXF1aXJlZCB3aGVuIHdlIGVuYWJsZS9kaXNhYmxlIGZpZWxkIGFuZCBjYW4ndCByZWx5IG9uIGNvbnRlbnQgXG4gICAgICAgICAgICBhcyBub2RlIGNvbnRlbnQgaXMgdGV4dDogXCJFbXB0eVwiIHRoYXQgaXMgbm90IGVtcHR5ICUpXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYoaXNFbXB0eSAhPT0gdW5kZWZpbmVkKSB7IFxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vZGV0ZWN0IGVtcHR5XG4gICAgICAgICAgICAgICAgLy9mb3Igc29tZSBpbnB1dHMgd2UgbmVlZCBtb3JlIHNtYXJ0IGNoZWNrXG4gICAgICAgICAgICAgICAgLy9lLmcuIHd5c2lodG1sNSBtYXkgaGF2ZSA8YnI+LCA8cD48L3A+LCA8aW1nPlxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZih0aGlzLmlucHV0LmlzRW1wdHkpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IHRoaXMuaW5wdXQuaXNFbXB0eSh0aGlzLiRlbGVtZW50KTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9ICQudHJpbSh0aGlzLiRlbGVtZW50Lmh0bWwoKSkgPT09ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2VtcHR5dGV4dCBzaG93biBvbmx5IGZvciBlbmFibGVkXG4gICAgICAgICAgICBpZighdGhpcy5vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50Lmh0bWwodGhpcy5vcHRpb25zLmVtcHR5dGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5lbXB0eWNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5lbXB0eWNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLm9wdGlvbnMuZW1wdHljbGFzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5lbXB0eWNsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vYmVsb3cgcmVxdWlyZWQgaWYgZWxlbWVudCBkaXNhYmxlIHByb3BlcnR5IHdhcyBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgaWYodGhpcy5pc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgU2hvd3MgY29udGFpbmVyIHdpdGggZm9ybVxuICAgICAgICBAbWV0aG9kIHNob3coKVxuICAgICAgICBAcGFyYW0ge2Jvb2xlYW59IGNsb3NlQWxsIFdoZXRoZXIgdG8gY2xvc2UgYWxsIG90aGVyIGVkaXRhYmxlIGNvbnRhaW5lcnMgd2hlbiBzaG93aW5nIHRoaXMgb25lLiBEZWZhdWx0IHRydWUuXG4gICAgICAgICoqLyAgXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uIChjbG9zZUFsbCkge1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2luaXQgZWRpdGFibGVDb250YWluZXI6IHBvcG92ZXIsIHRvb2x0aXAsIGlubGluZSwgZXRjLi5cbiAgICAgICAgICAgIGlmKCF0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJPcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHRoaXMuaW5wdXQgLy9wYXNzIGlucHV0IHRvIGZvcm0gKGFzIGl0IGlzIGFscmVhZHkgY3JlYXRlZClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmVkaXRhYmxlQ29udGFpbmVyKGNvbnRhaW5lck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vbGlzdGVuIGBzYXZlYCBldmVudCBcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKFwic2F2ZS5pbnRlcm5hbFwiLCAkLnByb3h5KHRoaXMuc2F2ZSwgdGhpcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy4kZWxlbWVudC5kYXRhKCdlZGl0YWJsZUNvbnRhaW5lcicpOyBcbiAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLmNvbnRhaW5lci50aXAoKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zaG93IGNvbnRhaW5lclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc2hvdyhjbG9zZUFsbCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgSGlkZXMgY29udGFpbmVyIHdpdGggZm9ybVxuICAgICAgICBAbWV0aG9kIGhpZGUoKVxuICAgICAgICAqKi8gICAgICAgXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHsgICBcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyKSB7ICBcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgVG9nZ2xlcyBjb250YWluZXIgdmlzaWJpbGl0eSAoc2hvdyAvIGhpZGUpXG4gICAgICAgIEBtZXRob2QgdG9nZ2xlKClcbiAgICAgICAgQHBhcmFtIHtib29sZWFufSBjbG9zZUFsbCBXaGV0aGVyIHRvIGNsb3NlIGFsbCBvdGhlciBlZGl0YWJsZSBjb250YWluZXJzIHdoZW4gc2hvd2luZyB0aGlzIG9uZS4gRGVmYXVsdCB0cnVlLlxuICAgICAgICAqKi8gIFxuICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKGNsb3NlQWxsKSB7XG4gICAgICAgICAgICBpZih0aGlzLmNvbnRhaW5lciAmJiB0aGlzLmNvbnRhaW5lci50aXAoKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coY2xvc2VBbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgKiBjYWxsZWQgd2hlbiBmb3JtIHdhcyBzdWJtaXR0ZWRcbiAgICAgICAgKi8gICAgICAgICAgXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKGUsIHBhcmFtcykge1xuICAgICAgICAgICAgLy9tYXJrIGVsZW1lbnQgd2l0aCB1bnNhdmVkIGNsYXNzIGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnVuc2F2ZWRjbGFzcykge1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgIEFkZCB1bnNhdmVkIGNzcyB0byBlbGVtZW50IGlmOlxuICAgICAgICAgICAgICAgICAgLSB1cmwgaXMgbm90IHVzZXIncyBmdW5jdGlvbiBcbiAgICAgICAgICAgICAgICAgIC0gdmFsdWUgd2FzIG5vdCBzZW50IHRvIHNlcnZlclxuICAgICAgICAgICAgICAgICAgLSBwYXJhbXMucmVzcG9uc2UgPT09IHVuZGVmaW5lZCwgdGhhdCBtZWFucyBkYXRhIHdhcyBub3Qgc2VudFxuICAgICAgICAgICAgICAgICAgLSB2YWx1ZSBjaGFuZ2VkIFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHNlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZW50ID0gc2VudCB8fCB0eXBlb2YgdGhpcy5vcHRpb25zLnVybCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICAgICAgICBzZW50ID0gc2VudCB8fCB0aGlzLm9wdGlvbnMuZGlzcGxheSA9PT0gZmFsc2U7IFxuICAgICAgICAgICAgICAgIHNlbnQgPSBzZW50IHx8IHBhcmFtcy5yZXNwb25zZSAhPT0gdW5kZWZpbmVkOyBcbiAgICAgICAgICAgICAgICBzZW50ID0gc2VudCB8fCAodGhpcy5vcHRpb25zLnNhdmVub2NoYW5nZSAmJiB0aGlzLmlucHV0LnZhbHVlMnN0cih0aGlzLnZhbHVlKSAhPT0gdGhpcy5pbnB1dC52YWx1ZTJzdHIocGFyYW1zLm5ld1ZhbHVlKSk7IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHNlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMudW5zYXZlZGNsYXNzKTsgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudW5zYXZlZGNsYXNzKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9oaWdobGlnaHQgd2hlbiBzYXZpbmdcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5oaWdobGlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBiZ0NvbG9yID0gJGUuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICRlLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIHRoaXMub3B0aW9ucy5oaWdobGlnaHQpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoYmdDb2xvciA9PT0gJ3RyYW5zcGFyZW50Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmdDb2xvciA9ICcnOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkZS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBiZ0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgJGUuYWRkQ2xhc3MoJ2VkaXRhYmxlLWJnLXRyYW5zaXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAkZS5yZW1vdmVDbGFzcygnZWRpdGFibGUtYmctdHJhbnNpdGlvbicpOyAgXG4gICAgICAgICAgICAgICAgICAgIH0sIDE3MDApO1xuICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zZXQgbmV3IHZhbHVlXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHBhcmFtcy5uZXdWYWx1ZSwgZmFsc2UsIHBhcmFtcy5yZXNwb25zZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICBGaXJlZCB3aGVuIG5ldyB2YWx1ZSB3YXMgc3VibWl0dGVkLiBZb3UgY2FuIHVzZSA8Y29kZT4kKHRoaXMpLmRhdGEoJ2VkaXRhYmxlJyk8L2NvZGU+IHRvIGFjY2VzcyB0byBlZGl0YWJsZSBpbnN0YW5jZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAZXZlbnQgc2F2ZSBcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgYWRkaXRpb25hbCBwYXJhbXNcbiAgICAgICAgICAgIEBwYXJhbSB7bWl4ZWR9IHBhcmFtcy5uZXdWYWx1ZSBzdWJtaXR0ZWQgdmFsdWVcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMucmVzcG9uc2UgYWpheCByZXNwb25zZVxuICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICQoJyN1c2VybmFtZScpLm9uKCdzYXZlJywgZnVuY3Rpb24oZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ1NhdmVkIHZhbHVlOiAnICsgcGFyYW1zLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKiovXG4gICAgICAgICAgICAvL2V2ZW50IGl0c2VsZiBpcyB0cmlnZ2VyZWQgYnkgZWRpdGFibGVDb250YWluZXIuIERlc2NyaXB0aW9uIGhlcmUgaXMgb25seSBmb3IgZG9jdW1lbnRhdGlvbiAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnZhbGlkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWxpZGF0ZS5jYWxsKHRoaXMsIHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFNldHMgbmV3IHZhbHVlIG9mIGVkaXRhYmxlXG4gICAgICAgIEBtZXRob2Qgc2V0VmFsdWUodmFsdWUsIGNvbnZlcnRTdHIpXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlIG5ldyB2YWx1ZSBcbiAgICAgICAgQHBhcmFtIHtib29sZWFufSBjb252ZXJ0U3RyIHdoZXRoZXIgdG8gY29udmVydCB2YWx1ZSBmcm9tIHN0cmluZyB0byBpbnRlcm5hbCBmb3JtYXRcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgY29udmVydFN0ciwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmKGNvbnZlcnRTdHIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbnB1dC5zdHIydmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLm9wdGlvbigndmFsdWUnLCB0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQud2hlbih0aGlzLnJlbmRlcihyZXNwb25zZSkpXG4gICAgICAgICAgICAudGhlbigkLnByb3h5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRW1wdHkoKTtcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBBY3RpdmF0ZXMgaW5wdXQgb2YgdmlzaWJsZSBjb250YWluZXIgKGUuZy4gc2V0IGZvY3VzKVxuICAgICAgICBAbWV0aG9kIGFjdGl2YXRlKClcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hY3RpdmF0ZSgpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBSZW1vdmVzIGVkaXRhYmxlIGZlYXR1cmUgZnJvbSBlbGVtZW50XG4gICAgICAgIEBtZXRob2QgZGVzdHJveSgpXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5kZXN0cm95KCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcblxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnRvZ2dsZSAhPT0gJ21hbnVhbCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdlZGl0YWJsZS1jbGljaycpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKHRoaXMub3B0aW9ucy50b2dnbGUgKyAnLmVkaXRhYmxlJyk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZihcInNhdmUuaW50ZXJuYWxcIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2VkaXRhYmxlIGVkaXRhYmxlLW9wZW4gZWRpdGFibGUtZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlRGF0YSgnZWRpdGFibGUnKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgfTtcblxuICAgIC8qIEVESVRBQkxFIFBMVUdJTiBERUZJTklUSU9OXG4gICAgKiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgalF1ZXJ5IG1ldGhvZCB0byBpbml0aWFsaXplIGVkaXRhYmxlIGVsZW1lbnQuXG4gICAgXG4gICAgQG1ldGhvZCAkKCkuZWRpdGFibGUob3B0aW9ucylcbiAgICBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnNcbiAgICBAZXhhbXBsZVxuICAgICQoJyN1c2VybmFtZScpLmVkaXRhYmxlKHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgIHBrOiAxXG4gICAgfSk7XG4gICAgKiovXG4gICAgJC5mbi5lZGl0YWJsZSA9IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgLy9zcGVjaWFsIEFQSSBtZXRob2RzIHJldHVybmluZyBub24tanF1ZXJ5IG9iamVjdFxuICAgICAgICB2YXIgcmVzdWx0ID0ge30sIGFyZ3MgPSBhcmd1bWVudHMsIGRhdGFrZXkgPSAnZWRpdGFibGUnO1xuICAgICAgICBzd2l0Y2ggKG9wdGlvbikge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICBSdW5zIGNsaWVudC1zaWRlIHZhbGlkYXRpb24gZm9yIGFsbCBtYXRjaGVkIGVkaXRhYmxlc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBAbWV0aG9kIHZhbGlkYXRlKClcbiAgICAgICAgICAgIEByZXR1cm5zIHtPYmplY3R9IHZhbGlkYXRpb24gZXJyb3JzIG1hcFxuICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICQoJyN1c2VybmFtZSwgI2Z1bGxuYW1lJykuZWRpdGFibGUoJ3ZhbGlkYXRlJyk7XG4gICAgICAgICAgICAvLyBwb3NzaWJsZSByZXN1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHVzZXJuYW1lOiBcInVzZXJuYW1lIGlzIHJlcXVpcmVkXCIsXG4gICAgICAgICAgICAgIGZ1bGxuYW1lOiBcImZ1bGxuYW1lIHNob3VsZCBiZSBtaW5pbXVtIDMgbGV0dGVycyBsZW5ndGhcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKiovXG4gICAgICAgICAgICBjYXNlICd2YWxpZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgZGF0YSA9ICR0aGlzLmRhdGEoZGF0YWtleSksIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiAoZXJyb3IgPSBkYXRhLnZhbGlkYXRlKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbZGF0YS5vcHRpb25zLm5hbWVdID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgUmV0dXJucyBjdXJyZW50IHZhbHVlcyBvZiBlZGl0YWJsZSBlbGVtZW50cy4gICBcbiAgICAgICAgICAgIE5vdGUgdGhhdCBpdCByZXR1cm5zIGFuICoqb2JqZWN0Kiogd2l0aCBuYW1lLXZhbHVlIHBhaXJzLCBub3QgYSB2YWx1ZSBpdHNlbGYuIEl0IGFsbG93cyB0byBnZXQgZGF0YSBmcm9tIHNldmVyYWwgZWxlbWVudHMuICAgIFxuICAgICAgICAgICAgSWYgdmFsdWUgb2Ygc29tZSBlZGl0YWJsZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgaXQgaXMgZXhjbHVkZWQgZnJvbSByZXN1bHQgb2JqZWN0LlxuICAgICAgICAgICAgV2hlbiBwYXJhbSBgaXNTaW5nbGVgIGlzIHNldCB0byAqKnRydWUqKiAtIGl0IGlzIHN1cHBvc2VkIHlvdSBoYXZlIHNpbmdsZSBlbGVtZW50IGFuZCB3aWxsIHJldHVybiB2YWx1ZSBvZiBlZGl0YWJsZSBpbnN0ZWFkIG9mIG9iamVjdC4gICBcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIEBtZXRob2QgZ2V0VmFsdWUoKVxuICAgICAgICAgICAgQHBhcmFtIHtib29sfSBpc1NpbmdsZSB3aGV0aGVyIHRvIHJldHVybiBqdXN0IHZhbHVlIG9mIHNpbmdsZSBlbGVtZW50XG4gICAgICAgICAgICBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3Qgb2YgZWxlbWVudCBuYW1lcyBhbmQgdmFsdWVzXG4gICAgICAgICAgICBAZXhhbXBsZVxuICAgICAgICAgICAgJCgnI3VzZXJuYW1lLCAjZnVsbG5hbWUnKS5lZGl0YWJsZSgnZ2V0VmFsdWUnKTtcbiAgICAgICAgICAgIC8vcmVzdWx0OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgdXNlcm5hbWU6IFwic3VwZXJ1c2VyXCIsXG4gICAgICAgICAgICBmdWxsbmFtZTogXCJKb2huXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vaXNTaW5nbGUgPSB0cnVlXG4gICAgICAgICAgICAkKCcjdXNlcm5hbWUnKS5lZGl0YWJsZSgnZ2V0VmFsdWUnLCB0cnVlKTtcbiAgICAgICAgICAgIC8vcmVzdWx0IFwic3VwZXJ1c2VyXCIgXG4gICAgICAgICAgICAqKi9cbiAgICAgICAgICAgIGNhc2UgJ2dldFZhbHVlJzpcbiAgICAgICAgICAgICAgICBpZihhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIGFyZ3VtZW50c1sxXSA9PT0gdHJ1ZSkgeyAvL2lzU2luZ2xlID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmVxKDApLmRhdGEoZGF0YWtleSkudmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksIGRhdGEgPSAkdGhpcy5kYXRhKGRhdGFrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIGRhdGEudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbZGF0YS5vcHRpb25zLm5hbWVdID0gZGF0YS5pbnB1dC52YWx1ZTJzdWJtaXQoZGF0YS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgVGhpcyBtZXRob2QgY29sbGVjdHMgdmFsdWVzIGZyb20gc2V2ZXJhbCBlZGl0YWJsZSBlbGVtZW50cyBhbmQgc3VibWl0IHRoZW0gYWxsIHRvIHNlcnZlci4gICBcbiAgICAgICAgICAgIEludGVybmFsbHkgaXQgcnVucyBjbGllbnQtc2lkZSB2YWxpZGF0aW9uIGZvciBhbGwgZmllbGRzIGFuZCBzdWJtaXRzIG9ubHkgaW4gY2FzZSBvZiBzdWNjZXNzLiAgXG4gICAgICAgICAgICBTZWUgPGEgaHJlZj1cIiNuZXdyZWNvcmRcIj5jcmVhdGluZyBuZXcgcmVjb3JkczwvYT4gZm9yIGRldGFpbHMuICBcbiAgICAgICAgICAgIFNpbmNlIDEuNS4xIGBzdWJtaXRgIGNhbiBiZSBhcHBsaWVkIHRvIHNpbmdsZSBlbGVtZW50IHRvIHNlbmQgZGF0YSBwcm9ncmFtbWF0aWNhbGx5LiBJbiB0aGF0IGNhc2VcbiAgICAgICAgICAgIGB1cmxgLCBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgaXMgdGFrZW4gZnJvbSBpbml0aWFsIG9wdGlvbnMgYW5kIHlvdSBjYW4ganVzdCBjYWxsIGAkKCcjdXNlcm5hbWUnKS5lZGl0YWJsZSgnc3VibWl0JylgLiBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQG1ldGhvZCBzdWJtaXQob3B0aW9ucylcbiAgICAgICAgICAgIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICAgICAgICAgICAgQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMudXJsIHVybCB0byBzdWJtaXQgZGF0YSBcbiAgICAgICAgICAgIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmRhdGEgYWRkaXRpb25hbCBkYXRhIHRvIHN1Ym1pdFxuICAgICAgICAgICAgQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMuYWpheE9wdGlvbnMgYWRkaXRpb25hbCBhamF4IG9wdGlvbnNcbiAgICAgICAgICAgIEBwYXJhbSB7ZnVuY3Rpb259IG9wdGlvbnMuZXJyb3Iob2JqKSBlcnJvciBoYW5kbGVyIFxuICAgICAgICAgICAgQHBhcmFtIHtmdW5jdGlvbn0gb3B0aW9ucy5zdWNjZXNzKG9iaixjb25maWcpIHN1Y2Nlc3MgaGFuZGxlclxuICAgICAgICAgICAgQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdFxuICAgICAgICAgICAgKiovXG4gICAgICAgICAgICBjYXNlICdzdWJtaXQnOiAgLy9jb2xsZWN0cyB2YWx1ZSwgdmFsaWRhdGUgYW5kIHN1Ym1pdCB0byBzZXJ2ZXIgZm9yIGNyZWF0aW5nIG5ldyByZWNvcmRcbiAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9LFxuICAgICAgICAgICAgICAgICRlbGVtcyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgZXJyb3JzID0gdGhpcy5lZGl0YWJsZSgndmFsaWRhdGUnKTtcblxuICAgICAgICAgICAgICAgIC8vIHZhbGlkYXRpb24gb2tcbiAgICAgICAgICAgICAgICBpZigkLmlzRW1wdHlPYmplY3QoZXJyb3JzKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWpheE9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3Igc2luZ2xlIGVsZW1lbnQgdXNlIHVybCwgc3VjY2VzcyBldGMgZnJvbSBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIGlmKCRlbGVtcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlZGl0YWJsZSA9ICRlbGVtcy5kYXRhKCdlZGl0YWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdGFuZGFyZCBwYXJhbXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZWRpdGFibGUub3B0aW9ucy5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlZGl0YWJsZS5pbnB1dC52YWx1ZTJzdWJtaXQoZWRpdGFibGUudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBrOiAodHlwZW9mIGVkaXRhYmxlLm9wdGlvbnMucGsgPT09ICdmdW5jdGlvbicpID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlLm9wdGlvbnMucGsuY2FsbChlZGl0YWJsZS5vcHRpb25zLnNjb3BlKSA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZS5vcHRpb25zLnBrIFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGRpdGlvbmFsIHBhcmFtc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGVkaXRhYmxlLm9wdGlvbnMucGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gZWRpdGFibGUub3B0aW9ucy5wYXJhbXMuY2FsbChlZGl0YWJsZS5vcHRpb25zLnNjb3BlLCBwYXJhbXMpOyAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ5IHBhcnNlIGpzb24gaW4gc2luZ2xlIHF1b3RlcyAoZnJvbSBkYXRhLXBhcmFtcyBhdHRyaWJ1dGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdGFibGUub3B0aW9ucy5wYXJhbXMgPSAkLmZuLmVkaXRhYmxldXRpbHMudHJ5UGFyc2VKc29uKGVkaXRhYmxlLm9wdGlvbnMucGFyYW1zLCB0cnVlKTsgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChwYXJhbXMsIGVkaXRhYmxlLm9wdGlvbnMucGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYWpheE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBlZGl0YWJsZS5vcHRpb25zLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZSBzdWNjZXNzIC8gZXJyb3IgZnJvbSBvcHRpb25zIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnN1Y2Nlc3MgPSBjb25maWcuc3VjY2VzcyB8fCBlZGl0YWJsZS5vcHRpb25zLnN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuZXJyb3IgPSBjb25maWcuZXJyb3IgfHwgZWRpdGFibGUub3B0aW9ucy5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSBlbGVtZW50c1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuZWRpdGFibGUoJ2dldFZhbHVlJyk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGNvbmZpZy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdmFsdWVzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFqYXggc3VjY2VzcyBjYWxsYWJjayAocmVzcG9uc2UgMjAwIE9LKVxuICAgICAgICAgICAgICAgICAgICBhamF4T3B0aW9ucy5zdWNjZXNzID0gdHlwZW9mIGNvbmZpZy5zdWNjZXNzID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuc3VjY2Vzcy5jYWxsKCRlbGVtcywgcmVzcG9uc2UsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogJC5ub29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhamF4IGVycm9yIGNhbGxhYmNrXG4gICAgICAgICAgICAgICAgICAgIGFqYXhPcHRpb25zLmVycm9yID0gdHlwZW9mIGNvbmZpZy5lcnJvciA9PT0gJ2Z1bmN0aW9uJyA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuZXJyb3IuYXBwbHkoJGVsZW1zLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSA6ICQubm9vcDtcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4dGVuZCBhamF4T3B0aW9ucyAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYoY29uZmlnLmFqYXhPcHRpb25zKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQoYWpheE9wdGlvbnMsIGNvbmZpZy5hamF4T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4dHJhIGRhdGEgXG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbmZpZy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChhamF4T3B0aW9ucy5kYXRhLCBjb25maWcuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHBlcmZvcm0gYWpheCByZXF1ZXN0XG4gICAgICAgICAgICAgICAgICAgICQuYWpheChhamF4T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy9jbGllbnQtc2lkZSB2YWxpZGF0aW9uIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBjb25maWcuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5lcnJvci5jYWxsKCRlbGVtcywgZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9yZXR1cm4ganF1ZXJ5IG9iamVjdFxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksIFxuICAgICAgICAgICAgICAgIGRhdGEgPSAkdGhpcy5kYXRhKGRhdGFrZXkpLCBcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuXG4gICAgICAgICAgICAvL2ZvciBkZWxlZ2F0ZWQgdGFyZ2V0cyBkbyBub3Qgc3RvcmUgYGVkaXRhYmxlYCBvYmplY3QgZm9yIGVsZW1lbnRcbiAgICAgICAgICAgIC8vaXQncyBhbGxvd3Mgc2V2ZXJhbCBkaWZmZXJlbnQgc2VsZWN0b3JzLlxuICAgICAgICAgICAgLy9zZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlL2lzc3Vlcy8zMTIgICAgXG4gICAgICAgICAgICBpZihvcHRpb25zICYmIG9wdGlvbnMuc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gbmV3IEVkaXRhYmxlKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKGRhdGFrZXksIChkYXRhID0gbmV3IEVkaXRhYmxlKHRoaXMsIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJykgeyAvL2NhbGwgbWV0aG9kIFxuICAgICAgICAgICAgICAgIGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9KTtcbiAgICB9OyAgICBcbiAgICAgICAgICAgIFxuXG4gICAgJC5mbi5lZGl0YWJsZS5kZWZhdWx0cyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgIFR5cGUgb2YgaW5wdXQuIENhbiBiZSA8Y29kZT50ZXh0fHRleHRhcmVhfHNlbGVjdHxkYXRlfGNoZWNrbGlzdDwvY29kZT4gYW5kIG1vcmVcblxuICAgICAgICBAcHJvcGVydHkgdHlwZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd0ZXh0J1xuICAgICAgICAqKi9cbiAgICAgICAgdHlwZTogJ3RleHQnLCAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBTZXRzIGRpc2FibGVkIHN0YXRlIG9mIGVkaXRhYmxlXG5cbiAgICAgICAgQHByb3BlcnR5IGRpc2FibGVkIFxuICAgICAgICBAdHlwZSBib29sZWFuXG4gICAgICAgIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICBIb3cgdG8gdG9nZ2xlIGVkaXRhYmxlLiBDYW4gYmUgPGNvZGU+Y2xpY2t8ZGJsY2xpY2t8bW91c2VlbnRlcnxtYW51YWw8L2NvZGU+LiAgIFxuICAgICAgICBXaGVuIHNldCB0byA8Y29kZT5tYW51YWw8L2NvZGU+IHlvdSBzaG91bGQgbWFudWFsbHkgY2FsbCA8Y29kZT5zaG93L2hpZGU8L2NvZGU+IG1ldGhvZHMgb2YgZWRpdGFibGUuICAgIFxuICAgICAgICAqKk5vdGUqKjogaWYgeW91IGNhbGwgPGNvZGU+c2hvdzwvY29kZT4gb3IgPGNvZGU+dG9nZ2xlPC9jb2RlPiBpbnNpZGUgKipjbGljayoqIGhhbmRsZXIgb2Ygc29tZSBET00gZWxlbWVudCwgXG4gICAgICAgIHlvdSBuZWVkIHRvIGFwcGx5IDxjb2RlPmUuc3RvcFByb3BhZ2F0aW9uKCk8L2NvZGU+IGJlY2F1c2UgY29udGFpbmVycyBhcmUgYmVpbmcgY2xvc2VkIG9uIGFueSBjbGljayBvbiBkb2N1bWVudC5cbiAgICAgICAgXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgICQoJyNlZGl0LWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAkKCcjdXNlcm5hbWUnKS5lZGl0YWJsZSgndG9nZ2xlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIEBwcm9wZXJ0eSB0b2dnbGUgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnY2xpY2snXG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgdG9nZ2xlOiAnY2xpY2snLFxuICAgICAgICAvKipcbiAgICAgICAgVGV4dCBzaG93biB3aGVuIGVsZW1lbnQgaXMgZW1wdHkuXG5cbiAgICAgICAgQHByb3BlcnR5IGVtcHR5dGV4dCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICdFbXB0eSdcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGVtcHR5dGV4dDogJ0VtcHR5JyxcbiAgICAgICAgLyoqXG4gICAgICAgIEFsbG93cyB0byBhdXRvbWF0aWNhbGx5IHNldCBlbGVtZW50J3MgdGV4dCBiYXNlZCBvbiBpdCdzIHZhbHVlLiBDYW4gYmUgPGNvZGU+YXV0b3xhbHdheXN8bmV2ZXI8L2NvZGU+LiBVc2VmdWwgZm9yIHNlbGVjdCBhbmQgZGF0ZS5cbiAgICAgICAgRm9yIGV4YW1wbGUsIGlmIGRyb3Bkb3duIGxpc3QgaXMgPGNvZGU+ezE6ICdhJywgMjogJ2InfTwvY29kZT4gYW5kIGVsZW1lbnQncyB2YWx1ZSBzZXQgdG8gPGNvZGU+MTwvY29kZT4sIGl0J3MgaHRtbCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgc2V0IHRvIDxjb2RlPidhJzwvY29kZT4uICBcbiAgICAgICAgPGNvZGU+YXV0bzwvY29kZT4gLSB0ZXh0IHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgb25seSBpZiBlbGVtZW50IGlzIGVtcHR5LiAgXG4gICAgICAgIDxjb2RlPmFsd2F5c3xuZXZlcjwvY29kZT4gLSBhbHdheXMobmV2ZXIpIHRyeSB0byBzZXQgZWxlbWVudCdzIHRleHQuXG5cbiAgICAgICAgQHByb3BlcnR5IGF1dG90ZXh0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ2F1dG8nXG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgYXV0b3RleHQ6ICdhdXRvJywgXG4gICAgICAgIC8qKlxuICAgICAgICBJbml0aWFsIHZhbHVlIG9mIGlucHV0LiBJZiBub3Qgc2V0LCB0YWtlbiBmcm9tIGVsZW1lbnQncyB0ZXh0LiAgXG4gICAgICAgIE5vdGUsIHRoYXQgaWYgZWxlbWVudCdzIHRleHQgaXMgZW1wdHkgLSB0ZXh0IGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZyb20gdmFsdWUgYW5kIGNhbiBiZSBjdXN0b21pemVkIChzZWUgYGF1dG90ZXh0YCBvcHRpb24pLiAgXG4gICAgICAgIEZvciBleGFtcGxlLCB0byBkaXNwbGF5IGN1cnJlbmN5IHNpZ246XG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIDxhIGlkPVwicHJpY2VcIiBkYXRhLXR5cGU9XCJ0ZXh0XCIgZGF0YS12YWx1ZT1cIjEwMFwiPjwvYT5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgJCgnI3ByaWNlJykuZWRpdGFibGUoe1xuICAgICAgICAgICAgLi4uXG4gICAgICAgICAgICBkaXNwbGF5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAkKHRoaXMpLnRleHQodmFsdWUgKyAnJCcpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfSkgXG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgdmFsdWUgXG4gICAgICAgIEB0eXBlIG1peGVkXG4gICAgICAgIEBkZWZhdWx0IGVsZW1lbnQncyB0ZXh0XG4gICAgICAgICoqL1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIENhbGxiYWNrIHRvIHBlcmZvcm0gY3VzdG9tIGRpc3BsYXlpbmcgb2YgdmFsdWUgaW4gZWxlbWVudCdzIHRleHQuICBcbiAgICAgICAgSWYgYG51bGxgLCBkZWZhdWx0IGlucHV0J3MgZGlzcGxheSB1c2VkLiAgXG4gICAgICAgIElmIGBmYWxzZWAsIG5vIGRpc3BsYXlpbmcgbWV0aG9kcyB3aWxsIGJlIGNhbGxlZCwgZWxlbWVudCdzIHRleHQgd2lsbCBuZXZlciBjaGFuZ2UuICBcbiAgICAgICAgUnVucyB1bmRlciBlbGVtZW50J3Mgc2NvcGUuICBcbiAgICAgICAgXyoqUGFyYW1ldGVyczoqKl8gIFxuICAgICAgICBcbiAgICAgICAgKiBgdmFsdWVgIGN1cnJlbnQgdmFsdWUgdG8gYmUgZGlzcGxheWVkXG4gICAgICAgICogYHJlc3BvbnNlYCBzZXJ2ZXIgcmVzcG9uc2UgKGlmIGRpc3BsYXkgY2FsbGVkIGFmdGVyIGFqYXggc3VibWl0KSwgc2luY2UgMS40LjBcbiAgICAgICAgIFxuICAgICAgICBGb3IgX2lucHV0cyB3aXRoIHNvdXJjZV8gKHNlbGVjdCwgY2hlY2tsaXN0KSBwYXJhbWV0ZXJzIGFyZSBkaWZmZXJlbnQ6ICBcbiAgICAgICAgICBcbiAgICAgICAgKiBgdmFsdWVgIGN1cnJlbnQgdmFsdWUgdG8gYmUgZGlzcGxheWVkXG4gICAgICAgICogYHNvdXJjZURhdGFgIGFycmF5IG9mIGl0ZW1zIGZvciBjdXJyZW50IGlucHV0IChlLmcuIGRyb3Bkb3duIGl0ZW1zKSBcbiAgICAgICAgKiBgcmVzcG9uc2VgIHNlcnZlciByZXNwb25zZSAoaWYgZGlzcGxheSBjYWxsZWQgYWZ0ZXIgYWpheCBzdWJtaXQpLCBzaW5jZSAxLjQuMFxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgIFRvIGdldCBjdXJyZW50bHkgc2VsZWN0ZWQgaXRlbXMgdXNlIGAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCBzb3VyY2VEYXRhKWAuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgZGlzcGxheSBcbiAgICAgICAgQHR5cGUgZnVuY3Rpb258Ym9vbGVhblxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICBAZXhhbXBsZVxuICAgICAgICBkaXNwbGF5OiBmdW5jdGlvbih2YWx1ZSwgc291cmNlRGF0YSkge1xuICAgICAgICAgICAvL2Rpc3BsYXkgY2hlY2tsaXN0IGFzIGNvbW1hLXNlcGFyYXRlZCB2YWx1ZXNcbiAgICAgICAgICAgdmFyIGh0bWwgPSBbXSxcbiAgICAgICAgICAgICAgIGNoZWNrZWQgPSAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCBzb3VyY2VEYXRhKTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICBpZihjaGVja2VkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgJC5lYWNoKGNoZWNrZWQsIGZ1bmN0aW9uKGksIHYpIHsgaHRtbC5wdXNoKCQuZm4uZWRpdGFibGV1dGlscy5lc2NhcGUodi50ZXh0KSk7IH0pO1xuICAgICAgICAgICAgICAgJCh0aGlzKS5odG1sKGh0bWwuam9pbignLCAnKSk7XG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAkKHRoaXMpLmVtcHR5KCk7IFxuICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBkaXNwbGF5OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQ3NzIGNsYXNzIGFwcGxpZWQgd2hlbiBlZGl0YWJsZSB0ZXh0IGlzIGVtcHR5LlxuXG4gICAgICAgIEBwcm9wZXJ0eSBlbXB0eWNsYXNzIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQHNpbmNlIDEuNC4xICAgICAgICBcbiAgICAgICAgQGRlZmF1bHQgZWRpdGFibGUtZW1wdHlcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgZW1wdHljbGFzczogJ2VkaXRhYmxlLWVtcHR5JyxcbiAgICAgICAgLyoqXG4gICAgICAgIENzcyBjbGFzcyBhcHBsaWVkIHdoZW4gdmFsdWUgd2FzIHN0b3JlZCBidXQgbm90IHNlbnQgdG8gc2VydmVyIChgcGtgIGlzIGVtcHR5IG9yIGBzZW5kID0gJ25ldmVyJ2ApLiAgXG4gICAgICAgIFlvdSBtYXkgc2V0IGl0IHRvIGBudWxsYCBpZiB5b3Ugd29yayB3aXRoIGVkaXRhYmxlcyBsb2NhbGx5IGFuZCBzdWJtaXQgdGhlbSB0b2dldGhlci4gIFxuXG4gICAgICAgIEBwcm9wZXJ0eSB1bnNhdmVkY2xhc3MgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAc2luY2UgMS40LjEgICAgICAgIFxuICAgICAgICBAZGVmYXVsdCBlZGl0YWJsZS11bnNhdmVkXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHVuc2F2ZWRjbGFzczogJ2VkaXRhYmxlLXVuc2F2ZWQnLFxuICAgICAgICAvKipcbiAgICAgICAgSWYgc2VsZWN0b3IgaXMgcHJvdmlkZWQsIGVkaXRhYmxlIHdpbGwgYmUgZGVsZWdhdGVkIHRvIHRoZSBzcGVjaWZpZWQgdGFyZ2V0cy4gIFxuICAgICAgICBVc2VmdWxsIGZvciBkeW5hbWljYWxseSBnZW5lcmF0ZWQgRE9NIGVsZW1lbnRzLiAgXG4gICAgICAgICoqUGxlYXNlIG5vdGUqKiwgdGhhdCBkZWxlZ2F0ZWQgdGFyZ2V0cyBjYW4ndCBiZSBpbml0aWFsaXplZCB3aXRoIGBlbXB0eXRleHRgIGFuZCBgYXV0b3RleHRgIG9wdGlvbnMsIFxuICAgICAgICBhcyB0aGV5IGFjdHVhbGx5IGJlY29tZSBlZGl0YWJsZSBvbmx5IGFmdGVyIGZpcnN0IGNsaWNrLiAgXG4gICAgICAgIFlvdSBzaG91bGQgbWFudWFsbHkgc2V0IGNsYXNzIGBlZGl0YWJsZS1jbGlja2AgdG8gdGhlc2UgZWxlbWVudHMuICBcbiAgICAgICAgQWxzbywgaWYgZWxlbWVudCBvcmlnaW5hbGx5IGVtcHR5IHlvdSBzaG91bGQgYWRkIGNsYXNzIGBlZGl0YWJsZS1lbXB0eWAsIHNldCBgZGF0YS12YWx1ZT1cIlwiYCBhbmQgd3JpdGUgZW1wdHl0ZXh0IGludG8gZWxlbWVudDpcblxuICAgICAgICBAcHJvcGVydHkgc2VsZWN0b3IgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAc2luY2UgMS40LjEgICAgICAgIFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIDxkaXYgaWQ9XCJ1c2VyXCI+XG4gICAgICAgICAgPCEtLSBlbXB0eSAtLT5cbiAgICAgICAgICA8YSBocmVmPVwiI1wiIGRhdGEtbmFtZT1cInVzZXJuYW1lXCIgZGF0YS10eXBlPVwidGV4dFwiIGNsYXNzPVwiZWRpdGFibGUtY2xpY2sgZWRpdGFibGUtZW1wdHlcIiBkYXRhLXZhbHVlPVwiXCIgdGl0bGU9XCJVc2VybmFtZVwiPkVtcHR5PC9hPlxuICAgICAgICAgIDwhLS0gbm9uLWVtcHR5IC0tPlxuICAgICAgICAgIDxhIGhyZWY9XCIjXCIgZGF0YS1uYW1lPVwiZ3JvdXBcIiBkYXRhLXR5cGU9XCJzZWxlY3RcIiBkYXRhLXNvdXJjZT1cIi9ncm91cHNcIiBkYXRhLXZhbHVlPVwiMVwiIGNsYXNzPVwiZWRpdGFibGUtY2xpY2tcIiB0aXRsZT1cIkdyb3VwXCI+T3BlcmF0b3I8L2E+XG4gICAgICAgIDwvZGl2PiAgICAgXG4gICAgICAgIFxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAkKCcjdXNlcicpLmVkaXRhYmxlKHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnYScsXG4gICAgICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgICAgICBwazogMVxuICAgICAgICB9KTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBzZWxlY3RvcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIENvbG9yIHVzZWQgdG8gaGlnaGxpZ2h0IGVsZW1lbnQgYWZ0ZXIgdXBkYXRlLiBJbXBsZW1lbnRlZCB2aWEgQ1NTMyB0cmFuc2l0aW9uLCB3b3JrcyBpbiBtb2Rlcm4gYnJvd3NlcnMuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgaGlnaGxpZ2h0IFxuICAgICAgICBAdHlwZSBzdHJpbmd8Ym9vbGVhblxuICAgICAgICBAc2luY2UgMS40LjUgICAgICAgIFxuICAgICAgICBAZGVmYXVsdCAjRkZGRjgwIFxuICAgICAgICAqKi9cbiAgICAgICAgaGlnaGxpZ2h0OiAnI0ZGRkY4MCdcbiAgICB9O1xuICAgIFxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuQWJzdHJhY3RJbnB1dCAtIGJhc2UgY2xhc3MgZm9yIGFsbCBlZGl0YWJsZSBpbnB1dHMuXG5JdCBkZWZpbmVzIGludGVyZmFjZSB0byBiZSBpbXBsZW1lbnRlZCBieSBhbnkgaW5wdXQgdHlwZS5cblRvIGNyZWF0ZSB5b3VyIG93biBpbnB1dCB5b3UgY2FuIGluaGVyaXQgZnJvbSB0aGlzIGNsYXNzLlxuXG5AY2xhc3MgYWJzdHJhY3RpbnB1dFxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vdHlwZXNcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMgPSB7fTtcblxuICAgIHZhciBBYnN0cmFjdElucHV0ID0gZnVuY3Rpb24gKCkgeyB9O1xuXG4gICAgQWJzdHJhY3RJbnB1dC5wcm90b3R5cGUgPSB7XG4gICAgICAgLyoqXG4gICAgICAgIEluaXRpYWxpemVzIGlucHV0XG5cbiAgICAgICAgQG1ldGhvZCBpbml0KCkgXG4gICAgICAgICoqL1xuICAgICAgIGluaXQ6IGZ1bmN0aW9uKHR5cGUsIG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgfSxcblxuICAgICAgIC8qXG4gICAgICAgdGhpcyBtZXRob2QgY2FsbGVkIGJlZm9yZSByZW5kZXIgdG8gaW5pdCAkdHBsIHRoYXQgaXMgaW5zZXJ0ZWQgaW4gRE9NXG4gICAgICAgKi9cbiAgICAgICBwcmVyZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiR0cGwgPSAkKHRoaXMub3B0aW9ucy50cGwpOyAvL3dob2xlIHRwbCBhcyBqcXVlcnkgb2JqZWN0ICAgIFxuICAgICAgICAgICB0aGlzLiRpbnB1dCA9IHRoaXMuJHRwbDsgICAgICAgICAvL2NvbnRyb2wgaXRzZWxmLCBjYW4gYmUgY2hhbmdlZCBpbiByZW5kZXIgbWV0aG9kXG4gICAgICAgICAgIHRoaXMuJGNsZWFyID0gbnVsbDsgICAgICAgICAgICAgIC8vY2xlYXIgYnV0dG9uXG4gICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsOyAgICAgICAgICAgICAgIC8vZXJyb3IgbWVzc2FnZSwgaWYgaW5wdXQgY2Fubm90IGJlIHJlbmRlcmVkICAgICAgICAgICBcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qKlxuICAgICAgICBSZW5kZXJzIGlucHV0IGZyb20gdHBsLiBDYW4gcmV0dXJuIGpRdWVyeSBkZWZlcnJlZCBvYmplY3QuXG4gICAgICAgIENhbiBiZSBvdmVyd3JpdHRlbiBpbiBjaGlsZCBvYmplY3RzXG5cbiAgICAgICAgQG1ldGhvZCByZW5kZXIoKVxuICAgICAgICoqL1xuICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICB9LCBcblxuICAgICAgIC8qKlxuICAgICAgICBTZXRzIGVsZW1lbnQncyBodG1sIGJ5IHZhbHVlLiBcblxuICAgICAgICBAbWV0aG9kIHZhbHVlMmh0bWwodmFsdWUsIGVsZW1lbnQpXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlXG4gICAgICAgIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudFxuICAgICAgICoqL1xuICAgICAgIHZhbHVlMmh0bWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICQoZWxlbWVudClbdGhpcy5vcHRpb25zLmVzY2FwZSA/ICd0ZXh0JyA6ICdodG1sJ10oJC50cmltKHZhbHVlKSk7XG4gICAgICAgfSxcblxuICAgICAgIC8qKlxuICAgICAgICBDb252ZXJ0cyBlbGVtZW50J3MgaHRtbCB0byB2YWx1ZVxuXG4gICAgICAgIEBtZXRob2QgaHRtbDJ2YWx1ZShodG1sKVxuICAgICAgICBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICAgICAgICBAcmV0dXJucyB7bWl4ZWR9XG4gICAgICAgKiovXG4gICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICByZXR1cm4gJCgnPGRpdj4nKS5odG1sKGh0bWwpLnRleHQoKTtcbiAgICAgICB9LFxuXG4gICAgICAgLyoqXG4gICAgICAgIENvbnZlcnRzIHZhbHVlIHRvIHN0cmluZyAoZm9yIGludGVybmFsIGNvbXBhcmUpLiBGb3Igc3VibWl0dGluZyB0byBzZXJ2ZXIgdXNlZCB2YWx1ZTJzdWJtaXQoKS5cblxuICAgICAgICBAbWV0aG9kIHZhbHVlMnN0cih2YWx1ZSkgXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlXG4gICAgICAgIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgKiovXG4gICAgICAgdmFsdWUyc3RyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgfSwgXG5cbiAgICAgICAvKipcbiAgICAgICAgQ29udmVydHMgc3RyaW5nIHJlY2VpdmVkIGZyb20gc2VydmVyIGludG8gdmFsdWUuIFVzdWFsbHkgZnJvbSBgZGF0YS12YWx1ZWAgYXR0cmlidXRlLlxuXG4gICAgICAgIEBtZXRob2Qgc3RyMnZhbHVlKHN0cilcbiAgICAgICAgQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgICAgICBAcmV0dXJucyB7bWl4ZWR9XG4gICAgICAgKiovXG4gICAgICAgc3RyMnZhbHVlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICB9LCBcbiAgICAgICBcbiAgICAgICAvKipcbiAgICAgICAgQ29udmVydHMgdmFsdWUgZm9yIHN1Ym1pdHRpbmcgdG8gc2VydmVyLiBSZXN1bHQgY2FuIGJlIHN0cmluZyBvciBvYmplY3QuXG5cbiAgICAgICAgQG1ldGhvZCB2YWx1ZTJzdWJtaXQodmFsdWUpIFxuICAgICAgICBAcGFyYW0ge21peGVkfSB2YWx1ZVxuICAgICAgICBAcmV0dXJucyB7bWl4ZWR9XG4gICAgICAgKiovXG4gICAgICAgdmFsdWUyc3VibWl0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgfSxcblxuICAgICAgIC8qKlxuICAgICAgICBTZXRzIHZhbHVlIG9mIGlucHV0LlxuXG4gICAgICAgIEBtZXRob2QgdmFsdWUyaW5wdXQodmFsdWUpIFxuICAgICAgICBAcGFyYW0ge21peGVkfSB2YWx1ZVxuICAgICAgICoqL1xuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpO1xuICAgICAgIH0sXG5cbiAgICAgICAvKipcbiAgICAgICAgUmV0dXJucyB2YWx1ZSBvZiBpbnB1dC4gVmFsdWUgY2FuIGJlIG9iamVjdCAoZS5nLiBkYXRlcGlja2VyKVxuXG4gICAgICAgIEBtZXRob2QgaW5wdXQydmFsdWUoKSBcbiAgICAgICAqKi9cbiAgICAgICBpbnB1dDJ2YWx1ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICByZXR1cm4gdGhpcy4kaW5wdXQudmFsKCk7XG4gICAgICAgfSwgXG5cbiAgICAgICAvKipcbiAgICAgICAgQWN0aXZhdGVzIGlucHV0LiBGb3IgdGV4dCBpdCBzZXRzIGZvY3VzLlxuXG4gICAgICAgIEBtZXRob2QgYWN0aXZhdGUoKSBcbiAgICAgICAqKi9cbiAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGlmKHRoaXMuJGlucHV0LmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5mb2N1cygpO1xuICAgICAgICAgICB9XG4gICAgICAgfSxcblxuICAgICAgIC8qKlxuICAgICAgICBDcmVhdGVzIGlucHV0LlxuXG4gICAgICAgIEBtZXRob2QgY2xlYXIoKSBcbiAgICAgICAqKi8gICAgICAgIFxuICAgICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy4kaW5wdXQudmFsKG51bGwpO1xuICAgICAgIH0sXG5cbiAgICAgICAvKipcbiAgICAgICAgbWV0aG9kIHRvIGVzY2FwZSBodG1sLlxuICAgICAgICoqL1xuICAgICAgIGVzY2FwZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgIHJldHVybiAkKCc8ZGl2PicpLnRleHQoc3RyKS5odG1sKCk7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICAvKipcbiAgICAgICAgYXR0YWNoIGhhbmRsZXIgdG8gYXV0b21hdGljYWxseSBzdWJtaXQgZm9ybSB3aGVuIHZhbHVlIGNoYW5nZWQgKHVzZWZ1bCB3aGVuIGJ1dHRvbnMgbm90IHNob3duKVxuICAgICAgICoqL1xuICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qKlxuICAgICAgIEFkZGl0aW9uYWwgYWN0aW9ucyB3aGVuIGRlc3Ryb3lpbmcgZWxlbWVudCBcbiAgICAgICAqKi9cbiAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICB9LFxuXG4gICAgICAgLy8gLS0tLS0tLS0gaGVscGVyIGZ1bmN0aW9ucyAtLS0tLS0tLVxuICAgICAgIHNldENsYXNzOiBmdW5jdGlvbigpIHsgICAgICAgICAgXG4gICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5pbnB1dGNsYXNzKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRjbGFzcyk7IFxuICAgICAgICAgICB9IFxuICAgICAgIH0sXG5cbiAgICAgICBzZXRBdHRyOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnNbYXR0cl0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLm9wdGlvbnNbYXR0cl0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmF0dHIoYXR0ciwgdGhpcy5vcHRpb25zW2F0dHJdKTtcbiAgICAgICAgICAgfSBcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIG9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICB9XG4gICAgICAgXG4gICAgfTtcbiAgICAgICAgXG4gICAgQWJzdHJhY3RJbnB1dC5kZWZhdWx0cyA9IHsgIFxuICAgICAgICAvKipcbiAgICAgICAgSFRNTCB0ZW1wbGF0ZSBvZiBpbnB1dC4gTm9ybWFsbHkgeW91IHNob3VsZCBub3QgY2hhbmdlIGl0LlxuXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnJ1xuICAgICAgICAqKi8gICBcbiAgICAgICAgdHBsOiAnJyxcbiAgICAgICAgLyoqXG4gICAgICAgIENTUyBjbGFzcyBhdXRvbWF0aWNhbGx5IGFwcGxpZWQgdG8gaW5wdXRcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaW5wdXRjbGFzczogbnVsbCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBJZiBgdHJ1ZWAgLSBodG1sIHdpbGwgYmUgZXNjYXBlZCBpbiBjb250ZW50IG9mIGVsZW1lbnQgdmlhICQudGV4dCgpIG1ldGhvZC4gIFxuICAgICAgICBJZiBgZmFsc2VgIC0gaHRtbCB3aWxsIG5vdCBiZSBlc2NhcGVkLCAkLmh0bWwoKSB1c2VkLiAgXG4gICAgICAgIFdoZW4geW91IHVzZSBvd24gYGRpc3BsYXlgIGZ1bmN0aW9uLCB0aGlzIG9wdGlvbiBvYnZpb3NseSBoYXMgbm8gZWZmZWN0LlxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IGVzY2FwZSBcbiAgICAgICAgQHR5cGUgYm9vbGVhblxuICAgICAgICBAc2luY2UgMS41LjBcbiAgICAgICAgQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgZXNjYXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAvL3Njb3BlIGZvciBleHRlcm5hbCBtZXRob2RzIChlLmcuIHNvdXJjZSBkZWZpbmVkIGFzIGZ1bmN0aW9uKVxuICAgICAgICAvL2ZvciBpbnRlcm5hbCB1c2Ugb25seVxuICAgICAgICBzY29wZTogbnVsbCxcbiAgICAgICAgXG4gICAgICAgIC8vbmVlZCB0byByZS1kZWNsYXJlIHNob3didXR0b25zIGhlcmUgdG8gZ2V0IGl0J3MgdmFsdWUgZnJvbSBjb21tb24gY29uZmlnIChwYXNzZWQgb25seSBvcHRpb25zIGV4aXN0aW5nIGluIGRlZmF1bHRzKVxuICAgICAgICBzaG93YnV0dG9uczogdHJ1ZSBcbiAgICB9O1xuICAgIFxuICAgICQuZXh0ZW5kKCQuZm4uZWRpdGFibGV0eXBlcywge2Fic3RyYWN0aW5wdXQ6IEFic3RyYWN0SW5wdXR9KTtcbiAgICAgICAgXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5MaXN0IC0gYWJzdHJhY3QgY2xhc3MgZm9yIGlucHV0cyB0aGF0IGhhdmUgc291cmNlIG9wdGlvbiBsb2FkZWQgZnJvbSBqcyBhcnJheSBvciB2aWEgYWpheFxuXG5AY2xhc3MgbGlzdFxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgTGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgXG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KExpc3QsICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0KTtcblxuICAgICQuZXh0ZW5kKExpc3QucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMub25Tb3VyY2VSZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJMaXN0KCk7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSB0aGlzLm9wdGlvbnMuc291cmNlRXJyb3I7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvL2Nhbid0IHNldCB2YWx1ZSBieSB0ZXh0XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICB2YWx1ZTJodG1sOiBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnQsIGRpc3BsYXksIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCksXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGRpc3BsYXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY3VzdG9tIGRpc3BsYXkgbWV0aG9kXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5LmNhbGwoZWxlbWVudCwgdmFsdWUsIHRoaXMuc291cmNlRGF0YSwgcmVzcG9uc2UpOyBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUyaHRtbEZpbmFsKHZhbHVlLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2ZvciBudWxsIHZhbHVlIGp1c3QgY2FsbCBzdWNjZXNzIHdpdGhvdXQgbG9hZGluZyBzb3VyY2VcbiAgICAgICAgICAgIGlmKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICBzdWNjZXNzLmNhbGwodGhpcyk7ICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgdGhpcy5vblNvdXJjZVJlYWR5KHN1Y2Nlc3MsIGZ1bmN0aW9uICgpIHsgZGVmZXJyZWQucmVzb2x2ZSgpOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICAgICAgfSwgIFxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0gYWRkaXRpb25hbCBmdW5jdGlvbnMgLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgb25Tb3VyY2VSZWFkeTogZnVuY3Rpb24gKHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICAvL3J1biBzb3VyY2UgaWYgaXQgZnVuY3Rpb25cbiAgICAgICAgICAgIHZhciBzb3VyY2U7XG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5zb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgc291cmNlID0gdGhpcy5vcHRpb25zLnNvdXJjZS5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvL25vdGU6IGlmIGZ1bmN0aW9uIHJldHVybnMgdGhlIHNhbWUgc291cmNlIGFzIFVSTCAtIHNvdXJjZURhdGEgd2lsbCBiZSB0YWtlbiBmcm9tIGNhaGNlIGFuZCBubyBleHRyYSByZXF1ZXN0IHBlcmZvcm1lZFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB0aGlzLm9wdGlvbnMuc291cmNlO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIGFsbHJlYWR5IGxvYWRlZCBqdXN0IGNhbGwgc3VjY2Vzc1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnNvdXJjZUNhY2hlICYmICQuaXNBcnJheSh0aGlzLnNvdXJjZURhdGEpKSB7XG4gICAgICAgICAgICAgICAgc3VjY2Vzcy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHJ5IHBhcnNlIGpzb24gaW4gc2luZ2xlIHF1b3RlcyAoZm9yIGRvdWJsZSBxdW90ZXMganF1ZXJ5IGRvZXMgYXV0b21hdGljYWxseSlcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc291cmNlID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbihzb3VyY2UsIGZhbHNlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBlcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9sb2FkaW5nIGZyb20gdXJsXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAvL3RyeSB0byBnZXQgc291cmNlRGF0YSBmcm9tIGNhY2hlXG4gICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnNvdXJjZUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZUlEID0gc291cmNlLFxuICAgICAgICAgICAgICAgICAgICBjYWNoZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoISQoZG9jdW1lbnQpLmRhdGEoY2FjaGVJRCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmRhdGEoY2FjaGVJRCwge30pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlID0gJChkb2N1bWVudCkuZGF0YShjYWNoZUlEKTtcblxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGZvciBjYWNoZWQgZGF0YVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUubG9hZGluZyA9PT0gZmFsc2UgJiYgY2FjaGUuc291cmNlRGF0YSkgeyAvL3Rha2Ugc291cmNlIGZyb20gY2FjaGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IGNhY2hlLnNvdXJjZURhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUHJlcGVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzcy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNhY2hlLmxvYWRpbmcgPT09IHRydWUpIHsgLy9jYWNoZSBpcyBsb2FkaW5nLCBwdXQgY2FsbGJhY2sgaW4gc3RhY2sgdG8gYmUgY2FsbGVkIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5jYWxsYmFja3MucHVzaCgkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZURhdGEgPSBjYWNoZS5zb3VyY2VEYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9QcmVwZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzcy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Fsc28gY29sbGVjdGluZyBlcnJvciBjYWxsYmFja3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmVycl9jYWxsYmFja3MucHVzaCgkLnByb3h5KGVycm9yLCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vbm8gY2FjaGUgeWV0LCBhY3RpdmF0ZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5jYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmVycl9jYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL2FqYXhPcHRpb25zIGZvciBzb3VyY2UuIENhbiBiZSBvdmVyd3JpdHRlbiBidCBvcHRpb25zLnNvdXJjZU9wdGlvbnNcbiAgICAgICAgICAgICAgICB2YXIgYWpheE9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogc291cmNlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ2V0JyxcbiAgICAgICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiAkLnByb3h5KGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IHRoaXMubWFrZUFycmF5KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoJC5pc0FycmF5KHRoaXMuc291cmNlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3N0b3JlIHJlc3VsdCBpbiBjYWNoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5zb3VyY2VEYXRhID0gdGhpcy5zb3VyY2VEYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3J1biBzdWNjZXNzIGNhbGxiYWNrcyBmb3Igb3RoZXIgZmllbGRzIHdhaXRpbmcgZm9yIHRoaXMgc291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChjYWNoZS5jYWxsYmFja3MsIGZ1bmN0aW9uICgpIHsgdGhpcy5jYWxsKCk7IH0pOyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1ByZXBlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ydW4gZXJyb3IgY2FsbGJhY2tzIGZvciBvdGhlciBmaWVsZHMgd2FpdGluZyBmb3IgdGhpcyBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNhY2hlLmVycl9jYWxsYmFja3MsIGZ1bmN0aW9uICgpIHsgdGhpcy5jYWxsKCk7IH0pOyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3J1biBlcnJvciBjYWxsYmFja3MgZm9yIG90aGVyIGZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY2FjaGUuZXJyX2NhbGxiYWNrcywgZnVuY3Rpb24gKCkgeyB0aGlzLmNhbGwoKTsgfSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICAgICAgICAgIH0sIHRoaXMub3B0aW9ucy5zb3VyY2VPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL2xvYWRpbmcgc291cmNlRGF0YSBmcm9tIHNlcnZlclxuICAgICAgICAgICAgICAgICQuYWpheChhamF4T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2UgeyAvL29wdGlvbnMgYXMganNvbi9hcnJheVxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IHRoaXMubWFrZUFycmF5KHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKCQuaXNBcnJheSh0aGlzLnNvdXJjZURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9QcmVwZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MuY2FsbCh0aGlzKTsgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkb1ByZXBlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5wcmVwZW5kID09PSBudWxsIHx8IHRoaXMub3B0aW9ucy5wcmVwZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47ICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoISQuaXNBcnJheSh0aGlzLnByZXBlbmREYXRhKSkge1xuICAgICAgICAgICAgICAgIC8vcnVuIHByZXBlbmQgaWYgaXQgaXMgZnVuY3Rpb24gKG9uY2UpXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMucHJlcGVuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnByZXBlbmQgPSB0aGlzLm9wdGlvbnMucHJlcGVuZC5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL3RyeSBwYXJzZSBqc29uIGluIHNpbmdsZSBxdW90ZXNcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucHJlcGVuZCA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24odGhpcy5vcHRpb25zLnByZXBlbmQsIHRydWUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vY29udmVydCBwcmVwZW5kIGZyb20gc3RyaW5nIHRvIG9iamVjdFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnByZXBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wcmVwZW5kID0geycnOiB0aGlzLm9wdGlvbnMucHJlcGVuZH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMucHJlcGVuZERhdGEgPSB0aGlzLm1ha2VBcnJheSh0aGlzLm9wdGlvbnMucHJlcGVuZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCQuaXNBcnJheSh0aGlzLnByZXBlbmREYXRhKSAmJiAkLmlzQXJyYXkodGhpcy5zb3VyY2VEYXRhKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IHRoaXMucHJlcGVuZERhdGEuY29uY2F0KHRoaXMuc291cmNlRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgIHJlbmRlcnMgaW5wdXQgbGlzdFxuICAgICAgICAqL1xuICAgICAgICByZW5kZXJMaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBvdmVyd3JpdHRlbiBpbiBjaGlsZCBjbGFzc1xuICAgICAgICB9LFxuICAgICAgIFxuICAgICAgICAgLypcbiAgICAgICAgIHNldCBlbGVtZW50J3MgaHRtbCBieSB2YWx1ZVxuICAgICAgICAqL1xuICAgICAgICB2YWx1ZTJodG1sRmluYWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyB0aGlzIG1ldGhvZCBzaG91bGQgYmUgb3ZlcndyaXR0ZW4gaW4gY2hpbGQgY2xhc3NcbiAgICAgICAgfSwgICAgICAgIFxuXG4gICAgICAgIC8qKlxuICAgICAgICAqIGNvbnZlcnQgZGF0YSB0byBhcnJheSBzdWl0YWJsZSBmb3Igc291cmNlRGF0YSwgZS5nLiBbe3ZhbHVlOiAxLCB0ZXh0OiAnYWJjJ30sIHsuLi59XVxuICAgICAgICAqL1xuICAgICAgICBtYWtlQXJyYXk6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBjb3VudCwgb2JqLCByZXN1bHQgPSBbXSwgaXRlbSwgaXRlcmF0ZUl0ZW07XG4gICAgICAgICAgICBpZighZGF0YSB8fCB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCQuaXNBcnJheShkYXRhKSkgeyAvL2FycmF5XG4gICAgICAgICAgICAgICAgLyogXG4gICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdG8gaXRlcmF0ZSBpbnNpZGUgaXRlbSBvZiBhcnJheSBpZiBpdGVtIGlzIG9iamVjdC5cbiAgICAgICAgICAgICAgICAgICBDYWNsdWxhdGVzIGNvdW50IG9mIGtleXMgaW4gaXRlbSBhbmQgc3RvcmUgaW4gb2JqLiBcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGl0ZXJhdGVJdGVtID0gZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqID0ge3ZhbHVlOiBrLCB0ZXh0OiB2fTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY291bnQrKyA+PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7Ly8gZXhpdCBmcm9tIGBlYWNoYCBpZiBpdGVtIGhhcyBtb3JlIHRoYW4gb25lIGtleS5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtID0gZGF0YVtpXTsgXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSAwOyAvL2NvdW50IG9mIGtleXMgaW5zaWRlIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChpdGVtLCBpdGVyYXRlSXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Nhc2U6IFt7dmFsMTogJ3RleHQxJ30sIHt2YWwyOiAndGV4dDJ9IC4uLl1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvdW50ID09PSAxKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9iaik7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FzZTogW3t2YWx1ZTogMSwgdGV4dDogJ3RleHQxJ30sIHt2YWx1ZTogMiwgdGV4dDogJ3RleHQyJ30sIC4uLl1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihjb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JlbW92ZWQgY2hlY2sgb2YgZXhpc3RhbmNlOiBpdGVtLmhhc093blByb3BlcnR5KCd2YWx1ZScpICYmIGl0ZW0uaGFzT3duUHJvcGVydHkoJ3RleHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jaGlsZHJlbiA9IHRoaXMubWFrZUFycmF5KGl0ZW0uY2hpbGRyZW4pOyAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FzZTogWyd0ZXh0MScsICd0ZXh0MicgLi4uXVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe3ZhbHVlOiBpdGVtLCB0ZXh0OiBpdGVtfSk7IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHsgIC8vY2FzZToge3ZhbDE6ICd0ZXh0MScsIHZhbDI6ICd0ZXh0MiwgLi4ufVxuICAgICAgICAgICAgICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7dmFsdWU6IGssIHRleHQ6IHZ9KTtcbiAgICAgICAgICAgICAgICB9KTsgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmKGtleSA9PT0gJ3NvdXJjZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZURhdGEgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoa2V5ID09PSAncHJlcGVuZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXBlbmREYXRhID0gbnVsbDtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICB9KTsgICAgICBcblxuICAgIExpc3QuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIFNvdXJjZSBkYXRhIGZvciBsaXN0LiAgXG4gICAgICAgIElmICoqYXJyYXkqKiAtIGl0IHNob3VsZCBiZSBpbiBmb3JtYXQ6IGBbe3ZhbHVlOiAxLCB0ZXh0OiBcInRleHQxXCJ9LCB7dmFsdWU6IDIsIHRleHQ6IFwidGV4dDJcIn0sIC4uLl1gICBcbiAgICAgICAgRm9yIGNvbXBhYmlsaXR5LCBvYmplY3QgZm9ybWF0IGlzIGFsc28gc3VwcG9ydGVkOiBge1wiMVwiOiBcInRleHQxXCIsIFwiMlwiOiBcInRleHQyXCIgLi4ufWAgYnV0IGl0IGRvZXMgbm90IGd1YXJhbnRlZSBlbGVtZW50cyBvcmRlci5cbiAgICAgICAgXG4gICAgICAgIElmICoqc3RyaW5nKiogLSBjb25zaWRlcmVkIGFqYXggdXJsIHRvIGxvYWQgaXRlbXMuIEluIHRoYXQgY2FzZSByZXN1bHRzIHdpbGwgYmUgY2FjaGVkIGZvciBmaWVsZHMgd2l0aCB0aGUgc2FtZSBzb3VyY2UgYW5kIG5hbWUuIFNlZSBhbHNvIGBzb3VyY2VDYWNoZWAgb3B0aW9uLlxuICAgICAgICAgIFxuICAgICAgICBJZiAqKmZ1bmN0aW9uKiosIGl0IHNob3VsZCByZXR1cm4gZGF0YSBpbiBmb3JtYXQgYWJvdmUgKHNpbmNlIDEuNC4wKS5cbiAgICAgICAgXG4gICAgICAgIFNpbmNlIDEuNC4xIGtleSBgY2hpbGRyZW5gIHN1cHBvcnRlZCB0byByZW5kZXIgT1BUR1JPVVAgKGZvciAqKnNlbGVjdCoqIGlucHV0IG9ubHkpLiAgXG4gICAgICAgIGBbe3RleHQ6IFwiZ3JvdXAxXCIsIGNoaWxkcmVuOiBbe3ZhbHVlOiAxLCB0ZXh0OiBcInRleHQxXCJ9LCB7dmFsdWU6IDIsIHRleHQ6IFwidGV4dDJcIn1dfSwgLi4uXWAgXG5cblx0XHRcbiAgICAgICAgQHByb3BlcnR5IHNvdXJjZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nIHwgYXJyYXkgfCBvYmplY3QgfCBmdW5jdGlvblxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBzb3VyY2U6IG51bGwsIFxuICAgICAgICAvKipcbiAgICAgICAgRGF0YSBhdXRvbWF0aWNhbGx5IHByZXBlbmRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIGRyb3Bkb3duIGxpc3QuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgcHJlcGVuZCBcbiAgICAgICAgQHR5cGUgc3RyaW5nIHwgYXJyYXkgfCBvYmplY3QgfCBmdW5jdGlvblxuICAgICAgICBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgcHJlcGVuZDogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICBFcnJvciBtZXNzYWdlIHdoZW4gbGlzdCBjYW5ub3QgYmUgbG9hZGVkIChlLmcuIGFqYXggZXJyb3IpXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgc291cmNlRXJyb3IgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBFcnJvciB3aGVuIGxvYWRpbmcgbGlzdFxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIHNvdXJjZUVycm9yOiAnRXJyb3Igd2hlbiBsb2FkaW5nIGxpc3QnLFxuICAgICAgICAvKipcbiAgICAgICAgaWYgPGNvZGU+dHJ1ZTwvY29kZT4gYW5kIHNvdXJjZSBpcyAqKnN0cmluZyB1cmwqKiAtIHJlc3VsdHMgd2lsbCBiZSBjYWNoZWQgZm9yIGZpZWxkcyB3aXRoIHRoZSBzYW1lIHNvdXJjZS4gICAgXG4gICAgICAgIFVzZWZ1bGwgZm9yIGVkaXRhYmxlIGNvbHVtbiBpbiBncmlkIHRvIHByZXZlbnQgZXh0cmEgcmVxdWVzdHMuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgc291cmNlQ2FjaGUgXG4gICAgICAgIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgQGRlZmF1bHQgdHJ1ZVxuICAgICAgICBAc2luY2UgMS4yLjBcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgc291cmNlQ2FjaGU6IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICBBZGRpdGlvbmFsIGFqYXggb3B0aW9ucyB0byBiZSB1c2VkIGluICQuYWpheCgpIHdoZW4gbG9hZGluZyBsaXN0IGZyb20gc2VydmVyLlxuICAgICAgICBVc2VmdWwgdG8gc2VuZCBleHRyYSBwYXJhbWV0ZXJzIChgZGF0YWAga2V5KSBvciBjaGFuZ2UgcmVxdWVzdCBtZXRob2QgKGB0eXBlYCBrZXkpLlxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IHNvdXJjZU9wdGlvbnMgXG4gICAgICAgIEB0eXBlIG9iamVjdHxmdW5jdGlvblxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjUuMFxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBzb3VyY2VPcHRpb25zOiBudWxsXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMubGlzdCA9IExpc3Q7ICAgICAgXG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcblRleHQgaW5wdXRcblxuQGNsYXNzIHRleHRcbkBleHRlbmRzIGFic3RyYWN0aW5wdXRcbkBmaW5hbFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJ1c2VybmFtZVwiIGRhdGEtdHlwZT1cInRleHRcIiBkYXRhLXBrPVwiMVwiPmF3ZXNvbWU8L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgICQoJyN1c2VybmFtZScpLmVkaXRhYmxlKHtcbiAgICAgICAgdXJsOiAnL3Bvc3QnLFxuICAgICAgICB0aXRsZTogJ0VudGVyIHVzZXJuYW1lJ1xuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIFRleHQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ3RleHQnLCBvcHRpb25zLCBUZXh0LmRlZmF1bHRzKTtcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoVGV4dCwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQpO1xuXG4gICAgJC5leHRlbmQoVGV4dC5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy5yZW5kZXJDbGVhcigpO1xuICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgICAgIHRoaXMuc2V0QXR0cigncGxhY2Vob2xkZXInKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuJGlucHV0LmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAkLmZuLmVkaXRhYmxldXRpbHMuc2V0Q3Vyc29yUG9zaXRpb24odGhpcy4kaW5wdXQuZ2V0KDApLCB0aGlzLiRpbnB1dC52YWwoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMudG9nZ2xlQ2xlYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVDbGVhcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8vcmVuZGVyIGNsZWFyIGJ1dHRvblxuICAgICAgICByZW5kZXJDbGVhcjogIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsZWFyKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRjbGVhciA9ICQoJzxzcGFuIGNsYXNzPVwiZWRpdGFibGUtY2xlYXIteFwiPjwvc3Bhbj4nKTtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmFmdGVyKHRoaXMuJGNsZWFyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKCdwYWRkaW5nLXJpZ2h0JywgMjQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5rZXl1cCgkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYXJyb3dzLCBlbnRlciwgdGFiLCBldGNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKH4kLmluQXJyYXkoZS5rZXlDb2RlLCBbNDAsMzgsOSwxMywyN10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC50b2dnbGVDbGVhcihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoKS5jc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIuY2xpY2soJC5wcm94eSh0aGlzLmNsZWFyLCB0aGlzKSk7ICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgcG9zdHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgLy9ub3cgYGNsZWFyYCBpcyBwb3NpdGlvbmVkIHZpYSBjc3NcbiAgICAgICAgICAgIGlmKHRoaXMuJGNsZWFyKSB7XG4gICAgICAgICAgICAgICAgLy9jYW4gcG9zaXRpb24gY2xlYXIgYnV0dG9uIG9ubHkgaGVyZSwgd2hlbiBmb3JtIGlzIHNob3duIGFuZCBoZWlnaHQgY2FuIGJlIGNhbGN1bGF0ZWRcbi8vICAgICAgICAgICAgICAgIHZhciBoID0gdGhpcy4kaW5wdXQub3V0ZXJIZWlnaHQodHJ1ZSkgfHwgMjAsXG4gICAgICAgICAgICAgICAgdmFyIGggPSB0aGlzLiRjbGVhci5wYXJlbnQoKS5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEgPSAoaCAtIHRoaXMuJGNsZWFyLmhlaWdodCgpKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vdGhpcy4kY2xlYXIuY3NzKHtib3R0b206IGRlbHRhLCByaWdodDogZGVsdGF9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICovIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLy9zaG93IC8gaGlkZSBjbGVhciBidXR0b25cbiAgICAgICAgdG9nZ2xlQ2xlYXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmKCF0aGlzLiRjbGVhcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMuJGlucHV0LnZhbCgpLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB2aXNpYmxlID0gdGhpcy4kY2xlYXIuaXMoJzp2aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYobGVuICYmICF2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIuc2hvdygpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIWxlbiAmJiB2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIuaGlkZSgpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy4kY2xlYXIuaGlkZSgpO1xuICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwoJycpLmZvY3VzKCk7XG4gICAgICAgIH0gICAgICAgICAgXG4gICAgfSk7XG5cbiAgICBUZXh0LmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8aW5wdXQgdHlwZT1cInRleHRcIj5cbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHRwbDogJzxpbnB1dCB0eXBlPVwidGV4dFwiPicsXG4gICAgICAgIC8qKlxuICAgICAgICBQbGFjZWhvbGRlciBhdHRyaWJ1dGUgb2YgaW5wdXQuIFNob3duIHdoZW4gaW5wdXQgaXMgZW1wdHkuXG5cbiAgICAgICAgQHByb3BlcnR5IHBsYWNlaG9sZGVyIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICAgICAgXG4gICAgICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFdoZXRoZXIgdG8gc2hvdyBgY2xlYXJgIGJ1dHRvbiBcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBjbGVhciBcbiAgICAgICAgQHR5cGUgYm9vbGVhblxuICAgICAgICBAZGVmYXVsdCB0cnVlICAgICAgICBcbiAgICAgICAgKiovXG4gICAgICAgIGNsZWFyOiB0cnVlXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMudGV4dCA9IFRleHQ7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcblRleHRhcmVhIGlucHV0XG5cbkBjbGFzcyB0ZXh0YXJlYVxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQGZpbmFsXG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cImNvbW1lbnRzXCIgZGF0YS10eXBlPVwidGV4dGFyZWFcIiBkYXRhLXBrPVwiMVwiPmF3ZXNvbWUgY29tbWVudCE8L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgICQoJyNjb21tZW50cycpLmVkaXRhYmxlKHtcbiAgICAgICAgdXJsOiAnL3Bvc3QnLFxuICAgICAgICB0aXRsZTogJ0VudGVyIGNvbW1lbnRzJyxcbiAgICAgICAgcm93czogMTBcbiAgICB9KTtcbn0pO1xuPC9zY3JpcHQ+XG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBUZXh0YXJlYSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgndGV4dGFyZWEnLCBvcHRpb25zLCBUZXh0YXJlYS5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFRleHRhcmVhLCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7XG5cbiAgICAkLmV4dGVuZChUZXh0YXJlYS5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3BsYWNlaG9sZGVyJyk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3Jvd3MnKTsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jdHJsICsgZW50ZXJcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmtleWRvd24oZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUud2hpY2ggPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAvL3VzaW5nIGB3aGl0ZS1zcGFjZTogcHJlLXdyYXBgIHNvbHZlcyBcXG4gIDwtLT4gQlIgY29udmVyc2lvbiB2ZXJ5IGVsZWdhbnQhXG4gICAgICAgLyogXG4gICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBodG1sID0gJycsIGxpbmVzO1xuICAgICAgICAgICAgaWYodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsaW5lcyA9IHZhbHVlLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXNbaV0gPSAkKCc8ZGl2PicpLnRleHQobGluZXNbaV0pLmh0bWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaHRtbCA9IGxpbmVzLmpvaW4oJzxicj4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoZWxlbWVudCkuaHRtbChodG1sKTtcbiAgICAgICAgfSxcbiAgICAgICBcbiAgICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICAgaWYoIWh0bWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoU3RyaW5nLmZyb21DaGFyQ29kZSgxMCksICdnJyk7XG4gICAgICAgICAgICB2YXIgbGluZXMgPSBodG1sLnNwbGl0KC88YnJcXHMqXFwvPz4vaSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSAkKCc8ZGl2PicpLmh0bWwobGluZXNbaV0pLnRleHQoKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBuZXdsaW5lIGNoYXJhY3RlcnMgKFxcbikgdG8gYXZvaWQgdGhlbSBiZWluZyBjb252ZXJ0ZWQgYnkgdmFsdWUyaHRtbCgpIG1ldGhvZFxuICAgICAgICAgICAgICAgIC8vIHRodXMgYWRkaW5nIGV4dHJhIDxicj4gdGFnc1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsICcnKTtcblxuICAgICAgICAgICAgICAgIGxpbmVzW2ldID0gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsaW5lcy5qb2luKFwiXFxuXCIpO1xuICAgICAgICB9LFxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQucHJvdG90eXBlLmFjdGl2YXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIFRleHRhcmVhLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsXG4gICAgICAgIEBkZWZhdWx0IDx0ZXh0YXJlYT48L3RleHRhcmVhPlxuICAgICAgICAqKi9cbiAgICAgICAgdHBsOic8dGV4dGFyZWE+PC90ZXh0YXJlYT4nLFxuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IGlucHV0Y2xhc3NcbiAgICAgICAgQGRlZmF1bHQgaW5wdXQtbGFyZ2VcbiAgICAgICAgKiovXG4gICAgICAgIGlucHV0Y2xhc3M6ICdpbnB1dC1sYXJnZScsXG4gICAgICAgIC8qKlxuICAgICAgICBQbGFjZWhvbGRlciBhdHRyaWJ1dGUgb2YgaW5wdXQuIFNob3duIHdoZW4gaW5wdXQgaXMgZW1wdHkuXG5cbiAgICAgICAgQHByb3BlcnR5IHBsYWNlaG9sZGVyXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIE51bWJlciBvZiByb3dzIGluIHRleHRhcmVhXG5cbiAgICAgICAgQHByb3BlcnR5IHJvd3NcbiAgICAgICAgQHR5cGUgaW50ZWdlclxuICAgICAgICBAZGVmYXVsdCA3XG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHJvd3M6IDcgICAgICAgIFxuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHRhcmVhID0gVGV4dGFyZWE7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcblNlbGVjdCAoZHJvcGRvd24pXG5cbkBjbGFzcyBzZWxlY3RcbkBleHRlbmRzIGxpc3RcbkBmaW5hbFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJzdGF0dXNcIiBkYXRhLXR5cGU9XCJzZWxlY3RcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiBkYXRhLXRpdGxlPVwiU2VsZWN0IHN0YXR1c1wiPjwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI3N0YXR1cycpLmVkaXRhYmxlKHtcbiAgICAgICAgdmFsdWU6IDIsICAgIFxuICAgICAgICBzb3VyY2U6IFtcbiAgICAgICAgICAgICAge3ZhbHVlOiAxLCB0ZXh0OiAnQWN0aXZlJ30sXG4gICAgICAgICAgICAgIHt2YWx1ZTogMiwgdGV4dDogJ0Jsb2NrZWQnfSxcbiAgICAgICAgICAgICAge3ZhbHVlOiAzLCB0ZXh0OiAnRGVsZXRlZCd9XG4gICAgICAgICAgIF1cbiAgICB9KTtcbn0pO1xuPC9zY3JpcHQ+XG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBTZWxlY3QgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ3NlbGVjdCcsIG9wdGlvbnMsIFNlbGVjdC5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFNlbGVjdCwgJC5mbi5lZGl0YWJsZXR5cGVzLmxpc3QpO1xuXG4gICAgJC5leHRlbmQoU2VsZWN0LnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXJMaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmVtcHR5KCk7XG5cbiAgICAgICAgICAgIHZhciBmaWxsSXRlbXMgPSBmdW5jdGlvbigkZWwsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cjtcbiAgICAgICAgICAgICAgICBpZigkLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8ZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ciA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YVtpXS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIubGFiZWwgPSBkYXRhW2ldLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsLmFwcGVuZChmaWxsSXRlbXMoJCgnPG9wdGdyb3VwPicsIGF0dHIpLCBkYXRhW2ldLmNoaWxkcmVuKSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLnZhbHVlID0gZGF0YVtpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhW2ldLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWwuYXBwZW5kKCQoJzxvcHRpb24+JywgYXR0cikudGV4dChkYXRhW2ldLnRleHQpKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICRlbDtcbiAgICAgICAgICAgIH07ICAgICAgICBcblxuICAgICAgICAgICAgZmlsbEl0ZW1zKHRoaXMuJGlucHV0LCB0aGlzLnNvdXJjZURhdGEpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZW50ZXIgc3VibWl0XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vbigna2V5ZG93bi5lZGl0YWJsZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgIFxuICAgICAgICB2YWx1ZTJodG1sRmluYWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9ICcnLCBcbiAgICAgICAgICAgICAgICBpdGVtcyA9ICQuZm4uZWRpdGFibGV1dGlscy5pdGVtc0J5VmFsdWUodmFsdWUsIHRoaXMuc291cmNlRGF0YSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gaXRlbXNbMF0udGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8kKGVsZW1lbnQpLnRleHQodGV4dCk7XG4gICAgICAgICAgICAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dC5wcm90b3R5cGUudmFsdWUyaHRtbC5jYWxsKHRoaXMsIHRleHQsIGVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vZmYoJ2tleWRvd24uZWRpdGFibGUnKS5vbignY2hhbmdlLmVkaXRhYmxlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKS5zdWJtaXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7ICAgICAgXG5cbiAgICBTZWxlY3QuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmxpc3QuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEBkZWZhdWx0IDxzZWxlY3Q+PC9zZWxlY3Q+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0cGw6JzxzZWxlY3Q+PC9zZWxlY3Q+J1xuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLnNlbGVjdCA9IFNlbGVjdDsgICAgICBcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuTGlzdCBvZiBjaGVja2JveGVzLiBcbkludGVybmFsbHkgdmFsdWUgc3RvcmVkIGFzIGphdmFzY3JpcHQgYXJyYXkgb2YgdmFsdWVzLlxuXG5AY2xhc3MgY2hlY2tsaXN0XG5AZXh0ZW5kcyBsaXN0XG5AZmluYWxcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwib3B0aW9uc1wiIGRhdGEtdHlwZT1cImNoZWNrbGlzdFwiIGRhdGEtcGs9XCIxXCIgZGF0YS11cmw9XCIvcG9zdFwiIGRhdGEtdGl0bGU9XCJTZWxlY3Qgb3B0aW9uc1wiPjwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI29wdGlvbnMnKS5lZGl0YWJsZSh7XG4gICAgICAgIHZhbHVlOiBbMiwgM10sICAgIFxuICAgICAgICBzb3VyY2U6IFtcbiAgICAgICAgICAgICAge3ZhbHVlOiAxLCB0ZXh0OiAnb3B0aW9uMSd9LFxuICAgICAgICAgICAgICB7dmFsdWU6IDIsIHRleHQ6ICdvcHRpb24yJ30sXG4gICAgICAgICAgICAgIHt2YWx1ZTogMywgdGV4dDogJ29wdGlvbjMnfVxuICAgICAgICAgICBdXG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgQ2hlY2tsaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdjaGVja2xpc3QnLCBvcHRpb25zLCBDaGVja2xpc3QuZGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChDaGVja2xpc3QsICQuZm4uZWRpdGFibGV0eXBlcy5saXN0KTtcblxuICAgICQuZXh0ZW5kKENoZWNrbGlzdC5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyTGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJGxhYmVsLCAkZGl2O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiR0cGwuZW1wdHkoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoISQuaXNBcnJheSh0aGlzLnNvdXJjZURhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTx0aGlzLnNvdXJjZURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAkbGFiZWwgPSAkKCc8bGFiZWw+JykuYXBwZW5kKCQoJzxpbnB1dD4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zb3VyY2VEYXRhW2ldLnZhbHVlIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykudGV4dCgnICcrdGhpcy5zb3VyY2VEYXRhW2ldLnRleHQpKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkKCc8ZGl2PicpLmFwcGVuZCgkbGFiZWwpLmFwcGVuZFRvKHRoaXMuJHRwbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGlucHV0ID0gdGhpcy4kdHBsLmZpbmQoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScpO1xuICAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgICAgICB9LFxuICAgICAgIFxuICAgICAgIHZhbHVlMnN0cjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgcmV0dXJuICQuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5zb3J0KCkuam9pbigkLnRyaW0odGhpcy5vcHRpb25zLnNlcGFyYXRvcikpIDogJyc7XG4gICAgICAgfSwgIFxuICAgICAgIFxuICAgICAgIC8vcGFyc2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgICAgICBzdHIydmFsdWU6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICB2YXIgcmVnLCB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgIGlmKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnICYmIHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgIHJlZyA9IG5ldyBSZWdFeHAoJ1xcXFxzKicrJC50cmltKHRoaXMub3B0aW9ucy5zZXBhcmF0b3IpKydcXFxccyonKTtcbiAgICAgICAgICAgICAgIHZhbHVlID0gc3RyLnNwbGl0KHJlZyk7XG4gICAgICAgICAgIH0gZWxzZSBpZigkLmlzQXJyYXkoc3RyKSkge1xuICAgICAgICAgICAgICAgdmFsdWUgPSBzdHI7IFxuICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgdmFsdWUgPSBbc3RyXTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sICAgICAgIFxuICAgICAgIFxuICAgICAgIC8vc2V0IGNoZWNrZWQgb24gcmVxdWlyZWQgY2hlY2tib3hlc1xuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmKCQuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5lYWNoKGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgdmFyICRlbCA9ICQoZWwpO1xuICAgICAgICAgICAgICAgICAgIC8vIGNhbm5vdCB1c2UgJC5pbkFycmF5IGFzIGl0IHBlcmZvcm1zIHN0cmljdCBjb21wYXJpc29uXG4gICAgICAgICAgICAgICAgICAgJC5lYWNoKHZhbHVlLCBmdW5jdGlvbihqLCB2YWwpe1xuICAgICAgICAgICAgICAgICAgICAgICAvKmpzbGludCBlcWVxOiB0cnVlKi9cbiAgICAgICAgICAgICAgICAgICAgICAgaWYoJGVsLnZhbCgpID09IHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAvKmpzbGludCBlcWVxOiBmYWxzZSovICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkZWwucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICB9KTsgXG4gICAgICAgICAgICB9ICBcbiAgICAgICAgfSwgIFxuICAgICAgICBcbiAgICAgICBpbnB1dDJ2YWx1ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICB2YXIgY2hlY2tlZCA9IFtdO1xuICAgICAgICAgICB0aGlzLiRpbnB1dC5maWx0ZXIoJzpjaGVja2VkJykuZWFjaChmdW5jdGlvbihpLCBlbCkge1xuICAgICAgICAgICAgICAgY2hlY2tlZC5wdXNoKCQoZWwpLnZhbCgpKTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIHJldHVybiBjaGVja2VkO1xuICAgICAgIH0sICAgICAgICAgICAgXG4gICAgICAgICAgXG4gICAgICAgLy9jb2xsZWN0IHRleHQgb2YgY2hlY2tlZCBib3hlc1xuICAgICAgICB2YWx1ZTJodG1sRmluYWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgIHZhciBodG1sID0gW10sXG4gICAgICAgICAgICAgICBjaGVja2VkID0gJC5mbi5lZGl0YWJsZXV0aWxzLml0ZW1zQnlWYWx1ZSh2YWx1ZSwgdGhpcy5zb3VyY2VEYXRhKSxcbiAgICAgICAgICAgICAgIGVzY2FwZSA9IHRoaXMub3B0aW9ucy5lc2NhcGU7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgaWYoY2hlY2tlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICQuZWFjaChjaGVja2VkLCBmdW5jdGlvbihpLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBlc2NhcGUgPyAkLmZuLmVkaXRhYmxldXRpbHMuZXNjYXBlKHYudGV4dCkgOiB2LnRleHQ7IFxuICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaCh0ZXh0KTsgXG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICQoZWxlbWVudCkuaHRtbChodG1sLmpvaW4oJzxicj4nKSk7XG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAkKGVsZW1lbnQpLmVtcHR5KCk7IFxuICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy4kaW5wdXQuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKS5zdWJtaXQoKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfSk7XG4gICAgICAgfVxuICAgIH0pOyAgICAgIFxuXG4gICAgQ2hlY2tsaXN0LmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5saXN0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8ZGl2PjwvZGl2PlxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOic8ZGl2IGNsYXNzPVwiZWRpdGFibGUtY2hlY2tsaXN0XCI+PC9kaXY+JyxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgaW5wdXRjbGFzcyBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGlucHV0Y2xhc3M6IG51bGwsICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBTZXBhcmF0b3Igb2YgdmFsdWVzIHdoZW4gcmVhZGluZyBmcm9tIGBkYXRhLXZhbHVlYCBhdHRyaWJ1dGVcblxuICAgICAgICBAcHJvcGVydHkgc2VwYXJhdG9yIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJywnXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBzZXBhcmF0b3I6ICcsJ1xuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmNoZWNrbGlzdCA9IENoZWNrbGlzdDsgICAgICBcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuSFRNTDUgaW5wdXQgdHlwZXMuXG5Gb2xsb3dpbmcgdHlwZXMgYXJlIHN1cHBvcnRlZDpcblxuKiBwYXNzd29yZFxuKiBlbWFpbFxuKiB1cmxcbiogdGVsXG4qIG51bWJlclxuKiByYW5nZVxuKiB0aW1lXG5cbkxlYXJuIG1vcmUgYWJvdXQgaHRtbDUgaW5wdXRzOiAgXG5odHRwOi8vd3d3LnczLm9yZy93aWtpL0hUTUw1X2Zvcm1fYWRkaXRpb25zICBcblRvIGNoZWNrIGJyb3dzZXIgY29tcGF0aWJpbGl0eSBwbGVhc2Ugc2VlOiAgXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0hUTUwvRWxlbWVudC9JbnB1dFxuICAgICAgICAgICAgXG5AY2xhc3MgaHRtbDV0eXBlcyBcbkBleHRlbmRzIHRleHRcbkBmaW5hbFxuQHNpbmNlIDEuMy4wXG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cImVtYWlsXCIgZGF0YS10eXBlPVwiZW1haWxcIiBkYXRhLXBrPVwiMVwiPmFkbWluQGV4YW1wbGUuY29tPC9hPlxuPHNjcmlwdD5cbiQoZnVuY3Rpb24oKXtcbiAgICAkKCcjZW1haWwnKS5lZGl0YWJsZSh7XG4gICAgICAgIHVybDogJy9wb3N0JyxcbiAgICAgICAgdGl0bGU6ICdFbnRlciBlbWFpbCdcbiAgICB9KTtcbn0pO1xuPC9zY3JpcHQ+XG4qKi9cblxuLyoqXG5AcHJvcGVydHkgdHBsIFxuQGRlZmF1bHQgZGVwZW5kcyBvbiB0eXBlXG4qKi8gXG5cbi8qXG5QYXNzd29yZFxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBQYXNzd29yZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgncGFzc3dvcmQnLCBvcHRpb25zLCBQYXNzd29yZC5kZWZhdWx0cyk7XG4gICAgfTtcbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChQYXNzd29yZCwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQpO1xuICAgICQuZXh0ZW5kKFBhc3N3b3JkLnByb3RvdHlwZSwge1xuICAgICAgIC8vZG8gbm90IGRpc3BsYXkgcGFzc3dvcmQsIHNob3cgJ1toaWRkZW5dJyBpbnN0ZWFkXG4gICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgaWYodmFsdWUpIHtcbiAgICAgICAgICAgICAgICQoZWxlbWVudCkudGV4dCgnW2hpZGRlbl0nKTtcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICQoZWxlbWVudCkuZW1wdHkoKTsgXG4gICAgICAgICAgIH1cbiAgICAgICB9LFxuICAgICAgIC8vYXMgcGFzc3dvcmQgbm90IGRpc3BsYXllZCwgc2hvdWxkIG5vdCBzZXQgdmFsdWUgYnkgaHRtbFxuICAgICAgIGh0bWwydmFsdWU6IGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgfSAgICAgICBcbiAgICB9KTsgICAgXG4gICAgUGFzc3dvcmQuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiPidcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMucGFzc3dvcmQgPSBQYXNzd29yZDtcbn0od2luZG93LmpRdWVyeSkpO1xuXG5cbi8qXG5FbWFpbFxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBFbWFpbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnZW1haWwnLCBvcHRpb25zLCBFbWFpbC5kZWZhdWx0cyk7XG4gICAgfTtcbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChFbWFpbCwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQpO1xuICAgIEVtYWlsLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0LmRlZmF1bHRzLCB7XG4gICAgICAgIHRwbDogJzxpbnB1dCB0eXBlPVwiZW1haWxcIj4nXG4gICAgfSk7XG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmVtYWlsID0gRW1haWw7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuXG4vKlxuVXJsXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIFVybCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgndXJsJywgb3B0aW9ucywgVXJsLmRlZmF1bHRzKTtcbiAgICB9O1xuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFVybCwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQpO1xuICAgIFVybC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5kZWZhdWx0cywge1xuICAgICAgICB0cGw6ICc8aW5wdXQgdHlwZT1cInVybFwiPidcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMudXJsID0gVXJsO1xufSh3aW5kb3cualF1ZXJ5KSk7XG5cblxuLypcblRlbFxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBUZWwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ3RlbCcsIG9wdGlvbnMsIFRlbC5kZWZhdWx0cyk7XG4gICAgfTtcbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChUZWwsICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0KTtcbiAgICBUZWwuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJ0ZWxcIj4nXG4gICAgfSk7XG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRlbCA9IFRlbDtcbn0od2luZG93LmpRdWVyeSkpO1xuXG5cbi8qXG5OdW1iZXJcbiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgTnVtYmVySW5wdXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ251bWJlcicsIG9wdGlvbnMsIE51bWJlcklucHV0LmRlZmF1bHRzKTtcbiAgICB9O1xuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KE51bWJlcklucHV0LCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dCk7XG4gICAgJC5leHRlbmQoTnVtYmVySW5wdXQucHJvdG90eXBlLCB7XG4gICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIE51bWJlcklucHV0LnN1cGVyY2xhc3MucmVuZGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ21pbicpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdtYXgnKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignc3RlcCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0cmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuJGNsZWFyKSB7XG4gICAgICAgICAgICAgICAgLy9pbmNyZWFzZSByaWdodCBmZnNldCAgZm9yIHVwL2Rvd24gYXJyb3dzXG4gICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIuY3NzKHtyaWdodDogMjR9KTtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIC8vY2FuIHBvc2l0aW9uIGNsZWFyIGJ1dHRvbiBvbmx5IGhlcmUsIHdoZW4gZm9ybSBpcyBzaG93biBhbmQgaGVpZ2h0IGNhbiBiZSBjYWxjdWxhdGVkXG4gICAgICAgICAgICAgICAgdmFyIGggPSB0aGlzLiRpbnB1dC5vdXRlckhlaWdodCh0cnVlKSB8fCAyMCxcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEgPSAoaCAtIHRoaXMuJGNsZWFyLmhlaWdodCgpKSAvIDI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9hZGQgMTJweCB0byBvZmZzZXQgcmlnaHQgZm9yIHVwL2Rvd24gYXJyb3dzICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuJGNsZWFyLmNzcyh7dG9wOiBkZWx0YSwgcmlnaHQ6IGRlbHRhICsgMTZ9KTtcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfSAgICAgICAgXG4gICAgfSk7ICAgICBcbiAgICBOdW1iZXJJbnB1dC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5kZWZhdWx0cywge1xuICAgICAgICB0cGw6ICc8aW5wdXQgdHlwZT1cIm51bWJlclwiPicsXG4gICAgICAgIGlucHV0Y2xhc3M6ICdpbnB1dC1taW5pJyxcbiAgICAgICAgbWluOiBudWxsLFxuICAgICAgICBtYXg6IG51bGwsXG4gICAgICAgIHN0ZXA6IG51bGxcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMubnVtYmVyID0gTnVtYmVySW5wdXQ7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuXG4vKlxuUmFuZ2UgKGluaGVyaXQgZnJvbSBudW1iZXIpXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIFJhbmdlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdyYW5nZScsIG9wdGlvbnMsIFJhbmdlLmRlZmF1bHRzKTtcbiAgICB9O1xuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFJhbmdlLCAkLmZuLmVkaXRhYmxldHlwZXMubnVtYmVyKTtcbiAgICAkLmV4dGVuZChSYW5nZS5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dCA9IHRoaXMuJHRwbC5maWx0ZXIoJ2lucHV0Jyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbWluJyk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ21heCcpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdzdGVwJyk7ICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2lucHV0JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCdvdXRwdXQnKS50ZXh0KCQodGhpcykudmFsKCkpOyBcbiAgICAgICAgICAgIH0pOyAgXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmZvY3VzKCk7XG4gICAgICAgIH0gICAgICAgICBcbiAgICB9KTtcbiAgICBSYW5nZS5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMubnVtYmVyLmRlZmF1bHRzLCB7XG4gICAgICAgIHRwbDogJzxpbnB1dCB0eXBlPVwicmFuZ2VcIj48b3V0cHV0IHN0eWxlPVwid2lkdGg6IDMwcHg7IGRpc3BsYXk6IGlubGluZS1ibG9ja1wiPjwvb3V0cHV0PicsXG4gICAgICAgIGlucHV0Y2xhc3M6ICdpbnB1dC1tZWRpdW0nXG4gICAgfSk7XG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLnJhbmdlID0gUmFuZ2U7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLypcblRpbWVcbiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBUaW1lID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCd0aW1lJywgb3B0aW9ucywgVGltZS5kZWZhdWx0cyk7XG4gICAgfTtcbiAgICAvL2luaGVyaXQgZnJvbSBhYnN0cmFjdCwgYXMgaW5oZXJpdGFuY2UgZnJvbSB0ZXh0IGdpdmVzIHNlbGVjdGlvbiBlcnJvci5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChUaW1lLCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7XG4gICAgJC5leHRlbmQoVGltZS5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9KTtcbiAgICBUaW1lLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIHRwbDogJzxpbnB1dCB0eXBlPVwidGltZVwiPidcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMudGltZSA9IFRpbWU7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5TZWxlY3QyIGlucHV0LiBCYXNlZCBvbiBhbWF6aW5nIHdvcmsgb2YgSWdvciBWYXluYmVyZyBodHRwczovL2dpdGh1Yi5jb20vaXZheW5iZXJnL3NlbGVjdDIuICBcblBsZWFzZSBzZWUgW29yaWdpbmFsIHNlbGVjdDIgZG9jc10oaHR0cDovL2l2YXluYmVyZy5naXRodWIuY29tL3NlbGVjdDIpIGZvciBkZXRhaWxlZCBkZXNjcmlwdGlvbiBhbmQgb3B0aW9ucy4gIFxuIFxuWW91IHNob3VsZCBtYW51YWxseSBkb3dubG9hZCBhbmQgaW5jbHVkZSBzZWxlY3QyIGRpc3RyaWJ1dGl2ZTogIFxuXG4gICAgPGxpbmsgaHJlZj1cInNlbGVjdDIvc2VsZWN0Mi5jc3NcIiByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCI+PC9saW5rPiAgXG4gICAgPHNjcmlwdCBzcmM9XCJzZWxlY3QyL3NlbGVjdDIuanNcIj48L3NjcmlwdD4gIFxuICAgIFxuVG8gbWFrZSBpdCAqKmJvb3RzdHJhcC1zdHlsZWQqKiB5b3UgY2FuIHVzZSBjc3MgZnJvbSBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL3QwbS9zZWxlY3QyLWJvb3RzdHJhcC1jc3MpOiBcblxuICAgIDxsaW5rIGhyZWY9XCJzZWxlY3QyLWJvb3RzdHJhcC5jc3NcIiByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCI+PC9saW5rPiAgICBcbiAgICBcbioqTm90ZToqKiBjdXJyZW50bHkgYGF1dG90ZXh0YCBmZWF0dXJlIGRvZXMgbm90IHdvcmsgZm9yIHNlbGVjdDIgd2l0aCBgYWpheGAgcmVtb3RlIHNvdXJjZS4gICAgXG5Zb3UgbmVlZCBpbml0aWFsbHkgcHV0IGJvdGggYGRhdGEtdmFsdWVgIGFuZCBlbGVtZW50J3MgdGV4dCB5b3VzZWxmOiAgICBcblxuICAgIDxhIGhyZWY9XCIjXCIgZGF0YS10eXBlPVwic2VsZWN0MlwiIGRhdGEtdmFsdWU9XCIxXCI+VGV4dDE8L2E+XG4gICAgXG4gICAgXG5AY2xhc3Mgc2VsZWN0MlxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQHNpbmNlIDEuNC4xXG5AZmluYWxcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwiY291bnRyeVwiIGRhdGEtdHlwZT1cInNlbGVjdDJcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdmFsdWU9XCJydVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiBkYXRhLXRpdGxlPVwiU2VsZWN0IGNvdW50cnlcIj48L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgIC8vbG9jYWwgc291cmNlXG4gICAgJCgnI2NvdW50cnknKS5lZGl0YWJsZSh7XG4gICAgICAgIHNvdXJjZTogW1xuICAgICAgICAgICAgICB7aWQ6ICdnYicsIHRleHQ6ICdHcmVhdCBCcml0YWluJ30sXG4gICAgICAgICAgICAgIHtpZDogJ3VzJywgdGV4dDogJ1VuaXRlZCBTdGF0ZXMnfSxcbiAgICAgICAgICAgICAge2lkOiAncnUnLCB0ZXh0OiAnUnVzc2lhJ31cbiAgICAgICAgICAgXSxcbiAgICAgICAgc2VsZWN0Mjoge1xuICAgICAgICAgICBtdWx0aXBsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy9yZW1vdGUgc291cmNlIChzaW1wbGUpXG4gICAgJCgnI2NvdW50cnknKS5lZGl0YWJsZSh7XG4gICAgICAgIHNvdXJjZTogJy9nZXRDb3VudHJpZXMnLFxuICAgICAgICBzZWxlY3QyOiB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBDb3VudHJ5JyxcbiAgICAgICAgICAgIG1pbmltdW1JbnB1dExlbmd0aDogMVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy9yZW1vdGUgc291cmNlIChhZHZhbmNlZClcbiAgICAkKCcjY291bnRyeScpLmVkaXRhYmxlKHtcbiAgICAgICAgc2VsZWN0Mjoge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgQ291bnRyeScsXG4gICAgICAgICAgICBhbGxvd0NsZWFyOiB0cnVlLFxuICAgICAgICAgICAgbWluaW11bUlucHV0TGVuZ3RoOiAzLFxuICAgICAgICAgICAgaWQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uQ291bnRyeUlkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZ2V0Q291bnRyaWVzJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uICh0ZXJtLCBwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHF1ZXJ5OiB0ZXJtIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXN1bHRzOiBmdW5jdGlvbiAoZGF0YSwgcGFnZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyByZXN1bHRzOiBkYXRhIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvcm1hdFJlc3VsdDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5Db3VudHJ5TmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JtYXRTZWxlY3Rpb246IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uQ291bnRyeU5hbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5pdFNlbGVjdGlvbjogZnVuY3Rpb24gKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZ2V0KCcvZ2V0Q291bnRyeUJ5SWQnLCB7IHF1ZXJ5OiBlbGVtZW50LnZhbCgpIH0sIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfSAgXG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ3NlbGVjdDInLCBvcHRpb25zLCBDb25zdHJ1Y3Rvci5kZWZhdWx0cyk7XG5cbiAgICAgICAgb3B0aW9ucy5zZWxlY3QyID0gb3B0aW9ucy5zZWxlY3QyIHx8IHt9O1xuXG4gICAgICAgIHRoaXMuc291cmNlRGF0YSA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICAvL3BsYWNlaG9sZGVyXG4gICAgICAgIGlmKG9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VsZWN0Mi5wbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXI7XG4gICAgICAgIH1cbiAgICAgICBcbiAgICAgICAgLy9pZiBub3QgYHRhZ3NgIG1vZGUsIHVzZSBzb3VyY2VcbiAgICAgICAgaWYoIW9wdGlvbnMuc2VsZWN0Mi50YWdzICYmIG9wdGlvbnMuc291cmNlKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gb3B0aW9ucy5zb3VyY2U7XG4gICAgICAgICAgICAvL2lmIHNvdXJjZSBpcyBmdW5jdGlvbiwgY2FsbCBpdCAob25jZSEpXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdGlvbnMuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZSA9IG9wdGlvbnMuc291cmNlLmNhbGwob3B0aW9ucy5zY29wZSk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2VsZWN0Mi5hamF4ID0gb3B0aW9ucy5zZWxlY3QyLmFqYXggfHwge307XG4gICAgICAgICAgICAgICAgLy9zb21lIGRlZmF1bHQgYWpheCBwYXJhbXNcbiAgICAgICAgICAgICAgICBpZighb3B0aW9ucy5zZWxlY3QyLmFqYXguZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNlbGVjdDIuYWpheC5kYXRhID0gZnVuY3Rpb24odGVybSkge3JldHVybiB7IHF1ZXJ5OnRlcm0gfTt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZighb3B0aW9ucy5zZWxlY3QyLmFqYXgucmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNlbGVjdDIuYWpheC5yZXN1bHRzID0gZnVuY3Rpb24oZGF0YSkgeyByZXR1cm4ge3Jlc3VsdHM6ZGF0YSB9O307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2VsZWN0Mi5hamF4LnVybCA9IHNvdXJjZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9jaGVjayBmb3JtYXQgYW5kIGNvbnZlcnQgeC1lZGl0YWJsZSBmb3JtYXQgdG8gc2VsZWN0MiBmb3JtYXQgKGlmIG5lZWRlZClcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZURhdGEgPSB0aGlzLmNvbnZlcnRTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNlbGVjdDIuZGF0YSA9IHRoaXMuc291cmNlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcblxuICAgICAgICAvL292ZXJyaWRpbmcgb2JqZWN0cyBpbiBjb25maWcgKGFzIGJ5IGRlZmF1bHQgalF1ZXJ5IGV4dGVuZCgpIGlzIG5vdCByZWN1cnNpdmUpXG4gICAgICAgIHRoaXMub3B0aW9ucy5zZWxlY3QyID0gJC5leHRlbmQoe30sIENvbnN0cnVjdG9yLmRlZmF1bHRzLnNlbGVjdDIsIG9wdGlvbnMuc2VsZWN0Mik7XG5cbiAgICAgICAgLy9kZXRlY3Qgd2hldGhlciBpdCBpcyBtdWx0aS12YWx1ZWRcbiAgICAgICAgdGhpcy5pc011bHRpcGxlID0gdGhpcy5vcHRpb25zLnNlbGVjdDIudGFncyB8fCB0aGlzLm9wdGlvbnMuc2VsZWN0Mi5tdWx0aXBsZTtcbiAgICAgICAgdGhpcy5pc1JlbW90ZSA9ICgnYWpheCcgaW4gdGhpcy5vcHRpb25zLnNlbGVjdDIpO1xuXG4gICAgICAgIC8vc3RvcmUgZnVuY3Rpb24gcmV0dXJuaW5nIElEIG9mIGl0ZW1cbiAgICAgICAgLy9zaG91bGQgYmUgaGVyZSBhcyB1c2VkIGluYXV0b3RleHQgZm9yIGxvY2FsIHNvdXJjZVxuICAgICAgICB0aGlzLmlkRnVuYyA9IHRoaXMub3B0aW9ucy5zZWxlY3QyLmlkO1xuICAgICAgICBpZiAodHlwZW9mKHRoaXMuaWRGdW5jKSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgaWRLZXkgPSB0aGlzLmlkRnVuYyB8fCAnaWQnO1xuICAgICAgICAgICAgdGhpcy5pZEZ1bmMgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZVtpZEtleV07IH07XG4gICAgICAgIH1cblxuICAgICAgICAvL3N0b3JlIGZ1bmN0aW9uIHRoYXQgcmVuZGVycyB0ZXh0IGluIHNlbGVjdDJcbiAgICAgICAgdGhpcy5mb3JtYXRTZWxlY3Rpb24gPSB0aGlzLm9wdGlvbnMuc2VsZWN0Mi5mb3JtYXRTZWxlY3Rpb247XG4gICAgICAgIGlmICh0eXBlb2YodGhpcy5mb3JtYXRTZWxlY3Rpb24pICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0U2VsZWN0aW9uID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUudGV4dDsgfTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChDb25zdHJ1Y3RvciwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQpO1xuXG4gICAgJC5leHRlbmQoQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG5cbiAgICAgICAgICAgIC8vY2FuIG5vdCBhcHBseSBzZWxlY3QyIGhlcmUgYXMgaXQgY2FsbHMgaW5pdFNlbGVjdGlvbiBcbiAgICAgICAgICAgIC8vb3ZlciBpbnB1dCB0aGF0IGRvZXMgbm90IGhhdmUgY29ycmVjdCB2YWx1ZSB5ZXQuXG4gICAgICAgICAgICAvL2FwcGx5IHNlbGVjdDIgb25seSBpbiB2YWx1ZTJpbnB1dFxuICAgICAgICAgICAgLy90aGlzLiRpbnB1dC5zZWxlY3QyKHRoaXMub3B0aW9ucy5zZWxlY3QyKTtcblxuICAgICAgICAgICAgLy93aGVuIGRhdGEgaXMgbG9hZGVkIHZpYSBhamF4LCB3ZSBuZWVkIHRvIGtub3cgd2hlbiBpdCdzIGRvbmUgdG8gcG9wdWxhdGUgbGlzdERhdGFcbiAgICAgICAgICAgIGlmKHRoaXMuaXNSZW1vdGUpIHtcbiAgICAgICAgICAgICAgICAvL2xpc3RlbiB0byBsb2FkZWQgZXZlbnQgdG8gcG9wdWxhdGUgZGF0YVxuICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCdzZWxlY3QyLWxvYWRlZCcsICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZURhdGEgPSBlLml0ZW1zLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3RyaWdnZXIgcmVzaXplIG9mIGVkaXRhYmxlZm9ybSB0byByZS1wb3NpdGlvbiBjb250YWluZXIgaW4gbXVsdGktdmFsdWVkIG1vZGVcbiAgICAgICAgICAgIGlmKHRoaXMuaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnBhcmVudCgpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemUnKTtcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgIH0sXG5cbiAgICAgICB2YWx1ZTJodG1sOiBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICAgICB2YXIgdGV4dCA9ICcnLCBkYXRhLFxuICAgICAgICAgICAgICAgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnNlbGVjdDIudGFncykgeyAvL2luIHRhZ3MgbW9kZSBqdXN0IGFzc2lnbiB2YWx1ZVxuICAgICAgICAgICAgICBkYXRhID0gdmFsdWU7IFxuICAgICAgICAgICAgICAvL2RhdGEgPSAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCB0aGlzLm9wdGlvbnMuc2VsZWN0Mi50YWdzLCB0aGlzLmlkRnVuYyk7XG4gICAgICAgICAgIH0gZWxzZSBpZih0aGlzLnNvdXJjZURhdGEpIHtcbiAgICAgICAgICAgICAgZGF0YSA9ICQuZm4uZWRpdGFibGV1dGlscy5pdGVtc0J5VmFsdWUodmFsdWUsIHRoaXMuc291cmNlRGF0YSwgdGhpcy5pZEZ1bmMpOyBcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy9jYW4gbm90IGdldCBsaXN0IG9mIHBvc3NpYmxlIHZhbHVlcyBcbiAgICAgICAgICAgICAgLy8oZS5nLiBhdXRvdGV4dCBmb3Igc2VsZWN0MiB3aXRoIGFqYXggc291cmNlKVxuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgLy9kYXRhIG1heSBiZSBhcnJheSAod2hlbiBtdWx0aXBsZSB2YWx1ZXMgYWxsb3dlZClcbiAgICAgICAgICAgaWYoJC5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAvL2NvbGxlY3Qgc2VsZWN0ZWQgZGF0YSBhbmQgc2hvdyB3aXRoIHNlcGFyYXRvclxuICAgICAgICAgICAgICAgdGV4dCA9IFtdO1xuICAgICAgICAgICAgICAgJC5lYWNoKGRhdGEsIGZ1bmN0aW9uKGssIHYpe1xuICAgICAgICAgICAgICAgICAgIHRleHQucHVzaCh2ICYmIHR5cGVvZiB2ID09PSAnb2JqZWN0JyA/IHRoYXQuZm9ybWF0U2VsZWN0aW9uKHYpIDogdik7XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgfSBlbHNlIGlmKGRhdGEpIHtcbiAgICAgICAgICAgICAgIHRleHQgPSB0aGF0LmZvcm1hdFNlbGVjdGlvbihkYXRhKTtcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIHRleHQgPSAkLmlzQXJyYXkodGV4dCkgPyB0ZXh0LmpvaW4odGhpcy5vcHRpb25zLnZpZXdzZXBhcmF0b3IpIDogdGV4dDtcblxuICAgICAgICAgICAvLyQoZWxlbWVudCkudGV4dCh0ZXh0KTtcbiAgICAgICAgICAgQ29uc3RydWN0b3Iuc3VwZXJjbGFzcy52YWx1ZTJodG1sLmNhbGwodGhpcywgdGV4dCwgZWxlbWVudCk7IFxuICAgICAgIH0sXG5cbiAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuc2VsZWN0Mi50YWdzID8gdGhpcy5zdHIydmFsdWUoaHRtbCwgdGhpcy5vcHRpb25zLnZpZXdzZXBhcmF0b3IpIDogbnVsbDtcbiAgICAgICB9LFxuXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIC8vIGlmIHZhbHVlIGFycmF5ID0+IGpvaW4gaXQgYW55d2F5XG4gICAgICAgICAgIGlmKCQuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5qb2luKHRoaXMuZ2V0U2VwYXJhdG9yKCkpO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgLy9mb3IgcmVtb3RlIHNvdXJjZSBqdXN0IHNldCB2YWx1ZSwgdGV4dCBpcyB1cGRhdGVkIGJ5IGluaXRTZWxlY3Rpb25cbiAgICAgICAgICAgaWYoIXRoaXMuJGlucHV0LmRhdGEoJ3NlbGVjdDInKSkge1xuICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQudmFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LnNlbGVjdDIodGhpcy5vcHRpb25zLnNlbGVjdDIpO1xuICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgLy9zZWNvbmQgYXJndW1lbnQgbmVlZGVkIHRvIHNlcGFyYXRlIGluaXRpYWwgY2hhbmdlIGZyb20gdXNlcidzIGNsaWNrIChmb3IgYXV0b3N1Ym1pdCkgICBcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LnZhbCh2YWx1ZSkudHJpZ2dlcignY2hhbmdlJywgdHJ1ZSk7IFxuXG4gICAgICAgICAgICAgICAvL1VuY2F1Z2h0IEVycm9yOiBjYW5ub3QgY2FsbCB2YWwoKSBpZiBpbml0U2VsZWN0aW9uKCkgaXMgbm90IGRlZmluZWRcbiAgICAgICAgICAgICAgIC8vdGhpcy4kaW5wdXQuc2VsZWN0MigndmFsJywgdmFsdWUpO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgLy8gaWYgZGVmaW5lZCByZW1vdGUgc291cmNlIEFORCBubyBtdWx0aXBsZSBtb2RlIEFORCBubyB1c2VyJ3MgaW5pdFNlbGVjdGlvbiBwcm92aWRlZCAtLT4gXG4gICAgICAgICAgIC8vIHdlIHNob3VsZCBzb21laG93IGdldCB0ZXh0IGZvciBwcm92aWRlZCBpZC5cbiAgICAgICAgICAgLy8gVGhlIHNvbHV0aW9uIGlzIHRvIHVzZSBlbGVtZW50J3MgdGV4dCBhcyB0ZXh0IGZvciB0aGF0IGlkIChleGNsdWRlIGVtcHR5KVxuICAgICAgICAgICBpZih0aGlzLmlzUmVtb3RlICYmICF0aGlzLmlzTXVsdGlwbGUgJiYgIXRoaXMub3B0aW9ucy5zZWxlY3QyLmluaXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgIC8vIGN1c3RvbUlkIGFuZCBjdXN0b21UZXh0IGFyZSBtZXRob2RzIHRvIGV4dHJhY3QgYGlkYCBhbmQgYHRleHRgIGZyb20gZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAgIC8vIHdlIGNhbiB1c2UgdGhpcyB3b3JrYXJvdW5kIG9ubHkgaWYgdXNlciBkaWQgbm90IGRlZmluZSB0aGVzZSBtZXRob2RzXG4gICAgICAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UgY2FudCBjb25zdHJ1Y3QgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAgIHZhciBjdXN0b21JZCA9IHRoaXMub3B0aW9ucy5zZWxlY3QyLmlkLFxuICAgICAgICAgICAgICAgICAgIGN1c3RvbVRleHQgPSB0aGlzLm9wdGlvbnMuc2VsZWN0Mi5mb3JtYXRTZWxlY3Rpb247XG5cbiAgICAgICAgICAgICAgIGlmKCFjdXN0b21JZCAmJiAhY3VzdG9tVGV4dCkge1xuICAgICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKHRoaXMub3B0aW9ucy5zY29wZSk7XG4gICAgICAgICAgICAgICAgICAgaWYgKCEkZWwuZGF0YSgnZWRpdGFibGUnKS5pc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge2lkOiB2YWx1ZSwgdGV4dDogJGVsLnRleHQoKX07XG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LnNlbGVjdDIoJ2RhdGEnLCBkYXRhKTsgXG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICBpbnB1dDJ2YWx1ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICByZXR1cm4gdGhpcy4kaW5wdXQuc2VsZWN0MigndmFsJyk7XG4gICAgICAgfSxcblxuICAgICAgIHN0cjJ2YWx1ZTogZnVuY3Rpb24oc3RyLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIGlmKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8ICF0aGlzLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgdGhpcy5nZXRTZXBhcmF0b3IoKTtcblxuICAgICAgICAgICAgdmFyIHZhbCwgaSwgbDtcblxuICAgICAgICAgICAgaWYgKHN0ciA9PT0gbnVsbCB8fCBzdHIubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsID0gc3RyLnNwbGl0KHNlcGFyYXRvcik7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkgPSBpICsgMSkge1xuICAgICAgICAgICAgICAgIHZhbFtpXSA9ICQudHJpbSh2YWxbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgIH0sXG5cbiAgICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignY2hhbmdlJywgZnVuY3Rpb24oZSwgaXNJbml0aWFsKXtcbiAgICAgICAgICAgICAgICBpZighaXNJbml0aWFsKSB7XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKS5zdWJtaXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTZXBhcmF0b3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zZWxlY3QyLnNlcGFyYXRvciB8fCAkLmZuLnNlbGVjdDIuZGVmYXVsdHMuc2VwYXJhdG9yO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgIENvbnZlcnRzIHNvdXJjZSBmcm9tIHgtZWRpdGFibGUgZm9ybWF0OiB7dmFsdWU6IDEsIHRleHQ6IFwiMVwifSB0b1xuICAgICAgICBzZWxlY3QyIGZvcm1hdDoge2lkOiAxLCB0ZXh0OiBcIjFcIn1cbiAgICAgICAgKi9cbiAgICAgICAgY29udmVydFNvdXJjZTogZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgICAgICBpZigkLmlzQXJyYXkoc291cmNlKSAmJiBzb3VyY2UubGVuZ3RoICYmIHNvdXJjZVswXS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaTxzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoc291cmNlW2ldLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVtpXS5pZCA9IHNvdXJjZVtpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzb3VyY2VbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLiRpbnB1dC5kYXRhKCdzZWxlY3QyJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5zZWxlY3QyKCdkZXN0cm95Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfSk7XG5cbiAgICBDb25zdHJ1Y3Rvci5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dC5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IHRwbCBcbiAgICAgICAgQGRlZmF1bHQgPGlucHV0IHR5cGU9XCJoaWRkZW5cIj5cbiAgICAgICAgKiovXG4gICAgICAgIHRwbDonPGlucHV0IHR5cGU9XCJoaWRkZW5cIj4nLFxuICAgICAgICAvKipcbiAgICAgICAgQ29uZmlndXJhdGlvbiBvZiBzZWxlY3QyLiBbRnVsbCBsaXN0IG9mIG9wdGlvbnNdKGh0dHA6Ly9pdmF5bmJlcmcuZ2l0aHViLmNvbS9zZWxlY3QyKS5cblxuICAgICAgICBAcHJvcGVydHkgc2VsZWN0MiBcbiAgICAgICAgQHR5cGUgb2JqZWN0XG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovXG4gICAgICAgIHNlbGVjdDI6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBQbGFjZWhvbGRlciBhdHRyaWJ1dGUgb2Ygc2VsZWN0XG5cbiAgICAgICAgQHByb3BlcnR5IHBsYWNlaG9sZGVyIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi9cbiAgICAgICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBTb3VyY2UgZGF0YSBmb3Igc2VsZWN0LiBJdCB3aWxsIGJlIGFzc2lnbmVkIHRvIHNlbGVjdDIgYGRhdGFgIHByb3BlcnR5IGFuZCBrZXB0IGhlcmUganVzdCBmb3IgY29udmVuaWVuY2UuXG4gICAgICAgIFBsZWFzZSBub3RlLCB0aGF0IGZvcm1hdCBpcyBkaWZmZXJlbnQgZnJvbSBzaW1wbGUgYHNlbGVjdGAgaW5wdXQ6IHVzZSAnaWQnIGluc3RlYWQgb2YgJ3ZhbHVlJy5cbiAgICAgICAgRS5nLiBgW3tpZDogMSwgdGV4dDogXCJ0ZXh0MVwifSwge2lkOiAyLCB0ZXh0OiBcInRleHQyXCJ9LCAuLi5dYC5cblxuICAgICAgICBAcHJvcGVydHkgc291cmNlIFxuICAgICAgICBAdHlwZSBhcnJheXxzdHJpbmd8ZnVuY3Rpb25cbiAgICAgICAgQGRlZmF1bHQgbnVsbCAgICAgICAgXG4gICAgICAgICoqL1xuICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBTZXBhcmF0b3IgdXNlZCB0byBkaXNwbGF5IHRhZ3MuXG5cbiAgICAgICAgQHByb3BlcnR5IHZpZXdzZXBhcmF0b3IgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnLCAnICAgICAgICBcbiAgICAgICAgKiovXG4gICAgICAgIHZpZXdzZXBhcmF0b3I6ICcsICdcbiAgICB9KTtcblxuICAgICQuZm4uZWRpdGFibGV0eXBlcy5zZWxlY3QyID0gQ29uc3RydWN0b3I7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcbiogQ29tYm9kYXRlIC0gMS4wLjVcbiogRHJvcGRvd24gZGF0ZSBhbmQgdGltZSBwaWNrZXIuXG4qIENvbnZlcnRzIHRleHQgaW5wdXQgaW50byBkcm9wZG93bnMgdG8gcGljayBkYXksIG1vbnRoLCB5ZWFyLCBob3VyLCBtaW51dGUgYW5kIHNlY29uZC5cbiogVXNlcyBtb21lbnRqcyBhcyBkYXRldGltZSBsaWJyYXJ5IGh0dHA6Ly9tb21lbnRqcy5jb20uXG4qIEZvciBpMThuIGluY2x1ZGUgY29ycmVzcG9uZGluZyBmaWxlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3RpbXJ3b29kL21vbWVudC90cmVlL21hc3Rlci9sYW5nIFxuKlxuKiBDb25mdXNpb24gYXQgbm9vbiBhbmQgbWlkbmlnaHQgLSBzZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS8xMi1ob3VyX2Nsb2NrI0NvbmZ1c2lvbl9hdF9ub29uX2FuZF9taWRuaWdodFxuKiBJbiBjb21ib2RhdGU6IFxuKiAxMjowMCBwbSAtLT4gMTI6MDAgKDI0LWggZm9ybWF0LCBtaWRkYXkpXG4qIDEyOjAwIGFtIC0tPiAwMDowMCAoMjQtaCBmb3JtYXQsIG1pZG5pZ2h0LCBzdGFydCBvZiBkYXkpXG4qIFxuKiBEaWZmZXJzIGZyb20gbW9tZW50anMgcGFyc2UgcnVsZXM6XG4qIDAwOjAwIHBtLCAxMjowMCBwbSAtLT4gMTI6MDAgKDI0LWggZm9ybWF0LCBkYXkgbm90IGNoYW5nZSlcbiogMDA6MDAgYW0sIDEyOjAwIGFtIC0tPiAwMDowMCAoMjQtaCBmb3JtYXQsIGRheSBub3QgY2hhbmdlKVxuKiBcbiogXG4qIEF1dGhvcjogVml0YWxpeSBQb3RhcG92XG4qIFByb2plY3QgcGFnZTogaHR0cDovL2dpdGh1Yi5jb20vdml0YWxldHMvY29tYm9kYXRlXG4qIENvcHlyaWdodCAoYykgMjAxMiBWaXRhbGl5IFBvdGFwb3YuIFJlbGVhc2VkIHVuZGVyIE1JVCBMaWNlbnNlLlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBDb21ib2RhdGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgaWYoIXRoaXMuJGVsZW1lbnQuaXMoJ2lucHV0JykpIHtcbiAgICAgICAgICAgICQuZXJyb3IoJ0NvbWJvZGF0ZSBzaG91bGQgYmUgYXBwbGllZCB0byBJTlBVVCBlbGVtZW50Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sICQuZm4uY29tYm9kYXRlLmRlZmF1bHRzLCBvcHRpb25zLCB0aGlzLiRlbGVtZW50LmRhdGEoKSk7XG4gICAgICAgIHRoaXMuaW5pdCgpOyAgXG4gICAgIH07XG5cbiAgICBDb21ib2RhdGUucHJvdG90eXBlID0ge1xuICAgICAgICBjb25zdHJ1Y3RvcjogQ29tYm9kYXRlLCBcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5tYXAgPSB7XG4gICAgICAgICAgICAgICAgLy9rZXkgICByZWdleHAgICAgbW9tZW50Lm1ldGhvZFxuICAgICAgICAgICAgICAgIGRheTogICAgWydEJywgICAgJ2RhdGUnXSwgXG4gICAgICAgICAgICAgICAgbW9udGg6ICBbJ00nLCAgICAnbW9udGgnXSwgXG4gICAgICAgICAgICAgICAgeWVhcjogICBbJ1knLCAgICAneWVhciddLCBcbiAgICAgICAgICAgICAgICBob3VyOiAgIFsnW0hoXScsICdob3VycyddLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogWydtJywgICAgJ21pbnV0ZXMnXSwgXG4gICAgICAgICAgICAgICAgc2Vjb25kOiBbJ3MnLCAgICAnc2Vjb25kcyddLFxuICAgICAgICAgICAgICAgIGFtcG06ICAgWydbQWFdJywgJyddIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kd2lkZ2V0ID0gJCgnPHNwYW4gY2xhc3M9XCJjb21ib2RhdGVcIj48L3NwYW4+JykuaHRtbCh0aGlzLmdldFRlbXBsYXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5pbml0Q29tYm9zKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdXBkYXRlIG9yaWdpbmFsIGlucHV0IG9uIGNoYW5nZSBcbiAgICAgICAgICAgIHRoaXMuJHdpZGdldC5vbignY2hhbmdlJywgJ3NlbGVjdCcsICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudmFsKHRoaXMuZ2V0VmFsdWUoKSkuY2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIGRheXMgY291bnQgaWYgbW9udGggb3IgeWVhciBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zbWFydERheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKCcubW9udGgnKSB8fCAkKGUudGFyZ2V0KS5pcygnLnllYXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsQ29tYm8oJ2RheScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiR3aWRnZXQuZmluZCgnc2VsZWN0JykuY3NzKCd3aWR0aCcsICdhdXRvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGhpZGUgb3JpZ2luYWwgaW5wdXQgYW5kIGluc2VydCB3aWRnZXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpLmFmdGVyKHRoaXMuJHdpZGdldCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHNldCBpbml0aWFsIHZhbHVlXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuJGVsZW1lbnQudmFsKCkgfHwgdGhpcy5vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgICBSZXBsYWNlIHRva2VucyBpbiB0ZW1wbGF0ZSB3aXRoIDxzZWxlY3Q+IGVsZW1lbnRzIFxuICAgICAgICAqLyAgICAgICAgIFxuICAgICAgICBnZXRUZW1wbGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdHBsID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlO1xuXG4gICAgICAgICAgICAvL2ZpcnN0IHBhc3NcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLm1hcCwgZnVuY3Rpb24oaywgdikge1xuICAgICAgICAgICAgICAgIHYgPSB2WzBdOyBcbiAgICAgICAgICAgICAgICB2YXIgciA9IG5ldyBSZWdFeHAodisnKycpLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHYubGVuZ3RoID4gMSA/IHYuc3Vic3RyaW5nKDEsIDIpIDogdjtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHBsID0gdHBsLnJlcGxhY2UociwgJ3snK3Rva2VuKyd9Jyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy9yZXBsYWNlIHNwYWNlcyB3aXRoICZuYnNwO1xuICAgICAgICAgICAgdHBsID0gdHBsLnJlcGxhY2UoLyAvZywgJyZuYnNwOycpO1xuXG4gICAgICAgICAgICAvL3NlY29uZCBwYXNzXG4gICAgICAgICAgICAkLmVhY2godGhpcy5tYXAsIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgICAgICAgICB2ID0gdlswXTtcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSB2Lmxlbmd0aCA+IDEgPyB2LnN1YnN0cmluZygxLCAyKSA6IHY7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRwbCA9IHRwbC5yZXBsYWNlKCd7Jyt0b2tlbisnfScsICc8c2VsZWN0IGNsYXNzPVwiJytrKydcIj48L3NlbGVjdD4nKTtcbiAgICAgICAgICAgIH0pOyAgIFxuXG4gICAgICAgICAgICByZXR1cm4gdHBsO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgIEluaXRpYWxpemUgY29tYm9zIHRoYXQgcHJlc2VudHMgaW4gdGVtcGxhdGUgXG4gICAgICAgICovICAgICAgICBcbiAgICAgICAgaW5pdENvbWJvczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMubWFwKSB7XG4gICAgICAgICAgICAgICAgdmFyICRjID0gdGhpcy4kd2lkZ2V0LmZpbmQoJy4nK2spO1xuICAgICAgICAgICAgICAgIC8vIHNldCBwcm9wZXJ0aWVzIGxpa2UgdGhpcy4kZGF5LCB0aGlzLiRtb250aCBldGMuXG4gICAgICAgICAgICAgICAgdGhpc1snJCcra10gPSAkYy5sZW5ndGggPyAkYyA6IG51bGw7XG4gICAgICAgICAgICAgICAgLy8gZmlsbCB3aXRoIGl0ZW1zXG4gICAgICAgICAgICAgICAgdGhpcy5maWxsQ29tYm8oayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgIEZpbGwgY29tYm8gd2l0aCBpdGVtcyBcbiAgICAgICAgKi8gICAgICAgIFxuICAgICAgICBmaWxsQ29tYm86IGZ1bmN0aW9uKGspIHtcbiAgICAgICAgICAgIHZhciAkY29tYm8gPSB0aGlzWyckJytrXTtcbiAgICAgICAgICAgIGlmICghJGNvbWJvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkZWZpbmUgbWV0aG9kIG5hbWUgdG8gZmlsbCBpdGVtcywgZS5nIGBmaWxsRGF5c2BcbiAgICAgICAgICAgIHZhciBmID0gJ2ZpbGwnICsgay5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGsuc2xpY2UoMSk7IFxuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpc1tmXSgpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gJGNvbWJvLnZhbCgpO1xuXG4gICAgICAgICAgICAkY29tYm8uZW1wdHkoKTtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgJGNvbWJvLmFwcGVuZCgnPG9wdGlvbiB2YWx1ZT1cIicraXRlbXNbaV1bMF0rJ1wiPicraXRlbXNbaV1bMV0rJzwvb3B0aW9uPicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkY29tYm8udmFsKHZhbHVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICAgSW5pdGlhbGl6ZSBpdGVtcyBvZiBjb21ib3MuIEhhbmRsZXMgYGZpcnN0SXRlbWAgb3B0aW9uIFxuICAgICAgICAqL1xuICAgICAgICBmaWxsQ29tbW9uOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgICAgICAgICAgICByZWxUaW1lO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmZpcnN0SXRlbSA9PT0gJ25hbWUnKSB7XG4gICAgICAgICAgICAgICAgLy9uZWVkIGJvdGggdG8gc3VwcG9ydCBtb21lbnQgdmVyIDwgMiBhbmQgID49IDJcbiAgICAgICAgICAgICAgICByZWxUaW1lID0gbW9tZW50LnJlbGF0aXZlVGltZSB8fCBtb21lbnQubGFuZ0RhdGEoKS5fcmVsYXRpdmVUaW1lOyBcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyID0gdHlwZW9mIHJlbFRpbWVba2V5XSA9PT0gJ2Z1bmN0aW9uJyA/IHJlbFRpbWVba2V5XSgxLCB0cnVlLCBrZXksIGZhbHNlKSA6IHJlbFRpbWVba2V5XTtcbiAgICAgICAgICAgICAgICAvL3Rha2UgbGFzdCBlbnRyeSAoc2VlIG1vbWVudGpzIGxhbmcgZmlsZXMgc3RydWN0dXJlKSBcbiAgICAgICAgICAgICAgICBoZWFkZXIgPSBoZWFkZXIuc3BsaXQoJyAnKS5yZXZlcnNlKClbMF07ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKFsnJywgaGVhZGVyXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYodGhpcy5vcHRpb25zLmZpcnN0SXRlbSA9PT0gJ2VtcHR5Jykge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKFsnJywgJyddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH0sICBcblxuXG4gICAgICAgIC8qXG4gICAgICAgIGZpbGwgZGF5XG4gICAgICAgICovXG4gICAgICAgIGZpbGxEYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5maWxsQ29tbW9uKCdkJyksIG5hbWUsIGksXG4gICAgICAgICAgICAgICAgdHdvRGlnaXQgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignREQnKSAhPT0gLTEsXG4gICAgICAgICAgICAgICAgZGF5c0NvdW50ID0gMzE7XG5cbiAgICAgICAgICAgIC8vIGRldGVjdCBkYXlzIGNvdW50IChkZXBlbmRzIG9uIG1vbnRoIGFuZCB5ZWFyKVxuICAgICAgICAgICAgLy8gb3JpZ2luYWxseSBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMvY29tYm9kYXRlL3B1bGwvN1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zbWFydERheXMgJiYgdGhpcy4kbW9udGggJiYgdGhpcy4keWVhcikge1xuICAgICAgICAgICAgICAgIHZhciBtb250aCA9IHBhcnNlSW50KHRoaXMuJG1vbnRoLnZhbCgpLCAxMCk7XG4gICAgICAgICAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh0aGlzLiR5ZWFyLnZhbCgpLCAxMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKG1vbnRoKSAmJiAhaXNOYU4oeWVhcikpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF5c0NvdW50ID0gbW9tZW50KFt5ZWFyLCBtb250aF0pLmRheXNJbk1vbnRoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IGRheXNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IHR3b0RpZ2l0ID8gdGhpcy5sZWFkWmVybyhpKSA6IGk7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChbaSwgbmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zOyAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICBmaWxsIG1vbnRoXG4gICAgICAgICovXG4gICAgICAgIGZpbGxNb250aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmZpbGxDb21tb24oJ00nKSwgbmFtZSwgaSwgXG4gICAgICAgICAgICAgICAgbG9uZ05hbWVzID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ01NTU0nKSAhPT0gLTEsXG4gICAgICAgICAgICAgICAgc2hvcnROYW1lcyA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdNTU0nKSAhPT0gLTEsXG4gICAgICAgICAgICAgICAgdHdvRGlnaXQgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignTU0nKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IoaT0wOyBpPD0xMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYobG9uZ05hbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1yd29vZC9tb21lbnRqcy5jb20vcHVsbC8zNlxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gbW9tZW50KCkuZGF0ZSgxKS5tb250aChpKS5mb3JtYXQoJ01NTU0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoc2hvcnROYW1lcykge1xuICAgICAgICAgICAgICAgICAgICBuYW1lID0gbW9tZW50KCkuZGF0ZSgxKS5tb250aChpKS5mb3JtYXQoJ01NTScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0d29EaWdpdCkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lID0gdGhpcy5sZWFkWmVybyhpKzEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBpKzE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goW2ksIG5hbWVdKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgIH0sICBcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIGZpbGwgeWVhclxuICAgICAgICAqL1xuICAgICAgICBmaWxsWWVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBbXSwgbmFtZSwgaSwgXG4gICAgICAgICAgICAgICAgbG9uZ05hbWVzID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ1lZWVknKSAhPT0gLTE7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgZm9yKGk9dGhpcy5vcHRpb25zLm1heFllYXI7IGk+PXRoaXMub3B0aW9ucy5taW5ZZWFyOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gbG9uZ05hbWVzID8gaSA6IChpKycnKS5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICAgICAgaXRlbXNbdGhpcy5vcHRpb25zLnllYXJEZXNjZW5kaW5nID8gJ3B1c2gnIDogJ3Vuc2hpZnQnXShbaSwgbmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpdGVtcyA9IHRoaXMuZmlsbENvbW1vbigneScpLmNvbmNhdChpdGVtcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBpdGVtczsgICAgICAgICAgICAgIFxuICAgICAgICB9LCAgICBcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIGZpbGwgaG91clxuICAgICAgICAqL1xuICAgICAgICBmaWxsSG91cjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmZpbGxDb21tb24oJ2gnKSwgbmFtZSwgaSxcbiAgICAgICAgICAgICAgICBoMTIgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignaCcpICE9PSAtMSxcbiAgICAgICAgICAgICAgICBoMjQgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignSCcpICE9PSAtMSxcbiAgICAgICAgICAgICAgICB0d29EaWdpdCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2hoJykgIT09IC0xLFxuICAgICAgICAgICAgICAgIG1pbiA9IGgxMiA/IDEgOiAwLCBcbiAgICAgICAgICAgICAgICBtYXggPSBoMTIgPyAxMiA6IDIzO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yKGk9bWluOyBpPD1tYXg7IGkrKykge1xuICAgICAgICAgICAgICAgIG5hbWUgPSB0d29EaWdpdCA/IHRoaXMubGVhZFplcm8oaSkgOiBpO1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goW2ksIG5hbWVdKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7ICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSwgICAgXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICBmaWxsIG1pbnV0ZVxuICAgICAgICAqL1xuICAgICAgICBmaWxsTWludXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuZmlsbENvbW1vbignbScpLCBuYW1lLCBpLFxuICAgICAgICAgICAgICAgIHR3b0RpZ2l0ID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ21tJykgIT09IC0xO1xuXG4gICAgICAgICAgICBmb3IoaT0wOyBpPD01OTsgaSs9IHRoaXMub3B0aW9ucy5taW51dGVTdGVwKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IHR3b0RpZ2l0ID8gdGhpcy5sZWFkWmVybyhpKSA6IGk7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChbaSwgbmFtZV0pO1xuICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgIHJldHVybiBpdGVtczsgICAgICAgICAgICAgIFxuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICBmaWxsIHNlY29uZFxuICAgICAgICAqL1xuICAgICAgICBmaWxsU2Vjb25kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuZmlsbENvbW1vbigncycpLCBuYW1lLCBpLFxuICAgICAgICAgICAgICAgIHR3b0RpZ2l0ID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ3NzJykgIT09IC0xO1xuXG4gICAgICAgICAgICBmb3IoaT0wOyBpPD01OTsgaSs9IHRoaXMub3B0aW9ucy5zZWNvbmRTdGVwKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IHR3b0RpZ2l0ID8gdGhpcy5sZWFkWmVybyhpKSA6IGk7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChbaSwgbmFtZV0pO1xuICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgIHJldHVybiBpdGVtczsgICAgICAgICAgICAgIFxuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICBmaWxsIGFtcG1cbiAgICAgICAgKi9cbiAgICAgICAgZmlsbEFtcG06IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFtcG1MID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ2EnKSAhPT0gLTEsXG4gICAgICAgICAgICAgICAgYW1wbVUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignQScpICE9PSAtMSwgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpdGVtcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgWydhbScsIGFtcG1MID8gJ2FtJyA6ICdBTSddLFxuICAgICAgICAgICAgICAgICAgICBbJ3BtJywgYW1wbUwgPyAncG0nIDogJ1BNJ11cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgIC8qXG4gICAgICAgICBSZXR1cm5zIGN1cnJlbnQgZGF0ZSB2YWx1ZSBmcm9tIGNvbWJvcy4gXG4gICAgICAgICBJZiBmb3JtYXQgbm90IHNwZWNpZmllZCAtIGBvcHRpb25zLmZvcm1hdGAgdXNlZC5cbiAgICAgICAgIElmIGZvcm1hdCA9IGBudWxsYCAtIE1vbWVudCBvYmplY3QgcmV0dXJuZWQuXG4gICAgICAgICovXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgICAgIHZhciBkdCwgdmFsdWVzID0ge30sIFxuICAgICAgICAgICAgICAgIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIG5vdFNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2dldHRpbmcgc2VsZWN0ZWQgdmFsdWVzICAgIFxuICAgICAgICAgICAgJC5lYWNoKHRoaXMubWFwLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgaWYoayA9PT0gJ2FtcG0nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGRlZiA9IGsgPT09ICdkYXknID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YWx1ZXNba10gPSB0aGF0WyckJytrXSA/IHBhcnNlSW50KHRoYXRbJyQnK2tdLnZhbCgpLCAxMCkgOiBkZWY7IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKGlzTmFOKHZhbHVlc1trXSkpIHtcbiAgICAgICAgICAgICAgICAgICBub3RTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiBhdCBsZWFzdCBvbmUgdmlzaWJsZSBjb21ibyBub3Qgc2VsZWN0ZWQgLSByZXR1cm4gZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICBpZihub3RTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2NvbnZlcnQgaG91cnMgMTJoIC0tPiAyNGggXG4gICAgICAgICAgICBpZih0aGlzLiRhbXBtKSB7XG4gICAgICAgICAgICAgICAgLy8xMjowMCBwbSAtLT4gMTI6MDAgKDI0LWggZm9ybWF0LCBtaWRkYXkpLCAxMjowMCBhbSAtLT4gMDA6MDAgKDI0LWggZm9ybWF0LCBtaWRuaWdodCwgc3RhcnQgb2YgZGF5KVxuICAgICAgICAgICAgICAgIGlmKHZhbHVlcy5ob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuaG91ciA9IHRoaXMuJGFtcG0udmFsKCkgPT09ICdhbScgPyAwIDogMTI7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuaG91ciA9IHRoaXMuJGFtcG0udmFsKCkgPT09ICdhbScgPyB2YWx1ZXMuaG91ciA6IHZhbHVlcy5ob3VyKzEyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGR0ID0gbW9tZW50KFt2YWx1ZXMueWVhciwgdmFsdWVzLm1vbnRoLCB2YWx1ZXMuZGF5LCB2YWx1ZXMuaG91ciwgdmFsdWVzLm1pbnV0ZSwgdmFsdWVzLnNlY29uZF0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2hpZ2hsaWdodCBpbnZhbGlkIGRhdGVcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0KGR0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0ID09PSB1bmRlZmluZWQgPyB0aGlzLm9wdGlvbnMuZm9ybWF0IDogZm9ybWF0O1xuICAgICAgICAgICAgaWYoZm9ybWF0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gZHQuaXNWYWxpZCgpID8gZHQgOiBudWxsOyBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICByZXR1cm4gZHQuaXNWYWxpZCgpID8gZHQuZm9ybWF0KGZvcm1hdCkgOiAnJzsgXG4gICAgICAgICAgICB9ICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZHQgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gbW9tZW50KHZhbHVlLCB0aGlzLm9wdGlvbnMuZm9ybWF0KSA6IG1vbWVudCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgdmFsdWVzID0ge307XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZnVuY3Rpb24gdG8gZmluZCBuZWFyZXN0IHZhbHVlIGluIHNlbGVjdCBvcHRpb25zXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZWFyZXN0KCRzZWxlY3QsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0ge307XG4gICAgICAgICAgICAgICAgJHNlbGVjdC5jaGlsZHJlbignb3B0aW9uJykuZWFjaChmdW5jdGlvbihpLCBvcHQpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0VmFsdWUgPSAkKG9wdCkuYXR0cigndmFsdWUnKSxcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYob3B0VmFsdWUgPT09ICcnKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMob3B0VmFsdWUgLSB2YWx1ZSk7IFxuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgZGVsdGEuZGlzdGFuY2UgPT09ICd1bmRlZmluZWQnIHx8IGRpc3RhbmNlIDwgZGVsdGEuZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhID0ge3ZhbHVlOiBvcHRWYWx1ZSwgZGlzdGFuY2U6IGRpc3RhbmNlfTtcbiAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICB9KTsgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbHRhLnZhbHVlO1xuICAgICAgICAgICAgfSAgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoZHQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgLy9yZWFkIHZhbHVlcyBmcm9tIGRhdGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgJC5lYWNoKHRoaXMubWFwLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGsgPT09ICdhbXBtJykge1xuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1trXSA9IGR0W3ZbMV1dKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZih0aGlzLiRhbXBtKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vMTI6MDAgcG0gLS0+IDEyOjAwICgyNC1oIGZvcm1hdCwgbWlkZGF5KSwgMTI6MDAgYW0gLS0+IDAwOjAwICgyNC1oIGZvcm1hdCwgbWlkbmlnaHQsIHN0YXJ0IG9mIGRheSlcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsdWVzLmhvdXIgPj0gMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5hbXBtID0gJ3BtJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlcy5ob3VyID4gMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuaG91ciAtPSAxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5hbXBtID0gJ2FtJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlcy5ob3VyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmhvdXIgPSAxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkLmVhY2godmFsdWVzLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY2FsbCB2YWwoKSBmb3IgZWFjaCBleGlzdGluZyBjb21ibywgZS5nLiB0aGlzLiRob3VyLnZhbCgpXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoYXRbJyQnK2tdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoayA9PT0gJ21pbnV0ZScgJiYgdGhhdC5vcHRpb25zLm1pbnV0ZVN0ZXAgPiAxICYmIHRoYXQub3B0aW9ucy5yb3VuZFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBnZXROZWFyZXN0KHRoYXRbJyQnK2tdLCB2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihrID09PSAnc2Vjb25kJyAmJiB0aGF0Lm9wdGlvbnMuc2Vjb25kU3RlcCA+IDEgJiYgdGhhdC5vcHRpb25zLnJvdW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IGdldE5lYXJlc3QodGhhdFsnJCcra10sIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdFsnJCcra10udmFsKHYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZGF5cyBjb3VudFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc21hcnREYXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbENvbWJvKCdkYXknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudmFsKGR0LmZvcm1hdCh0aGlzLm9wdGlvbnMuZm9ybWF0KSkuY2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICAgaGlnaGxpZ2h0IGNvbWJvcyBpZiBkYXRlIGlzIGludmFsaWRcbiAgICAgICAgKi9cbiAgICAgICAgaGlnaGxpZ2h0OiBmdW5jdGlvbihkdCkge1xuICAgICAgICAgICAgaWYoIWR0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5lcnJvckNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHdpZGdldC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZXJyb3JDbGFzcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zdG9yZSBvcmlnaW5hbCBib3JkZXIgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuYm9yZGVyQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSB0aGlzLiR3aWRnZXQuZmluZCgnc2VsZWN0JykuY3NzKCdib3JkZXItY29sb3InKTsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kd2lkZ2V0LmZpbmQoJ3NlbGVjdCcpLmNzcygnYm9yZGVyLWNvbG9yJywgJ3JlZCcpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5lcnJvckNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHdpZGdldC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZXJyb3JDbGFzcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kd2lkZ2V0LmZpbmQoJ3NlbGVjdCcpLmNzcygnYm9yZGVyLWNvbG9yJywgdGhpcy5ib3JkZXJDb2xvcik7XG4gICAgICAgICAgICAgICAgfSAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBsZWFkWmVybzogZnVuY3Rpb24odikge1xuICAgICAgICAgICAgcmV0dXJuIHYgPD0gOSA/ICcwJyArIHYgOiB2OyBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kd2lkZ2V0LnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVEYXRhKCdjb21ib2RhdGUnKS5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vdG9kbzogY2xlYXIgbWV0aG9kICAgICAgICBcbiAgICB9O1xuXG4gICAgJC5mbi5jb21ib2RhdGUgPSBmdW5jdGlvbiAoIG9wdGlvbiApIHtcbiAgICAgICAgdmFyIGQsIGFyZ3MgPSBBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBhcmdzLnNoaWZ0KCk7XG5cbiAgICAgICAgLy9nZXRWYWx1ZSByZXR1cm5zIGRhdGUgYXMgc3RyaW5nIC8gb2JqZWN0IChub3QgalF1ZXJ5IG9iamVjdClcbiAgICAgICAgaWYob3B0aW9uID09PSAnZ2V0VmFsdWUnICYmIHRoaXMubGVuZ3RoICYmIChkID0gdGhpcy5lcSgwKS5kYXRhKCdjb21ib2RhdGUnKSkpIHtcbiAgICAgICAgICByZXR1cm4gZC5nZXRWYWx1ZS5hcHBseShkLCBhcmdzKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICBkYXRhID0gJHRoaXMuZGF0YSgnY29tYm9kYXRlJyksXG4gICAgICAgICAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb247XG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjb21ib2RhdGUnLCAoZGF0YSA9IG5ldyBDb21ib2RhdGUodGhpcywgb3B0aW9ucykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnICYmIHR5cGVvZiBkYXRhW29wdGlvbl0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTsgIFxuICAgIFxuICAgICQuZm4uY29tYm9kYXRlLmRlZmF1bHRzID0ge1xuICAgICAgICAgLy9pbiB0aGlzIGZvcm1hdCB2YWx1ZSBzdG9yZWQgaW4gb3JpZ2luYWwgaW5wdXRcbiAgICAgICAgZm9ybWF0OiAnREQtTU0tWVlZWSBISDptbScsICAgICAgXG4gICAgICAgIC8vaW4gdGhpcyBmb3JtYXQgaXRlbXMgaW4gZHJvcGRvd25zIGFyZSBkaXNwbGF5ZWRcbiAgICAgICAgdGVtcGxhdGU6ICdEIC8gTU1NIC8gWVlZWSAgIEggOiBtbScsXG4gICAgICAgIC8vaW5pdGlhbCB2YWx1ZSwgY2FuIGJlIGBuZXcgRGF0ZSgpYCAgICBcbiAgICAgICAgdmFsdWU6IG51bGwsICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgbWluWWVhcjogMTk3MCxcbiAgICAgICAgbWF4WWVhcjogMjAxNSxcbiAgICAgICAgeWVhckRlc2NlbmRpbmc6IHRydWUsXG4gICAgICAgIG1pbnV0ZVN0ZXA6IDUsXG4gICAgICAgIHNlY29uZFN0ZXA6IDEsXG4gICAgICAgIGZpcnN0SXRlbTogJ2VtcHR5JywgLy8nbmFtZScsICdlbXB0eScsICdub25lJ1xuICAgICAgICBlcnJvckNsYXNzOiBudWxsLFxuICAgICAgICByb3VuZFRpbWU6IHRydWUsIC8vIHdoZXRoZXIgdG8gcm91bmQgbWludXRlcyBhbmQgc2Vjb25kcyBpZiBzdGVwID4gMVxuICAgICAgICBzbWFydERheXM6IGZhbHNlIC8vIHdoZXRoZXIgZGF5cyBpbiBjb21ibyBkZXBlbmQgb24gc2VsZWN0ZWQgbW9udGg6IDMxLCAzMCwgMjhcbiAgICB9O1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcbi8qKlxuQ29tYm9kYXRlIGlucHV0IC0gZHJvcGRvd24gZGF0ZSBhbmQgdGltZSBwaWNrZXIuICAgIFxuQmFzZWQgb24gW2NvbWJvZGF0ZV0oaHR0cDovL3ZpdGFsZXRzLmdpdGh1Yi5jb20vY29tYm9kYXRlKSBwbHVnaW4gKGluY2x1ZGVkKS4gVG8gdXNlIGl0IHlvdSBzaG91bGQgbWFudWFsbHkgaW5jbHVkZSBbbW9tZW50anNdKGh0dHA6Ly9tb21lbnRqcy5jb20pLlxuXG4gICAgPHNjcmlwdCBzcmM9XCJqcy9tb21lbnQubWluLmpzXCI+PC9zY3JpcHQ+XG4gICBcbkFsbG93cyB0byBpbnB1dDpcblxuKiBvbmx5IGRhdGVcbiogb25seSB0aW1lIFxuKiBib3RoIGRhdGUgYW5kIHRpbWUgIFxuXG5QbGVhc2Ugbm90ZSwgdGhhdCBmb3JtYXQgaXMgdGFrZW4gZnJvbSBtb21lbnRqcyBhbmQgKipub3QgY29tcGF0aWJsZSoqIHdpdGggYm9vdHN0cmFwLWRhdGVwaWNrZXIgLyBqcXVlcnkgVUkgZGF0ZXBpY2tlci4gIFxuSW50ZXJuYWxseSB2YWx1ZSBzdG9yZWQgYXMgYG1vbWVudGpzYCBvYmplY3QuIFxuXG5AY2xhc3MgY29tYm9kYXRlXG5AZXh0ZW5kcyBhYnN0cmFjdGlucHV0XG5AZmluYWxcbkBzaW5jZSAxLjQuMFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJkb2JcIiBkYXRhLXR5cGU9XCJjb21ib2RhdGVcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiBkYXRhLXZhbHVlPVwiMTk4NC0wNS0xNVwiIGRhdGEtdGl0bGU9XCJTZWxlY3QgZGF0ZVwiPjwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI2RvYicpLmVkaXRhYmxlKHtcbiAgICAgICAgZm9ybWF0OiAnWVlZWS1NTS1ERCcsICAgIFxuICAgICAgICB2aWV3Zm9ybWF0OiAnREQuTU0uWVlZWScsICAgIFxuICAgICAgICB0ZW1wbGF0ZTogJ0QgLyBNTU1NIC8gWVlZWScsICAgIFxuICAgICAgICBjb21ib2RhdGU6IHtcbiAgICAgICAgICAgICAgICBtaW5ZZWFyOiAyMDAwLFxuICAgICAgICAgICAgICAgIG1heFllYXI6IDIwMTUsXG4gICAgICAgICAgICAgICAgbWludXRlU3RlcDogMVxuICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuPC9zY3JpcHQ+XG4qKi9cblxuLypnbG9iYWwgbW9tZW50Ki9cblxuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdjb21ib2RhdGUnLCBvcHRpb25zLCBDb25zdHJ1Y3Rvci5kZWZhdWx0cyk7XG4gICAgICAgIFxuICAgICAgICAvL2J5IGRlZmF1bHQgdmlld2Zvcm1hdCBlcXVhbHMgdG8gZm9ybWF0XG4gICAgICAgIGlmKCF0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnZpZXdmb3JtYXQgPSB0aGlzLm9wdGlvbnMuZm9ybWF0O1xuICAgICAgICB9ICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vdHJ5IHBhcnNlIGNvbWJvZGF0ZSBjb25maWcgZGVmaW5lZCBhcyBqc29uIHN0cmluZyBpbiBkYXRhLWNvbWJvZGF0ZVxuICAgICAgICBvcHRpb25zLmNvbWJvZGF0ZSA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24ob3B0aW9ucy5jb21ib2RhdGUsIHRydWUpO1xuXG4gICAgICAgIC8vb3ZlcnJpZGluZyBjb21ib2RhdGUgY29uZmlnIChhcyBieSBkZWZhdWx0IGpRdWVyeSBleHRlbmQoKSBpcyBub3QgcmVjdXJzaXZlKVxuICAgICAgICB0aGlzLm9wdGlvbnMuY29tYm9kYXRlID0gJC5leHRlbmQoe30sIENvbnN0cnVjdG9yLmRlZmF1bHRzLmNvbWJvZGF0ZSwgb3B0aW9ucy5jb21ib2RhdGUsIHtcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5vcHRpb25zLmZvcm1hdCxcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLm9wdGlvbnMudGVtcGxhdGVcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KENvbnN0cnVjdG9yLCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7ICAgIFxuICAgIFxuICAgICQuZXh0ZW5kKENvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmNvbWJvZGF0ZSh0aGlzLm9wdGlvbnMuY29tYm9kYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZigkLmZuLmVkaXRhYmxlZm9ybS5lbmdpbmUgPT09ICdiczMnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuc2libGluZ3MoKS5maW5kKCdzZWxlY3QnKS5hZGRDbGFzcygnZm9ybS1jb250cm9sJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5pbnB1dGNsYXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuc2libGluZ3MoKS5maW5kKCdzZWxlY3QnKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRjbGFzcyk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgICAgICAvL1wiY2xlYXJcIiBsaW5rXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmNsZWFyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIgPSAkKCc8YSBocmVmPVwiI1wiPjwvYT4nKS5odG1sKHRoaXMub3B0aW9ucy5jbGVhcikuY2xpY2soJC5wcm94eShmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuJHRwbC5wYXJlbnQoKS5hcHBlbmQoJCgnPGRpdiBjbGFzcz1cImVkaXRhYmxlLWNsZWFyXCI+JykuYXBwZW5kKHRoaXMuJGNsZWFyKSk7ICBcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAqLyAgICAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gdmFsdWUgPyB2YWx1ZS5mb3JtYXQodGhpcy5vcHRpb25zLnZpZXdmb3JtYXQpIDogJyc7XG4gICAgICAgICAgICAvLyQoZWxlbWVudCkudGV4dCh0ZXh0KTtcbiAgICAgICAgICAgIENvbnN0cnVjdG9yLnN1cGVyY2xhc3MudmFsdWUyaHRtbC5jYWxsKHRoaXMsIHRleHQsIGVsZW1lbnQpOyAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICAgcmV0dXJuIGh0bWwgPyBtb21lbnQoaHRtbCwgdGhpcy5vcHRpb25zLnZpZXdmb3JtYXQpIDogbnVsbDtcbiAgICAgICAgfSwgICBcbiAgICAgICAgXG4gICAgICAgIHZhbHVlMnN0cjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/IHZhbHVlLmZvcm1hdCh0aGlzLm9wdGlvbnMuZm9ybWF0KSA6ICcnO1xuICAgICAgIH0sIFxuICAgICAgIFxuICAgICAgIHN0cjJ2YWx1ZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgIHJldHVybiBzdHIgPyBtb21lbnQoc3RyLCB0aGlzLm9wdGlvbnMuZm9ybWF0KSA6IG51bGw7XG4gICAgICAgfSwgXG4gICAgICAgXG4gICAgICAgdmFsdWUyc3VibWl0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTJzdHIodmFsdWUpO1xuICAgICAgIH0sICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC5jb21ib2RhdGUoJ3NldFZhbHVlJywgdmFsdWUpO1xuICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgIHJldHVybiB0aGlzLiRpbnB1dC5jb21ib2RhdGUoJ2dldFZhbHVlJywgbnVsbCk7XG4gICAgICAgfSwgICAgICAgXG4gICAgICAgXG4gICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC5zaWJsaW5ncygnLmNvbWJvZGF0ZScpLmZpbmQoJ3NlbGVjdCcpLmVxKDApLmZvY3VzKCk7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICAvKlxuICAgICAgIGNsZWFyOiAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy4kaW5wdXQuZGF0YSgnZGF0ZXBpY2tlcicpLmRhdGUgPSBudWxsO1xuICAgICAgICAgIHRoaXMuJGlucHV0LmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgfSxcbiAgICAgICAqL1xuICAgICAgIFxuICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBcbiAgICAgICB9XG5cbiAgICB9KTtcbiAgICBcbiAgICBDb25zdHJ1Y3Rvci5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dC5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IHRwbCBcbiAgICAgICAgQGRlZmF1bHQgPGlucHV0IHR5cGU9XCJ0ZXh0XCI+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0cGw6JzxpbnB1dCB0eXBlPVwidGV4dFwiPicsXG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgaW5wdXRjbGFzcyBcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaW5wdXRjbGFzczogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIEZvcm1hdCB1c2VkIGZvciBzZW5kaW5nIHZhbHVlIHRvIHNlcnZlci4gQWxzbyBhcHBsaWVkIHdoZW4gY29udmVydGluZyBkYXRlIGZyb20gPGNvZGU+ZGF0YS12YWx1ZTwvY29kZT4gYXR0cmlidXRlLjxicj5cbiAgICAgICAgU2VlIGxpc3Qgb2YgdG9rZW5zIGluIFttb21lbnRqcyBkb2NzXShodHRwOi8vbW9tZW50anMuY29tL2RvY3MvIy9wYXJzaW5nL3N0cmluZy1mb3JtYXQpICBcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBmb3JtYXQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBZWVlZLU1NLUREXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBmb3JtYXQ6J1lZWVktTU0tREQnLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIGRpc3BsYXlpbmcgZGF0ZS4gQWxzbyBhcHBsaWVkIHdoZW4gY29udmVydGluZyBkYXRlIGZyb20gZWxlbWVudCdzIHRleHQgb24gaW5pdC4gICBcbiAgICAgICAgSWYgbm90IHNwZWNpZmllZCBlcXVhbHMgdG8gYGZvcm1hdGAuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgdmlld2Zvcm1hdCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICB2aWV3Zm9ybWF0OiBudWxsLCAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBUZW1wbGF0ZSB1c2VkIGZvciBkaXNwbGF5aW5nIGRyb3Bkb3ducy5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSB0ZW1wbGF0ZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IEQgLyBNTU0gLyBZWVlZXG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgdGVtcGxhdGU6ICdEIC8gTU1NIC8gWVlZWScsICBcbiAgICAgICAgLyoqXG4gICAgICAgIENvbmZpZ3VyYXRpb24gb2YgY29tYm9kYXRlLlxuICAgICAgICBGdWxsIGxpc3Qgb2Ygb3B0aW9uczogaHR0cDovL3ZpdGFsZXRzLmdpdGh1Yi5jb20vY29tYm9kYXRlLyNkb2NzXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgY29tYm9kYXRlIFxuICAgICAgICBAdHlwZSBvYmplY3RcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi9cbiAgICAgICAgY29tYm9kYXRlOiBudWxsXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICAobm90IGltcGxlbWVudGVkIHlldClcbiAgICAgICAgVGV4dCBzaG93biBhcyBjbGVhciBkYXRlIGJ1dHRvbi4gXG4gICAgICAgIElmIDxjb2RlPmZhbHNlPC9jb2RlPiBjbGVhciBidXR0b24gd2lsbCBub3QgYmUgcmVuZGVyZWQuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgY2xlYXIgXG4gICAgICAgIEB0eXBlIGJvb2xlYW58c3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd4IGNsZWFyJyAgICAgICAgIFxuICAgICAgICAqL1xuICAgICAgICAvL2NsZWFyOiAnJnRpbWVzOyBjbGVhcidcbiAgICB9KTsgICBcblxuICAgICQuZm4uZWRpdGFibGV0eXBlcy5jb21ib2RhdGUgPSBDb25zdHJ1Y3RvcjtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qXG5FZGl0YWJsZWZvcm0gYmFzZWQgb24gVHdpdHRlciBCb290c3RyYXAgM1xuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIC8vc3RvcmUgcGFyZW50IG1ldGhvZHNcbiAgICB2YXIgcEluaXRJbnB1dCA9ICQuZm4uZWRpdGFibGVmb3JtLkNvbnN0cnVjdG9yLnByb3RvdHlwZS5pbml0SW5wdXQ7XG4gICAgXG4gICAgJC5leHRlbmQoJC5mbi5lZGl0YWJsZWZvcm0uQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGluaXRUZW1wbGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRmb3JtID0gJCgkLmZuLmVkaXRhYmxlZm9ybS50ZW1wbGF0ZSk7IFxuICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuY29udHJvbC1ncm91cCcpLmFkZENsYXNzKCdmb3JtLWdyb3VwJyk7XG4gICAgICAgICAgICB0aGlzLiRmb3JtLmZpbmQoJy5lZGl0YWJsZS1lcnJvci1ibG9jaycpLmFkZENsYXNzKCdoZWxwLWJsb2NrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXRJbnB1dDogZnVuY3Rpb24oKSB7ICBcbiAgICAgICAgICAgIHBJbml0SW5wdXQuYXBwbHkodGhpcyk7XG5cbiAgICAgICAgICAgIC8vZm9yIGJzMyBzZXQgZGVmYXVsdCBjbGFzcyBgaW5wdXQtc21gIHRvIHN0YW5kYXJkIGlucHV0c1xuICAgICAgICAgICAgdmFyIGVtcHR5SW5wdXRDbGFzcyA9IHRoaXMuaW5wdXQub3B0aW9ucy5pbnB1dGNsYXNzID09PSBudWxsIHx8IHRoaXMuaW5wdXQub3B0aW9ucy5pbnB1dGNsYXNzID09PSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0Q2xhc3MgPSAnaW5wdXQtc20nO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2JzMyBhZGQgYGZvcm0tY29udHJvbGAgY2xhc3MgdG8gc3RhbmRhcmQgaW5wdXRzXG4gICAgICAgICAgICB2YXIgc3RkdHlwZXMgPSAndGV4dCxzZWxlY3QsdGV4dGFyZWEscGFzc3dvcmQsZW1haWwsdXJsLHRlbCxudW1iZXIscmFuZ2UsdGltZSx0eXBlYWhlYWRqcycuc3BsaXQoJywnKTsgXG4gICAgICAgICAgICBpZih+JC5pbkFycmF5KHRoaXMuaW5wdXQudHlwZSwgc3RkdHlwZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC4kaW5wdXQuYWRkQ2xhc3MoJ2Zvcm0tY29udHJvbCcpO1xuICAgICAgICAgICAgICAgIGlmKGVtcHR5SW5wdXRDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0Lm9wdGlvbnMuaW5wdXRjbGFzcyA9IGRlZmF1bHRDbGFzcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC4kaW5wdXQuYWRkQ2xhc3MoZGVmYXVsdENsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICAgICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgICAgIC8vYXBwbHkgYnMzIHNpemUgY2xhc3MgYWxzbyB0byBidXR0b25zICh0byBmaXQgc2l6ZSBvZiBjb250cm9sKVxuICAgICAgICAgICAgdmFyICRidG4gPSB0aGlzLiRmb3JtLmZpbmQoJy5lZGl0YWJsZS1idXR0b25zJyk7XG4gICAgICAgICAgICB2YXIgY2xhc3NlcyA9IGVtcHR5SW5wdXRDbGFzcyA/IFtkZWZhdWx0Q2xhc3NdIDogdGhpcy5pbnB1dC5vcHRpb25zLmlucHV0Y2xhc3Muc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBgYnRuLXNtYCBpcyBkZWZhdWx0IG5vd1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgaWYoY2xhc3Nlc1tpXS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQtc20nKSB7IFxuICAgICAgICAgICAgICAgICAgICAkYnRuLmZpbmQoJ2J1dHRvbicpLmFkZENsYXNzKCdidG4tc20nKTsgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmKGNsYXNzZXNbaV0udG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0LWxnJykge1xuICAgICAgICAgICAgICAgICAgICAkYnRuLmZpbmQoJ2J1dHRvbicpLnJlbW92ZUNsYXNzKCdidG4tc20nKS5hZGRDbGFzcygnYnRuLWxnJyk7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pOyAgICBcbiAgICBcbiAgICAvL2J1dHRvbnNcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5idXR0b25zID0gXG4gICAgICAnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLXNtIGVkaXRhYmxlLXN1Ym1pdFwiPicrXG4gICAgICAgICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tb2tcIj48L2k+JytcbiAgICAgICc8L2J1dHRvbj4nK1xuICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBlZGl0YWJsZS1jYW5jZWxcIj4nK1xuICAgICAgICAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVwiPjwvaT4nK1xuICAgICAgJzwvYnV0dG9uPic7ICAgICAgICAgXG4gICAgXG4gICAgLy9lcnJvciBjbGFzc2VzXG4gICAgJC5mbi5lZGl0YWJsZWZvcm0uZXJyb3JHcm91cENsYXNzID0gJ2hhcy1lcnJvcic7XG4gICAgJC5mbi5lZGl0YWJsZWZvcm0uZXJyb3JCbG9ja0NsYXNzID0gbnVsbDsgIFxuICAgIC8vZW5naW5lXG4gICAgJC5mbi5lZGl0YWJsZWZvcm0uZW5naW5lID0gJ2JzMyc7ICBcbn0od2luZG93LmpRdWVyeSkpO1xuLyoqXG4qIEVkaXRhYmxlIFBvcG92ZXIzIChmb3IgQm9vdHN0cmFwIDMpIFxuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogcmVxdWlyZXMgYm9vdHN0cmFwLXBvcG92ZXIuanNcbiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vZXh0ZW5kIG1ldGhvZHNcbiAgICAkLmV4dGVuZCgkLmZuLmVkaXRhYmxlQ29udGFpbmVyLlBvcHVwLnByb3RvdHlwZSwge1xuICAgICAgICBjb250YWluZXJOYW1lOiAncG9wb3ZlcicsXG4gICAgICAgIGNvbnRhaW5lckRhdGFOYW1lOiAnYnMucG9wb3ZlcicsXG4gICAgICAgIGlubmVyQ3NzOiAnLnBvcG92ZXItY29udGVudCcsXG4gICAgICAgIGRlZmF1bHRzOiAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IuREVGQVVMVFMsXG5cbiAgICAgICAgaW5pdENvbnRhaW5lcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMuY29udGFpbmVyT3B0aW9ucywge1xuICAgICAgICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnICcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMuZGVmYXVsdHMudGVtcGxhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2FzIHRlbXBsYXRlIHByb3BlcnR5IGlzIHVzZWQgaW4gaW5wdXRzLCBoaWRlIGl0IGZyb20gcG9wb3ZlclxuICAgICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgICBpZih0aGlzLiRlbGVtZW50LmRhdGEoJ3RlbXBsYXRlJykpIHtcbiAgICAgICAgICAgICAgIHQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3RlbXBsYXRlJyk7XG4gICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoJ3RlbXBsYXRlJyk7ICBcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY2FsbCh0aGlzLmNvbnRhaW5lck9wdGlvbnMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZih0KSB7XG4gICAgICAgICAgICAgICAvL3Jlc3RvcmUgZGF0YSgndGVtcGxhdGUnKVxuICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5kYXRhKCd0ZW1wbGF0ZScsIHQpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgXG4gICAgICAgIFxuICAgICAgICAvKiBzaG93ICovXG4gICAgICAgIGlubmVyU2hvdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jYWxsKCdzaG93Jyk7ICAgICAgICAgICAgICAgIFxuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgICAvKiBoaWRlICovXG4gICAgICAgIGlubmVySGlkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jYWxsKCdoaWRlJyk7ICAgICAgIFxuICAgICAgICB9LCBcbiAgICAgICAgXG4gICAgICAgIC8qIGRlc3Ryb3kgKi9cbiAgICAgICAgaW5uZXJEZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbCgnZGVzdHJveScpO1xuICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHNldENvbnRhaW5lck9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIoKS5vcHRpb25zW2tleV0gPSB2YWx1ZTsgXG4gICAgICAgIH0sICAgICAgICAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogbW92ZSBwb3BvdmVyIHRvIG5ldyBwb3NpdGlvbi4gVGhpcyBmdW5jdGlvbiBtYWlubHkgY29waWVkIGZyb20gYm9vdHN0cmFwLXBvcG92ZXIuXG4gICAgICAgICovXG4gICAgICAgIC8qanNoaW50IGxheGNvbW1hOiB0cnVlLCBlcWVxZXE6IGZhbHNlKi9cbiAgICAgICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uICgpIHsgXG5cbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8qICAgIFxuICAgICAgICAgICAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuICAgICAgICAgICAgICAgICwgaW5zaWRlXG4gICAgICAgICAgICAgICAgLCBwb3NcbiAgICAgICAgICAgICAgICAsIGFjdHVhbFdpZHRoXG4gICAgICAgICAgICAgICAgLCBhY3R1YWxIZWlnaHRcbiAgICAgICAgICAgICAgICAsIHBsYWNlbWVudFxuICAgICAgICAgICAgICAgICwgdHBcbiAgICAgICAgICAgICAgICAsIHRwdFxuICAgICAgICAgICAgICAgICwgdHBiXG4gICAgICAgICAgICAgICAgLCB0cGxcbiAgICAgICAgICAgICAgICAsIHRwcjtcblxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGxhY2VtZW50LmNhbGwodGhpcywgJHRpcFswXSwgdGhpcy4kZWxlbWVudFswXSkgOlxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICBpbnNpZGUgPSAvaW4vLnRlc3QocGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICR0aXBcbiAgICAgICAgICAgICAgLy8gIC5kZXRhY2goKVxuICAgICAgICAgICAgICAvL3ZpdGFsZXRzOiByZW1vdmUgYW55IHBsYWNlbWVudCBjbGFzcyBiZWNhdXNlIG90aGVyd2lzZSB0aGV5IGRvbnQgaW5mbHVlbmNlIG9uIHJlLXBvc2l0aW9uaW5nIG9mIHZpc2libGUgcG9wb3ZlclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndG9wIHJpZ2h0IGJvdHRvbSBsZWZ0JylcbiAgICAgICAgICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pO1xuICAgICAgICAgICAgICAvLyAgLmluc2VydEFmdGVyKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcG9zID0gdGhpcy5nZXRQb3NpdGlvbihpbnNpZGUpO1xuXG4gICAgICAgICAgICAgICAgYWN0dWFsV2lkdGggPSAkdGlwWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gaW5zaWRlID8gcGxhY2VtZW50LnNwbGl0KCcgJylbMV0gOiBwbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICB0cGIgPSB7dG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyfTtcbiAgICAgICAgICAgICAgICB0cHQgPSB7dG9wOiBwb3MudG9wIC0gYWN0dWFsSGVpZ2h0LCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDJ9O1xuICAgICAgICAgICAgICAgIHRwbCA9IHt0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0IC0gYWN0dWFsV2lkdGh9O1xuICAgICAgICAgICAgICAgIHRwciA9IHt0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRofTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRwYi50b3AgKyBhY3R1YWxIZWlnaHQpID4gKCQod2luZG93KS5zY3JvbGxUb3AoKSArICQod2luZG93KS5oZWlnaHQoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHB0LnRvcCA+ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAndG9wJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0cHIubGVmdCArIGFjdHVhbFdpZHRoKSA8ICgkKHdpbmRvdykuc2Nyb2xsTGVmdCgpICsgJCh3aW5kb3cpLndpZHRoKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cGwubGVmdCA+ICQod2luZG93KS5zY3JvbGxMZWZ0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHB0LnRvcCA8ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHBiLnRvcCArIGFjdHVhbEhlaWdodCkgPCAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgJCh3aW5kb3cpLmhlaWdodCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnYm90dG9tJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0cHIubGVmdCArIGFjdHVhbFdpZHRoKSA8ICgkKHdpbmRvdykuc2Nyb2xsTGVmdCgpICsgJCh3aW5kb3cpLndpZHRoKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cGwubGVmdCA+ICQod2luZG93KS5zY3JvbGxMZWZ0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRwbC5sZWZ0IDwgJCh3aW5kb3cpLnNjcm9sbExlZnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHByLmxlZnQgKyBhY3R1YWxXaWR0aCkgPCAoJCh3aW5kb3cpLnNjcm9sbExlZnQoKSArICQod2luZG93KS53aWR0aCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHB0LnRvcCA+ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAndG9wJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRwdC50b3AgPiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0cHIubGVmdCArIGFjdHVhbFdpZHRoKSA+ICgkKHdpbmRvdykuc2Nyb2xsTGVmdCgpICsgJCh3aW5kb3cpLndpZHRoKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRwbC5sZWZ0ID4gJCh3aW5kb3cpLnNjcm9sbExlZnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cHQudG9wID4gJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICd0b3AnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHB0LnRvcCA+ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnYm90dG9tJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHAgPSB0cGI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRwID0gdHB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHAgPSB0cGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHAgPSB0cHI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkdGlwXG4gICAgICAgICAgICAgICAgLm9mZnNldCh0cClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnaW4nKTtcbiAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMucGxhY2VtZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudDsgICAgICAgICAgICBcblxuICAgICAgICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2k7XG4gICAgICAgICAgICB2YXIgYXV0b1BsYWNlID0gYXV0b1Rva2VuLnRlc3QocGxhY2VtZW50KTtcbiAgICAgICAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgdmFyIGFjdHVhbFdpZHRoID0gJHRpcFswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgaWYgKGF1dG9QbGFjZSkge1xuICAgICAgICAgICAgICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoKTtcblxuICAgICAgICAgICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGRvY1Njcm9sbCAgICA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudFdpZHRoICA9IHRoaXMub3B0aW9ucy5jb250YWluZXIgPT0gJ2JvZHknID8gd2luZG93LmlubmVyV2lkdGggIDogJHBhcmVudC5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudEhlaWdodCA9IHRoaXMub3B0aW9ucy5jb250YWluZXIgPT0gJ2JvZHknID8gd2luZG93LmlubmVySGVpZ2h0IDogJHBhcmVudC5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRMZWZ0ICAgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyID09ICdib2R5JyA/IDAgOiAkcGFyZW50Lm9mZnNldCgpLmxlZnQ7XG5cbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLnRvcCAgICsgcG9zLmhlaWdodCAgKyBhY3R1YWxIZWlnaHQgLSBkb2NTY3JvbGwgPiBwYXJlbnRIZWlnaHQgID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAndG9wJyAgICAmJiBwb3MudG9wICAgLSBkb2NTY3JvbGwgICAtIGFjdHVhbEhlaWdodCA8IDAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdyaWdodCcgICYmIHBvcy5yaWdodCArIGFjdHVhbFdpZHRoID4gcGFyZW50V2lkdGggICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdsZWZ0JyAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgIC0gYWN0dWFsV2lkdGggPCBwYXJlbnRMZWZ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudDtcblxuICAgICAgICAgICAgICAgICR0aXBcbiAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpXG4gICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCk7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoY2FsY3VsYXRlZE9mZnNldCwgcGxhY2VtZW50KTsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSkuY2FsbCh0aGlzLmNvbnRhaW5lcigpKTtcbiAgICAgICAgICAvKmpzaGludCBsYXhjb21tYTogZmFsc2UsIGVxZXFlcTogdHJ1ZSovICBcbiAgICAgICAgfSAgICAgICAgICAgIFxuICAgIH0pO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBib290c3RyYXAtZGF0ZXBpY2tlci5qc1xuICogaHR0cDovL3d3dy5leWVjb24ucm8vYm9vdHN0cmFwLWRhdGVwaWNrZXJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTIgU3RlZmFuIFBldHJlXG4gKiBJbXByb3ZlbWVudHMgYnkgQW5kcmV3IFJvd2xzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuKGZ1bmN0aW9uKCAkICkge1xuXG5cdGZ1bmN0aW9uIFVUQ0RhdGUoKXtcblx0XHRyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYXJndW1lbnRzKSk7XG5cdH1cblx0ZnVuY3Rpb24gVVRDVG9kYXkoKXtcblx0XHR2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuXHRcdHJldHVybiBVVENEYXRlKHRvZGF5LmdldFVUQ0Z1bGxZZWFyKCksIHRvZGF5LmdldFVUQ01vbnRoKCksIHRvZGF5LmdldFVUQ0RhdGUoKSk7XG5cdH1cblxuXHQvLyBQaWNrZXIgb2JqZWN0XG5cblx0dmFyIERhdGVwaWNrZXIgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0dGhpcy5fcHJvY2Vzc19vcHRpb25zKG9wdGlvbnMpO1xuXG5cdFx0dGhpcy5lbGVtZW50ID0gJChlbGVtZW50KTtcblx0XHR0aGlzLmlzSW5saW5lID0gZmFsc2U7XG5cdFx0dGhpcy5pc0lucHV0ID0gdGhpcy5lbGVtZW50LmlzKCdpbnB1dCcpO1xuXHRcdHRoaXMuY29tcG9uZW50ID0gdGhpcy5lbGVtZW50LmlzKCcuZGF0ZScpID8gdGhpcy5lbGVtZW50LmZpbmQoJy5hZGQtb24sIC5idG4nKSA6IGZhbHNlO1xuXHRcdHRoaXMuaGFzSW5wdXQgPSB0aGlzLmNvbXBvbmVudCAmJiB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS5sZW5ndGg7XG5cdFx0aWYodGhpcy5jb21wb25lbnQgJiYgdGhpcy5jb21wb25lbnQubGVuZ3RoID09PSAwKVxuXHRcdFx0dGhpcy5jb21wb25lbnQgPSBmYWxzZTtcblxuXHRcdHRoaXMucGlja2VyID0gJChEUEdsb2JhbC50ZW1wbGF0ZSk7XG5cdFx0dGhpcy5fYnVpbGRFdmVudHMoKTtcblx0XHR0aGlzLl9hdHRhY2hFdmVudHMoKTtcblxuXHRcdGlmKHRoaXMuaXNJbmxpbmUpIHtcblx0XHRcdHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLWlubGluZScpLmFwcGVuZFRvKHRoaXMuZWxlbWVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLWRyb3Bkb3duIGRyb3Bkb3duLW1lbnUnKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5vLnJ0bCl7XG5cdFx0XHR0aGlzLnBpY2tlci5hZGRDbGFzcygnZGF0ZXBpY2tlci1ydGwnKTtcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5wcmV2IGksIC5uZXh0IGknKVxuXHRcdFx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdpY29uLWFycm93LWxlZnQgaWNvbi1hcnJvdy1yaWdodCcpO1xuXHRcdH1cblxuXG5cdFx0dGhpcy52aWV3TW9kZSA9IHRoaXMuby5zdGFydFZpZXc7XG5cblx0XHRpZiAodGhpcy5vLmNhbGVuZGFyV2Vla3MpXG5cdFx0XHR0aGlzLnBpY2tlci5maW5kKCd0Zm9vdCB0aC50b2RheScpXG5cdFx0XHRcdFx0XHQuYXR0cignY29sc3BhbicsIGZ1bmN0aW9uKGksIHZhbCl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXJzZUludCh2YWwpICsgMTtcblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0dGhpcy5fYWxsb3dfdXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLnNldFN0YXJ0RGF0ZSh0aGlzLm8uc3RhcnREYXRlKTtcblx0XHR0aGlzLnNldEVuZERhdGUodGhpcy5vLmVuZERhdGUpO1xuXHRcdHRoaXMuc2V0RGF5c09mV2Vla0Rpc2FibGVkKHRoaXMuby5kYXlzT2ZXZWVrRGlzYWJsZWQpO1xuXG5cdFx0dGhpcy5maWxsRG93KCk7XG5cdFx0dGhpcy5maWxsTW9udGhzKCk7XG5cblx0XHR0aGlzLl9hbGxvd191cGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblx0XHR0aGlzLnNob3dNb2RlKCk7XG5cblx0XHRpZih0aGlzLmlzSW5saW5lKSB7XG5cdFx0XHR0aGlzLnNob3coKTtcblx0XHR9XG5cdH07XG5cblx0RGF0ZXBpY2tlci5wcm90b3R5cGUgPSB7XG5cdFx0Y29uc3RydWN0b3I6IERhdGVwaWNrZXIsXG5cblx0XHRfcHJvY2Vzc19vcHRpb25zOiBmdW5jdGlvbihvcHRzKXtcblx0XHRcdC8vIFN0b3JlIHJhdyBvcHRpb25zIGZvciByZWZlcmVuY2Vcblx0XHRcdHRoaXMuX28gPSAkLmV4dGVuZCh7fSwgdGhpcy5fbywgb3B0cyk7XG5cdFx0XHQvLyBQcm9jZXNzZWQgb3B0aW9uc1xuXHRcdFx0dmFyIG8gPSB0aGlzLm8gPSAkLmV4dGVuZCh7fSwgdGhpcy5fbyk7XG5cblx0XHRcdC8vIENoZWNrIGlmIFwiZGUtREVcIiBzdHlsZSBkYXRlIGlzIGF2YWlsYWJsZSwgaWYgbm90IGxhbmd1YWdlIHNob3VsZFxuXHRcdFx0Ly8gZmFsbGJhY2sgdG8gMiBsZXR0ZXIgY29kZSBlZyBcImRlXCJcblx0XHRcdHZhciBsYW5nID0gby5sYW5ndWFnZTtcblx0XHRcdGlmICghZGF0ZXNbbGFuZ10pIHtcblx0XHRcdFx0bGFuZyA9IGxhbmcuc3BsaXQoJy0nKVswXTtcblx0XHRcdFx0aWYgKCFkYXRlc1tsYW5nXSlcblx0XHRcdFx0XHRsYW5nID0gZGVmYXVsdHMubGFuZ3VhZ2U7XG5cdFx0XHR9XG5cdFx0XHRvLmxhbmd1YWdlID0gbGFuZztcblxuXHRcdFx0c3dpdGNoKG8uc3RhcnRWaWV3KXtcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRjYXNlICdkZWNhZGUnOlxuXHRcdFx0XHRcdG8uc3RhcnRWaWV3ID0gMjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRjYXNlICd5ZWFyJzpcblx0XHRcdFx0XHRvLnN0YXJ0VmlldyA9IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0by5zdGFydFZpZXcgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHRzd2l0Y2ggKG8ubWluVmlld01vZGUpIHtcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRjYXNlICdtb250aHMnOlxuXHRcdFx0XHRcdG8ubWluVmlld01vZGUgPSAxO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdGNhc2UgJ3llYXJzJzpcblx0XHRcdFx0XHRvLm1pblZpZXdNb2RlID0gMjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRvLm1pblZpZXdNb2RlID0gMDtcblx0XHRcdH1cblxuXHRcdFx0by5zdGFydFZpZXcgPSBNYXRoLm1heChvLnN0YXJ0Vmlldywgby5taW5WaWV3TW9kZSk7XG5cblx0XHRcdG8ud2Vla1N0YXJ0ICU9IDc7XG5cdFx0XHRvLndlZWtFbmQgPSAoKG8ud2Vla1N0YXJ0ICsgNikgJSA3KTtcblxuXHRcdFx0dmFyIGZvcm1hdCA9IERQR2xvYmFsLnBhcnNlRm9ybWF0KG8uZm9ybWF0KVxuXHRcdFx0aWYgKG8uc3RhcnREYXRlICE9PSAtSW5maW5pdHkpIHtcblx0XHRcdFx0by5zdGFydERhdGUgPSBEUEdsb2JhbC5wYXJzZURhdGUoby5zdGFydERhdGUsIGZvcm1hdCwgby5sYW5ndWFnZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoby5lbmREYXRlICE9PSBJbmZpbml0eSkge1xuXHRcdFx0XHRvLmVuZERhdGUgPSBEUEdsb2JhbC5wYXJzZURhdGUoby5lbmREYXRlLCBmb3JtYXQsIG8ubGFuZ3VhZ2UpO1xuXHRcdFx0fVxuXG5cdFx0XHRvLmRheXNPZldlZWtEaXNhYmxlZCA9IG8uZGF5c09mV2Vla0Rpc2FibGVkfHxbXTtcblx0XHRcdGlmICghJC5pc0FycmF5KG8uZGF5c09mV2Vla0Rpc2FibGVkKSlcblx0XHRcdFx0by5kYXlzT2ZXZWVrRGlzYWJsZWQgPSBvLmRheXNPZldlZWtEaXNhYmxlZC5zcGxpdCgvWyxcXHNdKi8pO1xuXHRcdFx0by5kYXlzT2ZXZWVrRGlzYWJsZWQgPSAkLm1hcChvLmRheXNPZldlZWtEaXNhYmxlZCwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KGQsIDEwKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0X2V2ZW50czogW10sXG5cdFx0X3NlY29uZGFyeUV2ZW50czogW10sXG5cdFx0X2FwcGx5RXZlbnRzOiBmdW5jdGlvbihldnMpe1xuXHRcdFx0Zm9yICh2YXIgaT0wLCBlbCwgZXY7IGk8ZXZzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0ZWwgPSBldnNbaV1bMF07XG5cdFx0XHRcdGV2ID0gZXZzW2ldWzFdO1xuXHRcdFx0XHRlbC5vbihldik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdW5hcHBseUV2ZW50czogZnVuY3Rpb24oZXZzKXtcblx0XHRcdGZvciAodmFyIGk9MCwgZWwsIGV2OyBpPGV2cy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdGVsID0gZXZzW2ldWzBdO1xuXHRcdFx0XHRldiA9IGV2c1tpXVsxXTtcblx0XHRcdFx0ZWwub2ZmKGV2KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9idWlsZEV2ZW50czogZnVuY3Rpb24oKXtcblx0XHRcdGlmICh0aGlzLmlzSW5wdXQpIHsgLy8gc2luZ2xlIGlucHV0XG5cdFx0XHRcdHRoaXMuX2V2ZW50cyA9IFtcblx0XHRcdFx0XHRbdGhpcy5lbGVtZW50LCB7XG5cdFx0XHRcdFx0XHRmb2N1czogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpLFxuXHRcdFx0XHRcdFx0a2V5dXA6ICQucHJveHkodGhpcy51cGRhdGUsIHRoaXMpLFxuXHRcdFx0XHRcdFx0a2V5ZG93bjogJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpXG5cdFx0XHRcdFx0fV1cblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHRoaXMuY29tcG9uZW50ICYmIHRoaXMuaGFzSW5wdXQpeyAvLyBjb21wb25lbnQ6IGlucHV0ICsgYnV0dG9uXG5cdFx0XHRcdHRoaXMuX2V2ZW50cyA9IFtcblx0XHRcdFx0XHQvLyBGb3IgY29tcG9uZW50cyB0aGF0IGFyZSBub3QgcmVhZG9ubHksIGFsbG93IGtleWJvYXJkIG5hdlxuXHRcdFx0XHRcdFt0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKSwge1xuXHRcdFx0XHRcdFx0Zm9jdXM6ICQucHJveHkodGhpcy5zaG93LCB0aGlzKSxcblx0XHRcdFx0XHRcdGtleXVwOiAkLnByb3h5KHRoaXMudXBkYXRlLCB0aGlzKSxcblx0XHRcdFx0XHRcdGtleWRvd246ICQucHJveHkodGhpcy5rZXlkb3duLCB0aGlzKVxuXHRcdFx0XHRcdH1dLFxuXHRcdFx0XHRcdFt0aGlzLmNvbXBvbmVudCwge1xuXHRcdFx0XHRcdFx0Y2xpY2s6ICQucHJveHkodGhpcy5zaG93LCB0aGlzKVxuXHRcdFx0XHRcdH1dXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICh0aGlzLmVsZW1lbnQuaXMoJ2RpdicpKSB7ICAvLyBpbmxpbmUgZGF0ZXBpY2tlclxuXHRcdFx0XHR0aGlzLmlzSW5saW5lID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9ldmVudHMgPSBbXG5cdFx0XHRcdFx0W3RoaXMuZWxlbWVudCwge1xuXHRcdFx0XHRcdFx0Y2xpY2s6ICQucHJveHkodGhpcy5zaG93LCB0aGlzKVxuXHRcdFx0XHRcdH1dXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3NlY29uZGFyeUV2ZW50cyA9IFtcblx0XHRcdFx0W3RoaXMucGlja2VyLCB7XG5cdFx0XHRcdFx0Y2xpY2s6ICQucHJveHkodGhpcy5jbGljaywgdGhpcylcblx0XHRcdFx0fV0sXG5cdFx0XHRcdFskKHdpbmRvdyksIHtcblx0XHRcdFx0XHRyZXNpemU6ICQucHJveHkodGhpcy5wbGFjZSwgdGhpcylcblx0XHRcdFx0fV0sXG5cdFx0XHRcdFskKGRvY3VtZW50KSwge1xuXHRcdFx0XHRcdG1vdXNlZG93bjogJC5wcm94eShmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdFx0Ly8gQ2xpY2tlZCBvdXRzaWRlIHRoZSBkYXRlcGlja2VyLCBoaWRlIGl0XG5cdFx0XHRcdFx0XHRpZiAoIShcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LmlzKGUudGFyZ2V0KSB8fFxuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuZmluZChlLnRhcmdldCkuc2l6ZSgpIHx8XG5cdFx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmlzKGUudGFyZ2V0KSB8fFxuXHRcdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKGUudGFyZ2V0KS5zaXplKClcblx0XHRcdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgdGhpcylcblx0XHRcdFx0fV1cblx0XHRcdF07XG5cdFx0fSxcblx0XHRfYXR0YWNoRXZlbnRzOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5fZGV0YWNoRXZlbnRzKCk7XG5cdFx0XHR0aGlzLl9hcHBseUV2ZW50cyh0aGlzLl9ldmVudHMpO1xuXHRcdH0sXG5cdFx0X2RldGFjaEV2ZW50czogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuX3VuYXBwbHlFdmVudHModGhpcy5fZXZlbnRzKTtcblx0XHR9LFxuXHRcdF9hdHRhY2hTZWNvbmRhcnlFdmVudHM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLl9kZXRhY2hTZWNvbmRhcnlFdmVudHMoKTtcblx0XHRcdHRoaXMuX2FwcGx5RXZlbnRzKHRoaXMuX3NlY29uZGFyeUV2ZW50cyk7XG5cdFx0fSxcblx0XHRfZGV0YWNoU2Vjb25kYXJ5RXZlbnRzOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5fdW5hcHBseUV2ZW50cyh0aGlzLl9zZWNvbmRhcnlFdmVudHMpO1xuXHRcdH0sXG5cdFx0X3RyaWdnZXI6IGZ1bmN0aW9uKGV2ZW50LCBhbHRkYXRlKXtcblx0XHRcdHZhciBkYXRlID0gYWx0ZGF0ZSB8fCB0aGlzLmRhdGUsXG5cdFx0XHRcdGxvY2FsX2RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSArIChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkqNjAwMDApKTtcblxuXHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoe1xuXHRcdFx0XHR0eXBlOiBldmVudCxcblx0XHRcdFx0ZGF0ZTogbG9jYWxfZGF0ZSxcblx0XHRcdFx0Zm9ybWF0OiAkLnByb3h5KGZ1bmN0aW9uKGFsdGZvcm1hdCl7XG5cdFx0XHRcdFx0dmFyIGZvcm1hdCA9IGFsdGZvcm1hdCB8fCB0aGlzLm8uZm9ybWF0O1xuXHRcdFx0XHRcdHJldHVybiBEUEdsb2JhbC5mb3JtYXREYXRlKGRhdGUsIGZvcm1hdCwgdGhpcy5vLmxhbmd1YWdlKTtcblx0XHRcdFx0fSwgdGhpcylcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRzaG93OiBmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoIXRoaXMuaXNJbmxpbmUpXG5cdFx0XHRcdHRoaXMucGlja2VyLmFwcGVuZFRvKCdib2R5Jyk7XG5cdFx0XHR0aGlzLnBpY2tlci5zaG93KCk7XG5cdFx0XHR0aGlzLmhlaWdodCA9IHRoaXMuY29tcG9uZW50ID8gdGhpcy5jb21wb25lbnQub3V0ZXJIZWlnaHQoKSA6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpO1xuXHRcdFx0dGhpcy5wbGFjZSgpO1xuXHRcdFx0dGhpcy5fYXR0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XG5cdFx0XHRpZiAoZSkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCdzaG93Jyk7XG5cdFx0fSxcblxuXHRcdGhpZGU6IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aWYodGhpcy5pc0lubGluZSkgcmV0dXJuO1xuXHRcdFx0aWYgKCF0aGlzLnBpY2tlci5pcygnOnZpc2libGUnKSkgcmV0dXJuO1xuXHRcdFx0dGhpcy5waWNrZXIuaGlkZSgpLmRldGFjaCgpO1xuXHRcdFx0dGhpcy5fZGV0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XG5cdFx0XHR0aGlzLnZpZXdNb2RlID0gdGhpcy5vLnN0YXJ0Vmlldztcblx0XHRcdHRoaXMuc2hvd01vZGUoKTtcblxuXHRcdFx0aWYgKFxuXHRcdFx0XHR0aGlzLm8uZm9yY2VQYXJzZSAmJlxuXHRcdFx0XHQoXG5cdFx0XHRcdFx0dGhpcy5pc0lucHV0ICYmIHRoaXMuZWxlbWVudC52YWwoKSB8fFxuXHRcdFx0XHRcdHRoaXMuaGFzSW5wdXQgJiYgdGhpcy5lbGVtZW50LmZpbmQoJ2lucHV0JykudmFsKClcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdFx0XHR0aGlzLnNldFZhbHVlKCk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCdoaWRlJyk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHRcdHRoaXMuX2RldGFjaEV2ZW50cygpO1xuXHRcdFx0dGhpcy5fZGV0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XG5cdFx0XHR0aGlzLnBpY2tlci5yZW1vdmUoKTtcblx0XHRcdGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0YSgpLmRhdGVwaWNrZXI7XG5cdFx0XHRpZiAoIXRoaXMuaXNJbnB1dCkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRnZXREYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkID0gdGhpcy5nZXRVVENEYXRlKCk7XG5cdFx0XHRyZXR1cm4gbmV3IERhdGUoZC5nZXRUaW1lKCkgKyAoZC5nZXRUaW1lem9uZU9mZnNldCgpKjYwMDAwKSk7XG5cdFx0fSxcblxuXHRcdGdldFVUQ0RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGF0ZTtcblx0XHR9LFxuXG5cdFx0c2V0RGF0ZTogZnVuY3Rpb24oZCkge1xuXHRcdFx0dGhpcy5zZXRVVENEYXRlKG5ldyBEYXRlKGQuZ2V0VGltZSgpIC0gKGQuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MDAwMCkpKTtcblx0XHR9LFxuXG5cdFx0c2V0VVRDRGF0ZTogZnVuY3Rpb24oZCkge1xuXHRcdFx0dGhpcy5kYXRlID0gZDtcblx0XHRcdHRoaXMuc2V0VmFsdWUoKTtcblx0XHR9LFxuXG5cdFx0c2V0VmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGZvcm1hdHRlZCA9IHRoaXMuZ2V0Rm9ybWF0dGVkRGF0ZSgpO1xuXHRcdFx0aWYgKCF0aGlzLmlzSW5wdXQpIHtcblx0XHRcdFx0aWYgKHRoaXMuY29tcG9uZW50KXtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS52YWwoZm9ybWF0dGVkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnZhbChmb3JtYXR0ZWQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRnZXRGb3JtYXR0ZWREYXRlOiBmdW5jdGlvbihmb3JtYXQpIHtcblx0XHRcdGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZClcblx0XHRcdFx0Zm9ybWF0ID0gdGhpcy5vLmZvcm1hdDtcblx0XHRcdHJldHVybiBEUEdsb2JhbC5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgZm9ybWF0LCB0aGlzLm8ubGFuZ3VhZ2UpO1xuXHRcdH0sXG5cblx0XHRzZXRTdGFydERhdGU6IGZ1bmN0aW9uKHN0YXJ0RGF0ZSl7XG5cdFx0XHR0aGlzLl9wcm9jZXNzX29wdGlvbnMoe3N0YXJ0RGF0ZTogc3RhcnREYXRlfSk7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0dGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcblx0XHR9LFxuXG5cdFx0c2V0RW5kRGF0ZTogZnVuY3Rpb24oZW5kRGF0ZSl7XG5cdFx0XHR0aGlzLl9wcm9jZXNzX29wdGlvbnMoe2VuZERhdGU6IGVuZERhdGV9KTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuXHRcdH0sXG5cblx0XHRzZXREYXlzT2ZXZWVrRGlzYWJsZWQ6IGZ1bmN0aW9uKGRheXNPZldlZWtEaXNhYmxlZCl7XG5cdFx0XHR0aGlzLl9wcm9jZXNzX29wdGlvbnMoe2RheXNPZldlZWtEaXNhYmxlZDogZGF5c09mV2Vla0Rpc2FibGVkfSk7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0dGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcblx0XHR9LFxuXG5cdFx0cGxhY2U6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZih0aGlzLmlzSW5saW5lKSByZXR1cm47XG5cdFx0XHR2YXIgekluZGV4ID0gcGFyc2VJbnQodGhpcy5lbGVtZW50LnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAkKHRoaXMpLmNzcygnei1pbmRleCcpICE9ICdhdXRvJztcblx0XHRcdFx0XHRcdH0pLmZpcnN0KCkuY3NzKCd6LWluZGV4JykpKzEwO1xuXHRcdFx0dmFyIG9mZnNldCA9IHRoaXMuY29tcG9uZW50ID8gdGhpcy5jb21wb25lbnQucGFyZW50KCkub2Zmc2V0KCkgOiB0aGlzLmVsZW1lbnQub2Zmc2V0KCk7XG5cdFx0XHR2YXIgaGVpZ2h0ID0gdGhpcy5jb21wb25lbnQgPyB0aGlzLmNvbXBvbmVudC5vdXRlckhlaWdodCh0cnVlKSA6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCh0cnVlKTtcblx0XHRcdHRoaXMucGlja2VyLmNzcyh7XG5cdFx0XHRcdHRvcDogb2Zmc2V0LnRvcCArIGhlaWdodCxcblx0XHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQsXG5cdFx0XHRcdHpJbmRleDogekluZGV4XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0X2FsbG93X3VwZGF0ZTogdHJ1ZSxcblx0XHR1cGRhdGU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZiAoIXRoaXMuX2FsbG93X3VwZGF0ZSkgcmV0dXJuO1xuXG5cdFx0XHR2YXIgZGF0ZSwgZnJvbUFyZ3MgPSBmYWxzZTtcblx0XHRcdGlmKGFyZ3VtZW50cyAmJiBhcmd1bWVudHMubGVuZ3RoICYmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnc3RyaW5nJyB8fCBhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBEYXRlKSkge1xuXHRcdFx0XHRkYXRlID0gYXJndW1lbnRzWzBdO1xuXHRcdFx0XHRmcm9tQXJncyA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRlID0gdGhpcy5pc0lucHV0ID8gdGhpcy5lbGVtZW50LnZhbCgpIDogdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUnKSB8fCB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS52YWwoKTtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRhKCkuZGF0ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kYXRlID0gRFBHbG9iYWwucGFyc2VEYXRlKGRhdGUsIHRoaXMuby5mb3JtYXQsIHRoaXMuby5sYW5ndWFnZSk7XG5cblx0XHRcdGlmKGZyb21BcmdzKSB0aGlzLnNldFZhbHVlKCk7XG5cblx0XHRcdGlmICh0aGlzLmRhdGUgPCB0aGlzLm8uc3RhcnREYXRlKSB7XG5cdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLm8uc3RhcnREYXRlKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5kYXRlID4gdGhpcy5vLmVuZERhdGUpIHtcblx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuby5lbmREYXRlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5maWxsKCk7XG5cdFx0fSxcblxuXHRcdGZpbGxEb3c6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgZG93Q250ID0gdGhpcy5vLndlZWtTdGFydCxcblx0XHRcdGh0bWwgPSAnPHRyPic7XG5cdFx0XHRpZih0aGlzLm8uY2FsZW5kYXJXZWVrcyl7XG5cdFx0XHRcdHZhciBjZWxsID0gJzx0aCBjbGFzcz1cImN3XCI+Jm5ic3A7PC90aD4nO1xuXHRcdFx0XHRodG1sICs9IGNlbGw7XG5cdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQgdHI6Zmlyc3QtY2hpbGQnKS5wcmVwZW5kKGNlbGwpO1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKGRvd0NudCA8IHRoaXMuby53ZWVrU3RhcnQgKyA3KSB7XG5cdFx0XHRcdGh0bWwgKz0gJzx0aCBjbGFzcz1cImRvd1wiPicrZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5kYXlzTWluWyhkb3dDbnQrKyklN10rJzwvdGg+Jztcblx0XHRcdH1cblx0XHRcdGh0bWwgKz0gJzwvdHI+Jztcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQnKS5hcHBlbmQoaHRtbCk7XG5cdFx0fSxcblxuXHRcdGZpbGxNb250aHM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgaHRtbCA9ICcnLFxuXHRcdFx0aSA9IDA7XG5cdFx0XHR3aGlsZSAoaSA8IDEyKSB7XG5cdFx0XHRcdGh0bWwgKz0gJzxzcGFuIGNsYXNzPVwibW9udGhcIj4nK2RhdGVzW3RoaXMuby5sYW5ndWFnZV0ubW9udGhzU2hvcnRbaSsrXSsnPC9zcGFuPic7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1tb250aHMgdGQnKS5odG1sKGh0bWwpO1xuXHRcdH0sXG5cblx0XHRzZXRSYW5nZTogZnVuY3Rpb24ocmFuZ2Upe1xuXHRcdFx0aWYgKCFyYW5nZSB8fCAhcmFuZ2UubGVuZ3RoKVxuXHRcdFx0XHRkZWxldGUgdGhpcy5yYW5nZTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0dGhpcy5yYW5nZSA9ICQubWFwKHJhbmdlLCBmdW5jdGlvbihkKXsgcmV0dXJuIGQudmFsdWVPZigpOyB9KTtcblx0XHRcdHRoaXMuZmlsbCgpO1xuXHRcdH0sXG5cblx0XHRnZXRDbGFzc05hbWVzOiBmdW5jdGlvbihkYXRlKXtcblx0XHRcdHZhciBjbHMgPSBbXSxcblx0XHRcdFx0eWVhciA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKSxcblx0XHRcdFx0bW9udGggPSB0aGlzLnZpZXdEYXRlLmdldFVUQ01vbnRoKCksXG5cdFx0XHRcdGN1cnJlbnREYXRlID0gdGhpcy5kYXRlLnZhbHVlT2YoKSxcblx0XHRcdFx0dG9kYXkgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0aWYgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA8IHllYXIgfHwgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA9PSB5ZWFyICYmIGRhdGUuZ2V0VVRDTW9udGgoKSA8IG1vbnRoKSkge1xuXHRcdFx0XHRjbHMucHVzaCgnb2xkJyk7XG5cdFx0XHR9IGVsc2UgaWYgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IHllYXIgfHwgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA9PSB5ZWFyICYmIGRhdGUuZ2V0VVRDTW9udGgoKSA+IG1vbnRoKSkge1xuXHRcdFx0XHRjbHMucHVzaCgnbmV3Jyk7XG5cdFx0XHR9XG5cdFx0XHQvLyBDb21wYXJlIGludGVybmFsIFVUQyBkYXRlIHdpdGggbG9jYWwgdG9kYXksIG5vdCBVVEMgdG9kYXlcblx0XHRcdGlmICh0aGlzLm8udG9kYXlIaWdobGlnaHQgJiZcblx0XHRcdFx0ZGF0ZS5nZXRVVENGdWxsWWVhcigpID09IHRvZGF5LmdldEZ1bGxZZWFyKCkgJiZcblx0XHRcdFx0ZGF0ZS5nZXRVVENNb250aCgpID09IHRvZGF5LmdldE1vbnRoKCkgJiZcblx0XHRcdFx0ZGF0ZS5nZXRVVENEYXRlKCkgPT0gdG9kYXkuZ2V0RGF0ZSgpKSB7XG5cdFx0XHRcdGNscy5wdXNoKCd0b2RheScpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGN1cnJlbnREYXRlICYmIGRhdGUudmFsdWVPZigpID09IGN1cnJlbnREYXRlKSB7XG5cdFx0XHRcdGNscy5wdXNoKCdhY3RpdmUnKTtcblx0XHRcdH1cblx0XHRcdGlmIChkYXRlLnZhbHVlT2YoKSA8IHRoaXMuby5zdGFydERhdGUgfHwgZGF0ZS52YWx1ZU9mKCkgPiB0aGlzLm8uZW5kRGF0ZSB8fFxuXHRcdFx0XHQkLmluQXJyYXkoZGF0ZS5nZXRVVENEYXkoKSwgdGhpcy5vLmRheXNPZldlZWtEaXNhYmxlZCkgIT09IC0xKSB7XG5cdFx0XHRcdGNscy5wdXNoKCdkaXNhYmxlZCcpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMucmFuZ2Upe1xuXHRcdFx0XHRpZiAoZGF0ZSA+IHRoaXMucmFuZ2VbMF0gJiYgZGF0ZSA8IHRoaXMucmFuZ2VbdGhpcy5yYW5nZS5sZW5ndGgtMV0pe1xuXHRcdFx0XHRcdGNscy5wdXNoKCdyYW5nZScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICgkLmluQXJyYXkoZGF0ZS52YWx1ZU9mKCksIHRoaXMucmFuZ2UpICE9IC0xKXtcblx0XHRcdFx0XHRjbHMucHVzaCgnc2VsZWN0ZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNscztcblx0XHR9LFxuXG5cdFx0ZmlsbDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZCA9IG5ldyBEYXRlKHRoaXMudmlld0RhdGUpLFxuXHRcdFx0XHR5ZWFyID0gZC5nZXRVVENGdWxsWWVhcigpLFxuXHRcdFx0XHRtb250aCA9IGQuZ2V0VVRDTW9udGgoKSxcblx0XHRcdFx0c3RhcnRZZWFyID0gdGhpcy5vLnN0YXJ0RGF0ZSAhPT0gLUluZmluaXR5ID8gdGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENGdWxsWWVhcigpIDogLUluZmluaXR5LFxuXHRcdFx0XHRzdGFydE1vbnRoID0gdGhpcy5vLnN0YXJ0RGF0ZSAhPT0gLUluZmluaXR5ID8gdGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENNb250aCgpIDogLUluZmluaXR5LFxuXHRcdFx0XHRlbmRZZWFyID0gdGhpcy5vLmVuZERhdGUgIT09IEluZmluaXR5ID8gdGhpcy5vLmVuZERhdGUuZ2V0VVRDRnVsbFllYXIoKSA6IEluZmluaXR5LFxuXHRcdFx0XHRlbmRNb250aCA9IHRoaXMuby5lbmREYXRlICE9PSBJbmZpbml0eSA/IHRoaXMuby5lbmREYXRlLmdldFVUQ01vbnRoKCkgOiBJbmZpbml0eSxcblx0XHRcdFx0Y3VycmVudERhdGUgPSB0aGlzLmRhdGUgJiYgdGhpcy5kYXRlLnZhbHVlT2YoKSxcblx0XHRcdFx0dG9vbHRpcDtcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQgdGguZGF0ZXBpY2tlci1zd2l0Y2gnKVxuXHRcdFx0XHRcdFx0LnRleHQoZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5tb250aHNbbW9udGhdKycgJyt5ZWFyKTtcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJ3Rmb290IHRoLnRvZGF5Jylcblx0XHRcdFx0XHRcdC50ZXh0KGRhdGVzW3RoaXMuby5sYW5ndWFnZV0udG9kYXkpXG5cdFx0XHRcdFx0XHQudG9nZ2xlKHRoaXMuby50b2RheUJ0biAhPT0gZmFsc2UpO1xuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgndGZvb3QgdGguY2xlYXInKVxuXHRcdFx0XHRcdFx0LnRleHQoZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5jbGVhcilcblx0XHRcdFx0XHRcdC50b2dnbGUodGhpcy5vLmNsZWFyQnRuICE9PSBmYWxzZSk7XG5cdFx0XHR0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuXHRcdFx0dGhpcy5maWxsTW9udGhzKCk7XG5cdFx0XHR2YXIgcHJldk1vbnRoID0gVVRDRGF0ZSh5ZWFyLCBtb250aC0xLCAyOCwwLDAsMCwwKSxcblx0XHRcdFx0ZGF5ID0gRFBHbG9iYWwuZ2V0RGF5c0luTW9udGgocHJldk1vbnRoLmdldFVUQ0Z1bGxZZWFyKCksIHByZXZNb250aC5nZXRVVENNb250aCgpKTtcblx0XHRcdHByZXZNb250aC5zZXRVVENEYXRlKGRheSk7XG5cdFx0XHRwcmV2TW9udGguc2V0VVRDRGF0ZShkYXkgLSAocHJldk1vbnRoLmdldFVUQ0RheSgpIC0gdGhpcy5vLndlZWtTdGFydCArIDcpJTcpO1xuXHRcdFx0dmFyIG5leHRNb250aCA9IG5ldyBEYXRlKHByZXZNb250aCk7XG5cdFx0XHRuZXh0TW9udGguc2V0VVRDRGF0ZShuZXh0TW9udGguZ2V0VVRDRGF0ZSgpICsgNDIpO1xuXHRcdFx0bmV4dE1vbnRoID0gbmV4dE1vbnRoLnZhbHVlT2YoKTtcblx0XHRcdHZhciBodG1sID0gW107XG5cdFx0XHR2YXIgY2xzTmFtZTtcblx0XHRcdHdoaWxlKHByZXZNb250aC52YWx1ZU9mKCkgPCBuZXh0TW9udGgpIHtcblx0XHRcdFx0aWYgKHByZXZNb250aC5nZXRVVENEYXkoKSA9PSB0aGlzLm8ud2Vla1N0YXJ0KSB7XG5cdFx0XHRcdFx0aHRtbC5wdXNoKCc8dHI+Jyk7XG5cdFx0XHRcdFx0aWYodGhpcy5vLmNhbGVuZGFyV2Vla3Mpe1xuXHRcdFx0XHRcdFx0Ly8gSVNPIDg2MDE6IEZpcnN0IHdlZWsgY29udGFpbnMgZmlyc3QgdGh1cnNkYXkuXG5cdFx0XHRcdFx0XHQvLyBJU08gYWxzbyBzdGF0ZXMgd2VlayBzdGFydHMgb24gTW9uZGF5LCBidXQgd2UgY2FuIGJlIG1vcmUgYWJzdHJhY3QgaGVyZS5cblx0XHRcdFx0XHRcdHZhclxuXHRcdFx0XHRcdFx0XHQvLyBTdGFydCBvZiBjdXJyZW50IHdlZWs6IGJhc2VkIG9uIHdlZWtzdGFydC9jdXJyZW50IGRhdGVcblx0XHRcdFx0XHRcdFx0d3MgPSBuZXcgRGF0ZSgrcHJldk1vbnRoICsgKHRoaXMuby53ZWVrU3RhcnQgLSBwcmV2TW9udGguZ2V0VVRDRGF5KCkgLSA3KSAlIDcgKiA4NjRlNSksXG5cdFx0XHRcdFx0XHRcdC8vIFRodXJzZGF5IG9mIHRoaXMgd2Vla1xuXHRcdFx0XHRcdFx0XHR0aCA9IG5ldyBEYXRlKCt3cyArICg3ICsgNCAtIHdzLmdldFVUQ0RheSgpKSAlIDcgKiA4NjRlNSksXG5cdFx0XHRcdFx0XHRcdC8vIEZpcnN0IFRodXJzZGF5IG9mIHllYXIsIHllYXIgZnJvbSB0aHVyc2RheVxuXHRcdFx0XHRcdFx0XHR5dGggPSBuZXcgRGF0ZSgrKHl0aCA9IFVUQ0RhdGUodGguZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSkpICsgKDcgKyA0IC0geXRoLmdldFVUQ0RheSgpKSU3Kjg2NGU1KSxcblx0XHRcdFx0XHRcdFx0Ly8gQ2FsZW5kYXIgd2VlazogbXMgYmV0d2VlbiB0aHVyc2RheXMsIGRpdiBtcyBwZXIgZGF5LCBkaXYgNyBkYXlzXG5cdFx0XHRcdFx0XHRcdGNhbFdlZWsgPSAgKHRoIC0geXRoKSAvIDg2NGU1IC8gNyArIDE7XG5cdFx0XHRcdFx0XHRodG1sLnB1c2goJzx0ZCBjbGFzcz1cImN3XCI+JysgY2FsV2VlayArJzwvdGQ+Jyk7XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2xzTmFtZSA9IHRoaXMuZ2V0Q2xhc3NOYW1lcyhwcmV2TW9udGgpO1xuXHRcdFx0XHRjbHNOYW1lLnB1c2goJ2RheScpO1xuXG5cdFx0XHRcdHZhciBiZWZvcmUgPSB0aGlzLm8uYmVmb3JlU2hvd0RheShwcmV2TW9udGgpO1xuXHRcdFx0XHRpZiAoYmVmb3JlID09PSB1bmRlZmluZWQpXG5cdFx0XHRcdFx0YmVmb3JlID0ge307XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVvZihiZWZvcmUpID09PSAnYm9vbGVhbicpXG5cdFx0XHRcdFx0YmVmb3JlID0ge2VuYWJsZWQ6IGJlZm9yZX07XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVvZihiZWZvcmUpID09PSAnc3RyaW5nJylcblx0XHRcdFx0XHRiZWZvcmUgPSB7Y2xhc3NlczogYmVmb3JlfTtcblx0XHRcdFx0aWYgKGJlZm9yZS5lbmFibGVkID09PSBmYWxzZSlcblx0XHRcdFx0XHRjbHNOYW1lLnB1c2goJ2Rpc2FibGVkJyk7XG5cdFx0XHRcdGlmIChiZWZvcmUuY2xhc3Nlcylcblx0XHRcdFx0XHRjbHNOYW1lID0gY2xzTmFtZS5jb25jYXQoYmVmb3JlLmNsYXNzZXMuc3BsaXQoL1xccysvKSk7XG5cdFx0XHRcdGlmIChiZWZvcmUudG9vbHRpcClcblx0XHRcdFx0XHR0b29sdGlwID0gYmVmb3JlLnRvb2x0aXA7XG5cblx0XHRcdFx0Y2xzTmFtZSA9ICQudW5pcXVlKGNsc05hbWUpO1xuXHRcdFx0XHRodG1sLnB1c2goJzx0ZCBjbGFzcz1cIicrY2xzTmFtZS5qb2luKCcgJykrJ1wiJyArICh0b29sdGlwID8gJyB0aXRsZT1cIicrdG9vbHRpcCsnXCInIDogJycpICsgJz4nK3ByZXZNb250aC5nZXRVVENEYXRlKCkgKyAnPC90ZD4nKTtcblx0XHRcdFx0aWYgKHByZXZNb250aC5nZXRVVENEYXkoKSA9PSB0aGlzLm8ud2Vla0VuZCkge1xuXHRcdFx0XHRcdGh0bWwucHVzaCgnPC90cj4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwcmV2TW9udGguc2V0VVRDRGF0ZShwcmV2TW9udGguZ2V0VVRDRGF0ZSgpKzEpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0Ym9keScpLmVtcHR5KCkuYXBwZW5kKGh0bWwuam9pbignJykpO1xuXHRcdFx0dmFyIGN1cnJlbnRZZWFyID0gdGhpcy5kYXRlICYmIHRoaXMuZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuXG5cdFx0XHR2YXIgbW9udGhzID0gdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItbW9udGhzJylcblx0XHRcdFx0XHRcdC5maW5kKCd0aDplcSgxKScpXG5cdFx0XHRcdFx0XHRcdC50ZXh0KHllYXIpXG5cdFx0XHRcdFx0XHRcdC5lbmQoKVxuXHRcdFx0XHRcdFx0LmZpbmQoJ3NwYW4nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRpZiAoY3VycmVudFllYXIgJiYgY3VycmVudFllYXIgPT0geWVhcikge1xuXHRcdFx0XHRtb250aHMuZXEodGhpcy5kYXRlLmdldFVUQ01vbnRoKCkpLmFkZENsYXNzKCdhY3RpdmUnKTtcblx0XHRcdH1cblx0XHRcdGlmICh5ZWFyIDwgc3RhcnRZZWFyIHx8IHllYXIgPiBlbmRZZWFyKSB7XG5cdFx0XHRcdG1vbnRocy5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdH1cblx0XHRcdGlmICh5ZWFyID09IHN0YXJ0WWVhcikge1xuXHRcdFx0XHRtb250aHMuc2xpY2UoMCwgc3RhcnRNb250aCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoeWVhciA9PSBlbmRZZWFyKSB7XG5cdFx0XHRcdG1vbnRocy5zbGljZShlbmRNb250aCsxKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdH1cblxuXHRcdFx0aHRtbCA9ICcnO1xuXHRcdFx0eWVhciA9IHBhcnNlSW50KHllYXIvMTAsIDEwKSAqIDEwO1xuXHRcdFx0dmFyIHllYXJDb250ID0gdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXIteWVhcnMnKVxuXHRcdFx0XHRcdFx0XHRcdC5maW5kKCd0aDplcSgxKScpXG5cdFx0XHRcdFx0XHRcdFx0XHQudGV4dCh5ZWFyICsgJy0nICsgKHllYXIgKyA5KSlcblx0XHRcdFx0XHRcdFx0XHRcdC5lbmQoKVxuXHRcdFx0XHRcdFx0XHRcdC5maW5kKCd0ZCcpO1xuXHRcdFx0eWVhciAtPSAxO1xuXHRcdFx0Zm9yICh2YXIgaSA9IC0xOyBpIDwgMTE7IGkrKykge1xuXHRcdFx0XHRodG1sICs9ICc8c3BhbiBjbGFzcz1cInllYXInKyhpID09IC0xID8gJyBvbGQnIDogaSA9PSAxMCA/ICcgbmV3JyA6ICcnKSsoY3VycmVudFllYXIgPT0geWVhciA/ICcgYWN0aXZlJyA6ICcnKSsoeWVhciA8IHN0YXJ0WWVhciB8fCB5ZWFyID4gZW5kWWVhciA/ICcgZGlzYWJsZWQnIDogJycpKydcIj4nK3llYXIrJzwvc3Bhbj4nO1xuXHRcdFx0XHR5ZWFyICs9IDE7XG5cdFx0XHR9XG5cdFx0XHR5ZWFyQ29udC5odG1sKGh0bWwpO1xuXHRcdH0sXG5cblx0XHR1cGRhdGVOYXZBcnJvd3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCF0aGlzLl9hbGxvd191cGRhdGUpIHJldHVybjtcblxuXHRcdFx0dmFyIGQgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKSxcblx0XHRcdFx0eWVhciA9IGQuZ2V0VVRDRnVsbFllYXIoKSxcblx0XHRcdFx0bW9udGggPSBkLmdldFVUQ01vbnRoKCk7XG5cdFx0XHRzd2l0Y2ggKHRoaXMudmlld01vZGUpIHtcblx0XHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRcdGlmICh0aGlzLm8uc3RhcnREYXRlICE9PSAtSW5maW5pdHkgJiYgeWVhciA8PSB0aGlzLm8uc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKCkgJiYgbW9udGggPD0gdGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENNb250aCgpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcucHJldicpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5vLmVuZERhdGUgIT09IEluZmluaXR5ICYmIHllYXIgPj0gdGhpcy5vLmVuZERhdGUuZ2V0VVRDRnVsbFllYXIoKSAmJiBtb250aCA+PSB0aGlzLm8uZW5kRGF0ZS5nZXRVVENNb250aCgpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0aWYgKHRoaXMuby5zdGFydERhdGUgIT09IC1JbmZpbml0eSAmJiB5ZWFyIDw9IHRoaXMuby5zdGFydERhdGUuZ2V0VVRDRnVsbFllYXIoKSkge1xuXHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe3Zpc2liaWxpdHk6ICdoaWRkZW4nfSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMuby5lbmREYXRlICE9PSBJbmZpbml0eSAmJiB5ZWFyID49IHRoaXMuby5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCkpIHtcblx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHt2aXNpYmlsaXR5OiAnaGlkZGVuJ30pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7dmlzaWJpbGl0eTogJ3Zpc2libGUnfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRjbGljazogZnVuY3Rpb24oZSkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dmFyIHRhcmdldCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ3NwYW4sIHRkLCB0aCcpO1xuXHRcdFx0aWYgKHRhcmdldC5sZW5ndGggPT0gMSkge1xuXHRcdFx0XHRzd2l0Y2godGFyZ2V0WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHtcblx0XHRcdFx0XHRjYXNlICd0aCc6XG5cdFx0XHRcdFx0XHRzd2l0Y2godGFyZ2V0WzBdLmNsYXNzTmFtZSkge1xuXHRcdFx0XHRcdFx0XHRjYXNlICdkYXRlcGlja2VyLXN3aXRjaCc6XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zaG93TW9kZSgxKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAncHJldic6XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ25leHQnOlxuXHRcdFx0XHRcdFx0XHRcdHZhciBkaXIgPSBEUEdsb2JhbC5tb2Rlc1t0aGlzLnZpZXdNb2RlXS5uYXZTdGVwICogKHRhcmdldFswXS5jbGFzc05hbWUgPT0gJ3ByZXYnID8gLTEgOiAxKTtcblx0XHRcdFx0XHRcdFx0XHRzd2l0Y2godGhpcy52aWV3TW9kZSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMudmlld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLnZpZXdEYXRlLCBkaXIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy52aWV3RGF0ZSwgZGlyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuZmlsbCgpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICd0b2RheSc6XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGUgPSBVVENEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgMCwgMCwgMCk7XG5cblx0XHRcdFx0XHRcdFx0XHR0aGlzLnNob3dNb2RlKC0yKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgd2hpY2ggPSB0aGlzLm8udG9kYXlCdG4gPT0gJ2xpbmtlZCcgPyBudWxsIDogJ3ZpZXcnO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3NldERhdGUoZGF0ZSwgd2hpY2gpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdjbGVhcic6XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuaXNJbnB1dClcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiAodGhpcy5jb21wb25lbnQpXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50LmZpbmQoJ2lucHV0Jyk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGVsZW1lbnQpXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtZW50LnZhbChcIlwiKS5jaGFuZ2UoKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl90cmlnZ2VyKCdjaGFuZ2VEYXRlJyk7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAodGhpcy5vLmF1dG9jbG9zZSlcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc3Bhbic6XG5cdFx0XHRcdFx0XHRpZiAoIXRhcmdldC5pcygnLmRpc2FibGVkJykpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy52aWV3RGF0ZS5zZXRVVENEYXRlKDEpO1xuXHRcdFx0XHRcdFx0XHRpZiAodGFyZ2V0LmlzKCcubW9udGgnKSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBkYXkgPSAxO1xuXHRcdFx0XHRcdFx0XHRcdHZhciBtb250aCA9IHRhcmdldC5wYXJlbnQoKS5maW5kKCdzcGFuJykuaW5kZXgodGFyZ2V0KTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgeWVhciA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnZpZXdEYXRlLnNldFVUQ01vbnRoKG1vbnRoKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl90cmlnZ2VyKCdjaGFuZ2VNb250aCcsIHRoaXMudmlld0RhdGUpO1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0aGlzLm8ubWluVmlld01vZGUgPT09IDEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LDAsMCwwLDApKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHllYXIgPSBwYXJzZUludCh0YXJnZXQudGV4dCgpLCAxMCl8fDA7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGRheSA9IDE7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIG1vbnRoID0gMDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnZpZXdEYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoJ2NoYW5nZVllYXInLCB0aGlzLnZpZXdEYXRlKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAodGhpcy5vLm1pblZpZXdNb2RlID09PSAyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zZXREYXRlKFVUQ0RhdGUoeWVhciwgbW9udGgsIGRheSwwLDAsMCwwKSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hvd01vZGUoLTEpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmZpbGwoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RkJzpcblx0XHRcdFx0XHRcdGlmICh0YXJnZXQuaXMoJy5kYXknKSAmJiAhdGFyZ2V0LmlzKCcuZGlzYWJsZWQnKSl7XG5cdFx0XHRcdFx0XHRcdHZhciBkYXkgPSBwYXJzZUludCh0YXJnZXQudGV4dCgpLCAxMCl8fDE7XG5cdFx0XHRcdFx0XHRcdHZhciB5ZWFyID0gdGhpcy52aWV3RGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuXHRcdFx0XHRcdFx0XHRcdG1vbnRoID0gdGhpcy52aWV3RGF0ZS5nZXRVVENNb250aCgpO1xuXHRcdFx0XHRcdFx0XHRpZiAodGFyZ2V0LmlzKCcub2xkJykpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAobW9udGggPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vbnRoID0gMTE7XG5cdFx0XHRcdFx0XHRcdFx0XHR5ZWFyIC09IDE7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vbnRoIC09IDE7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHRhcmdldC5pcygnLm5ldycpKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG1vbnRoID09IDExKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRtb250aCA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0XHR5ZWFyICs9IDE7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vbnRoICs9IDE7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LDAsMCwwLDApKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9zZXREYXRlOiBmdW5jdGlvbihkYXRlLCB3aGljaCl7XG5cdFx0XHRpZiAoIXdoaWNoIHx8IHdoaWNoID09ICdkYXRlJylcblx0XHRcdFx0dGhpcy5kYXRlID0gbmV3IERhdGUoZGF0ZSk7XG5cdFx0XHRpZiAoIXdoaWNoIHx8IHdoaWNoICA9PSAndmlldycpXG5cdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcblx0XHRcdHRoaXMuZmlsbCgpO1xuXHRcdFx0dGhpcy5zZXRWYWx1ZSgpO1xuXHRcdFx0dGhpcy5fdHJpZ2dlcignY2hhbmdlRGF0ZScpO1xuXHRcdFx0dmFyIGVsZW1lbnQ7XG5cdFx0XHRpZiAodGhpcy5pc0lucHV0KSB7XG5cdFx0XHRcdGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50KXtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdFx0ZWxlbWVudC5jaGFuZ2UoKTtcblx0XHRcdFx0aWYgKHRoaXMuby5hdXRvY2xvc2UgJiYgKCF3aGljaCB8fCB3aGljaCA9PSAnZGF0ZScpKSB7XG5cdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0bW92ZU1vbnRoOiBmdW5jdGlvbihkYXRlLCBkaXIpe1xuXHRcdFx0aWYgKCFkaXIpIHJldHVybiBkYXRlO1xuXHRcdFx0dmFyIG5ld19kYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpLFxuXHRcdFx0XHRkYXkgPSBuZXdfZGF0ZS5nZXRVVENEYXRlKCksXG5cdFx0XHRcdG1vbnRoID0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKSxcblx0XHRcdFx0bWFnID0gTWF0aC5hYnMoZGlyKSxcblx0XHRcdFx0bmV3X21vbnRoLCB0ZXN0O1xuXHRcdFx0ZGlyID0gZGlyID4gMCA/IDEgOiAtMTtcblx0XHRcdGlmIChtYWcgPT0gMSl7XG5cdFx0XHRcdHRlc3QgPSBkaXIgPT0gLTFcblx0XHRcdFx0XHQvLyBJZiBnb2luZyBiYWNrIG9uZSBtb250aCwgbWFrZSBzdXJlIG1vbnRoIGlzIG5vdCBjdXJyZW50IG1vbnRoXG5cdFx0XHRcdFx0Ly8gKGVnLCBNYXIgMzEgLT4gRmViIDMxID09IEZlYiAyOCwgbm90IE1hciAwMilcblx0XHRcdFx0XHQ/IGZ1bmN0aW9uKCl7IHJldHVybiBuZXdfZGF0ZS5nZXRVVENNb250aCgpID09IG1vbnRoOyB9XG5cdFx0XHRcdFx0Ly8gSWYgZ29pbmcgZm9yd2FyZCBvbmUgbW9udGgsIG1ha2Ugc3VyZSBtb250aCBpcyBhcyBleHBlY3RlZFxuXHRcdFx0XHRcdC8vIChlZywgSmFuIDMxIC0+IEZlYiAzMSA9PSBGZWIgMjgsIG5vdCBNYXIgMDIpXG5cdFx0XHRcdFx0OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKSAhPSBuZXdfbW9udGg7IH07XG5cdFx0XHRcdG5ld19tb250aCA9IG1vbnRoICsgZGlyO1xuXHRcdFx0XHRuZXdfZGF0ZS5zZXRVVENNb250aChuZXdfbW9udGgpO1xuXHRcdFx0XHQvLyBEZWMgLT4gSmFuICgxMikgb3IgSmFuIC0+IERlYyAoLTEpIC0tIGxpbWl0IGV4cGVjdGVkIGRhdGUgdG8gMC0xMVxuXHRcdFx0XHRpZiAobmV3X21vbnRoIDwgMCB8fCBuZXdfbW9udGggPiAxMSlcblx0XHRcdFx0XHRuZXdfbW9udGggPSAobmV3X21vbnRoICsgMTIpICUgMTI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBGb3IgbWFnbml0dWRlcyA+MSwgbW92ZSBvbmUgbW9udGggYXQgYSB0aW1lLi4uXG5cdFx0XHRcdGZvciAodmFyIGk9MDsgaTxtYWc7IGkrKylcblx0XHRcdFx0XHQvLyAuLi53aGljaCBtaWdodCBkZWNyZWFzZSB0aGUgZGF5IChlZywgSmFuIDMxIHRvIEZlYiAyOCwgZXRjKS4uLlxuXHRcdFx0XHRcdG5ld19kYXRlID0gdGhpcy5tb3ZlTW9udGgobmV3X2RhdGUsIGRpcik7XG5cdFx0XHRcdC8vIC4uLnRoZW4gcmVzZXQgdGhlIGRheSwga2VlcGluZyBpdCBpbiB0aGUgbmV3IG1vbnRoXG5cdFx0XHRcdG5ld19tb250aCA9IG5ld19kYXRlLmdldFVUQ01vbnRoKCk7XG5cdFx0XHRcdG5ld19kYXRlLnNldFVUQ0RhdGUoZGF5KTtcblx0XHRcdFx0dGVzdCA9IGZ1bmN0aW9uKCl7IHJldHVybiBuZXdfbW9udGggIT0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKTsgfTtcblx0XHRcdH1cblx0XHRcdC8vIENvbW1vbiBkYXRlLXJlc2V0dGluZyBsb29wIC0tIGlmIGRhdGUgaXMgYmV5b25kIGVuZCBvZiBtb250aCwgbWFrZSBpdFxuXHRcdFx0Ly8gZW5kIG9mIG1vbnRoXG5cdFx0XHR3aGlsZSAodGVzdCgpKXtcblx0XHRcdFx0bmV3X2RhdGUuc2V0VVRDRGF0ZSgtLWRheSk7XG5cdFx0XHRcdG5ld19kYXRlLnNldFVUQ01vbnRoKG5ld19tb250aCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbmV3X2RhdGU7XG5cdFx0fSxcblxuXHRcdG1vdmVZZWFyOiBmdW5jdGlvbihkYXRlLCBkaXIpe1xuXHRcdFx0cmV0dXJuIHRoaXMubW92ZU1vbnRoKGRhdGUsIGRpcioxMik7XG5cdFx0fSxcblxuXHRcdGRhdGVXaXRoaW5SYW5nZTogZnVuY3Rpb24oZGF0ZSl7XG5cdFx0XHRyZXR1cm4gZGF0ZSA+PSB0aGlzLm8uc3RhcnREYXRlICYmIGRhdGUgPD0gdGhpcy5vLmVuZERhdGU7XG5cdFx0fSxcblxuXHRcdGtleWRvd246IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aWYgKHRoaXMucGlja2VyLmlzKCc6bm90KDp2aXNpYmxlKScpKXtcblx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PSAyNykgLy8gYWxsb3cgZXNjYXBlIHRvIGhpZGUgYW5kIHJlLXNob3cgcGlja2VyXG5cdFx0XHRcdFx0dGhpcy5zaG93KCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciBkYXRlQ2hhbmdlZCA9IGZhbHNlLFxuXHRcdFx0XHRkaXIsIGRheSwgbW9udGgsXG5cdFx0XHRcdG5ld0RhdGUsIG5ld1ZpZXdEYXRlO1xuXHRcdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHRcdGNhc2UgMjc6IC8vIGVzY2FwZVxuXHRcdFx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAzNzogLy8gbGVmdFxuXHRcdFx0XHRjYXNlIDM5OiAvLyByaWdodFxuXHRcdFx0XHRcdGlmICghdGhpcy5vLmtleWJvYXJkTmF2aWdhdGlvbikgYnJlYWs7XG5cdFx0XHRcdFx0ZGlyID0gZS5rZXlDb2RlID09IDM3ID8gLTEgOiAxO1xuXHRcdFx0XHRcdGlmIChlLmN0cmxLZXkpe1xuXHRcdFx0XHRcdFx0bmV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy5kYXRlLCBkaXIpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVZZWFyKHRoaXMudmlld0RhdGUsIGRpcik7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLnNoaWZ0S2V5KXtcblx0XHRcdFx0XHRcdG5ld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLmRhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMudmlld0RhdGUsIGRpcik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG5ld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xuXHRcdFx0XHRcdFx0bmV3RGF0ZS5zZXRVVENEYXRlKHRoaXMuZGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKTtcblx0XHRcdFx0XHRcdG5ld1ZpZXdEYXRlLnNldFVUQ0RhdGUodGhpcy52aWV3RGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5kYXRlV2l0aGluUmFuZ2UobmV3RGF0ZSkpe1xuXHRcdFx0XHRcdFx0dGhpcy5kYXRlID0gbmV3RGF0ZTtcblx0XHRcdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXdWaWV3RGF0ZTtcblx0XHRcdFx0XHRcdHRoaXMuc2V0VmFsdWUoKTtcblx0XHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRkYXRlQ2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDM4OiAvLyB1cFxuXHRcdFx0XHRjYXNlIDQwOiAvLyBkb3duXG5cdFx0XHRcdFx0aWYgKCF0aGlzLm8ua2V5Ym9hcmROYXZpZ2F0aW9uKSBicmVhaztcblx0XHRcdFx0XHRkaXIgPSBlLmtleUNvZGUgPT0gMzggPyAtMSA6IDE7XG5cdFx0XHRcdFx0aWYgKGUuY3RybEtleSl7XG5cdFx0XHRcdFx0XHRuZXdEYXRlID0gdGhpcy5tb3ZlWWVhcih0aGlzLmRhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy52aWV3RGF0ZSwgZGlyKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUuc2hpZnRLZXkpe1xuXHRcdFx0XHRcdFx0bmV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMuZGF0ZSwgZGlyKTtcblx0XHRcdFx0XHRcdG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlTW9udGgodGhpcy52aWV3RGF0ZSwgZGlyKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bmV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZSk7XG5cdFx0XHRcdFx0XHRuZXdEYXRlLnNldFVUQ0RhdGUodGhpcy5kYXRlLmdldFVUQ0RhdGUoKSArIGRpciAqIDcpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKTtcblx0XHRcdFx0XHRcdG5ld1ZpZXdEYXRlLnNldFVUQ0RhdGUodGhpcy52aWV3RGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIgKiA3KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMuZGF0ZVdpdGhpblJhbmdlKG5ld0RhdGUpKXtcblx0XHRcdFx0XHRcdHRoaXMuZGF0ZSA9IG5ld0RhdGU7XG5cdFx0XHRcdFx0XHR0aGlzLnZpZXdEYXRlID0gbmV3Vmlld0RhdGU7XG5cdFx0XHRcdFx0XHR0aGlzLnNldFZhbHVlKCk7XG5cdFx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0ZGF0ZUNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAxMzogLy8gZW50ZXJcblx0XHRcdFx0XHR0aGlzLmhpZGUoKTtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgOTogLy8gdGFiXG5cdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZGF0ZUNoYW5nZWQpe1xuXHRcdFx0XHR0aGlzLl90cmlnZ2VyKCdjaGFuZ2VEYXRlJyk7XG5cdFx0XHRcdHZhciBlbGVtZW50O1xuXHRcdFx0XHRpZiAodGhpcy5pc0lucHV0KSB7XG5cdFx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCl7XG5cdFx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlbGVtZW50KSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5jaGFuZ2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzaG93TW9kZTogZnVuY3Rpb24oZGlyKSB7XG5cdFx0XHRpZiAoZGlyKSB7XG5cdFx0XHRcdHRoaXMudmlld01vZGUgPSBNYXRoLm1heCh0aGlzLm8ubWluVmlld01vZGUsIE1hdGgubWluKDIsIHRoaXMudmlld01vZGUgKyBkaXIpKTtcblx0XHRcdH1cblx0XHRcdC8qXG5cdFx0XHRcdHZpdGFsZXRzOiBmaXhpbmcgYnVnIG9mIHZlcnkgc3BlY2lhbCBjb25kaXRpb25zOlxuXHRcdFx0XHRqcXVlcnkgMS43LjEgKyB3ZWJraXQgKyBzaG93IGlubGluZSBkYXRlcGlja2VyIGluIGJvb3RzdHJhcCBwb3BvdmVyLlxuXHRcdFx0XHRNZXRob2Qgc2hvdygpIGRvZXMgbm90IHNldCBkaXNwbGF5IGNzcyBjb3JyZWN0bHkgYW5kIGRhdGVwaWNrZXIgaXMgbm90IHNob3duLlxuXHRcdFx0XHRDaGFuZ2VkIHRvIC5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKSBzb2x2ZSB0aGUgcHJvYmxlbS5cblx0XHRcdFx0U2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlL2lzc3Vlcy8zN1xuXG5cdFx0XHRcdEluIGpxdWVyeSAxLjcuMisgZXZlcnl0aGluZyB3b3JrcyBmaW5lLlxuXHRcdFx0Ki9cblx0XHRcdC8vdGhpcy5waWNrZXIuZmluZCgnPmRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRlcGlja2VyLScrRFBHbG9iYWwubW9kZXNbdGhpcy52aWV3TW9kZV0uY2xzTmFtZSkuc2hvdygpO1xuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgnPmRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRlcGlja2VyLScrRFBHbG9iYWwubW9kZXNbdGhpcy52aWV3TW9kZV0uY2xzTmFtZSkuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG5cdFx0XHR0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgRGF0ZVJhbmdlUGlja2VyID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucyl7XG5cdFx0dGhpcy5lbGVtZW50ID0gJChlbGVtZW50KTtcblx0XHR0aGlzLmlucHV0cyA9ICQubWFwKG9wdGlvbnMuaW5wdXRzLCBmdW5jdGlvbihpKXsgcmV0dXJuIGkuanF1ZXJ5ID8gaVswXSA6IGk7IH0pO1xuXHRcdGRlbGV0ZSBvcHRpb25zLmlucHV0cztcblxuXHRcdCQodGhpcy5pbnB1dHMpXG5cdFx0XHQuZGF0ZXBpY2tlcihvcHRpb25zKVxuXHRcdFx0LmJpbmQoJ2NoYW5nZURhdGUnLCAkLnByb3h5KHRoaXMuZGF0ZVVwZGF0ZWQsIHRoaXMpKTtcblxuXHRcdHRoaXMucGlja2VycyA9ICQubWFwKHRoaXMuaW5wdXRzLCBmdW5jdGlvbihpKXsgcmV0dXJuICQoaSkuZGF0YSgnZGF0ZXBpY2tlcicpOyB9KTtcblx0XHR0aGlzLnVwZGF0ZURhdGVzKCk7XG5cdH07XG5cdERhdGVSYW5nZVBpY2tlci5wcm90b3R5cGUgPSB7XG5cdFx0dXBkYXRlRGF0ZXM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLmRhdGVzID0gJC5tYXAodGhpcy5waWNrZXJzLCBmdW5jdGlvbihpKXsgcmV0dXJuIGkuZGF0ZTsgfSk7XG5cdFx0XHR0aGlzLnVwZGF0ZVJhbmdlcygpO1xuXHRcdH0sXG5cdFx0dXBkYXRlUmFuZ2VzOiBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIHJhbmdlID0gJC5tYXAodGhpcy5kYXRlcywgZnVuY3Rpb24oZCl7IHJldHVybiBkLnZhbHVlT2YoKTsgfSk7XG5cdFx0XHQkLmVhY2godGhpcy5waWNrZXJzLCBmdW5jdGlvbihpLCBwKXtcblx0XHRcdFx0cC5zZXRSYW5nZShyYW5nZSk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdGRhdGVVcGRhdGVkOiBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBkcCA9ICQoZS50YXJnZXQpLmRhdGEoJ2RhdGVwaWNrZXInKSxcblx0XHRcdFx0bmV3X2RhdGUgPSBkcC5nZXRVVENEYXRlKCksXG5cdFx0XHRcdGkgPSAkLmluQXJyYXkoZS50YXJnZXQsIHRoaXMuaW5wdXRzKSxcblx0XHRcdFx0bCA9IHRoaXMuaW5wdXRzLmxlbmd0aDtcblx0XHRcdGlmIChpID09IC0xKSByZXR1cm47XG5cblx0XHRcdGlmIChuZXdfZGF0ZSA8IHRoaXMuZGF0ZXNbaV0pe1xuXHRcdFx0XHQvLyBEYXRlIGJlaW5nIG1vdmVkIGVhcmxpZXIvbGVmdFxuXHRcdFx0XHR3aGlsZSAoaT49MCAmJiBuZXdfZGF0ZSA8IHRoaXMuZGF0ZXNbaV0pe1xuXHRcdFx0XHRcdHRoaXMucGlja2Vyc1tpLS1dLnNldFVUQ0RhdGUobmV3X2RhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChuZXdfZGF0ZSA+IHRoaXMuZGF0ZXNbaV0pe1xuXHRcdFx0XHQvLyBEYXRlIGJlaW5nIG1vdmVkIGxhdGVyL3JpZ2h0XG5cdFx0XHRcdHdoaWxlIChpPGwgJiYgbmV3X2RhdGUgPiB0aGlzLmRhdGVzW2ldKXtcblx0XHRcdFx0XHR0aGlzLnBpY2tlcnNbaSsrXS5zZXRVVENEYXRlKG5ld19kYXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy51cGRhdGVEYXRlcygpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlOiBmdW5jdGlvbigpe1xuXHRcdFx0JC5tYXAodGhpcy5waWNrZXJzLCBmdW5jdGlvbihwKXsgcC5yZW1vdmUoKTsgfSk7XG5cdFx0XHRkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlcGlja2VyO1xuXHRcdH1cblx0fTtcblxuXHRmdW5jdGlvbiBvcHRzX2Zyb21fZWwoZWwsIHByZWZpeCl7XG5cdFx0Ly8gRGVyaXZlIG9wdGlvbnMgZnJvbSBlbGVtZW50IGRhdGEtYXR0cnNcblx0XHR2YXIgZGF0YSA9ICQoZWwpLmRhdGEoKSxcblx0XHRcdG91dCA9IHt9LCBpbmtleSxcblx0XHRcdHJlcGxhY2UgPSBuZXcgUmVnRXhwKCdeJyArIHByZWZpeC50b0xvd2VyQ2FzZSgpICsgJyhbQS1aXSknKSxcblx0XHRcdHByZWZpeCA9IG5ldyBSZWdFeHAoJ14nICsgcHJlZml4LnRvTG93ZXJDYXNlKCkpO1xuXHRcdGZvciAodmFyIGtleSBpbiBkYXRhKVxuXHRcdFx0aWYgKHByZWZpeC50ZXN0KGtleSkpe1xuXHRcdFx0XHRpbmtleSA9IGtleS5yZXBsYWNlKHJlcGxhY2UsIGZ1bmN0aW9uKF8sYSl7IHJldHVybiBhLnRvTG93ZXJDYXNlKCk7IH0pO1xuXHRcdFx0XHRvdXRbaW5rZXldID0gZGF0YVtrZXldO1xuXHRcdFx0fVxuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBvcHRzX2Zyb21fbG9jYWxlKGxhbmcpe1xuXHRcdC8vIERlcml2ZSBvcHRpb25zIGZyb20gbG9jYWxlIHBsdWdpbnNcblx0XHR2YXIgb3V0ID0ge307XG5cdFx0Ly8gQ2hlY2sgaWYgXCJkZS1ERVwiIHN0eWxlIGRhdGUgaXMgYXZhaWxhYmxlLCBpZiBub3QgbGFuZ3VhZ2Ugc2hvdWxkXG5cdFx0Ly8gZmFsbGJhY2sgdG8gMiBsZXR0ZXIgY29kZSBlZyBcImRlXCJcblx0XHRpZiAoIWRhdGVzW2xhbmddKSB7XG5cdFx0XHRsYW5nID0gbGFuZy5zcGxpdCgnLScpWzBdXG5cdFx0XHRpZiAoIWRhdGVzW2xhbmddKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBkID0gZGF0ZXNbbGFuZ107XG5cdFx0JC5lYWNoKGxvY2FsZV9vcHRzLCBmdW5jdGlvbihpLGspe1xuXHRcdFx0aWYgKGsgaW4gZClcblx0XHRcdFx0b3V0W2tdID0gZFtrXTtcblx0XHR9KTtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0dmFyIG9sZCA9ICQuZm4uZGF0ZXBpY2tlcjtcblx0dmFyIGRhdGVwaWNrZXIgPSAkLmZuLmRhdGVwaWNrZXIgPSBmdW5jdGlvbiAoIG9wdGlvbiApIHtcblx0XHR2YXIgYXJncyA9IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cdFx0YXJncy5zaGlmdCgpO1xuXHRcdHZhciBpbnRlcm5hbF9yZXR1cm4sXG5cdFx0XHR0aGlzX3JldHVybjtcblx0XHR0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKSxcblx0XHRcdFx0ZGF0YSA9ICR0aGlzLmRhdGEoJ2RhdGVwaWNrZXInKSxcblx0XHRcdFx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuXHRcdFx0aWYgKCFkYXRhKSB7XG5cdFx0XHRcdHZhciBlbG9wdHMgPSBvcHRzX2Zyb21fZWwodGhpcywgJ2RhdGUnKSxcblx0XHRcdFx0XHQvLyBQcmVsaW1pbmFyeSBvdGlvbnNcblx0XHRcdFx0XHR4b3B0cyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgZWxvcHRzLCBvcHRpb25zKSxcblx0XHRcdFx0XHRsb2NvcHRzID0gb3B0c19mcm9tX2xvY2FsZSh4b3B0cy5sYW5ndWFnZSksXG5cdFx0XHRcdFx0Ly8gT3B0aW9ucyBwcmlvcml0eToganMgYXJncywgZGF0YS1hdHRycywgbG9jYWxlcywgZGVmYXVsdHNcblx0XHRcdFx0XHRvcHRzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBsb2NvcHRzLCBlbG9wdHMsIG9wdGlvbnMpO1xuXHRcdFx0XHRpZiAoJHRoaXMuaXMoJy5pbnB1dC1kYXRlcmFuZ2UnKSB8fCBvcHRzLmlucHV0cyl7XG5cdFx0XHRcdFx0dmFyIHJvcHRzID0ge1xuXHRcdFx0XHRcdFx0aW5wdXRzOiBvcHRzLmlucHV0cyB8fCAkdGhpcy5maW5kKCdpbnB1dCcpLnRvQXJyYXkoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0JHRoaXMuZGF0YSgnZGF0ZXBpY2tlcicsIChkYXRhID0gbmV3IERhdGVSYW5nZVBpY2tlcih0aGlzLCAkLmV4dGVuZChvcHRzLCByb3B0cykpKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHQkdGhpcy5kYXRhKCdkYXRlcGlja2VyJywgKGRhdGEgPSBuZXcgRGF0ZXBpY2tlcih0aGlzLCBvcHRzKSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZGF0YVtvcHRpb25dID09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0aW50ZXJuYWxfcmV0dXJuID0gZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIGFyZ3MpO1xuXHRcdFx0XHRpZiAoaW50ZXJuYWxfcmV0dXJuICE9PSB1bmRlZmluZWQpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlmIChpbnRlcm5hbF9yZXR1cm4gIT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBpbnRlcm5hbF9yZXR1cm47XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dmFyIGRlZmF1bHRzID0gJC5mbi5kYXRlcGlja2VyLmRlZmF1bHRzID0ge1xuXHRcdGF1dG9jbG9zZTogZmFsc2UsXG5cdFx0YmVmb3JlU2hvd0RheTogJC5ub29wLFxuXHRcdGNhbGVuZGFyV2Vla3M6IGZhbHNlLFxuXHRcdGNsZWFyQnRuOiBmYWxzZSxcblx0XHRkYXlzT2ZXZWVrRGlzYWJsZWQ6IFtdLFxuXHRcdGVuZERhdGU6IEluZmluaXR5LFxuXHRcdGZvcmNlUGFyc2U6IHRydWUsXG5cdFx0Zm9ybWF0OiAnbW0vZGQveXl5eScsXG5cdFx0a2V5Ym9hcmROYXZpZ2F0aW9uOiB0cnVlLFxuXHRcdGxhbmd1YWdlOiAnZW4nLFxuXHRcdG1pblZpZXdNb2RlOiAwLFxuXHRcdHJ0bDogZmFsc2UsXG5cdFx0c3RhcnREYXRlOiAtSW5maW5pdHksXG5cdFx0c3RhcnRWaWV3OiAwLFxuXHRcdHRvZGF5QnRuOiBmYWxzZSxcblx0XHR0b2RheUhpZ2hsaWdodDogZmFsc2UsXG5cdFx0d2Vla1N0YXJ0OiAwXG5cdH07XG5cdHZhciBsb2NhbGVfb3B0cyA9ICQuZm4uZGF0ZXBpY2tlci5sb2NhbGVfb3B0cyA9IFtcblx0XHQnZm9ybWF0Jyxcblx0XHQncnRsJyxcblx0XHQnd2Vla1N0YXJ0J1xuXHRdO1xuXHQkLmZuLmRhdGVwaWNrZXIuQ29uc3RydWN0b3IgPSBEYXRlcGlja2VyO1xuXHR2YXIgZGF0ZXMgPSAkLmZuLmRhdGVwaWNrZXIuZGF0ZXMgPSB7XG5cdFx0ZW46IHtcblx0XHRcdGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCIsIFwiU3VuZGF5XCJdLFxuXHRcdFx0ZGF5c1Nob3J0OiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiwgXCJTdW5cIl0sXG5cdFx0XHRkYXlzTWluOiBbXCJTdVwiLCBcIk1vXCIsIFwiVHVcIiwgXCJXZVwiLCBcIlRoXCIsIFwiRnJcIiwgXCJTYVwiLCBcIlN1XCJdLFxuXHRcdFx0bW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcblx0XHRcdG1vbnRoc1Nob3J0OiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl0sXG5cdFx0XHR0b2RheTogXCJUb2RheVwiLFxuXHRcdFx0Y2xlYXI6IFwiQ2xlYXJcIlxuXHRcdH1cblx0fTtcblxuXHR2YXIgRFBHbG9iYWwgPSB7XG5cdFx0bW9kZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0Y2xzTmFtZTogJ2RheXMnLFxuXHRcdFx0XHRuYXZGbmM6ICdNb250aCcsXG5cdFx0XHRcdG5hdlN0ZXA6IDFcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNsc05hbWU6ICdtb250aHMnLFxuXHRcdFx0XHRuYXZGbmM6ICdGdWxsWWVhcicsXG5cdFx0XHRcdG5hdlN0ZXA6IDFcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNsc05hbWU6ICd5ZWFycycsXG5cdFx0XHRcdG5hdkZuYzogJ0Z1bGxZZWFyJyxcblx0XHRcdFx0bmF2U3RlcDogMTBcblx0XHR9XSxcblx0XHRpc0xlYXBZZWFyOiBmdW5jdGlvbiAoeWVhcikge1xuXHRcdFx0cmV0dXJuICgoKHllYXIgJSA0ID09PSAwKSAmJiAoeWVhciAlIDEwMCAhPT0gMCkpIHx8ICh5ZWFyICUgNDAwID09PSAwKSk7XG5cdFx0fSxcblx0XHRnZXREYXlzSW5Nb250aDogZnVuY3Rpb24gKHllYXIsIG1vbnRoKSB7XG5cdFx0XHRyZXR1cm4gWzMxLCAoRFBHbG9iYWwuaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV1bbW9udGhdO1xuXHRcdH0sXG5cdFx0dmFsaWRQYXJ0czogL2RkP3xERD98bW0/fE1NP3x5eSg/Onl5KT8vZyxcblx0XHRub25wdW5jdHVhdGlvbjogL1teIC1cXC86LUBcXFtcXHUzNDAwLVxcdTlmZmYtYHstflxcdFxcblxccl0rL2csXG5cdFx0cGFyc2VGb3JtYXQ6IGZ1bmN0aW9uKGZvcm1hdCl7XG5cdFx0XHQvLyBJRSB0cmVhdHMgXFwwIGFzIGEgc3RyaW5nIGVuZCBpbiBpbnB1dHMgKHRydW5jYXRpbmcgdGhlIHZhbHVlKSxcblx0XHRcdC8vIHNvIGl0J3MgYSBiYWQgZm9ybWF0IGRlbGltaXRlciwgYW55d2F5XG5cdFx0XHR2YXIgc2VwYXJhdG9ycyA9IGZvcm1hdC5yZXBsYWNlKHRoaXMudmFsaWRQYXJ0cywgJ1xcMCcpLnNwbGl0KCdcXDAnKSxcblx0XHRcdFx0cGFydHMgPSBmb3JtYXQubWF0Y2godGhpcy52YWxpZFBhcnRzKTtcblx0XHRcdGlmICghc2VwYXJhdG9ycyB8fCAhc2VwYXJhdG9ycy5sZW5ndGggfHwgIXBhcnRzIHx8IHBhcnRzLmxlbmd0aCA9PT0gMCl7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSBmb3JtYXQuXCIpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHtzZXBhcmF0b3JzOiBzZXBhcmF0b3JzLCBwYXJ0czogcGFydHN9O1xuXHRcdH0sXG5cdFx0cGFyc2VEYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIGxhbmd1YWdlKSB7XG5cdFx0XHRpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHJldHVybiBkYXRlO1xuXHRcdFx0aWYgKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnKVxuXHRcdFx0XHRmb3JtYXQgPSBEUEdsb2JhbC5wYXJzZUZvcm1hdChmb3JtYXQpO1xuXHRcdFx0aWYgKC9eW1xcLStdXFxkK1tkbXd5XShbXFxzLF0rW1xcLStdXFxkK1tkbXd5XSkqJC8udGVzdChkYXRlKSkge1xuXHRcdFx0XHR2YXIgcGFydF9yZSA9IC8oW1xcLStdXFxkKykoW2Rtd3ldKS8sXG5cdFx0XHRcdFx0cGFydHMgPSBkYXRlLm1hdGNoKC8oW1xcLStdXFxkKykoW2Rtd3ldKS9nKSxcblx0XHRcdFx0XHRwYXJ0LCBkaXI7XG5cdFx0XHRcdGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRmb3IgKHZhciBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRwYXJ0ID0gcGFydF9yZS5leGVjKHBhcnRzW2ldKTtcblx0XHRcdFx0XHRkaXIgPSBwYXJzZUludChwYXJ0WzFdKTtcblx0XHRcdFx0XHRzd2l0Y2gocGFydFsyXSl7XG5cdFx0XHRcdFx0XHRjYXNlICdkJzpcblx0XHRcdFx0XHRcdFx0ZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlyKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdtJzpcblx0XHRcdFx0XHRcdFx0ZGF0ZSA9IERhdGVwaWNrZXIucHJvdG90eXBlLm1vdmVNb250aC5jYWxsKERhdGVwaWNrZXIucHJvdG90eXBlLCBkYXRlLCBkaXIpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ3cnOlxuXHRcdFx0XHRcdFx0XHRkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIgKiA3KTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICd5Jzpcblx0XHRcdFx0XHRcdFx0ZGF0ZSA9IERhdGVwaWNrZXIucHJvdG90eXBlLm1vdmVZZWFyLmNhbGwoRGF0ZXBpY2tlci5wcm90b3R5cGUsIGRhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gVVRDRGF0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRhdGUuZ2V0VVRDTW9udGgoKSwgZGF0ZS5nZXRVVENEYXRlKCksIDAsIDAsIDApO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHBhcnRzID0gZGF0ZSAmJiBkYXRlLm1hdGNoKHRoaXMubm9ucHVuY3R1YXRpb24pIHx8IFtdLFxuXHRcdFx0XHRkYXRlID0gbmV3IERhdGUoKSxcblx0XHRcdFx0cGFyc2VkID0ge30sXG5cdFx0XHRcdHNldHRlcnNfb3JkZXIgPSBbJ3l5eXknLCAneXknLCAnTScsICdNTScsICdtJywgJ21tJywgJ2QnLCAnZGQnXSxcblx0XHRcdFx0c2V0dGVyc19tYXAgPSB7XG5cdFx0XHRcdFx0eXl5eTogZnVuY3Rpb24oZCx2KXsgcmV0dXJuIGQuc2V0VVRDRnVsbFllYXIodik7IH0sXG5cdFx0XHRcdFx0eXk6IGZ1bmN0aW9uKGQsdil7IHJldHVybiBkLnNldFVUQ0Z1bGxZZWFyKDIwMDArdik7IH0sXG5cdFx0XHRcdFx0bTogZnVuY3Rpb24oZCx2KXtcblx0XHRcdFx0XHRcdHYgLT0gMTtcblx0XHRcdFx0XHRcdHdoaWxlICh2PDApIHYgKz0gMTI7XG5cdFx0XHRcdFx0XHR2ICU9IDEyO1xuXHRcdFx0XHRcdFx0ZC5zZXRVVENNb250aCh2KTtcblx0XHRcdFx0XHRcdHdoaWxlIChkLmdldFVUQ01vbnRoKCkgIT0gdilcblx0XHRcdFx0XHRcdFx0ZC5zZXRVVENEYXRlKGQuZ2V0VVRDRGF0ZSgpLTEpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGQ7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRkOiBmdW5jdGlvbihkLHYpeyByZXR1cm4gZC5zZXRVVENEYXRlKHYpOyB9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZhbCwgZmlsdGVyZWQsIHBhcnQ7XG5cdFx0XHRzZXR0ZXJzX21hcFsnTSddID0gc2V0dGVyc19tYXBbJ01NJ10gPSBzZXR0ZXJzX21hcFsnbW0nXSA9IHNldHRlcnNfbWFwWydtJ107XG5cdFx0XHRzZXR0ZXJzX21hcFsnZGQnXSA9IHNldHRlcnNfbWFwWydkJ107XG5cdFx0XHRkYXRlID0gVVRDRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIDAsIDAsIDApO1xuXHRcdFx0dmFyIGZwYXJ0cyA9IGZvcm1hdC5wYXJ0cy5zbGljZSgpO1xuXHRcdFx0Ly8gUmVtb3ZlIG5vb3AgcGFydHNcblx0XHRcdGlmIChwYXJ0cy5sZW5ndGggIT0gZnBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHRmcGFydHMgPSAkKGZwYXJ0cykuZmlsdGVyKGZ1bmN0aW9uKGkscCl7XG5cdFx0XHRcdFx0cmV0dXJuICQuaW5BcnJheShwLCBzZXR0ZXJzX29yZGVyKSAhPT0gLTE7XG5cdFx0XHRcdH0pLnRvQXJyYXkoKTtcblx0XHRcdH1cblx0XHRcdC8vIFByb2Nlc3MgcmVtYWluZGVyXG5cdFx0XHRpZiAocGFydHMubGVuZ3RoID09IGZwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0Zm9yICh2YXIgaT0wLCBjbnQgPSBmcGFydHMubGVuZ3RoOyBpIDwgY250OyBpKyspIHtcblx0XHRcdFx0XHR2YWwgPSBwYXJzZUludChwYXJ0c1tpXSwgMTApO1xuXHRcdFx0XHRcdHBhcnQgPSBmcGFydHNbaV07XG5cdFx0XHRcdFx0aWYgKGlzTmFOKHZhbCkpIHtcblx0XHRcdFx0XHRcdHN3aXRjaChwYXJ0KSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ01NJzpcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXJlZCA9ICQoZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRocykuZmlsdGVyKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgbSA9IHRoaXMuc2xpY2UoMCwgcGFydHNbaV0ubGVuZ3RoKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0cCA9IHBhcnRzW2ldLnNsaWNlKDAsIG0ubGVuZ3RoKTtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBtID09IHA7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFsID0gJC5pbkFycmF5KGZpbHRlcmVkWzBdLCBkYXRlc1tsYW5ndWFnZV0ubW9udGhzKSArIDE7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ00nOlxuXHRcdFx0XHRcdFx0XHRcdGZpbHRlcmVkID0gJChkYXRlc1tsYW5ndWFnZV0ubW9udGhzU2hvcnQpLmZpbHRlcihmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIG0gPSB0aGlzLnNsaWNlKDAsIHBhcnRzW2ldLmxlbmd0aCksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHAgPSBwYXJ0c1tpXS5zbGljZSgwLCBtLmxlbmd0aCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gbSA9PSBwO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdHZhbCA9ICQuaW5BcnJheShmaWx0ZXJlZFswXSwgZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1Nob3J0KSArIDE7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBhcnNlZFtwYXJ0XSA9IHZhbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKHZhciBpPTAsIHM7IGk8c2V0dGVyc19vcmRlci5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0cyA9IHNldHRlcnNfb3JkZXJbaV07XG5cdFx0XHRcdFx0aWYgKHMgaW4gcGFyc2VkICYmICFpc05hTihwYXJzZWRbc10pKVxuXHRcdFx0XHRcdFx0c2V0dGVyc19tYXBbc10oZGF0ZSwgcGFyc2VkW3NdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRhdGU7XG5cdFx0fSxcblx0XHRmb3JtYXREYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIGxhbmd1YWdlKXtcblx0XHRcdGlmICh0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJylcblx0XHRcdFx0Zm9ybWF0ID0gRFBHbG9iYWwucGFyc2VGb3JtYXQoZm9ybWF0KTtcblx0XHRcdHZhciB2YWwgPSB7XG5cdFx0XHRcdGQ6IGRhdGUuZ2V0VVRDRGF0ZSgpLFxuXHRcdFx0XHREOiBkYXRlc1tsYW5ndWFnZV0uZGF5c1Nob3J0W2RhdGUuZ2V0VVRDRGF5KCldLFxuXHRcdFx0XHRERDogZGF0ZXNbbGFuZ3VhZ2VdLmRheXNbZGF0ZS5nZXRVVENEYXkoKV0sXG5cdFx0XHRcdG06IGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsXG5cdFx0XHRcdE06IGRhdGVzW2xhbmd1YWdlXS5tb250aHNTaG9ydFtkYXRlLmdldFVUQ01vbnRoKCldLFxuXHRcdFx0XHRNTTogZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1tkYXRlLmdldFVUQ01vbnRoKCldLFxuXHRcdFx0XHR5eTogZGF0ZS5nZXRVVENGdWxsWWVhcigpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFxuXHRcdFx0XHR5eXl5OiBkYXRlLmdldFVUQ0Z1bGxZZWFyKClcblx0XHRcdH07XG5cdFx0XHR2YWwuZGQgPSAodmFsLmQgPCAxMCA/ICcwJyA6ICcnKSArIHZhbC5kO1xuXHRcdFx0dmFsLm1tID0gKHZhbC5tIDwgMTAgPyAnMCcgOiAnJykgKyB2YWwubTtcblx0XHRcdHZhciBkYXRlID0gW10sXG5cdFx0XHRcdHNlcHMgPSAkLmV4dGVuZChbXSwgZm9ybWF0LnNlcGFyYXRvcnMpO1xuXHRcdFx0Zm9yICh2YXIgaT0wLCBjbnQgPSBmb3JtYXQucGFydHMubGVuZ3RoOyBpIDw9IGNudDsgaSsrKSB7XG5cdFx0XHRcdGlmIChzZXBzLmxlbmd0aClcblx0XHRcdFx0XHRkYXRlLnB1c2goc2Vwcy5zaGlmdCgpKTtcblx0XHRcdFx0ZGF0ZS5wdXNoKHZhbFtmb3JtYXQucGFydHNbaV1dKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkYXRlLmpvaW4oJycpO1xuXHRcdH0sXG5cdFx0aGVhZFRlbXBsYXRlOiAnPHRoZWFkPicrXG5cdFx0XHRcdFx0XHRcdCc8dHI+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRoIGNsYXNzPVwicHJldlwiPjxpIGNsYXNzPVwiaWNvbi1hcnJvdy1sZWZ0XCIvPjwvdGg+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRoIGNvbHNwYW49XCI1XCIgY2xhc3M9XCJkYXRlcGlja2VyLXN3aXRjaFwiPjwvdGg+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRoIGNsYXNzPVwibmV4dFwiPjxpIGNsYXNzPVwiaWNvbi1hcnJvdy1yaWdodFwiLz48L3RoPicrXG5cdFx0XHRcdFx0XHRcdCc8L3RyPicrXG5cdFx0XHRcdFx0XHQnPC90aGVhZD4nLFxuXHRcdGNvbnRUZW1wbGF0ZTogJzx0Ym9keT48dHI+PHRkIGNvbHNwYW49XCI3XCI+PC90ZD48L3RyPjwvdGJvZHk+Jyxcblx0XHRmb290VGVtcGxhdGU6ICc8dGZvb3Q+PHRyPjx0aCBjb2xzcGFuPVwiN1wiIGNsYXNzPVwidG9kYXlcIj48L3RoPjwvdHI+PHRyPjx0aCBjb2xzcGFuPVwiN1wiIGNsYXNzPVwiY2xlYXJcIj48L3RoPjwvdHI+PC90Zm9vdD4nXG5cdH07XG5cdERQR2xvYmFsLnRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyXCI+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLWRheXNcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8dGFibGUgY2xhc3M9XCIgdGFibGUtY29uZGVuc2VkXCI+Jytcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmhlYWRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdCc8dGJvZHk+PC90Ym9keT4nK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuZm9vdFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdCc8L3RhYmxlPicrXG5cdFx0XHRcdFx0XHRcdCc8L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItbW9udGhzXCI+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+Jytcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmhlYWRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmNvbnRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmZvb3RUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHQnPC90YWJsZT4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLXllYXJzXCI+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+Jytcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmhlYWRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmNvbnRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmZvb3RUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHQnPC90YWJsZT4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8L2Rpdj4nO1xuXG5cdCQuZm4uZGF0ZXBpY2tlci5EUEdsb2JhbCA9IERQR2xvYmFsO1xuXG5cblx0LyogREFURVBJQ0tFUiBOTyBDT05GTElDVFxuXHQqID09PT09PT09PT09PT09PT09PT0gKi9cblxuXHQkLmZuLmRhdGVwaWNrZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uKCl7XG5cdFx0JC5mbi5kYXRlcGlja2VyID0gb2xkO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cblx0LyogREFURVBJQ0tFUiBEQVRBLUFQSVxuXHQqID09PT09PT09PT09PT09PT09PSAqL1xuXG5cdCQoZG9jdW1lbnQpLm9uKFxuXHRcdCdmb2N1cy5kYXRlcGlja2VyLmRhdGEtYXBpIGNsaWNrLmRhdGVwaWNrZXIuZGF0YS1hcGknLFxuXHRcdCdbZGF0YS1wcm92aWRlPVwiZGF0ZXBpY2tlclwiXScsXG5cdFx0ZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXHRcdFx0aWYgKCR0aGlzLmRhdGEoJ2RhdGVwaWNrZXInKSkgcmV0dXJuO1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Ly8gY29tcG9uZW50IGNsaWNrIHJlcXVpcmVzIHVzIHRvIGV4cGxpY2l0bHkgc2hvdyBpdFxuXHRcdFx0ZGF0ZXBpY2tlci5jYWxsKCR0aGlzLCAnc2hvdycpO1xuXHRcdH1cblx0KTtcblx0JChmdW5jdGlvbigpe1xuXHRcdC8vJCgnW2RhdGEtcHJvdmlkZT1cImRhdGVwaWNrZXItaW5saW5lXCJdJykuZGF0ZXBpY2tlcigpO1xuICAgICAgICAvL3ZpdDogY2hhbmdlZCB0byBzdXBwb3J0IG5vQ29uZmxpY3QoKVxuICAgICAgICBkYXRlcGlja2VyLmNhbGwoJCgnW2RhdGEtcHJvdmlkZT1cImRhdGVwaWNrZXItaW5saW5lXCJdJykpO1xuXHR9KTtcblxufSggd2luZG93LmpRdWVyeSApKTtcblxuLyoqXG5Cb290c3RyYXAtZGF0ZXBpY2tlci4gIFxuRGVzY3JpcHRpb24gYW5kIGV4YW1wbGVzOiBodHRwczovL2dpdGh1Yi5jb20vZXRlcm5pY29kZS9ib290c3RyYXAtZGF0ZXBpY2tlci4gIFxuRm9yICoqaTE4bioqIHlvdSBzaG91bGQgaW5jbHVkZSBqcyBmaWxlIGZyb20gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL2V0ZXJuaWNvZGUvYm9vdHN0cmFwLWRhdGVwaWNrZXIvdHJlZS9tYXN0ZXIvanMvbG9jYWxlc1xuYW5kIHNldCBgbGFuZ3VhZ2VgIG9wdGlvbi4gIFxuU2luY2UgMS40LjAgZGF0ZSBoYXMgZGlmZmVyZW50IGFwcGVhcmFuY2UgaW4gKipwb3B1cCoqIGFuZCAqKmlubGluZSoqIG1vZGVzLiBcblxuQGNsYXNzIGRhdGVcbkBleHRlbmRzIGFic3RyYWN0aW5wdXRcbkBmaW5hbFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJkb2JcIiBkYXRhLXR5cGU9XCJkYXRlXCIgZGF0YS1waz1cIjFcIiBkYXRhLXVybD1cIi9wb3N0XCIgZGF0YS10aXRsZT1cIlNlbGVjdCBkYXRlXCI+MTUvMDUvMTk4NDwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI2RvYicpLmVkaXRhYmxlKHtcbiAgICAgICAgZm9ybWF0OiAneXl5eS1tbS1kZCcsICAgIFxuICAgICAgICB2aWV3Zm9ybWF0OiAnZGQvbW0veXl5eScsICAgIFxuICAgICAgICBkYXRlcGlja2VyOiB7XG4gICAgICAgICAgICAgICAgd2Vla1N0YXJ0OiAxXG4gICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgLy9zdG9yZSBib290c3RyYXAtZGF0ZXBpY2tlciBhcyBiZGF0ZWlja2VyIHRvIGV4Y2x1ZGUgY29uZmxpY3Qgd2l0aCBqUXVlcnkgVUkgb25lXG4gICAgJC5mbi5iZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlci5ub0NvbmZsaWN0KCk7XG4gICAgaWYoISQuZm4uZGF0ZXBpY2tlcikgeyAvL2lmIHRoZXJlIHdlcmUgbm8gb3RoZXIgZGF0ZXBpY2tlcnMsIGtlZXAgYWxzbyBvcmlnaW5hbCBuYW1lXG4gICAgICAgICQuZm4uZGF0ZXBpY2tlciA9ICQuZm4uYmRhdGVwaWNrZXI7ICAgIFxuICAgIH0gICAgXG4gICAgXG4gICAgdmFyIERhdGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2RhdGUnLCBvcHRpb25zLCBEYXRlLmRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy5pbml0UGlja2VyKG9wdGlvbnMsIERhdGUuZGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChEYXRlLCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7ICAgIFxuICAgIFxuICAgICQuZXh0ZW5kKERhdGUucHJvdG90eXBlLCB7XG4gICAgICAgIGluaXRQaWNrZXI6IGZ1bmN0aW9uKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgICAgICAgICAvLydmb3JtYXQnIGlzIHNldCBkaXJlY3RseSBmcm9tIHNldHRpbmdzIG9yIGRhdGEtKiBhdHRyaWJ1dGVzXG5cbiAgICAgICAgICAgIC8vYnkgZGVmYXVsdCB2aWV3Zm9ybWF0IGVxdWFscyB0byBmb3JtYXRcbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy52aWV3Zm9ybWF0ID0gdGhpcy5vcHRpb25zLmZvcm1hdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy90cnkgcGFyc2UgZGF0ZXBpY2tlciBjb25maWcgZGVmaW5lZCBhcyBqc29uIHN0cmluZyBpbiBkYXRhLWRhdGVwaWNrZXJcbiAgICAgICAgICAgIG9wdGlvbnMuZGF0ZXBpY2tlciA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24ob3B0aW9ucy5kYXRlcGlja2VyLCB0cnVlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9vdmVycmlkaW5nIGRhdGVwaWNrZXIgY29uZmlnIChhcyBieSBkZWZhdWx0IGpRdWVyeSBleHRlbmQoKSBpcyBub3QgcmVjdXJzaXZlKVxuICAgICAgICAgICAgLy9zaW5jZSAxLjQgZGF0ZXBpY2tlciBpbnRlcm5hbGx5IHVzZXMgdmlld2Zvcm1hdCBpbnN0ZWFkIG9mIGZvcm1hdC4gRm9ybWF0IGlzIGZvciBzdWJtaXQgb25seVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMuZGF0ZXBpY2tlciwgb3B0aW9ucy5kYXRlcGlja2VyLCB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiB0aGlzLm9wdGlvbnMudmlld2Zvcm1hdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vbGFuZ3VhZ2VcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kYXRlcGlja2VyLmxhbmd1YWdlID0gdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIubGFuZ3VhZ2UgfHwgJ2VuJzsgXG5cbiAgICAgICAgICAgIC8vc3RvcmUgRFBnbG9iYWxcbiAgICAgICAgICAgIHRoaXMuZHBnID0gJC5mbi5iZGF0ZXBpY2tlci5EUEdsb2JhbDsgXG5cbiAgICAgICAgICAgIC8vc3RvcmUgcGFyc2VkIGZvcm1hdHNcbiAgICAgICAgICAgIHRoaXMucGFyc2VkRm9ybWF0ID0gdGhpcy5kcGcucGFyc2VGb3JtYXQodGhpcy5vcHRpb25zLmZvcm1hdCk7XG4gICAgICAgICAgICB0aGlzLnBhcnNlZFZpZXdGb3JtYXQgPSB0aGlzLmRwZy5wYXJzZUZvcm1hdCh0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCk7ICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmJkYXRlcGlja2VyKHRoaXMub3B0aW9ucy5kYXRlcGlja2VyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9cImNsZWFyXCIgbGlua1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmNsZWFyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIgPSAkKCc8YSBocmVmPVwiI1wiPjwvYT4nKS5odG1sKHRoaXMub3B0aW9ucy5jbGVhcikuY2xpY2soJC5wcm94eShmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuJHRwbC5wYXJlbnQoKS5hcHBlbmQoJCgnPGRpdiBjbGFzcz1cImVkaXRhYmxlLWNsZWFyXCI+JykuYXBwZW5kKHRoaXMuJGNsZWFyKSk7ICBcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICB2YWx1ZTJodG1sOiBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICAgICB2YXIgdGV4dCA9IHZhbHVlID8gdGhpcy5kcGcuZm9ybWF0RGF0ZSh2YWx1ZSwgdGhpcy5wYXJzZWRWaWV3Rm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlci5sYW5ndWFnZSkgOiAnJztcbiAgICAgICAgICAgRGF0ZS5zdXBlcmNsYXNzLnZhbHVlMmh0bWwuY2FsbCh0aGlzLCB0ZXh0LCBlbGVtZW50KTsgXG4gICAgICAgIH0sXG5cbiAgICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VEYXRlKGh0bWwsIHRoaXMucGFyc2VkVmlld0Zvcm1hdCk7XG4gICAgICAgIH0sICAgXG5cbiAgICAgICAgdmFsdWUyc3RyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdGhpcy5kcGcuZm9ybWF0RGF0ZSh2YWx1ZSwgdGhpcy5wYXJzZWRGb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRlcGlja2VyLmxhbmd1YWdlKSA6ICcnO1xuICAgICAgICB9LCBcblxuICAgICAgICBzdHIydmFsdWU6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VEYXRlKHN0ciwgdGhpcy5wYXJzZWRGb3JtYXQpO1xuICAgICAgICB9LCBcblxuICAgICAgICB2YWx1ZTJzdWJtaXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTJzdHIodmFsdWUpO1xuICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5iZGF0ZXBpY2tlcigndXBkYXRlJywgdmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaW5wdXQuZGF0YSgnZGF0ZXBpY2tlcicpLmRhdGU7XG4gICAgICAgIH0sICAgICAgIFxuXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhcjogIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuZGF0YSgnZGF0ZXBpY2tlcicpLmRhdGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuc2hvd2J1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ21vdXNldXAnLCAnLmRheScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGlmKCQoZS5jdXJyZW50VGFyZ2V0KS5pcygnLm9sZCcpIHx8ICQoZS5jdXJyZW50VGFyZ2V0KS5pcygnLm5ldycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyICRmb3JtID0gJCh0aGlzKS5jbG9zZXN0KCdmb3JtJyk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJGZvcm0uc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAvL2NoYW5nZWRhdGUgaXMgbm90IHN1aXRhYmxlIGFzIGl0IHRyaWdnZXJlZCB3aGVuIHNob3dpbmcgZGF0ZXBpY2tlci4gc2VlICMxNDlcbiAgICAgICAgICAgLypcbiAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2NoYW5nZURhdGUnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgIHZhciAkZm9ybSA9ICQodGhpcykuY2xvc2VzdCgnZm9ybScpO1xuICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAkZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgICAqL1xuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgLypcbiAgICAgICAgRm9yIGluY29ycmVjdCBkYXRlIGJvb3RzdHJhcC1kYXRlcGlja2VyIHJldHVybnMgY3VycmVudCBkYXRlIHRoYXQgaXMgbm90IHN1aXRhYmxlXG4gICAgICAgIGZvciBkYXRlZmllbGQuXG4gICAgICAgIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBudWxsIGZvciBpbmNvcnJlY3QgZGF0ZS4gIFxuICAgICAgICovXG4gICAgICAgcGFyc2VEYXRlOiBmdW5jdGlvbihzdHIsIGZvcm1hdCkge1xuICAgICAgICAgICB2YXIgZGF0ZSA9IG51bGwsIGZvcm1hdHRlZEJhY2s7XG4gICAgICAgICAgIGlmKHN0cikge1xuICAgICAgICAgICAgICAgZGF0ZSA9IHRoaXMuZHBnLnBhcnNlRGF0ZShzdHIsIGZvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIubGFuZ3VhZ2UpO1xuICAgICAgICAgICAgICAgaWYodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRCYWNrID0gdGhpcy5kcGcuZm9ybWF0RGF0ZShkYXRlLCBmb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRlcGlja2VyLmxhbmd1YWdlKTtcbiAgICAgICAgICAgICAgICAgICBpZihzdHIgIT09IGZvcm1hdHRlZEJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgRGF0ZS5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dC5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IHRwbCBcbiAgICAgICAgQGRlZmF1bHQgPGRpdj48L2Rpdj5cbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHRwbDonPGRpdiBjbGFzcz1cImVkaXRhYmxlLWRhdGUgd2VsbFwiPjwvZGl2PicsXG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgaW5wdXRjbGFzcyBcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi9cbiAgICAgICAgaW5wdXRjbGFzczogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIEZvcm1hdCB1c2VkIGZvciBzZW5kaW5nIHZhbHVlIHRvIHNlcnZlci4gQWxzbyBhcHBsaWVkIHdoZW4gY29udmVydGluZyBkYXRlIGZyb20gPGNvZGU+ZGF0YS12YWx1ZTwvY29kZT4gYXR0cmlidXRlLjxicj5cbiAgICAgICAgUG9zc2libGUgdG9rZW5zIGFyZTogPGNvZGU+ZCwgZGQsIG0sIG1tLCB5eSwgeXl5eTwvY29kZT4gIFxuXG4gICAgICAgIEBwcm9wZXJ0eSBmb3JtYXQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCB5eXl5LW1tLWRkXG4gICAgICAgICoqL1xuICAgICAgICBmb3JtYXQ6J3l5eXktbW0tZGQnLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIGRpc3BsYXlpbmcgZGF0ZS4gQWxzbyBhcHBsaWVkIHdoZW4gY29udmVydGluZyBkYXRlIGZyb20gZWxlbWVudCdzIHRleHQgb24gaW5pdC4gICBcbiAgICAgICAgSWYgbm90IHNwZWNpZmllZCBlcXVhbHMgdG8gPGNvZGU+Zm9ybWF0PC9jb2RlPlxuXG4gICAgICAgIEBwcm9wZXJ0eSB2aWV3Zm9ybWF0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi9cbiAgICAgICAgdmlld2Zvcm1hdDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIENvbmZpZ3VyYXRpb24gb2YgZGF0ZXBpY2tlci5cbiAgICAgICAgRnVsbCBsaXN0IG9mIG9wdGlvbnM6IGh0dHA6Ly9ib290c3RyYXAtZGF0ZXBpY2tlci5yZWFkdGhlZG9jcy5vcmcvZW4vbGF0ZXN0L29wdGlvbnMuaHRtbFxuXG4gICAgICAgIEBwcm9wZXJ0eSBkYXRlcGlja2VyIFxuICAgICAgICBAdHlwZSBvYmplY3RcbiAgICAgICAgQGRlZmF1bHQge1xuICAgICAgICAgICAgd2Vla1N0YXJ0OiAwLFxuICAgICAgICAgICAgc3RhcnRWaWV3OiAwLFxuICAgICAgICAgICAgbWluVmlld01vZGU6IDAsXG4gICAgICAgICAgICBhdXRvY2xvc2U6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgKiovXG4gICAgICAgIGRhdGVwaWNrZXI6e1xuICAgICAgICAgICAgd2Vla1N0YXJ0OiAwLFxuICAgICAgICAgICAgc3RhcnRWaWV3OiAwLFxuICAgICAgICAgICAgbWluVmlld01vZGU6IDAsXG4gICAgICAgICAgICBhdXRvY2xvc2U6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICBUZXh0IHNob3duIGFzIGNsZWFyIGRhdGUgYnV0dG9uLiBcbiAgICAgICAgSWYgPGNvZGU+ZmFsc2U8L2NvZGU+IGNsZWFyIGJ1dHRvbiB3aWxsIG5vdCBiZSByZW5kZXJlZC5cblxuICAgICAgICBAcHJvcGVydHkgY2xlYXIgXG4gICAgICAgIEB0eXBlIGJvb2xlYW58c3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd4IGNsZWFyJ1xuICAgICAgICAqKi9cbiAgICAgICAgY2xlYXI6ICcmdGltZXM7IGNsZWFyJ1xuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGUgPSBEYXRlO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5Cb290c3RyYXAgZGF0ZWZpZWxkIGlucHV0IC0gbW9kaWZpY2F0aW9uIGZvciBpbmxpbmUgbW9kZS5cblNob3dzIG5vcm1hbCA8aW5wdXQgdHlwZT1cInRleHRcIj4gYW5kIGJpbmRzIHBvcHVwIGRhdGVwaWNrZXIuICBcbkF1dG9tYXRpY2FsbHkgc2hvd24gaW4gaW5saW5lIG1vZGUuXG5cbkBjbGFzcyBkYXRlZmllbGRcbkBleHRlbmRzIGRhdGVcblxuQHNpbmNlIDEuNC4wXG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBEYXRlRmllbGQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2RhdGVmaWVsZCcsIG9wdGlvbnMsIERhdGVGaWVsZC5kZWZhdWx0cyk7XG4gICAgICAgIHRoaXMuaW5pdFBpY2tlcihvcHRpb25zLCBEYXRlRmllbGQuZGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChEYXRlRmllbGQsICQuZm4uZWRpdGFibGV0eXBlcy5kYXRlKTsgICAgXG4gICAgXG4gICAgJC5leHRlbmQoRGF0ZUZpZWxkLnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0ID0gdGhpcy4kdHBsLmZpbmQoJ2lucHV0Jyk7XG4gICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3BsYWNlaG9sZGVyJyk7XG4gICAgXG4gICAgICAgICAgICAvL2Jvb3RzdHJhcC1kYXRlcGlja2VyIGlzIHNldCBgYmRhdGVpY2tlcmAgdG8gZXhjbHVkZSBjb25mbGljdCB3aXRoIGpRdWVyeSBVSSBvbmUuIChpbiBkYXRlLmpzKSAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiR0cGwuYmRhdGVwaWNrZXIodGhpcy5vcHRpb25zLmRhdGVwaWNrZXIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL25lZWQgdG8gZGlzYWJsZSBvcmlnaW5hbCBldmVudCBoYW5kbGVyc1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQub2ZmKCdmb2N1cyBrZXlkb3duJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdXBkYXRlIHZhbHVlIG9mIGRhdGVwaWNrZXJcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmtleXVwKCQucHJveHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgIHRoaXMuJHRwbC5yZW1vdmVEYXRhKCdkYXRlJyk7XG4gICAgICAgICAgICAgICB0aGlzLiR0cGwuYmRhdGVwaWNrZXIoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0sICAgXG4gICAgICAgIFxuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUgPyB0aGlzLmRwZy5mb3JtYXREYXRlKHZhbHVlLCB0aGlzLnBhcnNlZFZpZXdGb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRlcGlja2VyLmxhbmd1YWdlKSA6ICcnKTtcbiAgICAgICAgICAgdGhpcy4kdHBsLmJkYXRlcGlja2VyKCd1cGRhdGUnKTtcbiAgICAgICB9LFxuICAgICAgICBcbiAgICAgICBpbnB1dDJ2YWx1ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICByZXR1cm4gdGhpcy5odG1sMnZhbHVlKHRoaXMuJGlucHV0LnZhbCgpKTtcbiAgICAgICB9LCAgICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQucHJvdG90eXBlLmFjdGl2YXRlLmNhbGwodGhpcyk7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICBhdXRvc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgIC8vcmVzZXQgYXV0b3N1Ym1pdCB0byBlbXB0eSAgXG4gICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIERhdGVGaWVsZC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZS5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IHRwbCBcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHRwbDonPGRpdiBjbGFzcz1cImlucHV0LWFwcGVuZCBkYXRlXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIvPjxzcGFuIGNsYXNzPVwiYWRkLW9uXCI+PGkgY2xhc3M9XCJpY29uLXRoXCI+PC9pPjwvc3Bhbj48L2Rpdj4nLFxuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IGlucHV0Y2xhc3MgXG4gICAgICAgIEBkZWZhdWx0ICdpbnB1dC1zbWFsbCdcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGlucHV0Y2xhc3M6ICdpbnB1dC1zbWFsbCcsXG4gICAgICAgIFxuICAgICAgICAvKiBkYXRlcGlja2VyIGNvbmZpZyAqL1xuICAgICAgICBkYXRlcGlja2VyOiB7XG4gICAgICAgICAgICB3ZWVrU3RhcnQ6IDAsXG4gICAgICAgICAgICBzdGFydFZpZXc6IDAsXG4gICAgICAgICAgICBtaW5WaWV3TW9kZTogMCxcbiAgICAgICAgICAgIGF1dG9jbG9zZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGVmaWVsZCA9IERhdGVGaWVsZDtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG4vKipcbkJvb3RzdHJhcC1kYXRldGltZXBpY2tlci4gIFxuQmFzZWQgb24gW3NtYWxvdCBib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIgcGx1Z2luXShodHRwczovL2dpdGh1Yi5jb20vc21hbG90L2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlcikuIFxuQmVmb3JlIHVzYWdlIHlvdSBzaG91bGQgbWFudWFsbHkgaW5jbHVkZSBkZXBlbmRlbnQganMgYW5kIGNzczpcblxuICAgIDxsaW5rIGhyZWY9XCJjc3MvZGF0ZXRpbWVwaWNrZXIuY3NzXCIgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiPjwvbGluaz4gXG4gICAgPHNjcmlwdCBzcmM9XCJqcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIuanNcIj48L3NjcmlwdD5cblxuRm9yICoqaTE4bioqIHlvdSBzaG91bGQgaW5jbHVkZSBqcyBmaWxlIGZyb20gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL3NtYWxvdC9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvdHJlZS9tYXN0ZXIvanMvbG9jYWxlc1xuYW5kIHNldCBgbGFuZ3VhZ2VgIG9wdGlvbi4gIFxuXG5AY2xhc3MgZGF0ZXRpbWVcbkBleHRlbmRzIGFic3RyYWN0aW5wdXRcbkBmaW5hbFxuQHNpbmNlIDEuNC40XG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cImxhc3Rfc2VlblwiIGRhdGEtdHlwZT1cImRhdGV0aW1lXCIgZGF0YS1waz1cIjFcIiBkYXRhLXVybD1cIi9wb3N0XCIgdGl0bGU9XCJTZWxlY3QgZGF0ZSAmIHRpbWVcIj4xNS8wMy8yMDEzIDEyOjQ1PC9hPlxuPHNjcmlwdD5cbiQoZnVuY3Rpb24oKXtcbiAgICAkKCcjbGFzdF9zZWVuJykuZWRpdGFibGUoe1xuICAgICAgICBmb3JtYXQ6ICd5eXl5LW1tLWRkIGhoOmlpJywgICAgXG4gICAgICAgIHZpZXdmb3JtYXQ6ICdkZC9tbS95eXl5IGhoOmlpJywgICAgXG4gICAgICAgIGRhdGV0aW1lcGlja2VyOiB7XG4gICAgICAgICAgICAgICAgd2Vla1N0YXJ0OiAxXG4gICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgRGF0ZVRpbWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2RhdGV0aW1lJywgb3B0aW9ucywgRGF0ZVRpbWUuZGVmYXVsdHMpO1xuICAgICAgICB0aGlzLmluaXRQaWNrZXIob3B0aW9ucywgRGF0ZVRpbWUuZGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChEYXRlVGltZSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQpO1xuXG4gICAgJC5leHRlbmQoRGF0ZVRpbWUucHJvdG90eXBlLCB7XG4gICAgICAgIGluaXRQaWNrZXI6IGZ1bmN0aW9uKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgICAgICAgICAvLydmb3JtYXQnIGlzIHNldCBkaXJlY3RseSBmcm9tIHNldHRpbmdzIG9yIGRhdGEtKiBhdHRyaWJ1dGVzXG5cbiAgICAgICAgICAgIC8vYnkgZGVmYXVsdCB2aWV3Zm9ybWF0IGVxdWFscyB0byBmb3JtYXRcbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy52aWV3Zm9ybWF0ID0gdGhpcy5vcHRpb25zLmZvcm1hdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy90cnkgcGFyc2UgZGF0ZXRpbWVwaWNrZXIgY29uZmlnIGRlZmluZWQgYXMganNvbiBzdHJpbmcgaW4gZGF0YS1kYXRldGltZXBpY2tlclxuICAgICAgICAgICAgb3B0aW9ucy5kYXRldGltZXBpY2tlciA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24ob3B0aW9ucy5kYXRldGltZXBpY2tlciwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vb3ZlcnJpZGluZyBkYXRldGltZXBpY2tlciBjb25maWcgKGFzIGJ5IGRlZmF1bHQgalF1ZXJ5IGV4dGVuZCgpIGlzIG5vdCByZWN1cnNpdmUpXG4gICAgICAgICAgICAvL3NpbmNlIDEuNCBkYXRldGltZXBpY2tlciBpbnRlcm5hbGx5IHVzZXMgdmlld2Zvcm1hdCBpbnN0ZWFkIG9mIGZvcm1hdC4gRm9ybWF0IGlzIGZvciBzdWJtaXQgb25seVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLmRhdGV0aW1lcGlja2VyLCBvcHRpb25zLmRhdGV0aW1lcGlja2VyLCB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiB0aGlzLm9wdGlvbnMudmlld2Zvcm1hdFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vbGFuZ3VhZ2VcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlci5sYW5ndWFnZSA9IHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlci5sYW5ndWFnZSB8fCAnZW4nOyBcblxuICAgICAgICAgICAgLy9zdG9yZSBEUGdsb2JhbFxuICAgICAgICAgICAgdGhpcy5kcGcgPSAkLmZuLmRhdGV0aW1lcGlja2VyLkRQR2xvYmFsOyBcblxuICAgICAgICAgICAgLy9zdG9yZSBwYXJzZWQgZm9ybWF0c1xuICAgICAgICAgICAgdGhpcy5wYXJzZWRGb3JtYXQgPSB0aGlzLmRwZy5wYXJzZUZvcm1hdCh0aGlzLm9wdGlvbnMuZm9ybWF0LCB0aGlzLm9wdGlvbnMuZm9ybWF0VHlwZSk7XG4gICAgICAgICAgICB0aGlzLnBhcnNlZFZpZXdGb3JtYXQgPSB0aGlzLmRwZy5wYXJzZUZvcm1hdCh0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCwgdGhpcy5vcHRpb25zLmZvcm1hdFR5cGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuZGF0ZXRpbWVwaWNrZXIodGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyKTtcblxuICAgICAgICAgICAgLy9hZGp1c3QgY29udGFpbmVyIHBvc2l0aW9uIHdoZW4gdmlld01vZGUgY2hhbmdlc1xuICAgICAgICAgICAgLy9zZWUgaHR0cHM6Ly9naXRodWIuY29tL3NtYWxvdC9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvcHVsbC84MFxuICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2NoYW5nZU1vZGUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAvL3RpbWVvdXQgaGVyZSwgb3RoZXJ3aXNlIGNvbnRhaW5lciBjaGFuZ2VzIHBvc2l0aW9uIGJlZm9yZSBmb3JtIGhhcyBuZXcgc2l6ZVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgZi50cmlnZ2VySGFuZGxlcigncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy9cImNsZWFyXCIgbGlua1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmNsZWFyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIgPSAkKCc8YSBocmVmPVwiI1wiPjwvYT4nKS5odG1sKHRoaXMub3B0aW9ucy5jbGVhcikuY2xpY2soJC5wcm94eShmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcykpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kdHBsLnBhcmVudCgpLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPVwiZWRpdGFibGUtY2xlYXJcIj4nKS5hcHBlbmQodGhpcy4kY2xlYXIpKTsgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHZhbHVlMmh0bWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAvL2Zvcm1hdERhdGUgd29ya3Mgd2l0aCBVVENEYXRlIVxuICAgICAgICAgICAgdmFyIHRleHQgPSB2YWx1ZSA/IHRoaXMuZHBnLmZvcm1hdERhdGUodGhpcy50b1VUQyh2YWx1ZSksIHRoaXMucGFyc2VkVmlld0Zvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyLmxhbmd1YWdlLCB0aGlzLm9wdGlvbnMuZm9ybWF0VHlwZSkgOiAnJztcbiAgICAgICAgICAgIGlmKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBEYXRlVGltZS5zdXBlcmNsYXNzLnZhbHVlMmh0bWwuY2FsbCh0aGlzLCB0ZXh0LCBlbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICAgLy9wYXJzZURhdGUgcmV0dXJuIHV0YyBkYXRlIVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5wYXJzZURhdGUoaHRtbCwgdGhpcy5wYXJzZWRWaWV3Rm9ybWF0KTsgXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPyB0aGlzLmZyb21VVEModmFsdWUpIDogbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICB2YWx1ZTJzdHI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAvL2Zvcm1hdERhdGUgd29ya3Mgd2l0aCBVVENEYXRlIVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdGhpcy5kcGcuZm9ybWF0RGF0ZSh0aGlzLnRvVVRDKHZhbHVlKSwgdGhpcy5wYXJzZWRGb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlci5sYW5ndWFnZSwgdGhpcy5vcHRpb25zLmZvcm1hdFR5cGUpIDogJyc7XG4gICAgICAgfSxcblxuICAgICAgIHN0cjJ2YWx1ZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgIC8vcGFyc2VEYXRlIHJldHVybiB1dGMgZGF0ZSFcbiAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5wYXJzZURhdGUoc3RyLCB0aGlzLnBhcnNlZEZvcm1hdCk7XG4gICAgICAgICAgIHJldHVybiB2YWx1ZSA/IHRoaXMuZnJvbVVUQyh2YWx1ZSkgOiBudWxsO1xuICAgICAgIH0sXG5cbiAgICAgICB2YWx1ZTJzdWJtaXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlMnN0cih2YWx1ZSk7XG4gICAgICAgfSxcblxuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICBpZih2YWx1ZSkge1xuICAgICAgICAgICAgIHRoaXMuJGlucHV0LmRhdGEoJ2RhdGV0aW1lcGlja2VyJykuc2V0RGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgIH1cbiAgICAgICB9LFxuXG4gICAgICAgaW5wdXQydmFsdWU6IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgLy9kYXRlIG1heSBiZSBjbGVhcmVkLCBpbiB0aGF0IGNhc2UgZ2V0RGF0ZSgpIHRyaWdnZXJzIGVycm9yXG4gICAgICAgICAgIHZhciBkdCA9IHRoaXMuJGlucHV0LmRhdGEoJ2RhdGV0aW1lcGlja2VyJyk7XG4gICAgICAgICAgIHJldHVybiBkdC5kYXRlID8gZHQuZ2V0RGF0ZSgpIDogbnVsbDtcbiAgICAgICB9LFxuXG4gICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgIH0sXG5cbiAgICAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy4kaW5wdXQuZGF0YSgnZGF0ZXRpbWVwaWNrZXInKS5kYXRlID0gbnVsbDtcbiAgICAgICAgICB0aGlzLiRpbnB1dC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuc2hvd2J1dHRvbnMpIHtcbiAgICAgICAgICAgICB0aGlzLiRpbnB1dC5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7IFxuICAgICAgICAgIH0gICAgICAgICAgXG4gICAgICAgfSxcblxuICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignbW91c2V1cCcsICcubWludXRlJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICB2YXIgJGZvcm0gPSAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKTtcbiAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgJGZvcm0uc3VibWl0KCk7XG4gICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICB9KTtcbiAgICAgICB9LFxuXG4gICAgICAgLy9jb252ZXJ0IGRhdGUgZnJvbSBsb2NhbCB0byB1dGNcbiAgICAgICB0b1VUQzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgIHJldHVybiB2YWx1ZSA/IG5ldyBEYXRlKHZhbHVlLnZhbHVlT2YoKSAtIHZhbHVlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMCkgOiB2YWx1ZTsgIFxuICAgICAgIH0sXG5cbiAgICAgICAvL2NvbnZlcnQgZGF0ZSBmcm9tIHV0YyB0byBsb2NhbFxuICAgICAgIGZyb21VVEM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICByZXR1cm4gdmFsdWUgPyBuZXcgRGF0ZSh2YWx1ZS52YWx1ZU9mKCkgKyB2YWx1ZS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDApIDogdmFsdWU7ICBcbiAgICAgICB9LFxuXG4gICAgICAgLypcbiAgICAgICAgRm9yIGluY29ycmVjdCBkYXRlIGJvb3RzdHJhcC1kYXRldGltZXBpY2tlciByZXR1cm5zIGN1cnJlbnQgZGF0ZSB0aGF0IGlzIG5vdCBzdWl0YWJsZVxuICAgICAgICBmb3IgZGF0ZXRpbWVmaWVsZC5cbiAgICAgICAgVGhpcyBmdW5jdGlvbiByZXR1cm5zIG51bGwgZm9yIGluY29ycmVjdCBkYXRlLiAgXG4gICAgICAgKi9cbiAgICAgICBwYXJzZURhdGU6IGZ1bmN0aW9uKHN0ciwgZm9ybWF0KSB7XG4gICAgICAgICAgIHZhciBkYXRlID0gbnVsbCwgZm9ybWF0dGVkQmFjaztcbiAgICAgICAgICAgaWYoc3RyKSB7XG4gICAgICAgICAgICAgICBkYXRlID0gdGhpcy5kcGcucGFyc2VEYXRlKHN0ciwgZm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIubGFuZ3VhZ2UsIHRoaXMub3B0aW9ucy5mb3JtYXRUeXBlKTtcbiAgICAgICAgICAgICAgIGlmKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkQmFjayA9IHRoaXMuZHBnLmZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIubGFuZ3VhZ2UsIHRoaXMub3B0aW9ucy5mb3JtYXRUeXBlKTtcbiAgICAgICAgICAgICAgICAgICBpZihzdHIgIT09IGZvcm1hdHRlZEJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIERhdGVUaW1lLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8ZGl2PjwvZGl2PlxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOic8ZGl2IGNsYXNzPVwiZWRpdGFibGUtZGF0ZSB3ZWxsXCI+PC9kaXY+JyxcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBpbnB1dGNsYXNzOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIHNlbmRpbmcgdmFsdWUgdG8gc2VydmVyLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSA8Y29kZT5kYXRhLXZhbHVlPC9jb2RlPiBhdHRyaWJ1dGUuPGJyPlxuICAgICAgICBQb3NzaWJsZSB0b2tlbnMgYXJlOiA8Y29kZT5kLCBkZCwgbSwgbW0sIHl5LCB5eXl5LCBoLCBpPC9jb2RlPiAgXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgZm9ybWF0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgeXl5eS1tbS1kZCBoaDppaVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgZm9ybWF0Oid5eXl5LW1tLWRkIGhoOmlpJyxcbiAgICAgICAgZm9ybWF0VHlwZTonc3RhbmRhcmQnLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIGRpc3BsYXlpbmcgZGF0ZS4gQWxzbyBhcHBsaWVkIHdoZW4gY29udmVydGluZyBkYXRlIGZyb20gZWxlbWVudCdzIHRleHQgb24gaW5pdC4gICBcbiAgICAgICAgSWYgbm90IHNwZWNpZmllZCBlcXVhbHMgdG8gPGNvZGU+Zm9ybWF0PC9jb2RlPlxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IHZpZXdmb3JtYXQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICB2aWV3Zm9ybWF0OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQ29uZmlndXJhdGlvbiBvZiBkYXRldGltZXBpY2tlci5cbiAgICAgICAgRnVsbCBsaXN0IG9mIG9wdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9zbWFsb3QvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyXG5cbiAgICAgICAgQHByb3BlcnR5IGRhdGV0aW1lcGlja2VyIFxuICAgICAgICBAdHlwZSBvYmplY3RcbiAgICAgICAgQGRlZmF1bHQgeyB9XG4gICAgICAgICoqL1xuICAgICAgICBkYXRldGltZXBpY2tlcjp7XG4gICAgICAgICAgICB0b2RheUhpZ2hsaWdodDogZmFsc2UsXG4gICAgICAgICAgICBhdXRvY2xvc2U6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICBUZXh0IHNob3duIGFzIGNsZWFyIGRhdGUgYnV0dG9uLiBcbiAgICAgICAgSWYgPGNvZGU+ZmFsc2U8L2NvZGU+IGNsZWFyIGJ1dHRvbiB3aWxsIG5vdCBiZSByZW5kZXJlZC5cblxuICAgICAgICBAcHJvcGVydHkgY2xlYXIgXG4gICAgICAgIEB0eXBlIGJvb2xlYW58c3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd4IGNsZWFyJ1xuICAgICAgICAqKi9cbiAgICAgICAgY2xlYXI6ICcmdGltZXM7IGNsZWFyJ1xuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGV0aW1lID0gRGF0ZVRpbWU7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuLyoqXG5Cb290c3RyYXAgZGF0ZXRpbWVmaWVsZCBpbnB1dCAtIGRhdGV0aW1lIGlucHV0IGZvciBpbmxpbmUgbW9kZS5cblNob3dzIG5vcm1hbCA8aW5wdXQgdHlwZT1cInRleHRcIj4gYW5kIGJpbmRzIHBvcHVwIGRhdGV0aW1lcGlja2VyLiAgXG5BdXRvbWF0aWNhbGx5IHNob3duIGluIGlubGluZSBtb2RlLlxuXG5AY2xhc3MgZGF0ZXRpbWVmaWVsZFxuQGV4dGVuZHMgZGF0ZXRpbWVcblxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgRGF0ZVRpbWVGaWVsZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnZGF0ZXRpbWVmaWVsZCcsIG9wdGlvbnMsIERhdGVUaW1lRmllbGQuZGVmYXVsdHMpO1xuICAgICAgICB0aGlzLmluaXRQaWNrZXIob3B0aW9ucywgRGF0ZVRpbWVGaWVsZC5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KERhdGVUaW1lRmllbGQsICQuZm4uZWRpdGFibGV0eXBlcy5kYXRldGltZSk7XG4gICAgXG4gICAgJC5leHRlbmQoRGF0ZVRpbWVGaWVsZC5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dCA9IHRoaXMuJHRwbC5maW5kKCdpbnB1dCcpO1xuICAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdwbGFjZWhvbGRlcicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiR0cGwuZGF0ZXRpbWVwaWNrZXIodGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9uZWVkIHRvIGRpc2FibGUgb3JpZ2luYWwgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9mZignZm9jdXMga2V5ZG93bicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3VwZGF0ZSB2YWx1ZSBvZiBkYXRlcGlja2VyXG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5rZXl1cCgkLnByb3h5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICB0aGlzLiR0cGwucmVtb3ZlRGF0YSgnZGF0ZScpO1xuICAgICAgICAgICAgICAgdGhpcy4kdHBsLmRhdGV0aW1lcGlja2VyKCd1cGRhdGUnKTtcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9LCAgIFxuICAgICAgXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LnZhbCh0aGlzLnZhbHVlMmh0bWwodmFsdWUpKTtcbiAgICAgICAgICAgdGhpcy4kdHBsLmRhdGV0aW1lcGlja2VyKCd1cGRhdGUnKTtcbiAgICAgICB9LFxuICAgICAgICBcbiAgICAgICBpbnB1dDJ2YWx1ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICByZXR1cm4gdGhpcy5odG1sMnZhbHVlKHRoaXMuJGlucHV0LnZhbCgpKTtcbiAgICAgICB9LCAgICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQucHJvdG90eXBlLmFjdGl2YXRlLmNhbGwodGhpcyk7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICBhdXRvc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgIC8vcmVzZXQgYXV0b3N1Ym1pdCB0byBlbXB0eSAgXG4gICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIERhdGVUaW1lRmllbGQuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGV0aW1lLmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOic8ZGl2IGNsYXNzPVwiaW5wdXQtYXBwZW5kIGRhdGVcIj48aW5wdXQgdHlwZT1cInRleHRcIi8+PHNwYW4gY2xhc3M9XCJhZGQtb25cIj48aSBjbGFzcz1cImljb24tdGhcIj48L2k+PC9zcGFuPjwvZGl2PicsXG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgaW5wdXRjbGFzcyBcbiAgICAgICAgQGRlZmF1bHQgJ2lucHV0LW1lZGl1bSdcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGlucHV0Y2xhc3M6ICdpbnB1dC1tZWRpdW0nLFxuICAgICAgICBcbiAgICAgICAgLyogZGF0ZXRpbWVwaWNrZXIgY29uZmlnICovXG4gICAgICAgIGRhdGV0aW1lcGlja2VyOntcbiAgICAgICAgICAgIHRvZGF5SGlnaGxpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9jbG9zZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGV0aW1lZmllbGQgPSBEYXRlVGltZUZpZWxkO1xuXG59KHdpbmRvdy5qUXVlcnkpKTsiLCIvKiEgalF1ZXJ5IHYzLjUuMSB8IChjKSBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cbiFmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lLmRvY3VtZW50P3QoZSwhMCk6ZnVuY3Rpb24oZSl7aWYoIWUuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gdChlKX06dChlKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihDLGUpe1widXNlIHN0cmljdFwiO3ZhciB0PVtdLHI9T2JqZWN0LmdldFByb3RvdHlwZU9mLHM9dC5zbGljZSxnPXQuZmxhdD9mdW5jdGlvbihlKXtyZXR1cm4gdC5mbGF0LmNhbGwoZSl9OmZ1bmN0aW9uKGUpe3JldHVybiB0LmNvbmNhdC5hcHBseShbXSxlKX0sdT10LnB1c2gsaT10LmluZGV4T2Ysbj17fSxvPW4udG9TdHJpbmcsdj1uLmhhc093blByb3BlcnR5LGE9di50b1N0cmluZyxsPWEuY2FsbChPYmplY3QpLHk9e30sbT1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZcIm51bWJlclwiIT10eXBlb2YgZS5ub2RlVHlwZX0seD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmZT09PWUud2luZG93fSxFPUMuZG9jdW1lbnQsYz17dHlwZTohMCxzcmM6ITAsbm9uY2U6ITAsbm9Nb2R1bGU6ITB9O2Z1bmN0aW9uIGIoZSx0LG4pe3ZhciByLGksbz0obj1ufHxFKS5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2lmKG8udGV4dD1lLHQpZm9yKHIgaW4gYykoaT10W3JdfHx0LmdldEF0dHJpYnV0ZSYmdC5nZXRBdHRyaWJ1dGUocikpJiZvLnNldEF0dHJpYnV0ZShyLGkpO24uaGVhZC5hcHBlbmRDaGlsZChvKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pfWZ1bmN0aW9uIHcoZSl7cmV0dXJuIG51bGw9PWU/ZStcIlwiOlwib2JqZWN0XCI9PXR5cGVvZiBlfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlP25bby5jYWxsKGUpXXx8XCJvYmplY3RcIjp0eXBlb2YgZX12YXIgZj1cIjMuNS4xXCIsUz1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgUy5mbi5pbml0KGUsdCl9O2Z1bmN0aW9uIHAoZSl7dmFyIHQ9ISFlJiZcImxlbmd0aFwiaW4gZSYmZS5sZW5ndGgsbj13KGUpO3JldHVybiFtKGUpJiYheChlKSYmKFwiYXJyYXlcIj09PW58fDA9PT10fHxcIm51bWJlclwiPT10eXBlb2YgdCYmMDx0JiZ0LTEgaW4gZSl9Uy5mbj1TLnByb3RvdHlwZT17anF1ZXJ5OmYsY29uc3RydWN0b3I6UyxsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHMuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP3MuY2FsbCh0aGlzKTplPDA/dGhpc1tlK3RoaXMubGVuZ3RoXTp0aGlzW2VdfSxwdXNoU3RhY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9Uy5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksZSk7cmV0dXJuIHQucHJldk9iamVjdD10aGlzLHR9LGVhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIFMuZWFjaCh0aGlzLGUpfSxtYXA6ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMucHVzaFN0YWNrKFMubWFwKHRoaXMsZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jYWxsKGUsdCxlKX0pKX0sc2xpY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2socy5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxldmVuOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKFMuZ3JlcCh0aGlzLGZ1bmN0aW9uKGUsdCl7cmV0dXJuKHQrMSklMn0pKX0sb2RkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKFMuZ3JlcCh0aGlzLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQlMn0pKX0sZXE6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5sZW5ndGgsbj0rZSsoZTwwP3Q6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKDA8PW4mJm48dD9bdGhpc1tuXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKCl9LHB1c2g6dSxzb3J0OnQuc29ydCxzcGxpY2U6dC5zcGxpY2V9LFMuZXh0ZW5kPVMuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsaSxvLGE9YXJndW1lbnRzWzBdfHx7fSxzPTEsdT1hcmd1bWVudHMubGVuZ3RoLGw9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgYSYmKGw9YSxhPWFyZ3VtZW50c1tzXXx8e30scysrKSxcIm9iamVjdFwiPT10eXBlb2YgYXx8bShhKXx8KGE9e30pLHM9PT11JiYoYT10aGlzLHMtLSk7czx1O3MrKylpZihudWxsIT0oZT1hcmd1bWVudHNbc10pKWZvcih0IGluIGUpcj1lW3RdLFwiX19wcm90b19fXCIhPT10JiZhIT09ciYmKGwmJnImJihTLmlzUGxhaW5PYmplY3Qocil8fChpPUFycmF5LmlzQXJyYXkocikpKT8obj1hW3RdLG89aSYmIUFycmF5LmlzQXJyYXkobik/W106aXx8Uy5pc1BsYWluT2JqZWN0KG4pP246e30saT0hMSxhW3RdPVMuZXh0ZW5kKGwsbyxyKSk6dm9pZCAwIT09ciYmKGFbdF09cikpO3JldHVybiBhfSxTLmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhmK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLFwiXCIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKGUpfSxub29wOmZ1bmN0aW9uKCl7fSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciB0LG47cmV0dXJuISghZXx8XCJbb2JqZWN0IE9iamVjdF1cIiE9PW8uY2FsbChlKSkmJighKHQ9cihlKSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mKG49di5jYWxsKHQsXCJjb25zdHJ1Y3RvclwiKSYmdC5jb25zdHJ1Y3RvcikmJmEuY2FsbChuKT09PWwpfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciB0O2Zvcih0IGluIGUpcmV0dXJuITE7cmV0dXJuITB9LGdsb2JhbEV2YWw6ZnVuY3Rpb24oZSx0LG4pe2IoZSx7bm9uY2U6dCYmdC5ub25jZX0sbil9LGVhY2g6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTA7aWYocChlKSl7Zm9yKG49ZS5sZW5ndGg7cjxuO3IrKylpZighMT09PXQuY2FsbChlW3JdLHIsZVtyXSkpYnJlYWt9ZWxzZSBmb3IociBpbiBlKWlmKCExPT09dC5jYWxsKGVbcl0scixlW3JdKSlicmVhaztyZXR1cm4gZX0sbWFrZUFycmF5OmZ1bmN0aW9uKGUsdCl7dmFyIG49dHx8W107cmV0dXJuIG51bGwhPWUmJihwKE9iamVjdChlKSk/Uy5tZXJnZShuLFwic3RyaW5nXCI9PXR5cGVvZiBlP1tlXTplKTp1LmNhbGwobixlKSksbn0saW5BcnJheTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGw9PXQ/LTE6aS5jYWxsKHQsZSxuKX0sbWVyZ2U6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49K3QubGVuZ3RoLHI9MCxpPWUubGVuZ3RoO3I8bjtyKyspZVtpKytdPXRbcl07cmV0dXJuIGUubGVuZ3RoPWksZX0sZ3JlcDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPVtdLGk9MCxvPWUubGVuZ3RoLGE9IW47aTxvO2krKykhdChlW2ldLGkpIT09YSYmci5wdXNoKGVbaV0pO3JldHVybiByfSxtYXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz0wLGE9W107aWYocChlKSlmb3Iocj1lLmxlbmd0aDtvPHI7bysrKW51bGwhPShpPXQoZVtvXSxvLG4pKSYmYS5wdXNoKGkpO2Vsc2UgZm9yKG8gaW4gZSludWxsIT0oaT10KGVbb10sbyxuKSkmJmEucHVzaChpKTtyZXR1cm4gZyhhKX0sZ3VpZDoxLHN1cHBvcnQ6eX0pLFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKFMuZm5bU3ltYm9sLml0ZXJhdG9yXT10W1N5bWJvbC5pdGVyYXRvcl0pLFMuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGUsdCl7bltcIltvYmplY3QgXCIrdCtcIl1cIl09dC50b0xvd2VyQ2FzZSgpfSk7dmFyIGQ9ZnVuY3Rpb24obil7dmFyIGUsZCxiLG8saSxoLGYsZyx3LHUsbCxULEMsYSxFLHYscyxjLHksUz1cInNpenpsZVwiKzEqbmV3IERhdGUscD1uLmRvY3VtZW50LGs9MCxyPTAsbT11ZSgpLHg9dWUoKSxBPXVlKCksTj11ZSgpLEQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXQmJihsPSEwKSwwfSxqPXt9Lmhhc093blByb3BlcnR5LHQ9W10scT10LnBvcCxMPXQucHVzaCxIPXQucHVzaCxPPXQuc2xpY2UsUD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihlW25dPT09dClyZXR1cm4gbjtyZXR1cm4tMX0sUj1cImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsTT1cIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsST1cIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIrTStcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFc9XCJcXFxcW1wiK00rXCIqKFwiK0krXCIpKD86XCIrTStcIiooWypeJHwhfl0/PSlcIitNK1wiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIrSStcIikpfClcIitNK1wiKlxcXFxdXCIsRj1cIjooXCIrSStcIikoPzpcXFxcKCgoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXwoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIrVytcIikqKXwuKilcXFxcKXwpXCIsQj1uZXcgUmVnRXhwKE0rXCIrXCIsXCJnXCIpLCQ9bmV3IFJlZ0V4cChcIl5cIitNK1wiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIitNK1wiKyRcIixcImdcIiksXz1uZXcgUmVnRXhwKFwiXlwiK00rXCIqLFwiK00rXCIqXCIpLHo9bmV3IFJlZ0V4cChcIl5cIitNK1wiKihbPit+XXxcIitNK1wiKVwiK00rXCIqXCIpLFU9bmV3IFJlZ0V4cChNK1wifD5cIiksWD1uZXcgUmVnRXhwKEYpLFY9bmV3IFJlZ0V4cChcIl5cIitJK1wiJFwiKSxHPXtJRDpuZXcgUmVnRXhwKFwiXiMoXCIrSStcIilcIiksQ0xBU1M6bmV3IFJlZ0V4cChcIl5cXFxcLihcIitJK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrSStcInxbKl0pXCIpLEFUVFI6bmV3IFJlZ0V4cChcIl5cIitXKSxQU0VVRE86bmV3IFJlZ0V4cChcIl5cIitGKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitNK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrTStcIiooPzooWystXXwpXCIrTStcIiooXFxcXGQrKXwpKVwiK00rXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrUitcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK00rXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK00rXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK00rXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LFk9L0hUTUwkL2ksUT0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLEo9L15oXFxkJC9pLEs9L15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxaPS9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLGVlPS9bK35dLyx0ZT1uZXcgUmVnRXhwKFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIitNK1wiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsXCJnXCIpLG5lPWZ1bmN0aW9uKGUsdCl7dmFyIG49XCIweFwiK2Uuc2xpY2UoMSktNjU1MzY7cmV0dXJuIHR8fChuPDA/U3RyaW5nLmZyb21DaGFyQ29kZShuKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKG4+PjEwfDU1Mjk2LDEwMjMmbnw1NjMyMCkpfSxyZT0vKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxpZT1mdW5jdGlvbihlLHQpe3JldHVybiB0P1wiXFwwXCI9PT1lP1wiXFx1ZmZmZFwiOmUuc2xpY2UoMCwtMSkrXCJcXFxcXCIrZS5jaGFyQ29kZUF0KGUubGVuZ3RoLTEpLnRvU3RyaW5nKDE2KStcIiBcIjpcIlxcXFxcIitlfSxvZT1mdW5jdGlvbigpe1QoKX0sYWU9YmUoZnVuY3Rpb24oZSl7cmV0dXJuITA9PT1lLmRpc2FibGVkJiZcImZpZWxkc2V0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCl9LHtkaXI6XCJwYXJlbnROb2RlXCIsbmV4dDpcImxlZ2VuZFwifSk7dHJ5e0guYXBwbHkodD1PLmNhbGwocC5jaGlsZE5vZGVzKSxwLmNoaWxkTm9kZXMpLHRbcC5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2goZSl7SD17YXBwbHk6dC5sZW5ndGg/ZnVuY3Rpb24oZSx0KXtMLmFwcGx5KGUsTy5jYWxsKHQpKX06ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmxlbmd0aCxyPTA7d2hpbGUoZVtuKytdPXRbcisrXSk7ZS5sZW5ndGg9bi0xfX19ZnVuY3Rpb24gc2UodCxlLG4scil7dmFyIGksbyxhLHMsdSxsLGMsZj1lJiZlLm93bmVyRG9jdW1lbnQscD1lP2Uubm9kZVR5cGU6OTtpZihuPW58fFtdLFwic3RyaW5nXCIhPXR5cGVvZiB0fHwhdHx8MSE9PXAmJjkhPT1wJiYxMSE9PXApcmV0dXJuIG47aWYoIXImJihUKGUpLGU9ZXx8QyxFKSl7aWYoMTEhPT1wJiYodT1aLmV4ZWModCkpKWlmKGk9dVsxXSl7aWYoOT09PXApe2lmKCEoYT1lLmdldEVsZW1lbnRCeUlkKGkpKSlyZXR1cm4gbjtpZihhLmlkPT09aSlyZXR1cm4gbi5wdXNoKGEpLG59ZWxzZSBpZihmJiYoYT1mLmdldEVsZW1lbnRCeUlkKGkpKSYmeShlLGEpJiZhLmlkPT09aSlyZXR1cm4gbi5wdXNoKGEpLG59ZWxzZXtpZih1WzJdKXJldHVybiBILmFwcGx5KG4sZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0KSksbjtpZigoaT11WzNdKSYmZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpcmV0dXJuIEguYXBwbHkobixlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoaSkpLG59aWYoZC5xc2EmJiFOW3QrXCIgXCJdJiYoIXZ8fCF2LnRlc3QodCkpJiYoMSE9PXB8fFwib2JqZWN0XCIhPT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKXtpZihjPXQsZj1lLDE9PT1wJiYoVS50ZXN0KHQpfHx6LnRlc3QodCkpKXsoZj1lZS50ZXN0KHQpJiZ5ZShlLnBhcmVudE5vZGUpfHxlKT09PWUmJmQuc2NvcGV8fCgocz1lLmdldEF0dHJpYnV0ZShcImlkXCIpKT9zPXMucmVwbGFjZShyZSxpZSk6ZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLHM9UykpLG89KGw9aCh0KSkubGVuZ3RoO3doaWxlKG8tLSlsW29dPShzP1wiI1wiK3M6XCI6c2NvcGVcIikrXCIgXCIreGUobFtvXSk7Yz1sLmpvaW4oXCIsXCIpfXRyeXtyZXR1cm4gSC5hcHBseShuLGYucXVlcnlTZWxlY3RvckFsbChjKSksbn1jYXRjaChlKXtOKHQsITApfWZpbmFsbHl7cz09PVMmJmUucmVtb3ZlQXR0cmlidXRlKFwiaWRcIil9fX1yZXR1cm4gZyh0LnJlcGxhY2UoJCxcIiQxXCIpLGUsbixyKX1mdW5jdGlvbiB1ZSgpe3ZhciByPVtdO3JldHVybiBmdW5jdGlvbiBlKHQsbil7cmV0dXJuIHIucHVzaCh0K1wiIFwiKT5iLmNhY2hlTGVuZ3RoJiZkZWxldGUgZVtyLnNoaWZ0KCldLGVbdCtcIiBcIl09bn19ZnVuY3Rpb24gbGUoZSl7cmV0dXJuIGVbU109ITAsZX1mdW5jdGlvbiBjZShlKXt2YXIgdD1DLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTt0cnl7cmV0dXJuISFlKHQpfWNhdGNoKGUpe3JldHVybiExfWZpbmFsbHl7dC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfX1mdW5jdGlvbiBmZShlLHQpe3ZhciBuPWUuc3BsaXQoXCJ8XCIpLHI9bi5sZW5ndGg7d2hpbGUoci0tKWIuYXR0ckhhbmRsZVtuW3JdXT10fWZ1bmN0aW9uIHBlKGUsdCl7dmFyIG49dCYmZSxyPW4mJjE9PT1lLm5vZGVUeXBlJiYxPT09dC5ub2RlVHlwZSYmZS5zb3VyY2VJbmRleC10LnNvdXJjZUluZGV4O2lmKHIpcmV0dXJuIHI7aWYobil3aGlsZShuPW4ubmV4dFNpYmxpbmcpaWYobj09PXQpcmV0dXJuLTE7cmV0dXJuIGU/MTotMX1mdW5jdGlvbiBkZSh0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuXCJpbnB1dFwiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZlLnR5cGU9PT10fX1mdW5jdGlvbiBoZShuKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybihcImlucHV0XCI9PT10fHxcImJ1dHRvblwiPT09dCkmJmUudHlwZT09PW59fWZ1bmN0aW9uIGdlKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm5cImZvcm1cImluIGU/ZS5wYXJlbnROb2RlJiYhMT09PWUuZGlzYWJsZWQ/XCJsYWJlbFwiaW4gZT9cImxhYmVsXCJpbiBlLnBhcmVudE5vZGU/ZS5wYXJlbnROb2RlLmRpc2FibGVkPT09dDplLmRpc2FibGVkPT09dDplLmlzRGlzYWJsZWQ9PT10fHxlLmlzRGlzYWJsZWQhPT0hdCYmYWUoZSk9PT10OmUuZGlzYWJsZWQ9PT10OlwibGFiZWxcImluIGUmJmUuZGlzYWJsZWQ9PT10fX1mdW5jdGlvbiB2ZShhKXtyZXR1cm4gbGUoZnVuY3Rpb24obyl7cmV0dXJuIG89K28sbGUoZnVuY3Rpb24oZSx0KXt2YXIgbixyPWEoW10sZS5sZW5ndGgsbyksaT1yLmxlbmd0aDt3aGlsZShpLS0pZVtuPXJbaV1dJiYoZVtuXT0hKHRbbl09ZVtuXSkpfSl9KX1mdW5jdGlvbiB5ZShlKXtyZXR1cm4gZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmV9Zm9yKGUgaW4gZD1zZS5zdXBwb3J0PXt9LGk9c2UuaXNYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5uYW1lc3BhY2VVUkksbj0oZS5vd25lckRvY3VtZW50fHxlKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIVkudGVzdCh0fHxuJiZuLm5vZGVOYW1lfHxcIkhUTUxcIil9LFQ9c2Uuc2V0RG9jdW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbixyPWU/ZS5vd25lckRvY3VtZW50fHxlOnA7cmV0dXJuIHIhPUMmJjk9PT1yLm5vZGVUeXBlJiZyLmRvY3VtZW50RWxlbWVudCYmKGE9KEM9cikuZG9jdW1lbnRFbGVtZW50LEU9IWkoQykscCE9QyYmKG49Qy5kZWZhdWx0VmlldykmJm4udG9wIT09biYmKG4uYWRkRXZlbnRMaXN0ZW5lcj9uLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIixvZSwhMSk6bi5hdHRhY2hFdmVudCYmbi5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsb2UpKSxkLnNjb3BlPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBhLmFwcGVuZENoaWxkKGUpLmFwcGVuZENoaWxkKEMuY3JlYXRlRWxlbWVudChcImRpdlwiKSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUucXVlcnlTZWxlY3RvckFsbCYmIWUucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSBmaWVsZHNldCBkaXZcIikubGVuZ3RofSksZC5hdHRyaWJ1dGVzPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNsYXNzTmFtZT1cImlcIiwhZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIil9KSxkLmdldEVsZW1lbnRzQnlUYWdOYW1lPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmFwcGVuZENoaWxkKEMuY3JlYXRlQ29tbWVudChcIlwiKSksIWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aH0pLGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZT1LLnRlc3QoQy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSxkLmdldEJ5SWQ9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQoZSkuaWQ9UywhQy5nZXRFbGVtZW50c0J5TmFtZXx8IUMuZ2V0RWxlbWVudHNCeU5hbWUoUykubGVuZ3RofSksZC5nZXRCeUlkPyhiLmZpbHRlci5JRD1mdW5jdGlvbihlKXt2YXIgdD1lLnJlcGxhY2UodGUsbmUpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PXR9fSxiLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmRSl7dmFyIG49dC5nZXRFbGVtZW50QnlJZChlKTtyZXR1cm4gbj9bbl06W119fSk6KGIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciBuPWUucmVwbGFjZSh0ZSxuZSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZU5vZGUmJmUuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiB0JiZ0LnZhbHVlPT09bn19LGIuZmluZC5JRD1mdW5jdGlvbihlLHQpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0LmdldEVsZW1lbnRCeUlkJiZFKXt2YXIgbixyLGksbz10LmdldEVsZW1lbnRCeUlkKGUpO2lmKG8pe2lmKChuPW8uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpKSYmbi52YWx1ZT09PWUpcmV0dXJuW29dO2k9dC5nZXRFbGVtZW50c0J5TmFtZShlKSxyPTA7d2hpbGUobz1pW3IrK10paWYoKG49by5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb119cmV0dXJuW119fSksYi5maW5kLlRBRz1kLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGUsdCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudHNCeVRhZ05hbWU/dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTpkLnFzYT90LnF1ZXJ5U2VsZWN0b3JBbGwoZSk6dm9pZCAwfTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9W10saT0wLG89dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTtpZihcIipcIj09PWUpe3doaWxlKG49b1tpKytdKTE9PT1uLm5vZGVUeXBlJiZyLnB1c2gobik7cmV0dXJuIHJ9cmV0dXJuIG99LGIuZmluZC5DTEFTUz1kLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmRSlyZXR1cm4gdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGUpfSxzPVtdLHY9W10sKGQucXNhPUsudGVzdChDLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGNlKGZ1bmN0aW9uKGUpe3ZhciB0O2EuYXBwZW5kQ2hpbGQoZSkuaW5uZXJIVE1MPVwiPGEgaWQ9J1wiK1MrXCInPjwvYT48c2VsZWN0IGlkPSdcIitTK1wiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsZS5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoJiZ2LnB1c2goXCJbKl4kXT1cIitNK1wiKig/OicnfFxcXCJcXFwiKVwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8di5wdXNoKFwiXFxcXFtcIitNK1wiKig/OnZhbHVlfFwiK1IrXCIpXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIrUytcIi1dXCIpLmxlbmd0aHx8di5wdXNoKFwifj1cIiksKHQ9Qy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcIlwiKSxlLmFwcGVuZENoaWxkKHQpLGUucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPScnXVwiKS5sZW5ndGh8fHYucHVzaChcIlxcXFxbXCIrTStcIipuYW1lXCIrTStcIio9XCIrTStcIiooPzonJ3xcXFwiXFxcIilcIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHx2LnB1c2goXCI6Y2hlY2tlZFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiK1MrXCIrKlwiKS5sZW5ndGh8fHYucHVzaChcIi4jLitbK35dXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIlxcXFxcXGZcIiksdi5wdXNoKFwiW1xcXFxyXFxcXG5cXFxcZl1cIil9KSxjZShmdW5jdGlvbihlKXtlLmlubmVySFRNTD1cIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciB0PUMuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO3Quc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGUuYXBwZW5kQ2hpbGQodCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiRFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGgmJnYucHVzaChcIm5hbWVcIitNK1wiKlsqXiR8IX5dPz1cIiksMiE9PWUucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCYmdi5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxhLmFwcGVuZENoaWxkKGUpLmRpc2FibGVkPSEwLDIhPT1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoJiZ2LnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIiksdi5wdXNoKFwiLC4qOlwiKX0pKSwoZC5tYXRjaGVzU2VsZWN0b3I9Sy50ZXN0KGM9YS5tYXRjaGVzfHxhLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8YS5tb3pNYXRjaGVzU2VsZWN0b3J8fGEub01hdGNoZXNTZWxlY3Rvcnx8YS5tc01hdGNoZXNTZWxlY3RvcikpJiZjZShmdW5jdGlvbihlKXtkLmRpc2Nvbm5lY3RlZE1hdGNoPWMuY2FsbChlLFwiKlwiKSxjLmNhbGwoZSxcIltzIT0nJ106eFwiKSxzLnB1c2goXCIhPVwiLEYpfSksdj12Lmxlbmd0aCYmbmV3IFJlZ0V4cCh2LmpvaW4oXCJ8XCIpKSxzPXMubGVuZ3RoJiZuZXcgUmVnRXhwKHMuam9pbihcInxcIikpLHQ9Sy50ZXN0KGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24pLHk9dHx8Sy50ZXN0KGEuY29udGFpbnMpP2Z1bmN0aW9uKGUsdCl7dmFyIG49OT09PWUubm9kZVR5cGU/ZS5kb2N1bWVudEVsZW1lbnQ6ZSxyPXQmJnQucGFyZW50Tm9kZTtyZXR1cm4gZT09PXJ8fCEoIXJ8fDEhPT1yLm5vZGVUeXBlfHwhKG4uY29udGFpbnM/bi5jb250YWlucyhyKTplLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHIpKSl9OmZ1bmN0aW9uKGUsdCl7aWYodCl3aGlsZSh0PXQucGFyZW50Tm9kZSlpZih0PT09ZSlyZXR1cm4hMDtyZXR1cm4hMX0sRD10P2Z1bmN0aW9uKGUsdCl7aWYoZT09PXQpcmV0dXJuIGw9ITAsMDt2YXIgbj0hZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gbnx8KDEmKG49KGUub3duZXJEb2N1bWVudHx8ZSk9PSh0Lm93bmVyRG9jdW1lbnR8fHQpP2UuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCk6MSl8fCFkLnNvcnREZXRhY2hlZCYmdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlKT09PW4/ZT09Q3x8ZS5vd25lckRvY3VtZW50PT1wJiZ5KHAsZSk/LTE6dD09Q3x8dC5vd25lckRvY3VtZW50PT1wJiZ5KHAsdCk/MTp1P1AodSxlKS1QKHUsdCk6MDo0Jm4/LTE6MSl9OmZ1bmN0aW9uKGUsdCl7aWYoZT09PXQpcmV0dXJuIGw9ITAsMDt2YXIgbixyPTAsaT1lLnBhcmVudE5vZGUsbz10LnBhcmVudE5vZGUsYT1bZV0scz1bdF07aWYoIWl8fCFvKXJldHVybiBlPT1DPy0xOnQ9PUM/MTppPy0xOm8/MTp1P1AodSxlKS1QKHUsdCk6MDtpZihpPT09bylyZXR1cm4gcGUoZSx0KTtuPWU7d2hpbGUobj1uLnBhcmVudE5vZGUpYS51bnNoaWZ0KG4pO249dDt3aGlsZShuPW4ucGFyZW50Tm9kZSlzLnVuc2hpZnQobik7d2hpbGUoYVtyXT09PXNbcl0pcisrO3JldHVybiByP3BlKGFbcl0sc1tyXSk6YVtyXT09cD8tMTpzW3JdPT1wPzE6MH0pLEN9LHNlLm1hdGNoZXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gc2UoZSxudWxsLG51bGwsdCl9LHNlLm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihlLHQpe2lmKFQoZSksZC5tYXRjaGVzU2VsZWN0b3ImJkUmJiFOW3QrXCIgXCJdJiYoIXN8fCFzLnRlc3QodCkpJiYoIXZ8fCF2LnRlc3QodCkpKXRyeXt2YXIgbj1jLmNhbGwoZSx0KTtpZihufHxkLmRpc2Nvbm5lY3RlZE1hdGNofHxlLmRvY3VtZW50JiYxMSE9PWUuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIG59Y2F0Y2goZSl7Tih0LCEwKX1yZXR1cm4gMDxzZSh0LEMsbnVsbCxbZV0pLmxlbmd0aH0sc2UuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZS5vd25lckRvY3VtZW50fHxlKSE9QyYmVChlKSx5KGUsdCl9LHNlLmF0dHI9ZnVuY3Rpb24oZSx0KXsoZS5vd25lckRvY3VtZW50fHxlKSE9QyYmVChlKTt2YXIgbj1iLmF0dHJIYW5kbGVbdC50b0xvd2VyQ2FzZSgpXSxyPW4mJmouY2FsbChiLmF0dHJIYW5kbGUsdC50b0xvd2VyQ2FzZSgpKT9uKGUsdCwhRSk6dm9pZCAwO3JldHVybiB2b2lkIDAhPT1yP3I6ZC5hdHRyaWJ1dGVzfHwhRT9lLmdldEF0dHJpYnV0ZSh0KToocj1lLmdldEF0dHJpYnV0ZU5vZGUodCkpJiZyLnNwZWNpZmllZD9yLnZhbHVlOm51bGx9LHNlLmVzY2FwZT1mdW5jdGlvbihlKXtyZXR1cm4oZStcIlwiKS5yZXBsYWNlKHJlLGllKX0sc2UuZXJyb3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIrZSl9LHNlLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1bXSxyPTAsaT0wO2lmKGw9IWQuZGV0ZWN0RHVwbGljYXRlcyx1PSFkLnNvcnRTdGFibGUmJmUuc2xpY2UoMCksZS5zb3J0KEQpLGwpe3doaWxlKHQ9ZVtpKytdKXQ9PT1lW2ldJiYocj1uLnB1c2goaSkpO3doaWxlKHItLSllLnNwbGljZShuW3JdLDEpfXJldHVybiB1PW51bGwsZX0sbz1zZS5nZXRUZXh0PWZ1bmN0aW9uKGUpe3ZhciB0LG49XCJcIixyPTAsaT1lLm5vZGVUeXBlO2lmKGkpe2lmKDE9PT1pfHw5PT09aXx8MTE9PT1pKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZS50ZXh0Q29udGVudClyZXR1cm4gZS50ZXh0Q29udGVudDtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpbis9byhlKX1lbHNlIGlmKDM9PT1pfHw0PT09aSlyZXR1cm4gZS5ub2RlVmFsdWV9ZWxzZSB3aGlsZSh0PWVbcisrXSluKz1vKHQpO3JldHVybiBufSwoYj1zZS5zZWxlY3RvcnM9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzpsZSxtYXRjaDpHLGF0dHJIYW5kbGU6e30sZmluZDp7fSxyZWxhdGl2ZTp7XCI+XCI6e2RpcjpcInBhcmVudE5vZGVcIixmaXJzdDohMH0sXCIgXCI6e2RpcjpcInBhcmVudE5vZGVcIn0sXCIrXCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wiLGZpcnN0OiEwfSxcIn5cIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCJ9fSxwcmVGaWx0ZXI6e0FUVFI6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS5yZXBsYWNlKHRlLG5lKSxlWzNdPShlWzNdfHxlWzRdfHxlWzVdfHxcIlwiKS5yZXBsYWNlKHRlLG5lKSxcIn49XCI9PT1lWzJdJiYoZVszXT1cIiBcIitlWzNdK1wiIFwiKSxlLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0udG9Mb3dlckNhc2UoKSxcIm50aFwiPT09ZVsxXS5zbGljZSgwLDMpPyhlWzNdfHxzZS5lcnJvcihlWzBdKSxlWzRdPSsoZVs0XT9lWzVdKyhlWzZdfHwxKToyKihcImV2ZW5cIj09PWVbM118fFwib2RkXCI9PT1lWzNdKSksZVs1XT0rKGVbN10rZVs4XXx8XCJvZGRcIj09PWVbM10pKTplWzNdJiZzZS5lcnJvcihlWzBdKSxlfSxQU0VVRE86ZnVuY3Rpb24oZSl7dmFyIHQsbj0hZVs2XSYmZVsyXTtyZXR1cm4gRy5DSElMRC50ZXN0KGVbMF0pP251bGw6KGVbM10/ZVsyXT1lWzRdfHxlWzVdfHxcIlwiOm4mJlgudGVzdChuKSYmKHQ9aChuLCEwKSkmJih0PW4uaW5kZXhPZihcIilcIixuLmxlbmd0aC10KS1uLmxlbmd0aCkmJihlWzBdPWVbMF0uc2xpY2UoMCx0KSxlWzJdPW4uc2xpY2UoMCx0KSksZS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZSh0ZSxuZSkudG9Mb3dlckNhc2UoKTtyZXR1cm5cIipcIj09PWU/ZnVuY3Rpb24oKXtyZXR1cm4hMH06ZnVuY3Rpb24oZSl7cmV0dXJuIGUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXR9fSxDTEFTUzpmdW5jdGlvbihlKXt2YXIgdD1tW2UrXCIgXCJdO3JldHVybiB0fHwodD1uZXcgUmVnRXhwKFwiKF58XCIrTStcIilcIitlK1wiKFwiK00rXCJ8JClcIikpJiZtKGUsZnVuY3Rpb24oZSl7cmV0dXJuIHQudGVzdChcInN0cmluZ1wiPT10eXBlb2YgZS5jbGFzc05hbWUmJmUuY2xhc3NOYW1lfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgZS5nZXRBdHRyaWJ1dGUmJmUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIpfSl9LEFUVFI6ZnVuY3Rpb24obixyLGkpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1zZS5hdHRyKGUsbik7cmV0dXJuIG51bGw9PXQ/XCIhPVwiPT09cjohcnx8KHQrPVwiXCIsXCI9XCI9PT1yP3Q9PT1pOlwiIT1cIj09PXI/dCE9PWk6XCJePVwiPT09cj9pJiYwPT09dC5pbmRleE9mKGkpOlwiKj1cIj09PXI/aSYmLTE8dC5pbmRleE9mKGkpOlwiJD1cIj09PXI/aSYmdC5zbGljZSgtaS5sZW5ndGgpPT09aTpcIn49XCI9PT1yPy0xPChcIiBcIit0LnJlcGxhY2UoQixcIiBcIikrXCIgXCIpLmluZGV4T2YoaSk6XCJ8PVwiPT09ciYmKHQ9PT1pfHx0LnNsaWNlKDAsaS5sZW5ndGgrMSk9PT1pK1wiLVwiKSl9fSxDSElMRDpmdW5jdGlvbihoLGUsdCxnLHYpe3ZhciB5PVwibnRoXCIhPT1oLnNsaWNlKDAsMyksbT1cImxhc3RcIiE9PWguc2xpY2UoLTQpLHg9XCJvZi10eXBlXCI9PT1lO3JldHVybiAxPT09ZyYmMD09PXY/ZnVuY3Rpb24oZSl7cmV0dXJuISFlLnBhcmVudE5vZGV9OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYSxzLHUsbD15IT09bT9cIm5leHRTaWJsaW5nXCI6XCJwcmV2aW91c1NpYmxpbmdcIixjPWUucGFyZW50Tm9kZSxmPXgmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxwPSFuJiYheCxkPSExO2lmKGMpe2lmKHkpe3doaWxlKGwpe2E9ZTt3aGlsZShhPWFbbF0paWYoeD9hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1mOjE9PT1hLm5vZGVUeXBlKXJldHVybiExO3U9bD1cIm9ubHlcIj09PWgmJiF1JiZcIm5leHRTaWJsaW5nXCJ9cmV0dXJuITB9aWYodT1bbT9jLmZpcnN0Q2hpbGQ6Yy5sYXN0Q2hpbGRdLG0mJnApe2Q9KHM9KHI9KGk9KG89KGE9YylbU118fChhW1NdPXt9KSlbYS51bmlxdWVJRF18fChvW2EudW5pcXVlSURdPXt9KSlbaF18fFtdKVswXT09PWsmJnJbMV0pJiZyWzJdLGE9cyYmYy5jaGlsZE5vZGVzW3NdO3doaWxlKGE9KytzJiZhJiZhW2xdfHwoZD1zPTApfHx1LnBvcCgpKWlmKDE9PT1hLm5vZGVUeXBlJiYrK2QmJmE9PT1lKXtpW2hdPVtrLHMsZF07YnJlYWt9fWVsc2UgaWYocCYmKGQ9cz0ocj0oaT0obz0oYT1lKVtTXXx8KGFbU109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXXx8W10pWzBdPT09ayYmclsxXSksITE9PT1kKXdoaWxlKGE9KytzJiZhJiZhW2xdfHwoZD1zPTApfHx1LnBvcCgpKWlmKCh4P2Eubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWY6MT09PWEubm9kZVR5cGUpJiYrK2QmJihwJiYoKGk9KG89YVtTXXx8KGFbU109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXT1bayxkXSksYT09PWUpKWJyZWFrO3JldHVybihkLT12KT09PWd8fGQlZz09MCYmMDw9ZC9nfX19LFBTRVVETzpmdW5jdGlvbihlLG8pe3ZhciB0LGE9Yi5wc2V1ZG9zW2VdfHxiLnNldEZpbHRlcnNbZS50b0xvd2VyQ2FzZSgpXXx8c2UuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiK2UpO3JldHVybiBhW1NdP2Eobyk6MTxhLmxlbmd0aD8odD1bZSxlLFwiXCIsb10sYi5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGUudG9Mb3dlckNhc2UoKSk/bGUoZnVuY3Rpb24oZSx0KXt2YXIgbixyPWEoZSxvKSxpPXIubGVuZ3RoO3doaWxlKGktLSllW249UChlLHJbaV0pXT0hKHRbbl09cltpXSl9KTpmdW5jdGlvbihlKXtyZXR1cm4gYShlLDAsdCl9KTphfX0scHNldWRvczp7bm90OmxlKGZ1bmN0aW9uKGUpe3ZhciByPVtdLGk9W10scz1mKGUucmVwbGFjZSgkLFwiJDFcIikpO3JldHVybiBzW1NdP2xlKGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG89cyhlLG51bGwscixbXSksYT1lLmxlbmd0aDt3aGlsZShhLS0pKGk9b1thXSkmJihlW2FdPSEodFthXT1pKSl9KTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHJbMF09ZSxzKHIsbnVsbCxuLGkpLHJbMF09bnVsbCwhaS5wb3AoKX19KSxoYXM6bGUoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiAwPHNlKHQsZSkubGVuZ3RofX0pLGNvbnRhaW5zOmxlKGZ1bmN0aW9uKHQpe3JldHVybiB0PXQucmVwbGFjZSh0ZSxuZSksZnVuY3Rpb24oZSl7cmV0dXJuLTE8KGUudGV4dENvbnRlbnR8fG8oZSkpLmluZGV4T2YodCl9fSksbGFuZzpsZShmdW5jdGlvbihuKXtyZXR1cm4gVi50ZXN0KG58fFwiXCIpfHxzZS5lcnJvcihcInVuc3VwcG9ydGVkIGxhbmc6IFwiK24pLG49bi5yZXBsYWNlKHRlLG5lKS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKGUpe3ZhciB0O2Rve2lmKHQ9RT9lLmxhbmc6ZS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKXx8ZS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKXJldHVybih0PXQudG9Mb3dlckNhc2UoKSk9PT1ufHwwPT09dC5pbmRleE9mKG4rXCItXCIpfXdoaWxlKChlPWUucGFyZW50Tm9kZSkmJjE9PT1lLm5vZGVUeXBlKTtyZXR1cm4hMX19KSx0YXJnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9bi5sb2NhdGlvbiYmbi5sb2NhdGlvbi5oYXNoO3JldHVybiB0JiZ0LnNsaWNlKDEpPT09ZS5pZH0scm9vdDpmdW5jdGlvbihlKXtyZXR1cm4gZT09PWF9LGZvY3VzOmZ1bmN0aW9uKGUpe3JldHVybiBlPT09Qy5hY3RpdmVFbGVtZW50JiYoIUMuaGFzRm9jdXN8fEMuaGFzRm9jdXMoKSkmJiEhKGUudHlwZXx8ZS5ocmVmfHx+ZS50YWJJbmRleCl9LGVuYWJsZWQ6Z2UoITEpLGRpc2FibGVkOmdlKCEwKSxjaGVja2VkOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiYhIWUuY2hlY2tlZHx8XCJvcHRpb25cIj09PXQmJiEhZS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsITA9PT1lLnNlbGVjdGVkfSxlbXB0eTpmdW5jdGlvbihlKXtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpaWYoZS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIWIucHNldWRvcy5lbXB0eShlKX0saGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiBKLnRlc3QoZS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGUpe3JldHVybiBRLnRlc3QoZS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09dCYmXCJidXR0b25cIj09PWUudHlwZXx8XCJidXR0b25cIj09PXR9LHRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuXCJpbnB1dFwiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZcInRleHRcIj09PWUudHlwZSYmKG51bGw9PSh0PWUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSl8fFwidGV4dFwiPT09dC50b0xvd2VyQ2FzZSgpKX0sZmlyc3Q6dmUoZnVuY3Rpb24oKXtyZXR1cm5bMF19KSxsYXN0OnZlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuW3QtMV19KSxlcTp2ZShmdW5jdGlvbihlLHQsbil7cmV0dXJuW248MD9uK3Q6bl19KSxldmVuOnZlKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7bjx0O24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksb2RkOnZlKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTE7bjx0O24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksbHQ6dmUoZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1uPDA/bit0OnQ8bj90Om47MDw9LS1yOyllLnB1c2gocik7cmV0dXJuIGV9KSxndDp2ZShmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPW48MD9uK3Q6bjsrK3I8dDspZS5wdXNoKHIpO3JldHVybiBlfSl9fSkucHNldWRvcy5udGg9Yi5wc2V1ZG9zLmVxLHtyYWRpbzohMCxjaGVja2JveDohMCxmaWxlOiEwLHBhc3N3b3JkOiEwLGltYWdlOiEwfSliLnBzZXVkb3NbZV09ZGUoZSk7Zm9yKGUgaW57c3VibWl0OiEwLHJlc2V0OiEwfSliLnBzZXVkb3NbZV09aGUoZSk7ZnVuY3Rpb24gbWUoKXt9ZnVuY3Rpb24geGUoZSl7Zm9yKHZhciB0PTAsbj1lLmxlbmd0aCxyPVwiXCI7dDxuO3QrKylyKz1lW3RdLnZhbHVlO3JldHVybiByfWZ1bmN0aW9uIGJlKHMsZSx0KXt2YXIgdT1lLmRpcixsPWUubmV4dCxjPWx8fHUsZj10JiZcInBhcmVudE5vZGVcIj09PWMscD1yKys7cmV0dXJuIGUuZmlyc3Q/ZnVuY3Rpb24oZSx0LG4pe3doaWxlKGU9ZVt1XSlpZigxPT09ZS5ub2RlVHlwZXx8ZilyZXR1cm4gcyhlLHQsbik7cmV0dXJuITF9OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYT1bayxwXTtpZihuKXt3aGlsZShlPWVbdV0paWYoKDE9PT1lLm5vZGVUeXBlfHxmKSYmcyhlLHQsbikpcmV0dXJuITB9ZWxzZSB3aGlsZShlPWVbdV0paWYoMT09PWUubm9kZVR5cGV8fGYpaWYoaT0obz1lW1NdfHwoZVtTXT17fSkpW2UudW5pcXVlSURdfHwob1tlLnVuaXF1ZUlEXT17fSksbCYmbD09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSllPWVbdV18fGU7ZWxzZXtpZigocj1pW2NdKSYmclswXT09PWsmJnJbMV09PT1wKXJldHVybiBhWzJdPXJbMl07aWYoKGlbY109YSlbMl09cyhlLHQsbikpcmV0dXJuITB9cmV0dXJuITF9fWZ1bmN0aW9uIHdlKGkpe3JldHVybiAxPGkubGVuZ3RoP2Z1bmN0aW9uKGUsdCxuKXt2YXIgcj1pLmxlbmd0aDt3aGlsZShyLS0paWYoIWlbcl0oZSx0LG4pKXJldHVybiExO3JldHVybiEwfTppWzBdfWZ1bmN0aW9uIFRlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGE9W10scz0wLHU9ZS5sZW5ndGgsbD1udWxsIT10O3M8dTtzKyspKG89ZVtzXSkmJihuJiYhbihvLHIsaSl8fChhLnB1c2gobyksbCYmdC5wdXNoKHMpKSk7cmV0dXJuIGF9ZnVuY3Rpb24gQ2UoZCxoLGcsdix5LGUpe3JldHVybiB2JiYhdltTXSYmKHY9Q2UodikpLHkmJiF5W1NdJiYoeT1DZSh5LGUpKSxsZShmdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscz1bXSx1PVtdLGw9dC5sZW5ndGgsYz1lfHxmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPTAsaT10Lmxlbmd0aDtyPGk7cisrKXNlKGUsdFtyXSxuKTtyZXR1cm4gbn0oaHx8XCIqXCIsbi5ub2RlVHlwZT9bbl06bixbXSksZj0hZHx8IWUmJmg/YzpUZShjLHMsZCxuLHIpLHA9Zz95fHwoZT9kOmx8fHYpP1tdOnQ6ZjtpZihnJiZnKGYscCxuLHIpLHYpe2k9VGUocCx1KSx2KGksW10sbixyKSxvPWkubGVuZ3RoO3doaWxlKG8tLSkoYT1pW29dKSYmKHBbdVtvXV09IShmW3Vbb11dPWEpKX1pZihlKXtpZih5fHxkKXtpZih5KXtpPVtdLG89cC5sZW5ndGg7d2hpbGUoby0tKShhPXBbb10pJiZpLnB1c2goZltvXT1hKTt5KG51bGwscD1bXSxpLHIpfW89cC5sZW5ndGg7d2hpbGUoby0tKShhPXBbb10pJiYtMTwoaT15P1AoZSxhKTpzW29dKSYmKGVbaV09ISh0W2ldPWEpKX19ZWxzZSBwPVRlKHA9PT10P3Auc3BsaWNlKGwscC5sZW5ndGgpOnApLHk/eShudWxsLHQscCxyKTpILmFwcGx5KHQscCl9KX1mdW5jdGlvbiBFZShlKXtmb3IodmFyIGksdCxuLHI9ZS5sZW5ndGgsbz1iLnJlbGF0aXZlW2VbMF0udHlwZV0sYT1vfHxiLnJlbGF0aXZlW1wiIFwiXSxzPW8/MTowLHU9YmUoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1pfSxhLCEwKSxsPWJlKGZ1bmN0aW9uKGUpe3JldHVybi0xPFAoaSxlKX0sYSwhMCksYz1bZnVuY3Rpb24oZSx0LG4pe3ZhciByPSFvJiYobnx8dCE9PXcpfHwoKGk9dCkubm9kZVR5cGU/dShlLHQsbik6bChlLHQsbikpO3JldHVybiBpPW51bGwscn1dO3M8cjtzKyspaWYodD1iLnJlbGF0aXZlW2Vbc10udHlwZV0pYz1bYmUod2UoYyksdCldO2Vsc2V7aWYoKHQ9Yi5maWx0ZXJbZVtzXS50eXBlXS5hcHBseShudWxsLGVbc10ubWF0Y2hlcykpW1NdKXtmb3Iobj0rK3M7bjxyO24rKylpZihiLnJlbGF0aXZlW2Vbbl0udHlwZV0pYnJlYWs7cmV0dXJuIENlKDE8cyYmd2UoYyksMTxzJiZ4ZShlLnNsaWNlKDAscy0xKS5jb25jYXQoe3ZhbHVlOlwiIFwiPT09ZVtzLTJdLnR5cGU/XCIqXCI6XCJcIn0pKS5yZXBsYWNlKCQsXCIkMVwiKSx0LHM8biYmRWUoZS5zbGljZShzLG4pKSxuPHImJkVlKGU9ZS5zbGljZShuKSksbjxyJiZ4ZShlKSl9Yy5wdXNoKHQpfXJldHVybiB3ZShjKX1yZXR1cm4gbWUucHJvdG90eXBlPWIuZmlsdGVycz1iLnBzZXVkb3MsYi5zZXRGaWx0ZXJzPW5ldyBtZSxoPXNlLnRva2VuaXplPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzLHUsbD14W2UrXCIgXCJdO2lmKGwpcmV0dXJuIHQ/MDpsLnNsaWNlKDApO2E9ZSxzPVtdLHU9Yi5wcmVGaWx0ZXI7d2hpbGUoYSl7Zm9yKG8gaW4gbiYmIShyPV8uZXhlYyhhKSl8fChyJiYoYT1hLnNsaWNlKHJbMF0ubGVuZ3RoKXx8YSkscy5wdXNoKGk9W10pKSxuPSExLChyPXouZXhlYyhhKSkmJihuPXIuc2hpZnQoKSxpLnB1c2goe3ZhbHVlOm4sdHlwZTpyWzBdLnJlcGxhY2UoJCxcIiBcIil9KSxhPWEuc2xpY2Uobi5sZW5ndGgpKSxiLmZpbHRlcikhKHI9R1tvXS5leGVjKGEpKXx8dVtvXSYmIShyPXVbb10ocikpfHwobj1yLnNoaWZ0KCksaS5wdXNoKHt2YWx1ZTpuLHR5cGU6byxtYXRjaGVzOnJ9KSxhPWEuc2xpY2Uobi5sZW5ndGgpKTtpZighbilicmVha31yZXR1cm4gdD9hLmxlbmd0aDphP3NlLmVycm9yKGUpOngoZSxzKS5zbGljZSgwKX0sZj1zZS5jb21waWxlPWZ1bmN0aW9uKGUsdCl7dmFyIG4sdix5LG0seCxyLGk9W10sbz1bXSxhPUFbZStcIiBcIl07aWYoIWEpe3R8fCh0PWgoZSkpLG49dC5sZW5ndGg7d2hpbGUobi0tKShhPUVlKHRbbl0pKVtTXT9pLnB1c2goYSk6by5wdXNoKGEpOyhhPUEoZSwodj1vLG09MDwoeT1pKS5sZW5ndGgseD0wPHYubGVuZ3RoLHI9ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdT0wLGw9XCIwXCIsYz1lJiZbXSxmPVtdLHA9dyxkPWV8fHgmJmIuZmluZC5UQUcoXCIqXCIsaSksaD1rKz1udWxsPT1wPzE6TWF0aC5yYW5kb20oKXx8LjEsZz1kLmxlbmd0aDtmb3IoaSYmKHc9dD09Q3x8dHx8aSk7bCE9PWcmJm51bGwhPShvPWRbbF0pO2wrKyl7aWYoeCYmbyl7YT0wLHR8fG8ub3duZXJEb2N1bWVudD09Q3x8KFQobyksbj0hRSk7d2hpbGUocz12W2ErK10paWYocyhvLHR8fEMsbikpe3IucHVzaChvKTticmVha31pJiYoaz1oKX1tJiYoKG89IXMmJm8pJiZ1LS0sZSYmYy5wdXNoKG8pKX1pZih1Kz1sLG0mJmwhPT11KXthPTA7d2hpbGUocz15W2ErK10pcyhjLGYsdCxuKTtpZihlKXtpZigwPHUpd2hpbGUobC0tKWNbbF18fGZbbF18fChmW2xdPXEuY2FsbChyKSk7Zj1UZShmKX1ILmFwcGx5KHIsZiksaSYmIWUmJjA8Zi5sZW5ndGgmJjE8dSt5Lmxlbmd0aCYmc2UudW5pcXVlU29ydChyKX1yZXR1cm4gaSYmKGs9aCx3PXApLGN9LG0/bGUocik6cikpKS5zZWxlY3Rvcj1lfXJldHVybiBhfSxnPXNlLnNlbGVjdD1mdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscyx1LGw9XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSxjPSFyJiZoKGU9bC5zZWxlY3Rvcnx8ZSk7aWYobj1ufHxbXSwxPT09Yy5sZW5ndGgpe2lmKDI8KG89Y1swXT1jWzBdLnNsaWNlKDApKS5sZW5ndGgmJlwiSURcIj09PShhPW9bMF0pLnR5cGUmJjk9PT10Lm5vZGVUeXBlJiZFJiZiLnJlbGF0aXZlW29bMV0udHlwZV0pe2lmKCEodD0oYi5maW5kLklEKGEubWF0Y2hlc1swXS5yZXBsYWNlKHRlLG5lKSx0KXx8W10pWzBdKSlyZXR1cm4gbjtsJiYodD10LnBhcmVudE5vZGUpLGU9ZS5zbGljZShvLnNoaWZ0KCkudmFsdWUubGVuZ3RoKX1pPUcubmVlZHNDb250ZXh0LnRlc3QoZSk/MDpvLmxlbmd0aDt3aGlsZShpLS0pe2lmKGE9b1tpXSxiLnJlbGF0aXZlW3M9YS50eXBlXSlicmVhaztpZigodT1iLmZpbmRbc10pJiYocj11KGEubWF0Y2hlc1swXS5yZXBsYWNlKHRlLG5lKSxlZS50ZXN0KG9bMF0udHlwZSkmJnllKHQucGFyZW50Tm9kZSl8fHQpKSl7aWYoby5zcGxpY2UoaSwxKSwhKGU9ci5sZW5ndGgmJnhlKG8pKSlyZXR1cm4gSC5hcHBseShuLHIpLG47YnJlYWt9fX1yZXR1cm4obHx8ZihlLGMpKShyLHQsIUUsbiwhdHx8ZWUudGVzdChlKSYmeWUodC5wYXJlbnROb2RlKXx8dCksbn0sZC5zb3J0U3RhYmxlPVMuc3BsaXQoXCJcIikuc29ydChEKS5qb2luKFwiXCIpPT09UyxkLmRldGVjdER1cGxpY2F0ZXM9ISFsLFQoKSxkLnNvcnREZXRhY2hlZD1jZShmdW5jdGlvbihlKXtyZXR1cm4gMSZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKEMuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpKX0pLGNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD1cIjxhIGhyZWY9JyMnPjwvYT5cIixcIiNcIj09PWUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfSl8fGZlKFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLGZ1bmN0aW9uKGUsdCxuKXtpZighbilyZXR1cm4gZS5nZXRBdHRyaWJ1dGUodCxcInR5cGVcIj09PXQudG9Mb3dlckNhc2UoKT8xOjIpfSksZC5hdHRyaWJ1dGVzJiZjZShmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9XCI8aW5wdXQvPlwiLGUuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpLFwiXCI9PT1lLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwidmFsdWVcIil9KXx8ZmUoXCJ2YWx1ZVwiLGZ1bmN0aW9uKGUsdCxuKXtpZighbiYmXCJpbnB1dFwiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXJldHVybiBlLmRlZmF1bHRWYWx1ZX0pLGNlKGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpfSl8fGZlKFIsZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKCFuKXJldHVybiEwPT09ZVt0XT90LnRvTG93ZXJDYXNlKCk6KHI9ZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSYmci5zcGVjaWZpZWQ/ci52YWx1ZTpudWxsfSksc2V9KEMpO1MuZmluZD1kLFMuZXhwcj1kLnNlbGVjdG9ycyxTLmV4cHJbXCI6XCJdPVMuZXhwci5wc2V1ZG9zLFMudW5pcXVlU29ydD1TLnVuaXF1ZT1kLnVuaXF1ZVNvcnQsUy50ZXh0PWQuZ2V0VGV4dCxTLmlzWE1MRG9jPWQuaXNYTUwsUy5jb250YWlucz1kLmNvbnRhaW5zLFMuZXNjYXBlU2VsZWN0b3I9ZC5lc2NhcGU7dmFyIGg9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVtdLGk9dm9pZCAwIT09bjt3aGlsZSgoZT1lW3RdKSYmOSE9PWUubm9kZVR5cGUpaWYoMT09PWUubm9kZVR5cGUpe2lmKGkmJlMoZSkuaXMobikpYnJlYWs7ci5wdXNoKGUpfXJldHVybiByfSxUPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtdO2U7ZT1lLm5leHRTaWJsaW5nKTE9PT1lLm5vZGVUeXBlJiZlIT09dCYmbi5wdXNoKGUpO3JldHVybiBufSxrPVMuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7ZnVuY3Rpb24gQShlLHQpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10LnRvTG93ZXJDYXNlKCl9dmFyIE49L148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2k7ZnVuY3Rpb24gRChlLG4scil7cmV0dXJuIG0obik/Uy5ncmVwKGUsZnVuY3Rpb24oZSx0KXtyZXR1cm4hIW4uY2FsbChlLHQsZSkhPT1yfSk6bi5ub2RlVHlwZT9TLmdyZXAoZSxmdW5jdGlvbihlKXtyZXR1cm4gZT09PW4hPT1yfSk6XCJzdHJpbmdcIiE9dHlwZW9mIG4/Uy5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuLTE8aS5jYWxsKG4sZSkhPT1yfSk6Uy5maWx0ZXIobixlLHIpfVMuZmlsdGVyPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10WzBdO3JldHVybiBuJiYoZT1cIjpub3QoXCIrZStcIilcIiksMT09PXQubGVuZ3RoJiYxPT09ci5ub2RlVHlwZT9TLmZpbmQubWF0Y2hlc1NlbGVjdG9yKHIsZSk/W3JdOltdOlMuZmluZC5tYXRjaGVzKGUsUy5ncmVwKHQsZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfSkpfSxTLmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihlKXt2YXIgdCxuLHI9dGhpcy5sZW5ndGgsaT10aGlzO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiB0aGlzLnB1c2hTdGFjayhTKGUpLmZpbHRlcihmdW5jdGlvbigpe2Zvcih0PTA7dDxyO3QrKylpZihTLmNvbnRhaW5zKGlbdF0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKG49dGhpcy5wdXNoU3RhY2soW10pLHQ9MDt0PHI7dCsrKVMuZmluZChlLGlbdF0sbik7cmV0dXJuIDE8cj9TLnVuaXF1ZVNvcnQobik6bn0sZmlsdGVyOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhEKHRoaXMsZXx8W10sITEpKX0sbm90OmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhEKHRoaXMsZXx8W10sITApKX0saXM6ZnVuY3Rpb24oZSl7cmV0dXJuISFEKHRoaXMsXCJzdHJpbmdcIj09dHlwZW9mIGUmJmsudGVzdChlKT9TKGUpOmV8fFtdLCExKS5sZW5ndGh9fSk7dmFyIGoscT0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLzsoUy5mbi5pbml0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKCFlKXJldHVybiB0aGlzO2lmKG49bnx8aixcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYoIShyPVwiPFwiPT09ZVswXSYmXCI+XCI9PT1lW2UubGVuZ3RoLTFdJiYzPD1lLmxlbmd0aD9bbnVsbCxlLG51bGxdOnEuZXhlYyhlKSl8fCFyWzFdJiZ0KXJldHVybiF0fHx0LmpxdWVyeT8odHx8bikuZmluZChlKTp0aGlzLmNvbnN0cnVjdG9yKHQpLmZpbmQoZSk7aWYoclsxXSl7aWYodD10IGluc3RhbmNlb2YgUz90WzBdOnQsUy5tZXJnZSh0aGlzLFMucGFyc2VIVE1MKHJbMV0sdCYmdC5ub2RlVHlwZT90Lm93bmVyRG9jdW1lbnR8fHQ6RSwhMCkpLE4udGVzdChyWzFdKSYmUy5pc1BsYWluT2JqZWN0KHQpKWZvcihyIGluIHQpbSh0aGlzW3JdKT90aGlzW3JdKHRbcl0pOnRoaXMuYXR0cihyLHRbcl0pO3JldHVybiB0aGlzfXJldHVybihpPUUuZ2V0RWxlbWVudEJ5SWQoclsyXSkpJiYodGhpc1swXT1pLHRoaXMubGVuZ3RoPTEpLHRoaXN9cmV0dXJuIGUubm9kZVR5cGU/KHRoaXNbMF09ZSx0aGlzLmxlbmd0aD0xLHRoaXMpOm0oZSk/dm9pZCAwIT09bi5yZWFkeT9uLnJlYWR5KGUpOmUoUyk6Uy5tYWtlQXJyYXkoZSx0aGlzKX0pLnByb3RvdHlwZT1TLmZuLGo9UyhFKTt2YXIgTD0vXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxIPXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O2Z1bmN0aW9uIE8oZSx0KXt3aGlsZSgoZT1lW3RdKSYmMSE9PWUubm9kZVR5cGUpO3JldHVybiBlfVMuZm4uZXh0ZW5kKHtoYXM6ZnVuY3Rpb24oZSl7dmFyIHQ9UyhlLHRoaXMpLG49dC5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHZhciBlPTA7ZTxuO2UrKylpZihTLmNvbnRhaW5zKHRoaXMsdFtlXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MCxpPXRoaXMubGVuZ3RoLG89W10sYT1cInN0cmluZ1wiIT10eXBlb2YgZSYmUyhlKTtpZighay50ZXN0KGUpKWZvcig7cjxpO3IrKylmb3Iobj10aGlzW3JdO24mJm4hPT10O249bi5wYXJlbnROb2RlKWlmKG4ubm9kZVR5cGU8MTEmJihhPy0xPGEuaW5kZXgobik6MT09PW4ubm9kZVR5cGUmJlMuZmluZC5tYXRjaGVzU2VsZWN0b3IobixlKSkpe28ucHVzaChuKTticmVha31yZXR1cm4gdGhpcy5wdXNoU3RhY2soMTxvLmxlbmd0aD9TLnVuaXF1ZVNvcnQobyk6byl9LGluZGV4OmZ1bmN0aW9uKGUpe3JldHVybiBlP1wic3RyaW5nXCI9PXR5cGVvZiBlP2kuY2FsbChTKGUpLHRoaXNbMF0pOmkuY2FsbCh0aGlzLGUuanF1ZXJ5P2VbMF06ZSk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soUy51bmlxdWVTb3J0KFMubWVyZ2UodGhpcy5nZXQoKSxTKGUsdCkpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWU/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoZSkpfX0pLFMuZWFjaCh7cGFyZW50OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmMTEhPT10Lm5vZGVUeXBlP3Q6bnVsbH0scGFyZW50czpmdW5jdGlvbihlKXtyZXR1cm4gaChlLFwicGFyZW50Tm9kZVwiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gaChlLFwicGFyZW50Tm9kZVwiLG4pfSxuZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBPKGUsXCJuZXh0U2libGluZ1wiKX0scHJldjpmdW5jdGlvbihlKXtyZXR1cm4gTyhlLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBoKGUsXCJuZXh0U2libGluZ1wiKX0scHJldkFsbDpmdW5jdGlvbihlKXtyZXR1cm4gaChlLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBoKGUsXCJuZXh0U2libGluZ1wiLG4pfSxwcmV2VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBoKGUsXCJwcmV2aW91c1NpYmxpbmdcIixuKX0sc2libGluZ3M6ZnVuY3Rpb24oZSl7cmV0dXJuIFQoKGUucGFyZW50Tm9kZXx8e30pLmZpcnN0Q2hpbGQsZSl9LGNoaWxkcmVuOmZ1bmN0aW9uKGUpe3JldHVybiBUKGUuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lLmNvbnRlbnREb2N1bWVudCYmcihlLmNvbnRlbnREb2N1bWVudCk/ZS5jb250ZW50RG9jdW1lbnQ6KEEoZSxcInRlbXBsYXRlXCIpJiYoZT1lLmNvbnRlbnR8fGUpLFMubWVyZ2UoW10sZS5jaGlsZE5vZGVzKSl9fSxmdW5jdGlvbihyLGkpe1MuZm5bcl09ZnVuY3Rpb24oZSx0KXt2YXIgbj1TLm1hcCh0aGlzLGksZSk7cmV0dXJuXCJVbnRpbFwiIT09ci5zbGljZSgtNSkmJih0PWUpLHQmJlwic3RyaW5nXCI9PXR5cGVvZiB0JiYobj1TLmZpbHRlcih0LG4pKSwxPHRoaXMubGVuZ3RoJiYoSFtyXXx8Uy51bmlxdWVTb3J0KG4pLEwudGVzdChyKSYmbi5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKG4pfX0pO3ZhciBQPS9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztmdW5jdGlvbiBSKGUpe3JldHVybiBlfWZ1bmN0aW9uIE0oZSl7dGhyb3cgZX1mdW5jdGlvbiBJKGUsdCxuLHIpe3ZhciBpO3RyeXtlJiZtKGk9ZS5wcm9taXNlKT9pLmNhbGwoZSkuZG9uZSh0KS5mYWlsKG4pOmUmJm0oaT1lLnRoZW4pP2kuY2FsbChlLHQsbik6dC5hcHBseSh2b2lkIDAsW2VdLnNsaWNlKHIpKX1jYXRjaChlKXtuLmFwcGx5KHZvaWQgMCxbZV0pfX1TLkNhbGxiYWNrcz1mdW5jdGlvbihyKXt2YXIgZSxuO3I9XCJzdHJpbmdcIj09dHlwZW9mIHI/KGU9cixuPXt9LFMuZWFjaChlLm1hdGNoKFApfHxbXSxmdW5jdGlvbihlLHQpe25bdF09ITB9KSxuKTpTLmV4dGVuZCh7fSxyKTt2YXIgaSx0LG8sYSxzPVtdLHU9W10sbD0tMSxjPWZ1bmN0aW9uKCl7Zm9yKGE9YXx8ci5vbmNlLG89aT0hMDt1Lmxlbmd0aDtsPS0xKXt0PXUuc2hpZnQoKTt3aGlsZSgrK2w8cy5sZW5ndGgpITE9PT1zW2xdLmFwcGx5KHRbMF0sdFsxXSkmJnIuc3RvcE9uRmFsc2UmJihsPXMubGVuZ3RoLHQ9ITEpfXIubWVtb3J5fHwodD0hMSksaT0hMSxhJiYocz10P1tdOlwiXCIpfSxmPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gcyYmKHQmJiFpJiYobD1zLmxlbmd0aC0xLHUucHVzaCh0KSksZnVuY3Rpb24gbihlKXtTLmVhY2goZSxmdW5jdGlvbihlLHQpe20odCk/ci51bmlxdWUmJmYuaGFzKHQpfHxzLnB1c2godCk6dCYmdC5sZW5ndGgmJlwic3RyaW5nXCIhPT13KHQpJiZuKHQpfSl9KGFyZ3VtZW50cyksdCYmIWkmJmMoKSksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIFMuZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oZSx0KXt2YXIgbjt3aGlsZSgtMTwobj1TLmluQXJyYXkodCxzLG4pKSlzLnNwbGljZShuLDEpLG48PWwmJmwtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihlKXtyZXR1cm4gZT8tMTxTLmluQXJyYXkoZSxzKTowPHMubGVuZ3RofSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiBzJiYocz1bXSksdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBhPXU9W10scz10PVwiXCIsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hc30sbG9jazpmdW5jdGlvbigpe3JldHVybiBhPXU9W10sdHx8aXx8KHM9dD1cIlwiKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWF9LGZpcmVXaXRoOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGF8fCh0PVtlLCh0PXR8fFtdKS5zbGljZT90LnNsaWNlKCk6dF0sdS5wdXNoKHQpLGl8fGMoKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBmLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhb319O3JldHVybiBmfSxTLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oZSl7dmFyIG89W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixTLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSxTLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwyXSxbXCJyZXNvbHZlXCIsXCJkb25lXCIsUy5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxTLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIixTLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFMuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxpPVwicGVuZGluZ1wiLGE9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGl9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBzLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sXCJjYXRjaFwiOmZ1bmN0aW9uKGUpe3JldHVybiBhLnRoZW4obnVsbCxlKX0scGlwZTpmdW5jdGlvbigpe3ZhciBpPWFyZ3VtZW50cztyZXR1cm4gUy5EZWZlcnJlZChmdW5jdGlvbihyKXtTLmVhY2gobyxmdW5jdGlvbihlLHQpe3ZhciBuPW0oaVt0WzRdXSkmJmlbdFs0XV07c1t0WzFdXShmdW5jdGlvbigpe3ZhciBlPW4mJm4uYXBwbHkodGhpcyxhcmd1bWVudHMpO2UmJm0oZS5wcm9taXNlKT9lLnByb21pc2UoKS5wcm9ncmVzcyhyLm5vdGlmeSkuZG9uZShyLnJlc29sdmUpLmZhaWwoci5yZWplY3QpOnJbdFswXStcIldpdGhcIl0odGhpcyxuP1tlXTphcmd1bWVudHMpfSl9KSxpPW51bGx9KS5wcm9taXNlKCl9LHRoZW46ZnVuY3Rpb24odCxuLHIpe3ZhciB1PTA7ZnVuY3Rpb24gbChpLG8sYSxzKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj10aGlzLHI9YXJndW1lbnRzLGU9ZnVuY3Rpb24oKXt2YXIgZSx0O2lmKCEoaTx1KSl7aWYoKGU9YS5hcHBseShuLHIpKT09PW8ucHJvbWlzZSgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIik7dD1lJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpJiZlLnRoZW4sbSh0KT9zP3QuY2FsbChlLGwodSxvLFIscyksbCh1LG8sTSxzKSk6KHUrKyx0LmNhbGwoZSxsKHUsbyxSLHMpLGwodSxvLE0scyksbCh1LG8sUixvLm5vdGlmeVdpdGgpKSk6KGEhPT1SJiYobj12b2lkIDAscj1bZV0pLChzfHxvLnJlc29sdmVXaXRoKShuLHIpKX19LHQ9cz9lOmZ1bmN0aW9uKCl7dHJ5e2UoKX1jYXRjaChlKXtTLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJlMuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLHQuc3RhY2tUcmFjZSksdTw9aSsxJiYoYSE9PU0mJihuPXZvaWQgMCxyPVtlXSksby5yZWplY3RXaXRoKG4scikpfX07aT90KCk6KFMuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYodC5zdGFja1RyYWNlPVMuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLEMuc2V0VGltZW91dCh0KSl9fXJldHVybiBTLkRlZmVycmVkKGZ1bmN0aW9uKGUpe29bMF1bM10uYWRkKGwoMCxlLG0ocik/cjpSLGUubm90aWZ5V2l0aCkpLG9bMV1bM10uYWRkKGwoMCxlLG0odCk/dDpSKSksb1syXVszXS5hZGQobCgwLGUsbShuKT9uOk0pKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZT9TLmV4dGVuZChlLGEpOmF9fSxzPXt9O3JldHVybiBTLmVhY2gobyxmdW5jdGlvbihlLHQpe3ZhciBuPXRbMl0scj10WzVdO2FbdFsxXV09bi5hZGQsciYmbi5hZGQoZnVuY3Rpb24oKXtpPXJ9LG9bMy1lXVsyXS5kaXNhYmxlLG9bMy1lXVszXS5kaXNhYmxlLG9bMF1bMl0ubG9jayxvWzBdWzNdLmxvY2spLG4uYWRkKHRbM10uZmlyZSksc1t0WzBdXT1mdW5jdGlvbigpe3JldHVybiBzW3RbMF0rXCJXaXRoXCJdKHRoaXM9PT1zP3ZvaWQgMDp0aGlzLGFyZ3VtZW50cyksdGhpc30sc1t0WzBdK1wiV2l0aFwiXT1uLmZpcmVXaXRofSksYS5wcm9taXNlKHMpLGUmJmUuY2FsbChzLHMpLHN9LHdoZW46ZnVuY3Rpb24oZSl7dmFyIG49YXJndW1lbnRzLmxlbmd0aCx0PW4scj1BcnJheSh0KSxpPXMuY2FsbChhcmd1bWVudHMpLG89Uy5EZWZlcnJlZCgpLGE9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JbdF09dGhpcyxpW3RdPTE8YXJndW1lbnRzLmxlbmd0aD9zLmNhbGwoYXJndW1lbnRzKTplLC0tbnx8by5yZXNvbHZlV2l0aChyLGkpfX07aWYobjw9MSYmKEkoZSxvLmRvbmUoYSh0KSkucmVzb2x2ZSxvLnJlamVjdCwhbiksXCJwZW5kaW5nXCI9PT1vLnN0YXRlKCl8fG0oaVt0XSYmaVt0XS50aGVuKSkpcmV0dXJuIG8udGhlbigpO3doaWxlKHQtLSlJKGlbdF0sYSh0KSxvLnJlamVjdCk7cmV0dXJuIG8ucHJvbWlzZSgpfX0pO3ZhciBXPS9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1MuRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbihlLHQpe0MuY29uc29sZSYmQy5jb25zb2xlLndhcm4mJmUmJlcudGVzdChlLm5hbWUpJiZDLmNvbnNvbGUud2FybihcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiK2UubWVzc2FnZSxlLnN0YWNrLHQpfSxTLnJlYWR5RXhjZXB0aW9uPWZ1bmN0aW9uKGUpe0Muc2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGV9KX07dmFyIEY9Uy5EZWZlcnJlZCgpO2Z1bmN0aW9uIEIoKXtFLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsQiksQy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLEIpLFMucmVhZHkoKX1TLmZuLnJlYWR5PWZ1bmN0aW9uKGUpe3JldHVybiBGLnRoZW4oZSlbXCJjYXRjaFwiXShmdW5jdGlvbihlKXtTLnJlYWR5RXhjZXB0aW9uKGUpfSksdGhpc30sUy5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEscmVhZHk6ZnVuY3Rpb24oZSl7KCEwPT09ZT8tLVMucmVhZHlXYWl0OlMuaXNSZWFkeSl8fChTLmlzUmVhZHk9ITApIT09ZSYmMDwtLVMucmVhZHlXYWl0fHxGLnJlc29sdmVXaXRoKEUsW1NdKX19KSxTLnJlYWR5LnRoZW49Ri50aGVuLFwiY29tcGxldGVcIj09PUUucmVhZHlTdGF0ZXx8XCJsb2FkaW5nXCIhPT1FLnJlYWR5U3RhdGUmJiFFLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbD9DLnNldFRpbWVvdXQoUy5yZWFkeSk6KEUuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixCKSxDLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsQikpO3ZhciAkPWZ1bmN0aW9uKGUsdCxuLHIsaSxvLGEpe3ZhciBzPTAsdT1lLmxlbmd0aCxsPW51bGw9PW47aWYoXCJvYmplY3RcIj09PXcobikpZm9yKHMgaW4gaT0hMCxuKSQoZSx0LHMsbltzXSwhMCxvLGEpO2Vsc2UgaWYodm9pZCAwIT09ciYmKGk9ITAsbShyKXx8KGE9ITApLGwmJihhPyh0LmNhbGwoZSxyKSx0PW51bGwpOihsPXQsdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGwuY2FsbChTKGUpLG4pfSkpLHQpKWZvcig7czx1O3MrKyl0KGVbc10sbixhP3I6ci5jYWxsKGVbc10scyx0KGVbc10sbikpKTtyZXR1cm4gaT9lOmw/dC5jYWxsKGUpOnU/dChlWzBdLG4pOm99LF89L14tbXMtLyx6PS8tKFthLXpdKS9nO2Z1bmN0aW9uIFUoZSx0KXtyZXR1cm4gdC50b1VwcGVyQ2FzZSgpfWZ1bmN0aW9uIFgoZSl7cmV0dXJuIGUucmVwbGFjZShfLFwibXMtXCIpLnJlcGxhY2UoeixVKX12YXIgVj1mdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV8fDk9PT1lLm5vZGVUeXBlfHwhK2Uubm9kZVR5cGV9O2Z1bmN0aW9uIEcoKXt0aGlzLmV4cGFuZG89Uy5leHBhbmRvK0cudWlkKyt9Ry51aWQ9MSxHLnByb3RvdHlwZT17Y2FjaGU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVt0aGlzLmV4cGFuZG9dO3JldHVybiB0fHwodD17fSxWKGUpJiYoZS5ub2RlVHlwZT9lW3RoaXMuZXhwYW5kb109dDpPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLmV4cGFuZG8se3ZhbHVlOnQsY29uZmlndXJhYmxlOiEwfSkpKSx0fSxzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9dGhpcy5jYWNoZShlKTtpZihcInN0cmluZ1wiPT10eXBlb2YgdClpW1godCldPW47ZWxzZSBmb3IociBpbiB0KWlbWChyKV09dFtyXTtyZXR1cm4gaX0sZ2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/dGhpcy5jYWNoZShlKTplW3RoaXMuZXhwYW5kb10mJmVbdGhpcy5leHBhbmRvXVtYKHQpXX0sYWNjZXNzOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09dHx8dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQmJnZvaWQgMD09PW4/dGhpcy5nZXQoZSx0KToodGhpcy5zZXQoZSx0LG4pLHZvaWQgMCE9PW4/bjp0KX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lW3RoaXMuZXhwYW5kb107aWYodm9pZCAwIT09cil7aWYodm9pZCAwIT09dCl7bj0odD1BcnJheS5pc0FycmF5KHQpP3QubWFwKFgpOih0PVgodCkpaW4gcj9bdF06dC5tYXRjaChQKXx8W10pLmxlbmd0aDt3aGlsZShuLS0pZGVsZXRlIHJbdFtuXV19KHZvaWQgMD09PXR8fFMuaXNFbXB0eU9iamVjdChyKSkmJihlLm5vZGVUeXBlP2VbdGhpcy5leHBhbmRvXT12b2lkIDA6ZGVsZXRlIGVbdGhpcy5leHBhbmRvXSl9fSxoYXNEYXRhOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdm9pZCAwIT09dCYmIVMuaXNFbXB0eU9iamVjdCh0KX19O3ZhciBZPW5ldyBHLFE9bmV3IEcsSj0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sSz0vW0EtWl0vZztmdW5jdGlvbiBaKGUsdCxuKXt2YXIgcixpO2lmKHZvaWQgMD09PW4mJjE9PT1lLm5vZGVUeXBlKWlmKHI9XCJkYXRhLVwiK3QucmVwbGFjZShLLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCksXCJzdHJpbmdcIj09dHlwZW9mKG49ZS5nZXRBdHRyaWJ1dGUocikpKXt0cnl7bj1cInRydWVcIj09PShpPW4pfHxcImZhbHNlXCIhPT1pJiYoXCJudWxsXCI9PT1pP251bGw6aT09PStpK1wiXCI/K2k6Si50ZXN0KGkpP0pTT04ucGFyc2UoaSk6aSl9Y2F0Y2goZSl7fVEuc2V0KGUsdCxuKX1lbHNlIG49dm9pZCAwO3JldHVybiBufVMuZXh0ZW5kKHtoYXNEYXRhOmZ1bmN0aW9uKGUpe3JldHVybiBRLmhhc0RhdGEoZSl8fFkuaGFzRGF0YShlKX0sZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFEuYWNjZXNzKGUsdCxuKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe1EucmVtb3ZlKGUsdCl9LF9kYXRhOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gWS5hY2Nlc3MoZSx0LG4pfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe1kucmVtb3ZlKGUsdCl9fSksUy5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24obixlKXt2YXIgdCxyLGksbz10aGlzWzBdLGE9byYmby5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PW4pe2lmKHRoaXMubGVuZ3RoJiYoaT1RLmdldChvKSwxPT09by5ub2RlVHlwZSYmIVkuZ2V0KG8sXCJoYXNEYXRhQXR0cnNcIikpKXt0PWEubGVuZ3RoO3doaWxlKHQtLSlhW3RdJiYwPT09KHI9YVt0XS5uYW1lKS5pbmRleE9mKFwiZGF0YS1cIikmJihyPVgoci5zbGljZSg1KSksWihvLHIsaVtyXSkpO1kuc2V0KG8sXCJoYXNEYXRhQXR0cnNcIiwhMCl9cmV0dXJuIGl9cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIG4/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7US5zZXQodGhpcyxuKX0pOiQodGhpcyxmdW5jdGlvbihlKXt2YXIgdDtpZihvJiZ2b2lkIDA9PT1lKXJldHVybiB2b2lkIDAhPT0odD1RLmdldChvLG4pKT90OnZvaWQgMCE9PSh0PVoobyxuKSk/dDp2b2lkIDA7dGhpcy5lYWNoKGZ1bmN0aW9uKCl7US5zZXQodGhpcyxuLGUpfSl9LG51bGwsZSwxPGFyZ3VtZW50cy5sZW5ndGgsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1EucmVtb3ZlKHRoaXMsZSl9KX19KSxTLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKGUpcmV0dXJuIHQ9KHR8fFwiZnhcIikrXCJxdWV1ZVwiLHI9WS5nZXQoZSx0KSxuJiYoIXJ8fEFycmF5LmlzQXJyYXkobik/cj1ZLmFjY2VzcyhlLHQsUy5tYWtlQXJyYXkobikpOnIucHVzaChuKSkscnx8W119LGRlcXVldWU6ZnVuY3Rpb24oZSx0KXt0PXR8fFwiZnhcIjt2YXIgbj1TLnF1ZXVlKGUsdCkscj1uLmxlbmd0aCxpPW4uc2hpZnQoKSxvPVMuX3F1ZXVlSG9va3MoZSx0KTtcImlucHJvZ3Jlc3NcIj09PWkmJihpPW4uc2hpZnQoKSxyLS0pLGkmJihcImZ4XCI9PT10JiZuLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBvLnN0b3AsaS5jYWxsKGUsZnVuY3Rpb24oKXtTLmRlcXVldWUoZSx0KX0sbykpLCFyJiZvJiZvLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj10K1wicXVldWVIb29rc1wiO3JldHVybiBZLmdldChlLG4pfHxZLmFjY2VzcyhlLG4se2VtcHR5OlMuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCl7WS5yZW1vdmUoZSxbdCtcInF1ZXVlXCIsbl0pfSl9KX19KSxTLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24odCxuKXt2YXIgZT0yO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiB0JiYobj10LHQ9XCJmeFwiLGUtLSksYXJndW1lbnRzLmxlbmd0aDxlP1MucXVldWUodGhpc1swXSx0KTp2b2lkIDA9PT1uP3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9Uy5xdWV1ZSh0aGlzLHQsbik7Uy5fcXVldWVIb29rcyh0aGlzLHQpLFwiZnhcIj09PXQmJlwiaW5wcm9ncmVzc1wiIT09ZVswXSYmUy5kZXF1ZXVlKHRoaXMsdCl9KX0sZGVxdWV1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Uy5kZXF1ZXVlKHRoaXMsZSl9KX0sY2xlYXJRdWV1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5xdWV1ZShlfHxcImZ4XCIsW10pfSxwcm9taXNlOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0xLGk9Uy5EZWZlcnJlZCgpLG89dGhpcyxhPXRoaXMubGVuZ3RoLHM9ZnVuY3Rpb24oKXstLXJ8fGkucmVzb2x2ZVdpdGgobyxbb10pfTtcInN0cmluZ1wiIT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksZT1lfHxcImZ4XCI7d2hpbGUoYS0tKShuPVkuZ2V0KG9bYV0sZStcInF1ZXVlSG9va3NcIikpJiZuLmVtcHR5JiYocisrLG4uZW1wdHkuYWRkKHMpKTtyZXR1cm4gcygpLGkucHJvbWlzZSh0KX19KTt2YXIgZWU9L1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLHRlPW5ldyBSZWdFeHAoXCJeKD86KFsrLV0pPXwpKFwiK2VlK1wiKShbYS16JV0qKSRcIixcImlcIiksbmU9W1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLHJlPUUuZG9jdW1lbnRFbGVtZW50LGllPWZ1bmN0aW9uKGUpe3JldHVybiBTLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKX0sb2U9e2NvbXBvc2VkOiEwfTtyZS5nZXRSb290Tm9kZSYmKGllPWZ1bmN0aW9uKGUpe3JldHVybiBTLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKXx8ZS5nZXRSb290Tm9kZShvZSk9PT1lLm93bmVyRG9jdW1lbnR9KTt2YXIgYWU9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cIm5vbmVcIj09PShlPXR8fGUpLnN0eWxlLmRpc3BsYXl8fFwiXCI9PT1lLnN0eWxlLmRpc3BsYXkmJmllKGUpJiZcIm5vbmVcIj09PVMuY3NzKGUsXCJkaXNwbGF5XCIpfTtmdW5jdGlvbiBzZShlLHQsbixyKXt2YXIgaSxvLGE9MjAscz1yP2Z1bmN0aW9uKCl7cmV0dXJuIHIuY3VyKCl9OmZ1bmN0aW9uKCl7cmV0dXJuIFMuY3NzKGUsdCxcIlwiKX0sdT1zKCksbD1uJiZuWzNdfHwoUy5jc3NOdW1iZXJbdF0/XCJcIjpcInB4XCIpLGM9ZS5ub2RlVHlwZSYmKFMuY3NzTnVtYmVyW3RdfHxcInB4XCIhPT1sJiYrdSkmJnRlLmV4ZWMoUy5jc3MoZSx0KSk7aWYoYyYmY1szXSE9PWwpe3UvPTIsbD1sfHxjWzNdLGM9K3V8fDE7d2hpbGUoYS0tKVMuc3R5bGUoZSx0LGMrbCksKDEtbykqKDEtKG89cygpL3V8fC41KSk8PTAmJihhPTApLGMvPW87Yyo9MixTLnN0eWxlKGUsdCxjK2wpLG49bnx8W119cmV0dXJuIG4mJihjPStjfHwrdXx8MCxpPW5bMV0/YysoblsxXSsxKSpuWzJdOituWzJdLHImJihyLnVuaXQ9bCxyLnN0YXJ0PWMsci5lbmQ9aSkpLGl9dmFyIHVlPXt9O2Z1bmN0aW9uIGxlKGUsdCl7Zm9yKHZhciBuLHIsaSxvLGEscyx1LGw9W10sYz0wLGY9ZS5sZW5ndGg7YzxmO2MrKykocj1lW2NdKS5zdHlsZSYmKG49ci5zdHlsZS5kaXNwbGF5LHQ/KFwibm9uZVwiPT09biYmKGxbY109WS5nZXQocixcImRpc3BsYXlcIil8fG51bGwsbFtjXXx8KHIuc3R5bGUuZGlzcGxheT1cIlwiKSksXCJcIj09PXIuc3R5bGUuZGlzcGxheSYmYWUocikmJihsW2NdPSh1PWE9bz12b2lkIDAsYT0oaT1yKS5vd25lckRvY3VtZW50LHM9aS5ub2RlTmFtZSwodT11ZVtzXSl8fChvPWEuYm9keS5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQocykpLHU9Uy5jc3MobyxcImRpc3BsYXlcIiksby5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pLFwibm9uZVwiPT09dSYmKHU9XCJibG9ja1wiKSx1ZVtzXT11KSkpKTpcIm5vbmVcIiE9PW4mJihsW2NdPVwibm9uZVwiLFkuc2V0KHIsXCJkaXNwbGF5XCIsbikpKTtmb3IoYz0wO2M8ZjtjKyspbnVsbCE9bFtjXSYmKGVbY10uc3R5bGUuZGlzcGxheT1sW2NdKTtyZXR1cm4gZX1TLmZuLmV4dGVuZCh7c2hvdzpmdW5jdGlvbigpe3JldHVybiBsZSh0aGlzLCEwKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiBsZSh0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGUpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgZT9lP3RoaXMuc2hvdygpOnRoaXMuaGlkZSgpOnRoaXMuZWFjaChmdW5jdGlvbigpe2FlKHRoaXMpP1ModGhpcykuc2hvdygpOlModGhpcykuaGlkZSgpfSl9fSk7dmFyIGNlLGZlLHBlPS9eKD86Y2hlY2tib3h8cmFkaW8pJC9pLGRlPS88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSxoZT0vXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pO2NlPUUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmFwcGVuZENoaWxkKEUuY3JlYXRlRWxlbWVudChcImRpdlwiKSksKGZlPUUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJyYWRpb1wiKSxmZS5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpLGZlLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcInRcIiksY2UuYXBwZW5kQ2hpbGQoZmUpLHkuY2hlY2tDbG9uZT1jZS5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsY2UuaW5uZXJIVE1MPVwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLHkubm9DbG9uZUNoZWNrZWQ9ISFjZS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWUsY2UuaW5uZXJIVE1MPVwiPG9wdGlvbj48L29wdGlvbj5cIix5Lm9wdGlvbj0hIWNlLmxhc3RDaGlsZDt2YXIgZ2U9e3RoZWFkOlsxLFwiPHRhYmxlPlwiLFwiPC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdHI6WzIsXCI8dGFibGU+PHRib2R5PlwiLFwiPC90Ym9keT48L3RhYmxlPlwiXSx0ZDpbMyxcIjx0YWJsZT48dGJvZHk+PHRyPlwiLFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLF9kZWZhdWx0OlswLFwiXCIsXCJcIl19O2Z1bmN0aW9uIHZlKGUsdCl7dmFyIG47cmV0dXJuIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0fHxcIipcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUucXVlcnlTZWxlY3RvckFsbD9lLnF1ZXJ5U2VsZWN0b3JBbGwodHx8XCIqXCIpOltdLHZvaWQgMD09PXR8fHQmJkEoZSx0KT9TLm1lcmdlKFtlXSxuKTpufWZ1bmN0aW9uIHllKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKVkuc2V0KGVbbl0sXCJnbG9iYWxFdmFsXCIsIXR8fFkuZ2V0KHRbbl0sXCJnbG9iYWxFdmFsXCIpKX1nZS50Ym9keT1nZS50Zm9vdD1nZS5jb2xncm91cD1nZS5jYXB0aW9uPWdlLnRoZWFkLGdlLnRoPWdlLnRkLHkub3B0aW9ufHwoZ2Uub3B0Z3JvdXA9Z2Uub3B0aW9uPVsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdKTt2YXIgbWU9Lzx8JiM/XFx3KzsvO2Z1bmN0aW9uIHhlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGEscyx1LGwsYyxmPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHA9W10sZD0wLGg9ZS5sZW5ndGg7ZDxoO2QrKylpZigobz1lW2RdKXx8MD09PW8paWYoXCJvYmplY3RcIj09PXcobykpUy5tZXJnZShwLG8ubm9kZVR5cGU/W29dOm8pO2Vsc2UgaWYobWUudGVzdChvKSl7YT1hfHxmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkscz0oZGUuZXhlYyhvKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksdT1nZVtzXXx8Z2UuX2RlZmF1bHQsYS5pbm5lckhUTUw9dVsxXStTLmh0bWxQcmVmaWx0ZXIobykrdVsyXSxjPXVbMF07d2hpbGUoYy0tKWE9YS5sYXN0Q2hpbGQ7Uy5tZXJnZShwLGEuY2hpbGROb2RlcyksKGE9Zi5maXJzdENoaWxkKS50ZXh0Q29udGVudD1cIlwifWVsc2UgcC5wdXNoKHQuY3JlYXRlVGV4dE5vZGUobykpO2YudGV4dENvbnRlbnQ9XCJcIixkPTA7d2hpbGUobz1wW2QrK10paWYociYmLTE8Uy5pbkFycmF5KG8scikpaSYmaS5wdXNoKG8pO2Vsc2UgaWYobD1pZShvKSxhPXZlKGYuYXBwZW5kQ2hpbGQobyksXCJzY3JpcHRcIiksbCYmeWUoYSksbil7Yz0wO3doaWxlKG89YVtjKytdKWhlLnRlc3Qoby50eXBlfHxcIlwiKSYmbi5wdXNoKG8pfXJldHVybiBmfXZhciBiZT0vXmtleS8sd2U9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFRlPS9eKFteLl0qKSg/OlxcLiguKyl8KS87ZnVuY3Rpb24gQ2UoKXtyZXR1cm4hMH1mdW5jdGlvbiBFZSgpe3JldHVybiExfWZ1bmN0aW9uIFNlKGUsdCl7cmV0dXJuIGU9PT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gRS5hY3RpdmVFbGVtZW50fWNhdGNoKGUpe319KCk9PShcImZvY3VzXCI9PT10KX1mdW5jdGlvbiBrZShlLHQsbixyLGksbyl7dmFyIGEscztpZihcIm9iamVjdFwiPT10eXBlb2YgdCl7Zm9yKHMgaW5cInN0cmluZ1wiIT10eXBlb2YgbiYmKHI9cnx8bixuPXZvaWQgMCksdClrZShlLHMsbixyLHRbc10sbyk7cmV0dXJuIGV9aWYobnVsbD09ciYmbnVsbD09aT8oaT1uLHI9bj12b2lkIDApOm51bGw9PWkmJihcInN0cmluZ1wiPT10eXBlb2Ygbj8oaT1yLHI9dm9pZCAwKTooaT1yLHI9bixuPXZvaWQgMCkpLCExPT09aSlpPUVlO2Vsc2UgaWYoIWkpcmV0dXJuIGU7cmV0dXJuIDE9PT1vJiYoYT1pLChpPWZ1bmN0aW9uKGUpe3JldHVybiBTKCkub2ZmKGUpLGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfSkuZ3VpZD1hLmd1aWR8fChhLmd1aWQ9Uy5ndWlkKyspKSxlLmVhY2goZnVuY3Rpb24oKXtTLmV2ZW50LmFkZCh0aGlzLHQsaSxyLG4pfSl9ZnVuY3Rpb24gQWUoZSxpLG8pe28/KFkuc2V0KGUsaSwhMSksUy5ldmVudC5hZGQoZSxpLHtuYW1lc3BhY2U6ITEsaGFuZGxlcjpmdW5jdGlvbihlKXt2YXIgdCxuLHI9WS5nZXQodGhpcyxpKTtpZigxJmUuaXNUcmlnZ2VyJiZ0aGlzW2ldKXtpZihyLmxlbmd0aCkoUy5ldmVudC5zcGVjaWFsW2ldfHx7fSkuZGVsZWdhdGVUeXBlJiZlLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYocj1zLmNhbGwoYXJndW1lbnRzKSxZLnNldCh0aGlzLGksciksdD1vKHRoaXMsaSksdGhpc1tpXSgpLHIhPT0obj1ZLmdldCh0aGlzLGkpKXx8dD9ZLnNldCh0aGlzLGksITEpOm49e30sciE9PW4pcmV0dXJuIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpLG4udmFsdWV9ZWxzZSByLmxlbmd0aCYmKFkuc2V0KHRoaXMsaSx7dmFsdWU6Uy5ldmVudC50cmlnZ2VyKFMuZXh0ZW5kKHJbMF0sUy5FdmVudC5wcm90b3R5cGUpLHIuc2xpY2UoMSksdGhpcyl9KSxlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpKX19KSk6dm9pZCAwPT09WS5nZXQoZSxpKSYmUy5ldmVudC5hZGQoZSxpLENlKX1TLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKHQsZSxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx2PVkuZ2V0KHQpO2lmKFYodCkpe24uaGFuZGxlciYmKG49KG89bikuaGFuZGxlcixpPW8uc2VsZWN0b3IpLGkmJlMuZmluZC5tYXRjaGVzU2VsZWN0b3IocmUsaSksbi5ndWlkfHwobi5ndWlkPVMuZ3VpZCsrKSwodT12LmV2ZW50cyl8fCh1PXYuZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCkpLChhPXYuaGFuZGxlKXx8KGE9di5oYW5kbGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFMmJlMuZXZlbnQudHJpZ2dlcmVkIT09ZS50eXBlP1MuZXZlbnQuZGlzcGF0Y2guYXBwbHkodCxhcmd1bWVudHMpOnZvaWQgMH0pLGw9KGU9KGV8fFwiXCIpLm1hdGNoKFApfHxbXCJcIl0pLmxlbmd0aDt3aGlsZShsLS0pZD1nPShzPVRlLmV4ZWMoZVtsXSl8fFtdKVsxXSxoPShzWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLGQmJihmPVMuZXZlbnQuc3BlY2lhbFtkXXx8e30sZD0oaT9mLmRlbGVnYXRlVHlwZTpmLmJpbmRUeXBlKXx8ZCxmPVMuZXZlbnQuc3BlY2lhbFtkXXx8e30sYz1TLmV4dGVuZCh7dHlwZTpkLG9yaWdUeXBlOmcsZGF0YTpyLGhhbmRsZXI6bixndWlkOm4uZ3VpZCxzZWxlY3RvcjppLG5lZWRzQ29udGV4dDppJiZTLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoaSksbmFtZXNwYWNlOmguam9pbihcIi5cIil9LG8pLChwPXVbZF0pfHwoKHA9dVtkXT1bXSkuZGVsZWdhdGVDb3VudD0wLGYuc2V0dXAmJiExIT09Zi5zZXR1cC5jYWxsKHQscixoLGEpfHx0LmFkZEV2ZW50TGlzdGVuZXImJnQuYWRkRXZlbnRMaXN0ZW5lcihkLGEpKSxmLmFkZCYmKGYuYWRkLmNhbGwodCxjKSxjLmhhbmRsZXIuZ3VpZHx8KGMuaGFuZGxlci5ndWlkPW4uZ3VpZCkpLGk/cC5zcGxpY2UocC5kZWxlZ2F0ZUNvdW50KyssMCxjKTpwLnB1c2goYyksUy5ldmVudC5nbG9iYWxbZF09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx2PVkuaGFzRGF0YShlKSYmWS5nZXQoZSk7aWYodiYmKHU9di5ldmVudHMpKXtsPSh0PSh0fHxcIlwiKS5tYXRjaChQKXx8W1wiXCJdKS5sZW5ndGg7d2hpbGUobC0tKWlmKGQ9Zz0ocz1UZS5leGVjKHRbbF0pfHxbXSlbMV0saD0oc1syXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxkKXtmPVMuZXZlbnQuc3BlY2lhbFtkXXx8e30scD11W2Q9KHI/Zi5kZWxlZ2F0ZVR5cGU6Zi5iaW5kVHlwZSl8fGRdfHxbXSxzPXNbMl0mJm5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitoLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKSxhPW89cC5sZW5ndGg7d2hpbGUoby0tKWM9cFtvXSwhaSYmZyE9PWMub3JpZ1R5cGV8fG4mJm4uZ3VpZCE9PWMuZ3VpZHx8cyYmIXMudGVzdChjLm5hbWVzcGFjZSl8fHImJnIhPT1jLnNlbGVjdG9yJiYoXCIqKlwiIT09cnx8IWMuc2VsZWN0b3IpfHwocC5zcGxpY2UobywxKSxjLnNlbGVjdG9yJiZwLmRlbGVnYXRlQ291bnQtLSxmLnJlbW92ZSYmZi5yZW1vdmUuY2FsbChlLGMpKTthJiYhcC5sZW5ndGgmJihmLnRlYXJkb3duJiYhMSE9PWYudGVhcmRvd24uY2FsbChlLGgsdi5oYW5kbGUpfHxTLnJlbW92ZUV2ZW50KGUsZCx2LmhhbmRsZSksZGVsZXRlIHVbZF0pfWVsc2UgZm9yKGQgaW4gdSlTLmV2ZW50LnJlbW92ZShlLGQrdFtsXSxuLHIsITApO1MuaXNFbXB0eU9iamVjdCh1KSYmWS5yZW1vdmUoZSxcImhhbmRsZSBldmVudHNcIil9fSxkaXNwYXRjaDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLGEscz1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCksdT1TLmV2ZW50LmZpeChlKSxsPShZLmdldCh0aGlzLFwiZXZlbnRzXCIpfHxPYmplY3QuY3JlYXRlKG51bGwpKVt1LnR5cGVdfHxbXSxjPVMuZXZlbnQuc3BlY2lhbFt1LnR5cGVdfHx7fTtmb3Ioc1swXT11LHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXNbdF09YXJndW1lbnRzW3RdO2lmKHUuZGVsZWdhdGVUYXJnZXQ9dGhpcywhYy5wcmVEaXNwYXRjaHx8ITEhPT1jLnByZURpc3BhdGNoLmNhbGwodGhpcyx1KSl7YT1TLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcyx1LGwpLHQ9MDt3aGlsZSgoaT1hW3QrK10pJiYhdS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKXt1LmN1cnJlbnRUYXJnZXQ9aS5lbGVtLG49MDt3aGlsZSgobz1pLmhhbmRsZXJzW24rK10pJiYhdS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKXUucm5hbWVzcGFjZSYmITEhPT1vLm5hbWVzcGFjZSYmIXUucm5hbWVzcGFjZS50ZXN0KG8ubmFtZXNwYWNlKXx8KHUuaGFuZGxlT2JqPW8sdS5kYXRhPW8uZGF0YSx2b2lkIDAhPT0ocj0oKFMuZXZlbnQuc3BlY2lhbFtvLm9yaWdUeXBlXXx8e30pLmhhbmRsZXx8by5oYW5kbGVyKS5hcHBseShpLmVsZW0scykpJiYhMT09PSh1LnJlc3VsdD1yKSYmKHUucHJldmVudERlZmF1bHQoKSx1LnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGMucG9zdERpc3BhdGNoJiZjLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsdSksdS5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGEscz1bXSx1PXQuZGVsZWdhdGVDb3VudCxsPWUudGFyZ2V0O2lmKHUmJmwubm9kZVR5cGUmJiEoXCJjbGlja1wiPT09ZS50eXBlJiYxPD1lLmJ1dHRvbikpZm9yKDtsIT09dGhpcztsPWwucGFyZW50Tm9kZXx8dGhpcylpZigxPT09bC5ub2RlVHlwZSYmKFwiY2xpY2tcIiE9PWUudHlwZXx8ITAhPT1sLmRpc2FibGVkKSl7Zm9yKG89W10sYT17fSxuPTA7bjx1O24rKyl2b2lkIDA9PT1hW2k9KHI9dFtuXSkuc2VsZWN0b3IrXCIgXCJdJiYoYVtpXT1yLm5lZWRzQ29udGV4dD8tMTxTKGksdGhpcykuaW5kZXgobCk6Uy5maW5kKGksdGhpcyxudWxsLFtsXSkubGVuZ3RoKSxhW2ldJiZvLnB1c2gocik7by5sZW5ndGgmJnMucHVzaCh7ZWxlbTpsLGhhbmRsZXJzOm99KX1yZXR1cm4gbD10aGlzLHU8dC5sZW5ndGgmJnMucHVzaCh7ZWxlbTpsLGhhbmRsZXJzOnQuc2xpY2UodSl9KSxzfSxhZGRQcm9wOmZ1bmN0aW9uKHQsZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KFMuRXZlbnQucHJvdG90eXBlLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDptKGUpP2Z1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiBlKHRoaXMub3JpZ2luYWxFdmVudCl9OmZ1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbdF19LHNldDpmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyx0LHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTplfSl9fSl9LGZpeDpmdW5jdGlvbihlKXtyZXR1cm4gZVtTLmV4cGFuZG9dP2U6bmV3IFMuRXZlbnQoZSl9LHNwZWNpYWw6e2xvYWQ6e25vQnViYmxlOiEwfSxjbGljazp7c2V0dXA6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc3x8ZTtyZXR1cm4gcGUudGVzdCh0LnR5cGUpJiZ0LmNsaWNrJiZBKHQsXCJpbnB1dFwiKSYmQWUodCxcImNsaWNrXCIsQ2UpLCExfSx0cmlnZ2VyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXN8fGU7cmV0dXJuIHBlLnRlc3QodC50eXBlKSYmdC5jbGljayYmQSh0LFwiaW5wdXRcIikmJkFlKHQsXCJjbGlja1wiKSwhMH0sX2RlZmF1bHQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQ7cmV0dXJuIHBlLnRlc3QodC50eXBlKSYmdC5jbGljayYmQSh0LFwiaW5wdXRcIikmJlkuZ2V0KHQsXCJjbGlja1wiKXx8QSh0LFwiYVwiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWUucmVzdWx0JiZlLm9yaWdpbmFsRXZlbnQmJihlLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9ZS5yZXN1bHQpfX19fSxTLnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGUsdCxuKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfSxTLkV2ZW50PWZ1bmN0aW9uKGUsdCl7aWYoISh0aGlzIGluc3RhbmNlb2YgUy5FdmVudCkpcmV0dXJuIG5ldyBTLkV2ZW50KGUsdCk7ZSYmZS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0aGlzLnR5cGU9ZS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWUuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09ZS5kZWZhdWx0UHJldmVudGVkJiYhMT09PWUucmV0dXJuVmFsdWU/Q2U6RWUsdGhpcy50YXJnZXQ9ZS50YXJnZXQmJjM9PT1lLnRhcmdldC5ub2RlVHlwZT9lLnRhcmdldC5wYXJlbnROb2RlOmUudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1lLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWUucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWUsdCYmUy5leHRlbmQodGhpcyx0KSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8RGF0ZS5ub3coKSx0aGlzW1MuZXhwYW5kb109ITB9LFMuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpTLkV2ZW50LGlzRGVmYXVsdFByZXZlbnRlZDpFZSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpFZSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDpFZSxpc1NpbXVsYXRlZDohMSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9Q2UsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LFMuZWFjaCh7YWx0S2V5OiEwLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjaGFuZ2VkVG91Y2hlczohMCxjdHJsS2V5OiEwLGRldGFpbDohMCxldmVudFBoYXNlOiEwLG1ldGFLZXk6ITAscGFnZVg6ITAscGFnZVk6ITAsc2hpZnRLZXk6ITAsdmlldzohMCxcImNoYXJcIjohMCxjb2RlOiEwLGNoYXJDb2RlOiEwLGtleTohMCxrZXlDb2RlOiEwLGJ1dHRvbjohMCxidXR0b25zOiEwLGNsaWVudFg6ITAsY2xpZW50WTohMCxvZmZzZXRYOiEwLG9mZnNldFk6ITAscG9pbnRlcklkOiEwLHBvaW50ZXJUeXBlOiEwLHNjcmVlblg6ITAsc2NyZWVuWTohMCx0YXJnZXRUb3VjaGVzOiEwLHRvRWxlbWVudDohMCx0b3VjaGVzOiEwLHdoaWNoOmZ1bmN0aW9uKGUpe3ZhciB0PWUuYnV0dG9uO3JldHVybiBudWxsPT1lLndoaWNoJiZiZS50ZXN0KGUudHlwZSk/bnVsbCE9ZS5jaGFyQ29kZT9lLmNoYXJDb2RlOmUua2V5Q29kZTohZS53aGljaCYmdm9pZCAwIT09dCYmd2UudGVzdChlLnR5cGUpPzEmdD8xOjImdD8zOjQmdD8yOjA6ZS53aGljaH19LFMuZXZlbnQuYWRkUHJvcCksUy5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24oZSx0KXtTLmV2ZW50LnNwZWNpYWxbZV09e3NldHVwOmZ1bmN0aW9uKCl7cmV0dXJuIEFlKHRoaXMsZSxTZSksITF9LHRyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gQWUodGhpcyxlKSwhMH0sZGVsZWdhdGVUeXBlOnR9fSksUy5lYWNoKHttb3VzZWVudGVyOlwibW91c2VvdmVyXCIsbW91c2VsZWF2ZTpcIm1vdXNlb3V0XCIscG9pbnRlcmVudGVyOlwicG9pbnRlcm92ZXJcIixwb2ludGVybGVhdmU6XCJwb2ludGVyb3V0XCJ9LGZ1bmN0aW9uKGUsaSl7Uy5ldmVudC5zcGVjaWFsW2VdPXtkZWxlZ2F0ZVR5cGU6aSxiaW5kVHlwZTppLGhhbmRsZTpmdW5jdGlvbihlKXt2YXIgdCxuPWUucmVsYXRlZFRhcmdldCxyPWUuaGFuZGxlT2JqO3JldHVybiBuJiYobj09PXRoaXN8fFMuY29udGFpbnModGhpcyxuKSl8fChlLnR5cGU9ci5vcmlnVHlwZSx0PXIuaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksZS50eXBlPWkpLHR9fX0pLFMuZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4ga2UodGhpcyxlLHQsbixyKX0sb25lOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBrZSh0aGlzLGUsdCxuLHIsMSl9LG9mZjpmdW5jdGlvbihlLHQsbil7dmFyIHIsaTtpZihlJiZlLnByZXZlbnREZWZhdWx0JiZlLmhhbmRsZU9iailyZXR1cm4gcj1lLmhhbmRsZU9iaixTKGUuZGVsZWdhdGVUYXJnZXQpLm9mZihyLm5hbWVzcGFjZT9yLm9yaWdUeXBlK1wiLlwiK3IubmFtZXNwYWNlOnIub3JpZ1R5cGUsci5zZWxlY3RvcixyLmhhbmRsZXIpLHRoaXM7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpe2ZvcihpIGluIGUpdGhpcy5vZmYoaSx0LGVbaV0pO3JldHVybiB0aGlzfXJldHVybiExIT09dCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdHx8KG49dCx0PXZvaWQgMCksITE9PT1uJiYobj1FZSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Uy5ldmVudC5yZW1vdmUodGhpcyxlLG4sdCl9KX19KTt2YXIgTmU9LzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksRGU9L2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxqZT0vXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7ZnVuY3Rpb24gcWUoZSx0KXtyZXR1cm4gQShlLFwidGFibGVcIikmJkEoMTEhPT10Lm5vZGVUeXBlP3Q6dC5maXJzdENoaWxkLFwidHJcIikmJlMoZSkuY2hpbGRyZW4oXCJ0Ym9keVwiKVswXXx8ZX1mdW5jdGlvbiBMZShlKXtyZXR1cm4gZS50eXBlPShudWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKStcIi9cIitlLnR5cGUsZX1mdW5jdGlvbiBIZShlKXtyZXR1cm5cInRydWUvXCI9PT0oZS50eXBlfHxcIlwiKS5zbGljZSgwLDUpP2UudHlwZT1lLnR5cGUuc2xpY2UoNSk6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLGV9ZnVuY3Rpb24gT2UoZSx0KXt2YXIgbixyLGksbyxhLHM7aWYoMT09PXQubm9kZVR5cGUpe2lmKFkuaGFzRGF0YShlKSYmKHM9WS5nZXQoZSkuZXZlbnRzKSlmb3IoaSBpbiBZLnJlbW92ZSh0LFwiaGFuZGxlIGV2ZW50c1wiKSxzKWZvcihuPTAscj1zW2ldLmxlbmd0aDtuPHI7bisrKVMuZXZlbnQuYWRkKHQsaSxzW2ldW25dKTtRLmhhc0RhdGEoZSkmJihvPVEuYWNjZXNzKGUpLGE9Uy5leHRlbmQoe30sbyksUS5zZXQodCxhKSl9fWZ1bmN0aW9uIFBlKG4scixpLG8pe3I9ZyhyKTt2YXIgZSx0LGEscyx1LGwsYz0wLGY9bi5sZW5ndGgscD1mLTEsZD1yWzBdLGg9bShkKTtpZihofHwxPGYmJlwic3RyaW5nXCI9PXR5cGVvZiBkJiYheS5jaGVja0Nsb25lJiZEZS50ZXN0KGQpKXJldHVybiBuLmVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9bi5lcShlKTtoJiYoclswXT1kLmNhbGwodGhpcyxlLHQuaHRtbCgpKSksUGUodCxyLGksbyl9KTtpZihmJiYodD0oZT14ZShyLG5bMF0ub3duZXJEb2N1bWVudCwhMSxuLG8pKS5maXJzdENoaWxkLDE9PT1lLmNoaWxkTm9kZXMubGVuZ3RoJiYoZT10KSx0fHxvKSl7Zm9yKHM9KGE9Uy5tYXAodmUoZSxcInNjcmlwdFwiKSxMZSkpLmxlbmd0aDtjPGY7YysrKXU9ZSxjIT09cCYmKHU9Uy5jbG9uZSh1LCEwLCEwKSxzJiZTLm1lcmdlKGEsdmUodSxcInNjcmlwdFwiKSkpLGkuY2FsbChuW2NdLHUsYyk7aWYocylmb3IobD1hW2EubGVuZ3RoLTFdLm93bmVyRG9jdW1lbnQsUy5tYXAoYSxIZSksYz0wO2M8cztjKyspdT1hW2NdLGhlLnRlc3QodS50eXBlfHxcIlwiKSYmIVkuYWNjZXNzKHUsXCJnbG9iYWxFdmFsXCIpJiZTLmNvbnRhaW5zKGwsdSkmJih1LnNyYyYmXCJtb2R1bGVcIiE9PSh1LnR5cGV8fFwiXCIpLnRvTG93ZXJDYXNlKCk/Uy5fZXZhbFVybCYmIXUubm9Nb2R1bGUmJlMuX2V2YWxVcmwodS5zcmMse25vbmNlOnUubm9uY2V8fHUuZ2V0QXR0cmlidXRlKFwibm9uY2VcIil9LGwpOmIodS50ZXh0Q29udGVudC5yZXBsYWNlKGplLFwiXCIpLHUsbCkpfXJldHVybiBufWZ1bmN0aW9uIFJlKGUsdCxuKXtmb3IodmFyIHIsaT10P1MuZmlsdGVyKHQsZSk6ZSxvPTA7bnVsbCE9KHI9aVtvXSk7bysrKW58fDEhPT1yLm5vZGVUeXBlfHxTLmNsZWFuRGF0YSh2ZShyKSksci5wYXJlbnROb2RlJiYobiYmaWUocikmJnllKHZlKHIsXCJzY3JpcHRcIikpLHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7cmV0dXJuIGV9Uy5leHRlbmQoe2h0bWxQcmVmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGNsb25lOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYSxzLHUsbCxjPWUuY2xvbmVOb2RlKCEwKSxmPWllKGUpO2lmKCEoeS5ub0Nsb25lQ2hlY2tlZHx8MSE9PWUubm9kZVR5cGUmJjExIT09ZS5ub2RlVHlwZXx8Uy5pc1hNTERvYyhlKSkpZm9yKGE9dmUoYykscj0wLGk9KG89dmUoZSkpLmxlbmd0aDtyPGk7cisrKXM9b1tyXSx1PWFbcl0sdm9pZCAwLFwiaW5wdXRcIj09PShsPXUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkmJnBlLnRlc3Qocy50eXBlKT91LmNoZWNrZWQ9cy5jaGVja2VkOlwiaW5wdXRcIiE9PWwmJlwidGV4dGFyZWFcIiE9PWx8fCh1LmRlZmF1bHRWYWx1ZT1zLmRlZmF1bHRWYWx1ZSk7aWYodClpZihuKWZvcihvPW98fHZlKGUpLGE9YXx8dmUoYykscj0wLGk9by5sZW5ndGg7cjxpO3IrKylPZShvW3JdLGFbcl0pO2Vsc2UgT2UoZSxjKTtyZXR1cm4gMDwoYT12ZShjLFwic2NyaXB0XCIpKS5sZW5ndGgmJnllKGEsIWYmJnZlKGUsXCJzY3JpcHRcIikpLGN9LGNsZWFuRGF0YTpmdW5jdGlvbihlKXtmb3IodmFyIHQsbixyLGk9Uy5ldmVudC5zcGVjaWFsLG89MDt2b2lkIDAhPT0obj1lW29dKTtvKyspaWYoVihuKSl7aWYodD1uW1kuZXhwYW5kb10pe2lmKHQuZXZlbnRzKWZvcihyIGluIHQuZXZlbnRzKWlbcl0/Uy5ldmVudC5yZW1vdmUobixyKTpTLnJlbW92ZUV2ZW50KG4scix0LmhhbmRsZSk7bltZLmV4cGFuZG9dPXZvaWQgMH1uW1EuZXhwYW5kb10mJihuW1EuZXhwYW5kb109dm9pZCAwKX19fSksUy5mbi5leHRlbmQoe2RldGFjaDpmdW5jdGlvbihlKXtyZXR1cm4gUmUodGhpcyxlLCEwKX0scmVtb3ZlOmZ1bmN0aW9uKGUpe3JldHVybiBSZSh0aGlzLGUpfSx0ZXh0OmZ1bmN0aW9uKGUpe3JldHVybiAkKHRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWU/Uy50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCl7MSE9PXRoaXMubm9kZVR5cGUmJjExIT09dGhpcy5ub2RlVHlwZSYmOSE9PXRoaXMubm9kZVR5cGV8fCh0aGlzLnRleHRDb250ZW50PWUpfSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0sYXBwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIFBlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHxxZSh0aGlzLGUpLmFwcGVuZENoaWxkKGUpfSl9LHByZXBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gUGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciB0PXFlKHRoaXMsZSk7dC5pbnNlcnRCZWZvcmUoZSx0LmZpcnN0Q2hpbGQpfX0pfSxiZWZvcmU6ZnVuY3Rpb24oKXtyZXR1cm4gUGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsdGhpcyl9KX0sYWZ0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gUGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsdGhpcy5uZXh0U2libGluZyl9KX0sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD0wO251bGwhPShlPXRoaXNbdF0pO3QrKykxPT09ZS5ub2RlVHlwZSYmKFMuY2xlYW5EYXRhKHZlKGUsITEpKSxlLnRleHRDb250ZW50PVwiXCIpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbihlLHQpe3JldHVybiBlPW51bGwhPWUmJmUsdD1udWxsPT10P2U6dCx0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBTLmNsb25lKHRoaXMsZSx0KX0pfSxodG1sOmZ1bmN0aW9uKGUpe3JldHVybiAkKHRoaXMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc1swXXx8e30sbj0wLHI9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09ZSYmMT09PXQubm9kZVR5cGUpcmV0dXJuIHQuaW5uZXJIVE1MO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYhTmUudGVzdChlKSYmIWdlWyhkZS5leGVjKGUpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pe2U9Uy5odG1sUHJlZmlsdGVyKGUpO3RyeXtmb3IoO248cjtuKyspMT09PSh0PXRoaXNbbl18fHt9KS5ub2RlVHlwZSYmKFMuY2xlYW5EYXRhKHZlKHQsITEpKSx0LmlubmVySFRNTD1lKTt0PTB9Y2F0Y2goZSl7fX10JiZ0aGlzLmVtcHR5KCkuYXBwZW5kKGUpfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LHJlcGxhY2VXaXRoOmZ1bmN0aW9uKCl7dmFyIG49W107cmV0dXJuIFBlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGFyZW50Tm9kZTtTLmluQXJyYXkodGhpcyxuKTwwJiYoUy5jbGVhbkRhdGEodmUodGhpcykpLHQmJnQucmVwbGFjZUNoaWxkKGUsdGhpcykpfSxuKX19KSxTLmVhY2goe2FwcGVuZFRvOlwiYXBwZW5kXCIscHJlcGVuZFRvOlwicHJlcGVuZFwiLGluc2VydEJlZm9yZTpcImJlZm9yZVwiLGluc2VydEFmdGVyOlwiYWZ0ZXJcIixyZXBsYWNlQWxsOlwicmVwbGFjZVdpdGhcIn0sZnVuY3Rpb24oZSxhKXtTLmZuW2VdPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPVtdLHI9UyhlKSxpPXIubGVuZ3RoLTEsbz0wO288PWk7bysrKXQ9bz09PWk/dGhpczp0aGlzLmNsb25lKCEwKSxTKHJbb10pW2FdKHQpLHUuYXBwbHkobix0LmdldCgpKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobil9fSk7dmFyIE1lPW5ldyBSZWdFeHAoXCJeKFwiK2VlK1wiKSg/IXB4KVthLXolXSskXCIsXCJpXCIpLEllPWZ1bmN0aW9uKGUpe3ZhciB0PWUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztyZXR1cm4gdCYmdC5vcGVuZXJ8fCh0PUMpLHQuZ2V0Q29tcHV0ZWRTdHlsZShlKX0sV2U9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz17fTtmb3IoaSBpbiB0KW9baV09ZS5zdHlsZVtpXSxlLnN0eWxlW2ldPXRbaV07Zm9yKGkgaW4gcj1uLmNhbGwoZSksdCllLnN0eWxlW2ldPW9baV07cmV0dXJuIHJ9LEZlPW5ldyBSZWdFeHAobmUuam9pbihcInxcIiksXCJpXCIpO2Z1bmN0aW9uIEJlKGUsdCxuKXt2YXIgcixpLG8sYSxzPWUuc3R5bGU7cmV0dXJuKG49bnx8SWUoZSkpJiYoXCJcIiE9PShhPW4uZ2V0UHJvcGVydHlWYWx1ZSh0KXx8blt0XSl8fGllKGUpfHwoYT1TLnN0eWxlKGUsdCkpLCF5LnBpeGVsQm94U3R5bGVzKCkmJk1lLnRlc3QoYSkmJkZlLnRlc3QodCkmJihyPXMud2lkdGgsaT1zLm1pbldpZHRoLG89cy5tYXhXaWR0aCxzLm1pbldpZHRoPXMubWF4V2lkdGg9cy53aWR0aD1hLGE9bi53aWR0aCxzLndpZHRoPXIscy5taW5XaWR0aD1pLHMubWF4V2lkdGg9bykpLHZvaWQgMCE9PWE/YStcIlwiOmF9ZnVuY3Rpb24gJGUoZSx0KXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7aWYoIWUoKSlyZXR1cm4odGhpcy5nZXQ9dCkuYXBwbHkodGhpcyxhcmd1bWVudHMpO2RlbGV0ZSB0aGlzLmdldH19fSFmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXtpZihsKXt1LnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7bWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCIsbC5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NjAlO3RvcDoxJVwiLHJlLmFwcGVuZENoaWxkKHUpLmFwcGVuZENoaWxkKGwpO3ZhciBlPUMuZ2V0Q29tcHV0ZWRTdHlsZShsKTtuPVwiMSVcIiE9PWUudG9wLHM9MTI9PT10KGUubWFyZ2luTGVmdCksbC5zdHlsZS5yaWdodD1cIjYwJVwiLG89MzY9PT10KGUucmlnaHQpLHI9MzY9PT10KGUud2lkdGgpLGwuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLGk9MTI9PT10KGwub2Zmc2V0V2lkdGgvMykscmUucmVtb3ZlQ2hpbGQodSksbD1udWxsfX1mdW5jdGlvbiB0KGUpe3JldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZSkpfXZhciBuLHIsaSxvLGEscyx1PUUuY3JlYXRlRWxlbWVudChcImRpdlwiKSxsPUUuY3JlYXRlRWxlbWVudChcImRpdlwiKTtsLnN0eWxlJiYobC5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cImNvbnRlbnQtYm94XCIsbC5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiXCIseS5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09bC5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxTLmV4dGVuZCh5LHtib3hTaXppbmdSZWxpYWJsZTpmdW5jdGlvbigpe3JldHVybiBlKCkscn0scGl4ZWxCb3hTdHlsZXM6ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLG99LHBpeGVsUG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLG59LHJlbGlhYmxlTWFyZ2luTGVmdDpmdW5jdGlvbigpe3JldHVybiBlKCksc30sc2Nyb2xsYm94U2l6ZTpmdW5jdGlvbigpe3JldHVybiBlKCksaX0scmVsaWFibGVUckRpbWVuc2lvbnM6ZnVuY3Rpb24oKXt2YXIgZSx0LG4scjtyZXR1cm4gbnVsbD09YSYmKGU9RS5jcmVhdGVFbGVtZW50KFwidGFibGVcIiksdD1FLmNyZWF0ZUVsZW1lbnQoXCJ0clwiKSxuPUUuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4XCIsdC5zdHlsZS5oZWlnaHQ9XCIxcHhcIixuLnN0eWxlLmhlaWdodD1cIjlweFwiLHJlLmFwcGVuZENoaWxkKGUpLmFwcGVuZENoaWxkKHQpLmFwcGVuZENoaWxkKG4pLHI9Qy5nZXRDb21wdXRlZFN0eWxlKHQpLGE9MzxwYXJzZUludChyLmhlaWdodCkscmUucmVtb3ZlQ2hpbGQoZSkpLGF9fSkpfSgpO3ZhciBfZT1bXCJXZWJraXRcIixcIk1velwiLFwibXNcIl0semU9RS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFVlPXt9O2Z1bmN0aW9uIFhlKGUpe3ZhciB0PVMuY3NzUHJvcHNbZV18fFVlW2VdO3JldHVybiB0fHwoZSBpbiB6ZT9lOlVlW2VdPWZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG49X2UubGVuZ3RoO3doaWxlKG4tLSlpZigoZT1fZVtuXSt0KWluIHplKXJldHVybiBlfShlKXx8ZSl9dmFyIFZlPS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxHZT0vXi0tLyxZZT17cG9zaXRpb246XCJhYnNvbHV0ZVwiLHZpc2liaWxpdHk6XCJoaWRkZW5cIixkaXNwbGF5OlwiYmxvY2tcIn0sUWU9e2xldHRlclNwYWNpbmc6XCIwXCIsZm9udFdlaWdodDpcIjQwMFwifTtmdW5jdGlvbiBKZShlLHQsbil7dmFyIHI9dGUuZXhlYyh0KTtyZXR1cm4gcj9NYXRoLm1heCgwLHJbMl0tKG58fDApKSsoclszXXx8XCJweFwiKTp0fWZ1bmN0aW9uIEtlKGUsdCxuLHIsaSxvKXt2YXIgYT1cIndpZHRoXCI9PT10PzE6MCxzPTAsdT0wO2lmKG49PT0ocj9cImJvcmRlclwiOlwiY29udGVudFwiKSlyZXR1cm4gMDtmb3IoO2E8NDthKz0yKVwibWFyZ2luXCI9PT1uJiYodSs9Uy5jc3MoZSxuK25lW2FdLCEwLGkpKSxyPyhcImNvbnRlbnRcIj09PW4mJih1LT1TLmNzcyhlLFwicGFkZGluZ1wiK25lW2FdLCEwLGkpKSxcIm1hcmdpblwiIT09biYmKHUtPVMuY3NzKGUsXCJib3JkZXJcIituZVthXStcIldpZHRoXCIsITAsaSkpKToodSs9Uy5jc3MoZSxcInBhZGRpbmdcIituZVthXSwhMCxpKSxcInBhZGRpbmdcIiE9PW4/dSs9Uy5jc3MoZSxcImJvcmRlclwiK25lW2FdK1wiV2lkdGhcIiwhMCxpKTpzKz1TLmNzcyhlLFwiYm9yZGVyXCIrbmVbYV0rXCJXaWR0aFwiLCEwLGkpKTtyZXR1cm4hciYmMDw9byYmKHUrPU1hdGgubWF4KDAsTWF0aC5jZWlsKGVbXCJvZmZzZXRcIit0WzBdLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKV0tby11LXMtLjUpKXx8MCksdX1mdW5jdGlvbiBaZShlLHQsbil7dmFyIHI9SWUoZSksaT0oIXkuYm94U2l6aW5nUmVsaWFibGUoKXx8bikmJlwiYm9yZGVyLWJveFwiPT09Uy5jc3MoZSxcImJveFNpemluZ1wiLCExLHIpLG89aSxhPUJlKGUsdCxyKSxzPVwib2Zmc2V0XCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSk7aWYoTWUudGVzdChhKSl7aWYoIW4pcmV0dXJuIGE7YT1cImF1dG9cIn1yZXR1cm4oIXkuYm94U2l6aW5nUmVsaWFibGUoKSYmaXx8IXkucmVsaWFibGVUckRpbWVuc2lvbnMoKSYmQShlLFwidHJcIil8fFwiYXV0b1wiPT09YXx8IXBhcnNlRmxvYXQoYSkmJlwiaW5saW5lXCI9PT1TLmNzcyhlLFwiZGlzcGxheVwiLCExLHIpKSYmZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCYmKGk9XCJib3JkZXItYm94XCI9PT1TLmNzcyhlLFwiYm94U2l6aW5nXCIsITEsciksKG89cyBpbiBlKSYmKGE9ZVtzXSkpLChhPXBhcnNlRmxvYXQoYSl8fDApK0tlKGUsdCxufHwoaT9cImJvcmRlclwiOlwiY29udGVudFwiKSxvLHIsYSkrXCJweFwifWZ1bmN0aW9uIGV0KGUsdCxuLHIsaSl7cmV0dXJuIG5ldyBldC5wcm90b3R5cGUuaW5pdChlLHQsbixyLGkpfVMuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIG49QmUoZSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PW4/XCIxXCI6bn19fX0sY3NzTnVtYmVyOnthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsZ3JpZEFyZWE6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TdGFydDohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1N0YXJ0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6e30sc3R5bGU6ZnVuY3Rpb24oZSx0LG4scil7aWYoZSYmMyE9PWUubm9kZVR5cGUmJjghPT1lLm5vZGVUeXBlJiZlLnN0eWxlKXt2YXIgaSxvLGEscz1YKHQpLHU9R2UudGVzdCh0KSxsPWUuc3R5bGU7aWYodXx8KHQ9WGUocykpLGE9Uy5jc3NIb29rc1t0XXx8Uy5jc3NIb29rc1tzXSx2b2lkIDA9PT1uKXJldHVybiBhJiZcImdldFwiaW4gYSYmdm9pZCAwIT09KGk9YS5nZXQoZSwhMSxyKSk/aTpsW3RdO1wic3RyaW5nXCI9PT0obz10eXBlb2YgbikmJihpPXRlLmV4ZWMobikpJiZpWzFdJiYobj1zZShlLHQsaSksbz1cIm51bWJlclwiKSxudWxsIT1uJiZuPT1uJiYoXCJudW1iZXJcIiE9PW98fHV8fChuKz1pJiZpWzNdfHwoUy5jc3NOdW1iZXJbc10/XCJcIjpcInB4XCIpKSx5LmNsZWFyQ2xvbmVTdHlsZXx8XCJcIiE9PW58fDAhPT10LmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpfHwobFt0XT1cImluaGVyaXRcIiksYSYmXCJzZXRcImluIGEmJnZvaWQgMD09PShuPWEuc2V0KGUsbixyKSl8fCh1P2wuc2V0UHJvcGVydHkodCxuKTpsW3RdPW4pKX19LGNzczpmdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscz1YKHQpO3JldHVybiBHZS50ZXN0KHQpfHwodD1YZShzKSksKGE9Uy5jc3NIb29rc1t0XXx8Uy5jc3NIb29rc1tzXSkmJlwiZ2V0XCJpbiBhJiYoaT1hLmdldChlLCEwLG4pKSx2b2lkIDA9PT1pJiYoaT1CZShlLHQscikpLFwibm9ybWFsXCI9PT1pJiZ0IGluIFFlJiYoaT1RZVt0XSksXCJcIj09PW58fG4/KG89cGFyc2VGbG9hdChpKSwhMD09PW58fGlzRmluaXRlKG8pP298fDA6aSk6aX19KSxTLmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihlLHUpe1MuY3NzSG9va3NbdV09e2dldDpmdW5jdGlvbihlLHQsbil7aWYodClyZXR1cm4hVmUudGVzdChTLmNzcyhlLFwiZGlzcGxheVwiKSl8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJmUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg/WmUoZSx1LG4pOldlKGUsWWUsZnVuY3Rpb24oKXtyZXR1cm4gWmUoZSx1LG4pfSl9LHNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaT1JZShlKSxvPSF5LnNjcm9sbGJveFNpemUoKSYmXCJhYnNvbHV0ZVwiPT09aS5wb3NpdGlvbixhPShvfHxuKSYmXCJib3JkZXItYm94XCI9PT1TLmNzcyhlLFwiYm94U2l6aW5nXCIsITEsaSkscz1uP0tlKGUsdSxuLGEsaSk6MDtyZXR1cm4gYSYmbyYmKHMtPU1hdGguY2VpbChlW1wib2Zmc2V0XCIrdVswXS50b1VwcGVyQ2FzZSgpK3Uuc2xpY2UoMSldLXBhcnNlRmxvYXQoaVt1XSktS2UoZSx1LFwiYm9yZGVyXCIsITEsaSktLjUpKSxzJiYocj10ZS5leGVjKHQpKSYmXCJweFwiIT09KHJbM118fFwicHhcIikmJihlLnN0eWxlW3VdPXQsdD1TLmNzcyhlLHUpKSxKZSgwLHQscyl9fX0pLFMuY3NzSG9va3MubWFyZ2luTGVmdD0kZSh5LnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihlLHQpe2lmKHQpcmV0dXJuKHBhcnNlRmxvYXQoQmUoZSxcIm1hcmdpbkxlZnRcIikpfHxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtV2UoZSx7bWFyZ2luTGVmdDowfSxmdW5jdGlvbigpe3JldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnR9KSkrXCJweFwifSksUy5lYWNoKHttYXJnaW46XCJcIixwYWRkaW5nOlwiXCIsYm9yZGVyOlwiV2lkdGhcIn0sZnVuY3Rpb24oaSxvKXtTLmNzc0hvb2tzW2krb109e2V4cGFuZDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPXt9LHI9XCJzdHJpbmdcIj09dHlwZW9mIGU/ZS5zcGxpdChcIiBcIik6W2VdO3Q8NDt0KyspbltpK25lW3RdK29dPXJbdF18fHJbdC0yXXx8clswXTtyZXR1cm4gbn19LFwibWFyZ2luXCIhPT1pJiYoUy5jc3NIb29rc1tpK29dLnNldD1KZSl9KSxTLmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGUsdCl7cmV0dXJuICQodGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXt9LGE9MDtpZihBcnJheS5pc0FycmF5KHQpKXtmb3Iocj1JZShlKSxpPXQubGVuZ3RoO2E8aTthKyspb1t0W2FdXT1TLmNzcyhlLHRbYV0sITEscik7cmV0dXJuIG99cmV0dXJuIHZvaWQgMCE9PW4/Uy5zdHlsZShlLHQsbik6Uy5jc3MoZSx0KX0sZSx0LDE8YXJndW1lbnRzLmxlbmd0aCl9fSksKChTLlR3ZWVuPWV0KS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmV0LGluaXQ6ZnVuY3Rpb24oZSx0LG4scixpLG8pe3RoaXMuZWxlbT1lLHRoaXMucHJvcD1uLHRoaXMuZWFzaW5nPWl8fFMuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz10LHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1yLHRoaXMudW5pdD1vfHwoUy5jc3NOdW1iZXJbbl0/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT1ldC5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gZSYmZS5nZXQ/ZS5nZXQodGhpcyk6ZXQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGUpe3ZhciB0LG49ZXQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz10PVMuZWFzaW5nW3RoaXMuZWFzaW5nXShlLHRoaXMub3B0aW9ucy5kdXJhdGlvbiplLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPXQ9ZSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqdCt0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxuJiZuLnNldD9uLnNldCh0aGlzKTpldC5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSkuaW5pdC5wcm90b3R5cGU9ZXQucHJvdG90eXBlLChldC5wcm9wSG9va3M9e19kZWZhdWx0OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIDEhPT1lLmVsZW0ubm9kZVR5cGV8fG51bGwhPWUuZWxlbVtlLnByb3BdJiZudWxsPT1lLmVsZW0uc3R5bGVbZS5wcm9wXT9lLmVsZW1bZS5wcm9wXToodD1TLmNzcyhlLmVsZW0sZS5wcm9wLFwiXCIpKSYmXCJhdXRvXCIhPT10P3Q6MH0sc2V0OmZ1bmN0aW9uKGUpe1MuZnguc3RlcFtlLnByb3BdP1MuZnguc3RlcFtlLnByb3BdKGUpOjEhPT1lLmVsZW0ubm9kZVR5cGV8fCFTLmNzc0hvb2tzW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtYZShlLnByb3ApXT9lLmVsZW1bZS5wcm9wXT1lLm5vdzpTLnN0eWxlKGUuZWxlbSxlLnByb3AsZS5ub3crZS51bml0KX19fSkuc2Nyb2xsVG9wPWV0LnByb3BIb29rcy5zY3JvbGxMZWZ0PXtzZXQ6ZnVuY3Rpb24oZSl7ZS5lbGVtLm5vZGVUeXBlJiZlLmVsZW0ucGFyZW50Tm9kZSYmKGUuZWxlbVtlLnByb3BdPWUubm93KX19LFMuZWFzaW5nPXtsaW5lYXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LHN3aW5nOmZ1bmN0aW9uKGUpe3JldHVybi41LU1hdGguY29zKGUqTWF0aC5QSSkvMn0sX2RlZmF1bHQ6XCJzd2luZ1wifSxTLmZ4PWV0LnByb3RvdHlwZS5pbml0LFMuZnguc3RlcD17fTt2YXIgdHQsbnQscnQsaXQsb3Q9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLGF0PS9xdWV1ZUhvb2tzJC87ZnVuY3Rpb24gc3QoKXtudCYmKCExPT09RS5oaWRkZW4mJkMucmVxdWVzdEFuaW1hdGlvbkZyYW1lP0MucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0KTpDLnNldFRpbWVvdXQoc3QsUy5meC5pbnRlcnZhbCksUy5meC50aWNrKCkpfWZ1bmN0aW9uIHV0KCl7cmV0dXJuIEMuc2V0VGltZW91dChmdW5jdGlvbigpe3R0PXZvaWQgMH0pLHR0PURhdGUubm93KCl9ZnVuY3Rpb24gbHQoZSx0KXt2YXIgbixyPTAsaT17aGVpZ2h0OmV9O2Zvcih0PXQ/MTowO3I8NDtyKz0yLXQpaVtcIm1hcmdpblwiKyhuPW5lW3JdKV09aVtcInBhZGRpbmdcIituXT1lO3JldHVybiB0JiYoaS5vcGFjaXR5PWkud2lkdGg9ZSksaX1mdW5jdGlvbiBjdChlLHQsbil7Zm9yKHZhciByLGk9KGZ0LnR3ZWVuZXJzW3RdfHxbXSkuY29uY2F0KGZ0LnR3ZWVuZXJzW1wiKlwiXSksbz0wLGE9aS5sZW5ndGg7bzxhO28rKylpZihyPWlbb10uY2FsbChuLHQsZSkpcmV0dXJuIHJ9ZnVuY3Rpb24gZnQobyxlLHQpe3ZhciBuLGEscj0wLGk9ZnQucHJlZmlsdGVycy5sZW5ndGgscz1TLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIHUuZWxlbX0pLHU9ZnVuY3Rpb24oKXtpZihhKXJldHVybiExO2Zvcih2YXIgZT10dHx8dXQoKSx0PU1hdGgubWF4KDAsbC5zdGFydFRpbWUrbC5kdXJhdGlvbi1lKSxuPTEtKHQvbC5kdXJhdGlvbnx8MCkscj0wLGk9bC50d2VlbnMubGVuZ3RoO3I8aTtyKyspbC50d2VlbnNbcl0ucnVuKG4pO3JldHVybiBzLm5vdGlmeVdpdGgobyxbbCxuLHRdKSxuPDEmJmk/dDooaXx8cy5ub3RpZnlXaXRoKG8sW2wsMSwwXSkscy5yZXNvbHZlV2l0aChvLFtsXSksITEpfSxsPXMucHJvbWlzZSh7ZWxlbTpvLHByb3BzOlMuZXh0ZW5kKHt9LGUpLG9wdHM6Uy5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e30sZWFzaW5nOlMuZWFzaW5nLl9kZWZhdWx0fSx0KSxvcmlnaW5hbFByb3BlcnRpZXM6ZSxvcmlnaW5hbE9wdGlvbnM6dCxzdGFydFRpbWU6dHR8fHV0KCksZHVyYXRpb246dC5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24oZSx0KXt2YXIgbj1TLlR3ZWVuKG8sbC5vcHRzLGUsdCxsLm9wdHMuc3BlY2lhbEVhc2luZ1tlXXx8bC5vcHRzLmVhc2luZyk7cmV0dXJuIGwudHdlZW5zLnB1c2gobiksbn0sc3RvcDpmdW5jdGlvbihlKXt2YXIgdD0wLG49ZT9sLnR3ZWVucy5sZW5ndGg6MDtpZihhKXJldHVybiB0aGlzO2ZvcihhPSEwO3Q8bjt0KyspbC50d2VlbnNbdF0ucnVuKDEpO3JldHVybiBlPyhzLm5vdGlmeVdpdGgobyxbbCwxLDBdKSxzLnJlc29sdmVXaXRoKG8sW2wsZV0pKTpzLnJlamVjdFdpdGgobyxbbCxlXSksdGhpc319KSxjPWwucHJvcHM7Zm9yKCFmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGE7Zm9yKG4gaW4gZSlpZihpPXRbcj1YKG4pXSxvPWVbbl0sQXJyYXkuaXNBcnJheShvKSYmKGk9b1sxXSxvPWVbbl09b1swXSksbiE9PXImJihlW3JdPW8sZGVsZXRlIGVbbl0pLChhPVMuY3NzSG9va3Nbcl0pJiZcImV4cGFuZFwiaW4gYSlmb3IobiBpbiBvPWEuZXhwYW5kKG8pLGRlbGV0ZSBlW3JdLG8pbiBpbiBlfHwoZVtuXT1vW25dLHRbbl09aSk7ZWxzZSB0W3JdPWl9KGMsbC5vcHRzLnNwZWNpYWxFYXNpbmcpO3I8aTtyKyspaWYobj1mdC5wcmVmaWx0ZXJzW3JdLmNhbGwobCxvLGMsbC5vcHRzKSlyZXR1cm4gbShuLnN0b3ApJiYoUy5fcXVldWVIb29rcyhsLmVsZW0sbC5vcHRzLnF1ZXVlKS5zdG9wPW4uc3RvcC5iaW5kKG4pKSxuO3JldHVybiBTLm1hcChjLGN0LGwpLG0obC5vcHRzLnN0YXJ0KSYmbC5vcHRzLnN0YXJ0LmNhbGwobyxsKSxsLnByb2dyZXNzKGwub3B0cy5wcm9ncmVzcykuZG9uZShsLm9wdHMuZG9uZSxsLm9wdHMuY29tcGxldGUpLmZhaWwobC5vcHRzLmZhaWwpLmFsd2F5cyhsLm9wdHMuYWx3YXlzKSxTLmZ4LnRpbWVyKFMuZXh0ZW5kKHUse2VsZW06byxhbmltOmwscXVldWU6bC5vcHRzLnF1ZXVlfSkpLGx9Uy5BbmltYXRpb249Uy5leHRlbmQoZnQse3R3ZWVuZXJzOntcIipcIjpbZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmNyZWF0ZVR3ZWVuKGUsdCk7cmV0dXJuIHNlKG4uZWxlbSxlLHRlLmV4ZWModCksbiksbn1dfSx0d2VlbmVyOmZ1bmN0aW9uKGUsdCl7bShlKT8odD1lLGU9W1wiKlwiXSk6ZT1lLm1hdGNoKFApO2Zvcih2YXIgbixyPTAsaT1lLmxlbmd0aDtyPGk7cisrKW49ZVtyXSxmdC50d2VlbmVyc1tuXT1mdC50d2VlbmVyc1tuXXx8W10sZnQudHdlZW5lcnNbbl0udW5zaGlmdCh0KX0scHJlZmlsdGVyczpbZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGMsZj1cIndpZHRoXCJpbiB0fHxcImhlaWdodFwiaW4gdCxwPXRoaXMsZD17fSxoPWUuc3R5bGUsZz1lLm5vZGVUeXBlJiZhZShlKSx2PVkuZ2V0KGUsXCJmeHNob3dcIik7Zm9yKHIgaW4gbi5xdWV1ZXx8KG51bGw9PShhPVMuX3F1ZXVlSG9va3MoZSxcImZ4XCIpKS51bnF1ZXVlZCYmKGEudW5xdWV1ZWQ9MCxzPWEuZW1wdHkuZmlyZSxhLmVtcHR5LmZpcmU9ZnVuY3Rpb24oKXthLnVucXVldWVkfHxzKCl9KSxhLnVucXVldWVkKysscC5hbHdheXMoZnVuY3Rpb24oKXtwLmFsd2F5cyhmdW5jdGlvbigpe2EudW5xdWV1ZWQtLSxTLnF1ZXVlKGUsXCJmeFwiKS5sZW5ndGh8fGEuZW1wdHkuZmlyZSgpfSl9KSksdClpZihpPXRbcl0sb3QudGVzdChpKSl7aWYoZGVsZXRlIHRbcl0sbz1vfHxcInRvZ2dsZVwiPT09aSxpPT09KGc/XCJoaWRlXCI6XCJzaG93XCIpKXtpZihcInNob3dcIiE9PWl8fCF2fHx2b2lkIDA9PT12W3JdKWNvbnRpbnVlO2c9ITB9ZFtyXT12JiZ2W3JdfHxTLnN0eWxlKGUscil9aWYoKHU9IVMuaXNFbXB0eU9iamVjdCh0KSl8fCFTLmlzRW1wdHlPYmplY3QoZCkpZm9yKHIgaW4gZiYmMT09PWUubm9kZVR5cGUmJihuLm92ZXJmbG93PVtoLm92ZXJmbG93LGgub3ZlcmZsb3dYLGgub3ZlcmZsb3dZXSxudWxsPT0obD12JiZ2LmRpc3BsYXkpJiYobD1ZLmdldChlLFwiZGlzcGxheVwiKSksXCJub25lXCI9PT0oYz1TLmNzcyhlLFwiZGlzcGxheVwiKSkmJihsP2M9bDoobGUoW2VdLCEwKSxsPWUuc3R5bGUuZGlzcGxheXx8bCxjPVMuY3NzKGUsXCJkaXNwbGF5XCIpLGxlKFtlXSkpKSwoXCJpbmxpbmVcIj09PWN8fFwiaW5saW5lLWJsb2NrXCI9PT1jJiZudWxsIT1sKSYmXCJub25lXCI9PT1TLmNzcyhlLFwiZmxvYXRcIikmJih1fHwocC5kb25lKGZ1bmN0aW9uKCl7aC5kaXNwbGF5PWx9KSxudWxsPT1sJiYoYz1oLmRpc3BsYXksbD1cIm5vbmVcIj09PWM/XCJcIjpjKSksaC5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxuLm92ZXJmbG93JiYoaC5vdmVyZmxvdz1cImhpZGRlblwiLHAuYWx3YXlzKGZ1bmN0aW9uKCl7aC5vdmVyZmxvdz1uLm92ZXJmbG93WzBdLGgub3ZlcmZsb3dYPW4ub3ZlcmZsb3dbMV0saC5vdmVyZmxvd1k9bi5vdmVyZmxvd1syXX0pKSx1PSExLGQpdXx8KHY/XCJoaWRkZW5cImluIHYmJihnPXYuaGlkZGVuKTp2PVkuYWNjZXNzKGUsXCJmeHNob3dcIix7ZGlzcGxheTpsfSksbyYmKHYuaGlkZGVuPSFnKSxnJiZsZShbZV0sITApLHAuZG9uZShmdW5jdGlvbigpe2ZvcihyIGluIGd8fGxlKFtlXSksWS5yZW1vdmUoZSxcImZ4c2hvd1wiKSxkKVMuc3R5bGUoZSxyLGRbcl0pfSkpLHU9Y3QoZz92W3JdOjAscixwKSxyIGluIHZ8fCh2W3JdPXUuc3RhcnQsZyYmKHUuZW5kPXUuc3RhcnQsdS5zdGFydD0wKSl9XSxwcmVmaWx0ZXI6ZnVuY3Rpb24oZSx0KXt0P2Z0LnByZWZpbHRlcnMudW5zaGlmdChlKTpmdC5wcmVmaWx0ZXJzLnB1c2goZSl9fSksUy5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGU/Uy5leHRlbmQoe30sZSk6e2NvbXBsZXRlOm58fCFuJiZ0fHxtKGUpJiZlLGR1cmF0aW9uOmUsZWFzaW5nOm4mJnR8fHQmJiFtKHQpJiZ0fTtyZXR1cm4gUy5meC5vZmY/ci5kdXJhdGlvbj0wOlwibnVtYmVyXCIhPXR5cGVvZiByLmR1cmF0aW9uJiYoci5kdXJhdGlvbiBpbiBTLmZ4LnNwZWVkcz9yLmR1cmF0aW9uPVMuZnguc3BlZWRzW3IuZHVyYXRpb25dOnIuZHVyYXRpb249Uy5meC5zcGVlZHMuX2RlZmF1bHQpLG51bGwhPXIucXVldWUmJiEwIT09ci5xdWV1ZXx8KHIucXVldWU9XCJmeFwiKSxyLm9sZD1yLmNvbXBsZXRlLHIuY29tcGxldGU9ZnVuY3Rpb24oKXttKHIub2xkKSYmci5vbGQuY2FsbCh0aGlzKSxyLnF1ZXVlJiZTLmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0sUy5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5maWx0ZXIoYWUpLmNzcyhcIm9wYWNpdHlcIiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTp0fSxlLG4scil9LGFuaW1hdGU6ZnVuY3Rpb24odCxlLG4scil7dmFyIGk9Uy5pc0VtcHR5T2JqZWN0KHQpLG89Uy5zcGVlZChlLG4sciksYT1mdW5jdGlvbigpe3ZhciBlPWZ0KHRoaXMsUy5leHRlbmQoe30sdCksbyk7KGl8fFkuZ2V0KHRoaXMsXCJmaW5pc2hcIikpJiZlLnN0b3AoITApfTtyZXR1cm4gYS5maW5pc2g9YSxpfHwhMT09PW8ucXVldWU/dGhpcy5lYWNoKGEpOnRoaXMucXVldWUoby5xdWV1ZSxhKX0sc3RvcDpmdW5jdGlvbihpLGUsbyl7dmFyIGE9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdG9wO2RlbGV0ZSBlLnN0b3AsdChvKX07cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGkmJihvPWUsZT1pLGk9dm9pZCAwKSxlJiZ0aGlzLnF1ZXVlKGl8fFwiZnhcIixbXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9ITAsdD1udWxsIT1pJiZpK1wicXVldWVIb29rc1wiLG49Uy50aW1lcnMscj1ZLmdldCh0aGlzKTtpZih0KXJbdF0mJnJbdF0uc3RvcCYmYShyW3RdKTtlbHNlIGZvcih0IGluIHIpclt0XSYmclt0XS5zdG9wJiZhdC50ZXN0KHQpJiZhKHJbdF0pO2Zvcih0PW4ubGVuZ3RoO3QtLTspblt0XS5lbGVtIT09dGhpc3x8bnVsbCE9aSYmblt0XS5xdWV1ZSE9PWl8fChuW3RdLmFuaW0uc3RvcChvKSxlPSExLG4uc3BsaWNlKHQsMSkpOyFlJiZvfHxTLmRlcXVldWUodGhpcyxpKX0pfSxmaW5pc2g6ZnVuY3Rpb24oYSl7cmV0dXJuITEhPT1hJiYoYT1hfHxcImZ4XCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlLHQ9WS5nZXQodGhpcyksbj10W2ErXCJxdWV1ZVwiXSxyPXRbYStcInF1ZXVlSG9va3NcIl0saT1TLnRpbWVycyxvPW4/bi5sZW5ndGg6MDtmb3IodC5maW5pc2g9ITAsUy5xdWV1ZSh0aGlzLGEsW10pLHImJnIuc3RvcCYmci5zdG9wLmNhbGwodGhpcywhMCksZT1pLmxlbmd0aDtlLS07KWlbZV0uZWxlbT09PXRoaXMmJmlbZV0ucXVldWU9PT1hJiYoaVtlXS5hbmltLnN0b3AoITApLGkuc3BsaWNlKGUsMSkpO2ZvcihlPTA7ZTxvO2UrKyluW2VdJiZuW2VdLmZpbmlzaCYmbltlXS5maW5pc2guY2FsbCh0aGlzKTtkZWxldGUgdC5maW5pc2h9KX19KSxTLmVhY2goW1widG9nZ2xlXCIsXCJzaG93XCIsXCJoaWRlXCJdLGZ1bmN0aW9uKGUscil7dmFyIGk9Uy5mbltyXTtTLmZuW3JdPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbnVsbD09ZXx8XCJib29sZWFuXCI9PXR5cGVvZiBlP2kuYXBwbHkodGhpcyxhcmd1bWVudHMpOnRoaXMuYW5pbWF0ZShsdChyLCEwKSxlLHQsbil9fSksUy5lYWNoKHtzbGlkZURvd246bHQoXCJzaG93XCIpLHNsaWRlVXA6bHQoXCJoaWRlXCIpLHNsaWRlVG9nZ2xlOmx0KFwidG9nZ2xlXCIpLGZhZGVJbjp7b3BhY2l0eTpcInNob3dcIn0sZmFkZU91dDp7b3BhY2l0eTpcImhpZGVcIn0sZmFkZVRvZ2dsZTp7b3BhY2l0eTpcInRvZ2dsZVwifX0sZnVuY3Rpb24oZSxyKXtTLmZuW2VdPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5hbmltYXRlKHIsZSx0LG4pfX0pLFMudGltZXJzPVtdLFMuZngudGljaz1mdW5jdGlvbigpe3ZhciBlLHQ9MCxuPVMudGltZXJzO2Zvcih0dD1EYXRlLm5vdygpO3Q8bi5sZW5ndGg7dCsrKShlPW5bdF0pKCl8fG5bdF0hPT1lfHxuLnNwbGljZSh0LS0sMSk7bi5sZW5ndGh8fFMuZnguc3RvcCgpLHR0PXZvaWQgMH0sUy5meC50aW1lcj1mdW5jdGlvbihlKXtTLnRpbWVycy5wdXNoKGUpLFMuZnguc3RhcnQoKX0sUy5meC5pbnRlcnZhbD0xMyxTLmZ4LnN0YXJ0PWZ1bmN0aW9uKCl7bnR8fChudD0hMCxzdCgpKX0sUy5meC5zdG9wPWZ1bmN0aW9uKCl7bnQ9bnVsbH0sUy5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0sUy5mbi5kZWxheT1mdW5jdGlvbihyLGUpe3JldHVybiByPVMuZngmJlMuZnguc3BlZWRzW3JdfHxyLGU9ZXx8XCJmeFwiLHRoaXMucXVldWUoZSxmdW5jdGlvbihlLHQpe3ZhciBuPUMuc2V0VGltZW91dChlLHIpO3Quc3RvcD1mdW5jdGlvbigpe0MuY2xlYXJUaW1lb3V0KG4pfX0pfSxydD1FLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxpdD1FLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIikuYXBwZW5kQ2hpbGQoRS5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKSxydC50eXBlPVwiY2hlY2tib3hcIix5LmNoZWNrT249XCJcIiE9PXJ0LnZhbHVlLHkub3B0U2VsZWN0ZWQ9aXQuc2VsZWN0ZWQsKHJ0PUUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS52YWx1ZT1cInRcIixydC50eXBlPVwicmFkaW9cIix5LnJhZGlvVmFsdWU9XCJ0XCI9PT1ydC52YWx1ZTt2YXIgcHQsZHQ9Uy5leHByLmF0dHJIYW5kbGU7Uy5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gJCh0aGlzLFMuYXR0cixlLHQsMTxhcmd1bWVudHMubGVuZ3RoKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Uy5yZW1vdmVBdHRyKHRoaXMsZSl9KX19KSxTLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgZS5nZXRBdHRyaWJ1dGU/Uy5wcm9wKGUsdCxuKTooMT09PW8mJlMuaXNYTUxEb2MoZSl8fChpPVMuYXR0ckhvb2tzW3QudG9Mb3dlckNhc2UoKV18fChTLmV4cHIubWF0Y2guYm9vbC50ZXN0KHQpP3B0OnZvaWQgMCkpLHZvaWQgMCE9PW4/bnVsbD09PW4/dm9pZCBTLnJlbW92ZUF0dHIoZSx0KTppJiZcInNldFwiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOihlLnNldEF0dHJpYnV0ZSh0LG4rXCJcIiksbik6aSYmXCJnZXRcImluIGkmJm51bGwhPT0ocj1pLmdldChlLHQpKT9yOm51bGw9PShyPVMuZmluZC5hdHRyKGUsdCkpP3ZvaWQgMDpyKX0sYXR0ckhvb2tzOnt0eXBlOntzZXQ6ZnVuY3Rpb24oZSx0KXtpZigheS5yYWRpb1ZhbHVlJiZcInJhZGlvXCI9PT10JiZBKGUsXCJpbnB1dFwiKSl7dmFyIG49ZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsdCksbiYmKGUudmFsdWU9biksdH19fX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MCxpPXQmJnQubWF0Y2goUCk7aWYoaSYmMT09PWUubm9kZVR5cGUpd2hpbGUobj1pW3IrK10pZS5yZW1vdmVBdHRyaWJ1dGUobil9fSkscHQ9e3NldDpmdW5jdGlvbihlLHQsbil7cmV0dXJuITE9PT10P1MucmVtb3ZlQXR0cihlLG4pOmUuc2V0QXR0cmlidXRlKG4sbiksbn19LFMuZWFjaChTLmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goL1xcdysvZyksZnVuY3Rpb24oZSx0KXt2YXIgYT1kdFt0XXx8Uy5maW5kLmF0dHI7ZHRbdF09ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz10LnRvTG93ZXJDYXNlKCk7cmV0dXJuIG58fChpPWR0W29dLGR0W29dPXIscj1udWxsIT1hKGUsdCxuKT9vOm51bGwsZHRbb109aSkscn19KTt2YXIgaHQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxndD0vXig/OmF8YXJlYSkkL2k7ZnVuY3Rpb24gdnQoZSl7cmV0dXJuKGUubWF0Y2goUCl8fFtdKS5qb2luKFwiIFwiKX1mdW5jdGlvbiB5dChlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUmJmUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCJ9ZnVuY3Rpb24gbXQoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZTpcInN0cmluZ1wiPT10eXBlb2YgZSYmZS5tYXRjaChQKXx8W119Uy5mbi5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gJCh0aGlzLFMucHJvcCxlLHQsMTxhcmd1bWVudHMubGVuZ3RoKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXNbUy5wcm9wRml4W2VdfHxlXX0pfX0pLFMuZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89ZS5ub2RlVHlwZTtpZigzIT09byYmOCE9PW8mJjIhPT1vKXJldHVybiAxPT09byYmUy5pc1hNTERvYyhlKXx8KHQ9Uy5wcm9wRml4W3RdfHx0LGk9Uy5wcm9wSG9va3NbdF0pLHZvaWQgMCE9PW4/aSYmXCJzZXRcImluIGkmJnZvaWQgMCE9PShyPWkuc2V0KGUsbix0KSk/cjplW3RdPW46aSYmXCJnZXRcImluIGkmJm51bGwhPT0ocj1pLmdldChlLHQpKT9yOmVbdF19LHByb3BIb29rczp7dGFiSW5kZXg6e2dldDpmdW5jdGlvbihlKXt2YXIgdD1TLmZpbmQuYXR0cihlLFwidGFiaW5kZXhcIik7cmV0dXJuIHQ/cGFyc2VJbnQodCwxMCk6aHQudGVzdChlLm5vZGVOYW1lKXx8Z3QudGVzdChlLm5vZGVOYW1lKSYmZS5ocmVmPzA6LTF9fX0scHJvcEZpeDp7XCJmb3JcIjpcImh0bWxGb3JcIixcImNsYXNzXCI6XCJjbGFzc05hbWVcIn19KSx5Lm9wdFNlbGVjdGVkfHwoUy5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7cmV0dXJuIHQmJnQucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsbnVsbH0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTt0JiYodC5zZWxlY3RlZEluZGV4LHQucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgpfX0pLFMuZWFjaChbXCJ0YWJJbmRleFwiLFwicmVhZE9ubHlcIixcIm1heExlbmd0aFwiLFwiY2VsbFNwYWNpbmdcIixcImNlbGxQYWRkaW5nXCIsXCJyb3dTcGFuXCIsXCJjb2xTcGFuXCIsXCJ1c2VNYXBcIixcImZyYW1lQm9yZGVyXCIsXCJjb250ZW50RWRpdGFibGVcIl0sZnVuY3Rpb24oKXtTLnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXT10aGlzfSksUy5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzLHU9MDtpZihtKHQpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7Uyh0aGlzKS5hZGRDbGFzcyh0LmNhbGwodGhpcyxlLHl0KHRoaXMpKSl9KTtpZigoZT1tdCh0KSkubGVuZ3RoKXdoaWxlKG49dGhpc1t1KytdKWlmKGk9eXQobikscj0xPT09bi5ub2RlVHlwZSYmXCIgXCIrdnQoaSkrXCIgXCIpe2E9MDt3aGlsZShvPWVbYSsrXSlyLmluZGV4T2YoXCIgXCIrbytcIiBcIik8MCYmKHIrPW8rXCIgXCIpO2khPT0ocz12dChyKSkmJm4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixzKX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHMsdT0wO2lmKG0odCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtTKHRoaXMpLnJlbW92ZUNsYXNzKHQuY2FsbCh0aGlzLGUseXQodGhpcykpKX0pO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmF0dHIoXCJjbGFzc1wiLFwiXCIpO2lmKChlPW10KHQpKS5sZW5ndGgpd2hpbGUobj10aGlzW3UrK10paWYoaT15dChuKSxyPTE9PT1uLm5vZGVUeXBlJiZcIiBcIit2dChpKStcIiBcIil7YT0wO3doaWxlKG89ZVthKytdKXdoaWxlKC0xPHIuaW5kZXhPZihcIiBcIitvK1wiIFwiKSlyPXIucmVwbGFjZShcIiBcIitvK1wiIFwiLFwiIFwiKTtpIT09KHM9dnQocikpJiZuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIscyl9cmV0dXJuIHRoaXN9LHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKGksdCl7dmFyIG89dHlwZW9mIGksYT1cInN0cmluZ1wiPT09b3x8QXJyYXkuaXNBcnJheShpKTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHQmJmE/dD90aGlzLmFkZENsYXNzKGkpOnRoaXMucmVtb3ZlQ2xhc3MoaSk6bShpKT90aGlzLmVhY2goZnVuY3Rpb24oZSl7Uyh0aGlzKS50b2dnbGVDbGFzcyhpLmNhbGwodGhpcyxlLHl0KHRoaXMpLHQpLHQpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdCxuLHI7aWYoYSl7dD0wLG49Uyh0aGlzKSxyPW10KGkpO3doaWxlKGU9clt0KytdKW4uaGFzQ2xhc3MoZSk/bi5yZW1vdmVDbGFzcyhlKTpuLmFkZENsYXNzKGUpfWVsc2Ugdm9pZCAwIT09aSYmXCJib29sZWFuXCIhPT1vfHwoKGU9eXQodGhpcykpJiZZLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLGUpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsZXx8ITE9PT1pP1wiXCI6WS5nZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihlKXt2YXIgdCxuLHI9MDt0PVwiIFwiK2UrXCIgXCI7d2hpbGUobj10aGlzW3IrK10paWYoMT09PW4ubm9kZVR5cGUmJi0xPChcIiBcIit2dCh5dChuKSkrXCIgXCIpLmluZGV4T2YodCkpcmV0dXJuITA7cmV0dXJuITF9fSk7dmFyIHh0PS9cXHIvZztTLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKG4pe3ZhciByLGUsaSx0PXRoaXNbMF07cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGk9bShuKSx0aGlzLmVhY2goZnVuY3Rpb24oZSl7dmFyIHQ7MT09PXRoaXMubm9kZVR5cGUmJihudWxsPT0odD1pP24uY2FsbCh0aGlzLGUsUyh0aGlzKS52YWwoKSk6bik/dD1cIlwiOlwibnVtYmVyXCI9PXR5cGVvZiB0P3QrPVwiXCI6QXJyYXkuaXNBcnJheSh0KSYmKHQ9Uy5tYXAodCxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9cIlwiOmUrXCJcIn0pKSwocj1TLnZhbEhvb2tzW3RoaXMudHlwZV18fFMudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwic2V0XCJpbiByJiZ2b2lkIDAhPT1yLnNldCh0aGlzLHQsXCJ2YWx1ZVwiKXx8KHRoaXMudmFsdWU9dCkpfSkpOnQ/KHI9Uy52YWxIb29rc1t0LnR5cGVdfHxTLnZhbEhvb2tzW3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pJiZcImdldFwiaW4gciYmdm9pZCAwIT09KGU9ci5nZXQodCxcInZhbHVlXCIpKT9lOlwic3RyaW5nXCI9PXR5cGVvZihlPXQudmFsdWUpP2UucmVwbGFjZSh4dCxcIlwiKTpudWxsPT1lP1wiXCI6ZTp2b2lkIDB9fSksUy5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihlKXt2YXIgdD1TLmZpbmQuYXR0cihlLFwidmFsdWVcIik7cmV0dXJuIG51bGwhPXQ/dDp2dChTLnRleHQoZSkpfX0sc2VsZWN0OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGk9ZS5vcHRpb25zLG89ZS5zZWxlY3RlZEluZGV4LGE9XCJzZWxlY3Qtb25lXCI9PT1lLnR5cGUscz1hP251bGw6W10sdT1hP28rMTppLmxlbmd0aDtmb3Iocj1vPDA/dTphP286MDtyPHU7cisrKWlmKCgobj1pW3JdKS5zZWxlY3RlZHx8cj09PW8pJiYhbi5kaXNhYmxlZCYmKCFuLnBhcmVudE5vZGUuZGlzYWJsZWR8fCFBKG4ucGFyZW50Tm9kZSxcIm9wdGdyb3VwXCIpKSl7aWYodD1TKG4pLnZhbCgpLGEpcmV0dXJuIHQ7cy5wdXNoKHQpfXJldHVybiBzfSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk9ZS5vcHRpb25zLG89Uy5tYWtlQXJyYXkodCksYT1pLmxlbmd0aDt3aGlsZShhLS0pKChyPWlbYV0pLnNlbGVjdGVkPS0xPFMuaW5BcnJheShTLnZhbEhvb2tzLm9wdGlvbi5nZXQociksbykpJiYobj0hMCk7cmV0dXJuIG58fChlLnNlbGVjdGVkSW5kZXg9LTEpLG99fX19KSxTLmVhY2goW1wicmFkaW9cIixcImNoZWNrYm94XCJdLGZ1bmN0aW9uKCl7Uy52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gZS5jaGVja2VkPS0xPFMuaW5BcnJheShTKGUpLnZhbCgpLHQpfX0seS5jaGVja09ufHwoUy52YWxIb29rc1t0aGlzXS5nZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpP1wib25cIjplLnZhbHVlfSl9KSx5LmZvY3VzaW49XCJvbmZvY3VzaW5cImluIEM7dmFyIGJ0PS9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyx3dD1mdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpfTtTLmV4dGVuZChTLmV2ZW50LHt0cmlnZ2VyOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbCxjLGYscD1bbnx8RV0sZD12LmNhbGwoZSxcInR5cGVcIik/ZS50eXBlOmUsaD12LmNhbGwoZSxcIm5hbWVzcGFjZVwiKT9lLm5hbWVzcGFjZS5zcGxpdChcIi5cIik6W107aWYobz1mPWE9bj1ufHxFLDMhPT1uLm5vZGVUeXBlJiY4IT09bi5ub2RlVHlwZSYmIWJ0LnRlc3QoZCtTLmV2ZW50LnRyaWdnZXJlZCkmJigtMTxkLmluZGV4T2YoXCIuXCIpJiYoZD0oaD1kLnNwbGl0KFwiLlwiKSkuc2hpZnQoKSxoLnNvcnQoKSksdT1kLmluZGV4T2YoXCI6XCIpPDAmJlwib25cIitkLChlPWVbUy5leHBhbmRvXT9lOm5ldyBTLkV2ZW50KGQsXCJvYmplY3RcIj09dHlwZW9mIGUmJmUpKS5pc1RyaWdnZXI9cj8yOjMsZS5uYW1lc3BhY2U9aC5qb2luKFwiLlwiKSxlLnJuYW1lc3BhY2U9ZS5uYW1lc3BhY2U/bmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK2guam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsZS5yZXN1bHQ9dm9pZCAwLGUudGFyZ2V0fHwoZS50YXJnZXQ9biksdD1udWxsPT10P1tlXTpTLm1ha2VBcnJheSh0LFtlXSksYz1TLmV2ZW50LnNwZWNpYWxbZF18fHt9LHJ8fCFjLnRyaWdnZXJ8fCExIT09Yy50cmlnZ2VyLmFwcGx5KG4sdCkpKXtpZighciYmIWMubm9CdWJibGUmJiF4KG4pKXtmb3Iocz1jLmRlbGVnYXRlVHlwZXx8ZCxidC50ZXN0KHMrZCl8fChvPW8ucGFyZW50Tm9kZSk7bztvPW8ucGFyZW50Tm9kZSlwLnB1c2gobyksYT1vO2E9PT0obi5vd25lckRvY3VtZW50fHxFKSYmcC5wdXNoKGEuZGVmYXVsdFZpZXd8fGEucGFyZW50V2luZG93fHxDKX1pPTA7d2hpbGUoKG89cFtpKytdKSYmIWUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlmPW8sZS50eXBlPTE8aT9zOmMuYmluZFR5cGV8fGQsKGw9KFkuZ2V0KG8sXCJldmVudHNcIil8fE9iamVjdC5jcmVhdGUobnVsbCkpW2UudHlwZV0mJlkuZ2V0KG8sXCJoYW5kbGVcIikpJiZsLmFwcGx5KG8sdCksKGw9dSYmb1t1XSkmJmwuYXBwbHkmJlYobykmJihlLnJlc3VsdD1sLmFwcGx5KG8sdCksITE9PT1lLnJlc3VsdCYmZS5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gZS50eXBlPWQscnx8ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8Yy5fZGVmYXVsdCYmITEhPT1jLl9kZWZhdWx0LmFwcGx5KHAucG9wKCksdCl8fCFWKG4pfHx1JiZtKG5bZF0pJiYheChuKSYmKChhPW5bdV0pJiYoblt1XT1udWxsKSxTLmV2ZW50LnRyaWdnZXJlZD1kLGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmZi5hZGRFdmVudExpc3RlbmVyKGQsd3QpLG5bZF0oKSxlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmYucmVtb3ZlRXZlbnRMaXN0ZW5lcihkLHd0KSxTLmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsYSYmKG5bdV09YSkpLGUucmVzdWx0fX0sc2ltdWxhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVMuZXh0ZW5kKG5ldyBTLkV2ZW50LG4se3R5cGU6ZSxpc1NpbXVsYXRlZDohMH0pO1MuZXZlbnQudHJpZ2dlcihyLG51bGwsdCl9fSksUy5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Uy5ldmVudC50cmlnZ2VyKGUsdCx0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXNbMF07aWYobilyZXR1cm4gUy5ldmVudC50cmlnZ2VyKGUsdCxuLCEwKX19KSx5LmZvY3VzaW58fFMuZWFjaCh7Zm9jdXM6XCJmb2N1c2luXCIsYmx1cjpcImZvY3Vzb3V0XCJ9LGZ1bmN0aW9uKG4scil7dmFyIGk9ZnVuY3Rpb24oZSl7Uy5ldmVudC5zaW11bGF0ZShyLGUudGFyZ2V0LFMuZXZlbnQuZml4KGUpKX07Uy5ldmVudC5zcGVjaWFsW3JdPXtzZXR1cDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcy5kb2N1bWVudHx8dGhpcyx0PVkuYWNjZXNzKGUscik7dHx8ZS5hZGRFdmVudExpc3RlbmVyKG4saSwhMCksWS5hY2Nlc3MoZSxyLCh0fHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMuZG9jdW1lbnR8fHRoaXMsdD1ZLmFjY2VzcyhlLHIpLTE7dD9ZLmFjY2VzcyhlLHIsdCk6KGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihuLGksITApLFkucmVtb3ZlKGUscikpfX19KTt2YXIgVHQ9Qy5sb2NhdGlvbixDdD17Z3VpZDpEYXRlLm5vdygpfSxFdD0vXFw/LztTLnBhcnNlWE1MPWZ1bmN0aW9uKGUpe3ZhciB0O2lmKCFlfHxcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gbnVsbDt0cnl7dD0obmV3IEMuRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcoZSxcInRleHQveG1sXCIpfWNhdGNoKGUpe3Q9dm9pZCAwfXJldHVybiB0JiYhdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpLmxlbmd0aHx8Uy5lcnJvcihcIkludmFsaWQgWE1MOiBcIitlKSx0fTt2YXIgU3Q9L1xcW1xcXSQvLGt0PS9cXHI/XFxuL2csQXQ9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLE50PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBEdChuLGUscixpKXt2YXIgdDtpZihBcnJheS5pc0FycmF5KGUpKVMuZWFjaChlLGZ1bmN0aW9uKGUsdCl7cnx8U3QudGVzdChuKT9pKG4sdCk6RHQobitcIltcIisoXCJvYmplY3RcIj09dHlwZW9mIHQmJm51bGwhPXQ/ZTpcIlwiKStcIl1cIix0LHIsaSl9KTtlbHNlIGlmKHJ8fFwib2JqZWN0XCIhPT13KGUpKWkobixlKTtlbHNlIGZvcih0IGluIGUpRHQobitcIltcIit0K1wiXVwiLGVbdF0scixpKX1TLnBhcmFtPWZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxpPWZ1bmN0aW9uKGUsdCl7dmFyIG49bSh0KT90KCk6dDtyW3IubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoZSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KG51bGw9PW4/XCJcIjpuKX07aWYobnVsbD09ZSlyZXR1cm5cIlwiO2lmKEFycmF5LmlzQXJyYXkoZSl8fGUuanF1ZXJ5JiYhUy5pc1BsYWluT2JqZWN0KGUpKVMuZWFjaChlLGZ1bmN0aW9uKCl7aSh0aGlzLm5hbWUsdGhpcy52YWx1ZSl9KTtlbHNlIGZvcihuIGluIGUpRHQobixlW25dLHQsaSk7cmV0dXJuIHIuam9pbihcIiZcIil9LFMuZm4uZXh0ZW5kKHtzZXJpYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gUy5wYXJhbSh0aGlzLnNlcmlhbGl6ZUFycmF5KCkpfSxzZXJpYWxpemVBcnJheTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPVMucHJvcCh0aGlzLFwiZWxlbWVudHNcIik7cmV0dXJuIGU/Uy5tYWtlQXJyYXkoZSk6dGhpc30pLmZpbHRlcihmdW5jdGlvbigpe3ZhciBlPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lJiYhUyh0aGlzKS5pcyhcIjpkaXNhYmxlZFwiKSYmTnQudGVzdCh0aGlzLm5vZGVOYW1lKSYmIUF0LnRlc3QoZSkmJih0aGlzLmNoZWNrZWR8fCFwZS50ZXN0KGUpKX0pLm1hcChmdW5jdGlvbihlLHQpe3ZhciBuPVModGhpcykudmFsKCk7cmV0dXJuIG51bGw9PW4/bnVsbDpBcnJheS5pc0FycmF5KG4pP1MubWFwKG4sZnVuY3Rpb24oZSl7cmV0dXJue25hbWU6dC5uYW1lLHZhbHVlOmUucmVwbGFjZShrdCxcIlxcclxcblwiKX19KTp7bmFtZTp0Lm5hbWUsdmFsdWU6bi5yZXBsYWNlKGt0LFwiXFxyXFxuXCIpfX0pLmdldCgpfX0pO3ZhciBqdD0vJTIwL2cscXQ9LyMuKiQvLEx0PS8oWz8mXSlfPVteJl0qLyxIdD0vXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL2dtLE90PS9eKD86R0VUfEhFQUQpJC8sUHQ9L15cXC9cXC8vLFJ0PXt9LE10PXt9LEl0PVwiKi9cIi5jb25jYXQoXCIqXCIpLFd0PUUuY3JlYXRlRWxlbWVudChcImFcIik7ZnVuY3Rpb24gRnQobyl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7XCJzdHJpbmdcIiE9dHlwZW9mIGUmJih0PWUsZT1cIipcIik7dmFyIG4scj0wLGk9ZS50b0xvd2VyQ2FzZSgpLm1hdGNoKFApfHxbXTtpZihtKHQpKXdoaWxlKG49aVtyKytdKVwiK1wiPT09blswXT8obj1uLnNsaWNlKDEpfHxcIipcIiwob1tuXT1vW25dfHxbXSkudW5zaGlmdCh0KSk6KG9bbl09b1tuXXx8W10pLnB1c2godCl9fWZ1bmN0aW9uIEJ0KHQsaSxvLGEpe3ZhciBzPXt9LHU9dD09PU10O2Z1bmN0aW9uIGwoZSl7dmFyIHI7cmV0dXJuIHNbZV09ITAsUy5lYWNoKHRbZV18fFtdLGZ1bmN0aW9uKGUsdCl7dmFyIG49dChpLG8sYSk7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIG58fHV8fHNbbl0/dT8hKHI9bik6dm9pZCAwOihpLmRhdGFUeXBlcy51bnNoaWZ0KG4pLGwobiksITEpfSkscn1yZXR1cm4gbChpLmRhdGFUeXBlc1swXSl8fCFzW1wiKlwiXSYmbChcIipcIil9ZnVuY3Rpb24gJHQoZSx0KXt2YXIgbixyLGk9Uy5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnN8fHt9O2ZvcihuIGluIHQpdm9pZCAwIT09dFtuXSYmKChpW25dP2U6cnx8KHI9e30pKVtuXT10W25dKTtyZXR1cm4gciYmUy5leHRlbmQoITAsZSxyKSxlfVd0LmhyZWY9VHQuaHJlZixTLmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6VHQuaHJlZix0eXBlOlwiR0VUXCIsaXNMb2NhbDovXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLy50ZXN0KFR0LnByb3RvY29sKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjpJdCx0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi9cXGJ4bWxcXGIvLGh0bWw6L1xcYmh0bWwvLGpzb246L1xcYmpzb25cXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6SlNPTi5wYXJzZSxcInRleHQgeG1sXCI6Uy5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/JHQoJHQoZSxTLmFqYXhTZXR0aW5ncyksdCk6JHQoUy5hamF4U2V0dGluZ3MsZSl9LGFqYXhQcmVmaWx0ZXI6RnQoUnQpLGFqYXhUcmFuc3BvcnQ6RnQoTXQpLGFqYXg6ZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksdD10fHx7fTt2YXIgYyxmLHAsbixkLHIsaCxnLGksbyx2PVMuYWpheFNldHVwKHt9LHQpLHk9di5jb250ZXh0fHx2LG09di5jb250ZXh0JiYoeS5ub2RlVHlwZXx8eS5qcXVlcnkpP1MoeSk6Uy5ldmVudCx4PVMuRGVmZXJyZWQoKSxiPVMuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksdz12LnN0YXR1c0NvZGV8fHt9LGE9e30scz17fSx1PVwiY2FuY2VsZWRcIixUPXtyZWFkeVN0YXRlOjAsZ2V0UmVzcG9uc2VIZWFkZXI6ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoaCl7aWYoIW4pe249e307d2hpbGUodD1IdC5leGVjKHApKW5bdFsxXS50b0xvd2VyQ2FzZSgpK1wiIFwiXT0oblt0WzFdLnRvTG93ZXJDYXNlKCkrXCIgXCJdfHxbXSkuY29uY2F0KHRbMl0pfXQ9bltlLnRvTG93ZXJDYXNlKCkrXCIgXCJdfXJldHVybiBudWxsPT10P251bGw6dC5qb2luKFwiLCBcIil9LGdldEFsbFJlc3BvbnNlSGVhZGVyczpmdW5jdGlvbigpe3JldHVybiBoP3A6bnVsbH0sc2V0UmVxdWVzdEhlYWRlcjpmdW5jdGlvbihlLHQpe3JldHVybiBudWxsPT1oJiYoZT1zW2UudG9Mb3dlckNhc2UoKV09c1tlLnRvTG93ZXJDYXNlKCldfHxlLGFbZV09dCksdGhpc30sb3ZlcnJpZGVNaW1lVHlwZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09aCYmKHYubWltZVR5cGU9ZSksdGhpc30sc3RhdHVzQ29kZTpmdW5jdGlvbihlKXt2YXIgdDtpZihlKWlmKGgpVC5hbHdheXMoZVtULnN0YXR1c10pO2Vsc2UgZm9yKHQgaW4gZSl3W3RdPVt3W3RdLGVbdF1dO3JldHVybiB0aGlzfSxhYm9ydDpmdW5jdGlvbihlKXt2YXIgdD1lfHx1O3JldHVybiBjJiZjLmFib3J0KHQpLGwoMCx0KSx0aGlzfX07aWYoeC5wcm9taXNlKFQpLHYudXJsPSgoZXx8di51cmx8fFR0LmhyZWYpK1wiXCIpLnJlcGxhY2UoUHQsVHQucHJvdG9jb2wrXCIvL1wiKSx2LnR5cGU9dC5tZXRob2R8fHQudHlwZXx8di5tZXRob2R8fHYudHlwZSx2LmRhdGFUeXBlcz0odi5kYXRhVHlwZXx8XCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2goUCl8fFtcIlwiXSxudWxsPT12LmNyb3NzRG9tYWluKXtyPUUuY3JlYXRlRWxlbWVudChcImFcIik7dHJ5e3IuaHJlZj12LnVybCxyLmhyZWY9ci5ocmVmLHYuY3Jvc3NEb21haW49V3QucHJvdG9jb2wrXCIvL1wiK1d0Lmhvc3QhPXIucHJvdG9jb2wrXCIvL1wiK3IuaG9zdH1jYXRjaChlKXt2LmNyb3NzRG9tYWluPSEwfX1pZih2LmRhdGEmJnYucHJvY2Vzc0RhdGEmJlwic3RyaW5nXCIhPXR5cGVvZiB2LmRhdGEmJih2LmRhdGE9Uy5wYXJhbSh2LmRhdGEsdi50cmFkaXRpb25hbCkpLEJ0KFJ0LHYsdCxUKSxoKXJldHVybiBUO2ZvcihpIGluKGc9Uy5ldmVudCYmdi5nbG9iYWwpJiYwPT1TLmFjdGl2ZSsrJiZTLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIiksdi50eXBlPXYudHlwZS50b1VwcGVyQ2FzZSgpLHYuaGFzQ29udGVudD0hT3QudGVzdCh2LnR5cGUpLGY9di51cmwucmVwbGFjZShxdCxcIlwiKSx2Lmhhc0NvbnRlbnQ/di5kYXRhJiZ2LnByb2Nlc3NEYXRhJiYwPT09KHYuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJih2LmRhdGE9di5kYXRhLnJlcGxhY2UoanQsXCIrXCIpKToobz12LnVybC5zbGljZShmLmxlbmd0aCksdi5kYXRhJiYodi5wcm9jZXNzRGF0YXx8XCJzdHJpbmdcIj09dHlwZW9mIHYuZGF0YSkmJihmKz0oRXQudGVzdChmKT9cIiZcIjpcIj9cIikrdi5kYXRhLGRlbGV0ZSB2LmRhdGEpLCExPT09di5jYWNoZSYmKGY9Zi5yZXBsYWNlKEx0LFwiJDFcIiksbz0oRXQudGVzdChmKT9cIiZcIjpcIj9cIikrXCJfPVwiK0N0Lmd1aWQrKytvKSx2LnVybD1mK28pLHYuaWZNb2RpZmllZCYmKFMubGFzdE1vZGlmaWVkW2ZdJiZULnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLFMubGFzdE1vZGlmaWVkW2ZdKSxTLmV0YWdbZl0mJlQuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIixTLmV0YWdbZl0pKSwodi5kYXRhJiZ2Lmhhc0NvbnRlbnQmJiExIT09di5jb250ZW50VHlwZXx8dC5jb250ZW50VHlwZSkmJlQuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLHYuY29udGVudFR5cGUpLFQuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLHYuZGF0YVR5cGVzWzBdJiZ2LmFjY2VwdHNbdi5kYXRhVHlwZXNbMF1dP3YuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV0rKFwiKlwiIT09di5kYXRhVHlwZXNbMF0/XCIsIFwiK0l0K1wiOyBxPTAuMDFcIjpcIlwiKTp2LmFjY2VwdHNbXCIqXCJdKSx2LmhlYWRlcnMpVC5zZXRSZXF1ZXN0SGVhZGVyKGksdi5oZWFkZXJzW2ldKTtpZih2LmJlZm9yZVNlbmQmJighMT09PXYuYmVmb3JlU2VuZC5jYWxsKHksVCx2KXx8aCkpcmV0dXJuIFQuYWJvcnQoKTtpZih1PVwiYWJvcnRcIixiLmFkZCh2LmNvbXBsZXRlKSxULmRvbmUodi5zdWNjZXNzKSxULmZhaWwodi5lcnJvciksYz1CdChNdCx2LHQsVCkpe2lmKFQucmVhZHlTdGF0ZT0xLGcmJm0udHJpZ2dlcihcImFqYXhTZW5kXCIsW1Qsdl0pLGgpcmV0dXJuIFQ7di5hc3luYyYmMDx2LnRpbWVvdXQmJihkPUMuc2V0VGltZW91dChmdW5jdGlvbigpe1QuYWJvcnQoXCJ0aW1lb3V0XCIpfSx2LnRpbWVvdXQpKTt0cnl7aD0hMSxjLnNlbmQoYSxsKX1jYXRjaChlKXtpZihoKXRocm93IGU7bCgtMSxlKX19ZWxzZSBsKC0xLFwiTm8gVHJhbnNwb3J0XCIpO2Z1bmN0aW9uIGwoZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXQ7aHx8KGg9ITAsZCYmQy5jbGVhclRpbWVvdXQoZCksYz12b2lkIDAscD1yfHxcIlwiLFQucmVhZHlTdGF0ZT0wPGU/NDowLGk9MjAwPD1lJiZlPDMwMHx8MzA0PT09ZSxuJiYocz1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscz1lLmNvbnRlbnRzLHU9ZS5kYXRhVHlwZXM7d2hpbGUoXCIqXCI9PT11WzBdKXUuc2hpZnQoKSx2b2lkIDA9PT1yJiYocj1lLm1pbWVUeXBlfHx0LmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtpZihyKWZvcihpIGluIHMpaWYoc1tpXSYmc1tpXS50ZXN0KHIpKXt1LnVuc2hpZnQoaSk7YnJlYWt9aWYodVswXWluIG4pbz11WzBdO2Vsc2V7Zm9yKGkgaW4gbil7aWYoIXVbMF18fGUuY29udmVydGVyc1tpK1wiIFwiK3VbMF1dKXtvPWk7YnJlYWt9YXx8KGE9aSl9bz1vfHxhfWlmKG8pcmV0dXJuIG8hPT11WzBdJiZ1LnVuc2hpZnQobyksbltvXX0odixULG4pKSwhaSYmLTE8Uy5pbkFycmF5KFwic2NyaXB0XCIsdi5kYXRhVHlwZXMpJiYodi5jb252ZXJ0ZXJzW1widGV4dCBzY3JpcHRcIl09ZnVuY3Rpb24oKXt9KSxzPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbD17fSxjPWUuZGF0YVR5cGVzLnNsaWNlKCk7aWYoY1sxXSlmb3IoYSBpbiBlLmNvbnZlcnRlcnMpbFthLnRvTG93ZXJDYXNlKCldPWUuY29udmVydGVyc1thXTtvPWMuc2hpZnQoKTt3aGlsZShvKWlmKGUucmVzcG9uc2VGaWVsZHNbb10mJihuW2UucmVzcG9uc2VGaWVsZHNbb11dPXQpLCF1JiZyJiZlLmRhdGFGaWx0ZXImJih0PWUuZGF0YUZpbHRlcih0LGUuZGF0YVR5cGUpKSx1PW8sbz1jLnNoaWZ0KCkpaWYoXCIqXCI9PT1vKW89dTtlbHNlIGlmKFwiKlwiIT09dSYmdSE9PW8pe2lmKCEoYT1sW3UrXCIgXCIrb118fGxbXCIqIFwiK29dKSlmb3IoaSBpbiBsKWlmKChzPWkuc3BsaXQoXCIgXCIpKVsxXT09PW8mJihhPWxbdStcIiBcIitzWzBdXXx8bFtcIiogXCIrc1swXV0pKXshMD09PWE/YT1sW2ldOiEwIT09bFtpXSYmKG89c1swXSxjLnVuc2hpZnQoc1sxXSkpO2JyZWFrfWlmKCEwIT09YSlpZihhJiZlW1widGhyb3dzXCJdKXQ9YSh0KTtlbHNlIHRyeXt0PWEodCl9Y2F0Y2goZSl7cmV0dXJue3N0YXRlOlwicGFyc2VyZXJyb3JcIixlcnJvcjphP2U6XCJObyBjb252ZXJzaW9uIGZyb20gXCIrdStcIiB0byBcIitvfX19cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6dH19KHYscyxULGkpLGk/KHYuaWZNb2RpZmllZCYmKCh1PVQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpKSYmKFMubGFzdE1vZGlmaWVkW2ZdPXUpLCh1PVQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpKSYmKFMuZXRhZ1tmXT11KSksMjA0PT09ZXx8XCJIRUFEXCI9PT12LnR5cGU/bD1cIm5vY29udGVudFwiOjMwND09PWU/bD1cIm5vdG1vZGlmaWVkXCI6KGw9cy5zdGF0ZSxvPXMuZGF0YSxpPSEoYT1zLmVycm9yKSkpOihhPWwsIWUmJmx8fChsPVwiZXJyb3JcIixlPDAmJihlPTApKSksVC5zdGF0dXM9ZSxULnN0YXR1c1RleHQ9KHR8fGwpK1wiXCIsaT94LnJlc29sdmVXaXRoKHksW28sbCxUXSk6eC5yZWplY3RXaXRoKHksW1QsbCxhXSksVC5zdGF0dXNDb2RlKHcpLHc9dm9pZCAwLGcmJm0udHJpZ2dlcihpP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFtULHYsaT9vOmFdKSxiLmZpcmVXaXRoKHksW1QsbF0pLGcmJihtLnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbVCx2XSksLS1TLmFjdGl2ZXx8Uy5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKX1yZXR1cm4gVH0sZ2V0SlNPTjpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFMuZ2V0KGUsdCxuLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIFMuZ2V0KGUsdm9pZCAwLHQsXCJzY3JpcHRcIil9fSksUy5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihlLGkpe1NbaV09ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIG0odCkmJihyPXJ8fG4sbj10LHQ9dm9pZCAwKSxTLmFqYXgoUy5leHRlbmQoe3VybDplLHR5cGU6aSxkYXRhVHlwZTpyLGRhdGE6dCxzdWNjZXNzOm59LFMuaXNQbGFpbk9iamVjdChlKSYmZSkpfX0pLFMuYWpheFByZWZpbHRlcihmdW5jdGlvbihlKXt2YXIgdDtmb3IodCBpbiBlLmhlYWRlcnMpXCJjb250ZW50LXR5cGVcIj09PXQudG9Mb3dlckNhc2UoKSYmKGUuY29udGVudFR5cGU9ZS5oZWFkZXJzW3RdfHxcIlwiKX0pLFMuX2V2YWxVcmw9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBTLmFqYXgoe3VybDplLHR5cGU6XCJHRVRcIixkYXRhVHlwZTpcInNjcmlwdFwiLGNhY2hlOiEwLGFzeW5jOiExLGdsb2JhbDohMSxjb252ZXJ0ZXJzOntcInRleHQgc2NyaXB0XCI6ZnVuY3Rpb24oKXt9fSxkYXRhRmlsdGVyOmZ1bmN0aW9uKGUpe1MuZ2xvYmFsRXZhbChlLHQsbil9fSl9LFMuZm4uZXh0ZW5kKHt3cmFwQWxsOmZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiB0aGlzWzBdJiYobShlKSYmKGU9ZS5jYWxsKHRoaXNbMF0pKSx0PVMoZSx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSx0aGlzWzBdLnBhcmVudE5vZGUmJnQuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLHQubWFwKGZ1bmN0aW9uKCl7dmFyIGU9dGhpczt3aGlsZShlLmZpcnN0RWxlbWVudENoaWxkKWU9ZS5maXJzdEVsZW1lbnRDaGlsZDtyZXR1cm4gZX0pLmFwcGVuZCh0aGlzKSksdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKG4pe3JldHVybiBtKG4pP3RoaXMuZWFjaChmdW5jdGlvbihlKXtTKHRoaXMpLndyYXBJbm5lcihuLmNhbGwodGhpcyxlKSl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1TKHRoaXMpLHQ9ZS5jb250ZW50cygpO3QubGVuZ3RoP3Qud3JhcEFsbChuKTplLmFwcGVuZChuKX0pfSx3cmFwOmZ1bmN0aW9uKHQpe3ZhciBuPW0odCk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtTKHRoaXMpLndyYXBBbGwobj90LmNhbGwodGhpcyxlKTp0KX0pfSx1bndyYXA6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucGFyZW50KGUpLm5vdChcImJvZHlcIikuZWFjaChmdW5jdGlvbigpe1ModGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKX0pLHRoaXN9fSksUy5leHByLnBzZXVkb3MuaGlkZGVuPWZ1bmN0aW9uKGUpe3JldHVybiFTLmV4cHIucHNldWRvcy52aXNpYmxlKGUpfSxTLmV4cHIucHNldWRvcy52aXNpYmxlPWZ1bmN0aW9uKGUpe3JldHVybiEhKGUub2Zmc2V0V2lkdGh8fGUub2Zmc2V0SGVpZ2h0fHxlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoKX0sUy5hamF4U2V0dGluZ3MueGhyPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBuZXcgQy5YTUxIdHRwUmVxdWVzdH1jYXRjaChlKXt9fTt2YXIgX3Q9ezA6MjAwLDEyMjM6MjA0fSx6dD1TLmFqYXhTZXR0aW5ncy54aHIoKTt5LmNvcnM9ISF6dCYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIHp0LHkuYWpheD16dD0hIXp0LFMuYWpheFRyYW5zcG9ydChmdW5jdGlvbihpKXt2YXIgbyxhO2lmKHkuY29yc3x8enQmJiFpLmNyb3NzRG9tYWluKXJldHVybntzZW5kOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1pLnhocigpO2lmKHIub3BlbihpLnR5cGUsaS51cmwsaS5hc3luYyxpLnVzZXJuYW1lLGkucGFzc3dvcmQpLGkueGhyRmllbGRzKWZvcihuIGluIGkueGhyRmllbGRzKXJbbl09aS54aHJGaWVsZHNbbl07Zm9yKG4gaW4gaS5taW1lVHlwZSYmci5vdmVycmlkZU1pbWVUeXBlJiZyLm92ZXJyaWRlTWltZVR5cGUoaS5taW1lVHlwZSksaS5jcm9zc0RvbWFpbnx8ZVtcIlgtUmVxdWVzdGVkLVdpdGhcIl18fChlW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXT1cIlhNTEh0dHBSZXF1ZXN0XCIpLGUpci5zZXRSZXF1ZXN0SGVhZGVyKG4sZVtuXSk7bz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtvJiYobz1hPXIub25sb2FkPXIub25lcnJvcj1yLm9uYWJvcnQ9ci5vbnRpbWVvdXQ9ci5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxcImFib3J0XCI9PT1lP3IuYWJvcnQoKTpcImVycm9yXCI9PT1lP1wibnVtYmVyXCIhPXR5cGVvZiByLnN0YXR1cz90KDAsXCJlcnJvclwiKTp0KHIuc3RhdHVzLHIuc3RhdHVzVGV4dCk6dChfdFtyLnN0YXR1c118fHIuc3RhdHVzLHIuc3RhdHVzVGV4dCxcInRleHRcIiE9PShyLnJlc3BvbnNlVHlwZXx8XCJ0ZXh0XCIpfHxcInN0cmluZ1wiIT10eXBlb2Ygci5yZXNwb25zZVRleHQ/e2JpbmFyeTpyLnJlc3BvbnNlfTp7dGV4dDpyLnJlc3BvbnNlVGV4dH0sci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfX0sci5vbmxvYWQ9bygpLGE9ci5vbmVycm9yPXIub250aW1lb3V0PW8oXCJlcnJvclwiKSx2b2lkIDAhPT1yLm9uYWJvcnQ/ci5vbmFib3J0PWE6ci5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXs0PT09ci5yZWFkeVN0YXRlJiZDLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtvJiZhKCl9KX0sbz1vKFwiYWJvcnRcIik7dHJ5e3Iuc2VuZChpLmhhc0NvbnRlbnQmJmkuZGF0YXx8bnVsbCl9Y2F0Y2goZSl7aWYobyl0aHJvdyBlfX0sYWJvcnQ6ZnVuY3Rpb24oKXtvJiZvKCl9fX0pLFMuYWpheFByZWZpbHRlcihmdW5jdGlvbihlKXtlLmNyb3NzRG9tYWluJiYoZS5jb250ZW50cy5zY3JpcHQ9ITEpfSksUy5hamF4U2V0dXAoe2FjY2VwdHM6e3NjcmlwdDpcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJ9LGNvbnRlbnRzOntzY3JpcHQ6L1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvfSxjb252ZXJ0ZXJzOntcInRleHQgc2NyaXB0XCI6ZnVuY3Rpb24oZSl7cmV0dXJuIFMuZ2xvYmFsRXZhbChlKSxlfX19KSxTLmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIixmdW5jdGlvbihlKXt2b2lkIDA9PT1lLmNhY2hlJiYoZS5jYWNoZT0hMSksZS5jcm9zc0RvbWFpbiYmKGUudHlwZT1cIkdFVFwiKX0pLFMuYWpheFRyYW5zcG9ydChcInNjcmlwdFwiLGZ1bmN0aW9uKG4pe3ZhciByLGk7aWYobi5jcm9zc0RvbWFpbnx8bi5zY3JpcHRBdHRycylyZXR1cm57c2VuZDpmdW5jdGlvbihlLHQpe3I9UyhcIjxzY3JpcHQ+XCIpLmF0dHIobi5zY3JpcHRBdHRyc3x8e30pLnByb3Aoe2NoYXJzZXQ6bi5zY3JpcHRDaGFyc2V0LHNyYzpuLnVybH0pLm9uKFwibG9hZCBlcnJvclwiLGk9ZnVuY3Rpb24oZSl7ci5yZW1vdmUoKSxpPW51bGwsZSYmdChcImVycm9yXCI9PT1lLnR5cGU/NDA0OjIwMCxlLnR5cGUpfSksRS5oZWFkLmFwcGVuZENoaWxkKHJbMF0pfSxhYm9ydDpmdW5jdGlvbigpe2kmJmkoKX19fSk7dmFyIFV0LFh0PVtdLFZ0PS8oPSlcXD8oPz0mfCQpfFxcP1xcPy87Uy5hamF4U2V0dXAoe2pzb25wOlwiY2FsbGJhY2tcIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGU9WHQucG9wKCl8fFMuZXhwYW5kbytcIl9cIitDdC5ndWlkKys7cmV0dXJuIHRoaXNbZV09ITAsZX19KSxTLmFqYXhQcmVmaWx0ZXIoXCJqc29uIGpzb25wXCIsZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPSExIT09ZS5qc29ucCYmKFZ0LnRlc3QoZS51cmwpP1widXJsXCI6XCJzdHJpbmdcIj09dHlwZW9mIGUuZGF0YSYmMD09PShlLmNvbnRlbnRUeXBlfHxcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpJiZWdC50ZXN0KGUuZGF0YSkmJlwiZGF0YVwiKTtpZihhfHxcImpzb25wXCI9PT1lLmRhdGFUeXBlc1swXSlyZXR1cm4gcj1lLmpzb25wQ2FsbGJhY2s9bShlLmpzb25wQ2FsbGJhY2spP2UuanNvbnBDYWxsYmFjaygpOmUuanNvbnBDYWxsYmFjayxhP2VbYV09ZVthXS5yZXBsYWNlKFZ0LFwiJDFcIityKTohMSE9PWUuanNvbnAmJihlLnVybCs9KEV0LnRlc3QoZS51cmwpP1wiJlwiOlwiP1wiKStlLmpzb25wK1wiPVwiK3IpLGUuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdPWZ1bmN0aW9uKCl7cmV0dXJuIG98fFMuZXJyb3IocitcIiB3YXMgbm90IGNhbGxlZFwiKSxvWzBdfSxlLmRhdGFUeXBlc1swXT1cImpzb25cIixpPUNbcl0sQ1tyXT1mdW5jdGlvbigpe289YXJndW1lbnRzfSxuLmFsd2F5cyhmdW5jdGlvbigpe3ZvaWQgMD09PWk/UyhDKS5yZW1vdmVQcm9wKHIpOkNbcl09aSxlW3JdJiYoZS5qc29ucENhbGxiYWNrPXQuanNvbnBDYWxsYmFjayxYdC5wdXNoKHIpKSxvJiZtKGkpJiZpKG9bMF0pLG89aT12b2lkIDB9KSxcInNjcmlwdFwifSkseS5jcmVhdGVIVE1MRG9jdW1lbnQ9KChVdD1FLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5KS5pbm5lckhUTUw9XCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiLDI9PT1VdC5jaGlsZE5vZGVzLmxlbmd0aCksUy5wYXJzZUhUTUw9ZnVuY3Rpb24oZSx0LG4pe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlP1tdOihcImJvb2xlYW5cIj09dHlwZW9mIHQmJihuPXQsdD0hMSksdHx8KHkuY3JlYXRlSFRNTERvY3VtZW50Pygocj0odD1FLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSkuY3JlYXRlRWxlbWVudChcImJhc2VcIikpLmhyZWY9RS5sb2NhdGlvbi5ocmVmLHQuaGVhZC5hcHBlbmRDaGlsZChyKSk6dD1FKSxvPSFuJiZbXSwoaT1OLmV4ZWMoZSkpP1t0LmNyZWF0ZUVsZW1lbnQoaVsxXSldOihpPXhlKFtlXSx0LG8pLG8mJm8ubGVuZ3RoJiZTKG8pLnJlbW92ZSgpLFMubWVyZ2UoW10saS5jaGlsZE5vZGVzKSkpO3ZhciByLGksb30sUy5mbi5sb2FkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYT10aGlzLHM9ZS5pbmRleE9mKFwiIFwiKTtyZXR1cm4tMTxzJiYocj12dChlLnNsaWNlKHMpKSxlPWUuc2xpY2UoMCxzKSksbSh0KT8obj10LHQ9dm9pZCAwKTp0JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmKGk9XCJQT1NUXCIpLDA8YS5sZW5ndGgmJlMuYWpheCh7dXJsOmUsdHlwZTppfHxcIkdFVFwiLGRhdGFUeXBlOlwiaHRtbFwiLGRhdGE6dH0pLmRvbmUoZnVuY3Rpb24oZSl7bz1hcmd1bWVudHMsYS5odG1sKHI/UyhcIjxkaXY+XCIpLmFwcGVuZChTLnBhcnNlSFRNTChlKSkuZmluZChyKTplKX0pLmFsd2F5cyhuJiZmdW5jdGlvbihlLHQpe2EuZWFjaChmdW5jdGlvbigpe24uYXBwbHkodGhpcyxvfHxbZS5yZXNwb25zZVRleHQsdCxlXSl9KX0pLHRoaXN9LFMuZXhwci5wc2V1ZG9zLmFuaW1hdGVkPWZ1bmN0aW9uKHQpe3JldHVybiBTLmdyZXAoUy50aW1lcnMsZnVuY3Rpb24oZSl7cmV0dXJuIHQ9PT1lLmVsZW19KS5sZW5ndGh9LFMub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsPVMuY3NzKGUsXCJwb3NpdGlvblwiKSxjPVMoZSksZj17fTtcInN0YXRpY1wiPT09bCYmKGUuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxzPWMub2Zmc2V0KCksbz1TLmNzcyhlLFwidG9wXCIpLHU9Uy5jc3MoZSxcImxlZnRcIiksKFwiYWJzb2x1dGVcIj09PWx8fFwiZml4ZWRcIj09PWwpJiYtMTwobyt1KS5pbmRleE9mKFwiYXV0b1wiKT8oYT0ocj1jLnBvc2l0aW9uKCkpLnRvcCxpPXIubGVmdCk6KGE9cGFyc2VGbG9hdChvKXx8MCxpPXBhcnNlRmxvYXQodSl8fDApLG0odCkmJih0PXQuY2FsbChlLG4sUy5leHRlbmQoe30scykpKSxudWxsIT10LnRvcCYmKGYudG9wPXQudG9wLXMudG9wK2EpLG51bGwhPXQubGVmdCYmKGYubGVmdD10LmxlZnQtcy5sZWZ0K2kpLFwidXNpbmdcImluIHQ/dC51c2luZy5jYWxsKGUsZik6KFwibnVtYmVyXCI9PXR5cGVvZiBmLnRvcCYmKGYudG9wKz1cInB4XCIpLFwibnVtYmVyXCI9PXR5cGVvZiBmLmxlZnQmJihmLmxlZnQrPVwicHhcIiksYy5jc3MoZikpfX0sUy5mbi5leHRlbmQoe29mZnNldDpmdW5jdGlvbih0KXtpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiB2b2lkIDA9PT10P3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKGUpe1Mub2Zmc2V0LnNldE9mZnNldCh0aGlzLHQsZSl9KTt2YXIgZSxuLHI9dGhpc1swXTtyZXR1cm4gcj9yLmdldENsaWVudFJlY3RzKCkubGVuZ3RoPyhlPXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj1yLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcse3RvcDplLnRvcCtuLnBhZ2VZT2Zmc2V0LGxlZnQ6ZS5sZWZ0K24ucGFnZVhPZmZzZXR9KTp7dG9wOjAsbGVmdDowfTp2b2lkIDB9LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGUsdCxuLHI9dGhpc1swXSxpPXt0b3A6MCxsZWZ0OjB9O2lmKFwiZml4ZWRcIj09PVMuY3NzKHIsXCJwb3NpdGlvblwiKSl0PXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZWxzZXt0PXRoaXMub2Zmc2V0KCksbj1yLm93bmVyRG9jdW1lbnQsZT1yLm9mZnNldFBhcmVudHx8bi5kb2N1bWVudEVsZW1lbnQ7d2hpbGUoZSYmKGU9PT1uLmJvZHl8fGU9PT1uLmRvY3VtZW50RWxlbWVudCkmJlwic3RhdGljXCI9PT1TLmNzcyhlLFwicG9zaXRpb25cIikpZT1lLnBhcmVudE5vZGU7ZSYmZSE9PXImJjE9PT1lLm5vZGVUeXBlJiYoKGk9UyhlKS5vZmZzZXQoKSkudG9wKz1TLmNzcyhlLFwiYm9yZGVyVG9wV2lkdGhcIiwhMCksaS5sZWZ0Kz1TLmNzcyhlLFwiYm9yZGVyTGVmdFdpZHRoXCIsITApKX1yZXR1cm57dG9wOnQudG9wLWkudG9wLVMuY3NzKHIsXCJtYXJnaW5Ub3BcIiwhMCksbGVmdDp0LmxlZnQtaS5sZWZ0LVMuY3NzKHIsXCJtYXJnaW5MZWZ0XCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50O3doaWxlKGUmJlwic3RhdGljXCI9PT1TLmNzcyhlLFwicG9zaXRpb25cIikpZT1lLm9mZnNldFBhcmVudDtyZXR1cm4gZXx8cmV9KX19KSxTLmVhY2goe3Njcm9sbExlZnQ6XCJwYWdlWE9mZnNldFwiLHNjcm9sbFRvcDpcInBhZ2VZT2Zmc2V0XCJ9LGZ1bmN0aW9uKHQsaSl7dmFyIG89XCJwYWdlWU9mZnNldFwiPT09aTtTLmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiAkKHRoaXMsZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKHgoZSk/cj1lOjk9PT1lLm5vZGVUeXBlJiYocj1lLmRlZmF1bHRWaWV3KSx2b2lkIDA9PT1uKXJldHVybiByP3JbaV06ZVt0XTtyP3Iuc2Nyb2xsVG8obz9yLnBhZ2VYT2Zmc2V0Om4sbz9uOnIucGFnZVlPZmZzZXQpOmVbdF09bn0sdCxlLGFyZ3VtZW50cy5sZW5ndGgpfX0pLFMuZWFjaChbXCJ0b3BcIixcImxlZnRcIl0sZnVuY3Rpb24oZSxuKXtTLmNzc0hvb2tzW25dPSRlKHkucGl4ZWxQb3NpdGlvbixmdW5jdGlvbihlLHQpe2lmKHQpcmV0dXJuIHQ9QmUoZSxuKSxNZS50ZXN0KHQpP1MoZSkucG9zaXRpb24oKVtuXStcInB4XCI6dH0pfSksUy5lYWNoKHtIZWlnaHQ6XCJoZWlnaHRcIixXaWR0aDpcIndpZHRoXCJ9LGZ1bmN0aW9uKGEscyl7Uy5lYWNoKHtwYWRkaW5nOlwiaW5uZXJcIithLGNvbnRlbnQ6cyxcIlwiOlwib3V0ZXJcIithfSxmdW5jdGlvbihyLG8pe1MuZm5bb109ZnVuY3Rpb24oZSx0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoJiYocnx8XCJib29sZWFuXCIhPXR5cGVvZiBlKSxpPXJ8fCghMD09PWV8fCEwPT09dD9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiAkKHRoaXMsZnVuY3Rpb24oZSx0LG4pe3ZhciByO3JldHVybiB4KGUpPzA9PT1vLmluZGV4T2YoXCJvdXRlclwiKT9lW1wiaW5uZXJcIithXTplLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiK2FdOjk9PT1lLm5vZGVUeXBlPyhyPWUuZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KGUuYm9keVtcInNjcm9sbFwiK2FdLHJbXCJzY3JvbGxcIithXSxlLmJvZHlbXCJvZmZzZXRcIithXSxyW1wib2Zmc2V0XCIrYV0scltcImNsaWVudFwiK2FdKSk6dm9pZCAwPT09bj9TLmNzcyhlLHQsaSk6Uy5zdHlsZShlLHQsbixpKX0scyxuP2U6dm9pZCAwLG4pfX0pfSksUy5lYWNoKFtcImFqYXhTdGFydFwiLFwiYWpheFN0b3BcIixcImFqYXhDb21wbGV0ZVwiLFwiYWpheEVycm9yXCIsXCJhamF4U3VjY2Vzc1wiLFwiYWpheFNlbmRcIl0sZnVuY3Rpb24oZSx0KXtTLmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9uKHQsZSl9fSksUy5mbi5leHRlbmQoe2JpbmQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLm9uKGUsbnVsbCx0LG4pfSx1bmJpbmQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vZmYoZSxudWxsLHQpfSxkZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5vbih0LGUsbixyKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGUsXCIqKlwiKTp0aGlzLm9mZih0LGV8fFwiKipcIixuKX0saG92ZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGUpLm1vdXNlbGVhdmUodHx8ZSl9fSksUy5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLG4pe1MuZm5bbl09ZnVuY3Rpb24oZSx0KXtyZXR1cm4gMDxhcmd1bWVudHMubGVuZ3RoP3RoaXMub24obixudWxsLGUsdCk6dGhpcy50cmlnZ2VyKG4pfX0pO3ZhciBHdD0vXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7Uy5wcm94eT1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCYmKG49ZVt0XSx0PWUsZT1uKSxtKGUpKXJldHVybiByPXMuY2FsbChhcmd1bWVudHMsMiksKGk9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0fHx0aGlzLHIuY29uY2F0KHMuY2FsbChhcmd1bWVudHMpKSl9KS5ndWlkPWUuZ3VpZD1lLmd1aWR8fFMuZ3VpZCsrLGl9LFMuaG9sZFJlYWR5PWZ1bmN0aW9uKGUpe2U/Uy5yZWFkeVdhaXQrKzpTLnJlYWR5KCEwKX0sUy5pc0FycmF5PUFycmF5LmlzQXJyYXksUy5wYXJzZUpTT049SlNPTi5wYXJzZSxTLm5vZGVOYW1lPUEsUy5pc0Z1bmN0aW9uPW0sUy5pc1dpbmRvdz14LFMuY2FtZWxDYXNlPVgsUy50eXBlPXcsUy5ub3c9RGF0ZS5ub3csUy5pc051bWVyaWM9ZnVuY3Rpb24oZSl7dmFyIHQ9Uy50eXBlKGUpO3JldHVybihcIm51bWJlclwiPT09dHx8XCJzdHJpbmdcIj09PXQpJiYhaXNOYU4oZS1wYXJzZUZsb2F0KGUpKX0sUy50cmltPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP1wiXCI6KGUrXCJcIikucmVwbGFjZShHdCxcIlwiKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJqcXVlcnlcIixbXSxmdW5jdGlvbigpe3JldHVybiBTfSk7dmFyIFl0PUMualF1ZXJ5LFF0PUMuJDtyZXR1cm4gUy5ub0NvbmZsaWN0PWZ1bmN0aW9uKGUpe3JldHVybiBDLiQ9PT1TJiYoQy4kPVF0KSxlJiZDLmpRdWVyeT09PVMmJihDLmpRdWVyeT1ZdCksU30sXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUmJihDLmpRdWVyeT1DLiQ9UyksU30pO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImltcG9ydCBkYXRlcGlja2VyIGZyb20gXCJhaXItZGF0ZXBpY2tlci9kaXN0L2pzL2RhdGVwaWNrZXIubWluLmpzXCI7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XG5cbiAgICAgaWYgKCQoJ2h0bWwnKS5hdHRyKCdsYW5nJyk9PSdlbicpIHtcblxuICAgICAgICAkLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2VbJ2VuJ10gPSAge1xuICAgICAgICAgICAgZGF5czogWyAnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknICwnU2F0dXJkYXknXSxcbiAgICAgICAgICAgIGRheXNTaG9ydDogWyAnU3VuJywgJ01vbicsICdUdWVzJywgJ1dlZCcsICdUaHVycycsICdGcmknLCAnU2F0J10sXG4gICAgICAgICAgICBkYXlzTWluOiBbICdTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICAgICAgICAgICAgbW9udGhzOiBbICdKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJyBdLFxuICAgICAgICAgICAgbW9udGhzU2hvcnQ6IFsgJ0phbi4nLCAnRmViLicsICdNYXIuJywgJ0Fwci4nLCAnTWF5JywgJ0p1bi4nLCAnSnVsLicsICdBdWcuJywgJ1NlcC4nLCAnT2N0LicsICdOb3YuJywgJ0RlYy4nIF0sXG4gICAgICAgICAgICB0b2RheTogJ1RvZGF5JyxcbiAgICAgICAgICAgIGNsZWFyOiAnQ2xlYXInLFxuICAgICAgICAgICAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5eXknLFxuICAgICAgICAgICAgdGltZUZvcm1hdDogJ2hoOmlpJyxcbiAgICAgICAgICAgIGZpcnN0RGF5OiA3XG4gICAgICAgIH07XG5cbiAgICAgICAgJCgnLmRhdGVwaWNrZXItYmVmb3JlLWpzJykuZGF0ZXBpY2tlcih7XG4gICAgICAgICAgICBsYW5ndWFnZTogJ2VuJyxcbiAgICAgICAgICAgIG1heERhdGU6IG5ldyBEYXRlKClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLmRhdGVwaWNrZXItYWZ0ZXItanMnKS5kYXRlcGlja2VyKHtcbiAgICAgICAgICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgICAgICAgICAgbWluRGF0ZTogbmV3IERhdGUoKVxuICAgICAgICB9KTtcblxuICAgIH0gZWxzZSBpZiAoJCgnaHRtbCcpLmF0dHIoJ2xhbmcnKT09J3VrJyl7XG4gICAgICAgICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZVsndWsnXSA9ICB7XG4gICAgICAgICAgICBkYXlzOiBbICfQndC10LTRltC70Y8nLCAn0L/QvtC90LXQtNGW0LvQvtC6JywgJ9Cy0ZbQstGC0L7RgNC+0LonLCAn0YHQtdGA0LXQtNCwJywgJ9GH0LXRgtCy0LXRgCcsICfQv1xcJ9GP0YLQvdC40YbRjicgLCcg0YHRg9Cx0L7RgtGDICddLFxuICAgICAgICAgICAgZGF5c1Nob3J0OiBbICfQktC+0YEnLCAn0J/QvtC9JywgJ9CS0ZbQsicsICfQodGA0LUnLCAn0KfQtdGCJywgJ9CfXFwn0Y/RgicsICfQodGD0LEnXSxcbiAgICAgICAgICAgIGRheXNNaW46IFsgJ9Cd0LQnLCAn0J/QvScsICfQktGCJywgJ9Ch0YAnLCAn0KfRgicsICfQn9GCJywgJ9Ch0LEnXSxcbiAgICAgICAgICAgIG1vbnRoczogWyAn0KHRltGH0LXQvdGMJywgJ9Cb0Y7RgtC40LknLCAn0JHQtdGA0LXQt9C10L3RjCcsICfQmtCy0ZbRgtC10L3RjCcsICfQotGA0LDQstC10L3RjCcsICfQp9C10YDQstC10L3RjCcsICfQm9C40L/QtdC90YwnLCAn0KHQtdGA0L/QtdC90YwnLCAn0JLQtdGA0LXRgdC10L3RjCcsICfQltC+0LLRgtC10L3RjCcsICfQm9C40YHRgtC+0L/QsNC0JywgJ9CT0YDRg9C00LXQvdGMJyBdLFxuICAgICAgICAgICAgbW9udGhzU2hvcnQ6IFsgJ9GB0ZbRh9C10L3RjCcsICfQu9GO0YLQuNC5JywgJ9Cx0LXRgNC10LfQvdGMJywgJ9C60LLRltGC0LXQvdGMJywgJ9GC0YDQsNCy0LXQvdGMJywgJ9GH0LXRgNCy0LXQvdGMJywgJ9C70LjQv9C10L3RjCcsICfRgdC10YDQv9C10L3RjCcsICfQstC10YDQtdGB0LXQvdGMJywgJ9C20L7QstGC0LXQvdGMJywgJ9C70LjRgdGC0L7Qv9Cw0LQnLCAn0LPRgNGD0LTQtdC90YwnIF0sXG4gICAgICAgICAgICB0b2RheTogJ9Ch0LXQs9C+0LTQvdGPJyxcbiAgICAgICAgICAgIGNsZWFyOiAn0J7Rh9C40YHRgtC40YLRjCcsXG4gICAgICAgICAgICBkYXRlRm9ybWF0OiAnZGQubW0ueXl5eScsXG4gICAgICAgICAgICB0aW1lRm9ybWF0OiAnaGg6aWknLFxuICAgICAgICAgICAgZmlyc3REYXk6IDFcbiAgICAgICAgfTtcblxuICAgICAgICAkKCcuZGF0ZXBpY2tlci1iZWZvcmUtanMnKS5kYXRlcGlja2VyKHtcbiAgICAgICAgICAgIGxhbmd1YWdlOiAndWsnLFxuICAgICAgICAgICAgbWF4RGF0ZTogbmV3IERhdGUoKVxuICAgICAgICB9KTtcblxuICAgICAgICAkKCcuZGF0ZXBpY2tlci1hZnRlci1qcycpLmRhdGVwaWNrZXIoe1xuICAgICAgICAgICAgbGFuZ3VhZ2U6ICd1aycsXG4gICAgICAgICAgICBtaW5EYXRlOiBuZXcgRGF0ZSgpXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKCcuZGF0ZXBpY2tlci1iZWZvcmUtanMnKS5kYXRlcGlja2VyKHtcbiAgICAgICAgICAgIG1heERhdGU6IG5ldyBEYXRlKClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLmRhdGVwaWNrZXItYWZ0ZXItanMnKS5kYXRlcGlja2VyKHtcbiAgICAgICAgICAgIG1pbkRhdGU6IG5ldyBEYXRlKClcbiAgICAgICAgfSk7XG4gICAgfVxuXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9